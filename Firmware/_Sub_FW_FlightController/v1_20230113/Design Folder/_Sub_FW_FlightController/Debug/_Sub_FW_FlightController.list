
_Sub_FW_FlightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab78  08000240  08000240  00010240  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800adb8  0800adb8  0001adb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800aeb8  0800aeb8  0001aeb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800aec0  0800aec0  0001aec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800aec4  0800aec4  0001aec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000009  20000000  0800aec8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000b70  2000000c  0800aed1  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000b7c  0800aed1  00020b7c  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020009  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003f  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002528c  00000000  00000000  00020082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000423e  00000000  00000000  0004530e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001f00  00000000  00000000  00049550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000180a  00000000  00000000  0004b450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0000509f  00000000  00000000  0004cc5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00024054  00000000  00000000  00051cf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00176652  00000000  00000000  00075d4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00008584  00000000  00000000  001ec3a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000009f  00000000  00000000  001f4924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000240 <__do_global_dtors_aux>:
 8000240:	b510      	push	{r4, lr}
 8000242:	4c05      	ldr	r4, [pc, #20]	; (8000258 <__do_global_dtors_aux+0x18>)
 8000244:	7823      	ldrb	r3, [r4, #0]
 8000246:	b933      	cbnz	r3, 8000256 <__do_global_dtors_aux+0x16>
 8000248:	4b04      	ldr	r3, [pc, #16]	; (800025c <__do_global_dtors_aux+0x1c>)
 800024a:	b113      	cbz	r3, 8000252 <__do_global_dtors_aux+0x12>
 800024c:	4804      	ldr	r0, [pc, #16]	; (8000260 <__do_global_dtors_aux+0x20>)
 800024e:	f3af 8000 	nop.w
 8000252:	2301      	movs	r3, #1
 8000254:	7023      	strb	r3, [r4, #0]
 8000256:	bd10      	pop	{r4, pc}
 8000258:	2000000c 	.word	0x2000000c
 800025c:	00000000 	.word	0x00000000
 8000260:	0800ada0 	.word	0x0800ada0

08000264 <frame_dummy>:
 8000264:	b508      	push	{r3, lr}
 8000266:	4b03      	ldr	r3, [pc, #12]	; (8000274 <frame_dummy+0x10>)
 8000268:	b11b      	cbz	r3, 8000272 <frame_dummy+0xe>
 800026a:	4903      	ldr	r1, [pc, #12]	; (8000278 <frame_dummy+0x14>)
 800026c:	4803      	ldr	r0, [pc, #12]	; (800027c <frame_dummy+0x18>)
 800026e:	f3af 8000 	nop.w
 8000272:	bd08      	pop	{r3, pc}
 8000274:	00000000 	.word	0x00000000
 8000278:	20000010 	.word	0x20000010
 800027c:	0800ada0 	.word	0x0800ada0

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b982 	b.w	800059c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002b4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d146      	bne.n	800034e <__udivmoddi4+0x9e>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d95e      	bls.n	8000384 <__udivmoddi4+0xd4>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	409c      	lsls	r4, r3
 80002d8:	fa20 f202 	lsr.w	r2, r0, r2
 80002dc:	4317      	orrs	r7, r2
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	0c22      	lsrs	r2, r4, #16
 80002e8:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	fb01 f005 	mul.w	r0, r1, r5
 80002f4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d908      	bls.n	800030e <__udivmoddi4+0x5e>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	d202      	bcs.n	800030c <__udivmoddi4+0x5c>
 8000306:	4290      	cmp	r0, r2
 8000308:	f200 8134 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 800030c:	4639      	mov	r1, r7
 800030e:	1a12      	subs	r2, r2, r0
 8000310:	b2a4      	uxth	r4, r4
 8000312:	fbb2 f0fe 	udiv	r0, r2, lr
 8000316:	fb0e 2210 	mls	r2, lr, r0, r2
 800031a:	fb00 f505 	mul.w	r5, r0, r5
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	42a5      	cmp	r5, r4
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x88>
 8000326:	eb1c 0404 	adds.w	r4, ip, r4
 800032a:	f100 32ff 	add.w	r2, r0, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x86>
 8000330:	42a5      	cmp	r5, r4
 8000332:	f200 8119 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 8000336:	4610      	mov	r0, r2
 8000338:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800033c:	1b64      	subs	r4, r4, r5
 800033e:	2100      	movs	r1, #0
 8000340:	b11e      	cbz	r6, 800034a <__udivmoddi4+0x9a>
 8000342:	40dc      	lsrs	r4, r3
 8000344:	2300      	movs	r3, #0
 8000346:	e9c6 4300 	strd	r4, r3, [r6]
 800034a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0xb4>
 8000352:	2e00      	cmp	r6, #0
 8000354:	f000 80fc 	beq.w	8000550 <__udivmoddi4+0x2a0>
 8000358:	2100      	movs	r1, #0
 800035a:	e9c6 0500 	strd	r0, r5, [r6]
 800035e:	4608      	mov	r0, r1
 8000360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000364:	fab3 f183 	clz	r1, r3
 8000368:	2900      	cmp	r1, #0
 800036a:	d14c      	bne.n	8000406 <__udivmoddi4+0x156>
 800036c:	42ab      	cmp	r3, r5
 800036e:	f0c0 80f2 	bcc.w	8000556 <__udivmoddi4+0x2a6>
 8000372:	4282      	cmp	r2, r0
 8000374:	f240 80ef 	bls.w	8000556 <__udivmoddi4+0x2a6>
 8000378:	4608      	mov	r0, r1
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e5      	beq.n	800034a <__udivmoddi4+0x9a>
 800037e:	e9c6 4700 	strd	r4, r7, [r6]
 8000382:	e7e2      	b.n	800034a <__udivmoddi4+0x9a>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xd8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f382 	clz	r3, r2
 800038c:	2b00      	cmp	r3, #0
 800038e:	f040 809f 	bne.w	80004d0 <__udivmoddi4+0x220>
 8000392:	1a8a      	subs	r2, r1, r2
 8000394:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000398:	fa1f f78c 	uxth.w	r7, ip
 800039c:	2101      	movs	r1, #1
 800039e:	fbb2 f5fe 	udiv	r5, r2, lr
 80003a2:	fb0e 2015 	mls	r0, lr, r5, r2
 80003a6:	0c22      	lsrs	r2, r4, #16
 80003a8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ac:	fb07 f005 	mul.w	r0, r7, r5
 80003b0:	4290      	cmp	r0, r2
 80003b2:	d90f      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003b4:	eb1c 0202 	adds.w	r2, ip, r2
 80003b8:	f105 38ff 	add.w	r8, r5, #4294967295
 80003bc:	bf2c      	ite	cs
 80003be:	f04f 0901 	movcs.w	r9, #1
 80003c2:	f04f 0900 	movcc.w	r9, #0
 80003c6:	4290      	cmp	r0, r2
 80003c8:	d903      	bls.n	80003d2 <__udivmoddi4+0x122>
 80003ca:	f1b9 0f00 	cmp.w	r9, #0
 80003ce:	f000 80ce 	beq.w	800056e <__udivmoddi4+0x2be>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0fe 	udiv	r0, r2, lr
 80003dc:	fb0e 2210 	mls	r2, lr, r0, r2
 80003e0:	fb00 f707 	mul.w	r7, r0, r7
 80003e4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e8:	42a7      	cmp	r7, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	42a7      	cmp	r7, r4
 80003f8:	f200 80b3 	bhi.w	8000562 <__udivmoddi4+0x2b2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	1be4      	subs	r4, r4, r7
 8000400:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000404:	e79c      	b.n	8000340 <__udivmoddi4+0x90>
 8000406:	f1c1 0420 	rsb	r4, r1, #32
 800040a:	408b      	lsls	r3, r1
 800040c:	fa05 fc01 	lsl.w	ip, r5, r1
 8000410:	fa22 f704 	lsr.w	r7, r2, r4
 8000414:	40e5      	lsrs	r5, r4
 8000416:	408a      	lsls	r2, r1
 8000418:	431f      	orrs	r7, r3
 800041a:	fa20 f304 	lsr.w	r3, r0, r4
 800041e:	4088      	lsls	r0, r1
 8000420:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000430:	fbb5 fef8 	udiv	lr, r5, r8
 8000434:	fb08 551e 	mls	r5, r8, lr, r5
 8000438:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800043c:	fb0e f90c 	mul.w	r9, lr, ip
 8000440:	45a9      	cmp	r9, r5
 8000442:	d90e      	bls.n	8000462 <__udivmoddi4+0x1b2>
 8000444:	197d      	adds	r5, r7, r5
 8000446:	f10e 3aff 	add.w	sl, lr, #4294967295
 800044a:	bf2c      	ite	cs
 800044c:	f04f 0b01 	movcs.w	fp, #1
 8000450:	f04f 0b00 	movcc.w	fp, #0
 8000454:	45a9      	cmp	r9, r5
 8000456:	d903      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000458:	f1bb 0f00 	cmp.w	fp, #0
 800045c:	f000 808d 	beq.w	800057a <__udivmoddi4+0x2ca>
 8000460:	46d6      	mov	lr, sl
 8000462:	eba5 0509 	sub.w	r5, r5, r9
 8000466:	fa1f f983 	uxth.w	r9, r3
 800046a:	fbb5 f3f8 	udiv	r3, r5, r8
 800046e:	fb08 5513 	mls	r5, r8, r3, r5
 8000472:	fb03 fc0c 	mul.w	ip, r3, ip
 8000476:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800047a:	45ac      	cmp	ip, r5
 800047c:	d906      	bls.n	800048c <__udivmoddi4+0x1dc>
 800047e:	197d      	adds	r5, r7, r5
 8000480:	f103 38ff 	add.w	r8, r3, #4294967295
 8000484:	d201      	bcs.n	800048a <__udivmoddi4+0x1da>
 8000486:	45ac      	cmp	ip, r5
 8000488:	d87e      	bhi.n	8000588 <__udivmoddi4+0x2d8>
 800048a:	4643      	mov	r3, r8
 800048c:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000490:	eba5 050c 	sub.w	r5, r5, ip
 8000494:	fba3 9802 	umull	r9, r8, r3, r2
 8000498:	4545      	cmp	r5, r8
 800049a:	46ce      	mov	lr, r9
 800049c:	46c4      	mov	ip, r8
 800049e:	d302      	bcc.n	80004a6 <__udivmoddi4+0x1f6>
 80004a0:	d106      	bne.n	80004b0 <__udivmoddi4+0x200>
 80004a2:	4548      	cmp	r0, r9
 80004a4:	d204      	bcs.n	80004b0 <__udivmoddi4+0x200>
 80004a6:	3b01      	subs	r3, #1
 80004a8:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ac:	eb68 0c07 	sbc.w	ip, r8, r7
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d06f      	beq.n	8000594 <__udivmoddi4+0x2e4>
 80004b4:	ebb0 020e 	subs.w	r2, r0, lr
 80004b8:	eb65 050c 	sbc.w	r5, r5, ip
 80004bc:	40ca      	lsrs	r2, r1
 80004be:	fa05 f404 	lsl.w	r4, r5, r4
 80004c2:	40cd      	lsrs	r5, r1
 80004c4:	4618      	mov	r0, r3
 80004c6:	4314      	orrs	r4, r2
 80004c8:	2100      	movs	r1, #0
 80004ca:	e9c6 4500 	strd	r4, r5, [r6]
 80004ce:	e73c      	b.n	800034a <__udivmoddi4+0x9a>
 80004d0:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d4:	f1c3 0220 	rsb	r2, r3, #32
 80004d8:	4099      	lsls	r1, r3
 80004da:	409c      	lsls	r4, r3
 80004dc:	40d5      	lsrs	r5, r2
 80004de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004e2:	fa20 f202 	lsr.w	r2, r0, r2
 80004e6:	fa1f f78c 	uxth.w	r7, ip
 80004ea:	fbb5 f0fe 	udiv	r0, r5, lr
 80004ee:	430a      	orrs	r2, r1
 80004f0:	fb0e 5510 	mls	r5, lr, r0, r5
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f507 	mul.w	r5, r0, r7
 80004fe:	428d      	cmp	r5, r1
 8000500:	d90e      	bls.n	8000520 <__udivmoddi4+0x270>
 8000502:	eb1c 0101 	adds.w	r1, ip, r1
 8000506:	f100 38ff 	add.w	r8, r0, #4294967295
 800050a:	bf2c      	ite	cs
 800050c:	f04f 0901 	movcs.w	r9, #1
 8000510:	f04f 0900 	movcc.w	r9, #0
 8000514:	428d      	cmp	r5, r1
 8000516:	d902      	bls.n	800051e <__udivmoddi4+0x26e>
 8000518:	f1b9 0f00 	cmp.w	r9, #0
 800051c:	d031      	beq.n	8000582 <__udivmoddi4+0x2d2>
 800051e:	4640      	mov	r0, r8
 8000520:	1b49      	subs	r1, r1, r5
 8000522:	b292      	uxth	r2, r2
 8000524:	fbb1 f5fe 	udiv	r5, r1, lr
 8000528:	fb0e 1115 	mls	r1, lr, r5, r1
 800052c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000530:	fb05 f107 	mul.w	r1, r5, r7
 8000534:	4291      	cmp	r1, r2
 8000536:	d907      	bls.n	8000548 <__udivmoddi4+0x298>
 8000538:	eb1c 0202 	adds.w	r2, ip, r2
 800053c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x296>
 8000542:	4291      	cmp	r1, r2
 8000544:	d823      	bhi.n	800058e <__udivmoddi4+0x2de>
 8000546:	4645      	mov	r5, r8
 8000548:	1a52      	subs	r2, r2, r1
 800054a:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800054e:	e726      	b.n	800039e <__udivmoddi4+0xee>
 8000550:	4631      	mov	r1, r6
 8000552:	4630      	mov	r0, r6
 8000554:	e6f9      	b.n	800034a <__udivmoddi4+0x9a>
 8000556:	1a84      	subs	r4, r0, r2
 8000558:	eb65 0203 	sbc.w	r2, r5, r3
 800055c:	2001      	movs	r0, #1
 800055e:	4617      	mov	r7, r2
 8000560:	e70b      	b.n	800037a <__udivmoddi4+0xca>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e74a      	b.n	80003fe <__udivmoddi4+0x14e>
 8000568:	4464      	add	r4, ip
 800056a:	3802      	subs	r0, #2
 800056c:	e6e4      	b.n	8000338 <__udivmoddi4+0x88>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	3902      	subs	r1, #2
 8000576:	4462      	add	r2, ip
 8000578:	e6c9      	b.n	800030e <__udivmoddi4+0x5e>
 800057a:	f1ae 0e02 	sub.w	lr, lr, #2
 800057e:	443d      	add	r5, r7
 8000580:	e76f      	b.n	8000462 <__udivmoddi4+0x1b2>
 8000582:	3802      	subs	r0, #2
 8000584:	4461      	add	r1, ip
 8000586:	e7cb      	b.n	8000520 <__udivmoddi4+0x270>
 8000588:	3b02      	subs	r3, #2
 800058a:	443d      	add	r5, r7
 800058c:	e77e      	b.n	800048c <__udivmoddi4+0x1dc>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	e7d9      	b.n	8000548 <__udivmoddi4+0x298>
 8000594:	4618      	mov	r0, r3
 8000596:	4631      	mov	r1, r6
 8000598:	e6d7      	b.n	800034a <__udivmoddi4+0x9a>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 80005a8:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005aa:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80005ae:	4909      	ldr	r1, [pc, #36]	; (80005d4 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	4313      	orrs	r3, r2
 80005b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005ba:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4013      	ands	r3, r2
 80005c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005c4:	68fb      	ldr	r3, [r7, #12]
}
 80005c6:	bf00      	nop
 80005c8:	3714      	adds	r7, #20
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	46020c00 	.word	0x46020c00

080005d8 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1 (*)
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80005e0:	4b0a      	ldr	r3, [pc, #40]	; (800060c <LL_APB1_GRP2_EnableClock+0x34>)
 80005e2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80005e6:	4909      	ldr	r1, [pc, #36]	; (800060c <LL_APB1_GRP2_EnableClock+0x34>)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	4313      	orrs	r3, r2
 80005ec:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <LL_APB1_GRP2_EnableClock+0x34>)
 80005f2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4013      	ands	r3, r2
 80005fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005fc:	68fb      	ldr	r3, [r7, #12]
}
 80005fe:	bf00      	nop
 8000600:	3714      	adds	r7, #20
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	46020c00 	.word	0x46020c00

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000614:	f000 fe3a 	bl	800128c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000618:	f000 f824 	bl	8000664 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 800061c:	f000 f87f 	bl	800071e <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000620:	f000 fa72 	bl	8000b08 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000624:	f000 f8a0 	bl	8000768 <MX_ADC1_Init>
  MX_ICACHE_Init();
 8000628:	f000 f8e2 	bl	80007f0 <MX_ICACHE_Init>
  MX_UCPD1_Init();
 800062c:	f000 f9b8 	bl	80009a0 <MX_UCPD1_Init>
  MX_USART1_UART_Init();
 8000630:	f000 f9ec 	bl	8000a0c <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000634:	f000 fa36 	bl	8000aa4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8000638:	f000 f914 	bl	8000864 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800063c:	2100      	movs	r1, #0
 800063e:	4808      	ldr	r0, [pc, #32]	; (8000660 <main+0x50>)
 8000640:	f007 f8e6 	bl	8007810 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000644:	2104      	movs	r1, #4
 8000646:	4806      	ldr	r0, [pc, #24]	; (8000660 <main+0x50>)
 8000648:	f007 f8e2 	bl	8007810 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800064c:	2108      	movs	r1, #8
 800064e:	4804      	ldr	r0, [pc, #16]	; (8000660 <main+0x50>)
 8000650:	f007 f8de 	bl	8007810 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000654:	210c      	movs	r1, #12
 8000656:	4802      	ldr	r0, [pc, #8]	; (8000660 <main+0x50>)
 8000658:	f007 f8da 	bl	8007810 <HAL_TIM_PWM_Start>
  //osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065c:	e7fe      	b.n	800065c <main+0x4c>
 800065e:	bf00      	nop
 8000660:	200000b4 	.word	0x200000b4

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b09e      	sub	sp, #120	; 0x78
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 0318 	add.w	r3, r7, #24
 800066e:	2260      	movs	r2, #96	; 0x60
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f00a fb68 	bl	800ad48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	463b      	mov	r3, r7
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	611a      	str	r2, [r3, #16]
 8000686:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000688:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 800068c:	f002 fede 	bl	800344c <HAL_PWREx_ControlVoltageScaling>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000696:	f000 fb0f 	bl	8000cb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 800069a:	2322      	movs	r3, #34	; 0x22
 800069c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800069e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006a2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006aa:	2310      	movs	r3, #16
 80006ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ae:	2302      	movs	r3, #2
 80006b0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b2:	2302      	movs	r3, #2
 80006b4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006ba:	2301      	movs	r3, #1
 80006bc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 20;
 80006be:	2314      	movs	r3, #20
 80006c0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80006ce:	230c      	movs	r3, #12
 80006d0:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d6:	f107 0318 	add.w	r3, r7, #24
 80006da:	4618      	mov	r0, r3
 80006dc:	f002 ffc2 	bl	8003664 <HAL_RCC_OscConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x86>
  {
    Error_Handler();
 80006e6:	f000 fae7 	bl	8000cb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ea:	231f      	movs	r3, #31
 80006ec:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ee:	2303      	movs	r3, #3
 80006f0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000702:	463b      	mov	r3, r7
 8000704:	2104      	movs	r1, #4
 8000706:	4618      	mov	r0, r3
 8000708:	f003 fe88 	bl	800441c <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000712:	f000 fad1 	bl	8000cb8 <Error_Handler>
  }
}
 8000716:	bf00      	nop
 8000718:	3778      	adds	r7, #120	; 0x78
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800071e:	b580      	push	{r7, lr}
 8000720:	b082      	sub	sp, #8
 8000722:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000724:	f002 ff7e 	bl	8003624 <HAL_PWREx_EnableVddIO2>

  PWR_PVDTypeDef sConfigPVD = {0};
 8000728:	463b      	mov	r3, r7
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]

  /*
   * PVD Configuration
   */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8000730:	2300      	movs	r3, #0
 8000732:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8000734:	2300      	movs	r3, #0
 8000736:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8000738:	463b      	mov	r3, r7
 800073a:	4618      	mov	r0, r3
 800073c:	f002 fde4 	bl	8003308 <HAL_PWR_ConfigPVD>

  /*
   * Enable the PVD Output
   */
  HAL_PWR_EnablePVD();
 8000740:	f002 fe50 	bl	80033e4 <HAL_PWR_EnablePVD>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000744:	2002      	movs	r0, #2
 8000746:	f002 ff0d 	bl	8003564 <HAL_PWREx_ConfigSupply>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemPower_Config+0x36>
  {
    Error_Handler();
 8000750:	f000 fab2 	bl	8000cb8 <Error_Handler>
  }

  /*
   * PWR Privilege Configuration
   */
  HAL_PWR_ConfigAttributes(PWR_ALL, PWR_NSEC_PRIV);
 8000754:	2111      	movs	r1, #17
 8000756:	f24f 00ff 	movw	r0, #61695	; 0xf0ff
 800075a:	f002 fe53 	bl	8003404 <HAL_PWR_ConfigAttributes>
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
	...

08000768 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800076c:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <MX_ADC1_Init+0x80>)
 800076e:	4a1f      	ldr	r2, [pc, #124]	; (80007ec <MX_ADC1_Init+0x84>)
 8000770:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000772:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <MX_ADC1_Init+0x80>)
 8000774:	2200      	movs	r2, #0
 8000776:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8000778:	4b1b      	ldr	r3, [pc, #108]	; (80007e8 <MX_ADC1_Init+0x80>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 800077e:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <MX_ADC1_Init+0x80>)
 8000780:	2200      	movs	r2, #0
 8000782:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000784:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <MX_ADC1_Init+0x80>)
 8000786:	2200      	movs	r2, #0
 8000788:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800078a:	4b17      	ldr	r3, [pc, #92]	; (80007e8 <MX_ADC1_Init+0x80>)
 800078c:	2204      	movs	r2, #4
 800078e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000790:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <MX_ADC1_Init+0x80>)
 8000792:	2200      	movs	r2, #0
 8000794:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000796:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <MX_ADC1_Init+0x80>)
 8000798:	2200      	movs	r2, #0
 800079a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfConversion = 1;
 800079e:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <MX_ADC1_Init+0x80>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007a4:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <MX_ADC1_Init+0x80>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007ac:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_ADC1_Init+0x80>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <MX_ADC1_Init+0x80>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	669a      	str	r2, [r3, #104]	; 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <MX_ADC1_Init+0x80>)
 80007bc:	2200      	movs	r2, #0
 80007be:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_ADC1_Init+0x80>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	651a      	str	r2, [r3, #80]	; 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80007c6:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <MX_ADC1_Init+0x80>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <MX_ADC1_Init+0x80>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007d4:	4804      	ldr	r0, [pc, #16]	; (80007e8 <MX_ADC1_Init+0x80>)
 80007d6:	f000 fec9 	bl	800156c <HAL_ADC_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 80007e0:	f000 fa6a 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000028 	.word	0x20000028
 80007ec:	42028000 	.word	0x42028000

080007f0 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ICACHE_Init 0 */

  /* USER CODE END ICACHE_Init 0 */

  ICACHE_RegionConfigTypeDef pRegionConfig = {0};
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]

  /* USER CODE END ICACHE_Init 1 */

  /** Configure and enable a region for memory remapping.
  */
  if (HAL_ICACHE_Disable() != HAL_OK)
 8000804:	f001 fc7c 	bl	8002100 <HAL_ICACHE_Disable>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800080e:	f000 fa53 	bl	8000cb8 <Error_Handler>
  }
  pRegionConfig.BaseAddress = 0x10000000;
 8000812:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000816:	607b      	str	r3, [r7, #4]
  pRegionConfig.RemapAddress = 0x60000000;
 8000818:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800081c:	60bb      	str	r3, [r7, #8]
  pRegionConfig.Size = ICACHE_REGIONSIZE_2MB;
 800081e:	2301      	movs	r3, #1
 8000820:	60fb      	str	r3, [r7, #12]
  pRegionConfig.TrafficRoute = ICACHE_MASTER1_PORT;
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
  pRegionConfig.OutputBurstType = ICACHE_OUTPUT_BURST_WRAP;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
  if (HAL_ICACHE_EnableRemapRegion(_NULL, &pRegionConfig) != HAL_OK)
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	4619      	mov	r1, r3
 800082e:	2000      	movs	r0, #0
 8000830:	f001 fc96 	bl	8002160 <HAL_ICACHE_EnableRemapRegion>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_ICACHE_Init+0x4e>
  {
    Error_Handler();
 800083a:	f000 fa3d 	bl	8000cb8 <Error_Handler>
  }

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800083e:	2000      	movs	r0, #0
 8000840:	f001 fc2e 	bl	80020a0 <HAL_ICACHE_ConfigAssociativityMode>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_ICACHE_Init+0x5e>
  {
    Error_Handler();
 800084a:	f000 fa35 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800084e:	f001 fc47 	bl	80020e0 <HAL_ICACHE_Enable>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_ICACHE_Init+0x6c>
  {
    Error_Handler();
 8000858:	f000 fa2e 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800085c:	bf00      	nop
 800085e:	3718      	adds	r7, #24
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08e      	sub	sp, #56	; 0x38
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800086a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000878:	f107 031c 	add.w	r3, r7, #28
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000884:	463b      	mov	r3, r7
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]
 8000892:	615a      	str	r2, [r3, #20]
 8000894:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000896:	4b41      	ldr	r3, [pc, #260]	; (800099c <MX_TIM2_Init+0x138>)
 8000898:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800089c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000;
 800089e:	4b3f      	ldr	r3, [pc, #252]	; (800099c <MX_TIM2_Init+0x138>)
 80008a0:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80008a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a6:	4b3d      	ldr	r3, [pc, #244]	; (800099c <MX_TIM2_Init+0x138>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 80008ac:	4b3b      	ldr	r3, [pc, #236]	; (800099c <MX_TIM2_Init+0x138>)
 80008ae:	f242 7210 	movw	r2, #10000	; 0x2710
 80008b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b4:	4b39      	ldr	r3, [pc, #228]	; (800099c <MX_TIM2_Init+0x138>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008ba:	4b38      	ldr	r3, [pc, #224]	; (800099c <MX_TIM2_Init+0x138>)
 80008bc:	2280      	movs	r2, #128	; 0x80
 80008be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008c0:	4836      	ldr	r0, [pc, #216]	; (800099c <MX_TIM2_Init+0x138>)
 80008c2:	f006 fe4b 	bl	800755c <HAL_TIM_Base_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80008cc:	f000 f9f4 	bl	8000cb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008da:	4619      	mov	r1, r3
 80008dc:	482f      	ldr	r0, [pc, #188]	; (800099c <MX_TIM2_Init+0x138>)
 80008de:	f007 fb4d 	bl	8007f7c <HAL_TIM_ConfigClockSource>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80008e8:	f000 f9e6 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008ec:	482b      	ldr	r0, [pc, #172]	; (800099c <MX_TIM2_Init+0x138>)
 80008ee:	f006 ff2d 	bl	800774c <HAL_TIM_PWM_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80008f8:	f000 f9de 	bl	8000cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	4619      	mov	r1, r3
 800090a:	4824      	ldr	r0, [pc, #144]	; (800099c <MX_TIM2_Init+0x138>)
 800090c:	f008 f9f2 	bl	8008cf4 <HAL_TIMEx_MasterConfigSynchronization>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000916:	f000 f9cf 	bl	8000cb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800091a:	2360      	movs	r3, #96	; 0x60
 800091c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 125;
 800091e:	237d      	movs	r3, #125	; 0x7d
 8000920:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000922:	2300      	movs	r3, #0
 8000924:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000926:	2304      	movs	r3, #4
 8000928:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800092a:	463b      	mov	r3, r7
 800092c:	2200      	movs	r2, #0
 800092e:	4619      	mov	r1, r3
 8000930:	481a      	ldr	r0, [pc, #104]	; (800099c <MX_TIM2_Init+0x138>)
 8000932:	f007 fa0f 	bl	8007d54 <HAL_TIM_PWM_ConfigChannel>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800093c:	f000 f9bc 	bl	8000cb8 <Error_Handler>
  }
  sConfigOC.Pulse = 85;
 8000940:	2355      	movs	r3, #85	; 0x55
 8000942:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000944:	463b      	mov	r3, r7
 8000946:	2204      	movs	r2, #4
 8000948:	4619      	mov	r1, r3
 800094a:	4814      	ldr	r0, [pc, #80]	; (800099c <MX_TIM2_Init+0x138>)
 800094c:	f007 fa02 	bl	8007d54 <HAL_TIM_PWM_ConfigChannel>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 8000956:	f000 f9af 	bl	8000cb8 <Error_Handler>
  }
  sConfigOC.Pulse = 200;
 800095a:	23c8      	movs	r3, #200	; 0xc8
 800095c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800095e:	463b      	mov	r3, r7
 8000960:	2208      	movs	r2, #8
 8000962:	4619      	mov	r1, r3
 8000964:	480d      	ldr	r0, [pc, #52]	; (800099c <MX_TIM2_Init+0x138>)
 8000966:	f007 f9f5 	bl	8007d54 <HAL_TIM_PWM_ConfigChannel>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 8000970:	f000 f9a2 	bl	8000cb8 <Error_Handler>
  }
  sConfigOC.Pulse = 125;
 8000974:	237d      	movs	r3, #125	; 0x7d
 8000976:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000978:	463b      	mov	r3, r7
 800097a:	220c      	movs	r2, #12
 800097c:	4619      	mov	r1, r3
 800097e:	4807      	ldr	r0, [pc, #28]	; (800099c <MX_TIM2_Init+0x138>)
 8000980:	f007 f9e8 	bl	8007d54 <HAL_TIM_PWM_ConfigChannel>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM2_Init+0x12a>
  {
    Error_Handler();
 800098a:	f000 f995 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800098e:	4803      	ldr	r0, [pc, #12]	; (800099c <MX_TIM2_Init+0x138>)
 8000990:	f000 fa42 	bl	8000e18 <HAL_TIM_MspPostInit>

}
 8000994:	bf00      	nop
 8000996:	3738      	adds	r7, #56	; 0x38
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	200000b4 	.word	0x200000b4

080009a0 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a6:	463b      	mov	r3, r7
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
 80009b4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 80009b6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80009ba:	f7ff fe0d 	bl	80005d8 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80009be:	2002      	movs	r0, #2
 80009c0:	f7ff fdee 	bl	80005a0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80009c4:	2001      	movs	r0, #1
 80009c6:	f7ff fdeb 	bl	80005a0 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80009ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009ce:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80009d0:	2303      	movs	r3, #3
 80009d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009d4:	2300      	movs	r3, #0
 80009d6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d8:	463b      	mov	r3, r7
 80009da:	4619      	mov	r1, r3
 80009dc:	4809      	ldr	r0, [pc, #36]	; (8000a04 <MX_UCPD1_Init+0x64>)
 80009de:	f009 f8ea 	bl	8009bb6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80009e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009e6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80009e8:	2303      	movs	r3, #3
 80009ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009ec:	2300      	movs	r3, #0
 80009ee:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f0:	463b      	mov	r3, r7
 80009f2:	4619      	mov	r1, r3
 80009f4:	4804      	ldr	r0, [pc, #16]	; (8000a08 <MX_UCPD1_Init+0x68>)
 80009f6:	f009 f8de 	bl	8009bb6 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	3718      	adds	r7, #24
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	42020400 	.word	0x42020400
 8000a08:	42020000 	.word	0x42020000

08000a0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a10:	4b22      	ldr	r3, [pc, #136]	; (8000a9c <MX_USART1_UART_Init+0x90>)
 8000a12:	4a23      	ldr	r2, [pc, #140]	; (8000aa0 <MX_USART1_UART_Init+0x94>)
 8000a14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a16:	4b21      	ldr	r3, [pc, #132]	; (8000a9c <MX_USART1_UART_Init+0x90>)
 8000a18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1e:	4b1f      	ldr	r3, [pc, #124]	; (8000a9c <MX_USART1_UART_Init+0x90>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a24:	4b1d      	ldr	r3, [pc, #116]	; (8000a9c <MX_USART1_UART_Init+0x90>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a2a:	4b1c      	ldr	r3, [pc, #112]	; (8000a9c <MX_USART1_UART_Init+0x90>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a30:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <MX_USART1_UART_Init+0x90>)
 8000a32:	220c      	movs	r2, #12
 8000a34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a36:	4b19      	ldr	r3, [pc, #100]	; (8000a9c <MX_USART1_UART_Init+0x90>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a3c:	4b17      	ldr	r3, [pc, #92]	; (8000a9c <MX_USART1_UART_Init+0x90>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a42:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <MX_USART1_UART_Init+0x90>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a48:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <MX_USART1_UART_Init+0x90>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a4e:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <MX_USART1_UART_Init+0x90>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a54:	4811      	ldr	r0, [pc, #68]	; (8000a9c <MX_USART1_UART_Init+0x90>)
 8000a56:	f008 fa55 	bl	8008f04 <HAL_UART_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a60:	f000 f92a 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a64:	2100      	movs	r1, #0
 8000a66:	480d      	ldr	r0, [pc, #52]	; (8000a9c <MX_USART1_UART_Init+0x90>)
 8000a68:	f008 fe90 	bl	800978c <HAL_UARTEx_SetTxFifoThreshold>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a72:	f000 f921 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a76:	2100      	movs	r1, #0
 8000a78:	4808      	ldr	r0, [pc, #32]	; (8000a9c <MX_USART1_UART_Init+0x90>)
 8000a7a:	f008 fec5 	bl	8009808 <HAL_UARTEx_SetRxFifoThreshold>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a84:	f000 f918 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a88:	4804      	ldr	r0, [pc, #16]	; (8000a9c <MX_USART1_UART_Init+0x90>)
 8000a8a:	f008 fe46 	bl	800971a <HAL_UARTEx_DisableFifoMode>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a94:	f000 f910 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000100 	.word	0x20000100
 8000aa0:	40013800 	.word	0x40013800

08000aa4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000aa8:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aaa:	4a16      	ldr	r2, [pc, #88]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000aac:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000aae:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ab0:	2206      	movs	r2, #6
 8000ab2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ab6:	2202      	movs	r2, #2
 8000ab8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000abc:	2202      	movs	r2, #2
 8000abe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ad8:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	60da      	str	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000aea:	4805      	ldr	r0, [pc, #20]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aec:	f001 fb8a 	bl	8002204 <HAL_PCD_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000af6:	f000 f8df 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000194 	.word	0x20000194
 8000b04:	42040000 	.word	0x42040000

08000b08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08a      	sub	sp, #40	; 0x28
 8000b0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]
 8000b1c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1e:	4b58      	ldr	r3, [pc, #352]	; (8000c80 <MX_GPIO_Init+0x178>)
 8000b20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b24:	4a56      	ldr	r2, [pc, #344]	; (8000c80 <MX_GPIO_Init+0x178>)
 8000b26:	f043 0304 	orr.w	r3, r3, #4
 8000b2a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b2e:	4b54      	ldr	r3, [pc, #336]	; (8000c80 <MX_GPIO_Init+0x178>)
 8000b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b34:	f003 0304 	and.w	r3, r3, #4
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b3c:	4b50      	ldr	r3, [pc, #320]	; (8000c80 <MX_GPIO_Init+0x178>)
 8000b3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b42:	4a4f      	ldr	r2, [pc, #316]	; (8000c80 <MX_GPIO_Init+0x178>)
 8000b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b48:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b4c:	4b4c      	ldr	r3, [pc, #304]	; (8000c80 <MX_GPIO_Init+0x178>)
 8000b4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5a:	4b49      	ldr	r3, [pc, #292]	; (8000c80 <MX_GPIO_Init+0x178>)
 8000b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b60:	4a47      	ldr	r2, [pc, #284]	; (8000c80 <MX_GPIO_Init+0x178>)
 8000b62:	f043 0301 	orr.w	r3, r3, #1
 8000b66:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b6a:	4b45      	ldr	r3, [pc, #276]	; (8000c80 <MX_GPIO_Init+0x178>)
 8000b6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b70:	f003 0301 	and.w	r3, r3, #1
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b78:	4b41      	ldr	r3, [pc, #260]	; (8000c80 <MX_GPIO_Init+0x178>)
 8000b7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b7e:	4a40      	ldr	r2, [pc, #256]	; (8000c80 <MX_GPIO_Init+0x178>)
 8000b80:	f043 0302 	orr.w	r3, r3, #2
 8000b84:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b88:	4b3d      	ldr	r3, [pc, #244]	; (8000c80 <MX_GPIO_Init+0x178>)
 8000b8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b8e:	f003 0302 	and.w	r3, r3, #2
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b96:	4b3a      	ldr	r3, [pc, #232]	; (8000c80 <MX_GPIO_Init+0x178>)
 8000b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b9c:	4a38      	ldr	r2, [pc, #224]	; (8000c80 <MX_GPIO_Init+0x178>)
 8000b9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ba2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000ba6:	4b36      	ldr	r3, [pc, #216]	; (8000c80 <MX_GPIO_Init+0x178>)
 8000ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bb0:	603b      	str	r3, [r7, #0]
 8000bb2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2104      	movs	r1, #4
 8000bb8:	4832      	ldr	r0, [pc, #200]	; (8000c84 <MX_GPIO_Init+0x17c>)
 8000bba:	f001 fa59 	bl	8002070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2180      	movs	r1, #128	; 0x80
 8000bc2:	4831      	ldr	r0, [pc, #196]	; (8000c88 <MX_GPIO_Init+0x180>)
 8000bc4:	f001 fa54 	bl	8002070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	21a0      	movs	r1, #160	; 0xa0
 8000bcc:	482f      	ldr	r0, [pc, #188]	; (8000c8c <MX_GPIO_Init+0x184>)
 8000bce:	f001 fa4f 	bl	8002070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000bd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bd8:	4b2d      	ldr	r3, [pc, #180]	; (8000c90 <MX_GPIO_Init+0x188>)
 8000bda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	4619      	mov	r1, r3
 8000be6:	4828      	ldr	r0, [pc, #160]	; (8000c88 <MX_GPIO_Init+0x180>)
 8000be8:	f001 f86a 	bl	8001cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000bec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4822      	ldr	r0, [pc, #136]	; (8000c8c <MX_GPIO_Init+0x184>)
 8000c02:	f001 f85d 	bl	8001cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c06:	2304      	movs	r3, #4
 8000c08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	2300      	movs	r3, #0
 8000c14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c16:	f107 0314 	add.w	r3, r7, #20
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4819      	ldr	r0, [pc, #100]	; (8000c84 <MX_GPIO_Init+0x17c>)
 8000c1e:	f001 f84f 	bl	8001cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000c22:	2380      	movs	r3, #128	; 0x80
 8000c24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c26:	2301      	movs	r3, #1
 8000c28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4619      	mov	r1, r3
 8000c38:	4813      	ldr	r0, [pc, #76]	; (8000c88 <MX_GPIO_Init+0x180>)
 8000c3a:	f001 f841 	bl	8001cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 8000c3e:	2320      	movs	r3, #32
 8000c40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c42:	2301      	movs	r3, #1
 8000c44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	480d      	ldr	r0, [pc, #52]	; (8000c8c <MX_GPIO_Init+0x184>)
 8000c56:	f001 f833 	bl	8001cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8000c5a:	2380      	movs	r3, #128	; 0x80
 8000c5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c62:	2301      	movs	r3, #1
 8000c64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c66:	2302      	movs	r3, #2
 8000c68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8000c6a:	f107 0314 	add.w	r3, r7, #20
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4806      	ldr	r0, [pc, #24]	; (8000c8c <MX_GPIO_Init+0x184>)
 8000c72:	f001 f825 	bl	8001cc0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c76:	bf00      	nop
 8000c78:	3728      	adds	r7, #40	; 0x28
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	46020c00 	.word	0x46020c00
 8000c84:	42021800 	.word	0x42021800
 8000c88:	42020800 	.word	0x42020800
 8000c8c:	42020400 	.word	0x42020400
 8000c90:	10210000 	.word	0x10210000

08000c94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d101      	bne.n	8000caa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ca6:	f000 fb1f 	bl	80012e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40012c00 	.word	0x40012c00

08000cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cbc:	b672      	cpsid	i
}
 8000cbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <Error_Handler+0x8>
	...

08000cc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000cca:	4b0d      	ldr	r3, [pc, #52]	; (8000d00 <HAL_MspInit+0x3c>)
 8000ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000cd0:	4a0b      	ldr	r2, [pc, #44]	; (8000d00 <HAL_MspInit+0x3c>)
 8000cd2:	f043 0304 	orr.w	r3, r3, #4
 8000cd6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000cda:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <HAL_MspInit+0x3c>)
 8000cdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ce0:	f003 0304 	and.w	r3, r3, #4
 8000ce4:	607b      	str	r3, [r7, #4]
 8000ce6:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8000ce8:	f002 fcac 	bl	8003644 <HAL_PWREx_EnableVddA>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cec:	2200      	movs	r2, #0
 8000cee:	210f      	movs	r1, #15
 8000cf0:	f06f 0001 	mvn.w	r0, #1
 8000cf4:	f000 ffbc 	bl	8001c70 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	46020c00 	.word	0x46020c00

08000d04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b0ba      	sub	sp, #232	; 0xe8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d1c:	f107 0310 	add.w	r3, r7, #16
 8000d20:	22c0      	movs	r2, #192	; 0xc0
 8000d22:	2100      	movs	r1, #0
 8000d24:	4618      	mov	r0, r3
 8000d26:	f00a f80f 	bl	800ad48 <memset>
  if(hadc->Instance==ADC1)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a24      	ldr	r2, [pc, #144]	; (8000dc0 <HAL_ADC_MspInit+0xbc>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d140      	bne.n	8000db6 <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000d34:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8000d40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f003 ff6d 	bl	8004c2c <HAL_RCCEx_PeriphCLKConfig>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8000d58:	f7ff ffae 	bl	8000cb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d5c:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <HAL_ADC_MspInit+0xc0>)
 8000d5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d62:	4a18      	ldr	r2, [pc, #96]	; (8000dc4 <HAL_ADC_MspInit+0xc0>)
 8000d64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d68:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d6c:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <HAL_ADC_MspInit+0xc0>)
 8000d6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7a:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <HAL_ADC_MspInit+0xc0>)
 8000d7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d80:	4a10      	ldr	r2, [pc, #64]	; (8000dc4 <HAL_ADC_MspInit+0xc0>)
 8000d82:	f043 0304 	orr.w	r3, r3, #4
 8000d86:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <HAL_ADC_MspInit+0xc0>)
 8000d8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d90:	f003 0304 	and.w	r3, r3, #4
 8000d94:	60bb      	str	r3, [r7, #8]
 8000d96:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000d98:	2304      	movs	r3, #4
 8000d9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000daa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000dae:	4619      	mov	r1, r3
 8000db0:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <HAL_ADC_MspInit+0xc4>)
 8000db2:	f000 ff85 	bl	8001cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000db6:	bf00      	nop
 8000db8:	37e8      	adds	r7, #232	; 0xe8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	42028000 	.word	0x42028000
 8000dc4:	46020c00 	.word	0x46020c00
 8000dc8:	42020800 	.word	0x42020800

08000dcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ddc:	d116      	bne.n	8000e0c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dde:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <HAL_TIM_Base_MspInit+0x48>)
 8000de0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000de4:	4a0b      	ldr	r2, [pc, #44]	; (8000e14 <HAL_TIM_Base_MspInit+0x48>)
 8000de6:	f043 0301 	orr.w	r3, r3, #1
 8000dea:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000dee:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <HAL_TIM_Base_MspInit+0x48>)
 8000df0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000df4:	f003 0301 	and.w	r3, r3, #1
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2105      	movs	r1, #5
 8000e00:	202d      	movs	r0, #45	; 0x2d
 8000e02:	f000 ff35 	bl	8001c70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e06:	202d      	movs	r0, #45	; 0x2d
 8000e08:	f000 ff4c 	bl	8001ca4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e0c:	bf00      	nop
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	46020c00 	.word	0x46020c00

08000e18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b088      	sub	sp, #32
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 030c 	add.w	r3, r7, #12
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e38:	d11e      	bne.n	8000e78 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3a:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <HAL_TIM_MspPostInit+0x68>)
 8000e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e40:	4a0f      	ldr	r2, [pc, #60]	; (8000e80 <HAL_TIM_MspPostInit+0x68>)
 8000e42:	f043 0301 	orr.w	r3, r3, #1
 8000e46:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e4a:	4b0d      	ldr	r3, [pc, #52]	; (8000e80 <HAL_TIM_MspPostInit+0x68>)
 8000e4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e50:	f003 0301 	and.w	r3, r3, #1
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000e58:	230f      	movs	r3, #15
 8000e5a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e64:	2302      	movs	r3, #2
 8000e66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6c:	f107 030c 	add.w	r3, r7, #12
 8000e70:	4619      	mov	r1, r3
 8000e72:	4804      	ldr	r0, [pc, #16]	; (8000e84 <HAL_TIM_MspPostInit+0x6c>)
 8000e74:	f000 ff24 	bl	8001cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e78:	bf00      	nop
 8000e7a:	3720      	adds	r7, #32
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	46020c00 	.word	0x46020c00
 8000e84:	42020000 	.word	0x42020000

08000e88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b0ba      	sub	sp, #232	; 0xe8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ea0:	f107 0310 	add.w	r3, r7, #16
 8000ea4:	22c0      	movs	r2, #192	; 0xc0
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f009 ff4d 	bl	800ad48 <memset>
  if(huart->Instance==USART1)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a26      	ldr	r2, [pc, #152]	; (8000f4c <HAL_UART_MspInit+0xc4>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d145      	bne.n	8000f44 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000eb8:	f04f 0201 	mov.w	r2, #1
 8000ebc:	f04f 0300 	mov.w	r3, #0
 8000ec0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ec8:	f107 0310 	add.w	r3, r7, #16
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f003 fead 	bl	8004c2c <HAL_RCCEx_PeriphCLKConfig>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000ed8:	f7ff feee 	bl	8000cb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000edc:	4b1c      	ldr	r3, [pc, #112]	; (8000f50 <HAL_UART_MspInit+0xc8>)
 8000ede:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000ee2:	4a1b      	ldr	r2, [pc, #108]	; (8000f50 <HAL_UART_MspInit+0xc8>)
 8000ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee8:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000eec:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <HAL_UART_MspInit+0xc8>)
 8000eee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000ef2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efa:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <HAL_UART_MspInit+0xc8>)
 8000efc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f00:	4a13      	ldr	r2, [pc, #76]	; (8000f50 <HAL_UART_MspInit+0xc8>)
 8000f02:	f043 0301 	orr.w	r3, r3, #1
 8000f06:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000f0a:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <HAL_UART_MspInit+0xc8>)
 8000f0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8000f18:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f26:	2302      	movs	r3, #2
 8000f28:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f32:	2307      	movs	r3, #7
 8000f34:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f38:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4805      	ldr	r0, [pc, #20]	; (8000f54 <HAL_UART_MspInit+0xcc>)
 8000f40:	f000 febe 	bl	8001cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f44:	bf00      	nop
 8000f46:	37e8      	adds	r7, #232	; 0xe8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40013800 	.word	0x40013800
 8000f50:	46020c00 	.word	0x46020c00
 8000f54:	42020000 	.word	0x42020000

08000f58 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b0bc      	sub	sp, #240	; 0xf0
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f70:	f107 0318 	add.w	r3, r7, #24
 8000f74:	22c0      	movs	r2, #192	; 0xc0
 8000f76:	2100      	movs	r1, #0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f009 fee5 	bl	800ad48 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a3c      	ldr	r2, [pc, #240]	; (8001074 <HAL_PCD_MspInit+0x11c>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d171      	bne.n	800106c <HAL_PCD_MspInit+0x114>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000f88:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000f8c:	f04f 0300 	mov.w	r3, #0
 8000f90:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8000f94:	2300      	movs	r3, #0
 8000f96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f9a:	f107 0318 	add.w	r3, r7, #24
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f003 fe44 	bl	8004c2c <HAL_RCCEx_PeriphCLKConfig>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8000faa:	f7ff fe85 	bl	8000cb8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fae:	4b32      	ldr	r3, [pc, #200]	; (8001078 <HAL_PCD_MspInit+0x120>)
 8000fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000fb4:	4a30      	ldr	r2, [pc, #192]	; (8001078 <HAL_PCD_MspInit+0x120>)
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000fbe:	4b2e      	ldr	r3, [pc, #184]	; (8001078 <HAL_PCD_MspInit+0x120>)
 8000fc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	617b      	str	r3, [r7, #20]
 8000fca:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000fcc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000fd0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000fe6:	230a      	movs	r3, #10
 8000fe8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fec:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4822      	ldr	r0, [pc, #136]	; (800107c <HAL_PCD_MspInit+0x124>)
 8000ff4:	f000 fe64 	bl	8001cc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000ff8:	4b1f      	ldr	r3, [pc, #124]	; (8001078 <HAL_PCD_MspInit+0x120>)
 8000ffa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ffe:	4a1e      	ldr	r2, [pc, #120]	; (8001078 <HAL_PCD_MspInit+0x120>)
 8001000:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001004:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001008:	4b1b      	ldr	r3, [pc, #108]	; (8001078 <HAL_PCD_MspInit+0x120>)
 800100a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800100e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001012:	613b      	str	r3, [r7, #16]
 8001014:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001016:	4b18      	ldr	r3, [pc, #96]	; (8001078 <HAL_PCD_MspInit+0x120>)
 8001018:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800101c:	f003 0304 	and.w	r3, r3, #4
 8001020:	2b00      	cmp	r3, #0
 8001022:	d119      	bne.n	8001058 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001024:	4b14      	ldr	r3, [pc, #80]	; (8001078 <HAL_PCD_MspInit+0x120>)
 8001026:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800102a:	4a13      	ldr	r2, [pc, #76]	; (8001078 <HAL_PCD_MspInit+0x120>)
 800102c:	f043 0304 	orr.w	r3, r3, #4
 8001030:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001034:	4b10      	ldr	r3, [pc, #64]	; (8001078 <HAL_PCD_MspInit+0x120>)
 8001036:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800103a:	f003 0304 	and.w	r3, r3, #4
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001042:	f002 fadf 	bl	8003604 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001046:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <HAL_PCD_MspInit+0x120>)
 8001048:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800104c:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <HAL_PCD_MspInit+0x120>)
 800104e:	f023 0304 	bic.w	r3, r3, #4
 8001052:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001056:	e001      	b.n	800105c <HAL_PCD_MspInit+0x104>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8001058:	f002 fad4 	bl	8003604 <HAL_PWREx_EnableVddUSB>
    }
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800105c:	2200      	movs	r2, #0
 800105e:	2105      	movs	r1, #5
 8001060:	2049      	movs	r0, #73	; 0x49
 8001062:	f000 fe05 	bl	8001c70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001066:	2049      	movs	r0, #73	; 0x49
 8001068:	f000 fe1c 	bl	8001ca4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800106c:	bf00      	nop
 800106e:	37f0      	adds	r7, #240	; 0xf0
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	42040000 	.word	0x42040000
 8001078:	46020c00 	.word	0x46020c00
 800107c:	42020000 	.word	0x42020000

08001080 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08e      	sub	sp, #56	; 0x38
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001090:	4b2e      	ldr	r3, [pc, #184]	; (800114c <HAL_InitTick+0xcc>)
 8001092:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001096:	4a2d      	ldr	r2, [pc, #180]	; (800114c <HAL_InitTick+0xcc>)
 8001098:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800109c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80010a0:	4b2a      	ldr	r3, [pc, #168]	; (800114c <HAL_InitTick+0xcc>)
 80010a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80010a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010ae:	f107 0210 	add.w	r2, r7, #16
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	4611      	mov	r1, r2
 80010b8:	4618      	mov	r0, r3
 80010ba:	f003 fcf9 	bl	8004ab0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80010be:	f003 fccf 	bl	8004a60 <HAL_RCC_GetPCLK2Freq>
 80010c2:	6338      	str	r0, [r7, #48]	; 0x30

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010c6:	4a22      	ldr	r2, [pc, #136]	; (8001150 <HAL_InitTick+0xd0>)
 80010c8:	fba2 2303 	umull	r2, r3, r2, r3
 80010cc:	0c9b      	lsrs	r3, r3, #18
 80010ce:	3b01      	subs	r3, #1
 80010d0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80010d2:	4b20      	ldr	r3, [pc, #128]	; (8001154 <HAL_InitTick+0xd4>)
 80010d4:	4a20      	ldr	r2, [pc, #128]	; (8001158 <HAL_InitTick+0xd8>)
 80010d6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80010d8:	4b1e      	ldr	r3, [pc, #120]	; (8001154 <HAL_InitTick+0xd4>)
 80010da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010de:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80010e0:	4a1c      	ldr	r2, [pc, #112]	; (8001154 <HAL_InitTick+0xd4>)
 80010e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010e4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80010e6:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <HAL_InitTick+0xd4>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ec:	4b19      	ldr	r3, [pc, #100]	; (8001154 <HAL_InitTick+0xd4>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 80010f2:	4818      	ldr	r0, [pc, #96]	; (8001154 <HAL_InitTick+0xd4>)
 80010f4:	f006 fa32 	bl	800755c <HAL_TIM_Base_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 80010fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001102:	2b00      	cmp	r3, #0
 8001104:	d118      	bne.n	8001138 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001106:	4813      	ldr	r0, [pc, #76]	; (8001154 <HAL_InitTick+0xd4>)
 8001108:	f006 fa80 	bl	800760c <HAL_TIM_Base_Start_IT>
 800110c:	4603      	mov	r3, r0
 800110e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 8001112:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001116:	2b00      	cmp	r3, #0
 8001118:	d10e      	bne.n	8001138 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b0f      	cmp	r3, #15
 800111e:	d808      	bhi.n	8001132 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM1 global Interrupt */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001120:	2200      	movs	r2, #0
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	202a      	movs	r0, #42	; 0x2a
 8001126:	f000 fda3 	bl	8001c70 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800112a:	4a0c      	ldr	r2, [pc, #48]	; (800115c <HAL_InitTick+0xdc>)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6013      	str	r3, [r2, #0]
 8001130:	e002      	b.n	8001138 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001138:	202a      	movs	r0, #42	; 0x2a
 800113a:	f000 fdb3 	bl	8001ca4 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 800113e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001142:	4618      	mov	r0, r3
 8001144:	3738      	adds	r7, #56	; 0x38
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	46020c00 	.word	0x46020c00
 8001150:	431bde83 	.word	0x431bde83
 8001154:	200006a0 	.word	0x200006a0
 8001158:	40012c00 	.word	0x40012c00
 800115c:	20000004 	.word	0x20000004

08001160 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001164:	e7fe      	b.n	8001164 <NMI_Handler+0x4>

08001166 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800116a:	e7fe      	b.n	800116a <HardFault_Handler+0x4>

0800116c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001170:	e7fe      	b.n	8001170 <MemManage_Handler+0x4>

08001172 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001172:	b480      	push	{r7}
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001176:	e7fe      	b.n	8001176 <BusFault_Handler+0x4>

08001178 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800117c:	e7fe      	b.n	800117c <UsageFault_Handler+0x4>

0800117e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001190:	4802      	ldr	r0, [pc, #8]	; (800119c <TIM1_UP_IRQHandler+0x10>)
 8001192:	f006 fc8f 	bl	8007ab4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	200006a0 	.word	0x200006a0

080011a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011a4:	4802      	ldr	r0, [pc, #8]	; (80011b0 <TIM2_IRQHandler+0x10>)
 80011a6:	f006 fc85 	bl	8007ab4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	200000b4 	.word	0x200000b4

080011b4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80011b8:	4802      	ldr	r0, [pc, #8]	; (80011c4 <OTG_FS_IRQHandler+0x10>)
 80011ba:	f001 f947 	bl	800244c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000194 	.word	0x20000194

080011c8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011cc:	4b18      	ldr	r3, [pc, #96]	; (8001230 <SystemInit+0x68>)
 80011ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011d2:	4a17      	ldr	r2, [pc, #92]	; (8001230 <SystemInit+0x68>)
 80011d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80011dc:	4b15      	ldr	r3, [pc, #84]	; (8001234 <SystemInit+0x6c>)
 80011de:	2201      	movs	r2, #1
 80011e0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80011e2:	4b14      	ldr	r3, [pc, #80]	; (8001234 <SystemInit+0x6c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <SystemInit+0x6c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80011ee:	4b11      	ldr	r3, [pc, #68]	; (8001234 <SystemInit+0x6c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80011f4:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <SystemInit+0x6c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a0e      	ldr	r2, [pc, #56]	; (8001234 <SystemInit+0x6c>)
 80011fa:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80011fe:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001202:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <SystemInit+0x6c>)
 8001206:	2200      	movs	r2, #0
 8001208:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800120a:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <SystemInit+0x6c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a09      	ldr	r2, [pc, #36]	; (8001234 <SystemInit+0x6c>)
 8001210:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001214:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001216:	4b07      	ldr	r3, [pc, #28]	; (8001234 <SystemInit+0x6c>)
 8001218:	2200      	movs	r2, #0
 800121a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800121c:	4b04      	ldr	r3, [pc, #16]	; (8001230 <SystemInit+0x68>)
 800121e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001222:	609a      	str	r2, [r3, #8]
  #endif
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000ed00 	.word	0xe000ed00
 8001234:	46020c00 	.word	0x46020c00

08001238 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001238:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001270 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800123c:	f7ff ffc4 	bl	80011c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001240:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001242:	e003      	b.n	800124c <LoopCopyDataInit>

08001244 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001244:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001246:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001248:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800124a:	3104      	adds	r1, #4

0800124c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800124c:	480a      	ldr	r0, [pc, #40]	; (8001278 <LoopForever+0xa>)
	ldr	r3, =_edata
 800124e:	4b0b      	ldr	r3, [pc, #44]	; (800127c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001250:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001252:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001254:	d3f6      	bcc.n	8001244 <CopyDataInit>
	ldr	r2, =_sbss
 8001256:	4a0a      	ldr	r2, [pc, #40]	; (8001280 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001258:	e002      	b.n	8001260 <LoopFillZerobss>

0800125a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800125a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800125c:	f842 3b04 	str.w	r3, [r2], #4

08001260 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001260:	4b08      	ldr	r3, [pc, #32]	; (8001284 <LoopForever+0x16>)
	cmp	r2, r3
 8001262:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001264:	d3f9      	bcc.n	800125a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001266:	f009 fd77 	bl	800ad58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800126a:	f7ff f9d1 	bl	8000610 <main>

0800126e <LoopForever>:

LoopForever:
    b LoopForever
 800126e:	e7fe      	b.n	800126e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001270:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001274:	0800aec8 	.word	0x0800aec8
	ldr	r0, =_sdata
 8001278:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800127c:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 8001280:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001284:	20000b7c 	.word	0x20000b7c

08001288 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001288:	e7fe      	b.n	8001288 <ADC1_IRQHandler>
	...

0800128c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001290:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <HAL_Init+0x4c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a10      	ldr	r2, [pc, #64]	; (80012d8 <HAL_Init+0x4c>)
 8001296:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800129a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800129c:	2003      	movs	r0, #3
 800129e:	f000 fcdc 	bl	8001c5a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80012a2:	f003 faad 	bl	8004800 <HAL_RCC_GetSysClockFreq>
 80012a6:	4602      	mov	r2, r0
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <HAL_Init+0x50>)
 80012aa:	6a1b      	ldr	r3, [r3, #32]
 80012ac:	f003 030f 	and.w	r3, r3, #15
 80012b0:	490b      	ldr	r1, [pc, #44]	; (80012e0 <HAL_Init+0x54>)
 80012b2:	5ccb      	ldrb	r3, [r1, r3]
 80012b4:	fa22 f303 	lsr.w	r3, r2, r3
 80012b8:	4a0a      	ldr	r2, [pc, #40]	; (80012e4 <HAL_Init+0x58>)
 80012ba:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012bc:	200f      	movs	r0, #15
 80012be:	f7ff fedf 	bl	8001080 <HAL_InitTick>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <HAL_Init+0x40>
  {
    return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e002      	b.n	80012d2 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012cc:	f7ff fcfa 	bl	8000cc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40022000 	.word	0x40022000
 80012dc:	46020c00 	.word	0x46020c00
 80012e0:	0800adb8 	.word	0x0800adb8
 80012e4:	20000000 	.word	0x20000000

080012e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <HAL_IncTick+0x20>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	461a      	mov	r2, r3
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <HAL_IncTick+0x24>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4413      	add	r3, r2
 80012f8:	4a04      	ldr	r2, [pc, #16]	; (800130c <HAL_IncTick+0x24>)
 80012fa:	6013      	str	r3, [r2, #0]
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	20000008 	.word	0x20000008
 800130c:	200006ec 	.word	0x200006ec

08001310 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  return uwTick;
 8001314:	4b03      	ldr	r3, [pc, #12]	; (8001324 <HAL_GetTick+0x14>)
 8001316:	681b      	ldr	r3, [r3, #0]
}
 8001318:	4618      	mov	r0, r3
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	200006ec 	.word	0x200006ec

08001328 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001330:	f7ff ffee 	bl	8001310 <HAL_GetTick>
 8001334:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001340:	d005      	beq.n	800134e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001342:	4b0a      	ldr	r3, [pc, #40]	; (800136c <HAL_Delay+0x44>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4413      	add	r3, r2
 800134c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800134e:	bf00      	nop
 8001350:	f7ff ffde 	bl	8001310 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	68fa      	ldr	r2, [r7, #12]
 800135c:	429a      	cmp	r2, r3
 800135e:	d8f7      	bhi.n	8001350 <HAL_Delay+0x28>
  {
  }
}
 8001360:	bf00      	nop
 8001362:	bf00      	nop
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000008 	.word	0x20000008

08001370 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	431a      	orrs	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	601a      	str	r2, [r3, #0]
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a0a      	ldr	r2, [pc, #40]	; (80013d4 <LL_ADC_SetResolution+0x3c>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d104      	bne.n	80013b8 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	3b01      	subs	r3, #1
 80013b2:	f003 030c 	and.w	r3, r3, #12
 80013b6:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	f023 020c 	bic.w	r2, r3, #12
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	431a      	orrs	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	60da      	str	r2, [r3, #12]
}
 80013c8:	bf00      	nop
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	46021000 	.word	0x46021000

080013d8 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80013ea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013ee:	683a      	ldr	r2, [r7, #0]
 80013f0:	431a      	orrs	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013fe:	683a      	ldr	r2, [r7, #0]
 8001400:	2a00      	cmp	r2, #0
 8001402:	d002      	beq.n	800140a <LL_ADC_SetGainCompensation+0x32>
 8001404:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001408:	e000      	b.n	800140c <LL_ADC_SetGainCompensation+0x34>
 800140a:	2200      	movs	r2, #0
 800140c:	431a      	orrs	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	671a      	str	r2, [r3, #112]	; 0x70
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800141e:	b480      	push	{r7}
 8001420:	b085      	sub	sp, #20
 8001422:	af00      	add	r7, sp, #0
 8001424:	60f8      	str	r0, [r7, #12]
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	695a      	ldr	r2, [r3, #20]
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	2107      	movs	r1, #7
 8001436:	fa01 f303 	lsl.w	r3, r1, r3
 800143a:	43db      	mvns	r3, r3
 800143c:	401a      	ands	r2, r3
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	6879      	ldr	r1, [r7, #4]
 8001446:	fa01 f303 	lsl.w	r3, r1, r3
 800144a:	431a      	orrs	r2, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001450:	bf00      	nop
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800146c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	6093      	str	r3, [r2, #8]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001490:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001494:	d101      	bne.n	800149a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001496:	2301      	movs	r3, #1
 8001498:	e000      	b.n	800149c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800149a:	2300      	movs	r3, #0
}
 800149c:	4618      	mov	r0, r3
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80014b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	609a      	str	r2, [r3, #8]
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80014e4:	d101      	bne.n	80014ea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80014e6:	2301      	movs	r3, #1
 80014e8:	e000      	b.n	80014ec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f003 0301 	and.w	r3, r3, #1
 8001508:	2b01      	cmp	r3, #1
 800150a:	d101      	bne.n	8001510 <LL_ADC_IsEnabled+0x18>
 800150c:	2301      	movs	r3, #1
 800150e:	e000      	b.n	8001512 <LL_ADC_IsEnabled+0x1a>
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800151e:	b480      	push	{r7}
 8001520:	b083      	sub	sp, #12
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f003 0304 	and.w	r3, r3, #4
 800152e:	2b04      	cmp	r3, #4
 8001530:	d101      	bne.n	8001536 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001532:	2301      	movs	r3, #1
 8001534:	e000      	b.n	8001538 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001536:	2300      	movs	r3, #0
}
 8001538:	4618      	mov	r0, r3
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f003 0308 	and.w	r3, r3, #8
 8001554:	2b08      	cmp	r3, #8
 8001556:	d101      	bne.n	800155c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001558:	2301      	movs	r3, #1
 800155a:	e000      	b.n	800155e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
	...

0800156c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08a      	sub	sp, #40	; 0x28
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001574:	2300      	movs	r3, #0
 8001576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 800157a:	2300      	movs	r3, #0
 800157c:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d101      	bne.n	800158c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e2b3      	b.n	8001af4 <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d003      	beq.n	800159c <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a8b      	ldr	r2, [pc, #556]	; (80017c8 <HAL_ADC_Init+0x25c>)
 800159a:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d109      	bne.n	80015b8 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff fbad 	bl	8000d04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff5f 	bl	8001480 <LL_ADC_IsDeepPowerDownEnabled>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d004      	beq.n	80015d2 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff ff45 	bl	800145c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff ff7a 	bl	80014d0 <LL_ADC_IsInternalRegulatorEnabled>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d115      	bne.n	800160e <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff ff5e 	bl	80014a8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80015ec:	4b77      	ldr	r3, [pc, #476]	; (80017cc <HAL_ADC_Init+0x260>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	099b      	lsrs	r3, r3, #6
 80015f2:	4a77      	ldr	r2, [pc, #476]	; (80017d0 <HAL_ADC_Init+0x264>)
 80015f4:	fba2 2303 	umull	r2, r3, r2, r3
 80015f8:	099b      	lsrs	r3, r3, #6
 80015fa:	3301      	adds	r3, #1
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001600:	e002      	b.n	8001608 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	3b01      	subs	r3, #1
 8001606:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1f9      	bne.n	8001602 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff ff5c 	bl	80014d0 <LL_ADC_IsInternalRegulatorEnabled>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d10e      	bne.n	800163c <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001622:	f043 0210 	orr.w	r2, r3, #16
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800162e:	f043 0201 	orr.w	r2, r3, #1
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ff6c 	bl	800151e <LL_ADC_REG_IsConversionOngoing>
 8001646:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800164c:	f003 0310 	and.w	r3, r3, #16
 8001650:	2b00      	cmp	r3, #0
 8001652:	f040 8244 	bne.w	8001ade <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	2b00      	cmp	r3, #0
 800165a:	f040 8240 	bne.w	8001ade <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001662:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001666:	f043 0202 	orr.w	r2, r3, #2
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff ff40 	bl	80014f8 <LL_ADC_IsEnabled>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d140      	bne.n	8001700 <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a51      	ldr	r2, [pc, #324]	; (80017c8 <HAL_ADC_Init+0x25c>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d028      	beq.n	80016da <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a51      	ldr	r2, [pc, #324]	; (80017d4 <HAL_ADC_Init+0x268>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d109      	bne.n	80016a6 <HAL_ADC_Init+0x13a>
 8001692:	4850      	ldr	r0, [pc, #320]	; (80017d4 <HAL_ADC_Init+0x268>)
 8001694:	f7ff ff30 	bl	80014f8 <LL_ADC_IsEnabled>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	bf0c      	ite	eq
 800169e:	2301      	moveq	r3, #1
 80016a0:	2300      	movne	r3, #0
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	e008      	b.n	80016b8 <HAL_ADC_Init+0x14c>
 80016a6:	4848      	ldr	r0, [pc, #288]	; (80017c8 <HAL_ADC_Init+0x25c>)
 80016a8:	f7ff ff26 	bl	80014f8 <LL_ADC_IsEnabled>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	bf0c      	ite	eq
 80016b2:	2301      	moveq	r3, #1
 80016b4:	2300      	movne	r3, #0
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d021      	beq.n	8001700 <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a44      	ldr	r2, [pc, #272]	; (80017d4 <HAL_ADC_Init+0x268>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d101      	bne.n	80016ca <HAL_ADC_Init+0x15e>
 80016c6:	4a44      	ldr	r2, [pc, #272]	; (80017d8 <HAL_ADC_Init+0x26c>)
 80016c8:	e000      	b.n	80016cc <HAL_ADC_Init+0x160>
 80016ca:	4a44      	ldr	r2, [pc, #272]	; (80017dc <HAL_ADC_Init+0x270>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	4619      	mov	r1, r3
 80016d2:	4610      	mov	r0, r2
 80016d4:	f7ff fe4c 	bl	8001370 <LL_ADC_SetCommonClock>
 80016d8:	e012      	b.n	8001700 <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	4619      	mov	r1, r3
 80016e4:	4610      	mov	r0, r2
 80016e6:	f7ff fe57 	bl	8001398 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 80016ea:	4b3c      	ldr	r3, [pc, #240]	; (80017dc <HAL_ADC_Init+0x270>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80016fa:	4938      	ldr	r1, [pc, #224]	; (80017dc <HAL_ADC_Init+0x270>)
 80016fc:	4313      	orrs	r3, r2
 80016fe:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a30      	ldr	r2, [pc, #192]	; (80017c8 <HAL_ADC_Init+0x25c>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d010      	beq.n	800172c <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001710:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001716:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 800171c:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001724:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8001726:	4313      	orrs	r3, r2
 8001728:	623b      	str	r3, [r7, #32]
 800172a:	e030      	b.n	800178e <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	7f1b      	ldrb	r3, [r3, #28]
 8001730:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001738:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800173a:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001740:	2a00      	cmp	r2, #0
 8001742:	d002      	beq.n	800174a <HAL_ADC_Init+0x1de>
 8001744:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001748:	e000      	b.n	800174c <HAL_ADC_Init+0x1e0>
 800174a:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800174c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001752:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	2b00      	cmp	r3, #0
 800175a:	da04      	bge.n	8001766 <HAL_ADC_Init+0x1fa>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001764:	e001      	b.n	800176a <HAL_ADC_Init+0x1fe>
 8001766:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 800176a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4918      	ldr	r1, [pc, #96]	; (80017d4 <HAL_ADC_Init+0x268>)
 8001772:	428b      	cmp	r3, r1
 8001774:	d103      	bne.n	800177e <HAL_ADC_Init+0x212>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800177c:	e003      	b.n	8001786 <HAL_ADC_Init+0x21a>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001784:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001786:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001788:	6a3a      	ldr	r2, [r7, #32]
 800178a:	4313      	orrs	r3, r2
 800178c:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001794:	2b01      	cmp	r3, #1
 8001796:	d12f      	bne.n	80017f8 <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a0a      	ldr	r2, [pc, #40]	; (80017c8 <HAL_ADC_Init+0x25c>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d007      	beq.n	80017b2 <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	3b01      	subs	r3, #1
 80017a8:	045b      	lsls	r3, r3, #17
 80017aa:	6a3a      	ldr	r2, [r7, #32]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	623b      	str	r3, [r7, #32]
 80017b0:	e022      	b.n	80017f8 <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d111      	bne.n	80017e0 <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80017bc:	6a3b      	ldr	r3, [r7, #32]
 80017be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c2:	623b      	str	r3, [r7, #32]
 80017c4:	e018      	b.n	80017f8 <HAL_ADC_Init+0x28c>
 80017c6:	bf00      	nop
 80017c8:	46021000 	.word	0x46021000
 80017cc:	20000000 	.word	0x20000000
 80017d0:	053e2d63 	.word	0x053e2d63
 80017d4:	42028000 	.word	0x42028000
 80017d8:	42028308 	.word	0x42028308
 80017dc:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80017e4:	f043 0220 	orr.w	r2, r3, #32
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80017f0:	f043 0201 	orr.w	r2, r3, #1
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a92      	ldr	r2, [pc, #584]	; (8001a48 <HAL_ADC_Init+0x4dc>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d018      	beq.n	8001834 <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001806:	2b00      	cmp	r3, #0
 8001808:	d009      	beq.n	800181e <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800180e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001816:	4313      	orrs	r3, r2
 8001818:	6a3a      	ldr	r2, [r7, #32]
 800181a:	4313      	orrs	r3, r2
 800181c:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	68da      	ldr	r2, [r3, #12]
 8001824:	4b89      	ldr	r3, [pc, #548]	; (8001a4c <HAL_ADC_Init+0x4e0>)
 8001826:	4013      	ands	r3, r2
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	6812      	ldr	r2, [r2, #0]
 800182c:	6a39      	ldr	r1, [r7, #32]
 800182e:	430b      	orrs	r3, r1
 8001830:	60d3      	str	r3, [r2, #12]
 8001832:	e031      	b.n	8001898 <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001838:	2b00      	cmp	r3, #0
 800183a:	d009      	beq.n	8001850 <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001840:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001848:	4313      	orrs	r3, r2
 800184a:	6a3a      	ldr	r2, [r7, #32]
 800184c:	4313      	orrs	r3, r2
 800184e:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	68da      	ldr	r2, [r3, #12]
 8001856:	4b7e      	ldr	r3, [pc, #504]	; (8001a50 <HAL_ADC_Init+0x4e4>)
 8001858:	4013      	ands	r3, r2
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	6812      	ldr	r2, [r2, #0]
 800185e:	6a39      	ldr	r1, [r7, #32]
 8001860:	430b      	orrs	r3, r1
 8001862:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d008      	beq.n	800187e <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a1a      	ldr	r2, [r3, #32]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	430a      	orrs	r2, r1
 800187c:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001882:	2b00      	cmp	r3, #0
 8001884:	d008      	beq.n	8001898 <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	430a      	orrs	r2, r1
 8001896:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a6a      	ldr	r2, [pc, #424]	; (8001a48 <HAL_ADC_Init+0x4dc>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	f000 8093 	beq.w	80019ca <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff fe38 	bl	800151e <LL_ADC_REG_IsConversionOngoing>
 80018ae:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff fe45 	bl	8001544 <LL_ADC_INJ_IsConversionOngoing>
 80018ba:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d161      	bne.n	8001986 <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d15e      	bne.n	8001986 <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	7f1b      	ldrb	r3, [r3, #28]
 80018cc:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4960      	ldr	r1, [pc, #384]	; (8001a54 <HAL_ADC_Init+0x4e8>)
 80018d4:	428b      	cmp	r3, r1
 80018d6:	d102      	bne.n	80018de <HAL_ADC_Init+0x372>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018dc:	e002      	b.n	80018e4 <HAL_ADC_Init+0x378>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018e2:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018e4:	4313      	orrs	r3, r2
 80018e6:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018f2:	f023 0303 	bic.w	r3, r3, #3
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	6812      	ldr	r2, [r2, #0]
 80018fa:	6a39      	ldr	r1, [r7, #32]
 80018fc:	430b      	orrs	r3, r1
 80018fe:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d007      	beq.n	8001918 <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	4619      	mov	r1, r3
 8001912:	4610      	mov	r0, r2
 8001914:	f7ff fd60 	bl	80013d8 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800191e:	2b01      	cmp	r3, #1
 8001920:	d11e      	bne.n	8001960 <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001926:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	691a      	ldr	r2, [r3, #16]
 800192e:	4b4a      	ldr	r3, [pc, #296]	; (8001a58 <HAL_ADC_Init+0x4ec>)
 8001930:	4013      	ands	r3, r2
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001936:	0411      	lsls	r1, r2, #16
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800193c:	4311      	orrs	r1, r2
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8001942:	4311      	orrs	r1, r2
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8001948:	4311      	orrs	r1, r2
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800194e:	0892      	lsrs	r2, r2, #2
 8001950:	430a      	orrs	r2, r1
 8001952:	431a      	orrs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f042 0201 	orr.w	r2, r2, #1
 800195c:	611a      	str	r2, [r3, #16]
 800195e:	e007      	b.n	8001970 <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	691a      	ldr	r2, [r3, #16]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f022 0201 	bic.w	r2, r2, #1
 800196e:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	430a      	orrs	r2, r1
 8001984:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d10c      	bne.n	80019a8 <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001994:	f023 010f 	bic.w	r1, r3, #15
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199c:	1e5a      	subs	r2, r3, #1
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	430a      	orrs	r2, r1
 80019a4:	631a      	str	r2, [r3, #48]	; 0x30
 80019a6:	e007      	b.n	80019b8 <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f022 020f 	bic.w	r2, r2, #15
 80019b6:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80019bc:	f023 0303 	bic.w	r3, r3, #3
 80019c0:	f043 0201 	orr.w	r2, r3, #1
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80019c8:	e092      	b.n	8001af0 <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d111      	bne.n	80019f8 <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                     hadc->Init.Oversampling.RightBitShift |
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80019dc:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                     hadc->Init.Oversampling.RightBitShift |
 80019e2:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 80019e8:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80019ea:	69fa      	ldr	r2, [r7, #28]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	f043 0301 	orr.w	r3, r3, #1
 80019f6:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	691a      	ldr	r2, [r3, #16]
 80019fe:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <HAL_ADC_Init+0x4f0>)
 8001a00:	4013      	ands	r3, r2
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	6812      	ldr	r2, [r2, #0]
 8001a06:	69f9      	ldr	r1, [r7, #28]
 8001a08:	430b      	orrs	r3, r1
 8001a0a:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6818      	ldr	r0, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a14:	461a      	mov	r2, r3
 8001a16:	2100      	movs	r1, #0
 8001a18:	f7ff fd01 	bl	800141e <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6818      	ldr	r0, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a24:	461a      	mov	r2, r3
 8001a26:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 8001a2a:	f7ff fcf8 	bl	800141e <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d114      	bne.n	8001a60 <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f062 020f 	orn	r2, r2, #15
 8001a44:	629a      	str	r2, [r3, #40]	; 0x28
 8001a46:	e024      	b.n	8001a92 <HAL_ADC_Init+0x526>
 8001a48:	46021000 	.word	0x46021000
 8001a4c:	fff0c013 	.word	0xfff0c013
 8001a50:	ffde800d 	.word	0xffde800d
 8001a54:	42028000 	.word	0x42028000
 8001a58:	fc00f81e 	.word	0xfc00f81e
 8001a5c:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a68:	d113      	bne.n	8001a92 <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a74:	3b01      	subs	r3, #1
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	f003 031c 	and.w	r3, r3, #28
 8001a7c:	f06f 020f 	mvn.w	r2, #15
 8001a80:	fa02 f103 	lsl.w	r1, r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	68da      	ldr	r2, [r3, #12]
 8001a98:	4b18      	ldr	r3, [pc, #96]	; (8001afc <HAL_ADC_Init+0x590>)
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	6a3a      	ldr	r2, [r7, #32]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d10b      	bne.n	8001aba <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001aac:	f023 0303 	bic.w	r3, r3, #3
 8001ab0:	f043 0201 	orr.w	r2, r3, #1
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001ab8:	e01a      	b.n	8001af0 <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001abe:	f023 0312 	bic.w	r3, r3, #18
 8001ac2:	f043 0210 	orr.w	r2, r3, #16
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001ace:	f043 0201 	orr.w	r2, r3, #1
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001adc:	e008      	b.n	8001af0 <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001ae2:	f043 0210 	orr.w	r2, r3, #16
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 8001af0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3728      	adds	r7, #40	; 0x28
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	833ffff3 	.word	0x833ffff3

08001b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b10:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <__NVIC_SetPriorityGrouping+0x44>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b32:	4a04      	ldr	r2, [pc, #16]	; (8001b44 <__NVIC_SetPriorityGrouping+0x44>)
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	60d3      	str	r3, [r2, #12]
}
 8001b38:	bf00      	nop
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b4c:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <__NVIC_GetPriorityGrouping+0x18>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	0a1b      	lsrs	r3, r3, #8
 8001b52:	f003 0307 	and.w	r3, r3, #7
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	db0b      	blt.n	8001b8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	f003 021f 	and.w	r2, r3, #31
 8001b7c:	4907      	ldr	r1, [pc, #28]	; (8001b9c <__NVIC_EnableIRQ+0x38>)
 8001b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b82:	095b      	lsrs	r3, r3, #5
 8001b84:	2001      	movs	r0, #1
 8001b86:	fa00 f202 	lsl.w	r2, r0, r2
 8001b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	e000e100 	.word	0xe000e100

08001ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	6039      	str	r1, [r7, #0]
 8001baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	db0a      	blt.n	8001bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	490c      	ldr	r1, [pc, #48]	; (8001bec <__NVIC_SetPriority+0x4c>)
 8001bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbe:	0112      	lsls	r2, r2, #4
 8001bc0:	b2d2      	uxtb	r2, r2
 8001bc2:	440b      	add	r3, r1
 8001bc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bc8:	e00a      	b.n	8001be0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	4908      	ldr	r1, [pc, #32]	; (8001bf0 <__NVIC_SetPriority+0x50>)
 8001bd0:	79fb      	ldrb	r3, [r7, #7]
 8001bd2:	f003 030f 	and.w	r3, r3, #15
 8001bd6:	3b04      	subs	r3, #4
 8001bd8:	0112      	lsls	r2, r2, #4
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	440b      	add	r3, r1
 8001bde:	761a      	strb	r2, [r3, #24]
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	e000e100 	.word	0xe000e100
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b089      	sub	sp, #36	; 0x24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	f1c3 0307 	rsb	r3, r3, #7
 8001c0e:	2b04      	cmp	r3, #4
 8001c10:	bf28      	it	cs
 8001c12:	2304      	movcs	r3, #4
 8001c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	3304      	adds	r3, #4
 8001c1a:	2b06      	cmp	r3, #6
 8001c1c:	d902      	bls.n	8001c24 <NVIC_EncodePriority+0x30>
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	3b03      	subs	r3, #3
 8001c22:	e000      	b.n	8001c26 <NVIC_EncodePriority+0x32>
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c28:	f04f 32ff 	mov.w	r2, #4294967295
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	43da      	mvns	r2, r3
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	401a      	ands	r2, r3
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	fa01 f303 	lsl.w	r3, r1, r3
 8001c46:	43d9      	mvns	r1, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c4c:	4313      	orrs	r3, r2
         );
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3724      	adds	r7, #36	; 0x24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff ff4c 	bl	8001b00 <__NVIC_SetPriorityGrouping>
}
 8001c68:	bf00      	nop
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
 8001c7c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c7e:	f7ff ff63 	bl	8001b48 <__NVIC_GetPriorityGrouping>
 8001c82:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	68b9      	ldr	r1, [r7, #8]
 8001c88:	6978      	ldr	r0, [r7, #20]
 8001c8a:	f7ff ffb3 	bl	8001bf4 <NVIC_EncodePriority>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c94:	4611      	mov	r1, r2
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff ff82 	bl	8001ba0 <__NVIC_SetPriority>
}
 8001c9c:	bf00      	nop
 8001c9e:	3718      	adds	r7, #24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff ff56 	bl	8001b64 <__NVIC_EnableIRQ>
}
 8001cb8:	bf00      	nop
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b089      	sub	sp, #36	; 0x24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001cd2:	e1ba      	b.n	800204a <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	2101      	movs	r1, #1
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f000 81aa 	beq.w	8002044 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a55      	ldr	r2, [pc, #340]	; (8001e48 <HAL_GPIO_Init+0x188>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d15d      	bne.n	8001db4 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8001cfe:	2201      	movs	r2, #1
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43db      	mvns	r3, r3
 8001d08:	69fa      	ldr	r2, [r7, #28]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f003 0201 	and.w	r2, r3, #1
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	69fa      	ldr	r2, [r7, #28]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	69fa      	ldr	r2, [r7, #28]
 8001d26:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001d28:	4a48      	ldr	r2, [pc, #288]	; (8001e4c <HAL_GPIO_Init+0x18c>)
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001d30:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001d32:	4a46      	ldr	r2, [pc, #280]	; (8001e4c <HAL_GPIO_Init+0x18c>)
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	4413      	add	r3, r2
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	08da      	lsrs	r2, r3, #3
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	3208      	adds	r2, #8
 8001d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d4a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	220f      	movs	r2, #15
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	69fa      	ldr	r2, [r7, #28]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	220b      	movs	r2, #11
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	69fa      	ldr	r2, [r7, #28]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	08da      	lsrs	r2, r3, #3
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	3208      	adds	r2, #8
 8001d7e:	69f9      	ldr	r1, [r7, #28]
 8001d80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	2203      	movs	r2, #3
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	69fa      	ldr	r2, [r7, #28]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	2202      	movs	r2, #2
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	69fa      	ldr	r2, [r7, #28]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	69fa      	ldr	r2, [r7, #28]
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	e067      	b.n	8001e84 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d003      	beq.n	8001dc4 <HAL_GPIO_Init+0x104>
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	2b12      	cmp	r3, #18
 8001dc2:	d145      	bne.n	8001e50 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	08da      	lsrs	r2, r3, #3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3208      	adds	r2, #8
 8001dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	f003 0307 	and.w	r3, r3, #7
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	220f      	movs	r2, #15
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	69fa      	ldr	r2, [r7, #28]
 8001de4:	4013      	ands	r3, r2
 8001de6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	f003 020f 	and.w	r2, r3, #15
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	69fa      	ldr	r2, [r7, #28]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	08da      	lsrs	r2, r3, #3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3208      	adds	r2, #8
 8001e0a:	69f9      	ldr	r1, [r7, #28]
 8001e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	69fa      	ldr	r2, [r7, #28]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 0203 	and.w	r2, r3, #3
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	69fa      	ldr	r2, [r7, #28]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	69fa      	ldr	r2, [r7, #28]
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	e01e      	b.n	8001e84 <HAL_GPIO_Init+0x1c4>
 8001e46:	bf00      	nop
 8001e48:	46020000 	.word	0x46020000
 8001e4c:	0800ae10 	.word	0x0800ae10
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	2203      	movs	r2, #3
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	69fa      	ldr	r2, [r7, #28]
 8001e64:	4013      	ands	r3, r2
 8001e66:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 0203 	and.w	r2, r3, #3
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	69fa      	ldr	r2, [r7, #28]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	69fa      	ldr	r2, [r7, #28]
 8001e82:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d00b      	beq.n	8001ea4 <HAL_GPIO_Init+0x1e4>
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d007      	beq.n	8001ea4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e98:	2b11      	cmp	r3, #17
 8001e9a:	d003      	beq.n	8001ea4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b12      	cmp	r3, #18
 8001ea2:	d130      	bne.n	8001f06 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	2203      	movs	r2, #3
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	69fa      	ldr	r2, [r7, #28]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	68da      	ldr	r2, [r3, #12]
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	69fa      	ldr	r2, [r7, #28]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	69fa      	ldr	r2, [r7, #28]
 8001ed2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001eda:	2201      	movs	r2, #1
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	69fa      	ldr	r2, [r7, #28]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	091b      	lsrs	r3, r3, #4
 8001ef0:	f003 0201 	and.w	r2, r3, #1
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	69fa      	ldr	r2, [r7, #28]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	69fa      	ldr	r2, [r7, #28]
 8001f04:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b03      	cmp	r3, #3
 8001f0c:	d017      	beq.n	8001f3e <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	2203      	movs	r2, #3
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	69fa      	ldr	r2, [r7, #28]
 8001f22:	4013      	ands	r3, r2
 8001f24:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	689a      	ldr	r2, [r3, #8]
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	69fa      	ldr	r2, [r7, #28]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	69fa      	ldr	r2, [r7, #28]
 8001f3c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d07c      	beq.n	8002044 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001f4a:	4a47      	ldr	r2, [pc, #284]	; (8002068 <HAL_GPIO_Init+0x3a8>)
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	089b      	lsrs	r3, r3, #2
 8001f50:	3318      	adds	r3, #24
 8001f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f56:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	220f      	movs	r2, #15
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43db      	mvns	r3, r3
 8001f68:	69fa      	ldr	r2, [r7, #28]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	0a9a      	lsrs	r2, r3, #10
 8001f72:	4b3e      	ldr	r3, [pc, #248]	; (800206c <HAL_GPIO_Init+0x3ac>)
 8001f74:	4013      	ands	r3, r2
 8001f76:	697a      	ldr	r2, [r7, #20]
 8001f78:	f002 0203 	and.w	r2, r2, #3
 8001f7c:	00d2      	lsls	r2, r2, #3
 8001f7e:	4093      	lsls	r3, r2
 8001f80:	69fa      	ldr	r2, [r7, #28]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001f86:	4938      	ldr	r1, [pc, #224]	; (8002068 <HAL_GPIO_Init+0x3a8>)
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	089b      	lsrs	r3, r3, #2
 8001f8c:	3318      	adds	r3, #24
 8001f8e:	69fa      	ldr	r2, [r7, #28]
 8001f90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001f94:	4b34      	ldr	r3, [pc, #208]	; (8002068 <HAL_GPIO_Init+0x3a8>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	69fa      	ldr	r2, [r7, #28]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d003      	beq.n	8001fb8 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8001fb0:	69fa      	ldr	r2, [r7, #28]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8001fb8:	4a2b      	ldr	r2, [pc, #172]	; (8002068 <HAL_GPIO_Init+0x3a8>)
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001fbe:	4b2a      	ldr	r3, [pc, #168]	; (8002068 <HAL_GPIO_Init+0x3a8>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	69fa      	ldr	r2, [r7, #28]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8001fda:	69fa      	ldr	r2, [r7, #28]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8001fe2:	4a21      	ldr	r2, [pc, #132]	; (8002068 <HAL_GPIO_Init+0x3a8>)
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001fe8:	4b1f      	ldr	r3, [pc, #124]	; (8002068 <HAL_GPIO_Init+0x3a8>)
 8001fea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fee:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	69fa      	ldr	r2, [r7, #28]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8002006:	69fa      	ldr	r2, [r7, #28]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	4313      	orrs	r3, r2
 800200c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800200e:	4a16      	ldr	r2, [pc, #88]	; (8002068 <HAL_GPIO_Init+0x3a8>)
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8002016:	4b14      	ldr	r3, [pc, #80]	; (8002068 <HAL_GPIO_Init+0x3a8>)
 8002018:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800201c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	43db      	mvns	r3, r3
 8002022:	69fa      	ldr	r2, [r7, #28]
 8002024:	4013      	ands	r3, r2
 8002026:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d003      	beq.n	800203c <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8002034:	69fa      	ldr	r2, [r7, #28]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	4313      	orrs	r3, r2
 800203a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 800203c:	4a0a      	ldr	r2, [pc, #40]	; (8002068 <HAL_GPIO_Init+0x3a8>)
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	3301      	adds	r3, #1
 8002048:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	fa22 f303 	lsr.w	r3, r2, r3
 8002054:	2b00      	cmp	r3, #0
 8002056:	f47f ae3d 	bne.w	8001cd4 <HAL_GPIO_Init+0x14>
  }
}
 800205a:	bf00      	nop
 800205c:	bf00      	nop
 800205e:	3724      	adds	r7, #36	; 0x24
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	46022000 	.word	0x46022000
 800206c:	002f7f7f 	.word	0x002f7f7f

08002070 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	460b      	mov	r3, r1
 800207a:	807b      	strh	r3, [r7, #2]
 800207c:	4613      	mov	r3, r2
 800207e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002080:	787b      	ldrb	r3, [r7, #1]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002086:	887a      	ldrh	r2, [r7, #2]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 800208c:	e002      	b.n	8002094 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800208e:	887a      	ldrh	r2, [r7, #2]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020a8:	2300      	movs	r3, #0
 80020aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80020ac:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d002      	beq.n	80020be <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	73fb      	strb	r3, [r7, #15]
 80020bc:	e007      	b.n	80020ce <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80020be:	4b07      	ldr	r3, [pc, #28]	; (80020dc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f023 0204 	bic.w	r2, r3, #4
 80020c6:	4905      	ldr	r1, [pc, #20]	; (80020dc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	600b      	str	r3, [r1, #0]
  }

  return status;
 80020ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	40030400 	.word	0x40030400

080020e0 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80020e4:	4b05      	ldr	r3, [pc, #20]	; (80020fc <HAL_ICACHE_Enable+0x1c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a04      	ldr	r2, [pc, #16]	; (80020fc <HAL_ICACHE_Enable+0x1c>)
 80020ea:	f043 0301 	orr.w	r3, r3, #1
 80020ee:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	40030400 	.word	0x40030400

08002100 <HAL_ICACHE_Disable>:
  * @note   This function waits for the cache being disabled but
  *         not for the end of the automatic cache invalidation procedure.
  * @retval HAL status (HAL_OK/HAL_TIMEOUT)
  */
HAL_StatusTypeDef HAL_ICACHE_Disable(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002106:	2300      	movs	r3, #0
 8002108:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Make sure BSYENDF is reset before to disable the instruction cache */
  /* as it automatically starts a cache invalidation procedure */
  WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 800210a:	4b14      	ldr	r3, [pc, #80]	; (800215c <HAL_ICACHE_Disable+0x5c>)
 800210c:	2202      	movs	r2, #2
 800210e:	60da      	str	r2, [r3, #12]

  CLEAR_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002110:	4b12      	ldr	r3, [pc, #72]	; (800215c <HAL_ICACHE_Disable+0x5c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a11      	ldr	r2, [pc, #68]	; (800215c <HAL_ICACHE_Disable+0x5c>)
 8002116:	f023 0301 	bic.w	r3, r3, #1
 800211a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800211c:	f7ff f8f8 	bl	8001310 <HAL_GetTick>
 8002120:	6038      	str	r0, [r7, #0]

  /* Wait for instruction cache being disabled */
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002122:	e00f      	b.n	8002144 <HAL_ICACHE_Disable+0x44>
  {
    if ((HAL_GetTick() - tickstart) > ICACHE_DISABLE_TIMEOUT_VALUE)
 8002124:	f7ff f8f4 	bl	8001310 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b01      	cmp	r3, #1
 8002130:	d908      	bls.n	8002144 <HAL_ICACHE_Disable+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002132:	4b0a      	ldr	r3, [pc, #40]	; (800215c <HAL_ICACHE_Disable+0x5c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d002      	beq.n	8002144 <HAL_ICACHE_Disable+0x44>
      {
        status = HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	71fb      	strb	r3, [r7, #7]
        break;
 8002142:	e005      	b.n	8002150 <HAL_ICACHE_Disable+0x50>
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002144:	4b05      	ldr	r3, [pc, #20]	; (800215c <HAL_ICACHE_Disable+0x5c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1e9      	bne.n	8002124 <HAL_ICACHE_Disable+0x24>
      }
    }
  }

  return status;
 8002150:	79fb      	ldrb	r3, [r7, #7]
}
 8002152:	4618      	mov	r0, r3
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40030400 	.word	0x40030400

08002160 <HAL_ICACHE_EnableRemapRegion>:
                     This parameter can be a value of @arg @ref ICACHE_Region
  * @param  pRegionConfig  Pointer to structure of ICACHE region configuration parameters
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef  HAL_ICACHE_EnableRemapRegion(uint32_t Region, const ICACHE_RegionConfigTypeDef *const pRegionConfig)
{
 8002160:	b480      	push	{r7}
 8002162:	b087      	sub	sp, #28
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800216a:	2300      	movs	r3, #0
 800216c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ICACHE_REGION_SIZE(pRegionConfig->Size));
  assert_param(IS_ICACHE_REGION_TRAFFIC_ROUTE(pRegionConfig->TrafficRoute));
  assert_param(IS_ICACHE_REGION_OUTPUT_BURST_TYPE(pRegionConfig->OutputBurstType));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800216e:	4b22      	ldr	r3, [pc, #136]	; (80021f8 <HAL_ICACHE_EnableRemapRegion+0x98>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	d002      	beq.n	8002180 <HAL_ICACHE_EnableRemapRegion+0x20>
  {
    status = HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	75fb      	strb	r3, [r7, #23]
 800217e:	e034      	b.n	80021ea <HAL_ICACHE_EnableRemapRegion+0x8a>
  }
  else
  {
    /* Get region control register address */
    p_reg = &(ICACHE->CRR0) + (1U * Region);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	009a      	lsls	r2, r3, #2
 8002184:	4b1d      	ldr	r3, [pc, #116]	; (80021fc <HAL_ICACHE_EnableRemapRegion+0x9c>)
 8002186:	4413      	add	r3, r2
 8002188:	613b      	str	r3, [r7, #16]

    /* Check region is not already enabled */
    if ((*p_reg & ICACHE_CRRx_REN) != 0U)
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d002      	beq.n	800219c <HAL_ICACHE_EnableRemapRegion+0x3c>
    {
      status = HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	75fb      	strb	r3, [r7, #23]
 800219a:	e026      	b.n	80021ea <HAL_ICACHE_EnableRemapRegion+0x8a>
      /* Region 8MB:   BaseAddress size 6 bits, RemapAddress size 9 bits  */
      /* Region 16MB:  BaseAddress size 5 bits, RemapAddress size 8 bits  */
      /* Region 32MB:  BaseAddress size 4 bits, RemapAddress size 7 bits  */
      /* Region 64MB:  BaseAddress size 3 bits, RemapAddress size 6 bits  */
      /* Region 128MB: BaseAddress size 2 bits, RemapAddress size 5 bits  */
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	0d5a      	lsrs	r2, r3, #21
               (0xFFU & ~(pRegionConfig->Size - 1U));
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	425b      	negs	r3, r3
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 80021a8:	4013      	ands	r3, r2
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	60fb      	str	r3, [r7, #12]
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	095a      	lsrs	r2, r3, #5
                ((uint32_t)(0x7FFU & ~(pRegionConfig->Size - 1U)) << ICACHE_CRRx_REMAPADDR_Pos));
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	425b      	negs	r3, r3
 80021ba:	041b      	lsls	r3, r3, #16
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 80021bc:	401a      	ands	r2, r3
 80021be:	4b10      	ldr	r3, [pc, #64]	; (8002200 <HAL_ICACHE_EnableRemapRegion+0xa0>)
 80021c0:	4013      	ands	r3, r2
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	60fb      	str	r3, [r7, #12]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	025a      	lsls	r2, r3, #9
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	431a      	orrs	r2, r3
               pRegionConfig->OutputBurstType;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	691b      	ldr	r3, [r3, #16]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 80021d8:	4313      	orrs	r3, r2
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	4313      	orrs	r3, r2
 80021de:	60fb      	str	r3, [r7, #12]
      *p_reg = (value | ICACHE_CRRx_REN);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
 80021ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	371c      	adds	r7, #28
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	40030400 	.word	0x40030400
 80021fc:	40030420 	.word	0x40030420
 8002200:	07ff0000 	.word	0x07ff0000

08002204 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002206:	b08f      	sub	sp, #60	; 0x3c
 8002208:	af0a      	add	r7, sp, #40	; 0x28
 800220a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e116      	b.n	8002444 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hpcd->Instance;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	60bb      	str	r3, [r7, #8]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	d106      	bne.n	8002236 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f7fe fe91 	bl	8000f58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2203      	movs	r2, #3
 800223a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (STM32U575xx) || defined (STM32U585xx)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 14)) == 0U)
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002242:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d102      	bne.n	8002250 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4618      	mov	r0, r3
 8002256:	f007 fdfb 	bl	8009e50 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	603b      	str	r3, [r7, #0]
 8002260:	687e      	ldr	r6, [r7, #4]
 8002262:	466d      	mov	r5, sp
 8002264:	f106 0410 	add.w	r4, r6, #16
 8002268:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800226a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800226c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800226e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002270:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002274:	e885 0003 	stmia.w	r5, {r0, r1}
 8002278:	1d33      	adds	r3, r6, #4
 800227a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800227c:	6838      	ldr	r0, [r7, #0]
 800227e:	f007 fd18 	bl	8009cb2 <USB_CoreInit>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d005      	beq.n	8002294 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2202      	movs	r2, #2
 800228c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e0d7      	b.n	8002444 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2100      	movs	r1, #0
 800229a:	4618      	mov	r0, r3
 800229c:	f007 fde9 	bl	8009e72 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022a0:	2300      	movs	r3, #0
 80022a2:	73fb      	strb	r3, [r7, #15]
 80022a4:	e04a      	b.n	800233c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022a6:	7bfa      	ldrb	r2, [r7, #15]
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	4613      	mov	r3, r2
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	4413      	add	r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	440b      	add	r3, r1
 80022b4:	333d      	adds	r3, #61	; 0x3d
 80022b6:	2201      	movs	r2, #1
 80022b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022ba:	7bfa      	ldrb	r2, [r7, #15]
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	4613      	mov	r3, r2
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	4413      	add	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	440b      	add	r3, r1
 80022c8:	333c      	adds	r3, #60	; 0x3c
 80022ca:	7bfa      	ldrb	r2, [r7, #15]
 80022cc:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022ce:	7bfa      	ldrb	r2, [r7, #15]
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
 80022d2:	b298      	uxth	r0, r3
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	4413      	add	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	440b      	add	r3, r1
 80022e0:	3356      	adds	r3, #86	; 0x56
 80022e2:	4602      	mov	r2, r0
 80022e4:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022e6:	7bfa      	ldrb	r2, [r7, #15]
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	4413      	add	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	440b      	add	r3, r1
 80022f4:	3340      	adds	r3, #64	; 0x40
 80022f6:	2200      	movs	r2, #0
 80022f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022fa:	7bfa      	ldrb	r2, [r7, #15]
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	4613      	mov	r3, r2
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	4413      	add	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	440b      	add	r3, r1
 8002308:	3344      	adds	r3, #68	; 0x44
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800230e:	7bfa      	ldrb	r2, [r7, #15]
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	4613      	mov	r3, r2
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	4413      	add	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	440b      	add	r3, r1
 800231c:	3348      	adds	r3, #72	; 0x48
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002322:	7bfa      	ldrb	r2, [r7, #15]
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	4613      	mov	r3, r2
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	4413      	add	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	440b      	add	r3, r1
 8002330:	334c      	adds	r3, #76	; 0x4c
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002336:	7bfb      	ldrb	r3, [r7, #15]
 8002338:	3301      	adds	r3, #1
 800233a:	73fb      	strb	r3, [r7, #15]
 800233c:	7bfa      	ldrb	r2, [r7, #15]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	429a      	cmp	r2, r3
 8002344:	d3af      	bcc.n	80022a6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002346:	2300      	movs	r3, #0
 8002348:	73fb      	strb	r3, [r7, #15]
 800234a:	e044      	b.n	80023d6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800234c:	7bfa      	ldrb	r2, [r7, #15]
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	4613      	mov	r3, r2
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	4413      	add	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800235e:	2200      	movs	r2, #0
 8002360:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002362:	7bfa      	ldrb	r2, [r7, #15]
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	4413      	add	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	440b      	add	r3, r1
 8002370:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002374:	7bfa      	ldrb	r2, [r7, #15]
 8002376:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002378:	7bfa      	ldrb	r2, [r7, #15]
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	4413      	add	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800238a:	2200      	movs	r2, #0
 800238c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800238e:	7bfa      	ldrb	r2, [r7, #15]
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	4413      	add	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	440b      	add	r3, r1
 800239c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023a4:	7bfa      	ldrb	r2, [r7, #15]
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	4613      	mov	r3, r2
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	4413      	add	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	440b      	add	r3, r1
 80023b2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023ba:	7bfa      	ldrb	r2, [r7, #15]
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	4413      	add	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	440b      	add	r3, r1
 80023c8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023d0:	7bfb      	ldrb	r3, [r7, #15]
 80023d2:	3301      	adds	r3, #1
 80023d4:	73fb      	strb	r3, [r7, #15]
 80023d6:	7bfa      	ldrb	r2, [r7, #15]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d3b5      	bcc.n	800234c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	603b      	str	r3, [r7, #0]
 80023e6:	687e      	ldr	r6, [r7, #4]
 80023e8:	466d      	mov	r5, sp
 80023ea:	f106 0410 	add.w	r4, r6, #16
 80023ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80023fe:	1d33      	adds	r3, r6, #4
 8002400:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002402:	6838      	ldr	r0, [r7, #0]
 8002404:	f007 fd82 	bl	8009f0c <USB_DevInit>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d005      	beq.n	800241a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2202      	movs	r2, #2
 8002412:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e014      	b.n	8002444 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242e:	2b01      	cmp	r3, #1
 8002430:	d102      	bne.n	8002438 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 ff38 	bl	80032a8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f008 f88b 	bl	800a558 <USB_DevDisconnect>

  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800244c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800244c:	b590      	push	{r4, r7, lr}
 800244e:	b08d      	sub	sp, #52	; 0x34
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800245a:	6a3b      	ldr	r3, [r7, #32]
 800245c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f008 f92c 	bl	800a6c0 <USB_GetMode>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	f040 84b7 	bne.w	8002dde <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f008 f890 	bl	800a59a <USB_ReadInterrupts>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 84ad 	beq.w	8002ddc <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	0a1b      	lsrs	r3, r3, #8
 800248c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f008 f87d 	bl	800a59a <USB_ReadInterrupts>
 80024a0:	4603      	mov	r3, r0
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d107      	bne.n	80024ba <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	695a      	ldr	r2, [r3, #20]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f002 0202 	and.w	r2, r2, #2
 80024b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f008 f86b 	bl	800a59a <USB_ReadInterrupts>
 80024c4:	4603      	mov	r3, r0
 80024c6:	f003 0310 	and.w	r3, r3, #16
 80024ca:	2b10      	cmp	r3, #16
 80024cc:	d161      	bne.n	8002592 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	699a      	ldr	r2, [r3, #24]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f022 0210 	bic.w	r2, r2, #16
 80024dc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80024de:	6a3b      	ldr	r3, [r7, #32]
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	f003 020f 	and.w	r2, r3, #15
 80024ea:	4613      	mov	r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	4413      	add	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	4413      	add	r3, r2
 80024fa:	3304      	adds	r3, #4
 80024fc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	0c5b      	lsrs	r3, r3, #17
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	2b02      	cmp	r3, #2
 8002508:	d124      	bne.n	8002554 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002510:	4013      	ands	r3, r2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d035      	beq.n	8002582 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	091b      	lsrs	r3, r3, #4
 800251e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002520:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002524:	b29b      	uxth	r3, r3
 8002526:	461a      	mov	r2, r3
 8002528:	6a38      	ldr	r0, [r7, #32]
 800252a:	f007 ffbd 	bl	800a4a8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	68da      	ldr	r2, [r3, #12]
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	091b      	lsrs	r3, r3, #4
 8002536:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800253a:	441a      	add	r2, r3
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	695a      	ldr	r2, [r3, #20]
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	091b      	lsrs	r3, r3, #4
 8002548:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800254c:	441a      	add	r2, r3
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	615a      	str	r2, [r3, #20]
 8002552:	e016      	b.n	8002582 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	0c5b      	lsrs	r3, r3, #17
 8002558:	f003 030f 	and.w	r3, r3, #15
 800255c:	2b06      	cmp	r3, #6
 800255e:	d110      	bne.n	8002582 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002566:	2208      	movs	r2, #8
 8002568:	4619      	mov	r1, r3
 800256a:	6a38      	ldr	r0, [r7, #32]
 800256c:	f007 ff9c 	bl	800a4a8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	695a      	ldr	r2, [r3, #20]
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	091b      	lsrs	r3, r3, #4
 8002578:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800257c:	441a      	add	r2, r3
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	699a      	ldr	r2, [r3, #24]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f042 0210 	orr.w	r2, r2, #16
 8002590:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f007 ffff 	bl	800a59a <USB_ReadInterrupts>
 800259c:	4603      	mov	r3, r0
 800259e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025a2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80025a6:	f040 80a7 	bne.w	80026f8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f008 f804 	bl	800a5c0 <USB_ReadDevAllOutEpInterrupt>
 80025b8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80025ba:	e099      	b.n	80026f0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80025bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 808e 	beq.w	80026e4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	4611      	mov	r1, r2
 80025d2:	4618      	mov	r0, r3
 80025d4:	f008 f828 	bl	800a628 <USB_ReadDevOutEPInterrupt>
 80025d8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00c      	beq.n	80025fe <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	015a      	lsls	r2, r3, #5
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	4413      	add	r3, r2
 80025ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025f0:	461a      	mov	r2, r3
 80025f2:	2301      	movs	r3, #1
 80025f4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80025f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 fd27 	bl	800304c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	f003 0308 	and.w	r3, r3, #8
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00c      	beq.n	8002622 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	015a      	lsls	r2, r3, #5
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	4413      	add	r3, r2
 8002610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002614:	461a      	mov	r2, r3
 8002616:	2308      	movs	r3, #8
 8002618:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800261a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 fdfd 	bl	800321c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	f003 0310 	and.w	r3, r3, #16
 8002628:	2b00      	cmp	r3, #0
 800262a:	d008      	beq.n	800263e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	015a      	lsls	r2, r3, #5
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	4413      	add	r3, r2
 8002634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002638:	461a      	mov	r2, r3
 800263a:	2310      	movs	r3, #16
 800263c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d030      	beq.n	80026aa <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002648:	6a3b      	ldr	r3, [r7, #32]
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002650:	2b80      	cmp	r3, #128	; 0x80
 8002652:	d109      	bne.n	8002668 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	69fa      	ldr	r2, [r7, #28]
 800265e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002662:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002666:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800266a:	4613      	mov	r3, r2
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	4413      	add	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	4413      	add	r3, r2
 800267a:	3304      	adds	r3, #4
 800267c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	78db      	ldrb	r3, [r3, #3]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d108      	bne.n	8002698 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	2200      	movs	r2, #0
 800268a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	b2db      	uxtb	r3, r3
 8002690:	4619      	mov	r1, r3
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 fbf0 	bl	8002e78 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	015a      	lsls	r2, r3, #5
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	4413      	add	r3, r2
 80026a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026a4:	461a      	mov	r2, r3
 80026a6:	2302      	movs	r3, #2
 80026a8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	f003 0320 	and.w	r3, r3, #32
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d008      	beq.n	80026c6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	015a      	lsls	r2, r3, #5
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	4413      	add	r3, r2
 80026bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026c0:	461a      	mov	r2, r3
 80026c2:	2320      	movs	r3, #32
 80026c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d009      	beq.n	80026e4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	015a      	lsls	r2, r3, #5
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	4413      	add	r3, r2
 80026d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026dc:	461a      	mov	r2, r3
 80026de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026e2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	3301      	adds	r3, #1
 80026e8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80026ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ec:	085b      	lsrs	r3, r3, #1
 80026ee:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80026f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f47f af62 	bne.w	80025bc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f007 ff4c 	bl	800a59a <USB_ReadInterrupts>
 8002702:	4603      	mov	r3, r0
 8002704:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002708:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800270c:	f040 80db 	bne.w	80028c6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4618      	mov	r0, r3
 8002716:	f007 ff6d 	bl	800a5f4 <USB_ReadDevAllInEpInterrupt>
 800271a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800271c:	2300      	movs	r3, #0
 800271e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002720:	e0cd      	b.n	80028be <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 80c2 	beq.w	80028b2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	4611      	mov	r1, r2
 8002738:	4618      	mov	r0, r3
 800273a:	f007 ff93 	bl	800a664 <USB_ReadDevInEPInterrupt>
 800273e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b00      	cmp	r3, #0
 8002748:	d057      	beq.n	80027fa <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	f003 030f 	and.w	r3, r3, #15
 8002750:	2201      	movs	r2, #1
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800275e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	43db      	mvns	r3, r3
 8002764:	69f9      	ldr	r1, [r7, #28]
 8002766:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800276a:	4013      	ands	r3, r2
 800276c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	015a      	lsls	r2, r3, #5
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	4413      	add	r3, r2
 8002776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800277a:	461a      	mov	r2, r3
 800277c:	2301      	movs	r3, #1
 800277e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d132      	bne.n	80027ee <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800278c:	4613      	mov	r3, r2
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	4413      	add	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	3348      	adds	r3, #72	; 0x48
 8002798:	6819      	ldr	r1, [r3, #0]
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800279e:	4613      	mov	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	4413      	add	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4403      	add	r3, r0
 80027a8:	3344      	adds	r3, #68	; 0x44
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4419      	add	r1, r3
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b2:	4613      	mov	r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	4413      	add	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4403      	add	r3, r0
 80027bc:	3348      	adds	r3, #72	; 0x48
 80027be:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d113      	bne.n	80027ee <HAL_PCD_IRQHandler+0x3a2>
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ca:	4613      	mov	r3, r2
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	4413      	add	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	440b      	add	r3, r1
 80027d4:	334c      	adds	r3, #76	; 0x4c
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d108      	bne.n	80027ee <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6818      	ldr	r0, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80027e6:	461a      	mov	r2, r3
 80027e8:	2101      	movs	r1, #1
 80027ea:	f007 ff9b 	bl	800a724 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	4619      	mov	r1, r3
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f000 fb01 	bl	8002dfc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	f003 0308 	and.w	r3, r3, #8
 8002800:	2b00      	cmp	r3, #0
 8002802:	d008      	beq.n	8002816 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	015a      	lsls	r2, r3, #5
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	4413      	add	r3, r2
 800280c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002810:	461a      	mov	r2, r3
 8002812:	2308      	movs	r3, #8
 8002814:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	f003 0310 	and.w	r3, r3, #16
 800281c:	2b00      	cmp	r3, #0
 800281e:	d008      	beq.n	8002832 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	015a      	lsls	r2, r3, #5
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	4413      	add	r3, r2
 8002828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800282c:	461a      	mov	r2, r3
 800282e:	2310      	movs	r3, #16
 8002830:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002838:	2b00      	cmp	r3, #0
 800283a:	d008      	beq.n	800284e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	015a      	lsls	r2, r3, #5
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	4413      	add	r3, r2
 8002844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002848:	461a      	mov	r2, r3
 800284a:	2340      	movs	r3, #64	; 0x40
 800284c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d023      	beq.n	80028a0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002858:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800285a:	6a38      	ldr	r0, [r7, #32]
 800285c:	f007 fc9a 	bl	800a194 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002862:	4613      	mov	r3, r2
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	4413      	add	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	3338      	adds	r3, #56	; 0x38
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	4413      	add	r3, r2
 8002870:	3304      	adds	r3, #4
 8002872:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	78db      	ldrb	r3, [r3, #3]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d108      	bne.n	800288e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	2200      	movs	r2, #0
 8002880:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	b2db      	uxtb	r3, r3
 8002886:	4619      	mov	r1, r3
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 fb01 	bl	8002e90 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	015a      	lsls	r2, r3, #5
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	4413      	add	r3, r2
 8002896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800289a:	461a      	mov	r2, r3
 800289c:	2302      	movs	r3, #2
 800289e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80028aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 fb40 	bl	8002f32 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	3301      	adds	r3, #1
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80028b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ba:	085b      	lsrs	r3, r3, #1
 80028bc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80028be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f47f af2e 	bne.w	8002722 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f007 fe65 	bl	800a59a <USB_ReadInterrupts>
 80028d0:	4603      	mov	r3, r0
 80028d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80028d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028da:	d122      	bne.n	8002922 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	69fa      	ldr	r2, [r7, #28]
 80028e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028ea:	f023 0301 	bic.w	r3, r3, #1
 80028ee:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d108      	bne.n	800290c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002902:	2100      	movs	r1, #0
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 fcf3 	bl	80032f0 <HAL_PCDEx_LPM_Callback>
 800290a:	e002      	b.n	8002912 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 faa9 	bl	8002e64 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	695a      	ldr	r2, [r3, #20]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002920:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f007 fe37 	bl	800a59a <USB_ReadInterrupts>
 800292c:	4603      	mov	r3, r0
 800292e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002932:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002936:	d112      	bne.n	800295e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b01      	cmp	r3, #1
 8002946:	d102      	bne.n	800294e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 fa81 	bl	8002e50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	695a      	ldr	r2, [r3, #20]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800295c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	f007 fe19 	bl	800a59a <USB_ReadInterrupts>
 8002968:	4603      	mov	r3, r0
 800296a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800296e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002972:	d121      	bne.n	80029b8 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	695a      	ldr	r2, [r3, #20]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002982:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800298a:	2b00      	cmp	r3, #0
 800298c:	d111      	bne.n	80029b2 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299c:	089b      	lsrs	r3, r3, #2
 800299e:	f003 020f 	and.w	r2, r3, #15
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80029a8:	2101      	movs	r1, #1
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 fca0 	bl	80032f0 <HAL_PCDEx_LPM_Callback>
 80029b0:	e002      	b.n	80029b8 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 fa4c 	bl	8002e50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f007 fdec 	bl	800a59a <USB_ReadInterrupts>
 80029c2:	4603      	mov	r3, r0
 80029c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029cc:	f040 80b7 	bne.w	8002b3e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	69fa      	ldr	r2, [r7, #28]
 80029da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029de:	f023 0301 	bic.w	r3, r3, #1
 80029e2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2110      	movs	r1, #16
 80029ea:	4618      	mov	r0, r3
 80029ec:	f007 fbd2 	bl	800a194 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029f0:	2300      	movs	r3, #0
 80029f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029f4:	e046      	b.n	8002a84 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80029f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f8:	015a      	lsls	r2, r3, #5
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	4413      	add	r3, r2
 80029fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a02:	461a      	mov	r2, r3
 8002a04:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a08:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0c:	015a      	lsls	r2, r3, #5
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	4413      	add	r3, r2
 8002a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a1a:	0151      	lsls	r1, r2, #5
 8002a1c:	69fa      	ldr	r2, [r7, #28]
 8002a1e:	440a      	add	r2, r1
 8002a20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a24:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a28:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2c:	015a      	lsls	r2, r3, #5
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	4413      	add	r3, r2
 8002a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a36:	461a      	mov	r2, r3
 8002a38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a3c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a40:	015a      	lsls	r2, r3, #5
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	4413      	add	r3, r2
 8002a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a4e:	0151      	lsls	r1, r2, #5
 8002a50:	69fa      	ldr	r2, [r7, #28]
 8002a52:	440a      	add	r2, r1
 8002a54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a5c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a60:	015a      	lsls	r2, r3, #5
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	4413      	add	r3, r2
 8002a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a6e:	0151      	lsls	r1, r2, #5
 8002a70:	69fa      	ldr	r2, [r7, #28]
 8002a72:	440a      	add	r2, r1
 8002a74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a78:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a7c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a80:	3301      	adds	r3, #1
 8002a82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d3b3      	bcc.n	80029f6 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	69fa      	ldr	r2, [r7, #28]
 8002a98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a9c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002aa0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d016      	beq.n	8002ad8 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ab0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ab4:	69fa      	ldr	r2, [r7, #28]
 8002ab6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aba:	f043 030b 	orr.w	r3, r3, #11
 8002abe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aca:	69fa      	ldr	r2, [r7, #28]
 8002acc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ad0:	f043 030b 	orr.w	r3, r3, #11
 8002ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ad6:	e015      	b.n	8002b04 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	69fa      	ldr	r2, [r7, #28]
 8002ae2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ae6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002aea:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002aee:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	69fa      	ldr	r2, [r7, #28]
 8002afa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002afe:	f043 030b 	orr.w	r3, r3, #11
 8002b02:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	69fa      	ldr	r2, [r7, #28]
 8002b0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b12:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002b16:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6818      	ldr	r0, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b28:	461a      	mov	r2, r3
 8002b2a:	f007 fdfb 	bl	800a724 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	695a      	ldr	r2, [r3, #20]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002b3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f007 fd29 	bl	800a59a <USB_ReadInterrupts>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b52:	d124      	bne.n	8002b9e <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f007 fdbf 	bl	800a6dc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f007 fb93 	bl	800a28e <USB_GetDevSpeed>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681c      	ldr	r4, [r3, #0]
 8002b74:	f001 ff46 	bl	8004a04 <HAL_RCC_GetHCLKFreq>
 8002b78:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	461a      	mov	r2, r3
 8002b82:	4620      	mov	r0, r4
 8002b84:	f007 f8c2 	bl	8009d0c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 f957 	bl	8002e3c <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	695a      	ldr	r2, [r3, #20]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002b9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f007 fcf9 	bl	800a59a <USB_ReadInterrupts>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	f003 0308 	and.w	r3, r3, #8
 8002bae:	2b08      	cmp	r3, #8
 8002bb0:	d10a      	bne.n	8002bc8 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f938 	bl	8002e28 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	695a      	ldr	r2, [r3, #20]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f002 0208 	and.w	r2, r2, #8
 8002bc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f007 fce4 	bl	800a59a <USB_ReadInterrupts>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd8:	2b80      	cmp	r3, #128	; 0x80
 8002bda:	d122      	bne.n	8002c22 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002be4:	6a3b      	ldr	r3, [r7, #32]
 8002be6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002be8:	2301      	movs	r3, #1
 8002bea:	627b      	str	r3, [r7, #36]	; 0x24
 8002bec:	e014      	b.n	8002c18 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	440b      	add	r3, r1
 8002bfc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d105      	bne.n	8002c12 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 f95f 	bl	8002ed0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	3301      	adds	r3, #1
 8002c16:	627b      	str	r3, [r7, #36]	; 0x24
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d3e5      	bcc.n	8002bee <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f007 fcb7 	bl	800a59a <USB_ReadInterrupts>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c36:	d13b      	bne.n	8002cb0 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c38:	2301      	movs	r3, #1
 8002c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c3c:	e02b      	b.n	8002c96 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	015a      	lsls	r2, r3, #5
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	4413      	add	r3, r2
 8002c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c52:	4613      	mov	r3, r2
 8002c54:	00db      	lsls	r3, r3, #3
 8002c56:	4413      	add	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	440b      	add	r3, r1
 8002c5c:	3340      	adds	r3, #64	; 0x40
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d115      	bne.n	8002c90 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002c64:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	da12      	bge.n	8002c90 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c6e:	4613      	mov	r3, r2
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	4413      	add	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	440b      	add	r3, r1
 8002c78:	333f      	adds	r3, #63	; 0x3f
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	4619      	mov	r1, r3
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f920 	bl	8002ed0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c92:	3301      	adds	r3, #1
 8002c94:	627b      	str	r3, [r7, #36]	; 0x24
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d3ce      	bcc.n	8002c3e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	695a      	ldr	r2, [r3, #20]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002cae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f007 fc70 	bl	800a59a <USB_ReadInterrupts>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cc4:	d155      	bne.n	8002d72 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cca:	e045      	b.n	8002d58 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cce:	015a      	lsls	r2, r3, #5
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	440b      	add	r3, r1
 8002cea:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d12e      	bne.n	8002d52 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002cf4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	da2b      	bge.n	8002d52 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002d06:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d121      	bne.n	8002d52 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d12:	4613      	mov	r3, r2
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	4413      	add	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	440b      	add	r3, r1
 8002d1c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002d20:	2201      	movs	r2, #1
 8002d22:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002d2c:	6a3b      	ldr	r3, [r7, #32]
 8002d2e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002d30:	6a3b      	ldr	r3, [r7, #32]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10a      	bne.n	8002d52 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	69fa      	ldr	r2, [r7, #28]
 8002d46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d4e:	6053      	str	r3, [r2, #4]
            break;
 8002d50:	e007      	b.n	8002d62 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	3301      	adds	r3, #1
 8002d56:	627b      	str	r3, [r7, #36]	; 0x24
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d3b4      	bcc.n	8002ccc <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	695a      	ldr	r2, [r3, #20]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002d70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f007 fc0f 	bl	800a59a <USB_ReadInterrupts>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d86:	d10a      	bne.n	8002d9e <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 f88d 	bl	8002ea8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	695a      	ldr	r2, [r3, #20]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002d9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f007 fbf9 	bl	800a59a <USB_ReadInterrupts>
 8002da8:	4603      	mov	r3, r0
 8002daa:	f003 0304 	and.w	r3, r3, #4
 8002dae:	2b04      	cmp	r3, #4
 8002db0:	d115      	bne.n	8002dde <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d002      	beq.n	8002dca <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 f879 	bl	8002ebc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6859      	ldr	r1, [r3, #4]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	605a      	str	r2, [r3, #4]
 8002dda:	e000      	b.n	8002dde <HAL_PCD_IRQHandler+0x992>
      return;
 8002ddc:	bf00      	nop
    }
  }
}
 8002dde:	3734      	adds	r7, #52	; 0x34
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd90      	pop	{r4, r7, pc}

08002de4 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	460b      	mov	r3, r1
 8002e06:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	460b      	mov	r3, r1
 8002e9a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002edc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	da0c      	bge.n	8002efe <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ee4:	78fb      	ldrb	r3, [r7, #3]
 8002ee6:	f003 020f 	and.w	r2, r3, #15
 8002eea:	4613      	mov	r3, r2
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	4413      	add	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	3338      	adds	r3, #56	; 0x38
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	3304      	adds	r3, #4
 8002efa:	60fb      	str	r3, [r7, #12]
 8002efc:	e00c      	b.n	8002f18 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002efe:	78fb      	ldrb	r3, [r7, #3]
 8002f00:	f003 020f 	and.w	r2, r3, #15
 8002f04:	4613      	mov	r3, r2
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	4413      	add	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	4413      	add	r3, r2
 8002f14:	3304      	adds	r3, #4
 8002f16:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68f9      	ldr	r1, [r7, #12]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f007 f9da 	bl	800a2d8 <USB_EPStopXfer>
 8002f24:	4603      	mov	r3, r0
 8002f26:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002f28:	7afb      	ldrb	r3, [r7, #11]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b08a      	sub	sp, #40	; 0x28
 8002f36:	af02      	add	r7, sp, #8
 8002f38:	6078      	str	r0, [r7, #4]
 8002f3a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	4413      	add	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	3338      	adds	r3, #56	; 0x38
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	4413      	add	r3, r2
 8002f56:	3304      	adds	r3, #4
 8002f58:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	695a      	ldr	r2, [r3, #20]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d901      	bls.n	8002f6a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e06c      	b.n	8003044 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	691a      	ldr	r2, [r3, #16]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	69fa      	ldr	r2, [r7, #28]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d902      	bls.n	8002f86 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	3303      	adds	r3, #3
 8002f8a:	089b      	lsrs	r3, r3, #2
 8002f8c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f8e:	e02b      	b.n	8002fe8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	691a      	ldr	r2, [r3, #16]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	69fa      	ldr	r2, [r7, #28]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d902      	bls.n	8002fac <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	3303      	adds	r3, #3
 8002fb0:	089b      	lsrs	r3, r3, #2
 8002fb2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	68d9      	ldr	r1, [r3, #12]
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	4603      	mov	r3, r0
 8002fca:	6978      	ldr	r0, [r7, #20]
 8002fcc:	f007 fa2e 	bl	800a42c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	68da      	ldr	r2, [r3, #12]
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	441a      	add	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	695a      	ldr	r2, [r3, #20]
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	441a      	add	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	015a      	lsls	r2, r3, #5
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	4413      	add	r3, r2
 8002ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d809      	bhi.n	8003012 <PCD_WriteEmptyTxFifo+0xe0>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	695a      	ldr	r2, [r3, #20]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003006:	429a      	cmp	r2, r3
 8003008:	d203      	bcs.n	8003012 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1be      	bne.n	8002f90 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	691a      	ldr	r2, [r3, #16]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	429a      	cmp	r2, r3
 800301c:	d811      	bhi.n	8003042 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	f003 030f 	and.w	r3, r3, #15
 8003024:	2201      	movs	r2, #1
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003032:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	43db      	mvns	r3, r3
 8003038:	6939      	ldr	r1, [r7, #16]
 800303a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800303e:	4013      	ands	r3, r2
 8003040:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3720      	adds	r7, #32
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b088      	sub	sp, #32
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	333c      	adds	r3, #60	; 0x3c
 8003064:	3304      	adds	r3, #4
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	015a      	lsls	r2, r3, #5
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	4413      	add	r3, r2
 8003072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d17b      	bne.n	800317a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	f003 0308 	and.w	r3, r3, #8
 8003088:	2b00      	cmp	r3, #0
 800308a:	d015      	beq.n	80030b8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	4a61      	ldr	r2, [pc, #388]	; (8003214 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003090:	4293      	cmp	r3, r2
 8003092:	f240 80b9 	bls.w	8003208 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 80b3 	beq.w	8003208 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	015a      	lsls	r2, r3, #5
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	4413      	add	r3, r2
 80030aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ae:	461a      	mov	r2, r3
 80030b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030b4:	6093      	str	r3, [r2, #8]
 80030b6:	e0a7      	b.n	8003208 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	f003 0320 	and.w	r3, r3, #32
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d009      	beq.n	80030d6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	015a      	lsls	r2, r3, #5
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	4413      	add	r3, r2
 80030ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ce:	461a      	mov	r2, r3
 80030d0:	2320      	movs	r3, #32
 80030d2:	6093      	str	r3, [r2, #8]
 80030d4:	e098      	b.n	8003208 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f040 8093 	bne.w	8003208 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	4a4b      	ldr	r2, [pc, #300]	; (8003214 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d90f      	bls.n	800310a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00a      	beq.n	800310a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	015a      	lsls	r2, r3, #5
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	4413      	add	r3, r2
 80030fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003100:	461a      	mov	r2, r3
 8003102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003106:	6093      	str	r3, [r2, #8]
 8003108:	e07e      	b.n	8003208 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	4613      	mov	r3, r2
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	4413      	add	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	4413      	add	r3, r2
 800311c:	3304      	adds	r3, #4
 800311e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6a1a      	ldr	r2, [r3, #32]
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	0159      	lsls	r1, r3, #5
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	440b      	add	r3, r1
 800312c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003136:	1ad2      	subs	r2, r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d114      	bne.n	800316c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d109      	bne.n	800315e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6818      	ldr	r0, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003154:	461a      	mov	r2, r3
 8003156:	2101      	movs	r1, #1
 8003158:	f007 fae4 	bl	800a724 <USB_EP0_OutStart>
 800315c:	e006      	b.n	800316c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	68da      	ldr	r2, [r3, #12]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	441a      	add	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	b2db      	uxtb	r3, r3
 8003170:	4619      	mov	r1, r3
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f7ff fe36 	bl	8002de4 <HAL_PCD_DataOutStageCallback>
 8003178:	e046      	b.n	8003208 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	4a26      	ldr	r2, [pc, #152]	; (8003218 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d124      	bne.n	80031cc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00a      	beq.n	80031a2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	015a      	lsls	r2, r3, #5
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	4413      	add	r3, r2
 8003194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003198:	461a      	mov	r2, r3
 800319a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800319e:	6093      	str	r3, [r2, #8]
 80031a0:	e032      	b.n	8003208 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	f003 0320 	and.w	r3, r3, #32
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d008      	beq.n	80031be <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	015a      	lsls	r2, r3, #5
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	4413      	add	r3, r2
 80031b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031b8:	461a      	mov	r2, r3
 80031ba:	2320      	movs	r3, #32
 80031bc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	4619      	mov	r1, r3
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f7ff fe0d 	bl	8002de4 <HAL_PCD_DataOutStageCallback>
 80031ca:	e01d      	b.n	8003208 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d114      	bne.n	80031fc <PCD_EP_OutXfrComplete_int+0x1b0>
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	4613      	mov	r3, r2
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	4413      	add	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	440b      	add	r3, r1
 80031e0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d108      	bne.n	80031fc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6818      	ldr	r0, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031f4:	461a      	mov	r2, r3
 80031f6:	2100      	movs	r1, #0
 80031f8:	f007 fa94 	bl	800a724 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	4619      	mov	r1, r3
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7ff fdee 	bl	8002de4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3720      	adds	r7, #32
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	4f54300a 	.word	0x4f54300a
 8003218:	4f54310a 	.word	0x4f54310a

0800321c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	333c      	adds	r3, #60	; 0x3c
 8003234:	3304      	adds	r3, #4
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	015a      	lsls	r2, r3, #5
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	4413      	add	r3, r2
 8003242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4a15      	ldr	r2, [pc, #84]	; (80032a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d90e      	bls.n	8003270 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003258:	2b00      	cmp	r3, #0
 800325a:	d009      	beq.n	8003270 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	015a      	lsls	r2, r3, #5
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	4413      	add	r3, r2
 8003264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003268:	461a      	mov	r2, r3
 800326a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800326e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f7ff fdcf 	bl	8002e14 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	4a0a      	ldr	r2, [pc, #40]	; (80032a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d90c      	bls.n	8003298 <PCD_EP_OutSetupPacket_int+0x7c>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d108      	bne.n	8003298 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6818      	ldr	r0, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003290:	461a      	mov	r2, r3
 8003292:	2101      	movs	r1, #1
 8003294:	f007 fa46 	bl	800a724 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3718      	adds	r7, #24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	4f54300a 	.word	0x4f54300a

080032a8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032da:	f043 0303 	orr.w	r3, r3, #3
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3714      	adds	r7, #20
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	460b      	mov	r3, r1
 80032fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <HAL_PWR_ConfigPVD>:
  * @param  pConfigPVD : Pointer to a PWR_PVDTypeDef structure that contains the
  *                      PVD configuration information (PVDLevel and EventMode).
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *pConfigPVD)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Check the PVD parameter */
  if (pConfigPVD == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_PWR_ConfigPVD+0x12>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e059      	b.n	80033ce <HAL_PWR_ConfigPVD+0xc6>
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(pConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(pConfigPVD->Mode));

  /* Set PVDLS[2:0] bits according to PVDLevel value */
  MODIFY_REG(PWR->SVMCR, PWR_SVMCR_PVDLS, pConfigPVD->PVDLevel);
 800331a:	4b30      	ldr	r3, [pc, #192]	; (80033dc <HAL_PWR_ConfigPVD+0xd4>)
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	492d      	ldr	r1, [pc, #180]	; (80033dc <HAL_PWR_ConfigPVD+0xd4>)
 8003328:	4313      	orrs	r3, r2
 800332a:	610b      	str	r3, [r1, #16]

  /* Disable PVD Event/Interrupt */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 800332c:	4b2c      	ldr	r3, [pc, #176]	; (80033e0 <HAL_PWR_ConfigPVD+0xd8>)
 800332e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003332:	4a2b      	ldr	r2, [pc, #172]	; (80033e0 <HAL_PWR_ConfigPVD+0xd8>)
 8003334:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003338:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 800333c:	4b28      	ldr	r3, [pc, #160]	; (80033e0 <HAL_PWR_ConfigPVD+0xd8>)
 800333e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003342:	4a27      	ldr	r2, [pc, #156]	; (80033e0 <HAL_PWR_ConfigPVD+0xd8>)
 8003344:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003348:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 800334c:	4b24      	ldr	r3, [pc, #144]	; (80033e0 <HAL_PWR_ConfigPVD+0xd8>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a23      	ldr	r2, [pc, #140]	; (80033e0 <HAL_PWR_ConfigPVD+0xd8>)
 8003352:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003356:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8003358:	4b21      	ldr	r3, [pc, #132]	; (80033e0 <HAL_PWR_ConfigPVD+0xd8>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	4a20      	ldr	r2, [pc, #128]	; (80033e0 <HAL_PWR_ConfigPVD+0xd8>)
 800335e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003362:	6053      	str	r3, [r2, #4]

  /* Configure the PVD in interrupt mode */
  if ((pConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f003 0304 	and.w	r3, r3, #4
 800336c:	2b00      	cmp	r3, #0
 800336e:	d007      	beq.n	8003380 <HAL_PWR_ConfigPVD+0x78>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8003370:	4b1b      	ldr	r3, [pc, #108]	; (80033e0 <HAL_PWR_ConfigPVD+0xd8>)
 8003372:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003376:	4a1a      	ldr	r2, [pc, #104]	; (80033e0 <HAL_PWR_ConfigPVD+0xd8>)
 8003378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800337c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }

  /* Configure the PVD in event mode */
  if ((pConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f003 0308 	and.w	r3, r3, #8
 8003388:	2b00      	cmp	r3, #0
 800338a:	d007      	beq.n	800339c <HAL_PWR_ConfigPVD+0x94>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 800338c:	4b14      	ldr	r3, [pc, #80]	; (80033e0 <HAL_PWR_ConfigPVD+0xd8>)
 800338e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003392:	4a13      	ldr	r2, [pc, #76]	; (80033e0 <HAL_PWR_ConfigPVD+0xd8>)
 8003394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003398:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  }

  /* Configure the PVD in rising edge */
  if ((pConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d005      	beq.n	80033b4 <HAL_PWR_ConfigPVD+0xac>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 80033a8:	4b0d      	ldr	r3, [pc, #52]	; (80033e0 <HAL_PWR_ConfigPVD+0xd8>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a0c      	ldr	r2, [pc, #48]	; (80033e0 <HAL_PWR_ConfigPVD+0xd8>)
 80033ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b2:	6013      	str	r3, [r2, #0]
  }

  /* Configure the PVD in falling edge */
  if ((pConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d005      	beq.n	80033cc <HAL_PWR_ConfigPVD+0xc4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 80033c0:	4b07      	ldr	r3, [pc, #28]	; (80033e0 <HAL_PWR_ConfigPVD+0xd8>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	4a06      	ldr	r2, [pc, #24]	; (80033e0 <HAL_PWR_ConfigPVD+0xd8>)
 80033c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ca:	6053      	str	r3, [r2, #4]
  }

  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	46020800 	.word	0x46020800
 80033e0:	46022000 	.word	0x46022000

080033e4 <HAL_PWR_EnablePVD>:
/**
  * @brief  Enable the programmable voltage detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_PVDE);
 80033e8:	4b05      	ldr	r3, [pc, #20]	; (8003400 <HAL_PWR_EnablePVD+0x1c>)
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	4a04      	ldr	r2, [pc, #16]	; (8003400 <HAL_PWR_EnablePVD+0x1c>)
 80033ee:	f043 0310 	orr.w	r3, r3, #16
 80033f2:	6113      	str	r3, [r2, #16]
}
 80033f4:	bf00      	nop
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	46020800 	.word	0x46020800

08003404 <HAL_PWR_ConfigAttributes>:
  * @param  Attributes : Specifies the available attribute(s).
  *                      This parameter can be one of @ref PWR_Attributes.
  * @retval None.
  */
void HAL_PWR_ConfigAttributes(uint32_t Item, uint32_t Attributes)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
#else
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Item);

  /* NSecure item management (TZEN = 0) */
  if ((Attributes & PWR_ITEM_ATTR_NSEC_PRIV_MASK) == PWR_ITEM_ATTR_NSEC_PRIV_MASK)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	f003 0310 	and.w	r3, r3, #16
 8003414:	2b00      	cmp	r3, #0
 8003416:	d011      	beq.n	800343c <HAL_PWR_ConfigAttributes+0x38>
  {
    /* Privilege item management */
    if ((Attributes & PWR_NSEC_PRIV) == PWR_NSEC_PRIV)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	f003 0311 	and.w	r3, r3, #17
 800341e:	2b11      	cmp	r3, #17
 8003420:	d106      	bne.n	8003430 <HAL_PWR_ConfigAttributes+0x2c>
    {
      SET_BIT(PWR->PRIVCFGR, PWR_PRIVCFGR_NSPRIV);
 8003422:	4b09      	ldr	r3, [pc, #36]	; (8003448 <HAL_PWR_ConfigAttributes+0x44>)
 8003424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003426:	4a08      	ldr	r2, [pc, #32]	; (8003448 <HAL_PWR_ConfigAttributes+0x44>)
 8003428:	f043 0302 	orr.w	r3, r3, #2
 800342c:	6353      	str	r3, [r2, #52]	; 0x34
    {
      CLEAR_BIT(PWR->PRIVCFGR, PWR_PRIVCFGR_NSPRIV);
    }
  }
#endif /* __ARM_FEATURE_CMSE */
}
 800342e:	e005      	b.n	800343c <HAL_PWR_ConfigAttributes+0x38>
      CLEAR_BIT(PWR->PRIVCFGR, PWR_PRIVCFGR_NSPRIV);
 8003430:	4b05      	ldr	r3, [pc, #20]	; (8003448 <HAL_PWR_ConfigAttributes+0x44>)
 8003432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003434:	4a04      	ldr	r2, [pc, #16]	; (8003448 <HAL_PWR_ConfigAttributes+0x44>)
 8003436:	f023 0302 	bic.w	r3, r3, #2
 800343a:	6353      	str	r3, [r2, #52]	; 0x34
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	46020800 	.word	0x46020800

0800344c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800344c:	b480      	push	{r7}
 800344e:	b085      	sub	sp, #20
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003454:	4b39      	ldr	r3, [pc, #228]	; (800353c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003458:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800345c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800345e:	68ba      	ldr	r2, [r7, #8]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	429a      	cmp	r2, r3
 8003464:	d10b      	bne.n	800347e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800346c:	d905      	bls.n	800347a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800346e:	4b33      	ldr	r3, [pc, #204]	; (800353c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	4a32      	ldr	r2, [pc, #200]	; (800353c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003474:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003478:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800347a:	2300      	movs	r3, #0
 800347c:	e057      	b.n	800352e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003484:	d90a      	bls.n	800349c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003486:	4b2d      	ldr	r3, [pc, #180]	; (800353c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4313      	orrs	r3, r2
 8003492:	4a2a      	ldr	r2, [pc, #168]	; (800353c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003494:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003498:	60d3      	str	r3, [r2, #12]
 800349a:	e007      	b.n	80034ac <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800349c:	4b27      	ldr	r3, [pc, #156]	; (800353c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80034a4:	4925      	ldr	r1, [pc, #148]	; (800353c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80034ac:	4b24      	ldr	r3, [pc, #144]	; (8003540 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a24      	ldr	r2, [pc, #144]	; (8003544 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80034b2:	fba2 2303 	umull	r2, r3, r2, r3
 80034b6:	099b      	lsrs	r3, r3, #6
 80034b8:	2232      	movs	r2, #50	; 0x32
 80034ba:	fb02 f303 	mul.w	r3, r2, r3
 80034be:	4a21      	ldr	r2, [pc, #132]	; (8003544 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80034c0:	fba2 2303 	umull	r2, r3, r2, r3
 80034c4:	099b      	lsrs	r3, r3, #6
 80034c6:	3301      	adds	r3, #1
 80034c8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80034ca:	e002      	b.n	80034d2 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	3b01      	subs	r3, #1
 80034d0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80034d2:	4b1a      	ldr	r3, [pc, #104]	; (800353c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d102      	bne.n	80034e4 <HAL_PWREx_ControlVoltageScaling+0x98>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1f3      	bne.n	80034cc <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d01b      	beq.n	8003522 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80034ea:	4b15      	ldr	r3, [pc, #84]	; (8003540 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a15      	ldr	r2, [pc, #84]	; (8003544 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80034f0:	fba2 2303 	umull	r2, r3, r2, r3
 80034f4:	099b      	lsrs	r3, r3, #6
 80034f6:	2232      	movs	r2, #50	; 0x32
 80034f8:	fb02 f303 	mul.w	r3, r2, r3
 80034fc:	4a11      	ldr	r2, [pc, #68]	; (8003544 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80034fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003502:	099b      	lsrs	r3, r3, #6
 8003504:	3301      	adds	r3, #1
 8003506:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003508:	e002      	b.n	8003510 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	3b01      	subs	r3, #1
 800350e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003510:	4b0a      	ldr	r3, [pc, #40]	; (800353c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003514:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d102      	bne.n	8003522 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1f3      	bne.n	800350a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e000      	b.n	800352e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3714      	adds	r7, #20
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	46020800 	.word	0x46020800
 8003540:	20000000 	.word	0x20000000
 8003544:	10624dd3 	.word	0x10624dd3

08003548 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800354c:	4b04      	ldr	r3, [pc, #16]	; (8003560 <HAL_PWREx_GetVoltageRange+0x18>)
 800354e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003550:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003554:	4618      	mov	r0, r3
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	46020800 	.word	0x46020800

08003564 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800356c:	4b22      	ldr	r3, [pc, #136]	; (80035f8 <HAL_PWREx_ConfigSupply+0x94>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a22      	ldr	r2, [pc, #136]	; (80035fc <HAL_PWREx_ConfigSupply+0x98>)
 8003572:	fba2 2303 	umull	r2, r3, r2, r3
 8003576:	099b      	lsrs	r3, r3, #6
 8003578:	2232      	movs	r2, #50	; 0x32
 800357a:	fb02 f303 	mul.w	r3, r2, r3
 800357e:	4a1f      	ldr	r2, [pc, #124]	; (80035fc <HAL_PWREx_ConfigSupply+0x98>)
 8003580:	fba2 2303 	umull	r2, r3, r2, r3
 8003584:	099b      	lsrs	r3, r3, #6
 8003586:	3301      	adds	r3, #1
 8003588:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d113      	bne.n	80035b8 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003590:	4b1b      	ldr	r3, [pc, #108]	; (8003600 <HAL_PWREx_ConfigSupply+0x9c>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	4a1a      	ldr	r2, [pc, #104]	; (8003600 <HAL_PWREx_ConfigSupply+0x9c>)
 8003596:	f023 0302 	bic.w	r3, r3, #2
 800359a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800359c:	e002      	b.n	80035a4 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	3b01      	subs	r3, #1
 80035a2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80035a4:	4b16      	ldr	r3, [pc, #88]	; (8003600 <HAL_PWREx_ConfigSupply+0x9c>)
 80035a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d116      	bne.n	80035de <HAL_PWREx_ConfigSupply+0x7a>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1f3      	bne.n	800359e <HAL_PWREx_ConfigSupply+0x3a>
 80035b6:	e012      	b.n	80035de <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80035b8:	4b11      	ldr	r3, [pc, #68]	; (8003600 <HAL_PWREx_ConfigSupply+0x9c>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	4a10      	ldr	r2, [pc, #64]	; (8003600 <HAL_PWREx_ConfigSupply+0x9c>)
 80035be:	f043 0302 	orr.w	r3, r3, #2
 80035c2:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80035c4:	e002      	b.n	80035cc <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	3b01      	subs	r3, #1
 80035ca:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80035cc:	4b0c      	ldr	r3, [pc, #48]	; (8003600 <HAL_PWREx_ConfigSupply+0x9c>)
 80035ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d102      	bne.n	80035de <HAL_PWREx_ConfigSupply+0x7a>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f3      	bne.n	80035c6 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e000      	b.n	80035ea <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3714      	adds	r7, #20
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	20000000 	.word	0x20000000
 80035fc:	10624dd3 	.word	0x10624dd3
 8003600:	46020800 	.word	0x46020800

08003604 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8003608:	4b05      	ldr	r3, [pc, #20]	; (8003620 <HAL_PWREx_EnableVddUSB+0x1c>)
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	4a04      	ldr	r2, [pc, #16]	; (8003620 <HAL_PWREx_EnableVddUSB+0x1c>)
 800360e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003612:	6113      	str	r3, [r2, #16]
}
 8003614:	bf00      	nop
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	46020800 	.word	0x46020800

08003624 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8003628:	4b05      	ldr	r3, [pc, #20]	; (8003640 <HAL_PWREx_EnableVddIO2+0x1c>)
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	4a04      	ldr	r2, [pc, #16]	; (8003640 <HAL_PWREx_EnableVddIO2+0x1c>)
 800362e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003632:	6113      	str	r3, [r2, #16]
}
 8003634:	bf00      	nop
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	46020800 	.word	0x46020800

08003644 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8003648:	4b05      	ldr	r3, [pc, #20]	; (8003660 <HAL_PWREx_EnableVddA+0x1c>)
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	4a04      	ldr	r2, [pc, #16]	; (8003660 <HAL_PWREx_EnableVddA+0x1c>)
 800364e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003652:	6113      	str	r3, [r2, #16]
}
 8003654:	bf00      	nop
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	46020800 	.word	0x46020800

08003664 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b08e      	sub	sp, #56	; 0x38
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800366c:	2300      	movs	r3, #0
 800366e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d102      	bne.n	800367e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	f000 bec8 	b.w	800440e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800367e:	4b99      	ldr	r3, [pc, #612]	; (80038e4 <HAL_RCC_OscConfig+0x280>)
 8003680:	69db      	ldr	r3, [r3, #28]
 8003682:	f003 030c 	and.w	r3, r3, #12
 8003686:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003688:	4b96      	ldr	r3, [pc, #600]	; (80038e4 <HAL_RCC_OscConfig+0x280>)
 800368a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368c:	f003 0303 	and.w	r3, r3, #3
 8003690:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0310 	and.w	r3, r3, #16
 800369a:	2b00      	cmp	r3, #0
 800369c:	f000 816c 	beq.w	8003978 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80036a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d007      	beq.n	80036b6 <HAL_RCC_OscConfig+0x52>
 80036a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a8:	2b0c      	cmp	r3, #12
 80036aa:	f040 80de 	bne.w	800386a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80036ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	f040 80da 	bne.w	800386a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d102      	bne.n	80036c4 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	f000 bea5 	b.w	800440e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036c8:	4b86      	ldr	r3, [pc, #536]	; (80038e4 <HAL_RCC_OscConfig+0x280>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d004      	beq.n	80036de <HAL_RCC_OscConfig+0x7a>
 80036d4:	4b83      	ldr	r3, [pc, #524]	; (80038e4 <HAL_RCC_OscConfig+0x280>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80036dc:	e005      	b.n	80036ea <HAL_RCC_OscConfig+0x86>
 80036de:	4b81      	ldr	r3, [pc, #516]	; (80038e4 <HAL_RCC_OscConfig+0x280>)
 80036e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80036e4:	041b      	lsls	r3, r3, #16
 80036e6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d255      	bcs.n	800379a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80036ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10a      	bne.n	800370a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	4618      	mov	r0, r3
 80036fa:	f001 fa11 	bl	8004b20 <RCC_SetFlashLatencyFromMSIRange>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d002      	beq.n	800370a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	f000 be82 	b.w	800440e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800370a:	4b76      	ldr	r3, [pc, #472]	; (80038e4 <HAL_RCC_OscConfig+0x280>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	4a75      	ldr	r2, [pc, #468]	; (80038e4 <HAL_RCC_OscConfig+0x280>)
 8003710:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003714:	6093      	str	r3, [r2, #8]
 8003716:	4b73      	ldr	r3, [pc, #460]	; (80038e4 <HAL_RCC_OscConfig+0x280>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003722:	4970      	ldr	r1, [pc, #448]	; (80038e4 <HAL_RCC_OscConfig+0x280>)
 8003724:	4313      	orrs	r3, r2
 8003726:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003730:	d309      	bcc.n	8003746 <HAL_RCC_OscConfig+0xe2>
 8003732:	4b6c      	ldr	r3, [pc, #432]	; (80038e4 <HAL_RCC_OscConfig+0x280>)
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	f023 021f 	bic.w	r2, r3, #31
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	4969      	ldr	r1, [pc, #420]	; (80038e4 <HAL_RCC_OscConfig+0x280>)
 8003740:	4313      	orrs	r3, r2
 8003742:	60cb      	str	r3, [r1, #12]
 8003744:	e07e      	b.n	8003844 <HAL_RCC_OscConfig+0x1e0>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374a:	2b00      	cmp	r3, #0
 800374c:	da0a      	bge.n	8003764 <HAL_RCC_OscConfig+0x100>
 800374e:	4b65      	ldr	r3, [pc, #404]	; (80038e4 <HAL_RCC_OscConfig+0x280>)
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	015b      	lsls	r3, r3, #5
 800375c:	4961      	ldr	r1, [pc, #388]	; (80038e4 <HAL_RCC_OscConfig+0x280>)
 800375e:	4313      	orrs	r3, r2
 8003760:	60cb      	str	r3, [r1, #12]
 8003762:	e06f      	b.n	8003844 <HAL_RCC_OscConfig+0x1e0>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800376c:	d30a      	bcc.n	8003784 <HAL_RCC_OscConfig+0x120>
 800376e:	4b5d      	ldr	r3, [pc, #372]	; (80038e4 <HAL_RCC_OscConfig+0x280>)
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	029b      	lsls	r3, r3, #10
 800377c:	4959      	ldr	r1, [pc, #356]	; (80038e4 <HAL_RCC_OscConfig+0x280>)
 800377e:	4313      	orrs	r3, r2
 8003780:	60cb      	str	r3, [r1, #12]
 8003782:	e05f      	b.n	8003844 <HAL_RCC_OscConfig+0x1e0>
 8003784:	4b57      	ldr	r3, [pc, #348]	; (80038e4 <HAL_RCC_OscConfig+0x280>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	03db      	lsls	r3, r3, #15
 8003792:	4954      	ldr	r1, [pc, #336]	; (80038e4 <HAL_RCC_OscConfig+0x280>)
 8003794:	4313      	orrs	r3, r2
 8003796:	60cb      	str	r3, [r1, #12]
 8003798:	e054      	b.n	8003844 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800379a:	4b52      	ldr	r3, [pc, #328]	; (80038e4 <HAL_RCC_OscConfig+0x280>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	4a51      	ldr	r2, [pc, #324]	; (80038e4 <HAL_RCC_OscConfig+0x280>)
 80037a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80037a4:	6093      	str	r3, [r2, #8]
 80037a6:	4b4f      	ldr	r3, [pc, #316]	; (80038e4 <HAL_RCC_OscConfig+0x280>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b2:	494c      	ldr	r1, [pc, #304]	; (80038e4 <HAL_RCC_OscConfig+0x280>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037bc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80037c0:	d309      	bcc.n	80037d6 <HAL_RCC_OscConfig+0x172>
 80037c2:	4b48      	ldr	r3, [pc, #288]	; (80038e4 <HAL_RCC_OscConfig+0x280>)
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	f023 021f 	bic.w	r2, r3, #31
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	4945      	ldr	r1, [pc, #276]	; (80038e4 <HAL_RCC_OscConfig+0x280>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	60cb      	str	r3, [r1, #12]
 80037d4:	e028      	b.n	8003828 <HAL_RCC_OscConfig+0x1c4>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	2b00      	cmp	r3, #0
 80037dc:	da0a      	bge.n	80037f4 <HAL_RCC_OscConfig+0x190>
 80037de:	4b41      	ldr	r3, [pc, #260]	; (80038e4 <HAL_RCC_OscConfig+0x280>)
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	015b      	lsls	r3, r3, #5
 80037ec:	493d      	ldr	r1, [pc, #244]	; (80038e4 <HAL_RCC_OscConfig+0x280>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	60cb      	str	r3, [r1, #12]
 80037f2:	e019      	b.n	8003828 <HAL_RCC_OscConfig+0x1c4>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037fc:	d30a      	bcc.n	8003814 <HAL_RCC_OscConfig+0x1b0>
 80037fe:	4b39      	ldr	r3, [pc, #228]	; (80038e4 <HAL_RCC_OscConfig+0x280>)
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	029b      	lsls	r3, r3, #10
 800380c:	4935      	ldr	r1, [pc, #212]	; (80038e4 <HAL_RCC_OscConfig+0x280>)
 800380e:	4313      	orrs	r3, r2
 8003810:	60cb      	str	r3, [r1, #12]
 8003812:	e009      	b.n	8003828 <HAL_RCC_OscConfig+0x1c4>
 8003814:	4b33      	ldr	r3, [pc, #204]	; (80038e4 <HAL_RCC_OscConfig+0x280>)
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	03db      	lsls	r3, r3, #15
 8003822:	4930      	ldr	r1, [pc, #192]	; (80038e4 <HAL_RCC_OscConfig+0x280>)
 8003824:	4313      	orrs	r3, r2
 8003826:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10a      	bne.n	8003844 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	4618      	mov	r0, r3
 8003834:	f001 f974 	bl	8004b20 <RCC_SetFlashLatencyFromMSIRange>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d002      	beq.n	8003844 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	f000 bde5 	b.w	800440e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003844:	f001 f8de 	bl	8004a04 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003848:	4b27      	ldr	r3, [pc, #156]	; (80038e8 <HAL_RCC_OscConfig+0x284>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4618      	mov	r0, r3
 800384e:	f7fd fc17 	bl	8001080 <HAL_InitTick>
 8003852:	4603      	mov	r3, r0
 8003854:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8003858:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800385c:	2b00      	cmp	r3, #0
 800385e:	f000 808a 	beq.w	8003976 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8003862:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003866:	f000 bdd2 	b.w	800440e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d066      	beq.n	8003940 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8003872:	4b1c      	ldr	r3, [pc, #112]	; (80038e4 <HAL_RCC_OscConfig+0x280>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a1b      	ldr	r2, [pc, #108]	; (80038e4 <HAL_RCC_OscConfig+0x280>)
 8003878:	f043 0301 	orr.w	r3, r3, #1
 800387c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800387e:	f7fd fd47 	bl	8001310 <HAL_GetTick>
 8003882:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003884:	e009      	b.n	800389a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003886:	f7fd fd43 	bl	8001310 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d902      	bls.n	800389a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	f000 bdba 	b.w	800440e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800389a:	4b12      	ldr	r3, [pc, #72]	; (80038e4 <HAL_RCC_OscConfig+0x280>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0304 	and.w	r3, r3, #4
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d0ef      	beq.n	8003886 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80038a6:	4b0f      	ldr	r3, [pc, #60]	; (80038e4 <HAL_RCC_OscConfig+0x280>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	4a0e      	ldr	r2, [pc, #56]	; (80038e4 <HAL_RCC_OscConfig+0x280>)
 80038ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038b0:	6093      	str	r3, [r2, #8]
 80038b2:	4b0c      	ldr	r3, [pc, #48]	; (80038e4 <HAL_RCC_OscConfig+0x280>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038be:	4909      	ldr	r1, [pc, #36]	; (80038e4 <HAL_RCC_OscConfig+0x280>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80038cc:	d30e      	bcc.n	80038ec <HAL_RCC_OscConfig+0x288>
 80038ce:	4b05      	ldr	r3, [pc, #20]	; (80038e4 <HAL_RCC_OscConfig+0x280>)
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	f023 021f 	bic.w	r2, r3, #31
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	4902      	ldr	r1, [pc, #8]	; (80038e4 <HAL_RCC_OscConfig+0x280>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	60cb      	str	r3, [r1, #12]
 80038e0:	e04a      	b.n	8003978 <HAL_RCC_OscConfig+0x314>
 80038e2:	bf00      	nop
 80038e4:	46020c00 	.word	0x46020c00
 80038e8:	20000004 	.word	0x20000004
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	da0a      	bge.n	800390a <HAL_RCC_OscConfig+0x2a6>
 80038f4:	4b98      	ldr	r3, [pc, #608]	; (8003b58 <HAL_RCC_OscConfig+0x4f4>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a1b      	ldr	r3, [r3, #32]
 8003900:	015b      	lsls	r3, r3, #5
 8003902:	4995      	ldr	r1, [pc, #596]	; (8003b58 <HAL_RCC_OscConfig+0x4f4>)
 8003904:	4313      	orrs	r3, r2
 8003906:	60cb      	str	r3, [r1, #12]
 8003908:	e036      	b.n	8003978 <HAL_RCC_OscConfig+0x314>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003912:	d30a      	bcc.n	800392a <HAL_RCC_OscConfig+0x2c6>
 8003914:	4b90      	ldr	r3, [pc, #576]	; (8003b58 <HAL_RCC_OscConfig+0x4f4>)
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	029b      	lsls	r3, r3, #10
 8003922:	498d      	ldr	r1, [pc, #564]	; (8003b58 <HAL_RCC_OscConfig+0x4f4>)
 8003924:	4313      	orrs	r3, r2
 8003926:	60cb      	str	r3, [r1, #12]
 8003928:	e026      	b.n	8003978 <HAL_RCC_OscConfig+0x314>
 800392a:	4b8b      	ldr	r3, [pc, #556]	; (8003b58 <HAL_RCC_OscConfig+0x4f4>)
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	03db      	lsls	r3, r3, #15
 8003938:	4987      	ldr	r1, [pc, #540]	; (8003b58 <HAL_RCC_OscConfig+0x4f4>)
 800393a:	4313      	orrs	r3, r2
 800393c:	60cb      	str	r3, [r1, #12]
 800393e:	e01b      	b.n	8003978 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003940:	4b85      	ldr	r3, [pc, #532]	; (8003b58 <HAL_RCC_OscConfig+0x4f4>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a84      	ldr	r2, [pc, #528]	; (8003b58 <HAL_RCC_OscConfig+0x4f4>)
 8003946:	f023 0301 	bic.w	r3, r3, #1
 800394a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800394c:	f7fd fce0 	bl	8001310 <HAL_GetTick>
 8003950:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003952:	e009      	b.n	8003968 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003954:	f7fd fcdc 	bl	8001310 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d902      	bls.n	8003968 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	f000 bd53 	b.w	800440e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003968:	4b7b      	ldr	r3, [pc, #492]	; (8003b58 <HAL_RCC_OscConfig+0x4f4>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0304 	and.w	r3, r3, #4
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1ef      	bne.n	8003954 <HAL_RCC_OscConfig+0x2f0>
 8003974:	e000      	b.n	8003978 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003976:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0301 	and.w	r3, r3, #1
 8003980:	2b00      	cmp	r3, #0
 8003982:	f000 808b 	beq.w	8003a9c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003988:	2b08      	cmp	r3, #8
 800398a:	d005      	beq.n	8003998 <HAL_RCC_OscConfig+0x334>
 800398c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398e:	2b0c      	cmp	r3, #12
 8003990:	d109      	bne.n	80039a6 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003994:	2b03      	cmp	r3, #3
 8003996:	d106      	bne.n	80039a6 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d17d      	bne.n	8003a9c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	f000 bd34 	b.w	800440e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ae:	d106      	bne.n	80039be <HAL_RCC_OscConfig+0x35a>
 80039b0:	4b69      	ldr	r3, [pc, #420]	; (8003b58 <HAL_RCC_OscConfig+0x4f4>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a68      	ldr	r2, [pc, #416]	; (8003b58 <HAL_RCC_OscConfig+0x4f4>)
 80039b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ba:	6013      	str	r3, [r2, #0]
 80039bc:	e041      	b.n	8003a42 <HAL_RCC_OscConfig+0x3de>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039c6:	d112      	bne.n	80039ee <HAL_RCC_OscConfig+0x38a>
 80039c8:	4b63      	ldr	r3, [pc, #396]	; (8003b58 <HAL_RCC_OscConfig+0x4f4>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a62      	ldr	r2, [pc, #392]	; (8003b58 <HAL_RCC_OscConfig+0x4f4>)
 80039ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039d2:	6013      	str	r3, [r2, #0]
 80039d4:	4b60      	ldr	r3, [pc, #384]	; (8003b58 <HAL_RCC_OscConfig+0x4f4>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a5f      	ldr	r2, [pc, #380]	; (8003b58 <HAL_RCC_OscConfig+0x4f4>)
 80039da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80039de:	6013      	str	r3, [r2, #0]
 80039e0:	4b5d      	ldr	r3, [pc, #372]	; (8003b58 <HAL_RCC_OscConfig+0x4f4>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a5c      	ldr	r2, [pc, #368]	; (8003b58 <HAL_RCC_OscConfig+0x4f4>)
 80039e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ea:	6013      	str	r3, [r2, #0]
 80039ec:	e029      	b.n	8003a42 <HAL_RCC_OscConfig+0x3de>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80039f6:	d112      	bne.n	8003a1e <HAL_RCC_OscConfig+0x3ba>
 80039f8:	4b57      	ldr	r3, [pc, #348]	; (8003b58 <HAL_RCC_OscConfig+0x4f4>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a56      	ldr	r2, [pc, #344]	; (8003b58 <HAL_RCC_OscConfig+0x4f4>)
 80039fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a02:	6013      	str	r3, [r2, #0]
 8003a04:	4b54      	ldr	r3, [pc, #336]	; (8003b58 <HAL_RCC_OscConfig+0x4f4>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a53      	ldr	r2, [pc, #332]	; (8003b58 <HAL_RCC_OscConfig+0x4f4>)
 8003a0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a0e:	6013      	str	r3, [r2, #0]
 8003a10:	4b51      	ldr	r3, [pc, #324]	; (8003b58 <HAL_RCC_OscConfig+0x4f4>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a50      	ldr	r2, [pc, #320]	; (8003b58 <HAL_RCC_OscConfig+0x4f4>)
 8003a16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a1a:	6013      	str	r3, [r2, #0]
 8003a1c:	e011      	b.n	8003a42 <HAL_RCC_OscConfig+0x3de>
 8003a1e:	4b4e      	ldr	r3, [pc, #312]	; (8003b58 <HAL_RCC_OscConfig+0x4f4>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a4d      	ldr	r2, [pc, #308]	; (8003b58 <HAL_RCC_OscConfig+0x4f4>)
 8003a24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	4b4b      	ldr	r3, [pc, #300]	; (8003b58 <HAL_RCC_OscConfig+0x4f4>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a4a      	ldr	r2, [pc, #296]	; (8003b58 <HAL_RCC_OscConfig+0x4f4>)
 8003a30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a34:	6013      	str	r3, [r2, #0]
 8003a36:	4b48      	ldr	r3, [pc, #288]	; (8003b58 <HAL_RCC_OscConfig+0x4f4>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a47      	ldr	r2, [pc, #284]	; (8003b58 <HAL_RCC_OscConfig+0x4f4>)
 8003a3c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003a40:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d014      	beq.n	8003a74 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8003a4a:	f7fd fc61 	bl	8001310 <HAL_GetTick>
 8003a4e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a50:	e009      	b.n	8003a66 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a52:	f7fd fc5d 	bl	8001310 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b64      	cmp	r3, #100	; 0x64
 8003a5e:	d902      	bls.n	8003a66 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	f000 bcd4 	b.w	800440e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a66:	4b3c      	ldr	r3, [pc, #240]	; (8003b58 <HAL_RCC_OscConfig+0x4f4>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d0ef      	beq.n	8003a52 <HAL_RCC_OscConfig+0x3ee>
 8003a72:	e013      	b.n	8003a9c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8003a74:	f7fd fc4c 	bl	8001310 <HAL_GetTick>
 8003a78:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a7a:	e009      	b.n	8003a90 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a7c:	f7fd fc48 	bl	8001310 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b64      	cmp	r3, #100	; 0x64
 8003a88:	d902      	bls.n	8003a90 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	f000 bcbf 	b.w	800440e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a90:	4b31      	ldr	r3, [pc, #196]	; (8003b58 <HAL_RCC_OscConfig+0x4f4>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1ef      	bne.n	8003a7c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d05f      	beq.n	8003b68 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aaa:	2b04      	cmp	r3, #4
 8003aac:	d005      	beq.n	8003aba <HAL_RCC_OscConfig+0x456>
 8003aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab0:	2b0c      	cmp	r3, #12
 8003ab2:	d114      	bne.n	8003ade <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d111      	bne.n	8003ade <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d102      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	f000 bca3 	b.w	800440e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003ac8:	4b23      	ldr	r3, [pc, #140]	; (8003b58 <HAL_RCC_OscConfig+0x4f4>)
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	041b      	lsls	r3, r3, #16
 8003ad6:	4920      	ldr	r1, [pc, #128]	; (8003b58 <HAL_RCC_OscConfig+0x4f4>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003adc:	e044      	b.n	8003b68 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d024      	beq.n	8003b30 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8003ae6:	4b1c      	ldr	r3, [pc, #112]	; (8003b58 <HAL_RCC_OscConfig+0x4f4>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a1b      	ldr	r2, [pc, #108]	; (8003b58 <HAL_RCC_OscConfig+0x4f4>)
 8003aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003af0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003af2:	f7fd fc0d 	bl	8001310 <HAL_GetTick>
 8003af6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003af8:	e009      	b.n	8003b0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003afa:	f7fd fc09 	bl	8001310 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d902      	bls.n	8003b0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	f000 bc80 	b.w	800440e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b0e:	4b12      	ldr	r3, [pc, #72]	; (8003b58 <HAL_RCC_OscConfig+0x4f4>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d0ef      	beq.n	8003afa <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003b1a:	4b0f      	ldr	r3, [pc, #60]	; (8003b58 <HAL_RCC_OscConfig+0x4f4>)
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	041b      	lsls	r3, r3, #16
 8003b28:	490b      	ldr	r1, [pc, #44]	; (8003b58 <HAL_RCC_OscConfig+0x4f4>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	610b      	str	r3, [r1, #16]
 8003b2e:	e01b      	b.n	8003b68 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003b30:	4b09      	ldr	r3, [pc, #36]	; (8003b58 <HAL_RCC_OscConfig+0x4f4>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a08      	ldr	r2, [pc, #32]	; (8003b58 <HAL_RCC_OscConfig+0x4f4>)
 8003b36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b3a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003b3c:	f7fd fbe8 	bl	8001310 <HAL_GetTick>
 8003b40:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b42:	e00b      	b.n	8003b5c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b44:	f7fd fbe4 	bl	8001310 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d904      	bls.n	8003b5c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	f000 bc5b 	b.w	800440e <HAL_RCC_OscConfig+0xdaa>
 8003b58:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b5c:	4baf      	ldr	r3, [pc, #700]	; (8003e1c <HAL_RCC_OscConfig+0x7b8>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1ed      	bne.n	8003b44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0308 	and.w	r3, r3, #8
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 80c8 	beq.w	8003d06 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8003b76:	2300      	movs	r3, #0
 8003b78:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b7c:	4ba7      	ldr	r3, [pc, #668]	; (8003e1c <HAL_RCC_OscConfig+0x7b8>)
 8003b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b82:	f003 0304 	and.w	r3, r3, #4
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d111      	bne.n	8003bae <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b8a:	4ba4      	ldr	r3, [pc, #656]	; (8003e1c <HAL_RCC_OscConfig+0x7b8>)
 8003b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b90:	4aa2      	ldr	r2, [pc, #648]	; (8003e1c <HAL_RCC_OscConfig+0x7b8>)
 8003b92:	f043 0304 	orr.w	r3, r3, #4
 8003b96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003b9a:	4ba0      	ldr	r3, [pc, #640]	; (8003e1c <HAL_RCC_OscConfig+0x7b8>)
 8003b9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ba0:	f003 0304 	and.w	r3, r3, #4
 8003ba4:	617b      	str	r3, [r7, #20]
 8003ba6:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003bae:	4b9c      	ldr	r3, [pc, #624]	; (8003e20 <HAL_RCC_OscConfig+0x7bc>)
 8003bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d119      	bne.n	8003bee <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003bba:	4b99      	ldr	r3, [pc, #612]	; (8003e20 <HAL_RCC_OscConfig+0x7bc>)
 8003bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbe:	4a98      	ldr	r2, [pc, #608]	; (8003e20 <HAL_RCC_OscConfig+0x7bc>)
 8003bc0:	f043 0301 	orr.w	r3, r3, #1
 8003bc4:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bc6:	f7fd fba3 	bl	8001310 <HAL_GetTick>
 8003bca:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003bcc:	e009      	b.n	8003be2 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bce:	f7fd fb9f 	bl	8001310 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d902      	bls.n	8003be2 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	f000 bc16 	b.w	800440e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003be2:	4b8f      	ldr	r3, [pc, #572]	; (8003e20 <HAL_RCC_OscConfig+0x7bc>)
 8003be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d0ef      	beq.n	8003bce <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d05f      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8003bf6:	4b89      	ldr	r3, [pc, #548]	; (8003e1c <HAL_RCC_OscConfig+0x7b8>)
 8003bf8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003bfc:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	699a      	ldr	r2, [r3, #24]
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d037      	beq.n	8003c7c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003c0c:	6a3b      	ldr	r3, [r7, #32]
 8003c0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d006      	beq.n	8003c24 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8003c16:	6a3b      	ldr	r3, [r7, #32]
 8003c18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d101      	bne.n	8003c24 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e3f4      	b.n	800440e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8003c24:	6a3b      	ldr	r3, [r7, #32]
 8003c26:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d01b      	beq.n	8003c66 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8003c2e:	4b7b      	ldr	r3, [pc, #492]	; (8003e1c <HAL_RCC_OscConfig+0x7b8>)
 8003c30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c34:	4a79      	ldr	r2, [pc, #484]	; (8003e1c <HAL_RCC_OscConfig+0x7b8>)
 8003c36:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8003c3a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8003c3e:	f7fd fb67 	bl	8001310 <HAL_GetTick>
 8003c42:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003c44:	e008      	b.n	8003c58 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c46:	f7fd fb63 	bl	8001310 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b05      	cmp	r3, #5
 8003c52:	d901      	bls.n	8003c58 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e3da      	b.n	800440e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003c58:	4b70      	ldr	r3, [pc, #448]	; (8003e1c <HAL_RCC_OscConfig+0x7b8>)
 8003c5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1ef      	bne.n	8003c46 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8003c66:	4b6d      	ldr	r3, [pc, #436]	; (8003e1c <HAL_RCC_OscConfig+0x7b8>)
 8003c68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c6c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	4969      	ldr	r1, [pc, #420]	; (8003e1c <HAL_RCC_OscConfig+0x7b8>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8003c7c:	4b67      	ldr	r3, [pc, #412]	; (8003e1c <HAL_RCC_OscConfig+0x7b8>)
 8003c7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c82:	4a66      	ldr	r2, [pc, #408]	; (8003e1c <HAL_RCC_OscConfig+0x7b8>)
 8003c84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c88:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8003c8c:	f7fd fb40 	bl	8001310 <HAL_GetTick>
 8003c90:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003c92:	e008      	b.n	8003ca6 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c94:	f7fd fb3c 	bl	8001310 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b05      	cmp	r3, #5
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e3b3      	b.n	800440e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003ca6:	4b5d      	ldr	r3, [pc, #372]	; (8003e1c <HAL_RCC_OscConfig+0x7b8>)
 8003ca8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003cac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d0ef      	beq.n	8003c94 <HAL_RCC_OscConfig+0x630>
 8003cb4:	e01b      	b.n	8003cee <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8003cb6:	4b59      	ldr	r3, [pc, #356]	; (8003e1c <HAL_RCC_OscConfig+0x7b8>)
 8003cb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003cbc:	4a57      	ldr	r2, [pc, #348]	; (8003e1c <HAL_RCC_OscConfig+0x7b8>)
 8003cbe:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8003cc2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8003cc6:	f7fd fb23 	bl	8001310 <HAL_GetTick>
 8003cca:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003ccc:	e008      	b.n	8003ce0 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cce:	f7fd fb1f 	bl	8001310 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	2b05      	cmp	r3, #5
 8003cda:	d901      	bls.n	8003ce0 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e396      	b.n	800440e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003ce0:	4b4e      	ldr	r3, [pc, #312]	; (8003e1c <HAL_RCC_OscConfig+0x7b8>)
 8003ce2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ce6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1ef      	bne.n	8003cce <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003cee:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d107      	bne.n	8003d06 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cf6:	4b49      	ldr	r3, [pc, #292]	; (8003e1c <HAL_RCC_OscConfig+0x7b8>)
 8003cf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cfc:	4a47      	ldr	r2, [pc, #284]	; (8003e1c <HAL_RCC_OscConfig+0x7b8>)
 8003cfe:	f023 0304 	bic.w	r3, r3, #4
 8003d02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0304 	and.w	r3, r3, #4
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f000 8111 	beq.w	8003f36 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8003d14:	2300      	movs	r3, #0
 8003d16:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d1a:	4b40      	ldr	r3, [pc, #256]	; (8003e1c <HAL_RCC_OscConfig+0x7b8>)
 8003d1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d20:	f003 0304 	and.w	r3, r3, #4
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d111      	bne.n	8003d4c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d28:	4b3c      	ldr	r3, [pc, #240]	; (8003e1c <HAL_RCC_OscConfig+0x7b8>)
 8003d2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d2e:	4a3b      	ldr	r2, [pc, #236]	; (8003e1c <HAL_RCC_OscConfig+0x7b8>)
 8003d30:	f043 0304 	orr.w	r3, r3, #4
 8003d34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003d38:	4b38      	ldr	r3, [pc, #224]	; (8003e1c <HAL_RCC_OscConfig+0x7b8>)
 8003d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d3e:	f003 0304 	and.w	r3, r3, #4
 8003d42:	613b      	str	r3, [r7, #16]
 8003d44:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8003d46:	2301      	movs	r3, #1
 8003d48:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003d4c:	4b34      	ldr	r3, [pc, #208]	; (8003e20 <HAL_RCC_OscConfig+0x7bc>)
 8003d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d118      	bne.n	8003d8a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003d58:	4b31      	ldr	r3, [pc, #196]	; (8003e20 <HAL_RCC_OscConfig+0x7bc>)
 8003d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5c:	4a30      	ldr	r2, [pc, #192]	; (8003e20 <HAL_RCC_OscConfig+0x7bc>)
 8003d5e:	f043 0301 	orr.w	r3, r3, #1
 8003d62:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d64:	f7fd fad4 	bl	8001310 <HAL_GetTick>
 8003d68:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d6c:	f7fd fad0 	bl	8001310 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e347      	b.n	800440e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003d7e:	4b28      	ldr	r3, [pc, #160]	; (8003e20 <HAL_RCC_OscConfig+0x7bc>)
 8003d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0f0      	beq.n	8003d6c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d01f      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f003 0304 	and.w	r3, r3, #4
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d010      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003da2:	4b1e      	ldr	r3, [pc, #120]	; (8003e1c <HAL_RCC_OscConfig+0x7b8>)
 8003da4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003da8:	4a1c      	ldr	r2, [pc, #112]	; (8003e1c <HAL_RCC_OscConfig+0x7b8>)
 8003daa:	f043 0304 	orr.w	r3, r3, #4
 8003dae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003db2:	4b1a      	ldr	r3, [pc, #104]	; (8003e1c <HAL_RCC_OscConfig+0x7b8>)
 8003db4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003db8:	4a18      	ldr	r2, [pc, #96]	; (8003e1c <HAL_RCC_OscConfig+0x7b8>)
 8003dba:	f043 0301 	orr.w	r3, r3, #1
 8003dbe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003dc2:	e018      	b.n	8003df6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003dc4:	4b15      	ldr	r3, [pc, #84]	; (8003e1c <HAL_RCC_OscConfig+0x7b8>)
 8003dc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003dca:	4a14      	ldr	r2, [pc, #80]	; (8003e1c <HAL_RCC_OscConfig+0x7b8>)
 8003dcc:	f043 0301 	orr.w	r3, r3, #1
 8003dd0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003dd4:	e00f      	b.n	8003df6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003dd6:	4b11      	ldr	r3, [pc, #68]	; (8003e1c <HAL_RCC_OscConfig+0x7b8>)
 8003dd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ddc:	4a0f      	ldr	r2, [pc, #60]	; (8003e1c <HAL_RCC_OscConfig+0x7b8>)
 8003dde:	f023 0301 	bic.w	r3, r3, #1
 8003de2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003de6:	4b0d      	ldr	r3, [pc, #52]	; (8003e1c <HAL_RCC_OscConfig+0x7b8>)
 8003de8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003dec:	4a0b      	ldr	r2, [pc, #44]	; (8003e1c <HAL_RCC_OscConfig+0x7b8>)
 8003dee:	f023 0304 	bic.w	r3, r3, #4
 8003df2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d057      	beq.n	8003eae <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8003dfe:	f7fd fa87 	bl	8001310 <HAL_GetTick>
 8003e02:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e04:	e00e      	b.n	8003e24 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e06:	f7fd fa83 	bl	8001310 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d905      	bls.n	8003e24 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e2f8      	b.n	800440e <HAL_RCC_OscConfig+0xdaa>
 8003e1c:	46020c00 	.word	0x46020c00
 8003e20:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e24:	4b9c      	ldr	r3, [pc, #624]	; (8004098 <HAL_RCC_OscConfig+0xa34>)
 8003e26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d0e9      	beq.n	8003e06 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d01b      	beq.n	8003e76 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003e3e:	4b96      	ldr	r3, [pc, #600]	; (8004098 <HAL_RCC_OscConfig+0xa34>)
 8003e40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e44:	4a94      	ldr	r2, [pc, #592]	; (8004098 <HAL_RCC_OscConfig+0xa34>)
 8003e46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e4a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003e4e:	e00a      	b.n	8003e66 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e50:	f7fd fa5e 	bl	8001310 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e2d3      	b.n	800440e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003e66:	4b8c      	ldr	r3, [pc, #560]	; (8004098 <HAL_RCC_OscConfig+0xa34>)
 8003e68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d0ed      	beq.n	8003e50 <HAL_RCC_OscConfig+0x7ec>
 8003e74:	e053      	b.n	8003f1e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003e76:	4b88      	ldr	r3, [pc, #544]	; (8004098 <HAL_RCC_OscConfig+0xa34>)
 8003e78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e7c:	4a86      	ldr	r2, [pc, #536]	; (8004098 <HAL_RCC_OscConfig+0xa34>)
 8003e7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e82:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003e86:	e00a      	b.n	8003e9e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e88:	f7fd fa42 	bl	8001310 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e2b7      	b.n	800440e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003e9e:	4b7e      	ldr	r3, [pc, #504]	; (8004098 <HAL_RCC_OscConfig+0xa34>)
 8003ea0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ea4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1ed      	bne.n	8003e88 <HAL_RCC_OscConfig+0x824>
 8003eac:	e037      	b.n	8003f1e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8003eae:	f7fd fa2f 	bl	8001310 <HAL_GetTick>
 8003eb2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003eb4:	e00a      	b.n	8003ecc <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eb6:	f7fd fa2b 	bl	8001310 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d901      	bls.n	8003ecc <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e2a0      	b.n	800440e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ecc:	4b72      	ldr	r3, [pc, #456]	; (8004098 <HAL_RCC_OscConfig+0xa34>)
 8003ece:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1ed      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003eda:	4b6f      	ldr	r3, [pc, #444]	; (8004098 <HAL_RCC_OscConfig+0xa34>)
 8003edc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d01a      	beq.n	8003f1e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003ee8:	4b6b      	ldr	r3, [pc, #428]	; (8004098 <HAL_RCC_OscConfig+0xa34>)
 8003eea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003eee:	4a6a      	ldr	r2, [pc, #424]	; (8004098 <HAL_RCC_OscConfig+0xa34>)
 8003ef0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ef4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003ef8:	e00a      	b.n	8003f10 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003efa:	f7fd fa09 	bl	8001310 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d901      	bls.n	8003f10 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e27e      	b.n	800440e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003f10:	4b61      	ldr	r3, [pc, #388]	; (8004098 <HAL_RCC_OscConfig+0xa34>)
 8003f12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1ed      	bne.n	8003efa <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f1e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d107      	bne.n	8003f36 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f26:	4b5c      	ldr	r3, [pc, #368]	; (8004098 <HAL_RCC_OscConfig+0xa34>)
 8003f28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f2c:	4a5a      	ldr	r2, [pc, #360]	; (8004098 <HAL_RCC_OscConfig+0xa34>)
 8003f2e:	f023 0304 	bic.w	r3, r3, #4
 8003f32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0320 	and.w	r3, r3, #32
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d036      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d019      	beq.n	8003f7e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8003f4a:	4b53      	ldr	r3, [pc, #332]	; (8004098 <HAL_RCC_OscConfig+0xa34>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a52      	ldr	r2, [pc, #328]	; (8004098 <HAL_RCC_OscConfig+0xa34>)
 8003f50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f54:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003f56:	f7fd f9db 	bl	8001310 <HAL_GetTick>
 8003f5a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003f5c:	e008      	b.n	8003f70 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f5e:	f7fd f9d7 	bl	8001310 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d901      	bls.n	8003f70 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e24e      	b.n	800440e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003f70:	4b49      	ldr	r3, [pc, #292]	; (8004098 <HAL_RCC_OscConfig+0xa34>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d0f0      	beq.n	8003f5e <HAL_RCC_OscConfig+0x8fa>
 8003f7c:	e018      	b.n	8003fb0 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8003f7e:	4b46      	ldr	r3, [pc, #280]	; (8004098 <HAL_RCC_OscConfig+0xa34>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a45      	ldr	r2, [pc, #276]	; (8004098 <HAL_RCC_OscConfig+0xa34>)
 8003f84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f88:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003f8a:	f7fd f9c1 	bl	8001310 <HAL_GetTick>
 8003f8e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003f90:	e008      	b.n	8003fa4 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f92:	f7fd f9bd 	bl	8001310 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e234      	b.n	800440e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003fa4:	4b3c      	ldr	r3, [pc, #240]	; (8004098 <HAL_RCC_OscConfig+0xa34>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1f0      	bne.n	8003f92 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d036      	beq.n	800402a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d019      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8003fc4:	4b34      	ldr	r3, [pc, #208]	; (8004098 <HAL_RCC_OscConfig+0xa34>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a33      	ldr	r2, [pc, #204]	; (8004098 <HAL_RCC_OscConfig+0xa34>)
 8003fca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fce:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003fd0:	f7fd f99e 	bl	8001310 <HAL_GetTick>
 8003fd4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003fd8:	f7fd f99a 	bl	8001310 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e211      	b.n	800440e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003fea:	4b2b      	ldr	r3, [pc, #172]	; (8004098 <HAL_RCC_OscConfig+0xa34>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d0f0      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x974>
 8003ff6:	e018      	b.n	800402a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8003ff8:	4b27      	ldr	r3, [pc, #156]	; (8004098 <HAL_RCC_OscConfig+0xa34>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a26      	ldr	r2, [pc, #152]	; (8004098 <HAL_RCC_OscConfig+0xa34>)
 8003ffe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004002:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004004:	f7fd f984 	bl	8001310 <HAL_GetTick>
 8004008:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800400c:	f7fd f980 	bl	8001310 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e1f7      	b.n	800440e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800401e:	4b1e      	ldr	r3, [pc, #120]	; (8004098 <HAL_RCC_OscConfig+0xa34>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1f0      	bne.n	800400c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004032:	2b00      	cmp	r3, #0
 8004034:	d07f      	beq.n	8004136 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800403a:	2b00      	cmp	r3, #0
 800403c:	d062      	beq.n	8004104 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800403e:	4b16      	ldr	r3, [pc, #88]	; (8004098 <HAL_RCC_OscConfig+0xa34>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	4a15      	ldr	r2, [pc, #84]	; (8004098 <HAL_RCC_OscConfig+0xa34>)
 8004044:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004048:	6093      	str	r3, [r2, #8]
 800404a:	4b13      	ldr	r3, [pc, #76]	; (8004098 <HAL_RCC_OscConfig+0xa34>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004056:	4910      	ldr	r1, [pc, #64]	; (8004098 <HAL_RCC_OscConfig+0xa34>)
 8004058:	4313      	orrs	r3, r2
 800405a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004064:	d309      	bcc.n	800407a <HAL_RCC_OscConfig+0xa16>
 8004066:	4b0c      	ldr	r3, [pc, #48]	; (8004098 <HAL_RCC_OscConfig+0xa34>)
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f023 021f 	bic.w	r2, r3, #31
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	4909      	ldr	r1, [pc, #36]	; (8004098 <HAL_RCC_OscConfig+0xa34>)
 8004074:	4313      	orrs	r3, r2
 8004076:	60cb      	str	r3, [r1, #12]
 8004078:	e02a      	b.n	80040d0 <HAL_RCC_OscConfig+0xa6c>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	2b00      	cmp	r3, #0
 8004080:	da0c      	bge.n	800409c <HAL_RCC_OscConfig+0xa38>
 8004082:	4b05      	ldr	r3, [pc, #20]	; (8004098 <HAL_RCC_OscConfig+0xa34>)
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	015b      	lsls	r3, r3, #5
 8004090:	4901      	ldr	r1, [pc, #4]	; (8004098 <HAL_RCC_OscConfig+0xa34>)
 8004092:	4313      	orrs	r3, r2
 8004094:	60cb      	str	r3, [r1, #12]
 8004096:	e01b      	b.n	80040d0 <HAL_RCC_OscConfig+0xa6c>
 8004098:	46020c00 	.word	0x46020c00
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040a4:	d30a      	bcc.n	80040bc <HAL_RCC_OscConfig+0xa58>
 80040a6:	4ba1      	ldr	r3, [pc, #644]	; (800432c <HAL_RCC_OscConfig+0xcc8>)
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	029b      	lsls	r3, r3, #10
 80040b4:	499d      	ldr	r1, [pc, #628]	; (800432c <HAL_RCC_OscConfig+0xcc8>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	60cb      	str	r3, [r1, #12]
 80040ba:	e009      	b.n	80040d0 <HAL_RCC_OscConfig+0xa6c>
 80040bc:	4b9b      	ldr	r3, [pc, #620]	; (800432c <HAL_RCC_OscConfig+0xcc8>)
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	03db      	lsls	r3, r3, #15
 80040ca:	4998      	ldr	r1, [pc, #608]	; (800432c <HAL_RCC_OscConfig+0xcc8>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80040d0:	4b96      	ldr	r3, [pc, #600]	; (800432c <HAL_RCC_OscConfig+0xcc8>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a95      	ldr	r2, [pc, #596]	; (800432c <HAL_RCC_OscConfig+0xcc8>)
 80040d6:	f043 0310 	orr.w	r3, r3, #16
 80040da:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80040dc:	f7fd f918 	bl	8001310 <HAL_GetTick>
 80040e0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80040e2:	e008      	b.n	80040f6 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80040e4:	f7fd f914 	bl	8001310 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e18b      	b.n	800440e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80040f6:	4b8d      	ldr	r3, [pc, #564]	; (800432c <HAL_RCC_OscConfig+0xcc8>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0320 	and.w	r3, r3, #32
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d0f0      	beq.n	80040e4 <HAL_RCC_OscConfig+0xa80>
 8004102:	e018      	b.n	8004136 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8004104:	4b89      	ldr	r3, [pc, #548]	; (800432c <HAL_RCC_OscConfig+0xcc8>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a88      	ldr	r2, [pc, #544]	; (800432c <HAL_RCC_OscConfig+0xcc8>)
 800410a:	f023 0310 	bic.w	r3, r3, #16
 800410e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004110:	f7fd f8fe 	bl	8001310 <HAL_GetTick>
 8004114:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004116:	e008      	b.n	800412a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004118:	f7fd f8fa 	bl	8001310 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e171      	b.n	800440e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800412a:	4b80      	ldr	r3, [pc, #512]	; (800432c <HAL_RCC_OscConfig+0xcc8>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0320 	and.w	r3, r3, #32
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1f0      	bne.n	8004118 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413a:	2b00      	cmp	r3, #0
 800413c:	f000 8166 	beq.w	800440c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8004140:	2300      	movs	r3, #0
 8004142:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004146:	4b79      	ldr	r3, [pc, #484]	; (800432c <HAL_RCC_OscConfig+0xcc8>)
 8004148:	69db      	ldr	r3, [r3, #28]
 800414a:	f003 030c 	and.w	r3, r3, #12
 800414e:	2b0c      	cmp	r3, #12
 8004150:	f000 80f2 	beq.w	8004338 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004158:	2b02      	cmp	r3, #2
 800415a:	f040 80c5 	bne.w	80042e8 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800415e:	4b73      	ldr	r3, [pc, #460]	; (800432c <HAL_RCC_OscConfig+0xcc8>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a72      	ldr	r2, [pc, #456]	; (800432c <HAL_RCC_OscConfig+0xcc8>)
 8004164:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004168:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800416a:	f7fd f8d1 	bl	8001310 <HAL_GetTick>
 800416e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004170:	e008      	b.n	8004184 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004172:	f7fd f8cd 	bl	8001310 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b02      	cmp	r3, #2
 800417e:	d901      	bls.n	8004184 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e144      	b.n	800440e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004184:	4b69      	ldr	r3, [pc, #420]	; (800432c <HAL_RCC_OscConfig+0xcc8>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1f0      	bne.n	8004172 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004190:	4b66      	ldr	r3, [pc, #408]	; (800432c <HAL_RCC_OscConfig+0xcc8>)
 8004192:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004196:	f003 0304 	and.w	r3, r3, #4
 800419a:	2b00      	cmp	r3, #0
 800419c:	d111      	bne.n	80041c2 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800419e:	4b63      	ldr	r3, [pc, #396]	; (800432c <HAL_RCC_OscConfig+0xcc8>)
 80041a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041a4:	4a61      	ldr	r2, [pc, #388]	; (800432c <HAL_RCC_OscConfig+0xcc8>)
 80041a6:	f043 0304 	orr.w	r3, r3, #4
 80041aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80041ae:	4b5f      	ldr	r3, [pc, #380]	; (800432c <HAL_RCC_OscConfig+0xcc8>)
 80041b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041b4:	f003 0304 	and.w	r3, r3, #4
 80041b8:	60fb      	str	r3, [r7, #12]
 80041ba:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80041bc:	2301      	movs	r3, #1
 80041be:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80041c2:	4b5b      	ldr	r3, [pc, #364]	; (8004330 <HAL_RCC_OscConfig+0xccc>)
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041ce:	d102      	bne.n	80041d6 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80041d0:	2301      	movs	r3, #1
 80041d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80041d6:	4b56      	ldr	r3, [pc, #344]	; (8004330 <HAL_RCC_OscConfig+0xccc>)
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	4a55      	ldr	r2, [pc, #340]	; (8004330 <HAL_RCC_OscConfig+0xccc>)
 80041dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041e0:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80041e2:	4b52      	ldr	r3, [pc, #328]	; (800432c <HAL_RCC_OscConfig+0xcc8>)
 80041e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041ea:	f023 0303 	bic.w	r3, r3, #3
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80041f6:	3a01      	subs	r2, #1
 80041f8:	0212      	lsls	r2, r2, #8
 80041fa:	4311      	orrs	r1, r2
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004200:	430a      	orrs	r2, r1
 8004202:	494a      	ldr	r1, [pc, #296]	; (800432c <HAL_RCC_OscConfig+0xcc8>)
 8004204:	4313      	orrs	r3, r2
 8004206:	628b      	str	r3, [r1, #40]	; 0x28
 8004208:	4b48      	ldr	r3, [pc, #288]	; (800432c <HAL_RCC_OscConfig+0xcc8>)
 800420a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800420c:	4b49      	ldr	r3, [pc, #292]	; (8004334 <HAL_RCC_OscConfig+0xcd0>)
 800420e:	4013      	ands	r3, r2
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004214:	3a01      	subs	r2, #1
 8004216:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800421e:	3a01      	subs	r2, #1
 8004220:	0252      	lsls	r2, r2, #9
 8004222:	b292      	uxth	r2, r2
 8004224:	4311      	orrs	r1, r2
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800422a:	3a01      	subs	r2, #1
 800422c:	0412      	lsls	r2, r2, #16
 800422e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004232:	4311      	orrs	r1, r2
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004238:	3a01      	subs	r2, #1
 800423a:	0612      	lsls	r2, r2, #24
 800423c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004240:	430a      	orrs	r2, r1
 8004242:	493a      	ldr	r1, [pc, #232]	; (800432c <HAL_RCC_OscConfig+0xcc8>)
 8004244:	4313      	orrs	r3, r2
 8004246:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004248:	4b38      	ldr	r3, [pc, #224]	; (800432c <HAL_RCC_OscConfig+0xcc8>)
 800424a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424c:	4a37      	ldr	r2, [pc, #220]	; (800432c <HAL_RCC_OscConfig+0xcc8>)
 800424e:	f023 0310 	bic.w	r3, r3, #16
 8004252:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004258:	4a34      	ldr	r2, [pc, #208]	; (800432c <HAL_RCC_OscConfig+0xcc8>)
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800425e:	4b33      	ldr	r3, [pc, #204]	; (800432c <HAL_RCC_OscConfig+0xcc8>)
 8004260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004262:	4a32      	ldr	r2, [pc, #200]	; (800432c <HAL_RCC_OscConfig+0xcc8>)
 8004264:	f043 0310 	orr.w	r3, r3, #16
 8004268:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800426a:	4b30      	ldr	r3, [pc, #192]	; (800432c <HAL_RCC_OscConfig+0xcc8>)
 800426c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426e:	f023 020c 	bic.w	r2, r3, #12
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004276:	492d      	ldr	r1, [pc, #180]	; (800432c <HAL_RCC_OscConfig+0xcc8>)
 8004278:	4313      	orrs	r3, r2
 800427a:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 800427c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004280:	2b01      	cmp	r3, #1
 8004282:	d105      	bne.n	8004290 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004284:	4b2a      	ldr	r3, [pc, #168]	; (8004330 <HAL_RCC_OscConfig+0xccc>)
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	4a29      	ldr	r2, [pc, #164]	; (8004330 <HAL_RCC_OscConfig+0xccc>)
 800428a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800428e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004290:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004294:	2b01      	cmp	r3, #1
 8004296:	d107      	bne.n	80042a8 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8004298:	4b24      	ldr	r3, [pc, #144]	; (800432c <HAL_RCC_OscConfig+0xcc8>)
 800429a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800429e:	4a23      	ldr	r2, [pc, #140]	; (800432c <HAL_RCC_OscConfig+0xcc8>)
 80042a0:	f023 0304 	bic.w	r3, r3, #4
 80042a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80042a8:	4b20      	ldr	r3, [pc, #128]	; (800432c <HAL_RCC_OscConfig+0xcc8>)
 80042aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ac:	4a1f      	ldr	r2, [pc, #124]	; (800432c <HAL_RCC_OscConfig+0xcc8>)
 80042ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042b2:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80042b4:	4b1d      	ldr	r3, [pc, #116]	; (800432c <HAL_RCC_OscConfig+0xcc8>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a1c      	ldr	r2, [pc, #112]	; (800432c <HAL_RCC_OscConfig+0xcc8>)
 80042ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042be:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80042c0:	f7fd f826 	bl	8001310 <HAL_GetTick>
 80042c4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042c8:	f7fd f822 	bl	8001310 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e099      	b.n	800440e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80042da:	4b14      	ldr	r3, [pc, #80]	; (800432c <HAL_RCC_OscConfig+0xcc8>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0f0      	beq.n	80042c8 <HAL_RCC_OscConfig+0xc64>
 80042e6:	e091      	b.n	800440c <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80042e8:	4b10      	ldr	r3, [pc, #64]	; (800432c <HAL_RCC_OscConfig+0xcc8>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a0f      	ldr	r2, [pc, #60]	; (800432c <HAL_RCC_OscConfig+0xcc8>)
 80042ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042f2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80042f4:	f7fd f80c 	bl	8001310 <HAL_GetTick>
 80042f8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80042fa:	e008      	b.n	800430e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042fc:	f7fd f808 	bl	8001310 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b02      	cmp	r3, #2
 8004308:	d901      	bls.n	800430e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e07f      	b.n	800440e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800430e:	4b07      	ldr	r3, [pc, #28]	; (800432c <HAL_RCC_OscConfig+0xcc8>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1f0      	bne.n	80042fc <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800431a:	4b04      	ldr	r3, [pc, #16]	; (800432c <HAL_RCC_OscConfig+0xcc8>)
 800431c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431e:	4a03      	ldr	r2, [pc, #12]	; (800432c <HAL_RCC_OscConfig+0xcc8>)
 8004320:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8004324:	f023 0303 	bic.w	r3, r3, #3
 8004328:	6293      	str	r3, [r2, #40]	; 0x28
 800432a:	e06f      	b.n	800440c <HAL_RCC_OscConfig+0xda8>
 800432c:	46020c00 	.word	0x46020c00
 8004330:	46020800 	.word	0x46020800
 8004334:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004338:	4b37      	ldr	r3, [pc, #220]	; (8004418 <HAL_RCC_OscConfig+0xdb4>)
 800433a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800433e:	4b36      	ldr	r3, [pc, #216]	; (8004418 <HAL_RCC_OscConfig+0xdb4>)
 8004340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004342:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004348:	2b01      	cmp	r3, #1
 800434a:	d039      	beq.n	80043c0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	f003 0203 	and.w	r2, r3, #3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004356:	429a      	cmp	r2, r3
 8004358:	d132      	bne.n	80043c0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	0a1b      	lsrs	r3, r3, #8
 800435e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004368:	429a      	cmp	r2, r3
 800436a:	d129      	bne.n	80043c0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004376:	429a      	cmp	r2, r3
 8004378:	d122      	bne.n	80043c0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004384:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004386:	429a      	cmp	r2, r3
 8004388:	d11a      	bne.n	80043c0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	0a5b      	lsrs	r3, r3, #9
 800438e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004396:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004398:	429a      	cmp	r2, r3
 800439a:	d111      	bne.n	80043c0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	0c1b      	lsrs	r3, r3, #16
 80043a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043a8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d108      	bne.n	80043c0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	0e1b      	lsrs	r3, r3, #24
 80043b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ba:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80043bc:	429a      	cmp	r2, r3
 80043be:	d001      	beq.n	80043c4 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e024      	b.n	800440e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80043c4:	4b14      	ldr	r3, [pc, #80]	; (8004418 <HAL_RCC_OscConfig+0xdb4>)
 80043c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c8:	08db      	lsrs	r3, r3, #3
 80043ca:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d01a      	beq.n	800440c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80043d6:	4b10      	ldr	r3, [pc, #64]	; (8004418 <HAL_RCC_OscConfig+0xdb4>)
 80043d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043da:	4a0f      	ldr	r2, [pc, #60]	; (8004418 <HAL_RCC_OscConfig+0xdb4>)
 80043dc:	f023 0310 	bic.w	r3, r3, #16
 80043e0:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e2:	f7fc ff95 	bl	8001310 <HAL_GetTick>
 80043e6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80043e8:	bf00      	nop
 80043ea:	f7fc ff91 	bl	8001310 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d0f9      	beq.n	80043ea <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043fa:	4a07      	ldr	r2, [pc, #28]	; (8004418 <HAL_RCC_OscConfig+0xdb4>)
 80043fc:	00db      	lsls	r3, r3, #3
 80043fe:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004400:	4b05      	ldr	r3, [pc, #20]	; (8004418 <HAL_RCC_OscConfig+0xdb4>)
 8004402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004404:	4a04      	ldr	r2, [pc, #16]	; (8004418 <HAL_RCC_OscConfig+0xdb4>)
 8004406:	f043 0310 	orr.w	r3, r3, #16
 800440a:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3738      	adds	r7, #56	; 0x38
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	46020c00 	.word	0x46020c00

0800441c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d101      	bne.n	8004430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e1d9      	b.n	80047e4 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004430:	4b9b      	ldr	r3, [pc, #620]	; (80046a0 <HAL_RCC_ClockConfig+0x284>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 030f 	and.w	r3, r3, #15
 8004438:	683a      	ldr	r2, [r7, #0]
 800443a:	429a      	cmp	r2, r3
 800443c:	d910      	bls.n	8004460 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800443e:	4b98      	ldr	r3, [pc, #608]	; (80046a0 <HAL_RCC_ClockConfig+0x284>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f023 020f 	bic.w	r2, r3, #15
 8004446:	4996      	ldr	r1, [pc, #600]	; (80046a0 <HAL_RCC_ClockConfig+0x284>)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	4313      	orrs	r3, r2
 800444c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800444e:	4b94      	ldr	r3, [pc, #592]	; (80046a0 <HAL_RCC_ClockConfig+0x284>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 030f 	and.w	r3, r3, #15
 8004456:	683a      	ldr	r2, [r7, #0]
 8004458:	429a      	cmp	r2, r3
 800445a:	d001      	beq.n	8004460 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e1c1      	b.n	80047e4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0310 	and.w	r3, r3, #16
 8004468:	2b00      	cmp	r3, #0
 800446a:	d010      	beq.n	800448e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	695a      	ldr	r2, [r3, #20]
 8004470:	4b8c      	ldr	r3, [pc, #560]	; (80046a4 <HAL_RCC_ClockConfig+0x288>)
 8004472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004474:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004478:	429a      	cmp	r2, r3
 800447a:	d908      	bls.n	800448e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800447c:	4b89      	ldr	r3, [pc, #548]	; (80046a4 <HAL_RCC_ClockConfig+0x288>)
 800447e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004480:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	4986      	ldr	r1, [pc, #536]	; (80046a4 <HAL_RCC_ClockConfig+0x288>)
 800448a:	4313      	orrs	r3, r2
 800448c:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0308 	and.w	r3, r3, #8
 8004496:	2b00      	cmp	r3, #0
 8004498:	d012      	beq.n	80044c0 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	691a      	ldr	r2, [r3, #16]
 800449e:	4b81      	ldr	r3, [pc, #516]	; (80046a4 <HAL_RCC_ClockConfig+0x288>)
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	091b      	lsrs	r3, r3, #4
 80044a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d909      	bls.n	80044c0 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80044ac:	4b7d      	ldr	r3, [pc, #500]	; (80046a4 <HAL_RCC_ClockConfig+0x288>)
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	011b      	lsls	r3, r3, #4
 80044ba:	497a      	ldr	r1, [pc, #488]	; (80046a4 <HAL_RCC_ClockConfig+0x288>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0304 	and.w	r3, r3, #4
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d010      	beq.n	80044ee <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68da      	ldr	r2, [r3, #12]
 80044d0:	4b74      	ldr	r3, [pc, #464]	; (80046a4 <HAL_RCC_ClockConfig+0x288>)
 80044d2:	6a1b      	ldr	r3, [r3, #32]
 80044d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80044d8:	429a      	cmp	r2, r3
 80044da:	d908      	bls.n	80044ee <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80044dc:	4b71      	ldr	r3, [pc, #452]	; (80046a4 <HAL_RCC_ClockConfig+0x288>)
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	496e      	ldr	r1, [pc, #440]	; (80046a4 <HAL_RCC_ClockConfig+0x288>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d010      	beq.n	800451c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	689a      	ldr	r2, [r3, #8]
 80044fe:	4b69      	ldr	r3, [pc, #420]	; (80046a4 <HAL_RCC_ClockConfig+0x288>)
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	f003 030f 	and.w	r3, r3, #15
 8004506:	429a      	cmp	r2, r3
 8004508:	d908      	bls.n	800451c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800450a:	4b66      	ldr	r3, [pc, #408]	; (80046a4 <HAL_RCC_ClockConfig+0x288>)
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	f023 020f 	bic.w	r2, r3, #15
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	4963      	ldr	r1, [pc, #396]	; (80046a4 <HAL_RCC_ClockConfig+0x288>)
 8004518:	4313      	orrs	r3, r2
 800451a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 80d2 	beq.w	80046ce <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800452a:	2300      	movs	r3, #0
 800452c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	2b03      	cmp	r3, #3
 8004534:	d143      	bne.n	80045be <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004536:	4b5b      	ldr	r3, [pc, #364]	; (80046a4 <HAL_RCC_ClockConfig+0x288>)
 8004538:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800453c:	f003 0304 	and.w	r3, r3, #4
 8004540:	2b00      	cmp	r3, #0
 8004542:	d110      	bne.n	8004566 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004544:	4b57      	ldr	r3, [pc, #348]	; (80046a4 <HAL_RCC_ClockConfig+0x288>)
 8004546:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800454a:	4a56      	ldr	r2, [pc, #344]	; (80046a4 <HAL_RCC_ClockConfig+0x288>)
 800454c:	f043 0304 	orr.w	r3, r3, #4
 8004550:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004554:	4b53      	ldr	r3, [pc, #332]	; (80046a4 <HAL_RCC_ClockConfig+0x288>)
 8004556:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800455a:	f003 0304 	and.w	r3, r3, #4
 800455e:	60bb      	str	r3, [r7, #8]
 8004560:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8004562:	2301      	movs	r3, #1
 8004564:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8004566:	f7fc fed3 	bl	8001310 <HAL_GetTick>
 800456a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800456c:	4b4e      	ldr	r3, [pc, #312]	; (80046a8 <HAL_RCC_ClockConfig+0x28c>)
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00f      	beq.n	8004598 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004578:	e008      	b.n	800458c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800457a:	f7fc fec9 	bl	8001310 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b02      	cmp	r3, #2
 8004586:	d901      	bls.n	800458c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e12b      	b.n	80047e4 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800458c:	4b46      	ldr	r3, [pc, #280]	; (80046a8 <HAL_RCC_ClockConfig+0x28c>)
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d0f0      	beq.n	800457a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004598:	7dfb      	ldrb	r3, [r7, #23]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d107      	bne.n	80045ae <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800459e:	4b41      	ldr	r3, [pc, #260]	; (80046a4 <HAL_RCC_ClockConfig+0x288>)
 80045a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045a4:	4a3f      	ldr	r2, [pc, #252]	; (80046a4 <HAL_RCC_ClockConfig+0x288>)
 80045a6:	f023 0304 	bic.w	r3, r3, #4
 80045aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80045ae:	4b3d      	ldr	r3, [pc, #244]	; (80046a4 <HAL_RCC_ClockConfig+0x288>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d121      	bne.n	80045fe <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e112      	b.n	80047e4 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d107      	bne.n	80045d6 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045c6:	4b37      	ldr	r3, [pc, #220]	; (80046a4 <HAL_RCC_ClockConfig+0x288>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d115      	bne.n	80045fe <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e106      	b.n	80047e4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d107      	bne.n	80045ee <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80045de:	4b31      	ldr	r3, [pc, #196]	; (80046a4 <HAL_RCC_ClockConfig+0x288>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0304 	and.w	r3, r3, #4
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d109      	bne.n	80045fe <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e0fa      	b.n	80047e4 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045ee:	4b2d      	ldr	r3, [pc, #180]	; (80046a4 <HAL_RCC_ClockConfig+0x288>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e0f2      	b.n	80047e4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80045fe:	4b29      	ldr	r3, [pc, #164]	; (80046a4 <HAL_RCC_ClockConfig+0x288>)
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	f023 0203 	bic.w	r2, r3, #3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	4926      	ldr	r1, [pc, #152]	; (80046a4 <HAL_RCC_ClockConfig+0x288>)
 800460c:	4313      	orrs	r3, r2
 800460e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004610:	f7fc fe7e 	bl	8001310 <HAL_GetTick>
 8004614:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	2b03      	cmp	r3, #3
 800461c:	d112      	bne.n	8004644 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800461e:	e00a      	b.n	8004636 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004620:	f7fc fe76 	bl	8001310 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	f241 3288 	movw	r2, #5000	; 0x1388
 800462e:	4293      	cmp	r3, r2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e0d6      	b.n	80047e4 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004636:	4b1b      	ldr	r3, [pc, #108]	; (80046a4 <HAL_RCC_ClockConfig+0x288>)
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	f003 030c 	and.w	r3, r3, #12
 800463e:	2b0c      	cmp	r3, #12
 8004640:	d1ee      	bne.n	8004620 <HAL_RCC_ClockConfig+0x204>
 8004642:	e044      	b.n	80046ce <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	2b02      	cmp	r3, #2
 800464a:	d112      	bne.n	8004672 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800464c:	e00a      	b.n	8004664 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800464e:	f7fc fe5f 	bl	8001310 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	f241 3288 	movw	r2, #5000	; 0x1388
 800465c:	4293      	cmp	r3, r2
 800465e:	d901      	bls.n	8004664 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e0bf      	b.n	80047e4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004664:	4b0f      	ldr	r3, [pc, #60]	; (80046a4 <HAL_RCC_ClockConfig+0x288>)
 8004666:	69db      	ldr	r3, [r3, #28]
 8004668:	f003 030c 	and.w	r3, r3, #12
 800466c:	2b08      	cmp	r3, #8
 800466e:	d1ee      	bne.n	800464e <HAL_RCC_ClockConfig+0x232>
 8004670:	e02d      	b.n	80046ce <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d123      	bne.n	80046c2 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800467a:	e00a      	b.n	8004692 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800467c:	f7fc fe48 	bl	8001310 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	f241 3288 	movw	r2, #5000	; 0x1388
 800468a:	4293      	cmp	r3, r2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e0a8      	b.n	80047e4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004692:	4b04      	ldr	r3, [pc, #16]	; (80046a4 <HAL_RCC_ClockConfig+0x288>)
 8004694:	69db      	ldr	r3, [r3, #28]
 8004696:	f003 030c 	and.w	r3, r3, #12
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1ee      	bne.n	800467c <HAL_RCC_ClockConfig+0x260>
 800469e:	e016      	b.n	80046ce <HAL_RCC_ClockConfig+0x2b2>
 80046a0:	40022000 	.word	0x40022000
 80046a4:	46020c00 	.word	0x46020c00
 80046a8:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046ac:	f7fc fe30 	bl	8001310 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e090      	b.n	80047e4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80046c2:	4b4a      	ldr	r3, [pc, #296]	; (80047ec <HAL_RCC_ClockConfig+0x3d0>)
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	f003 030c 	and.w	r3, r3, #12
 80046ca:	2b04      	cmp	r3, #4
 80046cc:	d1ee      	bne.n	80046ac <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d010      	beq.n	80046fc <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689a      	ldr	r2, [r3, #8]
 80046de:	4b43      	ldr	r3, [pc, #268]	; (80047ec <HAL_RCC_ClockConfig+0x3d0>)
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	f003 030f 	and.w	r3, r3, #15
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d208      	bcs.n	80046fc <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80046ea:	4b40      	ldr	r3, [pc, #256]	; (80047ec <HAL_RCC_ClockConfig+0x3d0>)
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	f023 020f 	bic.w	r2, r3, #15
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	493d      	ldr	r1, [pc, #244]	; (80047ec <HAL_RCC_ClockConfig+0x3d0>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046fc:	4b3c      	ldr	r3, [pc, #240]	; (80047f0 <HAL_RCC_ClockConfig+0x3d4>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 030f 	and.w	r3, r3, #15
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	429a      	cmp	r2, r3
 8004708:	d210      	bcs.n	800472c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800470a:	4b39      	ldr	r3, [pc, #228]	; (80047f0 <HAL_RCC_ClockConfig+0x3d4>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f023 020f 	bic.w	r2, r3, #15
 8004712:	4937      	ldr	r1, [pc, #220]	; (80047f0 <HAL_RCC_ClockConfig+0x3d4>)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	4313      	orrs	r3, r2
 8004718:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800471a:	4b35      	ldr	r3, [pc, #212]	; (80047f0 <HAL_RCC_ClockConfig+0x3d4>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 030f 	and.w	r3, r3, #15
 8004722:	683a      	ldr	r2, [r7, #0]
 8004724:	429a      	cmp	r2, r3
 8004726:	d001      	beq.n	800472c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e05b      	b.n	80047e4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0304 	and.w	r3, r3, #4
 8004734:	2b00      	cmp	r3, #0
 8004736:	d010      	beq.n	800475a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68da      	ldr	r2, [r3, #12]
 800473c:	4b2b      	ldr	r3, [pc, #172]	; (80047ec <HAL_RCC_ClockConfig+0x3d0>)
 800473e:	6a1b      	ldr	r3, [r3, #32]
 8004740:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004744:	429a      	cmp	r2, r3
 8004746:	d208      	bcs.n	800475a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004748:	4b28      	ldr	r3, [pc, #160]	; (80047ec <HAL_RCC_ClockConfig+0x3d0>)
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	4925      	ldr	r1, [pc, #148]	; (80047ec <HAL_RCC_ClockConfig+0x3d0>)
 8004756:	4313      	orrs	r3, r2
 8004758:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0308 	and.w	r3, r3, #8
 8004762:	2b00      	cmp	r3, #0
 8004764:	d012      	beq.n	800478c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	691a      	ldr	r2, [r3, #16]
 800476a:	4b20      	ldr	r3, [pc, #128]	; (80047ec <HAL_RCC_ClockConfig+0x3d0>)
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	091b      	lsrs	r3, r3, #4
 8004770:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004774:	429a      	cmp	r2, r3
 8004776:	d209      	bcs.n	800478c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004778:	4b1c      	ldr	r3, [pc, #112]	; (80047ec <HAL_RCC_ClockConfig+0x3d0>)
 800477a:	6a1b      	ldr	r3, [r3, #32]
 800477c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	011b      	lsls	r3, r3, #4
 8004786:	4919      	ldr	r1, [pc, #100]	; (80047ec <HAL_RCC_ClockConfig+0x3d0>)
 8004788:	4313      	orrs	r3, r2
 800478a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0310 	and.w	r3, r3, #16
 8004794:	2b00      	cmp	r3, #0
 8004796:	d010      	beq.n	80047ba <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	695a      	ldr	r2, [r3, #20]
 800479c:	4b13      	ldr	r3, [pc, #76]	; (80047ec <HAL_RCC_ClockConfig+0x3d0>)
 800479e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d208      	bcs.n	80047ba <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80047a8:	4b10      	ldr	r3, [pc, #64]	; (80047ec <HAL_RCC_ClockConfig+0x3d0>)
 80047aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	490d      	ldr	r1, [pc, #52]	; (80047ec <HAL_RCC_ClockConfig+0x3d0>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80047ba:	f000 f821 	bl	8004800 <HAL_RCC_GetSysClockFreq>
 80047be:	4602      	mov	r2, r0
 80047c0:	4b0a      	ldr	r3, [pc, #40]	; (80047ec <HAL_RCC_ClockConfig+0x3d0>)
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	f003 030f 	and.w	r3, r3, #15
 80047c8:	490a      	ldr	r1, [pc, #40]	; (80047f4 <HAL_RCC_ClockConfig+0x3d8>)
 80047ca:	5ccb      	ldrb	r3, [r1, r3]
 80047cc:	fa22 f303 	lsr.w	r3, r2, r3
 80047d0:	4a09      	ldr	r2, [pc, #36]	; (80047f8 <HAL_RCC_ClockConfig+0x3dc>)
 80047d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80047d4:	4b09      	ldr	r3, [pc, #36]	; (80047fc <HAL_RCC_ClockConfig+0x3e0>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4618      	mov	r0, r3
 80047da:	f7fc fc51 	bl	8001080 <HAL_InitTick>
 80047de:	4603      	mov	r3, r0
 80047e0:	73fb      	strb	r3, [r7, #15]

  return status;
 80047e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3718      	adds	r7, #24
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	46020c00 	.word	0x46020c00
 80047f0:	40022000 	.word	0x40022000
 80047f4:	0800adb8 	.word	0x0800adb8
 80047f8:	20000000 	.word	0x20000000
 80047fc:	20000004 	.word	0x20000004

08004800 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004800:	b480      	push	{r7}
 8004802:	b08b      	sub	sp, #44	; 0x2c
 8004804:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004806:	2300      	movs	r3, #0
 8004808:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800480a:	2300      	movs	r3, #0
 800480c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800480e:	4b78      	ldr	r3, [pc, #480]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004810:	69db      	ldr	r3, [r3, #28]
 8004812:	f003 030c 	and.w	r3, r3, #12
 8004816:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004818:	4b75      	ldr	r3, [pc, #468]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800481a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481c:	f003 0303 	and.w	r3, r3, #3
 8004820:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d005      	beq.n	8004834 <HAL_RCC_GetSysClockFreq+0x34>
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	2b0c      	cmp	r3, #12
 800482c:	d121      	bne.n	8004872 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d11e      	bne.n	8004872 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004834:	4b6e      	ldr	r3, [pc, #440]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d107      	bne.n	8004850 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004840:	4b6b      	ldr	r3, [pc, #428]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004842:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004846:	0b1b      	lsrs	r3, r3, #12
 8004848:	f003 030f 	and.w	r3, r3, #15
 800484c:	627b      	str	r3, [r7, #36]	; 0x24
 800484e:	e005      	b.n	800485c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8004850:	4b67      	ldr	r3, [pc, #412]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	0f1b      	lsrs	r3, r3, #28
 8004856:	f003 030f 	and.w	r3, r3, #15
 800485a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800485c:	4a65      	ldr	r2, [pc, #404]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004864:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d110      	bne.n	800488e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004870:	e00d      	b.n	800488e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004872:	4b5f      	ldr	r3, [pc, #380]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	f003 030c 	and.w	r3, r3, #12
 800487a:	2b04      	cmp	r3, #4
 800487c:	d102      	bne.n	8004884 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800487e:	4b5e      	ldr	r3, [pc, #376]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004880:	623b      	str	r3, [r7, #32]
 8004882:	e004      	b.n	800488e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	2b08      	cmp	r3, #8
 8004888:	d101      	bne.n	800488e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800488a:	4b5b      	ldr	r3, [pc, #364]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800488c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	2b0c      	cmp	r3, #12
 8004892:	f040 80a5 	bne.w	80049e0 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004896:	4b56      	ldr	r3, [pc, #344]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489a:	f003 0303 	and.w	r3, r3, #3
 800489e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80048a0:	4b53      	ldr	r3, [pc, #332]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80048a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a4:	0a1b      	lsrs	r3, r3, #8
 80048a6:	f003 030f 	and.w	r3, r3, #15
 80048aa:	3301      	adds	r3, #1
 80048ac:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80048ae:	4b50      	ldr	r3, [pc, #320]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80048b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b2:	091b      	lsrs	r3, r3, #4
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80048ba:	4b4d      	ldr	r3, [pc, #308]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80048bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048be:	08db      	lsrs	r3, r3, #3
 80048c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	fb02 f303 	mul.w	r3, r2, r3
 80048ca:	ee07 3a90 	vmov	s15, r3
 80048ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048d2:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d003      	beq.n	80048e4 <HAL_RCC_GetSysClockFreq+0xe4>
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	2b03      	cmp	r3, #3
 80048e0:	d022      	beq.n	8004928 <HAL_RCC_GetSysClockFreq+0x128>
 80048e2:	e043      	b.n	800496c <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	ee07 3a90 	vmov	s15, r3
 80048ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ee:	eddf 6a43 	vldr	s13, [pc, #268]	; 80049fc <HAL_RCC_GetSysClockFreq+0x1fc>
 80048f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048f6:	4b3e      	ldr	r3, [pc, #248]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80048f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048fe:	ee07 3a90 	vmov	s15, r3
 8004902:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004906:	ed97 6a01 	vldr	s12, [r7, #4]
 800490a:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8004a00 <HAL_RCC_GetSysClockFreq+0x200>
 800490e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004912:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004916:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800491a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800491e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004922:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004926:	e046      	b.n	80049b6 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	ee07 3a90 	vmov	s15, r3
 800492e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004932:	eddf 6a32 	vldr	s13, [pc, #200]	; 80049fc <HAL_RCC_GetSysClockFreq+0x1fc>
 8004936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800493a:	4b2d      	ldr	r3, [pc, #180]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800493c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800493e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004942:	ee07 3a90 	vmov	s15, r3
 8004946:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800494a:	ed97 6a01 	vldr	s12, [r7, #4]
 800494e:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8004a00 <HAL_RCC_GetSysClockFreq+0x200>
 8004952:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004956:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800495a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800495e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004966:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800496a:	e024      	b.n	80049b6 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496e:	ee07 3a90 	vmov	s15, r3
 8004972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	ee07 3a90 	vmov	s15, r3
 800497c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004980:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004984:	4b1a      	ldr	r3, [pc, #104]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800498c:	ee07 3a90 	vmov	s15, r3
 8004990:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004994:	ed97 6a01 	vldr	s12, [r7, #4]
 8004998:	eddf 5a19 	vldr	s11, [pc, #100]	; 8004a00 <HAL_RCC_GetSysClockFreq+0x200>
 800499c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80049a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049b4:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80049b6:	4b0e      	ldr	r3, [pc, #56]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80049b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ba:	0e1b      	lsrs	r3, r3, #24
 80049bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049c0:	3301      	adds	r3, #1
 80049c2:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	ee07 3a90 	vmov	s15, r3
 80049ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80049ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80049d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049da:	ee17 3a90 	vmov	r3, s15
 80049de:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80049e0:	6a3b      	ldr	r3, [r7, #32]
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	372c      	adds	r7, #44	; 0x2c
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	46020c00 	.word	0x46020c00
 80049f4:	0800add0 	.word	0x0800add0
 80049f8:	00f42400 	.word	0x00f42400
 80049fc:	4b742400 	.word	0x4b742400
 8004a00:	46000000 	.word	0x46000000

08004a04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004a08:	f7ff fefa 	bl	8004800 <HAL_RCC_GetSysClockFreq>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	4b07      	ldr	r3, [pc, #28]	; (8004a2c <HAL_RCC_GetHCLKFreq+0x28>)
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	f003 030f 	and.w	r3, r3, #15
 8004a16:	4906      	ldr	r1, [pc, #24]	; (8004a30 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004a18:	5ccb      	ldrb	r3, [r1, r3]
 8004a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a1e:	4a05      	ldr	r2, [pc, #20]	; (8004a34 <HAL_RCC_GetHCLKFreq+0x30>)
 8004a20:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004a22:	4b04      	ldr	r3, [pc, #16]	; (8004a34 <HAL_RCC_GetHCLKFreq+0x30>)
 8004a24:	681b      	ldr	r3, [r3, #0]
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	46020c00 	.word	0x46020c00
 8004a30:	0800adb8 	.word	0x0800adb8
 8004a34:	20000000 	.word	0x20000000

08004a38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8004a3c:	f7ff ffe2 	bl	8004a04 <HAL_RCC_GetHCLKFreq>
 8004a40:	4602      	mov	r2, r0
 8004a42:	4b05      	ldr	r3, [pc, #20]	; (8004a58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	091b      	lsrs	r3, r3, #4
 8004a48:	f003 0307 	and.w	r3, r3, #7
 8004a4c:	4903      	ldr	r1, [pc, #12]	; (8004a5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a4e:	5ccb      	ldrb	r3, [r1, r3]
 8004a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	46020c00 	.word	0x46020c00
 8004a5c:	0800adc8 	.word	0x0800adc8

08004a60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8004a64:	f7ff ffce 	bl	8004a04 <HAL_RCC_GetHCLKFreq>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	4b05      	ldr	r3, [pc, #20]	; (8004a80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	0a1b      	lsrs	r3, r3, #8
 8004a70:	f003 0307 	and.w	r3, r3, #7
 8004a74:	4903      	ldr	r1, [pc, #12]	; (8004a84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a76:	5ccb      	ldrb	r3, [r1, r3]
 8004a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	46020c00 	.word	0x46020c00
 8004a84:	0800adc8 	.word	0x0800adc8

08004a88 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8004a8c:	f7ff ffba 	bl	8004a04 <HAL_RCC_GetHCLKFreq>
 8004a90:	4602      	mov	r2, r0
 8004a92:	4b05      	ldr	r3, [pc, #20]	; (8004aa8 <HAL_RCC_GetPCLK3Freq+0x20>)
 8004a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a96:	091b      	lsrs	r3, r3, #4
 8004a98:	f003 0307 	and.w	r3, r3, #7
 8004a9c:	4903      	ldr	r1, [pc, #12]	; (8004aac <HAL_RCC_GetPCLK3Freq+0x24>)
 8004a9e:	5ccb      	ldrb	r3, [r1, r3]
 8004aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	46020c00 	.word	0x46020c00
 8004aac:	0800adc8 	.word	0x0800adc8

08004ab0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	221f      	movs	r2, #31
 8004abe:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8004ac0:	4b15      	ldr	r3, [pc, #84]	; (8004b18 <HAL_RCC_GetClockConfig+0x68>)
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	f003 0203 	and.w	r2, r3, #3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8004acc:	4b12      	ldr	r3, [pc, #72]	; (8004b18 <HAL_RCC_GetClockConfig+0x68>)
 8004ace:	6a1b      	ldr	r3, [r3, #32]
 8004ad0:	f003 020f 	and.w	r2, r3, #15
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8004ad8:	4b0f      	ldr	r3, [pc, #60]	; (8004b18 <HAL_RCC_GetClockConfig+0x68>)
 8004ada:	6a1b      	ldr	r3, [r3, #32]
 8004adc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8004ae4:	4b0c      	ldr	r3, [pc, #48]	; (8004b18 <HAL_RCC_GetClockConfig+0x68>)
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	091b      	lsrs	r3, r3, #4
 8004aea:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8004af2:	4b09      	ldr	r3, [pc, #36]	; (8004b18 <HAL_RCC_GetClockConfig+0x68>)
 8004af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004afe:	4b07      	ldr	r3, [pc, #28]	; (8004b1c <HAL_RCC_GetClockConfig+0x6c>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 020f 	and.w	r2, r3, #15
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	601a      	str	r2, [r3, #0]
}
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	46020c00 	.word	0x46020c00
 8004b1c:	40022000 	.word	0x40022000

08004b20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004b28:	4b3e      	ldr	r3, [pc, #248]	; (8004c24 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b2e:	f003 0304 	and.w	r3, r3, #4
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004b36:	f7fe fd07 	bl	8003548 <HAL_PWREx_GetVoltageRange>
 8004b3a:	6178      	str	r0, [r7, #20]
 8004b3c:	e019      	b.n	8004b72 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b3e:	4b39      	ldr	r3, [pc, #228]	; (8004c24 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004b40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b44:	4a37      	ldr	r2, [pc, #220]	; (8004c24 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004b46:	f043 0304 	orr.w	r3, r3, #4
 8004b4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004b4e:	4b35      	ldr	r3, [pc, #212]	; (8004c24 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004b50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	60fb      	str	r3, [r7, #12]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004b5c:	f7fe fcf4 	bl	8003548 <HAL_PWREx_GetVoltageRange>
 8004b60:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004b62:	4b30      	ldr	r3, [pc, #192]	; (8004c24 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b68:	4a2e      	ldr	r2, [pc, #184]	; (8004c24 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004b6a:	f023 0304 	bic.w	r3, r3, #4
 8004b6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b78:	d003      	beq.n	8004b82 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b80:	d109      	bne.n	8004b96 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b88:	d202      	bcs.n	8004b90 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004b8e:	e033      	b.n	8004bf8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004b90:	2300      	movs	r3, #0
 8004b92:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004b94:	e030      	b.n	8004bf8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b9c:	d208      	bcs.n	8004bb0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ba4:	d102      	bne.n	8004bac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	613b      	str	r3, [r7, #16]
 8004baa:	e025      	b.n	8004bf8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e035      	b.n	8004c1c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bb6:	d90f      	bls.n	8004bd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d109      	bne.n	8004bd2 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004bc4:	d902      	bls.n	8004bcc <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	613b      	str	r3, [r7, #16]
 8004bca:	e015      	b.n	8004bf8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8004bcc:	2301      	movs	r3, #1
 8004bce:	613b      	str	r3, [r7, #16]
 8004bd0:	e012      	b.n	8004bf8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	613b      	str	r3, [r7, #16]
 8004bd6:	e00f      	b.n	8004bf8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bde:	d109      	bne.n	8004bf4 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004be6:	d102      	bne.n	8004bee <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8004be8:	2301      	movs	r3, #1
 8004bea:	613b      	str	r3, [r7, #16]
 8004bec:	e004      	b.n	8004bf8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8004bee:	2302      	movs	r3, #2
 8004bf0:	613b      	str	r3, [r7, #16]
 8004bf2:	e001      	b.n	8004bf8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004bf8:	4b0b      	ldr	r3, [pc, #44]	; (8004c28 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f023 020f 	bic.w	r2, r3, #15
 8004c00:	4909      	ldr	r1, [pc, #36]	; (8004c28 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004c08:	4b07      	ldr	r3, [pc, #28]	; (8004c28 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 030f 	and.w	r3, r3, #15
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d001      	beq.n	8004c1a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e000      	b.n	8004c1c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3718      	adds	r7, #24
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	46020c00 	.word	0x46020c00
 8004c28:	40022000 	.word	0x40022000

08004c2c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c30:	b0b8      	sub	sp, #224	; 0xe0
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c38:	2300      	movs	r3, #0
 8004c3a:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c3e:	2300      	movs	r3, #0
 8004c40:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4c:	f002 0401 	and.w	r4, r2, #1
 8004c50:	2500      	movs	r5, #0
 8004c52:	ea54 0305 	orrs.w	r3, r4, r5
 8004c56:	d00b      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004c58:	4bca      	ldr	r3, [pc, #808]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c5e:	f023 0103 	bic.w	r1, r3, #3
 8004c62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c68:	4ac6      	ldr	r2, [pc, #792]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c6a:	430b      	orrs	r3, r1
 8004c6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c78:	f002 0802 	and.w	r8, r2, #2
 8004c7c:	f04f 0900 	mov.w	r9, #0
 8004c80:	ea58 0309 	orrs.w	r3, r8, r9
 8004c84:	d00b      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004c86:	4bbf      	ldr	r3, [pc, #764]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c8c:	f023 010c 	bic.w	r1, r3, #12
 8004c90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c96:	4abb      	ldr	r2, [pc, #748]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c98:	430b      	orrs	r3, r1
 8004c9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c9e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca6:	f002 0a04 	and.w	sl, r2, #4
 8004caa:	f04f 0b00 	mov.w	fp, #0
 8004cae:	ea5a 030b 	orrs.w	r3, sl, fp
 8004cb2:	d00b      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004cb4:	4bb3      	ldr	r3, [pc, #716]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004cba:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004cbe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc4:	4aaf      	ldr	r2, [pc, #700]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004cc6:	430b      	orrs	r3, r1
 8004cc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ccc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd4:	f002 0308 	and.w	r3, r2, #8
 8004cd8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004cdc:	2300      	movs	r3, #0
 8004cde:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ce2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	d00b      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004cec:	4ba5      	ldr	r3, [pc, #660]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004cf2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004cf6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cfc:	4aa1      	ldr	r2, [pc, #644]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004cfe:	430b      	orrs	r3, r1
 8004d00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0c:	f002 0310 	and.w	r3, r2, #16
 8004d10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d14:	2300      	movs	r3, #0
 8004d16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004d1a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004d1e:	460b      	mov	r3, r1
 8004d20:	4313      	orrs	r3, r2
 8004d22:	d00b      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004d24:	4b97      	ldr	r3, [pc, #604]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d2a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004d2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d34:	4a93      	ldr	r2, [pc, #588]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d36:	430b      	orrs	r3, r1
 8004d38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d44:	f002 0320 	and.w	r3, r2, #32
 8004d48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d52:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004d56:	460b      	mov	r3, r1
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	d00b      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004d5c:	4b89      	ldr	r3, [pc, #548]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d62:	f023 0107 	bic.w	r1, r3, #7
 8004d66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d6c:	4a85      	ldr	r2, [pc, #532]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d6e:	430b      	orrs	r3, r1
 8004d70:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7c:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004d80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004d84:	2300      	movs	r3, #0
 8004d86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d8a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004d8e:	460b      	mov	r3, r1
 8004d90:	4313      	orrs	r3, r2
 8004d92:	d00b      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004d94:	4b7b      	ldr	r3, [pc, #492]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d9a:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8004d9e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004da2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004da4:	4a77      	ldr	r2, [pc, #476]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004da6:	430b      	orrs	r3, r1
 8004da8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004dac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004db8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004dc2:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	d00b      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004dcc:	4b6d      	ldr	r3, [pc, #436]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004dd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004dd6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004dda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ddc:	4a69      	ldr	r2, [pc, #420]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004dde:	430b      	orrs	r3, r1
 8004de0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004de4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dec:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8004df0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004df4:	2300      	movs	r3, #0
 8004df6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004dfa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004dfe:	460b      	mov	r3, r1
 8004e00:	4313      	orrs	r3, r2
 8004e02:	d00b      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004e04:	4b5f      	ldr	r3, [pc, #380]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004e0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e14:	4a5b      	ldr	r2, [pc, #364]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e16:	430b      	orrs	r3, r1
 8004e18:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e24:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004e28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004e32:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004e36:	460b      	mov	r3, r1
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	d00b      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004e3c:	4b51      	ldr	r3, [pc, #324]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e42:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8004e46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e4c:	4a4d      	ldr	r2, [pc, #308]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e4e:	430b      	orrs	r3, r1
 8004e50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5c:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8004e60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e64:	2300      	movs	r3, #0
 8004e66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004e6a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004e6e:	460b      	mov	r3, r1
 8004e70:	4313      	orrs	r3, r2
 8004e72:	d00b      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004e74:	4b43      	ldr	r3, [pc, #268]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e7a:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8004e7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e84:	4a3f      	ldr	r2, [pc, #252]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e86:	430b      	orrs	r3, r1
 8004e88:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e94:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004e98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ea2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	d00b      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004eac:	4b35      	ldr	r3, [pc, #212]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004eb2:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8004eb6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004eba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ebc:	4a31      	ldr	r2, [pc, #196]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ebe:	430b      	orrs	r3, r1
 8004ec0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8004ec4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ecc:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004ed0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004ed6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004eda:	460b      	mov	r3, r1
 8004edc:	4313      	orrs	r3, r2
 8004ede:	d00c      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8004ee0:	4b28      	ldr	r3, [pc, #160]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ee2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ee6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004eea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004eee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ef2:	4a24      	ldr	r2, [pc, #144]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ef4:	430b      	orrs	r3, r1
 8004ef6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004efa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f02:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004f06:	673b      	str	r3, [r7, #112]	; 0x70
 8004f08:	2300      	movs	r3, #0
 8004f0a:	677b      	str	r3, [r7, #116]	; 0x74
 8004f0c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004f10:	460b      	mov	r3, r1
 8004f12:	4313      	orrs	r3, r2
 8004f14:	d04f      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004f16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f1e:	2b80      	cmp	r3, #128	; 0x80
 8004f20:	d02d      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x352>
 8004f22:	2b80      	cmp	r3, #128	; 0x80
 8004f24:	d827      	bhi.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004f26:	2b60      	cmp	r3, #96	; 0x60
 8004f28:	d02e      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004f2a:	2b60      	cmp	r3, #96	; 0x60
 8004f2c:	d823      	bhi.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004f2e:	2b40      	cmp	r3, #64	; 0x40
 8004f30:	d006      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004f32:	2b40      	cmp	r3, #64	; 0x40
 8004f34:	d81f      	bhi.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d009      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x322>
 8004f3a:	2b20      	cmp	r3, #32
 8004f3c:	d011      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004f3e:	e01a      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004f40:	4b10      	ldr	r3, [pc, #64]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f44:	4a0f      	ldr	r2, [pc, #60]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004f46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f4a:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004f4c:	e01d      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f52:	3308      	adds	r3, #8
 8004f54:	4618      	mov	r0, r3
 8004f56:	f002 f9d1 	bl	80072fc <RCCEx_PLL2_Config>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004f60:	e013      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f66:	332c      	adds	r3, #44	; 0x2c
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f002 fa5f 	bl	800742c <RCCEx_PLL3_Config>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004f74:	e009      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8004f7c:	e005      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 8004f7e:	bf00      	nop
 8004f80:	e003      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8004f82:	bf00      	nop
 8004f84:	46020c00 	.word	0x46020c00
        break;
 8004f88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f8a:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10d      	bne.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004f92:	4bb6      	ldr	r3, [pc, #728]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004f94:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004f98:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8004f9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa4:	4ab1      	ldr	r2, [pc, #708]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004fa6:	430b      	orrs	r3, r1
 8004fa8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004fac:	e003      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fae:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004fb2:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004fb6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fbe:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004fc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fc8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004fcc:	460b      	mov	r3, r1
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	d053      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8004fd2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004fd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fde:	d033      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004fe0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fe4:	d82c      	bhi.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004fe6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fea:	d02f      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004fec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ff0:	d826      	bhi.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004ff2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ff6:	d008      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004ff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ffc:	d820      	bhi.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00a      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8005002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005006:	d011      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8005008:	e01a      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800500a:	4b98      	ldr	r3, [pc, #608]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800500c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500e:	4a97      	ldr	r2, [pc, #604]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005014:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005016:	e01a      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005018:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800501c:	3308      	adds	r3, #8
 800501e:	4618      	mov	r0, r3
 8005020:	f002 f96c 	bl	80072fc <RCCEx_PLL2_Config>
 8005024:	4603      	mov	r3, r0
 8005026:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 800502a:	e010      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800502c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005030:	332c      	adds	r3, #44	; 0x2c
 8005032:	4618      	mov	r0, r3
 8005034:	f002 f9fa 	bl	800742c <RCCEx_PLL3_Config>
 8005038:	4603      	mov	r3, r0
 800503a:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 800503e:	e006      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8005046:	e002      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8005048:	bf00      	nop
 800504a:	e000      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 800504c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800504e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005052:	2b00      	cmp	r3, #0
 8005054:	d10d      	bne.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8005056:	4b85      	ldr	r3, [pc, #532]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005058:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800505c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005060:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005064:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005068:	4a80      	ldr	r2, [pc, #512]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800506a:	430b      	orrs	r3, r1
 800506c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005070:	e003      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005072:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005076:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800507a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800507e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005082:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005086:	663b      	str	r3, [r7, #96]	; 0x60
 8005088:	2300      	movs	r3, #0
 800508a:	667b      	str	r3, [r7, #100]	; 0x64
 800508c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005090:	460b      	mov	r3, r1
 8005092:	4313      	orrs	r3, r2
 8005094:	d046      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005096:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800509a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800509e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80050a2:	d028      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80050a4:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80050a8:	d821      	bhi.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80050aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050ae:	d022      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80050b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050b4:	d81b      	bhi.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80050b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80050ba:	d01c      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80050bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80050c0:	d815      	bhi.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80050c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050c6:	d008      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80050c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050cc:	d80f      	bhi.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d011      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80050d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050d6:	d00e      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80050d8:	e009      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80050da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80050de:	3308      	adds	r3, #8
 80050e0:	4618      	mov	r0, r3
 80050e2:	f002 f90b 	bl	80072fc <RCCEx_PLL2_Config>
 80050e6:	4603      	mov	r3, r0
 80050e8:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 80050ec:	e004      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 80050f4:	e000      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 80050f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050f8:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d10d      	bne.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005100:	4b5a      	ldr	r3, [pc, #360]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005102:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005106:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800510a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800510e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005112:	4a56      	ldr	r2, [pc, #344]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005114:	430b      	orrs	r3, r1
 8005116:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800511a:	e003      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800511c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005120:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8005124:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512c:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005130:	65bb      	str	r3, [r7, #88]	; 0x58
 8005132:	2300      	movs	r3, #0
 8005134:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005136:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800513a:	460b      	mov	r3, r1
 800513c:	4313      	orrs	r3, r2
 800513e:	d03f      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8005140:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005148:	2b04      	cmp	r3, #4
 800514a:	d81e      	bhi.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x55e>
 800514c:	a201      	add	r2, pc, #4	; (adr r2, 8005154 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 800514e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005152:	bf00      	nop
 8005154:	08005193 	.word	0x08005193
 8005158:	08005169 	.word	0x08005169
 800515c:	08005177 	.word	0x08005177
 8005160:	08005193 	.word	0x08005193
 8005164:	08005193 	.word	0x08005193
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005168:	4b40      	ldr	r3, [pc, #256]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800516a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516c:	4a3f      	ldr	r2, [pc, #252]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800516e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005172:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005174:	e00e      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005176:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800517a:	332c      	adds	r3, #44	; 0x2c
 800517c:	4618      	mov	r0, r3
 800517e:	f002 f955 	bl	800742c <RCCEx_PLL3_Config>
 8005182:	4603      	mov	r3, r0
 8005184:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8005188:	e004      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8005190:	e000      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 8005192:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005194:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005198:	2b00      	cmp	r3, #0
 800519a:	d10d      	bne.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800519c:	4b33      	ldr	r3, [pc, #204]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800519e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80051a2:	f023 0107 	bic.w	r1, r3, #7
 80051a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80051aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ae:	4a2f      	ldr	r2, [pc, #188]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80051b0:	430b      	orrs	r3, r1
 80051b2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80051b6:	e003      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051b8:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80051bc:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80051c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80051c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c8:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80051cc:	653b      	str	r3, [r7, #80]	; 0x50
 80051ce:	2300      	movs	r3, #0
 80051d0:	657b      	str	r3, [r7, #84]	; 0x54
 80051d2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80051d6:	460b      	mov	r3, r1
 80051d8:	4313      	orrs	r3, r2
 80051da:	d04d      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80051dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80051e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80051e8:	d028      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x610>
 80051ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80051ee:	d821      	bhi.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80051f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80051f4:	d024      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80051f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80051fa:	d81b      	bhi.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80051fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005200:	d00e      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8005202:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005206:	d815      	bhi.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005208:	2b00      	cmp	r3, #0
 800520a:	d01b      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x618>
 800520c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005210:	d110      	bne.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005212:	4b16      	ldr	r3, [pc, #88]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005216:	4a15      	ldr	r2, [pc, #84]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800521c:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800521e:	e012      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005220:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005224:	332c      	adds	r3, #44	; 0x2c
 8005226:	4618      	mov	r0, r3
 8005228:	f002 f900 	bl	800742c <RCCEx_PLL3_Config>
 800522c:	4603      	mov	r3, r0
 800522e:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8005232:	e008      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 800523a:	e004      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 800523c:	bf00      	nop
 800523e:	e002      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8005240:	bf00      	nop
 8005242:	e000      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8005244:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005246:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800524a:	2b00      	cmp	r3, #0
 800524c:	d110      	bne.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800524e:	4b07      	ldr	r3, [pc, #28]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005250:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005254:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005258:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800525c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005260:	4a02      	ldr	r2, [pc, #8]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005262:	430b      	orrs	r3, r1
 8005264:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005268:	e006      	b.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800526a:	bf00      	nop
 800526c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005270:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005274:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005278:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800527c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005280:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005284:	64bb      	str	r3, [r7, #72]	; 0x48
 8005286:	2300      	movs	r3, #0
 8005288:	64fb      	str	r3, [r7, #76]	; 0x4c
 800528a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800528e:	460b      	mov	r3, r1
 8005290:	4313      	orrs	r3, r2
 8005292:	f000 80b5 	beq.w	8005400 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005296:	2300      	movs	r3, #0
 8005298:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800529c:	4b9d      	ldr	r3, [pc, #628]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800529e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052a2:	f003 0304 	and.w	r3, r3, #4
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d113      	bne.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052aa:	4b9a      	ldr	r3, [pc, #616]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80052ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052b0:	4a98      	ldr	r2, [pc, #608]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80052b2:	f043 0304 	orr.w	r3, r3, #4
 80052b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80052ba:	4b96      	ldr	r3, [pc, #600]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80052bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052c0:	f003 0304 	and.w	r3, r3, #4
 80052c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80052c8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
      pwrclkchanged = SET;
 80052cc:	2301      	movs	r3, #1
 80052ce:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80052d2:	4b91      	ldr	r3, [pc, #580]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80052d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d6:	4a90      	ldr	r2, [pc, #576]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80052d8:	f043 0301 	orr.w	r3, r3, #1
 80052dc:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052de:	f7fc f817 	bl	8001310 <HAL_GetTick>
 80052e2:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80052e6:	e00b      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052e8:	f7fc f812 	bl	8001310 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d903      	bls.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 80052fe:	e005      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005300:	4b85      	ldr	r3, [pc, #532]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005304:	f003 0301 	and.w	r3, r3, #1
 8005308:	2b00      	cmp	r3, #0
 800530a:	d0ed      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 800530c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005310:	2b00      	cmp	r3, #0
 8005312:	d165      	bne.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005314:	4b7f      	ldr	r3, [pc, #508]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005316:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800531a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800531e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005322:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005326:	2b00      	cmp	r3, #0
 8005328:	d023      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x746>
 800532a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800532e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8005332:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005336:	4293      	cmp	r3, r2
 8005338:	d01b      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800533a:	4b76      	ldr	r3, [pc, #472]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800533c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005344:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005348:	4b72      	ldr	r3, [pc, #456]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800534a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800534e:	4a71      	ldr	r2, [pc, #452]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005354:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005358:	4b6e      	ldr	r3, [pc, #440]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800535a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800535e:	4a6d      	ldr	r2, [pc, #436]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005360:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005364:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005368:	4a6a      	ldr	r2, [pc, #424]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800536a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800536e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005372:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	2b00      	cmp	r3, #0
 800537c:	d019      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800537e:	f7fb ffc7 	bl	8001310 <HAL_GetTick>
 8005382:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005386:	e00d      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005388:	f7fb ffc2 	bl	8001310 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005392:	1ad2      	subs	r2, r2, r3
 8005394:	f241 3388 	movw	r3, #5000	; 0x1388
 8005398:	429a      	cmp	r2, r3
 800539a:	d903      	bls.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
            break;
 80053a2:	e006      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053a4:	4b5b      	ldr	r3, [pc, #364]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80053a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d0ea      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 80053b2:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10d      	bne.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80053ba:	4b56      	ldr	r3, [pc, #344]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80053bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80053c0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80053c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80053c8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80053cc:	4a51      	ldr	r2, [pc, #324]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80053ce:	430b      	orrs	r3, r1
 80053d0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80053d4:	e008      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80053d6:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80053da:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 80053de:	e003      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053e0:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80053e4:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80053e8:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d107      	bne.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053f0:	4b48      	ldr	r3, [pc, #288]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80053f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053f6:	4a47      	ldr	r2, [pc, #284]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80053f8:	f023 0304 	bic.w	r3, r3, #4
 80053fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8005400:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005408:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800540c:	643b      	str	r3, [r7, #64]	; 0x40
 800540e:	2300      	movs	r3, #0
 8005410:	647b      	str	r3, [r7, #68]	; 0x44
 8005412:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005416:	460b      	mov	r3, r1
 8005418:	4313      	orrs	r3, r2
 800541a:	d042      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800541c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005420:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005424:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005428:	d022      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x844>
 800542a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800542e:	d81b      	bhi.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8005430:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005434:	d011      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8005436:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800543a:	d815      	bhi.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800543c:	2b00      	cmp	r3, #0
 800543e:	d019      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8005440:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005444:	d110      	bne.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005446:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800544a:	3308      	adds	r3, #8
 800544c:	4618      	mov	r0, r3
 800544e:	f001 ff55 	bl	80072fc <RCCEx_PLL2_Config>
 8005452:	4603      	mov	r3, r0
 8005454:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8005458:	e00d      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800545a:	4b2e      	ldr	r3, [pc, #184]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800545c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545e:	4a2d      	ldr	r2, [pc, #180]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005464:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005466:	e006      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 800546e:	e002      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8005470:	bf00      	nop
 8005472:	e000      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8005474:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005476:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800547a:	2b00      	cmp	r3, #0
 800547c:	d10d      	bne.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800547e:	4b25      	ldr	r3, [pc, #148]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005480:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005484:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005488:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800548c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005490:	4a20      	ldr	r2, [pc, #128]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005492:	430b      	orrs	r3, r1
 8005494:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005498:	e003      	b.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800549a:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800549e:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80054a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80054a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054aa:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80054ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80054b0:	2300      	movs	r3, #0
 80054b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054b4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80054b8:	460b      	mov	r3, r1
 80054ba:	4313      	orrs	r3, r2
 80054bc:	d032      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80054be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80054c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054ca:	d00b      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80054cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054d0:	d804      	bhi.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d008      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80054d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054da:	d007      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 80054e2:	e004      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80054e4:	bf00      	nop
 80054e6:	e002      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80054e8:	bf00      	nop
 80054ea:	e000      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80054ec:	bf00      	nop
    }
    if (ret == HAL_OK)
 80054ee:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d112      	bne.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80054f6:	4b07      	ldr	r3, [pc, #28]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80054f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80054fc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005500:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005504:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005508:	4a02      	ldr	r2, [pc, #8]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800550a:	430b      	orrs	r3, r1
 800550c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005510:	e008      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8005512:	bf00      	nop
 8005514:	46020c00 	.word	0x46020c00
 8005518:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800551c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005520:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8005524:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005530:	633b      	str	r3, [r7, #48]	; 0x30
 8005532:	2300      	movs	r3, #0
 8005534:	637b      	str	r3, [r7, #52]	; 0x34
 8005536:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800553a:	460b      	mov	r3, r1
 800553c:	4313      	orrs	r3, r2
 800553e:	d019      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005540:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005544:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005548:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800554c:	d105      	bne.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800554e:	4b88      	ldr	r3, [pc, #544]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005552:	4a87      	ldr	r2, [pc, #540]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005558:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800555a:	4b85      	ldr	r3, [pc, #532]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800555c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005560:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005564:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005568:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800556c:	4a80      	ldr	r2, [pc, #512]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800556e:	430b      	orrs	r3, r1
 8005570:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005574:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005580:	62bb      	str	r3, [r7, #40]	; 0x28
 8005582:	2300      	movs	r3, #0
 8005584:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005586:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800558a:	460b      	mov	r3, r1
 800558c:	4313      	orrs	r3, r2
 800558e:	d00c      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005590:	4b77      	ldr	r3, [pc, #476]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005596:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800559a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800559e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80055a2:	4973      	ldr	r1, [pc, #460]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80055a4:	4313      	orrs	r3, r2
 80055a6:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80055aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80055ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b2:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80055b6:	623b      	str	r3, [r7, #32]
 80055b8:	2300      	movs	r3, #0
 80055ba:	627b      	str	r3, [r7, #36]	; 0x24
 80055bc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80055c0:	460b      	mov	r3, r1
 80055c2:	4313      	orrs	r3, r2
 80055c4:	d00c      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80055c6:	4b6a      	ldr	r3, [pc, #424]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80055c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80055d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80055d8:	4965      	ldr	r1, [pc, #404]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80055e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80055e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80055ec:	61bb      	str	r3, [r7, #24]
 80055ee:	2300      	movs	r3, #0
 80055f0:	61fb      	str	r3, [r7, #28]
 80055f2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80055f6:	460b      	mov	r3, r1
 80055f8:	4313      	orrs	r3, r2
 80055fa:	d00c      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80055fc:	4b5c      	ldr	r3, [pc, #368]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80055fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005602:	f023 0218 	bic.w	r2, r3, #24
 8005606:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800560a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800560e:	4958      	ldr	r1, [pc, #352]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005610:	4313      	orrs	r3, r2
 8005612:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005616:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800561a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561e:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8005622:	613b      	str	r3, [r7, #16]
 8005624:	2300      	movs	r3, #0
 8005626:	617b      	str	r3, [r7, #20]
 8005628:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800562c:	460b      	mov	r3, r1
 800562e:	4313      	orrs	r3, r2
 8005630:	d032      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8005632:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005636:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800563a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800563e:	d105      	bne.n	800564c <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005640:	4b4b      	ldr	r3, [pc, #300]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005644:	4a4a      	ldr	r2, [pc, #296]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005646:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800564a:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800564c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005650:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005654:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005658:	d108      	bne.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800565a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800565e:	3308      	adds	r3, #8
 8005660:	4618      	mov	r0, r3
 8005662:	f001 fe4b 	bl	80072fc <RCCEx_PLL2_Config>
 8005666:	4603      	mov	r3, r0
 8005668:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
    }
    if (ret == HAL_OK)
 800566c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005670:	2b00      	cmp	r3, #0
 8005672:	d10d      	bne.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005674:	4b3e      	ldr	r3, [pc, #248]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005676:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800567a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800567e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005682:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005686:	493a      	ldr	r1, [pc, #232]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005688:	4313      	orrs	r3, r2
 800568a:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800568e:	e003      	b.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005690:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005694:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8005698:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800569c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a0:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80056a4:	60bb      	str	r3, [r7, #8]
 80056a6:	2300      	movs	r3, #0
 80056a8:	60fb      	str	r3, [r7, #12]
 80056aa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80056ae:	460b      	mov	r3, r1
 80056b0:	4313      	orrs	r3, r2
 80056b2:	d03a      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80056b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80056b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056c0:	d00e      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80056c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056c6:	d815      	bhi.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d017      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0xad0>
 80056cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056d0:	d110      	bne.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056d2:	4b27      	ldr	r3, [pc, #156]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80056d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d6:	4a26      	ldr	r2, [pc, #152]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80056d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056dc:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80056de:	e00e      	b.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80056e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80056e4:	3308      	adds	r3, #8
 80056e6:	4618      	mov	r0, r3
 80056e8:	f001 fe08 	bl	80072fc <RCCEx_PLL2_Config>
 80056ec:	4603      	mov	r3, r0
 80056ee:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80056f2:	e004      	b.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 80056fa:	e000      	b.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 80056fc:	bf00      	nop
    }
    if (ret == HAL_OK)
 80056fe:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10d      	bne.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8005706:	4b1a      	ldr	r3, [pc, #104]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800570c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005710:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005714:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005718:	4915      	ldr	r1, [pc, #84]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800571a:	4313      	orrs	r3, r2
 800571c:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8005720:	e003      	b.n	800572a <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005722:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005726:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800572a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800572e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005732:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005736:	603b      	str	r3, [r7, #0]
 8005738:	2300      	movs	r3, #0
 800573a:	607b      	str	r3, [r7, #4]
 800573c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005740:	460b      	mov	r3, r1
 8005742:	4313      	orrs	r3, r2
 8005744:	d00c      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8005746:	4b0a      	ldr	r3, [pc, #40]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005748:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800574c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005750:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005754:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005758:	4905      	ldr	r1, [pc, #20]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800575a:	4313      	orrs	r3, r2
 800575c:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8005760:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
}
 8005764:	4618      	mov	r0, r3
 8005766:	37e0      	adds	r7, #224	; 0xe0
 8005768:	46bd      	mov	sp, r7
 800576a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800576e:	bf00      	nop
 8005770:	46020c00 	.word	0x46020c00

08005774 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005774:	b480      	push	{r7}
 8005776:	b089      	sub	sp, #36	; 0x24
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800577c:	4ba6      	ldr	r3, [pc, #664]	; (8005a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800577e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005784:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005786:	4ba4      	ldr	r3, [pc, #656]	; (8005a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800578a:	f003 0303 	and.w	r3, r3, #3
 800578e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005790:	4ba1      	ldr	r3, [pc, #644]	; (8005a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005794:	0a1b      	lsrs	r3, r3, #8
 8005796:	f003 030f 	and.w	r3, r3, #15
 800579a:	3301      	adds	r3, #1
 800579c:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800579e:	4b9e      	ldr	r3, [pc, #632]	; (8005a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80057a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a2:	091b      	lsrs	r3, r3, #4
 80057a4:	f003 0301 	and.w	r3, r3, #1
 80057a8:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80057aa:	4b9b      	ldr	r3, [pc, #620]	; (8005a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80057ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ae:	08db      	lsrs	r3, r3, #3
 80057b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	fb02 f303 	mul.w	r3, r2, r3
 80057ba:	ee07 3a90 	vmov	s15, r3
 80057be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057c2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	2b03      	cmp	r3, #3
 80057ca:	d062      	beq.n	8005892 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	2b03      	cmp	r3, #3
 80057d0:	f200 8081 	bhi.w	80058d6 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d024      	beq.n	8005824 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d17a      	bne.n	80058d6 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	ee07 3a90 	vmov	s15, r3
 80057e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ea:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8005a1c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80057ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057f2:	4b89      	ldr	r3, [pc, #548]	; (8005a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80057f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057fa:	ee07 3a90 	vmov	s15, r3
 80057fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005802:	ed97 6a02 	vldr	s12, [r7, #8]
 8005806:	eddf 5a86 	vldr	s11, [pc, #536]	; 8005a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800580a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800580e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005812:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005816:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800581a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800581e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005822:	e08f      	b.n	8005944 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005824:	4b7c      	ldr	r3, [pc, #496]	; (8005a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d005      	beq.n	800583c <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8005830:	4b79      	ldr	r3, [pc, #484]	; (8005a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	0f1b      	lsrs	r3, r3, #28
 8005836:	f003 030f 	and.w	r3, r3, #15
 800583a:	e006      	b.n	800584a <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800583c:	4b76      	ldr	r3, [pc, #472]	; (8005a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800583e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005842:	041b      	lsls	r3, r3, #16
 8005844:	0f1b      	lsrs	r3, r3, #28
 8005846:	f003 030f 	and.w	r3, r3, #15
 800584a:	4a76      	ldr	r2, [pc, #472]	; (8005a24 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800584c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005850:	ee07 3a90 	vmov	s15, r3
 8005854:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	ee07 3a90 	vmov	s15, r3
 800585e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	ee07 3a90 	vmov	s15, r3
 800586c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005870:	ed97 6a02 	vldr	s12, [r7, #8]
 8005874:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8005a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005878:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800587c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005880:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005884:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005888:	ee67 7a27 	vmul.f32	s15, s14, s15
 800588c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005890:	e058      	b.n	8005944 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	ee07 3a90 	vmov	s15, r3
 8005898:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800589c:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005a1c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80058a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058a4:	4b5c      	ldr	r3, [pc, #368]	; (8005a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80058a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ac:	ee07 3a90 	vmov	s15, r3
 80058b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80058b4:	ed97 6a02 	vldr	s12, [r7, #8]
 80058b8:	eddf 5a59 	vldr	s11, [pc, #356]	; 8005a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80058bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80058c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80058c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80058cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058d4:	e036      	b.n	8005944 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80058d6:	4b50      	ldr	r3, [pc, #320]	; (8005a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d005      	beq.n	80058ee <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 80058e2:	4b4d      	ldr	r3, [pc, #308]	; (8005a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	0f1b      	lsrs	r3, r3, #28
 80058e8:	f003 030f 	and.w	r3, r3, #15
 80058ec:	e006      	b.n	80058fc <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 80058ee:	4b4a      	ldr	r3, [pc, #296]	; (8005a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80058f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80058f4:	041b      	lsls	r3, r3, #16
 80058f6:	0f1b      	lsrs	r3, r3, #28
 80058f8:	f003 030f 	and.w	r3, r3, #15
 80058fc:	4a49      	ldr	r2, [pc, #292]	; (8005a24 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80058fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005902:	ee07 3a90 	vmov	s15, r3
 8005906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	ee07 3a90 	vmov	s15, r3
 8005910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005914:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	ee07 3a90 	vmov	s15, r3
 800591e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005922:	ed97 6a02 	vldr	s12, [r7, #8]
 8005926:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800592a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800592e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005932:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005936:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800593a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800593e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005942:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005944:	4b34      	ldr	r3, [pc, #208]	; (8005a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005948:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d017      	beq.n	8005980 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005950:	4b31      	ldr	r3, [pc, #196]	; (8005a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005954:	0a5b      	lsrs	r3, r3, #9
 8005956:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800595a:	ee07 3a90 	vmov	s15, r3
 800595e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8005962:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005966:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800596a:	edd7 6a07 	vldr	s13, [r7, #28]
 800596e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005972:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005976:	ee17 2a90 	vmov	r2, s15
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	601a      	str	r2, [r3, #0]
 800597e:	e002      	b.n	8005986 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005986:	4b24      	ldr	r3, [pc, #144]	; (8005a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d017      	beq.n	80059c2 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005992:	4b21      	ldr	r3, [pc, #132]	; (8005a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005996:	0c1b      	lsrs	r3, r3, #16
 8005998:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800599c:	ee07 3a90 	vmov	s15, r3
 80059a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80059a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059a8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80059ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80059b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059b8:	ee17 2a90 	vmov	r2, s15
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	605a      	str	r2, [r3, #4]
 80059c0:	e002      	b.n	80059c8 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80059c8:	4b13      	ldr	r3, [pc, #76]	; (8005a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80059ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d017      	beq.n	8005a04 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80059d4:	4b10      	ldr	r3, [pc, #64]	; (8005a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80059d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d8:	0e1b      	lsrs	r3, r3, #24
 80059da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059de:	ee07 3a90 	vmov	s15, r3
 80059e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80059e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059ea:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80059ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80059f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059fa:	ee17 2a90 	vmov	r2, s15
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005a02:	e002      	b.n	8005a0a <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	609a      	str	r2, [r3, #8]
}
 8005a0a:	bf00      	nop
 8005a0c:	3724      	adds	r7, #36	; 0x24
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr
 8005a16:	bf00      	nop
 8005a18:	46020c00 	.word	0x46020c00
 8005a1c:	4b742400 	.word	0x4b742400
 8005a20:	46000000 	.word	0x46000000
 8005a24:	0800add0 	.word	0x0800add0

08005a28 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b089      	sub	sp, #36	; 0x24
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005a30:	4ba6      	ldr	r3, [pc, #664]	; (8005ccc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a38:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005a3a:	4ba4      	ldr	r3, [pc, #656]	; (8005ccc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3e:	f003 0303 	and.w	r3, r3, #3
 8005a42:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8005a44:	4ba1      	ldr	r3, [pc, #644]	; (8005ccc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a48:	0a1b      	lsrs	r3, r3, #8
 8005a4a:	f003 030f 	and.w	r3, r3, #15
 8005a4e:	3301      	adds	r3, #1
 8005a50:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8005a52:	4b9e      	ldr	r3, [pc, #632]	; (8005ccc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a56:	091b      	lsrs	r3, r3, #4
 8005a58:	f003 0301 	and.w	r3, r3, #1
 8005a5c:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005a5e:	4b9b      	ldr	r3, [pc, #620]	; (8005ccc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a62:	08db      	lsrs	r3, r3, #3
 8005a64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	fb02 f303 	mul.w	r3, r2, r3
 8005a6e:	ee07 3a90 	vmov	s15, r3
 8005a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a76:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	2b03      	cmp	r3, #3
 8005a7e:	d062      	beq.n	8005b46 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	2b03      	cmp	r3, #3
 8005a84:	f200 8081 	bhi.w	8005b8a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d024      	beq.n	8005ad8 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d17a      	bne.n	8005b8a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	ee07 3a90 	vmov	s15, r3
 8005a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a9e:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8005cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005aa6:	4b89      	ldr	r3, [pc, #548]	; (8005ccc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aae:	ee07 3a90 	vmov	s15, r3
 8005ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ab6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005aba:	eddf 5a86 	vldr	s11, [pc, #536]	; 8005cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ac6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ad2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ad6:	e08f      	b.n	8005bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005ad8:	4b7c      	ldr	r3, [pc, #496]	; (8005ccc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d005      	beq.n	8005af0 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8005ae4:	4b79      	ldr	r3, [pc, #484]	; (8005ccc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	0f1b      	lsrs	r3, r3, #28
 8005aea:	f003 030f 	and.w	r3, r3, #15
 8005aee:	e006      	b.n	8005afe <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8005af0:	4b76      	ldr	r3, [pc, #472]	; (8005ccc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005af2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005af6:	041b      	lsls	r3, r3, #16
 8005af8:	0f1b      	lsrs	r3, r3, #28
 8005afa:	f003 030f 	and.w	r3, r3, #15
 8005afe:	4a76      	ldr	r2, [pc, #472]	; (8005cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b04:	ee07 3a90 	vmov	s15, r3
 8005b08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	ee07 3a90 	vmov	s15, r3
 8005b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	ee07 3a90 	vmov	s15, r3
 8005b20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b24:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b28:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8005cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005b2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b38:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005b3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b40:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b44:	e058      	b.n	8005bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	ee07 3a90 	vmov	s15, r3
 8005b4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b50:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005b54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b58:	4b5c      	ldr	r3, [pc, #368]	; (8005ccc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b60:	ee07 3a90 	vmov	s15, r3
 8005b64:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b68:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b6c:	eddf 5a59 	vldr	s11, [pc, #356]	; 8005cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005b70:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005b74:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005b80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b84:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b88:	e036      	b.n	8005bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005b8a:	4b50      	ldr	r3, [pc, #320]	; (8005ccc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d005      	beq.n	8005ba2 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8005b96:	4b4d      	ldr	r3, [pc, #308]	; (8005ccc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	0f1b      	lsrs	r3, r3, #28
 8005b9c:	f003 030f 	and.w	r3, r3, #15
 8005ba0:	e006      	b.n	8005bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8005ba2:	4b4a      	ldr	r3, [pc, #296]	; (8005ccc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005ba4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ba8:	041b      	lsls	r3, r3, #16
 8005baa:	0f1b      	lsrs	r3, r3, #28
 8005bac:	f003 030f 	and.w	r3, r3, #15
 8005bb0:	4a49      	ldr	r2, [pc, #292]	; (8005cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bb6:	ee07 3a90 	vmov	s15, r3
 8005bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	ee07 3a90 	vmov	s15, r3
 8005bc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	ee07 3a90 	vmov	s15, r3
 8005bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bda:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005be6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bf2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005bf6:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005bf8:	4b34      	ldr	r3, [pc, #208]	; (8005ccc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d017      	beq.n	8005c34 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005c04:	4b31      	ldr	r3, [pc, #196]	; (8005ccc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c08:	0a5b      	lsrs	r3, r3, #9
 8005c0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c0e:	ee07 3a90 	vmov	s15, r3
 8005c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8005c16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c1a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005c1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c2a:	ee17 2a90 	vmov	r2, s15
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	601a      	str	r2, [r3, #0]
 8005c32:	e002      	b.n	8005c3a <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005c3a:	4b24      	ldr	r3, [pc, #144]	; (8005ccc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d017      	beq.n	8005c76 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005c46:	4b21      	ldr	r3, [pc, #132]	; (8005ccc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c4a:	0c1b      	lsrs	r3, r3, #16
 8005c4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c50:	ee07 3a90 	vmov	s15, r3
 8005c54:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005c58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c5c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005c60:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c6c:	ee17 2a90 	vmov	r2, s15
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	605a      	str	r2, [r3, #4]
 8005c74:	e002      	b.n	8005c7c <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005c7c:	4b13      	ldr	r3, [pc, #76]	; (8005ccc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d017      	beq.n	8005cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005c88:	4b10      	ldr	r3, [pc, #64]	; (8005ccc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c8c:	0e1b      	lsrs	r3, r3, #24
 8005c8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c92:	ee07 3a90 	vmov	s15, r3
 8005c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8005c9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c9e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005ca2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ca6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005caa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cae:	ee17 2a90 	vmov	r2, s15
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005cb6:	e002      	b.n	8005cbe <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	609a      	str	r2, [r3, #8]
}
 8005cbe:	bf00      	nop
 8005cc0:	3724      	adds	r7, #36	; 0x24
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	46020c00 	.word	0x46020c00
 8005cd0:	4b742400 	.word	0x4b742400
 8005cd4:	46000000 	.word	0x46000000
 8005cd8:	0800add0 	.word	0x0800add0

08005cdc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b089      	sub	sp, #36	; 0x24
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005ce4:	4ba6      	ldr	r3, [pc, #664]	; (8005f80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cec:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005cee:	4ba4      	ldr	r3, [pc, #656]	; (8005f80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf2:	f003 0303 	and.w	r3, r3, #3
 8005cf6:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8005cf8:	4ba1      	ldr	r3, [pc, #644]	; (8005f80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cfc:	0a1b      	lsrs	r3, r3, #8
 8005cfe:	f003 030f 	and.w	r3, r3, #15
 8005d02:	3301      	adds	r3, #1
 8005d04:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8005d06:	4b9e      	ldr	r3, [pc, #632]	; (8005f80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0a:	091b      	lsrs	r3, r3, #4
 8005d0c:	f003 0301 	and.w	r3, r3, #1
 8005d10:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005d12:	4b9b      	ldr	r3, [pc, #620]	; (8005f80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d16:	08db      	lsrs	r3, r3, #3
 8005d18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	fb02 f303 	mul.w	r3, r2, r3
 8005d22:	ee07 3a90 	vmov	s15, r3
 8005d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d2a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	2b03      	cmp	r3, #3
 8005d32:	d062      	beq.n	8005dfa <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	2b03      	cmp	r3, #3
 8005d38:	f200 8081 	bhi.w	8005e3e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d024      	beq.n	8005d8c <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d17a      	bne.n	8005e3e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	ee07 3a90 	vmov	s15, r3
 8005d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d52:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8005f84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d5a:	4b89      	ldr	r3, [pc, #548]	; (8005f80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d62:	ee07 3a90 	vmov	s15, r3
 8005d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d6e:	eddf 5a86 	vldr	s11, [pc, #536]	; 8005f88 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d86:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8005d8a:	e08f      	b.n	8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005d8c:	4b7c      	ldr	r3, [pc, #496]	; (8005f80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d005      	beq.n	8005da4 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8005d98:	4b79      	ldr	r3, [pc, #484]	; (8005f80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	0f1b      	lsrs	r3, r3, #28
 8005d9e:	f003 030f 	and.w	r3, r3, #15
 8005da2:	e006      	b.n	8005db2 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8005da4:	4b76      	ldr	r3, [pc, #472]	; (8005f80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005da6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005daa:	041b      	lsls	r3, r3, #16
 8005dac:	0f1b      	lsrs	r3, r3, #28
 8005dae:	f003 030f 	and.w	r3, r3, #15
 8005db2:	4a76      	ldr	r2, [pc, #472]	; (8005f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005db8:	ee07 3a90 	vmov	s15, r3
 8005dbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	ee07 3a90 	vmov	s15, r3
 8005dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	ee07 3a90 	vmov	s15, r3
 8005dd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dd8:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ddc:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8005f88 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005de0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005de4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005de8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dec:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005df0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005df4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005df8:	e058      	b.n	8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	ee07 3a90 	vmov	s15, r3
 8005e00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e04:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005f84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005e08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e0c:	4b5c      	ldr	r3, [pc, #368]	; (8005f80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e14:	ee07 3a90 	vmov	s15, r3
 8005e18:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e1c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e20:	eddf 5a59 	vldr	s11, [pc, #356]	; 8005f88 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005e24:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005e28:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e30:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005e34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e38:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e3c:	e036      	b.n	8005eac <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005e3e:	4b50      	ldr	r3, [pc, #320]	; (8005f80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d005      	beq.n	8005e56 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8005e4a:	4b4d      	ldr	r3, [pc, #308]	; (8005f80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	0f1b      	lsrs	r3, r3, #28
 8005e50:	f003 030f 	and.w	r3, r3, #15
 8005e54:	e006      	b.n	8005e64 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8005e56:	4b4a      	ldr	r3, [pc, #296]	; (8005f80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005e5c:	041b      	lsls	r3, r3, #16
 8005e5e:	0f1b      	lsrs	r3, r3, #28
 8005e60:	f003 030f 	and.w	r3, r3, #15
 8005e64:	4a49      	ldr	r2, [pc, #292]	; (8005f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e6a:	ee07 3a90 	vmov	s15, r3
 8005e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	ee07 3a90 	vmov	s15, r3
 8005e78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	ee07 3a90 	vmov	s15, r3
 8005e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e8e:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005f88 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ea6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005eaa:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005eac:	4b34      	ldr	r3, [pc, #208]	; (8005f80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d017      	beq.n	8005ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005eb8:	4b31      	ldr	r3, [pc, #196]	; (8005f80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ebc:	0a5b      	lsrs	r3, r3, #9
 8005ebe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ec2:	ee07 3a90 	vmov	s15, r3
 8005ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8005eca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ece:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005ed2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ed6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005eda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ede:	ee17 2a90 	vmov	r2, s15
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	601a      	str	r2, [r3, #0]
 8005ee6:	e002      	b.n	8005eee <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005eee:	4b24      	ldr	r3, [pc, #144]	; (8005f80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d017      	beq.n	8005f2a <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005efa:	4b21      	ldr	r3, [pc, #132]	; (8005f80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005efe:	0c1b      	lsrs	r3, r3, #16
 8005f00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f04:	ee07 3a90 	vmov	s15, r3
 8005f08:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005f0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f10:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005f14:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f20:	ee17 2a90 	vmov	r2, s15
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	605a      	str	r2, [r3, #4]
 8005f28:	e002      	b.n	8005f30 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005f30:	4b13      	ldr	r3, [pc, #76]	; (8005f80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d017      	beq.n	8005f6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005f3c:	4b10      	ldr	r3, [pc, #64]	; (8005f80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f40:	0e1b      	lsrs	r3, r3, #24
 8005f42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f46:	ee07 3a90 	vmov	s15, r3
 8005f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8005f4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f52:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005f56:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f62:	ee17 2a90 	vmov	r2, s15
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005f6a:	e002      	b.n	8005f72 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	609a      	str	r2, [r3, #8]
}
 8005f72:	bf00      	nop
 8005f74:	3724      	adds	r7, #36	; 0x24
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	46020c00 	.word	0x46020c00
 8005f84:	4b742400 	.word	0x4b742400
 8005f88:	46000000 	.word	0x46000000
 8005f8c:	0800add0 	.word	0x0800add0

08005f90 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b08e      	sub	sp, #56	; 0x38
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005f9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f9e:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8005fa2:	430b      	orrs	r3, r1
 8005fa4:	d145      	bne.n	8006032 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005fa6:	4baa      	ldr	r3, [pc, #680]	; (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005fa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005fac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fb0:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005fb2:	4ba7      	ldr	r3, [pc, #668]	; (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005fb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005fb8:	f003 0302 	and.w	r3, r3, #2
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d108      	bne.n	8005fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fc6:	d104      	bne.n	8005fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005fc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fcc:	637b      	str	r3, [r7, #52]	; 0x34
 8005fce:	f001 b987 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005fd2:	4b9f      	ldr	r3, [pc, #636]	; (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005fd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005fd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fe0:	d114      	bne.n	800600c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8005fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fe8:	d110      	bne.n	800600c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005fea:	4b99      	ldr	r3, [pc, #612]	; (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005fec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ff4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ff8:	d103      	bne.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8005ffa:	23fa      	movs	r3, #250	; 0xfa
 8005ffc:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005ffe:	f001 b96f 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006002:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006006:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006008:	f001 b96a 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800600c:	4b90      	ldr	r3, [pc, #576]	; (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006014:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006018:	d107      	bne.n	800602a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800601a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006020:	d103      	bne.n	800602a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8006022:	4b8c      	ldr	r3, [pc, #560]	; (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8006024:	637b      	str	r3, [r7, #52]	; 0x34
 8006026:	f001 b95b 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800602a:	2300      	movs	r3, #0
 800602c:	637b      	str	r3, [r7, #52]	; 0x34
 800602e:	f001 b957 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006032:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006036:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800603a:	430b      	orrs	r3, r1
 800603c:	d151      	bne.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800603e:	4b84      	ldr	r3, [pc, #528]	; (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006040:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006044:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006048:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800604a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604c:	2b80      	cmp	r3, #128	; 0x80
 800604e:	d035      	beq.n	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8006050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006052:	2b80      	cmp	r3, #128	; 0x80
 8006054:	d841      	bhi.n	80060da <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006058:	2b60      	cmp	r3, #96	; 0x60
 800605a:	d02a      	beq.n	80060b2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800605c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605e:	2b60      	cmp	r3, #96	; 0x60
 8006060:	d83b      	bhi.n	80060da <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006064:	2b40      	cmp	r3, #64	; 0x40
 8006066:	d009      	beq.n	800607c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606a:	2b40      	cmp	r3, #64	; 0x40
 800606c:	d835      	bhi.n	80060da <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800606e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006070:	2b00      	cmp	r3, #0
 8006072:	d00c      	beq.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8006074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006076:	2b20      	cmp	r3, #32
 8006078:	d012      	beq.n	80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800607a:	e02e      	b.n	80060da <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800607c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006080:	4618      	mov	r0, r3
 8006082:	f7ff fb77 	bl	8005774 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800608a:	f001 b929 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800608e:	f107 0318 	add.w	r3, r7, #24
 8006092:	4618      	mov	r0, r3
 8006094:	f7ff fcc8 	bl	8005a28 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800609c:	f001 b920 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060a0:	f107 030c 	add.w	r3, r7, #12
 80060a4:	4618      	mov	r0, r3
 80060a6:	f7ff fe19 	bl	8005cdc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060ae:	f001 b917 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80060b2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80060b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060b8:	f001 b912 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80060bc:	4b64      	ldr	r3, [pc, #400]	; (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060c8:	d103      	bne.n	80060d2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 80060ca:	4b63      	ldr	r3, [pc, #396]	; (8006258 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80060cc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80060ce:	f001 b907 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80060d2:	2300      	movs	r3, #0
 80060d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060d6:	f001 b903 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 80060da:	2300      	movs	r3, #0
 80060dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060de:	f001 b8ff 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80060e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060e6:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80060ea:	430b      	orrs	r3, r1
 80060ec:	d158      	bne.n	80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80060ee:	4b58      	ldr	r3, [pc, #352]	; (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80060f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80060f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80060f8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80060fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006100:	d03b      	beq.n	800617a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8006102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006104:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006108:	d846      	bhi.n	8006198 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800610a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006110:	d02e      	beq.n	8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8006112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006114:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006118:	d83e      	bhi.n	8006198 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800611a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006120:	d00b      	beq.n	800613a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8006122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006124:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006128:	d836      	bhi.n	8006198 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800612a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00d      	beq.n	800614c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8006130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006136:	d012      	beq.n	800615e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8006138:	e02e      	b.n	8006198 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800613a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800613e:	4618      	mov	r0, r3
 8006140:	f7ff fb18 	bl	8005774 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006146:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006148:	f001 b8ca 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800614c:	f107 0318 	add.w	r3, r7, #24
 8006150:	4618      	mov	r0, r3
 8006152:	f7ff fc69 	bl	8005a28 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800615a:	f001 b8c1 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800615e:	f107 030c 	add.w	r3, r7, #12
 8006162:	4618      	mov	r0, r3
 8006164:	f7ff fdba 	bl	8005cdc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800616c:	f001 b8b8 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006170:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006174:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006176:	f001 b8b3 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800617a:	4b35      	ldr	r3, [pc, #212]	; (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006186:	d103      	bne.n	8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8006188:	4b33      	ldr	r3, [pc, #204]	; (8006258 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800618a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800618c:	f001 b8a8 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006190:	2300      	movs	r3, #0
 8006192:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006194:	f001 b8a4 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8006198:	2300      	movs	r3, #0
 800619a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800619c:	f001 b8a0 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80061a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061a4:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 80061a8:	430b      	orrs	r3, r1
 80061aa:	d16e      	bne.n	800628a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80061ac:	4b28      	ldr	r3, [pc, #160]	; (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80061ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061b2:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80061b6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80061b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ba:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80061be:	d034      	beq.n	800622a <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 80061c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80061c6:	d85c      	bhi.n	8006282 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 80061c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061ce:	d00b      	beq.n	80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 80061d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061d6:	d854      	bhi.n	8006282 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 80061d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d016      	beq.n	800620c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 80061de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80061e4:	d009      	beq.n	80061fa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80061e6:	e04c      	b.n	8006282 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80061e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7ff fac1 	bl	8005774 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80061f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061f6:	f001 b873 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061fa:	f107 0318 	add.w	r3, r7, #24
 80061fe:	4618      	mov	r0, r3
 8006200:	f7ff fc12 	bl	8005a28 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006208:	f001 b86a 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800620c:	4b10      	ldr	r3, [pc, #64]	; (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006214:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006218:	d103      	bne.n	8006222 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 800621a:	4b10      	ldr	r3, [pc, #64]	; (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800621c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800621e:	f001 b85f 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006222:	2300      	movs	r3, #0
 8006224:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006226:	f001 b85b 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800622a:	4b09      	ldr	r3, [pc, #36]	; (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 0320 	and.w	r3, r3, #32
 8006232:	2b20      	cmp	r3, #32
 8006234:	d121      	bne.n	800627a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006236:	4b06      	ldr	r3, [pc, #24]	; (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00e      	beq.n	8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8006242:	4b03      	ldr	r3, [pc, #12]	; (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	0e1b      	lsrs	r3, r3, #24
 8006248:	f003 030f 	and.w	r3, r3, #15
 800624c:	e00f      	b.n	800626e <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800624e:	bf00      	nop
 8006250:	46020c00 	.word	0x46020c00
 8006254:	0007a120 	.word	0x0007a120
 8006258:	00f42400 	.word	0x00f42400
 800625c:	02dc6c00 	.word	0x02dc6c00
 8006260:	4ba7      	ldr	r3, [pc, #668]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006262:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006266:	041b      	lsls	r3, r3, #16
 8006268:	0e1b      	lsrs	r3, r3, #24
 800626a:	f003 030f 	and.w	r3, r3, #15
 800626e:	4aa5      	ldr	r2, [pc, #660]	; (8006504 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8006270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006274:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006276:	f001 b833 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800627a:	2300      	movs	r3, #0
 800627c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800627e:	f001 b82f 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8006282:	2300      	movs	r3, #0
 8006284:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006286:	f001 b82b 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800628a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800628e:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8006292:	430b      	orrs	r3, r1
 8006294:	d17f      	bne.n	8006396 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006296:	4b9a      	ldr	r3, [pc, #616]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006298:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800629c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062a0:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80062a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d165      	bne.n	8006374 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80062a8:	4b95      	ldr	r3, [pc, #596]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80062aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80062ae:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80062b2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 80062b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80062ba:	d034      	beq.n	8006326 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80062bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062be:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80062c2:	d853      	bhi.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80062c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062ca:	d00b      	beq.n	80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80062cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062d2:	d84b      	bhi.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80062d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d016      	beq.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 80062da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80062e0:	d009      	beq.n	80062f6 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80062e2:	e043      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80062e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062e8:	4618      	mov	r0, r3
 80062ea:	f7ff fa43 	bl	8005774 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80062ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80062f2:	f000 bff5 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062f6:	f107 0318 	add.w	r3, r7, #24
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7ff fb94 	bl	8005a28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006304:	f000 bfec 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006308:	4b7d      	ldr	r3, [pc, #500]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006310:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006314:	d103      	bne.n	800631e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 8006316:	4b7c      	ldr	r3, [pc, #496]	; (8006508 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8006318:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800631a:	f000 bfe1 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 800631e:	2300      	movs	r3, #0
 8006320:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006322:	f000 bfdd 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006326:	4b76      	ldr	r3, [pc, #472]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0320 	and.w	r3, r3, #32
 800632e:	2b20      	cmp	r3, #32
 8006330:	d118      	bne.n	8006364 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006332:	4b73      	ldr	r3, [pc, #460]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d005      	beq.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800633e:	4b70      	ldr	r3, [pc, #448]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	0e1b      	lsrs	r3, r3, #24
 8006344:	f003 030f 	and.w	r3, r3, #15
 8006348:	e006      	b.n	8006358 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 800634a:	4b6d      	ldr	r3, [pc, #436]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800634c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006350:	041b      	lsls	r3, r3, #16
 8006352:	0e1b      	lsrs	r3, r3, #24
 8006354:	f003 030f 	and.w	r3, r3, #15
 8006358:	4a6a      	ldr	r2, [pc, #424]	; (8006504 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800635a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800635e:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006360:	f000 bfbe 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8006364:	2300      	movs	r3, #0
 8006366:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006368:	f000 bfba 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 800636c:	2300      	movs	r3, #0
 800636e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006370:	f000 bfb6 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8006374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006376:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800637a:	d108      	bne.n	800638e <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800637c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006380:	4618      	mov	r0, r3
 8006382:	f7ff f9f7 	bl	8005774 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006388:	637b      	str	r3, [r7, #52]	; 0x34
 800638a:	f000 bfa9 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 800638e:	2300      	movs	r3, #0
 8006390:	637b      	str	r3, [r7, #52]	; 0x34
 8006392:	f000 bfa5 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8006396:	e9d7 2300 	ldrd	r2, r3, [r7]
 800639a:	1e51      	subs	r1, r2, #1
 800639c:	430b      	orrs	r3, r1
 800639e:	d136      	bne.n	800640e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80063a0:	4b57      	ldr	r3, [pc, #348]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80063a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80063a6:	f003 0303 	and.w	r3, r3, #3
 80063aa:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80063ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d104      	bne.n	80063bc <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80063b2:	f7fe fb55 	bl	8004a60 <HAL_RCC_GetPCLK2Freq>
 80063b6:	6378      	str	r0, [r7, #52]	; 0x34
 80063b8:	f000 bf92 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80063bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d104      	bne.n	80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80063c2:	f7fe fa1d 	bl	8004800 <HAL_RCC_GetSysClockFreq>
 80063c6:	6378      	str	r0, [r7, #52]	; 0x34
 80063c8:	f000 bf8a 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80063cc:	4b4c      	ldr	r3, [pc, #304]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063d8:	d106      	bne.n	80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 80063da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d103      	bne.n	80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 80063e0:	4b4a      	ldr	r3, [pc, #296]	; (800650c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80063e2:	637b      	str	r3, [r7, #52]	; 0x34
 80063e4:	f000 bf7c 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80063e8:	4b45      	ldr	r3, [pc, #276]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80063ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063ee:	f003 0302 	and.w	r3, r3, #2
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d107      	bne.n	8006406 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80063f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f8:	2b03      	cmp	r3, #3
 80063fa:	d104      	bne.n	8006406 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 80063fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006400:	637b      	str	r3, [r7, #52]	; 0x34
 8006402:	f000 bf6d 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8006406:	2300      	movs	r3, #0
 8006408:	637b      	str	r3, [r7, #52]	; 0x34
 800640a:	f000 bf69 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800640e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006412:	1e91      	subs	r1, r2, #2
 8006414:	430b      	orrs	r3, r1
 8006416:	d136      	bne.n	8006486 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006418:	4b39      	ldr	r3, [pc, #228]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800641a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800641e:	f003 030c 	and.w	r3, r3, #12
 8006422:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006426:	2b00      	cmp	r3, #0
 8006428:	d104      	bne.n	8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800642a:	f7fe fb05 	bl	8004a38 <HAL_RCC_GetPCLK1Freq>
 800642e:	6378      	str	r0, [r7, #52]	; 0x34
 8006430:	f000 bf56 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8006434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006436:	2b04      	cmp	r3, #4
 8006438:	d104      	bne.n	8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800643a:	f7fe f9e1 	bl	8004800 <HAL_RCC_GetSysClockFreq>
 800643e:	6378      	str	r0, [r7, #52]	; 0x34
 8006440:	f000 bf4e 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006444:	4b2e      	ldr	r3, [pc, #184]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800644c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006450:	d106      	bne.n	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8006452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006454:	2b08      	cmp	r3, #8
 8006456:	d103      	bne.n	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 8006458:	4b2c      	ldr	r3, [pc, #176]	; (800650c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800645a:	637b      	str	r3, [r7, #52]	; 0x34
 800645c:	f000 bf40 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006460:	4b27      	ldr	r3, [pc, #156]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006462:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006466:	f003 0302 	and.w	r3, r3, #2
 800646a:	2b02      	cmp	r3, #2
 800646c:	d107      	bne.n	800647e <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 800646e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006470:	2b0c      	cmp	r3, #12
 8006472:	d104      	bne.n	800647e <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 8006474:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006478:	637b      	str	r3, [r7, #52]	; 0x34
 800647a:	f000 bf31 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800647e:	2300      	movs	r3, #0
 8006480:	637b      	str	r3, [r7, #52]	; 0x34
 8006482:	f000 bf2d 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006486:	e9d7 2300 	ldrd	r2, r3, [r7]
 800648a:	1f11      	subs	r1, r2, #4
 800648c:	430b      	orrs	r3, r1
 800648e:	d13f      	bne.n	8006510 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006490:	4b1b      	ldr	r3, [pc, #108]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006496:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800649a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800649c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d104      	bne.n	80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80064a2:	f7fe fac9 	bl	8004a38 <HAL_RCC_GetPCLK1Freq>
 80064a6:	6378      	str	r0, [r7, #52]	; 0x34
 80064a8:	f000 bf1a 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80064ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ae:	2b10      	cmp	r3, #16
 80064b0:	d104      	bne.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80064b2:	f7fe f9a5 	bl	8004800 <HAL_RCC_GetSysClockFreq>
 80064b6:	6378      	str	r0, [r7, #52]	; 0x34
 80064b8:	f000 bf12 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80064bc:	4b10      	ldr	r3, [pc, #64]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064c8:	d106      	bne.n	80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 80064ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064cc:	2b20      	cmp	r3, #32
 80064ce:	d103      	bne.n	80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 80064d0:	4b0e      	ldr	r3, [pc, #56]	; (800650c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80064d2:	637b      	str	r3, [r7, #52]	; 0x34
 80064d4:	f000 bf04 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80064d8:	4b09      	ldr	r3, [pc, #36]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80064da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80064de:	f003 0302 	and.w	r3, r3, #2
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d107      	bne.n	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 80064e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e8:	2b30      	cmp	r3, #48	; 0x30
 80064ea:	d104      	bne.n	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 80064ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064f0:	637b      	str	r3, [r7, #52]	; 0x34
 80064f2:	f000 bef5 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80064f6:	2300      	movs	r3, #0
 80064f8:	637b      	str	r3, [r7, #52]	; 0x34
 80064fa:	f000 bef1 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80064fe:	bf00      	nop
 8006500:	46020c00 	.word	0x46020c00
 8006504:	0800add0 	.word	0x0800add0
 8006508:	02dc6c00 	.word	0x02dc6c00
 800650c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8006510:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006514:	f1a2 0108 	sub.w	r1, r2, #8
 8006518:	430b      	orrs	r3, r1
 800651a:	d136      	bne.n	800658a <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800651c:	4ba4      	ldr	r3, [pc, #656]	; (80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800651e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006522:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006526:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652a:	2b00      	cmp	r3, #0
 800652c:	d104      	bne.n	8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800652e:	f7fe fa83 	bl	8004a38 <HAL_RCC_GetPCLK1Freq>
 8006532:	6378      	str	r0, [r7, #52]	; 0x34
 8006534:	f000 bed4 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8006538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653a:	2b40      	cmp	r3, #64	; 0x40
 800653c:	d104      	bne.n	8006548 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800653e:	f7fe f95f 	bl	8004800 <HAL_RCC_GetSysClockFreq>
 8006542:	6378      	str	r0, [r7, #52]	; 0x34
 8006544:	f000 becc 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006548:	4b99      	ldr	r3, [pc, #612]	; (80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006550:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006554:	d106      	bne.n	8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8006556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006558:	2b80      	cmp	r3, #128	; 0x80
 800655a:	d103      	bne.n	8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 800655c:	4b95      	ldr	r3, [pc, #596]	; (80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800655e:	637b      	str	r3, [r7, #52]	; 0x34
 8006560:	f000 bebe 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006564:	4b92      	ldr	r3, [pc, #584]	; (80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006566:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b02      	cmp	r3, #2
 8006570:	d107      	bne.n	8006582 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 8006572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006574:	2bc0      	cmp	r3, #192	; 0xc0
 8006576:	d104      	bne.n	8006582 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 8006578:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800657c:	637b      	str	r3, [r7, #52]	; 0x34
 800657e:	f000 beaf 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8006582:	2300      	movs	r3, #0
 8006584:	637b      	str	r3, [r7, #52]	; 0x34
 8006586:	f000 beab 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800658a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800658e:	f1a2 0110 	sub.w	r1, r2, #16
 8006592:	430b      	orrs	r3, r1
 8006594:	d139      	bne.n	800660a <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006596:	4b86      	ldr	r3, [pc, #536]	; (80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800659c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065a0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80065a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d104      	bne.n	80065b2 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80065a8:	f7fe fa46 	bl	8004a38 <HAL_RCC_GetPCLK1Freq>
 80065ac:	6378      	str	r0, [r7, #52]	; 0x34
 80065ae:	f000 be97 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80065b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065b8:	d104      	bne.n	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80065ba:	f7fe f921 	bl	8004800 <HAL_RCC_GetSysClockFreq>
 80065be:	6378      	str	r0, [r7, #52]	; 0x34
 80065c0:	f000 be8e 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80065c4:	4b7a      	ldr	r3, [pc, #488]	; (80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065d0:	d107      	bne.n	80065e2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 80065d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065d8:	d103      	bne.n	80065e2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 80065da:	4b76      	ldr	r3, [pc, #472]	; (80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80065dc:	637b      	str	r3, [r7, #52]	; 0x34
 80065de:	f000 be7f 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80065e2:	4b73      	ldr	r3, [pc, #460]	; (80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80065e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80065e8:	f003 0302 	and.w	r3, r3, #2
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d108      	bne.n	8006602 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 80065f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065f6:	d104      	bne.n	8006602 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 80065f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065fc:	637b      	str	r3, [r7, #52]	; 0x34
 80065fe:	f000 be6f 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8006602:	2300      	movs	r3, #0
 8006604:	637b      	str	r3, [r7, #52]	; 0x34
 8006606:	f000 be6b 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800660a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800660e:	f1a2 0120 	sub.w	r1, r2, #32
 8006612:	430b      	orrs	r3, r1
 8006614:	d158      	bne.n	80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006616:	4b66      	ldr	r3, [pc, #408]	; (80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006618:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800661c:	f003 0307 	and.w	r3, r3, #7
 8006620:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006624:	2b00      	cmp	r3, #0
 8006626:	d104      	bne.n	8006632 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8006628:	f7fe fa2e 	bl	8004a88 <HAL_RCC_GetPCLK3Freq>
 800662c:	6378      	str	r0, [r7, #52]	; 0x34
 800662e:	f000 be57 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006634:	2b01      	cmp	r3, #1
 8006636:	d104      	bne.n	8006642 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006638:	f7fe f8e2 	bl	8004800 <HAL_RCC_GetSysClockFreq>
 800663c:	6378      	str	r0, [r7, #52]	; 0x34
 800663e:	f000 be4f 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006642:	4b5b      	ldr	r3, [pc, #364]	; (80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800664a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800664e:	d106      	bne.n	800665e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 8006650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006652:	2b02      	cmp	r3, #2
 8006654:	d103      	bne.n	800665e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 8006656:	4b57      	ldr	r3, [pc, #348]	; (80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006658:	637b      	str	r3, [r7, #52]	; 0x34
 800665a:	f000 be41 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800665e:	4b54      	ldr	r3, [pc, #336]	; (80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006660:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006664:	f003 0302 	and.w	r3, r3, #2
 8006668:	2b02      	cmp	r3, #2
 800666a:	d107      	bne.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 800666c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666e:	2b03      	cmp	r3, #3
 8006670:	d104      	bne.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 8006672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006676:	637b      	str	r3, [r7, #52]	; 0x34
 8006678:	f000 be32 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800667c:	4b4c      	ldr	r3, [pc, #304]	; (80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 0320 	and.w	r3, r3, #32
 8006684:	2b20      	cmp	r3, #32
 8006686:	d11b      	bne.n	80066c0 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8006688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668a:	2b04      	cmp	r3, #4
 800668c:	d118      	bne.n	80066c0 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800668e:	4b48      	ldr	r3, [pc, #288]	; (80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d005      	beq.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 800669a:	4b45      	ldr	r3, [pc, #276]	; (80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	0e1b      	lsrs	r3, r3, #24
 80066a0:	f003 030f 	and.w	r3, r3, #15
 80066a4:	e006      	b.n	80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80066a6:	4b42      	ldr	r3, [pc, #264]	; (80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80066a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80066ac:	041b      	lsls	r3, r3, #16
 80066ae:	0e1b      	lsrs	r3, r3, #24
 80066b0:	f003 030f 	and.w	r3, r3, #15
 80066b4:	4a40      	ldr	r2, [pc, #256]	; (80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 80066b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066ba:	637b      	str	r3, [r7, #52]	; 0x34
 80066bc:	f000 be10 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80066c0:	2300      	movs	r3, #0
 80066c2:	637b      	str	r3, [r7, #52]	; 0x34
 80066c4:	f000 be0c 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80066c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066cc:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80066d0:	430b      	orrs	r3, r1
 80066d2:	d173      	bne.n	80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80066d4:	4b36      	ldr	r3, [pc, #216]	; (80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80066d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80066da:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80066de:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80066e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066e6:	d104      	bne.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80066e8:	f7fe f88a 	bl	8004800 <HAL_RCC_GetSysClockFreq>
 80066ec:	6378      	str	r0, [r7, #52]	; 0x34
 80066ee:	f000 bdf7 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80066f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066f8:	d108      	bne.n	800670c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066fa:	f107 0318 	add.w	r3, r7, #24
 80066fe:	4618      	mov	r0, r3
 8006700:	f7ff f992 	bl	8005a28 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8006704:	6a3b      	ldr	r3, [r7, #32]
 8006706:	637b      	str	r3, [r7, #52]	; 0x34
 8006708:	f000 bdea 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800670c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670e:	2b00      	cmp	r3, #0
 8006710:	d104      	bne.n	800671c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8006712:	f7fe f977 	bl	8004a04 <HAL_RCC_GetHCLKFreq>
 8006716:	6378      	str	r0, [r7, #52]	; 0x34
 8006718:	f000 bde2 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800671c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006722:	d122      	bne.n	800676a <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006724:	4b22      	ldr	r3, [pc, #136]	; (80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0320 	and.w	r3, r3, #32
 800672c:	2b20      	cmp	r3, #32
 800672e:	d118      	bne.n	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006730:	4b1f      	ldr	r3, [pc, #124]	; (80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006738:	2b00      	cmp	r3, #0
 800673a:	d005      	beq.n	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 800673c:	4b1c      	ldr	r3, [pc, #112]	; (80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	0e1b      	lsrs	r3, r3, #24
 8006742:	f003 030f 	and.w	r3, r3, #15
 8006746:	e006      	b.n	8006756 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8006748:	4b19      	ldr	r3, [pc, #100]	; (80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800674a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800674e:	041b      	lsls	r3, r3, #16
 8006750:	0e1b      	lsrs	r3, r3, #24
 8006752:	f003 030f 	and.w	r3, r3, #15
 8006756:	4a18      	ldr	r2, [pc, #96]	; (80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8006758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800675c:	637b      	str	r3, [r7, #52]	; 0x34
 800675e:	f000 bdbf 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8006762:	2300      	movs	r3, #0
 8006764:	637b      	str	r3, [r7, #52]	; 0x34
 8006766:	f000 bdbb 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800676a:	4b11      	ldr	r3, [pc, #68]	; (80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006772:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006776:	d107      	bne.n	8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 8006778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800677e:	d103      	bne.n	8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 8006780:	4b0c      	ldr	r3, [pc, #48]	; (80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006782:	637b      	str	r3, [r7, #52]	; 0x34
 8006784:	f000 bdac 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006788:	4b09      	ldr	r3, [pc, #36]	; (80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006794:	d107      	bne.n	80067a6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006798:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800679c:	d103      	bne.n	80067a6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 800679e:	4b05      	ldr	r3, [pc, #20]	; (80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80067a0:	637b      	str	r3, [r7, #52]	; 0x34
 80067a2:	f000 bd9d 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 80067a6:	2300      	movs	r3, #0
 80067a8:	637b      	str	r3, [r7, #52]	; 0x34
 80067aa:	f000 bd99 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80067ae:	bf00      	nop
 80067b0:	46020c00 	.word	0x46020c00
 80067b4:	00f42400 	.word	0x00f42400
 80067b8:	0800add0 	.word	0x0800add0
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 80067bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067c0:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80067c4:	430b      	orrs	r3, r1
 80067c6:	d158      	bne.n	800687a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80067c8:	4bad      	ldr	r3, [pc, #692]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80067ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80067ce:	f003 0307 	and.w	r3, r3, #7
 80067d2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80067d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d6:	2b04      	cmp	r3, #4
 80067d8:	d84b      	bhi.n	8006872 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80067da:	a201      	add	r2, pc, #4	; (adr r2, 80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80067dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e0:	08006819 	.word	0x08006819
 80067e4:	080067f5 	.word	0x080067f5
 80067e8:	08006807 	.word	0x08006807
 80067ec:	08006823 	.word	0x08006823
 80067f0:	0800682d 	.word	0x0800682d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7fe ffbb 	bl	8005774 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80067fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006800:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006802:	f000 bd6d 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006806:	f107 030c 	add.w	r3, r7, #12
 800680a:	4618      	mov	r0, r3
 800680c:	f7ff fa66 	bl	8005cdc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006814:	f000 bd64 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006818:	f7fe f8f4 	bl	8004a04 <HAL_RCC_GetHCLKFreq>
 800681c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800681e:	f000 bd5f 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006822:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006826:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006828:	f000 bd5a 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800682c:	4b94      	ldr	r3, [pc, #592]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 0320 	and.w	r3, r3, #32
 8006834:	2b20      	cmp	r3, #32
 8006836:	d118      	bne.n	800686a <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006838:	4b91      	ldr	r3, [pc, #580]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006840:	2b00      	cmp	r3, #0
 8006842:	d005      	beq.n	8006850 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 8006844:	4b8e      	ldr	r3, [pc, #568]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	0e1b      	lsrs	r3, r3, #24
 800684a:	f003 030f 	and.w	r3, r3, #15
 800684e:	e006      	b.n	800685e <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 8006850:	4b8b      	ldr	r3, [pc, #556]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006852:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006856:	041b      	lsls	r3, r3, #16
 8006858:	0e1b      	lsrs	r3, r3, #24
 800685a:	f003 030f 	and.w	r3, r3, #15
 800685e:	4a89      	ldr	r2, [pc, #548]	; (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8006860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006864:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006866:	f000 bd3b 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800686a:	2300      	movs	r3, #0
 800686c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800686e:	f000 bd37 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006872:	2300      	movs	r3, #0
 8006874:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006876:	f000 bd33 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800687a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800687e:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8006882:	430b      	orrs	r3, r1
 8006884:	d167      	bne.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8006886:	4b7e      	ldr	r3, [pc, #504]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006888:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800688c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006890:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006894:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006898:	d036      	beq.n	8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 800689a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80068a0:	d855      	bhi.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 80068a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80068a8:	d029      	beq.n	80068fe <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 80068aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80068b0:	d84d      	bhi.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 80068b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068b8:	d013      	beq.n	80068e2 <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 80068ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068c0:	d845      	bhi.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 80068c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d015      	beq.n	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 80068c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068ce:	d13e      	bne.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80068d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068d4:	4618      	mov	r0, r3
 80068d6:	f7fe ff4d 	bl	8005774 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80068da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068de:	f000 bcff 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068e2:	f107 030c 	add.w	r3, r7, #12
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7ff f9f8 	bl	8005cdc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068f0:	f000 bcf6 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80068f4:	f7fe f886 	bl	8004a04 <HAL_RCC_GetHCLKFreq>
 80068f8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80068fa:	f000 bcf1 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80068fe:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006902:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006904:	f000 bcec 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006908:	4b5d      	ldr	r3, [pc, #372]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 0320 	and.w	r3, r3, #32
 8006910:	2b20      	cmp	r3, #32
 8006912:	d118      	bne.n	8006946 <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006914:	4b5a      	ldr	r3, [pc, #360]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800691c:	2b00      	cmp	r3, #0
 800691e:	d005      	beq.n	800692c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8006920:	4b57      	ldr	r3, [pc, #348]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	0e1b      	lsrs	r3, r3, #24
 8006926:	f003 030f 	and.w	r3, r3, #15
 800692a:	e006      	b.n	800693a <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 800692c:	4b54      	ldr	r3, [pc, #336]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800692e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006932:	041b      	lsls	r3, r3, #16
 8006934:	0e1b      	lsrs	r3, r3, #24
 8006936:	f003 030f 	and.w	r3, r3, #15
 800693a:	4a52      	ldr	r2, [pc, #328]	; (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800693c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006940:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006942:	f000 bccd 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006946:	2300      	movs	r3, #0
 8006948:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800694a:	f000 bcc9 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800694e:	2300      	movs	r3, #0
 8006950:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006952:	f000 bcc5 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8006956:	e9d7 2300 	ldrd	r2, r3, [r7]
 800695a:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800695e:	430b      	orrs	r3, r1
 8006960:	d14c      	bne.n	80069fc <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006962:	4b47      	ldr	r3, [pc, #284]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006968:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800696c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800696e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006970:	2b00      	cmp	r3, #0
 8006972:	d104      	bne.n	800697e <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006974:	f7fe f860 	bl	8004a38 <HAL_RCC_GetPCLK1Freq>
 8006978:	6378      	str	r0, [r7, #52]	; 0x34
 800697a:	f000 bcb1 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800697e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006984:	d104      	bne.n	8006990 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006986:	f7fd ff3b 	bl	8004800 <HAL_RCC_GetSysClockFreq>
 800698a:	6378      	str	r0, [r7, #52]	; 0x34
 800698c:	f000 bca8 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006990:	4b3b      	ldr	r3, [pc, #236]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006998:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800699c:	d107      	bne.n	80069ae <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 800699e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069a4:	d103      	bne.n	80069ae <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 80069a6:	4b38      	ldr	r3, [pc, #224]	; (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80069a8:	637b      	str	r3, [r7, #52]	; 0x34
 80069aa:	f000 bc99 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80069ae:	4b34      	ldr	r3, [pc, #208]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 0320 	and.w	r3, r3, #32
 80069b6:	2b20      	cmp	r3, #32
 80069b8:	d11c      	bne.n	80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 80069ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069c0:	d118      	bne.n	80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80069c2:	4b2f      	ldr	r3, [pc, #188]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d005      	beq.n	80069da <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 80069ce:	4b2c      	ldr	r3, [pc, #176]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	0e1b      	lsrs	r3, r3, #24
 80069d4:	f003 030f 	and.w	r3, r3, #15
 80069d8:	e006      	b.n	80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 80069da:	4b29      	ldr	r3, [pc, #164]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80069dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80069e0:	041b      	lsls	r3, r3, #16
 80069e2:	0e1b      	lsrs	r3, r3, #24
 80069e4:	f003 030f 	and.w	r3, r3, #15
 80069e8:	4a26      	ldr	r2, [pc, #152]	; (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80069ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069ee:	637b      	str	r3, [r7, #52]	; 0x34
 80069f0:	f000 bc76 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80069f4:	2300      	movs	r3, #0
 80069f6:	637b      	str	r3, [r7, #52]	; 0x34
 80069f8:	f000 bc72 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80069fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a00:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8006a04:	430b      	orrs	r3, r1
 8006a06:	d152      	bne.n	8006aae <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006a08:	4b1d      	ldr	r3, [pc, #116]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a0e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006a12:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d104      	bne.n	8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006a1a:	f7fe f80d 	bl	8004a38 <HAL_RCC_GetPCLK1Freq>
 8006a1e:	6378      	str	r0, [r7, #52]	; 0x34
 8006a20:	f000 bc5e 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8006a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a2a:	d104      	bne.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006a2c:	f7fd fee8 	bl	8004800 <HAL_RCC_GetSysClockFreq>
 8006a30:	6378      	str	r0, [r7, #52]	; 0x34
 8006a32:	f000 bc55 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006a36:	4b12      	ldr	r3, [pc, #72]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a42:	d107      	bne.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 8006a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a4a:	d103      	bne.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 8006a4c:	4b0e      	ldr	r3, [pc, #56]	; (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006a4e:	637b      	str	r3, [r7, #52]	; 0x34
 8006a50:	f000 bc46 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8006a54:	4b0a      	ldr	r3, [pc, #40]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0320 	and.w	r3, r3, #32
 8006a5c:	2b20      	cmp	r3, #32
 8006a5e:	d122      	bne.n	8006aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 8006a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a62:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a66:	d11e      	bne.n	8006aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006a68:	4b05      	ldr	r3, [pc, #20]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d00b      	beq.n	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 8006a74:	4b02      	ldr	r3, [pc, #8]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	0e1b      	lsrs	r3, r3, #24
 8006a7a:	f003 030f 	and.w	r3, r3, #15
 8006a7e:	e00c      	b.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8006a80:	46020c00 	.word	0x46020c00
 8006a84:	0800add0 	.word	0x0800add0
 8006a88:	00f42400 	.word	0x00f42400
 8006a8c:	4ba1      	ldr	r3, [pc, #644]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006a8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006a92:	041b      	lsls	r3, r3, #16
 8006a94:	0e1b      	lsrs	r3, r3, #24
 8006a96:	f003 030f 	and.w	r3, r3, #15
 8006a9a:	4a9f      	ldr	r2, [pc, #636]	; (8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006aa0:	637b      	str	r3, [r7, #52]	; 0x34
 8006aa2:	f000 bc1d 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	637b      	str	r3, [r7, #52]	; 0x34
 8006aaa:	f000 bc19 	b.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8006aae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ab2:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006ab6:	430b      	orrs	r3, r1
 8006ab8:	d151      	bne.n	8006b5e <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006aba:	4b96      	ldr	r3, [pc, #600]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006abc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ac0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006ac4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac8:	2bc0      	cmp	r3, #192	; 0xc0
 8006aca:	d024      	beq.n	8006b16 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8006acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ace:	2bc0      	cmp	r3, #192	; 0xc0
 8006ad0:	d842      	bhi.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8006ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad4:	2b80      	cmp	r3, #128	; 0x80
 8006ad6:	d00d      	beq.n	8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8006ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ada:	2b80      	cmp	r3, #128	; 0x80
 8006adc:	d83c      	bhi.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8006ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d003      	beq.n	8006aec <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8006ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae6:	2b40      	cmp	r3, #64	; 0x40
 8006ae8:	d011      	beq.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 8006aea:	e035      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8006aec:	f7fd ffcc 	bl	8004a88 <HAL_RCC_GetPCLK3Freq>
 8006af0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006af2:	e3f5      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006af4:	4b87      	ldr	r3, [pc, #540]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b00:	d102      	bne.n	8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 8006b02:	4b86      	ldr	r3, [pc, #536]	; (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006b04:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006b06:	e3eb      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b0c:	e3e8      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8006b0e:	f7fd fe77 	bl	8004800 <HAL_RCC_GetSysClockFreq>
 8006b12:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006b14:	e3e4      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006b16:	4b7f      	ldr	r3, [pc, #508]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 0320 	and.w	r3, r3, #32
 8006b1e:	2b20      	cmp	r3, #32
 8006b20:	d117      	bne.n	8006b52 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006b22:	4b7c      	ldr	r3, [pc, #496]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d005      	beq.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 8006b2e:	4b79      	ldr	r3, [pc, #484]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	0e1b      	lsrs	r3, r3, #24
 8006b34:	f003 030f 	and.w	r3, r3, #15
 8006b38:	e006      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8006b3a:	4b76      	ldr	r3, [pc, #472]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006b3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006b40:	041b      	lsls	r3, r3, #16
 8006b42:	0e1b      	lsrs	r3, r3, #24
 8006b44:	f003 030f 	and.w	r3, r3, #15
 8006b48:	4a73      	ldr	r2, [pc, #460]	; (8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b4e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006b50:	e3c6      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006b52:	2300      	movs	r3, #0
 8006b54:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b56:	e3c3      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b5c:	e3c0      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8006b5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b62:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8006b66:	430b      	orrs	r3, r1
 8006b68:	d147      	bne.n	8006bfa <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006b6a:	4b6a      	ldr	r3, [pc, #424]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006b74:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8006b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d103      	bne.n	8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006b7c:	f7fd ff5c 	bl	8004a38 <HAL_RCC_GetPCLK1Freq>
 8006b80:	6378      	str	r0, [r7, #52]	; 0x34
 8006b82:	e3ad      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8006b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b8a:	d103      	bne.n	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006b8c:	f7fd fe38 	bl	8004800 <HAL_RCC_GetSysClockFreq>
 8006b90:	6378      	str	r0, [r7, #52]	; 0x34
 8006b92:	e3a5      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006b94:	4b5f      	ldr	r3, [pc, #380]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ba0:	d106      	bne.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8006ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ba8:	d102      	bne.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 8006baa:	4b5c      	ldr	r3, [pc, #368]	; (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006bac:	637b      	str	r3, [r7, #52]	; 0x34
 8006bae:	e397      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8006bb0:	4b58      	ldr	r3, [pc, #352]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 0320 	and.w	r3, r3, #32
 8006bb8:	2b20      	cmp	r3, #32
 8006bba:	d11b      	bne.n	8006bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8006bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bbe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006bc2:	d117      	bne.n	8006bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006bc4:	4b53      	ldr	r3, [pc, #332]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d005      	beq.n	8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 8006bd0:	4b50      	ldr	r3, [pc, #320]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	0e1b      	lsrs	r3, r3, #24
 8006bd6:	f003 030f 	and.w	r3, r3, #15
 8006bda:	e006      	b.n	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8006bdc:	4b4d      	ldr	r3, [pc, #308]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006bde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006be2:	041b      	lsls	r3, r3, #16
 8006be4:	0e1b      	lsrs	r3, r3, #24
 8006be6:	f003 030f 	and.w	r3, r3, #15
 8006bea:	4a4b      	ldr	r2, [pc, #300]	; (8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8006bf2:	e375      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	637b      	str	r3, [r7, #52]	; 0x34
 8006bf8:	e372      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8006bfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bfe:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8006c02:	430b      	orrs	r3, r1
 8006c04:	d164      	bne.n	8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8006c06:	4b43      	ldr	r3, [pc, #268]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006c0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c10:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8006c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d120      	bne.n	8006c5a <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006c18:	4b3e      	ldr	r3, [pc, #248]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 0320 	and.w	r3, r3, #32
 8006c20:	2b20      	cmp	r3, #32
 8006c22:	d117      	bne.n	8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006c24:	4b3b      	ldr	r3, [pc, #236]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d005      	beq.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8006c30:	4b38      	ldr	r3, [pc, #224]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	0e1b      	lsrs	r3, r3, #24
 8006c36:	f003 030f 	and.w	r3, r3, #15
 8006c3a:	e006      	b.n	8006c4a <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8006c3c:	4b35      	ldr	r3, [pc, #212]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006c3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006c42:	041b      	lsls	r3, r3, #16
 8006c44:	0e1b      	lsrs	r3, r3, #24
 8006c46:	f003 030f 	and.w	r3, r3, #15
 8006c4a:	4a33      	ldr	r2, [pc, #204]	; (8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c50:	637b      	str	r3, [r7, #52]	; 0x34
 8006c52:	e345      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8006c54:	2300      	movs	r3, #0
 8006c56:	637b      	str	r3, [r7, #52]	; 0x34
 8006c58:	e342      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8006c5a:	4b2e      	ldr	r3, [pc, #184]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006c5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c68:	d112      	bne.n	8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8006c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c70:	d10e      	bne.n	8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c72:	4b28      	ldr	r3, [pc, #160]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006c74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c80:	d102      	bne.n	8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8006c82:	23fa      	movs	r3, #250	; 0xfa
 8006c84:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c86:	e32b      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006c88:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006c8c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c8e:	e327      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8006c90:	4b20      	ldr	r3, [pc, #128]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c9c:	d106      	bne.n	8006cac <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8006c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ca4:	d102      	bne.n	8006cac <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8006ca6:	4b1d      	ldr	r3, [pc, #116]	; (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006ca8:	637b      	str	r3, [r7, #52]	; 0x34
 8006caa:	e319      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8006cac:	4b19      	ldr	r3, [pc, #100]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006cae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006cb2:	f003 0302 	and.w	r3, r3, #2
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	d107      	bne.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8006cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cc0:	d103      	bne.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8006cc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cc6:	637b      	str	r3, [r7, #52]	; 0x34
 8006cc8:	e30a      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	637b      	str	r3, [r7, #52]	; 0x34
 8006cce:	e307      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8006cd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cd4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8006cd8:	430b      	orrs	r3, r1
 8006cda:	d16b      	bne.n	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006cdc:	4b0d      	ldr	r3, [pc, #52]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006cde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ce2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ce6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8006ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d127      	bne.n	8006d3e <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006cee:	4b09      	ldr	r3, [pc, #36]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 0320 	and.w	r3, r3, #32
 8006cf6:	2b20      	cmp	r3, #32
 8006cf8:	d11e      	bne.n	8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006cfa:	4b06      	ldr	r3, [pc, #24]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00c      	beq.n	8006d20 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 8006d06:	4b03      	ldr	r3, [pc, #12]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	0e1b      	lsrs	r3, r3, #24
 8006d0c:	f003 030f 	and.w	r3, r3, #15
 8006d10:	e00d      	b.n	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8006d12:	bf00      	nop
 8006d14:	46020c00 	.word	0x46020c00
 8006d18:	0800add0 	.word	0x0800add0
 8006d1c:	00f42400 	.word	0x00f42400
 8006d20:	4b94      	ldr	r3, [pc, #592]	; (8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006d22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006d26:	041b      	lsls	r3, r3, #16
 8006d28:	0e1b      	lsrs	r3, r3, #24
 8006d2a:	f003 030f 	and.w	r3, r3, #15
 8006d2e:	4a92      	ldr	r2, [pc, #584]	; (8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8006d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d34:	637b      	str	r3, [r7, #52]	; 0x34
 8006d36:	e2d3      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	637b      	str	r3, [r7, #52]	; 0x34
 8006d3c:	e2d0      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8006d3e:	4b8d      	ldr	r3, [pc, #564]	; (8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006d40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d4c:	d112      	bne.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d54:	d10e      	bne.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006d56:	4b87      	ldr	r3, [pc, #540]	; (8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006d58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d64:	d102      	bne.n	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 8006d66:	23fa      	movs	r3, #250	; 0xfa
 8006d68:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006d6a:	e2b9      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006d6c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006d70:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006d72:	e2b5      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006d74:	4b7f      	ldr	r3, [pc, #508]	; (8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d80:	d106      	bne.n	8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 8006d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d88:	d102      	bne.n	8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 8006d8a:	4b7c      	ldr	r3, [pc, #496]	; (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006d8c:	637b      	str	r3, [r7, #52]	; 0x34
 8006d8e:	e2a7      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006d90:	4b78      	ldr	r3, [pc, #480]	; (8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006d92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d96:	f003 0302 	and.w	r3, r3, #2
 8006d9a:	2b02      	cmp	r3, #2
 8006d9c:	d107      	bne.n	8006dae <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 8006d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006da4:	d103      	bne.n	8006dae <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 8006da6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006daa:	637b      	str	r3, [r7, #52]	; 0x34
 8006dac:	e298      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8006dae:	2300      	movs	r3, #0
 8006db0:	637b      	str	r3, [r7, #52]	; 0x34
 8006db2:	e295      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8006db4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006db8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006dbc:	430b      	orrs	r3, r1
 8006dbe:	d147      	bne.n	8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006dc0:	4b6c      	ldr	r3, [pc, #432]	; (8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006dc6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006dca:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d103      	bne.n	8006dda <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006dd2:	f7fd fe31 	bl	8004a38 <HAL_RCC_GetPCLK1Freq>
 8006dd6:	6378      	str	r0, [r7, #52]	; 0x34
 8006dd8:	e282      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8006dda:	4b66      	ldr	r3, [pc, #408]	; (8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006ddc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006de0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006de4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006de8:	d112      	bne.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 8006dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006df0:	d10e      	bne.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006df2:	4b60      	ldr	r3, [pc, #384]	; (8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006df4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dfc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e00:	d102      	bne.n	8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 8006e02:	23fa      	movs	r3, #250	; 0xfa
 8006e04:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006e06:	e26b      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006e08:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006e0c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006e0e:	e267      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8006e10:	4b58      	ldr	r3, [pc, #352]	; (8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e1c:	d106      	bne.n	8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 8006e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e20:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006e24:	d102      	bne.n	8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 8006e26:	4b55      	ldr	r3, [pc, #340]	; (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006e28:	637b      	str	r3, [r7, #52]	; 0x34
 8006e2a:	e259      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8006e2c:	4b51      	ldr	r3, [pc, #324]	; (8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006e2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e32:	f003 0302 	and.w	r3, r3, #2
 8006e36:	2b02      	cmp	r3, #2
 8006e38:	d107      	bne.n	8006e4a <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 8006e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006e40:	d103      	bne.n	8006e4a <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 8006e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e46:	637b      	str	r3, [r7, #52]	; 0x34
 8006e48:	e24a      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	637b      	str	r3, [r7, #52]	; 0x34
 8006e4e:	e247      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8006e50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e54:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8006e58:	430b      	orrs	r3, r1
 8006e5a:	d12d      	bne.n	8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8006e5c:	4b45      	ldr	r3, [pc, #276]	; (8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e62:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8006e66:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8006e68:	4b42      	ldr	r3, [pc, #264]	; (8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e74:	d105      	bne.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 8006e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d102      	bne.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 8006e7c:	4b3f      	ldr	r3, [pc, #252]	; (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006e7e:	637b      	str	r3, [r7, #52]	; 0x34
 8006e80:	e22e      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8006e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006e88:	d107      	bne.n	8006e9a <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7fe fc70 	bl	8005774 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e96:	637b      	str	r3, [r7, #52]	; 0x34
 8006e98:	e222      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8006e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ea0:	d107      	bne.n	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ea2:	f107 0318 	add.w	r3, r7, #24
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f7fe fdbe 	bl	8005a28 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	637b      	str	r3, [r7, #52]	; 0x34
 8006eb0:	e216      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	637b      	str	r3, [r7, #52]	; 0x34
 8006eb6:	e213      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8006eb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ebc:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8006ec0:	430b      	orrs	r3, r1
 8006ec2:	d15d      	bne.n	8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006ec4:	4b2b      	ldr	r3, [pc, #172]	; (8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006eca:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006ece:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8006ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ed6:	d028      	beq.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 8006ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eda:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ede:	d845      	bhi.n	8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ee6:	d013      	beq.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 8006ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006eee:	d83d      	bhi.n	8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d004      	beq.n	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8006ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006efc:	d004      	beq.n	8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 8006efe:	e035      	b.n	8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8006f00:	f7fd fdae 	bl	8004a60 <HAL_RCC_GetPCLK2Freq>
 8006f04:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006f06:	e1eb      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006f08:	f7fd fc7a 	bl	8004800 <HAL_RCC_GetSysClockFreq>
 8006f0c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006f0e:	e1e7      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f10:	4b18      	ldr	r3, [pc, #96]	; (8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f1c:	d102      	bne.n	8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 8006f1e:	4b17      	ldr	r3, [pc, #92]	; (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006f20:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006f22:	e1dd      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006f24:	2300      	movs	r3, #0
 8006f26:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f28:	e1da      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006f2a:	4b12      	ldr	r3, [pc, #72]	; (8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 0320 	and.w	r3, r3, #32
 8006f32:	2b20      	cmp	r3, #32
 8006f34:	d117      	bne.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006f36:	4b0f      	ldr	r3, [pc, #60]	; (8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d005      	beq.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8006f42:	4b0c      	ldr	r3, [pc, #48]	; (8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	0e1b      	lsrs	r3, r3, #24
 8006f48:	f003 030f 	and.w	r3, r3, #15
 8006f4c:	e006      	b.n	8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 8006f4e:	4b09      	ldr	r3, [pc, #36]	; (8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006f50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006f54:	041b      	lsls	r3, r3, #16
 8006f56:	0e1b      	lsrs	r3, r3, #24
 8006f58:	f003 030f 	and.w	r3, r3, #15
 8006f5c:	4a06      	ldr	r2, [pc, #24]	; (8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8006f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f62:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006f64:	e1bc      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006f66:	2300      	movs	r3, #0
 8006f68:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f6a:	e1b9      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f70:	e1b6      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8006f72:	bf00      	nop
 8006f74:	46020c00 	.word	0x46020c00
 8006f78:	0800add0 	.word	0x0800add0
 8006f7c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8006f80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f84:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8006f88:	430b      	orrs	r3, r1
 8006f8a:	d156      	bne.n	800703a <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006f8c:	4ba5      	ldr	r3, [pc, #660]	; (8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006f96:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8006f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f9a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006f9e:	d028      	beq.n	8006ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 8006fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006fa6:	d845      	bhi.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8006fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006faa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fae:	d013      	beq.n	8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 8006fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fb6:	d83d      	bhi.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8006fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d004      	beq.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 8006fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fc4:	d004      	beq.n	8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8006fc6:	e035      	b.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8006fc8:	f7fd fd36 	bl	8004a38 <HAL_RCC_GetPCLK1Freq>
 8006fcc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006fce:	e187      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006fd0:	f7fd fc16 	bl	8004800 <HAL_RCC_GetSysClockFreq>
 8006fd4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006fd6:	e183      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006fd8:	4b92      	ldr	r3, [pc, #584]	; (8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fe0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fe4:	d102      	bne.n	8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 8006fe6:	4b90      	ldr	r3, [pc, #576]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8006fe8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006fea:	e179      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006fec:	2300      	movs	r3, #0
 8006fee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ff0:	e176      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006ff2:	4b8c      	ldr	r3, [pc, #560]	; (8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 0320 	and.w	r3, r3, #32
 8006ffa:	2b20      	cmp	r3, #32
 8006ffc:	d117      	bne.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006ffe:	4b89      	ldr	r3, [pc, #548]	; (8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007006:	2b00      	cmp	r3, #0
 8007008:	d005      	beq.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 800700a:	4b86      	ldr	r3, [pc, #536]	; (8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	0e1b      	lsrs	r3, r3, #24
 8007010:	f003 030f 	and.w	r3, r3, #15
 8007014:	e006      	b.n	8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 8007016:	4b83      	ldr	r3, [pc, #524]	; (8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007018:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800701c:	041b      	lsls	r3, r3, #16
 800701e:	0e1b      	lsrs	r3, r3, #24
 8007020:	f003 030f 	and.w	r3, r3, #15
 8007024:	4a81      	ldr	r2, [pc, #516]	; (800722c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8007026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800702a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800702c:	e158      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800702e:	2300      	movs	r3, #0
 8007030:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007032:	e155      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8007034:	2300      	movs	r3, #0
 8007036:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007038:	e152      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800703a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800703e:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8007042:	430b      	orrs	r3, r1
 8007044:	d177      	bne.n	8007136 <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8007046:	4b77      	ldr	r3, [pc, #476]	; (8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007048:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800704c:	f003 0318 	and.w	r3, r3, #24
 8007050:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8007052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007054:	2b18      	cmp	r3, #24
 8007056:	d86b      	bhi.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 8007058:	a201      	add	r2, pc, #4	; (adr r2, 8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 800705a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800705e:	bf00      	nop
 8007060:	080070c5 	.word	0x080070c5
 8007064:	08007131 	.word	0x08007131
 8007068:	08007131 	.word	0x08007131
 800706c:	08007131 	.word	0x08007131
 8007070:	08007131 	.word	0x08007131
 8007074:	08007131 	.word	0x08007131
 8007078:	08007131 	.word	0x08007131
 800707c:	08007131 	.word	0x08007131
 8007080:	080070cd 	.word	0x080070cd
 8007084:	08007131 	.word	0x08007131
 8007088:	08007131 	.word	0x08007131
 800708c:	08007131 	.word	0x08007131
 8007090:	08007131 	.word	0x08007131
 8007094:	08007131 	.word	0x08007131
 8007098:	08007131 	.word	0x08007131
 800709c:	08007131 	.word	0x08007131
 80070a0:	080070d5 	.word	0x080070d5
 80070a4:	08007131 	.word	0x08007131
 80070a8:	08007131 	.word	0x08007131
 80070ac:	08007131 	.word	0x08007131
 80070b0:	08007131 	.word	0x08007131
 80070b4:	08007131 	.word	0x08007131
 80070b8:	08007131 	.word	0x08007131
 80070bc:	08007131 	.word	0x08007131
 80070c0:	080070ef 	.word	0x080070ef
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 80070c4:	f7fd fce0 	bl	8004a88 <HAL_RCC_GetPCLK3Freq>
 80070c8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80070ca:	e109      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80070cc:	f7fd fb98 	bl	8004800 <HAL_RCC_GetSysClockFreq>
 80070d0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80070d2:	e105      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80070d4:	4b53      	ldr	r3, [pc, #332]	; (8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070e0:	d102      	bne.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 80070e2:	4b51      	ldr	r3, [pc, #324]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 80070e4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80070e6:	e0fb      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80070e8:	2300      	movs	r3, #0
 80070ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80070ec:	e0f8      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80070ee:	4b4d      	ldr	r3, [pc, #308]	; (8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f003 0320 	and.w	r3, r3, #32
 80070f6:	2b20      	cmp	r3, #32
 80070f8:	d117      	bne.n	800712a <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80070fa:	4b4a      	ldr	r3, [pc, #296]	; (8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007102:	2b00      	cmp	r3, #0
 8007104:	d005      	beq.n	8007112 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 8007106:	4b47      	ldr	r3, [pc, #284]	; (8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	0e1b      	lsrs	r3, r3, #24
 800710c:	f003 030f 	and.w	r3, r3, #15
 8007110:	e006      	b.n	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8007112:	4b44      	ldr	r3, [pc, #272]	; (8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007114:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007118:	041b      	lsls	r3, r3, #16
 800711a:	0e1b      	lsrs	r3, r3, #24
 800711c:	f003 030f 	and.w	r3, r3, #15
 8007120:	4a42      	ldr	r2, [pc, #264]	; (800722c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8007122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007126:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007128:	e0da      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800712a:	2300      	movs	r3, #0
 800712c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800712e:	e0d7      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8007130:	2300      	movs	r3, #0
 8007132:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007134:	e0d4      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8007136:	e9d7 2300 	ldrd	r2, r3, [r7]
 800713a:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 800713e:	430b      	orrs	r3, r1
 8007140:	d155      	bne.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007142:	4b38      	ldr	r3, [pc, #224]	; (8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007144:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007148:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800714c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800714e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007150:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007154:	d013      	beq.n	800717e <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 8007156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007158:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800715c:	d844      	bhi.n	80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 800715e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007160:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007164:	d013      	beq.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 8007166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007168:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800716c:	d83c      	bhi.n	80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 800716e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007170:	2b00      	cmp	r3, #0
 8007172:	d014      	beq.n	800719e <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 8007174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007176:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800717a:	d014      	beq.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 800717c:	e034      	b.n	80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800717e:	f107 0318 	add.w	r3, r7, #24
 8007182:	4618      	mov	r0, r3
 8007184:	f7fe fc50 	bl	8005a28 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800718c:	e0a8      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800718e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007192:	4618      	mov	r0, r3
 8007194:	f7fe faee 	bl	8005774 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800719c:	e0a0      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800719e:	f7fd fb2f 	bl	8004800 <HAL_RCC_GetSysClockFreq>
 80071a2:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80071a4:	e09c      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80071a6:	4b1f      	ldr	r3, [pc, #124]	; (8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 0320 	and.w	r3, r3, #32
 80071ae:	2b20      	cmp	r3, #32
 80071b0:	d117      	bne.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80071b2:	4b1c      	ldr	r3, [pc, #112]	; (8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d005      	beq.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 80071be:	4b19      	ldr	r3, [pc, #100]	; (8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	0e1b      	lsrs	r3, r3, #24
 80071c4:	f003 030f 	and.w	r3, r3, #15
 80071c8:	e006      	b.n	80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 80071ca:	4b16      	ldr	r3, [pc, #88]	; (8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80071cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80071d0:	041b      	lsls	r3, r3, #16
 80071d2:	0e1b      	lsrs	r3, r3, #24
 80071d4:	f003 030f 	and.w	r3, r3, #15
 80071d8:	4a14      	ldr	r2, [pc, #80]	; (800722c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 80071da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071de:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80071e0:	e07e      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80071e2:	2300      	movs	r3, #0
 80071e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80071e6:	e07b      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80071e8:	2300      	movs	r3, #0
 80071ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80071ec:	e078      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80071ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071f2:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 80071f6:	430b      	orrs	r3, r1
 80071f8:	d138      	bne.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80071fa:	4b0a      	ldr	r3, [pc, #40]	; (8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80071fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007200:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007204:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8007206:	4b07      	ldr	r3, [pc, #28]	; (8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007208:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800720c:	f003 0302 	and.w	r3, r3, #2
 8007210:	2b02      	cmp	r3, #2
 8007212:	d10d      	bne.n	8007230 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8007214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007216:	2b00      	cmp	r3, #0
 8007218:	d10a      	bne.n	8007230 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 800721a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800721e:	637b      	str	r3, [r7, #52]	; 0x34
 8007220:	e05e      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8007222:	bf00      	nop
 8007224:	46020c00 	.word	0x46020c00
 8007228:	00f42400 	.word	0x00f42400
 800722c:	0800add0 	.word	0x0800add0
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8007230:	4b2e      	ldr	r3, [pc, #184]	; (80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007232:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007236:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800723a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800723e:	d112      	bne.n	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 8007240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007242:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007246:	d10e      	bne.n	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007248:	4b28      	ldr	r3, [pc, #160]	; (80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800724a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800724e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007252:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007256:	d102      	bne.n	800725e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 8007258:	23fa      	movs	r3, #250	; 0xfa
 800725a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800725c:	e040      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800725e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007262:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007264:	e03c      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8007266:	2300      	movs	r3, #0
 8007268:	637b      	str	r3, [r7, #52]	; 0x34
 800726a:	e039      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800726c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007270:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8007274:	430b      	orrs	r3, r1
 8007276:	d131      	bne.n	80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007278:	4b1c      	ldr	r3, [pc, #112]	; (80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800727a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800727e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007282:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007284:	4b19      	ldr	r3, [pc, #100]	; (80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800728c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007290:	d105      	bne.n	800729e <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 8007292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007294:	2b00      	cmp	r3, #0
 8007296:	d102      	bne.n	800729e <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 8007298:	4b15      	ldr	r3, [pc, #84]	; (80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 800729a:	637b      	str	r3, [r7, #52]	; 0x34
 800729c:	e020      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800729e:	4b13      	ldr	r3, [pc, #76]	; (80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072aa:	d106      	bne.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 80072ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072b2:	d102      	bne.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 80072b4:	4b0f      	ldr	r3, [pc, #60]	; (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 80072b6:	637b      	str	r3, [r7, #52]	; 0x34
 80072b8:	e012      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 80072ba:	4b0c      	ldr	r3, [pc, #48]	; (80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072c6:	d106      	bne.n	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 80072c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072ce:	d102      	bne.n	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 80072d0:	4b09      	ldr	r3, [pc, #36]	; (80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80072d2:	637b      	str	r3, [r7, #52]	; 0x34
 80072d4:	e004      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 80072d6:	2300      	movs	r3, #0
 80072d8:	637b      	str	r3, [r7, #52]	; 0x34
 80072da:	e001      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 80072dc:	2300      	movs	r3, #0
 80072de:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 80072e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3738      	adds	r7, #56	; 0x38
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	46020c00 	.word	0x46020c00
 80072f0:	02dc6c00 	.word	0x02dc6c00
 80072f4:	016e3600 	.word	0x016e3600
 80072f8:	00f42400 	.word	0x00f42400

080072fc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8007304:	4b47      	ldr	r3, [pc, #284]	; (8007424 <RCCEx_PLL2_Config+0x128>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a46      	ldr	r2, [pc, #280]	; (8007424 <RCCEx_PLL2_Config+0x128>)
 800730a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800730e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007310:	f7f9 fffe 	bl	8001310 <HAL_GetTick>
 8007314:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007316:	e008      	b.n	800732a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007318:	f7f9 fffa 	bl	8001310 <HAL_GetTick>
 800731c:	4602      	mov	r2, r0
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	1ad3      	subs	r3, r2, r3
 8007322:	2b02      	cmp	r3, #2
 8007324:	d901      	bls.n	800732a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007326:	2303      	movs	r3, #3
 8007328:	e077      	b.n	800741a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800732a:	4b3e      	ldr	r3, [pc, #248]	; (8007424 <RCCEx_PLL2_Config+0x128>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007332:	2b00      	cmp	r3, #0
 8007334:	d1f0      	bne.n	8007318 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007336:	4b3b      	ldr	r3, [pc, #236]	; (8007424 <RCCEx_PLL2_Config+0x128>)
 8007338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800733a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800733e:	f023 0303 	bic.w	r3, r3, #3
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	6811      	ldr	r1, [r2, #0]
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	6852      	ldr	r2, [r2, #4]
 800734a:	3a01      	subs	r2, #1
 800734c:	0212      	lsls	r2, r2, #8
 800734e:	430a      	orrs	r2, r1
 8007350:	4934      	ldr	r1, [pc, #208]	; (8007424 <RCCEx_PLL2_Config+0x128>)
 8007352:	4313      	orrs	r3, r2
 8007354:	62cb      	str	r3, [r1, #44]	; 0x2c
 8007356:	4b33      	ldr	r3, [pc, #204]	; (8007424 <RCCEx_PLL2_Config+0x128>)
 8007358:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800735a:	4b33      	ldr	r3, [pc, #204]	; (8007428 <RCCEx_PLL2_Config+0x12c>)
 800735c:	4013      	ands	r3, r2
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	6892      	ldr	r2, [r2, #8]
 8007362:	3a01      	subs	r2, #1
 8007364:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	68d2      	ldr	r2, [r2, #12]
 800736c:	3a01      	subs	r2, #1
 800736e:	0252      	lsls	r2, r2, #9
 8007370:	b292      	uxth	r2, r2
 8007372:	4311      	orrs	r1, r2
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	6912      	ldr	r2, [r2, #16]
 8007378:	3a01      	subs	r2, #1
 800737a:	0412      	lsls	r2, r2, #16
 800737c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007380:	4311      	orrs	r1, r2
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	6952      	ldr	r2, [r2, #20]
 8007386:	3a01      	subs	r2, #1
 8007388:	0612      	lsls	r2, r2, #24
 800738a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800738e:	430a      	orrs	r2, r1
 8007390:	4924      	ldr	r1, [pc, #144]	; (8007424 <RCCEx_PLL2_Config+0x128>)
 8007392:	4313      	orrs	r3, r2
 8007394:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007396:	4b23      	ldr	r3, [pc, #140]	; (8007424 <RCCEx_PLL2_Config+0x128>)
 8007398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800739a:	f023 020c 	bic.w	r2, r3, #12
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	699b      	ldr	r3, [r3, #24]
 80073a2:	4920      	ldr	r1, [pc, #128]	; (8007424 <RCCEx_PLL2_Config+0x128>)
 80073a4:	4313      	orrs	r3, r2
 80073a6:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80073a8:	4b1e      	ldr	r3, [pc, #120]	; (8007424 <RCCEx_PLL2_Config+0x128>)
 80073aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6a1b      	ldr	r3, [r3, #32]
 80073b0:	491c      	ldr	r1, [pc, #112]	; (8007424 <RCCEx_PLL2_Config+0x128>)
 80073b2:	4313      	orrs	r3, r2
 80073b4:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80073b6:	4b1b      	ldr	r3, [pc, #108]	; (8007424 <RCCEx_PLL2_Config+0x128>)
 80073b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ba:	4a1a      	ldr	r2, [pc, #104]	; (8007424 <RCCEx_PLL2_Config+0x128>)
 80073bc:	f023 0310 	bic.w	r3, r3, #16
 80073c0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80073c2:	4b18      	ldr	r3, [pc, #96]	; (8007424 <RCCEx_PLL2_Config+0x128>)
 80073c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073ca:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	69d2      	ldr	r2, [r2, #28]
 80073d2:	00d2      	lsls	r2, r2, #3
 80073d4:	4913      	ldr	r1, [pc, #76]	; (8007424 <RCCEx_PLL2_Config+0x128>)
 80073d6:	4313      	orrs	r3, r2
 80073d8:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80073da:	4b12      	ldr	r3, [pc, #72]	; (8007424 <RCCEx_PLL2_Config+0x128>)
 80073dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073de:	4a11      	ldr	r2, [pc, #68]	; (8007424 <RCCEx_PLL2_Config+0x128>)
 80073e0:	f043 0310 	orr.w	r3, r3, #16
 80073e4:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80073e6:	4b0f      	ldr	r3, [pc, #60]	; (8007424 <RCCEx_PLL2_Config+0x128>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a0e      	ldr	r2, [pc, #56]	; (8007424 <RCCEx_PLL2_Config+0x128>)
 80073ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80073f0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80073f2:	f7f9 ff8d 	bl	8001310 <HAL_GetTick>
 80073f6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80073f8:	e008      	b.n	800740c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80073fa:	f7f9 ff89 	bl	8001310 <HAL_GetTick>
 80073fe:	4602      	mov	r2, r0
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	2b02      	cmp	r3, #2
 8007406:	d901      	bls.n	800740c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007408:	2303      	movs	r3, #3
 800740a:	e006      	b.n	800741a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800740c:	4b05      	ldr	r3, [pc, #20]	; (8007424 <RCCEx_PLL2_Config+0x128>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007414:	2b00      	cmp	r3, #0
 8007416:	d0f0      	beq.n	80073fa <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8007418:	2300      	movs	r3, #0

}
 800741a:	4618      	mov	r0, r3
 800741c:	3710      	adds	r7, #16
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	46020c00 	.word	0x46020c00
 8007428:	80800000 	.word	0x80800000

0800742c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8007434:	4b47      	ldr	r3, [pc, #284]	; (8007554 <RCCEx_PLL3_Config+0x128>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a46      	ldr	r2, [pc, #280]	; (8007554 <RCCEx_PLL3_Config+0x128>)
 800743a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800743e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007440:	f7f9 ff66 	bl	8001310 <HAL_GetTick>
 8007444:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007446:	e008      	b.n	800745a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007448:	f7f9 ff62 	bl	8001310 <HAL_GetTick>
 800744c:	4602      	mov	r2, r0
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	1ad3      	subs	r3, r2, r3
 8007452:	2b02      	cmp	r3, #2
 8007454:	d901      	bls.n	800745a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007456:	2303      	movs	r3, #3
 8007458:	e077      	b.n	800754a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800745a:	4b3e      	ldr	r3, [pc, #248]	; (8007554 <RCCEx_PLL3_Config+0x128>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007462:	2b00      	cmp	r3, #0
 8007464:	d1f0      	bne.n	8007448 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007466:	4b3b      	ldr	r3, [pc, #236]	; (8007554 <RCCEx_PLL3_Config+0x128>)
 8007468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800746a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800746e:	f023 0303 	bic.w	r3, r3, #3
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	6811      	ldr	r1, [r2, #0]
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	6852      	ldr	r2, [r2, #4]
 800747a:	3a01      	subs	r2, #1
 800747c:	0212      	lsls	r2, r2, #8
 800747e:	430a      	orrs	r2, r1
 8007480:	4934      	ldr	r1, [pc, #208]	; (8007554 <RCCEx_PLL3_Config+0x128>)
 8007482:	4313      	orrs	r3, r2
 8007484:	630b      	str	r3, [r1, #48]	; 0x30
 8007486:	4b33      	ldr	r3, [pc, #204]	; (8007554 <RCCEx_PLL3_Config+0x128>)
 8007488:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800748a:	4b33      	ldr	r3, [pc, #204]	; (8007558 <RCCEx_PLL3_Config+0x12c>)
 800748c:	4013      	ands	r3, r2
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	6892      	ldr	r2, [r2, #8]
 8007492:	3a01      	subs	r2, #1
 8007494:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	68d2      	ldr	r2, [r2, #12]
 800749c:	3a01      	subs	r2, #1
 800749e:	0252      	lsls	r2, r2, #9
 80074a0:	b292      	uxth	r2, r2
 80074a2:	4311      	orrs	r1, r2
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	6912      	ldr	r2, [r2, #16]
 80074a8:	3a01      	subs	r2, #1
 80074aa:	0412      	lsls	r2, r2, #16
 80074ac:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80074b0:	4311      	orrs	r1, r2
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	6952      	ldr	r2, [r2, #20]
 80074b6:	3a01      	subs	r2, #1
 80074b8:	0612      	lsls	r2, r2, #24
 80074ba:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80074be:	430a      	orrs	r2, r1
 80074c0:	4924      	ldr	r1, [pc, #144]	; (8007554 <RCCEx_PLL3_Config+0x128>)
 80074c2:	4313      	orrs	r3, r2
 80074c4:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80074c6:	4b23      	ldr	r3, [pc, #140]	; (8007554 <RCCEx_PLL3_Config+0x128>)
 80074c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ca:	f023 020c 	bic.w	r2, r3, #12
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	699b      	ldr	r3, [r3, #24]
 80074d2:	4920      	ldr	r1, [pc, #128]	; (8007554 <RCCEx_PLL3_Config+0x128>)
 80074d4:	4313      	orrs	r3, r2
 80074d6:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80074d8:	4b1e      	ldr	r3, [pc, #120]	; (8007554 <RCCEx_PLL3_Config+0x128>)
 80074da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6a1b      	ldr	r3, [r3, #32]
 80074e0:	491c      	ldr	r1, [pc, #112]	; (8007554 <RCCEx_PLL3_Config+0x128>)
 80074e2:	4313      	orrs	r3, r2
 80074e4:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80074e6:	4b1b      	ldr	r3, [pc, #108]	; (8007554 <RCCEx_PLL3_Config+0x128>)
 80074e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ea:	4a1a      	ldr	r2, [pc, #104]	; (8007554 <RCCEx_PLL3_Config+0x128>)
 80074ec:	f023 0310 	bic.w	r3, r3, #16
 80074f0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80074f2:	4b18      	ldr	r3, [pc, #96]	; (8007554 <RCCEx_PLL3_Config+0x128>)
 80074f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074fa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	69d2      	ldr	r2, [r2, #28]
 8007502:	00d2      	lsls	r2, r2, #3
 8007504:	4913      	ldr	r1, [pc, #76]	; (8007554 <RCCEx_PLL3_Config+0x128>)
 8007506:	4313      	orrs	r3, r2
 8007508:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800750a:	4b12      	ldr	r3, [pc, #72]	; (8007554 <RCCEx_PLL3_Config+0x128>)
 800750c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750e:	4a11      	ldr	r2, [pc, #68]	; (8007554 <RCCEx_PLL3_Config+0x128>)
 8007510:	f043 0310 	orr.w	r3, r3, #16
 8007514:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8007516:	4b0f      	ldr	r3, [pc, #60]	; (8007554 <RCCEx_PLL3_Config+0x128>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a0e      	ldr	r2, [pc, #56]	; (8007554 <RCCEx_PLL3_Config+0x128>)
 800751c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007520:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007522:	f7f9 fef5 	bl	8001310 <HAL_GetTick>
 8007526:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007528:	e008      	b.n	800753c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800752a:	f7f9 fef1 	bl	8001310 <HAL_GetTick>
 800752e:	4602      	mov	r2, r0
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	1ad3      	subs	r3, r2, r3
 8007534:	2b02      	cmp	r3, #2
 8007536:	d901      	bls.n	800753c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007538:	2303      	movs	r3, #3
 800753a:	e006      	b.n	800754a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800753c:	4b05      	ldr	r3, [pc, #20]	; (8007554 <RCCEx_PLL3_Config+0x128>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007544:	2b00      	cmp	r3, #0
 8007546:	d0f0      	beq.n	800752a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop
 8007554:	46020c00 	.word	0x46020c00
 8007558:	80800000 	.word	0x80800000

0800755c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d101      	bne.n	800756e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	e049      	b.n	8007602 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007574:	b2db      	uxtb	r3, r3
 8007576:	2b00      	cmp	r3, #0
 8007578:	d106      	bne.n	8007588 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f7f9 fc22 	bl	8000dcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2202      	movs	r2, #2
 800758c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	3304      	adds	r3, #4
 8007598:	4619      	mov	r1, r3
 800759a:	4610      	mov	r0, r2
 800759c:	f000 fe18 	bl	80081d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	3708      	adds	r7, #8
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
	...

0800760c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800760c:	b480      	push	{r7}
 800760e:	b085      	sub	sp, #20
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800761a:	b2db      	uxtb	r3, r3
 800761c:	2b01      	cmp	r3, #1
 800761e:	d001      	beq.n	8007624 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	e072      	b.n	800770a <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2202      	movs	r2, #2
 8007628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	68da      	ldr	r2, [r3, #12]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f042 0201 	orr.w	r2, r2, #1
 800763a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a35      	ldr	r2, [pc, #212]	; (8007718 <HAL_TIM_Base_Start_IT+0x10c>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d040      	beq.n	80076c8 <HAL_TIM_Base_Start_IT+0xbc>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a34      	ldr	r2, [pc, #208]	; (800771c <HAL_TIM_Base_Start_IT+0x110>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d03b      	beq.n	80076c8 <HAL_TIM_Base_Start_IT+0xbc>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007658:	d036      	beq.n	80076c8 <HAL_TIM_Base_Start_IT+0xbc>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007662:	d031      	beq.n	80076c8 <HAL_TIM_Base_Start_IT+0xbc>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a2d      	ldr	r2, [pc, #180]	; (8007720 <HAL_TIM_Base_Start_IT+0x114>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d02c      	beq.n	80076c8 <HAL_TIM_Base_Start_IT+0xbc>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a2c      	ldr	r2, [pc, #176]	; (8007724 <HAL_TIM_Base_Start_IT+0x118>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d027      	beq.n	80076c8 <HAL_TIM_Base_Start_IT+0xbc>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a2a      	ldr	r2, [pc, #168]	; (8007728 <HAL_TIM_Base_Start_IT+0x11c>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d022      	beq.n	80076c8 <HAL_TIM_Base_Start_IT+0xbc>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a29      	ldr	r2, [pc, #164]	; (800772c <HAL_TIM_Base_Start_IT+0x120>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d01d      	beq.n	80076c8 <HAL_TIM_Base_Start_IT+0xbc>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a27      	ldr	r2, [pc, #156]	; (8007730 <HAL_TIM_Base_Start_IT+0x124>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d018      	beq.n	80076c8 <HAL_TIM_Base_Start_IT+0xbc>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a26      	ldr	r2, [pc, #152]	; (8007734 <HAL_TIM_Base_Start_IT+0x128>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d013      	beq.n	80076c8 <HAL_TIM_Base_Start_IT+0xbc>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a24      	ldr	r2, [pc, #144]	; (8007738 <HAL_TIM_Base_Start_IT+0x12c>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d00e      	beq.n	80076c8 <HAL_TIM_Base_Start_IT+0xbc>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a23      	ldr	r2, [pc, #140]	; (800773c <HAL_TIM_Base_Start_IT+0x130>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d009      	beq.n	80076c8 <HAL_TIM_Base_Start_IT+0xbc>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a21      	ldr	r2, [pc, #132]	; (8007740 <HAL_TIM_Base_Start_IT+0x134>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d004      	beq.n	80076c8 <HAL_TIM_Base_Start_IT+0xbc>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a20      	ldr	r2, [pc, #128]	; (8007744 <HAL_TIM_Base_Start_IT+0x138>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d115      	bne.n	80076f4 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	689a      	ldr	r2, [r3, #8]
 80076ce:	4b1e      	ldr	r3, [pc, #120]	; (8007748 <HAL_TIM_Base_Start_IT+0x13c>)
 80076d0:	4013      	ands	r3, r2
 80076d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2b06      	cmp	r3, #6
 80076d8:	d015      	beq.n	8007706 <HAL_TIM_Base_Start_IT+0xfa>
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076e0:	d011      	beq.n	8007706 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f042 0201 	orr.w	r2, r2, #1
 80076f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076f2:	e008      	b.n	8007706 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f042 0201 	orr.w	r2, r2, #1
 8007702:	601a      	str	r2, [r3, #0]
 8007704:	e000      	b.n	8007708 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007706:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3714      	adds	r7, #20
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr
 8007716:	bf00      	nop
 8007718:	40012c00 	.word	0x40012c00
 800771c:	50012c00 	.word	0x50012c00
 8007720:	40000400 	.word	0x40000400
 8007724:	50000400 	.word	0x50000400
 8007728:	40000800 	.word	0x40000800
 800772c:	50000800 	.word	0x50000800
 8007730:	40000c00 	.word	0x40000c00
 8007734:	50000c00 	.word	0x50000c00
 8007738:	40013400 	.word	0x40013400
 800773c:	50013400 	.word	0x50013400
 8007740:	40014000 	.word	0x40014000
 8007744:	50014000 	.word	0x50014000
 8007748:	00010007 	.word	0x00010007

0800774c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d101      	bne.n	800775e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	e049      	b.n	80077f2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007764:	b2db      	uxtb	r3, r3
 8007766:	2b00      	cmp	r3, #0
 8007768:	d106      	bne.n	8007778 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 f841 	bl	80077fa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2202      	movs	r2, #2
 800777c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	3304      	adds	r3, #4
 8007788:	4619      	mov	r1, r3
 800778a:	4610      	mov	r0, r2
 800778c:	f000 fd20 	bl	80081d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2201      	movs	r2, #1
 80077a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2201      	movs	r2, #1
 80077bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2201      	movs	r2, #1
 80077cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3708      	adds	r7, #8
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80077fa:	b480      	push	{r7}
 80077fc:	b083      	sub	sp, #12
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007802:	bf00      	nop
 8007804:	370c      	adds	r7, #12
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr
	...

08007810 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d109      	bne.n	8007834 <HAL_TIM_PWM_Start+0x24>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007826:	b2db      	uxtb	r3, r3
 8007828:	2b01      	cmp	r3, #1
 800782a:	bf14      	ite	ne
 800782c:	2301      	movne	r3, #1
 800782e:	2300      	moveq	r3, #0
 8007830:	b2db      	uxtb	r3, r3
 8007832:	e03c      	b.n	80078ae <HAL_TIM_PWM_Start+0x9e>
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	2b04      	cmp	r3, #4
 8007838:	d109      	bne.n	800784e <HAL_TIM_PWM_Start+0x3e>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007840:	b2db      	uxtb	r3, r3
 8007842:	2b01      	cmp	r3, #1
 8007844:	bf14      	ite	ne
 8007846:	2301      	movne	r3, #1
 8007848:	2300      	moveq	r3, #0
 800784a:	b2db      	uxtb	r3, r3
 800784c:	e02f      	b.n	80078ae <HAL_TIM_PWM_Start+0x9e>
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	2b08      	cmp	r3, #8
 8007852:	d109      	bne.n	8007868 <HAL_TIM_PWM_Start+0x58>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800785a:	b2db      	uxtb	r3, r3
 800785c:	2b01      	cmp	r3, #1
 800785e:	bf14      	ite	ne
 8007860:	2301      	movne	r3, #1
 8007862:	2300      	moveq	r3, #0
 8007864:	b2db      	uxtb	r3, r3
 8007866:	e022      	b.n	80078ae <HAL_TIM_PWM_Start+0x9e>
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	2b0c      	cmp	r3, #12
 800786c:	d109      	bne.n	8007882 <HAL_TIM_PWM_Start+0x72>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b01      	cmp	r3, #1
 8007878:	bf14      	ite	ne
 800787a:	2301      	movne	r3, #1
 800787c:	2300      	moveq	r3, #0
 800787e:	b2db      	uxtb	r3, r3
 8007880:	e015      	b.n	80078ae <HAL_TIM_PWM_Start+0x9e>
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	2b10      	cmp	r3, #16
 8007886:	d109      	bne.n	800789c <HAL_TIM_PWM_Start+0x8c>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800788e:	b2db      	uxtb	r3, r3
 8007890:	2b01      	cmp	r3, #1
 8007892:	bf14      	ite	ne
 8007894:	2301      	movne	r3, #1
 8007896:	2300      	moveq	r3, #0
 8007898:	b2db      	uxtb	r3, r3
 800789a:	e008      	b.n	80078ae <HAL_TIM_PWM_Start+0x9e>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	bf14      	ite	ne
 80078a8:	2301      	movne	r3, #1
 80078aa:	2300      	moveq	r3, #0
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d001      	beq.n	80078b6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	e0d8      	b.n	8007a68 <HAL_TIM_PWM_Start+0x258>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d104      	bne.n	80078c6 <HAL_TIM_PWM_Start+0xb6>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2202      	movs	r2, #2
 80078c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078c4:	e023      	b.n	800790e <HAL_TIM_PWM_Start+0xfe>
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	2b04      	cmp	r3, #4
 80078ca:	d104      	bne.n	80078d6 <HAL_TIM_PWM_Start+0xc6>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2202      	movs	r2, #2
 80078d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078d4:	e01b      	b.n	800790e <HAL_TIM_PWM_Start+0xfe>
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	2b08      	cmp	r3, #8
 80078da:	d104      	bne.n	80078e6 <HAL_TIM_PWM_Start+0xd6>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2202      	movs	r2, #2
 80078e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078e4:	e013      	b.n	800790e <HAL_TIM_PWM_Start+0xfe>
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	2b0c      	cmp	r3, #12
 80078ea:	d104      	bne.n	80078f6 <HAL_TIM_PWM_Start+0xe6>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2202      	movs	r2, #2
 80078f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80078f4:	e00b      	b.n	800790e <HAL_TIM_PWM_Start+0xfe>
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	2b10      	cmp	r3, #16
 80078fa:	d104      	bne.n	8007906 <HAL_TIM_PWM_Start+0xf6>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2202      	movs	r2, #2
 8007900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007904:	e003      	b.n	800790e <HAL_TIM_PWM_Start+0xfe>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2202      	movs	r2, #2
 800790a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	2201      	movs	r2, #1
 8007914:	6839      	ldr	r1, [r7, #0]
 8007916:	4618      	mov	r0, r3
 8007918:	f001 f9c6 	bl	8008ca8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a53      	ldr	r2, [pc, #332]	; (8007a70 <HAL_TIM_PWM_Start+0x260>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d02c      	beq.n	8007980 <HAL_TIM_PWM_Start+0x170>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a52      	ldr	r2, [pc, #328]	; (8007a74 <HAL_TIM_PWM_Start+0x264>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d027      	beq.n	8007980 <HAL_TIM_PWM_Start+0x170>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a50      	ldr	r2, [pc, #320]	; (8007a78 <HAL_TIM_PWM_Start+0x268>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d022      	beq.n	8007980 <HAL_TIM_PWM_Start+0x170>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a4f      	ldr	r2, [pc, #316]	; (8007a7c <HAL_TIM_PWM_Start+0x26c>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d01d      	beq.n	8007980 <HAL_TIM_PWM_Start+0x170>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a4d      	ldr	r2, [pc, #308]	; (8007a80 <HAL_TIM_PWM_Start+0x270>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d018      	beq.n	8007980 <HAL_TIM_PWM_Start+0x170>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a4c      	ldr	r2, [pc, #304]	; (8007a84 <HAL_TIM_PWM_Start+0x274>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d013      	beq.n	8007980 <HAL_TIM_PWM_Start+0x170>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a4a      	ldr	r2, [pc, #296]	; (8007a88 <HAL_TIM_PWM_Start+0x278>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d00e      	beq.n	8007980 <HAL_TIM_PWM_Start+0x170>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a49      	ldr	r2, [pc, #292]	; (8007a8c <HAL_TIM_PWM_Start+0x27c>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d009      	beq.n	8007980 <HAL_TIM_PWM_Start+0x170>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a47      	ldr	r2, [pc, #284]	; (8007a90 <HAL_TIM_PWM_Start+0x280>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d004      	beq.n	8007980 <HAL_TIM_PWM_Start+0x170>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a46      	ldr	r2, [pc, #280]	; (8007a94 <HAL_TIM_PWM_Start+0x284>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d101      	bne.n	8007984 <HAL_TIM_PWM_Start+0x174>
 8007980:	2301      	movs	r3, #1
 8007982:	e000      	b.n	8007986 <HAL_TIM_PWM_Start+0x176>
 8007984:	2300      	movs	r3, #0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d007      	beq.n	800799a <HAL_TIM_PWM_Start+0x18a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007998:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a34      	ldr	r2, [pc, #208]	; (8007a70 <HAL_TIM_PWM_Start+0x260>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d040      	beq.n	8007a26 <HAL_TIM_PWM_Start+0x216>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a32      	ldr	r2, [pc, #200]	; (8007a74 <HAL_TIM_PWM_Start+0x264>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d03b      	beq.n	8007a26 <HAL_TIM_PWM_Start+0x216>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079b6:	d036      	beq.n	8007a26 <HAL_TIM_PWM_Start+0x216>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079c0:	d031      	beq.n	8007a26 <HAL_TIM_PWM_Start+0x216>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a34      	ldr	r2, [pc, #208]	; (8007a98 <HAL_TIM_PWM_Start+0x288>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d02c      	beq.n	8007a26 <HAL_TIM_PWM_Start+0x216>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a32      	ldr	r2, [pc, #200]	; (8007a9c <HAL_TIM_PWM_Start+0x28c>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d027      	beq.n	8007a26 <HAL_TIM_PWM_Start+0x216>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a31      	ldr	r2, [pc, #196]	; (8007aa0 <HAL_TIM_PWM_Start+0x290>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d022      	beq.n	8007a26 <HAL_TIM_PWM_Start+0x216>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a2f      	ldr	r2, [pc, #188]	; (8007aa4 <HAL_TIM_PWM_Start+0x294>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d01d      	beq.n	8007a26 <HAL_TIM_PWM_Start+0x216>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a2e      	ldr	r2, [pc, #184]	; (8007aa8 <HAL_TIM_PWM_Start+0x298>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d018      	beq.n	8007a26 <HAL_TIM_PWM_Start+0x216>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a2c      	ldr	r2, [pc, #176]	; (8007aac <HAL_TIM_PWM_Start+0x29c>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d013      	beq.n	8007a26 <HAL_TIM_PWM_Start+0x216>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a1d      	ldr	r2, [pc, #116]	; (8007a78 <HAL_TIM_PWM_Start+0x268>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d00e      	beq.n	8007a26 <HAL_TIM_PWM_Start+0x216>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a1b      	ldr	r2, [pc, #108]	; (8007a7c <HAL_TIM_PWM_Start+0x26c>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d009      	beq.n	8007a26 <HAL_TIM_PWM_Start+0x216>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a1a      	ldr	r2, [pc, #104]	; (8007a80 <HAL_TIM_PWM_Start+0x270>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d004      	beq.n	8007a26 <HAL_TIM_PWM_Start+0x216>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a18      	ldr	r2, [pc, #96]	; (8007a84 <HAL_TIM_PWM_Start+0x274>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d115      	bne.n	8007a52 <HAL_TIM_PWM_Start+0x242>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	689a      	ldr	r2, [r3, #8]
 8007a2c:	4b20      	ldr	r3, [pc, #128]	; (8007ab0 <HAL_TIM_PWM_Start+0x2a0>)
 8007a2e:	4013      	ands	r3, r2
 8007a30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2b06      	cmp	r3, #6
 8007a36:	d015      	beq.n	8007a64 <HAL_TIM_PWM_Start+0x254>
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a3e:	d011      	beq.n	8007a64 <HAL_TIM_PWM_Start+0x254>
    {
      __HAL_TIM_ENABLE(htim);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f042 0201 	orr.w	r2, r2, #1
 8007a4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a50:	e008      	b.n	8007a64 <HAL_TIM_PWM_Start+0x254>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f042 0201 	orr.w	r2, r2, #1
 8007a60:	601a      	str	r2, [r3, #0]
 8007a62:	e000      	b.n	8007a66 <HAL_TIM_PWM_Start+0x256>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a64:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007a66:	2300      	movs	r3, #0
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3710      	adds	r7, #16
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	40012c00 	.word	0x40012c00
 8007a74:	50012c00 	.word	0x50012c00
 8007a78:	40013400 	.word	0x40013400
 8007a7c:	50013400 	.word	0x50013400
 8007a80:	40014000 	.word	0x40014000
 8007a84:	50014000 	.word	0x50014000
 8007a88:	40014400 	.word	0x40014400
 8007a8c:	50014400 	.word	0x50014400
 8007a90:	40014800 	.word	0x40014800
 8007a94:	50014800 	.word	0x50014800
 8007a98:	40000400 	.word	0x40000400
 8007a9c:	50000400 	.word	0x50000400
 8007aa0:	40000800 	.word	0x40000800
 8007aa4:	50000800 	.word	0x50000800
 8007aa8:	40000c00 	.word	0x40000c00
 8007aac:	50000c00 	.word	0x50000c00
 8007ab0:	00010007 	.word	0x00010007

08007ab4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	68db      	ldr	r3, [r3, #12]
 8007ac2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	f003 0302 	and.w	r3, r3, #2
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d020      	beq.n	8007b18 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f003 0302 	and.w	r3, r3, #2
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d01b      	beq.n	8007b18 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f06f 0202 	mvn.w	r2, #2
 8007ae8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2201      	movs	r2, #1
 8007aee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	699b      	ldr	r3, [r3, #24]
 8007af6:	f003 0303 	and.w	r3, r3, #3
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d003      	beq.n	8007b06 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 fb48 	bl	8008194 <HAL_TIM_IC_CaptureCallback>
 8007b04:	e005      	b.n	8007b12 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 fb3a 	bl	8008180 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 fb4b 	bl	80081a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	f003 0304 	and.w	r3, r3, #4
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d020      	beq.n	8007b64 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f003 0304 	and.w	r3, r3, #4
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d01b      	beq.n	8007b64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f06f 0204 	mvn.w	r2, #4
 8007b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2202      	movs	r2, #2
 8007b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	699b      	ldr	r3, [r3, #24]
 8007b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d003      	beq.n	8007b52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 fb22 	bl	8008194 <HAL_TIM_IC_CaptureCallback>
 8007b50:	e005      	b.n	8007b5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 fb14 	bl	8008180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 fb25 	bl	80081a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	f003 0308 	and.w	r3, r3, #8
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d020      	beq.n	8007bb0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f003 0308 	and.w	r3, r3, #8
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d01b      	beq.n	8007bb0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f06f 0208 	mvn.w	r2, #8
 8007b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2204      	movs	r2, #4
 8007b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	69db      	ldr	r3, [r3, #28]
 8007b8e:	f003 0303 	and.w	r3, r3, #3
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d003      	beq.n	8007b9e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 fafc 	bl	8008194 <HAL_TIM_IC_CaptureCallback>
 8007b9c:	e005      	b.n	8007baa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 faee 	bl	8008180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 faff 	bl	80081a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	f003 0310 	and.w	r3, r3, #16
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d020      	beq.n	8007bfc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f003 0310 	and.w	r3, r3, #16
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d01b      	beq.n	8007bfc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f06f 0210 	mvn.w	r2, #16
 8007bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2208      	movs	r2, #8
 8007bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	69db      	ldr	r3, [r3, #28]
 8007bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d003      	beq.n	8007bea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 fad6 	bl	8008194 <HAL_TIM_IC_CaptureCallback>
 8007be8:	e005      	b.n	8007bf6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 fac8 	bl	8008180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 fad9 	bl	80081a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	f003 0301 	and.w	r3, r3, #1
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d00c      	beq.n	8007c20 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f003 0301 	and.w	r3, r3, #1
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d007      	beq.n	8007c20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f06f 0201 	mvn.w	r2, #1
 8007c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f7f9 f83a 	bl	8000c94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d104      	bne.n	8007c34 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d00c      	beq.n	8007c4e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d007      	beq.n	8007c4e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8007c46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f001 f91f 	bl	8008e8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00c      	beq.n	8007c72 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d007      	beq.n	8007c72 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007c6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f001 f917 	bl	8008ea0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00c      	beq.n	8007c96 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d007      	beq.n	8007c96 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007c8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 fa93 	bl	80081bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	f003 0320 	and.w	r3, r3, #32
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d00c      	beq.n	8007cba <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f003 0320 	and.w	r3, r3, #32
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d007      	beq.n	8007cba <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f06f 0220 	mvn.w	r2, #32
 8007cb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f001 f8df 	bl	8008e78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d00c      	beq.n	8007cde <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d007      	beq.n	8007cde <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8007cd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f001 f8eb 	bl	8008eb4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00c      	beq.n	8007d02 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d007      	beq.n	8007d02 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8007cfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f001 f8e3 	bl	8008ec8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d00c      	beq.n	8007d26 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d007      	beq.n	8007d26 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8007d1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f001 f8db 	bl	8008edc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d00c      	beq.n	8007d4a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d007      	beq.n	8007d4a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8007d42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f001 f8d3 	bl	8008ef0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d4a:	bf00      	nop
 8007d4c:	3710      	adds	r7, #16
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
	...

08007d54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b086      	sub	sp, #24
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	60f8      	str	r0, [r7, #12]
 8007d5c:	60b9      	str	r1, [r7, #8]
 8007d5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d60:	2300      	movs	r3, #0
 8007d62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d101      	bne.n	8007d72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007d6e:	2302      	movs	r3, #2
 8007d70:	e0ff      	b.n	8007f72 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2201      	movs	r2, #1
 8007d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2b14      	cmp	r3, #20
 8007d7e:	f200 80f0 	bhi.w	8007f62 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007d82:	a201      	add	r2, pc, #4	; (adr r2, 8007d88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d88:	08007ddd 	.word	0x08007ddd
 8007d8c:	08007f63 	.word	0x08007f63
 8007d90:	08007f63 	.word	0x08007f63
 8007d94:	08007f63 	.word	0x08007f63
 8007d98:	08007e1d 	.word	0x08007e1d
 8007d9c:	08007f63 	.word	0x08007f63
 8007da0:	08007f63 	.word	0x08007f63
 8007da4:	08007f63 	.word	0x08007f63
 8007da8:	08007e5f 	.word	0x08007e5f
 8007dac:	08007f63 	.word	0x08007f63
 8007db0:	08007f63 	.word	0x08007f63
 8007db4:	08007f63 	.word	0x08007f63
 8007db8:	08007e9f 	.word	0x08007e9f
 8007dbc:	08007f63 	.word	0x08007f63
 8007dc0:	08007f63 	.word	0x08007f63
 8007dc4:	08007f63 	.word	0x08007f63
 8007dc8:	08007ee1 	.word	0x08007ee1
 8007dcc:	08007f63 	.word	0x08007f63
 8007dd0:	08007f63 	.word	0x08007f63
 8007dd4:	08007f63 	.word	0x08007f63
 8007dd8:	08007f21 	.word	0x08007f21
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	68b9      	ldr	r1, [r7, #8]
 8007de2:	4618      	mov	r0, r3
 8007de4:	f000 faee 	bl	80083c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	699a      	ldr	r2, [r3, #24]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f042 0208 	orr.w	r2, r2, #8
 8007df6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	699a      	ldr	r2, [r3, #24]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f022 0204 	bic.w	r2, r2, #4
 8007e06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	6999      	ldr	r1, [r3, #24]
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	691a      	ldr	r2, [r3, #16]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	430a      	orrs	r2, r1
 8007e18:	619a      	str	r2, [r3, #24]
      break;
 8007e1a:	e0a5      	b.n	8007f68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	68b9      	ldr	r1, [r7, #8]
 8007e22:	4618      	mov	r0, r3
 8007e24:	f000 fb90 	bl	8008548 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	699a      	ldr	r2, [r3, #24]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	699a      	ldr	r2, [r3, #24]
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	6999      	ldr	r1, [r3, #24]
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	691b      	ldr	r3, [r3, #16]
 8007e52:	021a      	lsls	r2, r3, #8
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	430a      	orrs	r2, r1
 8007e5a:	619a      	str	r2, [r3, #24]
      break;
 8007e5c:	e084      	b.n	8007f68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68b9      	ldr	r1, [r7, #8]
 8007e64:	4618      	mov	r0, r3
 8007e66:	f000 fc1f 	bl	80086a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	69da      	ldr	r2, [r3, #28]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f042 0208 	orr.w	r2, r2, #8
 8007e78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	69da      	ldr	r2, [r3, #28]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f022 0204 	bic.w	r2, r2, #4
 8007e88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	69d9      	ldr	r1, [r3, #28]
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	691a      	ldr	r2, [r3, #16]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	430a      	orrs	r2, r1
 8007e9a:	61da      	str	r2, [r3, #28]
      break;
 8007e9c:	e064      	b.n	8007f68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	68b9      	ldr	r1, [r7, #8]
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f000 fcad 	bl	8008804 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	69da      	ldr	r2, [r3, #28]
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007eb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	69da      	ldr	r2, [r3, #28]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ec8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	69d9      	ldr	r1, [r3, #28]
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	691b      	ldr	r3, [r3, #16]
 8007ed4:	021a      	lsls	r2, r3, #8
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	430a      	orrs	r2, r1
 8007edc:	61da      	str	r2, [r3, #28]
      break;
 8007ede:	e043      	b.n	8007f68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	68b9      	ldr	r1, [r7, #8]
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f000 fd3c 	bl	8008964 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f042 0208 	orr.w	r2, r2, #8
 8007efa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f022 0204 	bic.w	r2, r2, #4
 8007f0a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	691a      	ldr	r2, [r3, #16]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	430a      	orrs	r2, r1
 8007f1c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007f1e:	e023      	b.n	8007f68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	68b9      	ldr	r1, [r7, #8]
 8007f26:	4618      	mov	r0, r3
 8007f28:	f000 fd9e 	bl	8008a68 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f3a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f4a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	691b      	ldr	r3, [r3, #16]
 8007f56:	021a      	lsls	r2, r3, #8
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	430a      	orrs	r2, r1
 8007f5e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007f60:	e002      	b.n	8007f68 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	75fb      	strb	r3, [r7, #23]
      break;
 8007f66:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007f70:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3718      	adds	r7, #24
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop

08007f7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f86:	2300      	movs	r3, #0
 8007f88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d101      	bne.n	8007f98 <HAL_TIM_ConfigClockSource+0x1c>
 8007f94:	2302      	movs	r3, #2
 8007f96:	e0e6      	b.n	8008166 <HAL_TIM_ConfigClockSource+0x1ea>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2202      	movs	r2, #2
 8007fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8007fb6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007fba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007fc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	68ba      	ldr	r2, [r7, #8]
 8007fca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a67      	ldr	r2, [pc, #412]	; (8008170 <HAL_TIM_ConfigClockSource+0x1f4>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	f000 80b1 	beq.w	800813a <HAL_TIM_ConfigClockSource+0x1be>
 8007fd8:	4a65      	ldr	r2, [pc, #404]	; (8008170 <HAL_TIM_ConfigClockSource+0x1f4>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	f200 80b6 	bhi.w	800814c <HAL_TIM_ConfigClockSource+0x1d0>
 8007fe0:	4a64      	ldr	r2, [pc, #400]	; (8008174 <HAL_TIM_ConfigClockSource+0x1f8>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	f000 80a9 	beq.w	800813a <HAL_TIM_ConfigClockSource+0x1be>
 8007fe8:	4a62      	ldr	r2, [pc, #392]	; (8008174 <HAL_TIM_ConfigClockSource+0x1f8>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	f200 80ae 	bhi.w	800814c <HAL_TIM_ConfigClockSource+0x1d0>
 8007ff0:	4a61      	ldr	r2, [pc, #388]	; (8008178 <HAL_TIM_ConfigClockSource+0x1fc>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	f000 80a1 	beq.w	800813a <HAL_TIM_ConfigClockSource+0x1be>
 8007ff8:	4a5f      	ldr	r2, [pc, #380]	; (8008178 <HAL_TIM_ConfigClockSource+0x1fc>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	f200 80a6 	bhi.w	800814c <HAL_TIM_ConfigClockSource+0x1d0>
 8008000:	4a5e      	ldr	r2, [pc, #376]	; (800817c <HAL_TIM_ConfigClockSource+0x200>)
 8008002:	4293      	cmp	r3, r2
 8008004:	f000 8099 	beq.w	800813a <HAL_TIM_ConfigClockSource+0x1be>
 8008008:	4a5c      	ldr	r2, [pc, #368]	; (800817c <HAL_TIM_ConfigClockSource+0x200>)
 800800a:	4293      	cmp	r3, r2
 800800c:	f200 809e 	bhi.w	800814c <HAL_TIM_ConfigClockSource+0x1d0>
 8008010:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008014:	f000 8091 	beq.w	800813a <HAL_TIM_ConfigClockSource+0x1be>
 8008018:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800801c:	f200 8096 	bhi.w	800814c <HAL_TIM_ConfigClockSource+0x1d0>
 8008020:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008024:	f000 8089 	beq.w	800813a <HAL_TIM_ConfigClockSource+0x1be>
 8008028:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800802c:	f200 808e 	bhi.w	800814c <HAL_TIM_ConfigClockSource+0x1d0>
 8008030:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008034:	d03e      	beq.n	80080b4 <HAL_TIM_ConfigClockSource+0x138>
 8008036:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800803a:	f200 8087 	bhi.w	800814c <HAL_TIM_ConfigClockSource+0x1d0>
 800803e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008042:	f000 8086 	beq.w	8008152 <HAL_TIM_ConfigClockSource+0x1d6>
 8008046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800804a:	d87f      	bhi.n	800814c <HAL_TIM_ConfigClockSource+0x1d0>
 800804c:	2b70      	cmp	r3, #112	; 0x70
 800804e:	d01a      	beq.n	8008086 <HAL_TIM_ConfigClockSource+0x10a>
 8008050:	2b70      	cmp	r3, #112	; 0x70
 8008052:	d87b      	bhi.n	800814c <HAL_TIM_ConfigClockSource+0x1d0>
 8008054:	2b60      	cmp	r3, #96	; 0x60
 8008056:	d050      	beq.n	80080fa <HAL_TIM_ConfigClockSource+0x17e>
 8008058:	2b60      	cmp	r3, #96	; 0x60
 800805a:	d877      	bhi.n	800814c <HAL_TIM_ConfigClockSource+0x1d0>
 800805c:	2b50      	cmp	r3, #80	; 0x50
 800805e:	d03c      	beq.n	80080da <HAL_TIM_ConfigClockSource+0x15e>
 8008060:	2b50      	cmp	r3, #80	; 0x50
 8008062:	d873      	bhi.n	800814c <HAL_TIM_ConfigClockSource+0x1d0>
 8008064:	2b40      	cmp	r3, #64	; 0x40
 8008066:	d058      	beq.n	800811a <HAL_TIM_ConfigClockSource+0x19e>
 8008068:	2b40      	cmp	r3, #64	; 0x40
 800806a:	d86f      	bhi.n	800814c <HAL_TIM_ConfigClockSource+0x1d0>
 800806c:	2b30      	cmp	r3, #48	; 0x30
 800806e:	d064      	beq.n	800813a <HAL_TIM_ConfigClockSource+0x1be>
 8008070:	2b30      	cmp	r3, #48	; 0x30
 8008072:	d86b      	bhi.n	800814c <HAL_TIM_ConfigClockSource+0x1d0>
 8008074:	2b20      	cmp	r3, #32
 8008076:	d060      	beq.n	800813a <HAL_TIM_ConfigClockSource+0x1be>
 8008078:	2b20      	cmp	r3, #32
 800807a:	d867      	bhi.n	800814c <HAL_TIM_ConfigClockSource+0x1d0>
 800807c:	2b00      	cmp	r3, #0
 800807e:	d05c      	beq.n	800813a <HAL_TIM_ConfigClockSource+0x1be>
 8008080:	2b10      	cmp	r3, #16
 8008082:	d05a      	beq.n	800813a <HAL_TIM_ConfigClockSource+0x1be>
 8008084:	e062      	b.n	800814c <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008096:	f000 fde7 	bl	8008c68 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80080a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	68ba      	ldr	r2, [r7, #8]
 80080b0:	609a      	str	r2, [r3, #8]
      break;
 80080b2:	e04f      	b.n	8008154 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80080c4:	f000 fdd0 	bl	8008c68 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	689a      	ldr	r2, [r3, #8]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80080d6:	609a      	str	r2, [r3, #8]
      break;
 80080d8:	e03c      	b.n	8008154 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80080e6:	461a      	mov	r2, r3
 80080e8:	f000 fd42 	bl	8008b70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	2150      	movs	r1, #80	; 0x50
 80080f2:	4618      	mov	r0, r3
 80080f4:	f000 fd9b 	bl	8008c2e <TIM_ITRx_SetConfig>
      break;
 80080f8:	e02c      	b.n	8008154 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008106:	461a      	mov	r2, r3
 8008108:	f000 fd61 	bl	8008bce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	2160      	movs	r1, #96	; 0x60
 8008112:	4618      	mov	r0, r3
 8008114:	f000 fd8b 	bl	8008c2e <TIM_ITRx_SetConfig>
      break;
 8008118:	e01c      	b.n	8008154 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008126:	461a      	mov	r2, r3
 8008128:	f000 fd22 	bl	8008b70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2140      	movs	r1, #64	; 0x40
 8008132:	4618      	mov	r0, r3
 8008134:	f000 fd7b 	bl	8008c2e <TIM_ITRx_SetConfig>
      break;
 8008138:	e00c      	b.n	8008154 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4619      	mov	r1, r3
 8008144:	4610      	mov	r0, r2
 8008146:	f000 fd72 	bl	8008c2e <TIM_ITRx_SetConfig>
      break;
 800814a:	e003      	b.n	8008154 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800814c:	2301      	movs	r3, #1
 800814e:	73fb      	strb	r3, [r7, #15]
      break;
 8008150:	e000      	b.n	8008154 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 8008152:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2201      	movs	r2, #1
 8008158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2200      	movs	r2, #0
 8008160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008164:	7bfb      	ldrb	r3, [r7, #15]
}
 8008166:	4618      	mov	r0, r3
 8008168:	3710      	adds	r7, #16
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	00100070 	.word	0x00100070
 8008174:	00100040 	.word	0x00100040
 8008178:	00100030 	.word	0x00100030
 800817c:	00100020 	.word	0x00100020

08008180 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008188:	bf00      	nop
 800818a:	370c      	adds	r7, #12
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr

08008194 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800819c:	bf00      	nop
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr

080081a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80081b0:	bf00      	nop
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80081c4:	bf00      	nop
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b085      	sub	sp, #20
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	4a68      	ldr	r2, [pc, #416]	; (8008384 <TIM_Base_SetConfig+0x1b4>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d02b      	beq.n	8008240 <TIM_Base_SetConfig+0x70>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	4a67      	ldr	r2, [pc, #412]	; (8008388 <TIM_Base_SetConfig+0x1b8>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d027      	beq.n	8008240 <TIM_Base_SetConfig+0x70>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081f6:	d023      	beq.n	8008240 <TIM_Base_SetConfig+0x70>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80081fe:	d01f      	beq.n	8008240 <TIM_Base_SetConfig+0x70>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4a62      	ldr	r2, [pc, #392]	; (800838c <TIM_Base_SetConfig+0x1bc>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d01b      	beq.n	8008240 <TIM_Base_SetConfig+0x70>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a61      	ldr	r2, [pc, #388]	; (8008390 <TIM_Base_SetConfig+0x1c0>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d017      	beq.n	8008240 <TIM_Base_SetConfig+0x70>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4a60      	ldr	r2, [pc, #384]	; (8008394 <TIM_Base_SetConfig+0x1c4>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d013      	beq.n	8008240 <TIM_Base_SetConfig+0x70>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	4a5f      	ldr	r2, [pc, #380]	; (8008398 <TIM_Base_SetConfig+0x1c8>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d00f      	beq.n	8008240 <TIM_Base_SetConfig+0x70>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4a5e      	ldr	r2, [pc, #376]	; (800839c <TIM_Base_SetConfig+0x1cc>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d00b      	beq.n	8008240 <TIM_Base_SetConfig+0x70>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	4a5d      	ldr	r2, [pc, #372]	; (80083a0 <TIM_Base_SetConfig+0x1d0>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d007      	beq.n	8008240 <TIM_Base_SetConfig+0x70>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	4a5c      	ldr	r2, [pc, #368]	; (80083a4 <TIM_Base_SetConfig+0x1d4>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d003      	beq.n	8008240 <TIM_Base_SetConfig+0x70>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4a5b      	ldr	r2, [pc, #364]	; (80083a8 <TIM_Base_SetConfig+0x1d8>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d108      	bne.n	8008252 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008246:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	68fa      	ldr	r2, [r7, #12]
 800824e:	4313      	orrs	r3, r2
 8008250:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	4a4b      	ldr	r2, [pc, #300]	; (8008384 <TIM_Base_SetConfig+0x1b4>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d043      	beq.n	80082e2 <TIM_Base_SetConfig+0x112>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4a4a      	ldr	r2, [pc, #296]	; (8008388 <TIM_Base_SetConfig+0x1b8>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d03f      	beq.n	80082e2 <TIM_Base_SetConfig+0x112>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008268:	d03b      	beq.n	80082e2 <TIM_Base_SetConfig+0x112>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008270:	d037      	beq.n	80082e2 <TIM_Base_SetConfig+0x112>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4a45      	ldr	r2, [pc, #276]	; (800838c <TIM_Base_SetConfig+0x1bc>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d033      	beq.n	80082e2 <TIM_Base_SetConfig+0x112>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a44      	ldr	r2, [pc, #272]	; (8008390 <TIM_Base_SetConfig+0x1c0>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d02f      	beq.n	80082e2 <TIM_Base_SetConfig+0x112>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4a43      	ldr	r2, [pc, #268]	; (8008394 <TIM_Base_SetConfig+0x1c4>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d02b      	beq.n	80082e2 <TIM_Base_SetConfig+0x112>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a42      	ldr	r2, [pc, #264]	; (8008398 <TIM_Base_SetConfig+0x1c8>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d027      	beq.n	80082e2 <TIM_Base_SetConfig+0x112>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4a41      	ldr	r2, [pc, #260]	; (800839c <TIM_Base_SetConfig+0x1cc>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d023      	beq.n	80082e2 <TIM_Base_SetConfig+0x112>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4a40      	ldr	r2, [pc, #256]	; (80083a0 <TIM_Base_SetConfig+0x1d0>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d01f      	beq.n	80082e2 <TIM_Base_SetConfig+0x112>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4a3f      	ldr	r2, [pc, #252]	; (80083a4 <TIM_Base_SetConfig+0x1d4>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d01b      	beq.n	80082e2 <TIM_Base_SetConfig+0x112>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4a3e      	ldr	r2, [pc, #248]	; (80083a8 <TIM_Base_SetConfig+0x1d8>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d017      	beq.n	80082e2 <TIM_Base_SetConfig+0x112>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4a3d      	ldr	r2, [pc, #244]	; (80083ac <TIM_Base_SetConfig+0x1dc>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d013      	beq.n	80082e2 <TIM_Base_SetConfig+0x112>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4a3c      	ldr	r2, [pc, #240]	; (80083b0 <TIM_Base_SetConfig+0x1e0>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d00f      	beq.n	80082e2 <TIM_Base_SetConfig+0x112>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	4a3b      	ldr	r2, [pc, #236]	; (80083b4 <TIM_Base_SetConfig+0x1e4>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d00b      	beq.n	80082e2 <TIM_Base_SetConfig+0x112>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4a3a      	ldr	r2, [pc, #232]	; (80083b8 <TIM_Base_SetConfig+0x1e8>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d007      	beq.n	80082e2 <TIM_Base_SetConfig+0x112>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	4a39      	ldr	r2, [pc, #228]	; (80083bc <TIM_Base_SetConfig+0x1ec>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d003      	beq.n	80082e2 <TIM_Base_SetConfig+0x112>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4a38      	ldr	r2, [pc, #224]	; (80083c0 <TIM_Base_SetConfig+0x1f0>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d108      	bne.n	80082f4 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	4313      	orrs	r3, r2
 80082f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	695b      	ldr	r3, [r3, #20]
 80082fe:	4313      	orrs	r3, r2
 8008300:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	68fa      	ldr	r2, [r7, #12]
 8008306:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	689a      	ldr	r2, [r3, #8]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	4a1a      	ldr	r2, [pc, #104]	; (8008384 <TIM_Base_SetConfig+0x1b4>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d023      	beq.n	8008368 <TIM_Base_SetConfig+0x198>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	4a19      	ldr	r2, [pc, #100]	; (8008388 <TIM_Base_SetConfig+0x1b8>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d01f      	beq.n	8008368 <TIM_Base_SetConfig+0x198>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	4a1e      	ldr	r2, [pc, #120]	; (80083a4 <TIM_Base_SetConfig+0x1d4>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d01b      	beq.n	8008368 <TIM_Base_SetConfig+0x198>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	4a1d      	ldr	r2, [pc, #116]	; (80083a8 <TIM_Base_SetConfig+0x1d8>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d017      	beq.n	8008368 <TIM_Base_SetConfig+0x198>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	4a1c      	ldr	r2, [pc, #112]	; (80083ac <TIM_Base_SetConfig+0x1dc>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d013      	beq.n	8008368 <TIM_Base_SetConfig+0x198>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a1b      	ldr	r2, [pc, #108]	; (80083b0 <TIM_Base_SetConfig+0x1e0>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d00f      	beq.n	8008368 <TIM_Base_SetConfig+0x198>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	4a1a      	ldr	r2, [pc, #104]	; (80083b4 <TIM_Base_SetConfig+0x1e4>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d00b      	beq.n	8008368 <TIM_Base_SetConfig+0x198>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	4a19      	ldr	r2, [pc, #100]	; (80083b8 <TIM_Base_SetConfig+0x1e8>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d007      	beq.n	8008368 <TIM_Base_SetConfig+0x198>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4a18      	ldr	r2, [pc, #96]	; (80083bc <TIM_Base_SetConfig+0x1ec>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d003      	beq.n	8008368 <TIM_Base_SetConfig+0x198>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	4a17      	ldr	r2, [pc, #92]	; (80083c0 <TIM_Base_SetConfig+0x1f0>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d103      	bne.n	8008370 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	691a      	ldr	r2, [r3, #16]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	615a      	str	r2, [r3, #20]
}
 8008376:	bf00      	nop
 8008378:	3714      	adds	r7, #20
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	40012c00 	.word	0x40012c00
 8008388:	50012c00 	.word	0x50012c00
 800838c:	40000400 	.word	0x40000400
 8008390:	50000400 	.word	0x50000400
 8008394:	40000800 	.word	0x40000800
 8008398:	50000800 	.word	0x50000800
 800839c:	40000c00 	.word	0x40000c00
 80083a0:	50000c00 	.word	0x50000c00
 80083a4:	40013400 	.word	0x40013400
 80083a8:	50013400 	.word	0x50013400
 80083ac:	40014000 	.word	0x40014000
 80083b0:	50014000 	.word	0x50014000
 80083b4:	40014400 	.word	0x40014400
 80083b8:	50014400 	.word	0x50014400
 80083bc:	40014800 	.word	0x40014800
 80083c0:	50014800 	.word	0x50014800

080083c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b087      	sub	sp, #28
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a1b      	ldr	r3, [r3, #32]
 80083d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6a1b      	ldr	r3, [r3, #32]
 80083d8:	f023 0201 	bic.w	r2, r3, #1
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	699b      	ldr	r3, [r3, #24]
 80083ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f023 0303 	bic.w	r3, r3, #3
 80083fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	68fa      	ldr	r2, [r7, #12]
 8008406:	4313      	orrs	r3, r2
 8008408:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	f023 0302 	bic.w	r3, r3, #2
 8008410:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	689b      	ldr	r3, [r3, #8]
 8008416:	697a      	ldr	r2, [r7, #20]
 8008418:	4313      	orrs	r3, r2
 800841a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	4a40      	ldr	r2, [pc, #256]	; (8008520 <TIM_OC1_SetConfig+0x15c>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d023      	beq.n	800846c <TIM_OC1_SetConfig+0xa8>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	4a3f      	ldr	r2, [pc, #252]	; (8008524 <TIM_OC1_SetConfig+0x160>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d01f      	beq.n	800846c <TIM_OC1_SetConfig+0xa8>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	4a3e      	ldr	r2, [pc, #248]	; (8008528 <TIM_OC1_SetConfig+0x164>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d01b      	beq.n	800846c <TIM_OC1_SetConfig+0xa8>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	4a3d      	ldr	r2, [pc, #244]	; (800852c <TIM_OC1_SetConfig+0x168>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d017      	beq.n	800846c <TIM_OC1_SetConfig+0xa8>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	4a3c      	ldr	r2, [pc, #240]	; (8008530 <TIM_OC1_SetConfig+0x16c>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d013      	beq.n	800846c <TIM_OC1_SetConfig+0xa8>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	4a3b      	ldr	r2, [pc, #236]	; (8008534 <TIM_OC1_SetConfig+0x170>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d00f      	beq.n	800846c <TIM_OC1_SetConfig+0xa8>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	4a3a      	ldr	r2, [pc, #232]	; (8008538 <TIM_OC1_SetConfig+0x174>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d00b      	beq.n	800846c <TIM_OC1_SetConfig+0xa8>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	4a39      	ldr	r2, [pc, #228]	; (800853c <TIM_OC1_SetConfig+0x178>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d007      	beq.n	800846c <TIM_OC1_SetConfig+0xa8>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	4a38      	ldr	r2, [pc, #224]	; (8008540 <TIM_OC1_SetConfig+0x17c>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d003      	beq.n	800846c <TIM_OC1_SetConfig+0xa8>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	4a37      	ldr	r2, [pc, #220]	; (8008544 <TIM_OC1_SetConfig+0x180>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d10c      	bne.n	8008486 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	f023 0308 	bic.w	r3, r3, #8
 8008472:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	697a      	ldr	r2, [r7, #20]
 800847a:	4313      	orrs	r3, r2
 800847c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	f023 0304 	bic.w	r3, r3, #4
 8008484:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	4a25      	ldr	r2, [pc, #148]	; (8008520 <TIM_OC1_SetConfig+0x15c>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d023      	beq.n	80084d6 <TIM_OC1_SetConfig+0x112>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4a24      	ldr	r2, [pc, #144]	; (8008524 <TIM_OC1_SetConfig+0x160>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d01f      	beq.n	80084d6 <TIM_OC1_SetConfig+0x112>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	4a23      	ldr	r2, [pc, #140]	; (8008528 <TIM_OC1_SetConfig+0x164>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d01b      	beq.n	80084d6 <TIM_OC1_SetConfig+0x112>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4a22      	ldr	r2, [pc, #136]	; (800852c <TIM_OC1_SetConfig+0x168>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d017      	beq.n	80084d6 <TIM_OC1_SetConfig+0x112>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	4a21      	ldr	r2, [pc, #132]	; (8008530 <TIM_OC1_SetConfig+0x16c>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d013      	beq.n	80084d6 <TIM_OC1_SetConfig+0x112>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4a20      	ldr	r2, [pc, #128]	; (8008534 <TIM_OC1_SetConfig+0x170>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d00f      	beq.n	80084d6 <TIM_OC1_SetConfig+0x112>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	4a1f      	ldr	r2, [pc, #124]	; (8008538 <TIM_OC1_SetConfig+0x174>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d00b      	beq.n	80084d6 <TIM_OC1_SetConfig+0x112>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	4a1e      	ldr	r2, [pc, #120]	; (800853c <TIM_OC1_SetConfig+0x178>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d007      	beq.n	80084d6 <TIM_OC1_SetConfig+0x112>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	4a1d      	ldr	r2, [pc, #116]	; (8008540 <TIM_OC1_SetConfig+0x17c>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d003      	beq.n	80084d6 <TIM_OC1_SetConfig+0x112>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	4a1c      	ldr	r2, [pc, #112]	; (8008544 <TIM_OC1_SetConfig+0x180>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d111      	bne.n	80084fa <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80084e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	695b      	ldr	r3, [r3, #20]
 80084ea:	693a      	ldr	r2, [r7, #16]
 80084ec:	4313      	orrs	r3, r2
 80084ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	699b      	ldr	r3, [r3, #24]
 80084f4:	693a      	ldr	r2, [r7, #16]
 80084f6:	4313      	orrs	r3, r2
 80084f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	693a      	ldr	r2, [r7, #16]
 80084fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	68fa      	ldr	r2, [r7, #12]
 8008504:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	685a      	ldr	r2, [r3, #4]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	697a      	ldr	r2, [r7, #20]
 8008512:	621a      	str	r2, [r3, #32]
}
 8008514:	bf00      	nop
 8008516:	371c      	adds	r7, #28
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr
 8008520:	40012c00 	.word	0x40012c00
 8008524:	50012c00 	.word	0x50012c00
 8008528:	40013400 	.word	0x40013400
 800852c:	50013400 	.word	0x50013400
 8008530:	40014000 	.word	0x40014000
 8008534:	50014000 	.word	0x50014000
 8008538:	40014400 	.word	0x40014400
 800853c:	50014400 	.word	0x50014400
 8008540:	40014800 	.word	0x40014800
 8008544:	50014800 	.word	0x50014800

08008548 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008548:	b480      	push	{r7}
 800854a:	b087      	sub	sp, #28
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6a1b      	ldr	r3, [r3, #32]
 8008556:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6a1b      	ldr	r3, [r3, #32]
 800855c:	f023 0210 	bic.w	r2, r3, #16
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	699b      	ldr	r3, [r3, #24]
 800856e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008576:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800857a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008582:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	021b      	lsls	r3, r3, #8
 800858a:	68fa      	ldr	r2, [r7, #12]
 800858c:	4313      	orrs	r3, r2
 800858e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	f023 0320 	bic.w	r3, r3, #32
 8008596:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	689b      	ldr	r3, [r3, #8]
 800859c:	011b      	lsls	r3, r3, #4
 800859e:	697a      	ldr	r2, [r7, #20]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	4a36      	ldr	r2, [pc, #216]	; (8008680 <TIM_OC2_SetConfig+0x138>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d00b      	beq.n	80085c4 <TIM_OC2_SetConfig+0x7c>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	4a35      	ldr	r2, [pc, #212]	; (8008684 <TIM_OC2_SetConfig+0x13c>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d007      	beq.n	80085c4 <TIM_OC2_SetConfig+0x7c>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	4a34      	ldr	r2, [pc, #208]	; (8008688 <TIM_OC2_SetConfig+0x140>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d003      	beq.n	80085c4 <TIM_OC2_SetConfig+0x7c>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	4a33      	ldr	r2, [pc, #204]	; (800868c <TIM_OC2_SetConfig+0x144>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d10d      	bne.n	80085e0 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	68db      	ldr	r3, [r3, #12]
 80085d0:	011b      	lsls	r3, r3, #4
 80085d2:	697a      	ldr	r2, [r7, #20]
 80085d4:	4313      	orrs	r3, r2
 80085d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4a27      	ldr	r2, [pc, #156]	; (8008680 <TIM_OC2_SetConfig+0x138>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d023      	beq.n	8008630 <TIM_OC2_SetConfig+0xe8>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4a26      	ldr	r2, [pc, #152]	; (8008684 <TIM_OC2_SetConfig+0x13c>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d01f      	beq.n	8008630 <TIM_OC2_SetConfig+0xe8>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	4a25      	ldr	r2, [pc, #148]	; (8008688 <TIM_OC2_SetConfig+0x140>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d01b      	beq.n	8008630 <TIM_OC2_SetConfig+0xe8>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	4a24      	ldr	r2, [pc, #144]	; (800868c <TIM_OC2_SetConfig+0x144>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d017      	beq.n	8008630 <TIM_OC2_SetConfig+0xe8>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4a23      	ldr	r2, [pc, #140]	; (8008690 <TIM_OC2_SetConfig+0x148>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d013      	beq.n	8008630 <TIM_OC2_SetConfig+0xe8>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	4a22      	ldr	r2, [pc, #136]	; (8008694 <TIM_OC2_SetConfig+0x14c>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d00f      	beq.n	8008630 <TIM_OC2_SetConfig+0xe8>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	4a21      	ldr	r2, [pc, #132]	; (8008698 <TIM_OC2_SetConfig+0x150>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d00b      	beq.n	8008630 <TIM_OC2_SetConfig+0xe8>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4a20      	ldr	r2, [pc, #128]	; (800869c <TIM_OC2_SetConfig+0x154>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d007      	beq.n	8008630 <TIM_OC2_SetConfig+0xe8>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4a1f      	ldr	r2, [pc, #124]	; (80086a0 <TIM_OC2_SetConfig+0x158>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d003      	beq.n	8008630 <TIM_OC2_SetConfig+0xe8>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a1e      	ldr	r2, [pc, #120]	; (80086a4 <TIM_OC2_SetConfig+0x15c>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d113      	bne.n	8008658 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008636:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800863e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	695b      	ldr	r3, [r3, #20]
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	693a      	ldr	r2, [r7, #16]
 8008648:	4313      	orrs	r3, r2
 800864a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	699b      	ldr	r3, [r3, #24]
 8008650:	009b      	lsls	r3, r3, #2
 8008652:	693a      	ldr	r2, [r7, #16]
 8008654:	4313      	orrs	r3, r2
 8008656:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	693a      	ldr	r2, [r7, #16]
 800865c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	68fa      	ldr	r2, [r7, #12]
 8008662:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	685a      	ldr	r2, [r3, #4]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	697a      	ldr	r2, [r7, #20]
 8008670:	621a      	str	r2, [r3, #32]
}
 8008672:	bf00      	nop
 8008674:	371c      	adds	r7, #28
 8008676:	46bd      	mov	sp, r7
 8008678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867c:	4770      	bx	lr
 800867e:	bf00      	nop
 8008680:	40012c00 	.word	0x40012c00
 8008684:	50012c00 	.word	0x50012c00
 8008688:	40013400 	.word	0x40013400
 800868c:	50013400 	.word	0x50013400
 8008690:	40014000 	.word	0x40014000
 8008694:	50014000 	.word	0x50014000
 8008698:	40014400 	.word	0x40014400
 800869c:	50014400 	.word	0x50014400
 80086a0:	40014800 	.word	0x40014800
 80086a4:	50014800 	.word	0x50014800

080086a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b087      	sub	sp, #28
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6a1b      	ldr	r3, [r3, #32]
 80086b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6a1b      	ldr	r3, [r3, #32]
 80086bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	69db      	ldr	r3, [r3, #28]
 80086ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f023 0303 	bic.w	r3, r3, #3
 80086e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	68fa      	ldr	r2, [r7, #12]
 80086ea:	4313      	orrs	r3, r2
 80086ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80086f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	021b      	lsls	r3, r3, #8
 80086fc:	697a      	ldr	r2, [r7, #20]
 80086fe:	4313      	orrs	r3, r2
 8008700:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4a35      	ldr	r2, [pc, #212]	; (80087dc <TIM_OC3_SetConfig+0x134>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d00b      	beq.n	8008722 <TIM_OC3_SetConfig+0x7a>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4a34      	ldr	r2, [pc, #208]	; (80087e0 <TIM_OC3_SetConfig+0x138>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d007      	beq.n	8008722 <TIM_OC3_SetConfig+0x7a>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4a33      	ldr	r2, [pc, #204]	; (80087e4 <TIM_OC3_SetConfig+0x13c>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d003      	beq.n	8008722 <TIM_OC3_SetConfig+0x7a>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4a32      	ldr	r2, [pc, #200]	; (80087e8 <TIM_OC3_SetConfig+0x140>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d10d      	bne.n	800873e <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008728:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	021b      	lsls	r3, r3, #8
 8008730:	697a      	ldr	r2, [r7, #20]
 8008732:	4313      	orrs	r3, r2
 8008734:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800873c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4a26      	ldr	r2, [pc, #152]	; (80087dc <TIM_OC3_SetConfig+0x134>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d023      	beq.n	800878e <TIM_OC3_SetConfig+0xe6>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4a25      	ldr	r2, [pc, #148]	; (80087e0 <TIM_OC3_SetConfig+0x138>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d01f      	beq.n	800878e <TIM_OC3_SetConfig+0xe6>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	4a24      	ldr	r2, [pc, #144]	; (80087e4 <TIM_OC3_SetConfig+0x13c>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d01b      	beq.n	800878e <TIM_OC3_SetConfig+0xe6>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	4a23      	ldr	r2, [pc, #140]	; (80087e8 <TIM_OC3_SetConfig+0x140>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d017      	beq.n	800878e <TIM_OC3_SetConfig+0xe6>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	4a22      	ldr	r2, [pc, #136]	; (80087ec <TIM_OC3_SetConfig+0x144>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d013      	beq.n	800878e <TIM_OC3_SetConfig+0xe6>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4a21      	ldr	r2, [pc, #132]	; (80087f0 <TIM_OC3_SetConfig+0x148>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d00f      	beq.n	800878e <TIM_OC3_SetConfig+0xe6>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	4a20      	ldr	r2, [pc, #128]	; (80087f4 <TIM_OC3_SetConfig+0x14c>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d00b      	beq.n	800878e <TIM_OC3_SetConfig+0xe6>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	4a1f      	ldr	r2, [pc, #124]	; (80087f8 <TIM_OC3_SetConfig+0x150>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d007      	beq.n	800878e <TIM_OC3_SetConfig+0xe6>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4a1e      	ldr	r2, [pc, #120]	; (80087fc <TIM_OC3_SetConfig+0x154>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d003      	beq.n	800878e <TIM_OC3_SetConfig+0xe6>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4a1d      	ldr	r2, [pc, #116]	; (8008800 <TIM_OC3_SetConfig+0x158>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d113      	bne.n	80087b6 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008794:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800879c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	695b      	ldr	r3, [r3, #20]
 80087a2:	011b      	lsls	r3, r3, #4
 80087a4:	693a      	ldr	r2, [r7, #16]
 80087a6:	4313      	orrs	r3, r2
 80087a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	699b      	ldr	r3, [r3, #24]
 80087ae:	011b      	lsls	r3, r3, #4
 80087b0:	693a      	ldr	r2, [r7, #16]
 80087b2:	4313      	orrs	r3, r2
 80087b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	693a      	ldr	r2, [r7, #16]
 80087ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	68fa      	ldr	r2, [r7, #12]
 80087c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	685a      	ldr	r2, [r3, #4]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	697a      	ldr	r2, [r7, #20]
 80087ce:	621a      	str	r2, [r3, #32]
}
 80087d0:	bf00      	nop
 80087d2:	371c      	adds	r7, #28
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr
 80087dc:	40012c00 	.word	0x40012c00
 80087e0:	50012c00 	.word	0x50012c00
 80087e4:	40013400 	.word	0x40013400
 80087e8:	50013400 	.word	0x50013400
 80087ec:	40014000 	.word	0x40014000
 80087f0:	50014000 	.word	0x50014000
 80087f4:	40014400 	.word	0x40014400
 80087f8:	50014400 	.word	0x50014400
 80087fc:	40014800 	.word	0x40014800
 8008800:	50014800 	.word	0x50014800

08008804 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008804:	b480      	push	{r7}
 8008806:	b087      	sub	sp, #28
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6a1b      	ldr	r3, [r3, #32]
 8008812:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6a1b      	ldr	r3, [r3, #32]
 8008818:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	69db      	ldr	r3, [r3, #28]
 800882a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800883e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	021b      	lsls	r3, r3, #8
 8008846:	68fa      	ldr	r2, [r7, #12]
 8008848:	4313      	orrs	r3, r2
 800884a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008852:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	031b      	lsls	r3, r3, #12
 800885a:	697a      	ldr	r2, [r7, #20]
 800885c:	4313      	orrs	r3, r2
 800885e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4a36      	ldr	r2, [pc, #216]	; (800893c <TIM_OC4_SetConfig+0x138>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d00b      	beq.n	8008880 <TIM_OC4_SetConfig+0x7c>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4a35      	ldr	r2, [pc, #212]	; (8008940 <TIM_OC4_SetConfig+0x13c>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d007      	beq.n	8008880 <TIM_OC4_SetConfig+0x7c>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4a34      	ldr	r2, [pc, #208]	; (8008944 <TIM_OC4_SetConfig+0x140>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d003      	beq.n	8008880 <TIM_OC4_SetConfig+0x7c>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	4a33      	ldr	r2, [pc, #204]	; (8008948 <TIM_OC4_SetConfig+0x144>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d10d      	bne.n	800889c <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008886:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	68db      	ldr	r3, [r3, #12]
 800888c:	031b      	lsls	r3, r3, #12
 800888e:	697a      	ldr	r2, [r7, #20]
 8008890:	4313      	orrs	r3, r2
 8008892:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800889a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	4a27      	ldr	r2, [pc, #156]	; (800893c <TIM_OC4_SetConfig+0x138>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d023      	beq.n	80088ec <TIM_OC4_SetConfig+0xe8>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	4a26      	ldr	r2, [pc, #152]	; (8008940 <TIM_OC4_SetConfig+0x13c>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d01f      	beq.n	80088ec <TIM_OC4_SetConfig+0xe8>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	4a25      	ldr	r2, [pc, #148]	; (8008944 <TIM_OC4_SetConfig+0x140>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d01b      	beq.n	80088ec <TIM_OC4_SetConfig+0xe8>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	4a24      	ldr	r2, [pc, #144]	; (8008948 <TIM_OC4_SetConfig+0x144>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d017      	beq.n	80088ec <TIM_OC4_SetConfig+0xe8>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	4a23      	ldr	r2, [pc, #140]	; (800894c <TIM_OC4_SetConfig+0x148>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d013      	beq.n	80088ec <TIM_OC4_SetConfig+0xe8>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	4a22      	ldr	r2, [pc, #136]	; (8008950 <TIM_OC4_SetConfig+0x14c>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d00f      	beq.n	80088ec <TIM_OC4_SetConfig+0xe8>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	4a21      	ldr	r2, [pc, #132]	; (8008954 <TIM_OC4_SetConfig+0x150>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d00b      	beq.n	80088ec <TIM_OC4_SetConfig+0xe8>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	4a20      	ldr	r2, [pc, #128]	; (8008958 <TIM_OC4_SetConfig+0x154>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d007      	beq.n	80088ec <TIM_OC4_SetConfig+0xe8>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	4a1f      	ldr	r2, [pc, #124]	; (800895c <TIM_OC4_SetConfig+0x158>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d003      	beq.n	80088ec <TIM_OC4_SetConfig+0xe8>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	4a1e      	ldr	r2, [pc, #120]	; (8008960 <TIM_OC4_SetConfig+0x15c>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d113      	bne.n	8008914 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088f2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80088fa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	695b      	ldr	r3, [r3, #20]
 8008900:	019b      	lsls	r3, r3, #6
 8008902:	693a      	ldr	r2, [r7, #16]
 8008904:	4313      	orrs	r3, r2
 8008906:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	699b      	ldr	r3, [r3, #24]
 800890c:	019b      	lsls	r3, r3, #6
 800890e:	693a      	ldr	r2, [r7, #16]
 8008910:	4313      	orrs	r3, r2
 8008912:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	693a      	ldr	r2, [r7, #16]
 8008918:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	68fa      	ldr	r2, [r7, #12]
 800891e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	685a      	ldr	r2, [r3, #4]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	697a      	ldr	r2, [r7, #20]
 800892c:	621a      	str	r2, [r3, #32]
}
 800892e:	bf00      	nop
 8008930:	371c      	adds	r7, #28
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr
 800893a:	bf00      	nop
 800893c:	40012c00 	.word	0x40012c00
 8008940:	50012c00 	.word	0x50012c00
 8008944:	40013400 	.word	0x40013400
 8008948:	50013400 	.word	0x50013400
 800894c:	40014000 	.word	0x40014000
 8008950:	50014000 	.word	0x50014000
 8008954:	40014400 	.word	0x40014400
 8008958:	50014400 	.word	0x50014400
 800895c:	40014800 	.word	0x40014800
 8008960:	50014800 	.word	0x50014800

08008964 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008964:	b480      	push	{r7}
 8008966:	b087      	sub	sp, #28
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6a1b      	ldr	r3, [r3, #32]
 8008972:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6a1b      	ldr	r3, [r3, #32]
 8008978:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800898a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008996:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	68fa      	ldr	r2, [r7, #12]
 800899e:	4313      	orrs	r3, r2
 80089a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80089a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	041b      	lsls	r3, r3, #16
 80089b0:	693a      	ldr	r2, [r7, #16]
 80089b2:	4313      	orrs	r3, r2
 80089b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	4a21      	ldr	r2, [pc, #132]	; (8008a40 <TIM_OC5_SetConfig+0xdc>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d023      	beq.n	8008a06 <TIM_OC5_SetConfig+0xa2>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	4a20      	ldr	r2, [pc, #128]	; (8008a44 <TIM_OC5_SetConfig+0xe0>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d01f      	beq.n	8008a06 <TIM_OC5_SetConfig+0xa2>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	4a1f      	ldr	r2, [pc, #124]	; (8008a48 <TIM_OC5_SetConfig+0xe4>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d01b      	beq.n	8008a06 <TIM_OC5_SetConfig+0xa2>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	4a1e      	ldr	r2, [pc, #120]	; (8008a4c <TIM_OC5_SetConfig+0xe8>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d017      	beq.n	8008a06 <TIM_OC5_SetConfig+0xa2>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	4a1d      	ldr	r2, [pc, #116]	; (8008a50 <TIM_OC5_SetConfig+0xec>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d013      	beq.n	8008a06 <TIM_OC5_SetConfig+0xa2>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	4a1c      	ldr	r2, [pc, #112]	; (8008a54 <TIM_OC5_SetConfig+0xf0>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d00f      	beq.n	8008a06 <TIM_OC5_SetConfig+0xa2>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	4a1b      	ldr	r2, [pc, #108]	; (8008a58 <TIM_OC5_SetConfig+0xf4>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d00b      	beq.n	8008a06 <TIM_OC5_SetConfig+0xa2>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	4a1a      	ldr	r2, [pc, #104]	; (8008a5c <TIM_OC5_SetConfig+0xf8>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d007      	beq.n	8008a06 <TIM_OC5_SetConfig+0xa2>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	4a19      	ldr	r2, [pc, #100]	; (8008a60 <TIM_OC5_SetConfig+0xfc>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d003      	beq.n	8008a06 <TIM_OC5_SetConfig+0xa2>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	4a18      	ldr	r2, [pc, #96]	; (8008a64 <TIM_OC5_SetConfig+0x100>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d109      	bne.n	8008a1a <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a0c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	695b      	ldr	r3, [r3, #20]
 8008a12:	021b      	lsls	r3, r3, #8
 8008a14:	697a      	ldr	r2, [r7, #20]
 8008a16:	4313      	orrs	r3, r2
 8008a18:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	697a      	ldr	r2, [r7, #20]
 8008a1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	685a      	ldr	r2, [r3, #4]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	693a      	ldr	r2, [r7, #16]
 8008a32:	621a      	str	r2, [r3, #32]
}
 8008a34:	bf00      	nop
 8008a36:	371c      	adds	r7, #28
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr
 8008a40:	40012c00 	.word	0x40012c00
 8008a44:	50012c00 	.word	0x50012c00
 8008a48:	40013400 	.word	0x40013400
 8008a4c:	50013400 	.word	0x50013400
 8008a50:	40014000 	.word	0x40014000
 8008a54:	50014000 	.word	0x50014000
 8008a58:	40014400 	.word	0x40014400
 8008a5c:	50014400 	.word	0x50014400
 8008a60:	40014800 	.word	0x40014800
 8008a64:	50014800 	.word	0x50014800

08008a68 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b087      	sub	sp, #28
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6a1b      	ldr	r3, [r3, #32]
 8008a76:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6a1b      	ldr	r3, [r3, #32]
 8008a7c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	021b      	lsls	r3, r3, #8
 8008aa2:	68fa      	ldr	r2, [r7, #12]
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008aae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	689b      	ldr	r3, [r3, #8]
 8008ab4:	051b      	lsls	r3, r3, #20
 8008ab6:	693a      	ldr	r2, [r7, #16]
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	4a22      	ldr	r2, [pc, #136]	; (8008b48 <TIM_OC6_SetConfig+0xe0>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d023      	beq.n	8008b0c <TIM_OC6_SetConfig+0xa4>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	4a21      	ldr	r2, [pc, #132]	; (8008b4c <TIM_OC6_SetConfig+0xe4>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d01f      	beq.n	8008b0c <TIM_OC6_SetConfig+0xa4>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	4a20      	ldr	r2, [pc, #128]	; (8008b50 <TIM_OC6_SetConfig+0xe8>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d01b      	beq.n	8008b0c <TIM_OC6_SetConfig+0xa4>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	4a1f      	ldr	r2, [pc, #124]	; (8008b54 <TIM_OC6_SetConfig+0xec>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d017      	beq.n	8008b0c <TIM_OC6_SetConfig+0xa4>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	4a1e      	ldr	r2, [pc, #120]	; (8008b58 <TIM_OC6_SetConfig+0xf0>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d013      	beq.n	8008b0c <TIM_OC6_SetConfig+0xa4>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	4a1d      	ldr	r2, [pc, #116]	; (8008b5c <TIM_OC6_SetConfig+0xf4>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d00f      	beq.n	8008b0c <TIM_OC6_SetConfig+0xa4>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	4a1c      	ldr	r2, [pc, #112]	; (8008b60 <TIM_OC6_SetConfig+0xf8>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d00b      	beq.n	8008b0c <TIM_OC6_SetConfig+0xa4>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	4a1b      	ldr	r2, [pc, #108]	; (8008b64 <TIM_OC6_SetConfig+0xfc>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d007      	beq.n	8008b0c <TIM_OC6_SetConfig+0xa4>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	4a1a      	ldr	r2, [pc, #104]	; (8008b68 <TIM_OC6_SetConfig+0x100>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d003      	beq.n	8008b0c <TIM_OC6_SetConfig+0xa4>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	4a19      	ldr	r2, [pc, #100]	; (8008b6c <TIM_OC6_SetConfig+0x104>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d109      	bne.n	8008b20 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	695b      	ldr	r3, [r3, #20]
 8008b18:	029b      	lsls	r3, r3, #10
 8008b1a:	697a      	ldr	r2, [r7, #20]
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	697a      	ldr	r2, [r7, #20]
 8008b24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	68fa      	ldr	r2, [r7, #12]
 8008b2a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	685a      	ldr	r2, [r3, #4]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	693a      	ldr	r2, [r7, #16]
 8008b38:	621a      	str	r2, [r3, #32]
}
 8008b3a:	bf00      	nop
 8008b3c:	371c      	adds	r7, #28
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr
 8008b46:	bf00      	nop
 8008b48:	40012c00 	.word	0x40012c00
 8008b4c:	50012c00 	.word	0x50012c00
 8008b50:	40013400 	.word	0x40013400
 8008b54:	50013400 	.word	0x50013400
 8008b58:	40014000 	.word	0x40014000
 8008b5c:	50014000 	.word	0x50014000
 8008b60:	40014400 	.word	0x40014400
 8008b64:	50014400 	.word	0x50014400
 8008b68:	40014800 	.word	0x40014800
 8008b6c:	50014800 	.word	0x50014800

08008b70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b087      	sub	sp, #28
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	60b9      	str	r1, [r7, #8]
 8008b7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	6a1b      	ldr	r3, [r3, #32]
 8008b80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	6a1b      	ldr	r3, [r3, #32]
 8008b86:	f023 0201 	bic.w	r2, r3, #1
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	699b      	ldr	r3, [r3, #24]
 8008b92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	011b      	lsls	r3, r3, #4
 8008ba0:	693a      	ldr	r2, [r7, #16]
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	f023 030a 	bic.w	r3, r3, #10
 8008bac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008bae:	697a      	ldr	r2, [r7, #20]
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	693a      	ldr	r2, [r7, #16]
 8008bba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	697a      	ldr	r2, [r7, #20]
 8008bc0:	621a      	str	r2, [r3, #32]
}
 8008bc2:	bf00      	nop
 8008bc4:	371c      	adds	r7, #28
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr

08008bce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008bce:	b480      	push	{r7}
 8008bd0:	b087      	sub	sp, #28
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	60f8      	str	r0, [r7, #12]
 8008bd6:	60b9      	str	r1, [r7, #8]
 8008bd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	6a1b      	ldr	r3, [r3, #32]
 8008bde:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6a1b      	ldr	r3, [r3, #32]
 8008be4:	f023 0210 	bic.w	r2, r3, #16
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	699b      	ldr	r3, [r3, #24]
 8008bf0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008bf8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	031b      	lsls	r3, r3, #12
 8008bfe:	693a      	ldr	r2, [r7, #16]
 8008c00:	4313      	orrs	r3, r2
 8008c02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008c0a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	011b      	lsls	r3, r3, #4
 8008c10:	697a      	ldr	r2, [r7, #20]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	693a      	ldr	r2, [r7, #16]
 8008c1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	697a      	ldr	r2, [r7, #20]
 8008c20:	621a      	str	r2, [r3, #32]
}
 8008c22:	bf00      	nop
 8008c24:	371c      	adds	r7, #28
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr

08008c2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c2e:	b480      	push	{r7}
 8008c30:	b085      	sub	sp, #20
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
 8008c36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	689b      	ldr	r3, [r3, #8]
 8008c3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008c44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c4a:	683a      	ldr	r2, [r7, #0]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	f043 0307 	orr.w	r3, r3, #7
 8008c54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	68fa      	ldr	r2, [r7, #12]
 8008c5a:	609a      	str	r2, [r3, #8]
}
 8008c5c:	bf00      	nop
 8008c5e:	3714      	adds	r7, #20
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b087      	sub	sp, #28
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	60b9      	str	r1, [r7, #8]
 8008c72:	607a      	str	r2, [r7, #4]
 8008c74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	021a      	lsls	r2, r3, #8
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	431a      	orrs	r2, r3
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	697a      	ldr	r2, [r7, #20]
 8008c92:	4313      	orrs	r3, r2
 8008c94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	697a      	ldr	r2, [r7, #20]
 8008c9a:	609a      	str	r2, [r3, #8]
}
 8008c9c:	bf00      	nop
 8008c9e:	371c      	adds	r7, #28
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b087      	sub	sp, #28
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	60b9      	str	r1, [r7, #8]
 8008cb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	f003 031f 	and.w	r3, r3, #31
 8008cba:	2201      	movs	r2, #1
 8008cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8008cc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	6a1a      	ldr	r2, [r3, #32]
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	43db      	mvns	r3, r3
 8008cca:	401a      	ands	r2, r3
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6a1a      	ldr	r2, [r3, #32]
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	f003 031f 	and.w	r3, r3, #31
 8008cda:	6879      	ldr	r1, [r7, #4]
 8008cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8008ce0:	431a      	orrs	r2, r3
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	621a      	str	r2, [r3, #32]
}
 8008ce6:	bf00      	nop
 8008ce8:	371c      	adds	r7, #28
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr
	...

08008cf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b085      	sub	sp, #20
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d101      	bne.n	8008d0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d08:	2302      	movs	r3, #2
 8008d0a:	e097      	b.n	8008e3c <HAL_TIMEx_MasterConfigSynchronization+0x148>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2202      	movs	r2, #2
 8008d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a45      	ldr	r2, [pc, #276]	; (8008e48 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d00e      	beq.n	8008d54 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a44      	ldr	r2, [pc, #272]	; (8008e4c <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d009      	beq.n	8008d54 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a42      	ldr	r2, [pc, #264]	; (8008e50 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d004      	beq.n	8008d54 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a41      	ldr	r2, [pc, #260]	; (8008e54 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d108      	bne.n	8008d66 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008d5a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	68fa      	ldr	r2, [r7, #12]
 8008d62:	4313      	orrs	r3, r2
 8008d64:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d70:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	68fa      	ldr	r2, [r7, #12]
 8008d82:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a2f      	ldr	r2, [pc, #188]	; (8008e48 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d040      	beq.n	8008e10 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a2e      	ldr	r2, [pc, #184]	; (8008e4c <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d03b      	beq.n	8008e10 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008da0:	d036      	beq.n	8008e10 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008daa:	d031      	beq.n	8008e10 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a29      	ldr	r2, [pc, #164]	; (8008e58 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d02c      	beq.n	8008e10 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a28      	ldr	r2, [pc, #160]	; (8008e5c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d027      	beq.n	8008e10 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a26      	ldr	r2, [pc, #152]	; (8008e60 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d022      	beq.n	8008e10 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a25      	ldr	r2, [pc, #148]	; (8008e64 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d01d      	beq.n	8008e10 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a23      	ldr	r2, [pc, #140]	; (8008e68 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d018      	beq.n	8008e10 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a22      	ldr	r2, [pc, #136]	; (8008e6c <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d013      	beq.n	8008e10 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a18      	ldr	r2, [pc, #96]	; (8008e50 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d00e      	beq.n	8008e10 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a17      	ldr	r2, [pc, #92]	; (8008e54 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d009      	beq.n	8008e10 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a1b      	ldr	r2, [pc, #108]	; (8008e70 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d004      	beq.n	8008e10 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a1a      	ldr	r2, [pc, #104]	; (8008e74 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d10c      	bne.n	8008e2a <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	689b      	ldr	r3, [r3, #8]
 8008e1c:	68ba      	ldr	r2, [r7, #8]
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	68ba      	ldr	r2, [r7, #8]
 8008e28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e3a:	2300      	movs	r3, #0
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3714      	adds	r7, #20
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr
 8008e48:	40012c00 	.word	0x40012c00
 8008e4c:	50012c00 	.word	0x50012c00
 8008e50:	40013400 	.word	0x40013400
 8008e54:	50013400 	.word	0x50013400
 8008e58:	40000400 	.word	0x40000400
 8008e5c:	50000400 	.word	0x50000400
 8008e60:	40000800 	.word	0x40000800
 8008e64:	50000800 	.word	0x50000800
 8008e68:	40000c00 	.word	0x40000c00
 8008e6c:	50000c00 	.word	0x50000c00
 8008e70:	40014000 	.word	0x40014000
 8008e74:	50014000 	.word	0x50014000

08008e78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b083      	sub	sp, #12
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e80:	bf00      	nop
 8008e82:	370c      	adds	r7, #12
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr

08008e8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b083      	sub	sp, #12
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e94:	bf00      	nop
 8008e96:	370c      	adds	r7, #12
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr

08008ea0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008ea8:	bf00      	nop
 8008eaa:	370c      	adds	r7, #12
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr

08008eb4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008ebc:	bf00      	nop
 8008ebe:	370c      	adds	r7, #12
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008ed0:	bf00      	nop
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr

08008edc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008ee4:	bf00      	nop
 8008ee6:	370c      	adds	r7, #12
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr

08008ef0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b083      	sub	sp, #12
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008ef8:	bf00      	nop
 8008efa:	370c      	adds	r7, #12
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr

08008f04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d101      	bne.n	8008f16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f12:	2301      	movs	r3, #1
 8008f14:	e042      	b.n	8008f9c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d106      	bne.n	8008f2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f7f7 ffad 	bl	8000e88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2224      	movs	r2, #36	; 0x24
 8008f32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f022 0201 	bic.w	r2, r2, #1
 8008f44:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d002      	beq.n	8008f54 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 f9ca 	bl	80092e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 f825 	bl	8008fa4 <UART_SetConfig>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d101      	bne.n	8008f64 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008f60:	2301      	movs	r3, #1
 8008f62:	e01b      	b.n	8008f9c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	685a      	ldr	r2, [r3, #4]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008f72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	689a      	ldr	r2, [r3, #8]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008f82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	681a      	ldr	r2, [r3, #0]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f042 0201 	orr.w	r2, r2, #1
 8008f92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 fa49 	bl	800942c <UART_CheckIdleState>
 8008f9a:	4603      	mov	r3, r0
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3708      	adds	r7, #8
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008fa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008fa8:	b094      	sub	sp, #80	; 0x50
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb6:	681a      	ldr	r2, [r3, #0]
 8008fb8:	4b7e      	ldr	r3, [pc, #504]	; (80091b4 <UART_SetConfig+0x210>)
 8008fba:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fbe:	689a      	ldr	r2, [r3, #8]
 8008fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc2:	691b      	ldr	r3, [r3, #16]
 8008fc4:	431a      	orrs	r2, r3
 8008fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc8:	695b      	ldr	r3, [r3, #20]
 8008fca:	431a      	orrs	r2, r3
 8008fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fce:	69db      	ldr	r3, [r3, #28]
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4977      	ldr	r1, [pc, #476]	; (80091b8 <UART_SetConfig+0x214>)
 8008fdc:	4019      	ands	r1, r3
 8008fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe0:	681a      	ldr	r2, [r3, #0]
 8008fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fe4:	430b      	orrs	r3, r1
 8008fe6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff4:	68d9      	ldr	r1, [r3, #12]
 8008ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	ea40 0301 	orr.w	r3, r0, r1
 8008ffe:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009002:	699b      	ldr	r3, [r3, #24]
 8009004:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	4b6a      	ldr	r3, [pc, #424]	; (80091b4 <UART_SetConfig+0x210>)
 800900c:	429a      	cmp	r2, r3
 800900e:	d009      	beq.n	8009024 <UART_SetConfig+0x80>
 8009010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	4b69      	ldr	r3, [pc, #420]	; (80091bc <UART_SetConfig+0x218>)
 8009016:	429a      	cmp	r2, r3
 8009018:	d004      	beq.n	8009024 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800901a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800901c:	6a1a      	ldr	r2, [r3, #32]
 800901e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009020:	4313      	orrs	r3, r2
 8009022:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800902e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8009032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009034:	681a      	ldr	r2, [r3, #0]
 8009036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009038:	430b      	orrs	r3, r1
 800903a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800903c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009042:	f023 000f 	bic.w	r0, r3, #15
 8009046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009048:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800904a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800904c:	681a      	ldr	r2, [r3, #0]
 800904e:	ea40 0301 	orr.w	r3, r0, r1
 8009052:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	4b59      	ldr	r3, [pc, #356]	; (80091c0 <UART_SetConfig+0x21c>)
 800905a:	429a      	cmp	r2, r3
 800905c:	d102      	bne.n	8009064 <UART_SetConfig+0xc0>
 800905e:	2301      	movs	r3, #1
 8009060:	64bb      	str	r3, [r7, #72]	; 0x48
 8009062:	e029      	b.n	80090b8 <UART_SetConfig+0x114>
 8009064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009066:	681a      	ldr	r2, [r3, #0]
 8009068:	4b56      	ldr	r3, [pc, #344]	; (80091c4 <UART_SetConfig+0x220>)
 800906a:	429a      	cmp	r2, r3
 800906c:	d102      	bne.n	8009074 <UART_SetConfig+0xd0>
 800906e:	2302      	movs	r3, #2
 8009070:	64bb      	str	r3, [r7, #72]	; 0x48
 8009072:	e021      	b.n	80090b8 <UART_SetConfig+0x114>
 8009074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	4b53      	ldr	r3, [pc, #332]	; (80091c8 <UART_SetConfig+0x224>)
 800907a:	429a      	cmp	r2, r3
 800907c:	d102      	bne.n	8009084 <UART_SetConfig+0xe0>
 800907e:	2304      	movs	r3, #4
 8009080:	64bb      	str	r3, [r7, #72]	; 0x48
 8009082:	e019      	b.n	80090b8 <UART_SetConfig+0x114>
 8009084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009086:	681a      	ldr	r2, [r3, #0]
 8009088:	4b50      	ldr	r3, [pc, #320]	; (80091cc <UART_SetConfig+0x228>)
 800908a:	429a      	cmp	r2, r3
 800908c:	d102      	bne.n	8009094 <UART_SetConfig+0xf0>
 800908e:	2308      	movs	r3, #8
 8009090:	64bb      	str	r3, [r7, #72]	; 0x48
 8009092:	e011      	b.n	80090b8 <UART_SetConfig+0x114>
 8009094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009096:	681a      	ldr	r2, [r3, #0]
 8009098:	4b4d      	ldr	r3, [pc, #308]	; (80091d0 <UART_SetConfig+0x22c>)
 800909a:	429a      	cmp	r2, r3
 800909c:	d102      	bne.n	80090a4 <UART_SetConfig+0x100>
 800909e:	2310      	movs	r3, #16
 80090a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80090a2:	e009      	b.n	80090b8 <UART_SetConfig+0x114>
 80090a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	4b42      	ldr	r3, [pc, #264]	; (80091b4 <UART_SetConfig+0x210>)
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d102      	bne.n	80090b4 <UART_SetConfig+0x110>
 80090ae:	2320      	movs	r3, #32
 80090b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80090b2:	e001      	b.n	80090b8 <UART_SetConfig+0x114>
 80090b4:	2300      	movs	r3, #0
 80090b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80090b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	4b3d      	ldr	r3, [pc, #244]	; (80091b4 <UART_SetConfig+0x210>)
 80090be:	429a      	cmp	r2, r3
 80090c0:	d005      	beq.n	80090ce <UART_SetConfig+0x12a>
 80090c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c4:	681a      	ldr	r2, [r3, #0]
 80090c6:	4b3d      	ldr	r3, [pc, #244]	; (80091bc <UART_SetConfig+0x218>)
 80090c8:	429a      	cmp	r2, r3
 80090ca:	f040 8085 	bne.w	80091d8 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80090ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090d0:	2200      	movs	r2, #0
 80090d2:	623b      	str	r3, [r7, #32]
 80090d4:	627a      	str	r2, [r7, #36]	; 0x24
 80090d6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80090da:	f7fc ff59 	bl	8005f90 <HAL_RCCEx_GetPeriphCLKFreq>
 80090de:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80090e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	f000 80e8 	beq.w	80092b8 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80090e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ec:	4a39      	ldr	r2, [pc, #228]	; (80091d4 <UART_SetConfig+0x230>)
 80090ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090f2:	461a      	mov	r2, r3
 80090f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80090fa:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80090fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090fe:	685a      	ldr	r2, [r3, #4]
 8009100:	4613      	mov	r3, r2
 8009102:	005b      	lsls	r3, r3, #1
 8009104:	4413      	add	r3, r2
 8009106:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009108:	429a      	cmp	r2, r3
 800910a:	d305      	bcc.n	8009118 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800910c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009112:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009114:	429a      	cmp	r2, r3
 8009116:	d903      	bls.n	8009120 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8009118:	2301      	movs	r3, #1
 800911a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800911e:	e048      	b.n	80091b2 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009122:	2200      	movs	r2, #0
 8009124:	61bb      	str	r3, [r7, #24]
 8009126:	61fa      	str	r2, [r7, #28]
 8009128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800912a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800912c:	4a29      	ldr	r2, [pc, #164]	; (80091d4 <UART_SetConfig+0x230>)
 800912e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009132:	b29b      	uxth	r3, r3
 8009134:	2200      	movs	r2, #0
 8009136:	613b      	str	r3, [r7, #16]
 8009138:	617a      	str	r2, [r7, #20]
 800913a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800913e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009142:	f7f7 f89d 	bl	8000280 <__aeabi_uldivmod>
 8009146:	4602      	mov	r2, r0
 8009148:	460b      	mov	r3, r1
 800914a:	4610      	mov	r0, r2
 800914c:	4619      	mov	r1, r3
 800914e:	f04f 0200 	mov.w	r2, #0
 8009152:	f04f 0300 	mov.w	r3, #0
 8009156:	020b      	lsls	r3, r1, #8
 8009158:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800915c:	0202      	lsls	r2, r0, #8
 800915e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009160:	6849      	ldr	r1, [r1, #4]
 8009162:	0849      	lsrs	r1, r1, #1
 8009164:	2000      	movs	r0, #0
 8009166:	460c      	mov	r4, r1
 8009168:	4605      	mov	r5, r0
 800916a:	eb12 0804 	adds.w	r8, r2, r4
 800916e:	eb43 0905 	adc.w	r9, r3, r5
 8009172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009174:	685b      	ldr	r3, [r3, #4]
 8009176:	2200      	movs	r2, #0
 8009178:	60bb      	str	r3, [r7, #8]
 800917a:	60fa      	str	r2, [r7, #12]
 800917c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009180:	4640      	mov	r0, r8
 8009182:	4649      	mov	r1, r9
 8009184:	f7f7 f87c 	bl	8000280 <__aeabi_uldivmod>
 8009188:	4602      	mov	r2, r0
 800918a:	460b      	mov	r3, r1
 800918c:	4613      	mov	r3, r2
 800918e:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009192:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009196:	d308      	bcc.n	80091aa <UART_SetConfig+0x206>
 8009198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800919a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800919e:	d204      	bcs.n	80091aa <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 80091a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80091a6:	60da      	str	r2, [r3, #12]
 80091a8:	e003      	b.n	80091b2 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 80091aa:	2301      	movs	r3, #1
 80091ac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 80091b0:	e082      	b.n	80092b8 <UART_SetConfig+0x314>
 80091b2:	e081      	b.n	80092b8 <UART_SetConfig+0x314>
 80091b4:	46002400 	.word	0x46002400
 80091b8:	cfff69f3 	.word	0xcfff69f3
 80091bc:	56002400 	.word	0x56002400
 80091c0:	40013800 	.word	0x40013800
 80091c4:	40004400 	.word	0x40004400
 80091c8:	40004800 	.word	0x40004800
 80091cc:	40004c00 	.word	0x40004c00
 80091d0:	40005000 	.word	0x40005000
 80091d4:	0800ae90 	.word	0x0800ae90
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091da:	69db      	ldr	r3, [r3, #28]
 80091dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091e0:	d13c      	bne.n	800925c <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80091e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091e4:	2200      	movs	r2, #0
 80091e6:	603b      	str	r3, [r7, #0]
 80091e8:	607a      	str	r2, [r7, #4]
 80091ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80091ee:	f7fc fecf 	bl	8005f90 <HAL_RCCEx_GetPeriphCLKFreq>
 80091f2:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80091f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d05e      	beq.n	80092b8 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091fe:	4a39      	ldr	r2, [pc, #228]	; (80092e4 <UART_SetConfig+0x340>)
 8009200:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009204:	461a      	mov	r2, r3
 8009206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009208:	fbb3 f3f2 	udiv	r3, r3, r2
 800920c:	005a      	lsls	r2, r3, #1
 800920e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	085b      	lsrs	r3, r3, #1
 8009214:	441a      	add	r2, r3
 8009216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	fbb2 f3f3 	udiv	r3, r2, r3
 800921e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009222:	2b0f      	cmp	r3, #15
 8009224:	d916      	bls.n	8009254 <UART_SetConfig+0x2b0>
 8009226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800922c:	d212      	bcs.n	8009254 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800922e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009230:	b29b      	uxth	r3, r3
 8009232:	f023 030f 	bic.w	r3, r3, #15
 8009236:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800923a:	085b      	lsrs	r3, r3, #1
 800923c:	b29b      	uxth	r3, r3
 800923e:	f003 0307 	and.w	r3, r3, #7
 8009242:	b29a      	uxth	r2, r3
 8009244:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009246:	4313      	orrs	r3, r2
 8009248:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800924a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8009250:	60da      	str	r2, [r3, #12]
 8009252:	e031      	b.n	80092b8 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8009254:	2301      	movs	r3, #1
 8009256:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800925a:	e02d      	b.n	80092b8 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800925c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800925e:	2200      	movs	r2, #0
 8009260:	469a      	mov	sl, r3
 8009262:	4693      	mov	fp, r2
 8009264:	4650      	mov	r0, sl
 8009266:	4659      	mov	r1, fp
 8009268:	f7fc fe92 	bl	8005f90 <HAL_RCCEx_GetPeriphCLKFreq>
 800926c:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800926e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009270:	2b00      	cmp	r3, #0
 8009272:	d021      	beq.n	80092b8 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009278:	4a1a      	ldr	r2, [pc, #104]	; (80092e4 <UART_SetConfig+0x340>)
 800927a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800927e:	461a      	mov	r2, r3
 8009280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009282:	fbb3 f2f2 	udiv	r2, r3, r2
 8009286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	085b      	lsrs	r3, r3, #1
 800928c:	441a      	add	r2, r3
 800928e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	fbb2 f3f3 	udiv	r3, r2, r3
 8009296:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800929a:	2b0f      	cmp	r3, #15
 800929c:	d909      	bls.n	80092b2 <UART_SetConfig+0x30e>
 800929e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092a4:	d205      	bcs.n	80092b2 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80092a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092a8:	b29a      	uxth	r2, r3
 80092aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	60da      	str	r2, [r3, #12]
 80092b0:	e002      	b.n	80092b8 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80092b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ba:	2201      	movs	r2, #1
 80092bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80092c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c2:	2201      	movs	r2, #1
 80092c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80092c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ca:	2200      	movs	r2, #0
 80092cc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80092ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d0:	2200      	movs	r2, #0
 80092d2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80092d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3750      	adds	r7, #80	; 0x50
 80092dc:	46bd      	mov	sp, r7
 80092de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80092e2:	bf00      	nop
 80092e4:	0800ae90 	.word	0x0800ae90

080092e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092f4:	f003 0308 	and.w	r3, r3, #8
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d00a      	beq.n	8009312 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	430a      	orrs	r2, r1
 8009310:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009316:	f003 0301 	and.w	r3, r3, #1
 800931a:	2b00      	cmp	r3, #0
 800931c:	d00a      	beq.n	8009334 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	430a      	orrs	r2, r1
 8009332:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009338:	f003 0302 	and.w	r3, r3, #2
 800933c:	2b00      	cmp	r3, #0
 800933e:	d00a      	beq.n	8009356 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	430a      	orrs	r2, r1
 8009354:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800935a:	f003 0304 	and.w	r3, r3, #4
 800935e:	2b00      	cmp	r3, #0
 8009360:	d00a      	beq.n	8009378 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	430a      	orrs	r2, r1
 8009376:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800937c:	f003 0310 	and.w	r3, r3, #16
 8009380:	2b00      	cmp	r3, #0
 8009382:	d00a      	beq.n	800939a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	689b      	ldr	r3, [r3, #8]
 800938a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	430a      	orrs	r2, r1
 8009398:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800939e:	f003 0320 	and.w	r3, r3, #32
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d00a      	beq.n	80093bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	689b      	ldr	r3, [r3, #8]
 80093ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	430a      	orrs	r2, r1
 80093ba:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d01a      	beq.n	80093fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	430a      	orrs	r2, r1
 80093dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093e6:	d10a      	bne.n	80093fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	430a      	orrs	r2, r1
 80093fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009406:	2b00      	cmp	r3, #0
 8009408:	d00a      	beq.n	8009420 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	430a      	orrs	r2, r1
 800941e:	605a      	str	r2, [r3, #4]
  }
}
 8009420:	bf00      	nop
 8009422:	370c      	adds	r7, #12
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr

0800942c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b098      	sub	sp, #96	; 0x60
 8009430:	af02      	add	r7, sp, #8
 8009432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2200      	movs	r2, #0
 8009438:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800943c:	f7f7 ff68 	bl	8001310 <HAL_GetTick>
 8009440:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f003 0308 	and.w	r3, r3, #8
 800944c:	2b08      	cmp	r3, #8
 800944e:	d12f      	bne.n	80094b0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009450:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009454:	9300      	str	r3, [sp, #0]
 8009456:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009458:	2200      	movs	r2, #0
 800945a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 f88e 	bl	8009580 <UART_WaitOnFlagUntilTimeout>
 8009464:	4603      	mov	r3, r0
 8009466:	2b00      	cmp	r3, #0
 8009468:	d022      	beq.n	80094b0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009472:	e853 3f00 	ldrex	r3, [r3]
 8009476:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800947a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800947e:	653b      	str	r3, [r7, #80]	; 0x50
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	461a      	mov	r2, r3
 8009486:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009488:	647b      	str	r3, [r7, #68]	; 0x44
 800948a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800948c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800948e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009490:	e841 2300 	strex	r3, r2, [r1]
 8009494:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009498:	2b00      	cmp	r3, #0
 800949a:	d1e6      	bne.n	800946a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2220      	movs	r2, #32
 80094a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2200      	movs	r2, #0
 80094a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094ac:	2303      	movs	r3, #3
 80094ae:	e063      	b.n	8009578 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f003 0304 	and.w	r3, r3, #4
 80094ba:	2b04      	cmp	r3, #4
 80094bc:	d149      	bne.n	8009552 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80094be:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80094c2:	9300      	str	r3, [sp, #0]
 80094c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094c6:	2200      	movs	r2, #0
 80094c8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f000 f857 	bl	8009580 <UART_WaitOnFlagUntilTimeout>
 80094d2:	4603      	mov	r3, r0
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d03c      	beq.n	8009552 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e0:	e853 3f00 	ldrex	r3, [r3]
 80094e4:	623b      	str	r3, [r7, #32]
   return(result);
 80094e6:	6a3b      	ldr	r3, [r7, #32]
 80094e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80094ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	461a      	mov	r2, r3
 80094f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094f6:	633b      	str	r3, [r7, #48]	; 0x30
 80094f8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094fe:	e841 2300 	strex	r3, r2, [r1]
 8009502:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009506:	2b00      	cmp	r3, #0
 8009508:	d1e6      	bne.n	80094d8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	3308      	adds	r3, #8
 8009510:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	e853 3f00 	ldrex	r3, [r3]
 8009518:	60fb      	str	r3, [r7, #12]
   return(result);
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f023 0301 	bic.w	r3, r3, #1
 8009520:	64bb      	str	r3, [r7, #72]	; 0x48
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	3308      	adds	r3, #8
 8009528:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800952a:	61fa      	str	r2, [r7, #28]
 800952c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800952e:	69b9      	ldr	r1, [r7, #24]
 8009530:	69fa      	ldr	r2, [r7, #28]
 8009532:	e841 2300 	strex	r3, r2, [r1]
 8009536:	617b      	str	r3, [r7, #20]
   return(result);
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d1e5      	bne.n	800950a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2220      	movs	r2, #32
 8009542:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2200      	movs	r2, #0
 800954a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800954e:	2303      	movs	r3, #3
 8009550:	e012      	b.n	8009578 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2220      	movs	r2, #32
 8009556:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2220      	movs	r2, #32
 800955e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2200      	movs	r2, #0
 8009566:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2200      	movs	r2, #0
 800956c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2200      	movs	r2, #0
 8009572:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009576:	2300      	movs	r3, #0
}
 8009578:	4618      	mov	r0, r3
 800957a:	3758      	adds	r7, #88	; 0x58
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}

08009580 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af00      	add	r7, sp, #0
 8009586:	60f8      	str	r0, [r7, #12]
 8009588:	60b9      	str	r1, [r7, #8]
 800958a:	603b      	str	r3, [r7, #0]
 800958c:	4613      	mov	r3, r2
 800958e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009590:	e049      	b.n	8009626 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009592:	69bb      	ldr	r3, [r7, #24]
 8009594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009598:	d045      	beq.n	8009626 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800959a:	f7f7 feb9 	bl	8001310 <HAL_GetTick>
 800959e:	4602      	mov	r2, r0
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	1ad3      	subs	r3, r2, r3
 80095a4:	69ba      	ldr	r2, [r7, #24]
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d302      	bcc.n	80095b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80095aa:	69bb      	ldr	r3, [r7, #24]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d101      	bne.n	80095b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80095b0:	2303      	movs	r3, #3
 80095b2:	e048      	b.n	8009646 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f003 0304 	and.w	r3, r3, #4
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d031      	beq.n	8009626 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	69db      	ldr	r3, [r3, #28]
 80095c8:	f003 0308 	and.w	r3, r3, #8
 80095cc:	2b08      	cmp	r3, #8
 80095ce:	d110      	bne.n	80095f2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	2208      	movs	r2, #8
 80095d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80095d8:	68f8      	ldr	r0, [r7, #12]
 80095da:	f000 f838 	bl	800964e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2208      	movs	r2, #8
 80095e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2200      	movs	r2, #0
 80095ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80095ee:	2301      	movs	r3, #1
 80095f0:	e029      	b.n	8009646 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	69db      	ldr	r3, [r3, #28]
 80095f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80095fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009600:	d111      	bne.n	8009626 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800960a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800960c:	68f8      	ldr	r0, [r7, #12]
 800960e:	f000 f81e 	bl	800964e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2220      	movs	r2, #32
 8009616:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2200      	movs	r2, #0
 800961e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009622:	2303      	movs	r3, #3
 8009624:	e00f      	b.n	8009646 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	69da      	ldr	r2, [r3, #28]
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	4013      	ands	r3, r2
 8009630:	68ba      	ldr	r2, [r7, #8]
 8009632:	429a      	cmp	r2, r3
 8009634:	bf0c      	ite	eq
 8009636:	2301      	moveq	r3, #1
 8009638:	2300      	movne	r3, #0
 800963a:	b2db      	uxtb	r3, r3
 800963c:	461a      	mov	r2, r3
 800963e:	79fb      	ldrb	r3, [r7, #7]
 8009640:	429a      	cmp	r2, r3
 8009642:	d0a6      	beq.n	8009592 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009644:	2300      	movs	r3, #0
}
 8009646:	4618      	mov	r0, r3
 8009648:	3710      	adds	r7, #16
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}

0800964e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800964e:	b480      	push	{r7}
 8009650:	b095      	sub	sp, #84	; 0x54
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800965c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800965e:	e853 3f00 	ldrex	r3, [r3]
 8009662:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009666:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800966a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	461a      	mov	r2, r3
 8009672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009674:	643b      	str	r3, [r7, #64]	; 0x40
 8009676:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009678:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800967a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800967c:	e841 2300 	strex	r3, r2, [r1]
 8009680:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009684:	2b00      	cmp	r3, #0
 8009686:	d1e6      	bne.n	8009656 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	3308      	adds	r3, #8
 800968e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009690:	6a3b      	ldr	r3, [r7, #32]
 8009692:	e853 3f00 	ldrex	r3, [r3]
 8009696:	61fb      	str	r3, [r7, #28]
   return(result);
 8009698:	69fb      	ldr	r3, [r7, #28]
 800969a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800969e:	f023 0301 	bic.w	r3, r3, #1
 80096a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	3308      	adds	r3, #8
 80096aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80096ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80096ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80096b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096b4:	e841 2300 	strex	r3, r2, [r1]
 80096b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80096ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d1e3      	bne.n	8009688 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d118      	bne.n	80096fa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	e853 3f00 	ldrex	r3, [r3]
 80096d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	f023 0310 	bic.w	r3, r3, #16
 80096dc:	647b      	str	r3, [r7, #68]	; 0x44
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	461a      	mov	r2, r3
 80096e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096e6:	61bb      	str	r3, [r7, #24]
 80096e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ea:	6979      	ldr	r1, [r7, #20]
 80096ec:	69ba      	ldr	r2, [r7, #24]
 80096ee:	e841 2300 	strex	r3, r2, [r1]
 80096f2:	613b      	str	r3, [r7, #16]
   return(result);
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d1e6      	bne.n	80096c8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2220      	movs	r2, #32
 80096fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2200      	movs	r2, #0
 8009706:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2200      	movs	r2, #0
 800970c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800970e:	bf00      	nop
 8009710:	3754      	adds	r7, #84	; 0x54
 8009712:	46bd      	mov	sp, r7
 8009714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009718:	4770      	bx	lr

0800971a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800971a:	b480      	push	{r7}
 800971c:	b085      	sub	sp, #20
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009728:	2b01      	cmp	r3, #1
 800972a:	d101      	bne.n	8009730 <HAL_UARTEx_DisableFifoMode+0x16>
 800972c:	2302      	movs	r3, #2
 800972e:	e027      	b.n	8009780 <HAL_UARTEx_DisableFifoMode+0x66>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2201      	movs	r2, #1
 8009734:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2224      	movs	r2, #36	; 0x24
 800973c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	681a      	ldr	r2, [r3, #0]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f022 0201 	bic.w	r2, r2, #1
 8009756:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800975e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2200      	movs	r2, #0
 8009764:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	68fa      	ldr	r2, [r7, #12]
 800976c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2220      	movs	r2, #32
 8009772:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2200      	movs	r2, #0
 800977a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800977e:	2300      	movs	r3, #0
}
 8009780:	4618      	mov	r0, r3
 8009782:	3714      	adds	r7, #20
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr

0800978c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b084      	sub	sp, #16
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
 8009794:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800979c:	2b01      	cmp	r3, #1
 800979e:	d101      	bne.n	80097a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80097a0:	2302      	movs	r3, #2
 80097a2:	e02d      	b.n	8009800 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2201      	movs	r2, #1
 80097a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2224      	movs	r2, #36	; 0x24
 80097b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f022 0201 	bic.w	r2, r2, #1
 80097ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	689b      	ldr	r3, [r3, #8]
 80097d2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	683a      	ldr	r2, [r7, #0]
 80097dc:	430a      	orrs	r2, r1
 80097de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f000 f84f 	bl	8009884 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	68fa      	ldr	r2, [r7, #12]
 80097ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2220      	movs	r2, #32
 80097f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2200      	movs	r2, #0
 80097fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80097fe:	2300      	movs	r3, #0
}
 8009800:	4618      	mov	r0, r3
 8009802:	3710      	adds	r7, #16
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b084      	sub	sp, #16
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009818:	2b01      	cmp	r3, #1
 800981a:	d101      	bne.n	8009820 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800981c:	2302      	movs	r3, #2
 800981e:	e02d      	b.n	800987c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2201      	movs	r2, #1
 8009824:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2224      	movs	r2, #36	; 0x24
 800982c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	681a      	ldr	r2, [r3, #0]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f022 0201 	bic.w	r2, r2, #1
 8009846:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	689b      	ldr	r3, [r3, #8]
 800984e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	683a      	ldr	r2, [r7, #0]
 8009858:	430a      	orrs	r2, r1
 800985a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f000 f811 	bl	8009884 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	68fa      	ldr	r2, [r7, #12]
 8009868:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2220      	movs	r2, #32
 800986e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2200      	movs	r2, #0
 8009876:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800987a:	2300      	movs	r3, #0
}
 800987c:	4618      	mov	r0, r3
 800987e:	3710      	adds	r7, #16
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009884:	b480      	push	{r7}
 8009886:	b085      	sub	sp, #20
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009890:	2b00      	cmp	r3, #0
 8009892:	d108      	bne.n	80098a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2201      	movs	r2, #1
 8009898:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2201      	movs	r2, #1
 80098a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80098a4:	e031      	b.n	800990a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80098a6:	2308      	movs	r3, #8
 80098a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80098aa:	2308      	movs	r3, #8
 80098ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	689b      	ldr	r3, [r3, #8]
 80098b4:	0e5b      	lsrs	r3, r3, #25
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	f003 0307 	and.w	r3, r3, #7
 80098bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	689b      	ldr	r3, [r3, #8]
 80098c4:	0f5b      	lsrs	r3, r3, #29
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	f003 0307 	and.w	r3, r3, #7
 80098cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80098ce:	7bbb      	ldrb	r3, [r7, #14]
 80098d0:	7b3a      	ldrb	r2, [r7, #12]
 80098d2:	4911      	ldr	r1, [pc, #68]	; (8009918 <UARTEx_SetNbDataToProcess+0x94>)
 80098d4:	5c8a      	ldrb	r2, [r1, r2]
 80098d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80098da:	7b3a      	ldrb	r2, [r7, #12]
 80098dc:	490f      	ldr	r1, [pc, #60]	; (800991c <UARTEx_SetNbDataToProcess+0x98>)
 80098de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80098e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80098e4:	b29a      	uxth	r2, r3
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80098ec:	7bfb      	ldrb	r3, [r7, #15]
 80098ee:	7b7a      	ldrb	r2, [r7, #13]
 80098f0:	4909      	ldr	r1, [pc, #36]	; (8009918 <UARTEx_SetNbDataToProcess+0x94>)
 80098f2:	5c8a      	ldrb	r2, [r1, r2]
 80098f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80098f8:	7b7a      	ldrb	r2, [r7, #13]
 80098fa:	4908      	ldr	r1, [pc, #32]	; (800991c <UARTEx_SetNbDataToProcess+0x98>)
 80098fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80098fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8009902:	b29a      	uxth	r2, r3
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800990a:	bf00      	nop
 800990c:	3714      	adds	r7, #20
 800990e:	46bd      	mov	sp, r7
 8009910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009914:	4770      	bx	lr
 8009916:	bf00      	nop
 8009918:	0800aea8 	.word	0x0800aea8
 800991c:	0800aeb0 	.word	0x0800aeb0

08009920 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8009920:	b480      	push	{r7}
 8009922:	b08b      	sub	sp, #44	; 0x2c
 8009924:	af00      	add	r7, sp, #0
 8009926:	60f8      	str	r0, [r7, #12]
 8009928:	60b9      	str	r1, [r7, #8]
 800992a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681a      	ldr	r2, [r3, #0]
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	fa93 f3a3 	rbit	r3, r3
 800993a:	613b      	str	r3, [r7, #16]
  return result;
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009940:	69bb      	ldr	r3, [r7, #24]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d101      	bne.n	800994a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8009946:	2320      	movs	r3, #32
 8009948:	e003      	b.n	8009952 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800994a:	69bb      	ldr	r3, [r7, #24]
 800994c:	fab3 f383 	clz	r3, r3
 8009950:	b2db      	uxtb	r3, r3
 8009952:	005b      	lsls	r3, r3, #1
 8009954:	2103      	movs	r1, #3
 8009956:	fa01 f303 	lsl.w	r3, r1, r3
 800995a:	43db      	mvns	r3, r3
 800995c:	401a      	ands	r2, r3
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009962:	6a3b      	ldr	r3, [r7, #32]
 8009964:	fa93 f3a3 	rbit	r3, r3
 8009968:	61fb      	str	r3, [r7, #28]
  return result;
 800996a:	69fb      	ldr	r3, [r7, #28]
 800996c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800996e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009970:	2b00      	cmp	r3, #0
 8009972:	d101      	bne.n	8009978 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8009974:	2320      	movs	r3, #32
 8009976:	e003      	b.n	8009980 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8009978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800997a:	fab3 f383 	clz	r3, r3
 800997e:	b2db      	uxtb	r3, r3
 8009980:	005b      	lsls	r3, r3, #1
 8009982:	6879      	ldr	r1, [r7, #4]
 8009984:	fa01 f303 	lsl.w	r3, r1, r3
 8009988:	431a      	orrs	r2, r3
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	601a      	str	r2, [r3, #0]
}
 800998e:	bf00      	nop
 8009990:	372c      	adds	r7, #44	; 0x2c
 8009992:	46bd      	mov	sp, r7
 8009994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009998:	4770      	bx	lr

0800999a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800999a:	b480      	push	{r7}
 800999c:	b085      	sub	sp, #20
 800999e:	af00      	add	r7, sp, #0
 80099a0:	60f8      	str	r0, [r7, #12]
 80099a2:	60b9      	str	r1, [r7, #8]
 80099a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	685a      	ldr	r2, [r3, #4]
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	43db      	mvns	r3, r3
 80099ae:	401a      	ands	r2, r3
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	6879      	ldr	r1, [r7, #4]
 80099b4:	fb01 f303 	mul.w	r3, r1, r3
 80099b8:	431a      	orrs	r2, r3
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	605a      	str	r2, [r3, #4]
}
 80099be:	bf00      	nop
 80099c0:	3714      	adds	r7, #20
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr

080099ca <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80099ca:	b480      	push	{r7}
 80099cc:	b08b      	sub	sp, #44	; 0x2c
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	60f8      	str	r0, [r7, #12]
 80099d2:	60b9      	str	r1, [r7, #8]
 80099d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	689a      	ldr	r2, [r3, #8]
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	fa93 f3a3 	rbit	r3, r3
 80099e4:	613b      	str	r3, [r7, #16]
  return result;
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80099ea:	69bb      	ldr	r3, [r7, #24]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d101      	bne.n	80099f4 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80099f0:	2320      	movs	r3, #32
 80099f2:	e003      	b.n	80099fc <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80099f4:	69bb      	ldr	r3, [r7, #24]
 80099f6:	fab3 f383 	clz	r3, r3
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	005b      	lsls	r3, r3, #1
 80099fe:	2103      	movs	r1, #3
 8009a00:	fa01 f303 	lsl.w	r3, r1, r3
 8009a04:	43db      	mvns	r3, r3
 8009a06:	401a      	ands	r2, r3
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a0c:	6a3b      	ldr	r3, [r7, #32]
 8009a0e:	fa93 f3a3 	rbit	r3, r3
 8009a12:	61fb      	str	r3, [r7, #28]
  return result;
 8009a14:	69fb      	ldr	r3, [r7, #28]
 8009a16:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d101      	bne.n	8009a22 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8009a1e:	2320      	movs	r3, #32
 8009a20:	e003      	b.n	8009a2a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8009a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a24:	fab3 f383 	clz	r3, r3
 8009a28:	b2db      	uxtb	r3, r3
 8009a2a:	005b      	lsls	r3, r3, #1
 8009a2c:	6879      	ldr	r1, [r7, #4]
 8009a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8009a32:	431a      	orrs	r2, r3
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8009a38:	bf00      	nop
 8009a3a:	372c      	adds	r7, #44	; 0x2c
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr

08009a44 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b08b      	sub	sp, #44	; 0x2c
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	60f8      	str	r0, [r7, #12]
 8009a4c:	60b9      	str	r1, [r7, #8]
 8009a4e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	68da      	ldr	r2, [r3, #12]
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	fa93 f3a3 	rbit	r3, r3
 8009a5e:	613b      	str	r3, [r7, #16]
  return result;
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009a64:	69bb      	ldr	r3, [r7, #24]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d101      	bne.n	8009a6e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8009a6a:	2320      	movs	r3, #32
 8009a6c:	e003      	b.n	8009a76 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	fab3 f383 	clz	r3, r3
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	005b      	lsls	r3, r3, #1
 8009a78:	2103      	movs	r1, #3
 8009a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8009a7e:	43db      	mvns	r3, r3
 8009a80:	401a      	ands	r2, r3
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a86:	6a3b      	ldr	r3, [r7, #32]
 8009a88:	fa93 f3a3 	rbit	r3, r3
 8009a8c:	61fb      	str	r3, [r7, #28]
  return result;
 8009a8e:	69fb      	ldr	r3, [r7, #28]
 8009a90:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d101      	bne.n	8009a9c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8009a98:	2320      	movs	r3, #32
 8009a9a:	e003      	b.n	8009aa4 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8009a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9e:	fab3 f383 	clz	r3, r3
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	005b      	lsls	r3, r3, #1
 8009aa6:	6879      	ldr	r1, [r7, #4]
 8009aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8009aac:	431a      	orrs	r2, r3
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	60da      	str	r2, [r3, #12]
}
 8009ab2:	bf00      	nop
 8009ab4:	372c      	adds	r7, #44	; 0x2c
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abc:	4770      	bx	lr

08009abe <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009abe:	b480      	push	{r7}
 8009ac0:	b08b      	sub	sp, #44	; 0x2c
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	60f8      	str	r0, [r7, #12]
 8009ac6:	60b9      	str	r1, [r7, #8]
 8009ac8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	6a1a      	ldr	r2, [r3, #32]
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	fa93 f3a3 	rbit	r3, r3
 8009ad8:	613b      	str	r3, [r7, #16]
  return result;
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009ade:	69bb      	ldr	r3, [r7, #24]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d101      	bne.n	8009ae8 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8009ae4:	2320      	movs	r3, #32
 8009ae6:	e003      	b.n	8009af0 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8009ae8:	69bb      	ldr	r3, [r7, #24]
 8009aea:	fab3 f383 	clz	r3, r3
 8009aee:	b2db      	uxtb	r3, r3
 8009af0:	009b      	lsls	r3, r3, #2
 8009af2:	210f      	movs	r1, #15
 8009af4:	fa01 f303 	lsl.w	r3, r1, r3
 8009af8:	43db      	mvns	r3, r3
 8009afa:	401a      	ands	r2, r3
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b00:	6a3b      	ldr	r3, [r7, #32]
 8009b02:	fa93 f3a3 	rbit	r3, r3
 8009b06:	61fb      	str	r3, [r7, #28]
  return result;
 8009b08:	69fb      	ldr	r3, [r7, #28]
 8009b0a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d101      	bne.n	8009b16 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8009b12:	2320      	movs	r3, #32
 8009b14:	e003      	b.n	8009b1e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8009b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b18:	fab3 f383 	clz	r3, r3
 8009b1c:	b2db      	uxtb	r3, r3
 8009b1e:	009b      	lsls	r3, r3, #2
 8009b20:	6879      	ldr	r1, [r7, #4]
 8009b22:	fa01 f303 	lsl.w	r3, r1, r3
 8009b26:	431a      	orrs	r2, r3
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8009b2c:	bf00      	nop
 8009b2e:	372c      	adds	r7, #44	; 0x2c
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr

08009b38 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b08b      	sub	sp, #44	; 0x2c
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	60f8      	str	r0, [r7, #12]
 8009b40:	60b9      	str	r1, [r7, #8]
 8009b42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	0a1b      	lsrs	r3, r3, #8
 8009b4c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	fa93 f3a3 	rbit	r3, r3
 8009b54:	613b      	str	r3, [r7, #16]
  return result;
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009b5a:	69bb      	ldr	r3, [r7, #24]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d101      	bne.n	8009b64 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8009b60:	2320      	movs	r3, #32
 8009b62:	e003      	b.n	8009b6c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8009b64:	69bb      	ldr	r3, [r7, #24]
 8009b66:	fab3 f383 	clz	r3, r3
 8009b6a:	b2db      	uxtb	r3, r3
 8009b6c:	009b      	lsls	r3, r3, #2
 8009b6e:	210f      	movs	r1, #15
 8009b70:	fa01 f303 	lsl.w	r3, r1, r3
 8009b74:	43db      	mvns	r3, r3
 8009b76:	401a      	ands	r2, r3
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	0a1b      	lsrs	r3, r3, #8
 8009b7c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b7e:	6a3b      	ldr	r3, [r7, #32]
 8009b80:	fa93 f3a3 	rbit	r3, r3
 8009b84:	61fb      	str	r3, [r7, #28]
  return result;
 8009b86:	69fb      	ldr	r3, [r7, #28]
 8009b88:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d101      	bne.n	8009b94 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8009b90:	2320      	movs	r3, #32
 8009b92:	e003      	b.n	8009b9c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8009b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b96:	fab3 f383 	clz	r3, r3
 8009b9a:	b2db      	uxtb	r3, r3
 8009b9c:	009b      	lsls	r3, r3, #2
 8009b9e:	6879      	ldr	r1, [r7, #4]
 8009ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8009ba4:	431a      	orrs	r2, r3
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8009baa:	bf00      	nop
 8009bac:	372c      	adds	r7, #44	; 0x2c
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb4:	4770      	bx	lr

08009bb6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8009bb6:	b580      	push	{r7, lr}
 8009bb8:	b08a      	sub	sp, #40	; 0x28
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	6078      	str	r0, [r7, #4]
 8009bbe:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009bc6:	69bb      	ldr	r3, [r7, #24]
 8009bc8:	fa93 f3a3 	rbit	r3, r3
 8009bcc:	617b      	str	r3, [r7, #20]
  return result;
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8009bd2:	69fb      	ldr	r3, [r7, #28]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d101      	bne.n	8009bdc <LL_GPIO_Init+0x26>
    return 32U;
 8009bd8:	2320      	movs	r3, #32
 8009bda:	e003      	b.n	8009be4 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8009bdc:	69fb      	ldr	r3, [r7, #28]
 8009bde:	fab3 f383 	clz	r3, r3
 8009be2:	b2db      	uxtb	r3, r3
 8009be4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8009be6:	e058      	b.n	8009c9a <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	681a      	ldr	r2, [r3, #0]
 8009bec:	2101      	movs	r1, #1
 8009bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8009bf4:	4013      	ands	r3, r2
 8009bf6:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 8009bf8:	6a3b      	ldr	r3, [r7, #32]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d04a      	beq.n	8009c94 <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	685b      	ldr	r3, [r3, #4]
 8009c02:	2b01      	cmp	r3, #1
 8009c04:	d003      	beq.n	8009c0e <LL_GPIO_Init+0x58>
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	685b      	ldr	r3, [r3, #4]
 8009c0a:	2b02      	cmp	r3, #2
 8009c0c:	d10e      	bne.n	8009c2c <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	689b      	ldr	r3, [r3, #8]
 8009c12:	461a      	mov	r2, r3
 8009c14:	6a39      	ldr	r1, [r7, #32]
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f7ff fed7 	bl	80099ca <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	6819      	ldr	r1, [r3, #0]
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	68db      	ldr	r3, [r3, #12]
 8009c24:	461a      	mov	r2, r3
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f7ff feb7 	bl	800999a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	691b      	ldr	r3, [r3, #16]
 8009c30:	461a      	mov	r2, r3
 8009c32:	6a39      	ldr	r1, [r7, #32]
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f7ff ff05 	bl	8009a44 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	2b02      	cmp	r3, #2
 8009c40:	d121      	bne.n	8009c86 <LL_GPIO_Init+0xd0>
 8009c42:	6a3b      	ldr	r3, [r7, #32]
 8009c44:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	fa93 f3a3 	rbit	r3, r3
 8009c4c:	60bb      	str	r3, [r7, #8]
  return result;
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d101      	bne.n	8009c5c <LL_GPIO_Init+0xa6>
    return 32U;
 8009c58:	2320      	movs	r3, #32
 8009c5a:	e003      	b.n	8009c64 <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	fab3 f383 	clz	r3, r3
 8009c62:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 8009c64:	2b07      	cmp	r3, #7
 8009c66:	d807      	bhi.n	8009c78 <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	695b      	ldr	r3, [r3, #20]
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	6a39      	ldr	r1, [r7, #32]
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f7ff ff24 	bl	8009abe <LL_GPIO_SetAFPin_0_7>
 8009c76:	e006      	b.n	8009c86 <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	695b      	ldr	r3, [r3, #20]
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	6a39      	ldr	r1, [r7, #32]
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f7ff ff59 	bl	8009b38 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	685b      	ldr	r3, [r3, #4]
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	6a39      	ldr	r1, [r7, #32]
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f7ff fe46 	bl	8009920 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8009c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c96:	3301      	adds	r3, #1
 8009c98:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	681a      	ldr	r2, [r3, #0]
 8009c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d19f      	bne.n	8009be8 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8009ca8:	2300      	movs	r3, #0
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3728      	adds	r7, #40	; 0x28
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}

08009cb2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b084      	sub	sp, #16
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	f107 001c 	add.w	r0, r7, #28
 8009cc0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	68db      	ldr	r3, [r3, #12]
 8009cc8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f000 fd85 	bl	800a7e0 <USB_CoreReset>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8009cda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d106      	bne.n	8009cee <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ce4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	639a      	str	r2, [r3, #56]	; 0x38
 8009cec:	e005      	b.n	8009cfa <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cf2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 8009cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3710      	adds	r7, #16
 8009d00:	46bd      	mov	sp, r7
 8009d02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009d06:	b004      	add	sp, #16
 8009d08:	4770      	bx	lr
	...

08009d0c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b087      	sub	sp, #28
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	60f8      	str	r0, [r7, #12]
 8009d14:	60b9      	str	r1, [r7, #8]
 8009d16:	4613      	mov	r3, r2
 8009d18:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009d1a:	79fb      	ldrb	r3, [r7, #7]
 8009d1c:	2b02      	cmp	r3, #2
 8009d1e:	d165      	bne.n	8009dec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	4a41      	ldr	r2, [pc, #260]	; (8009e28 <USB_SetTurnaroundTime+0x11c>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d906      	bls.n	8009d36 <USB_SetTurnaroundTime+0x2a>
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	4a40      	ldr	r2, [pc, #256]	; (8009e2c <USB_SetTurnaroundTime+0x120>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d202      	bcs.n	8009d36 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009d30:	230f      	movs	r3, #15
 8009d32:	617b      	str	r3, [r7, #20]
 8009d34:	e062      	b.n	8009dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	4a3c      	ldr	r2, [pc, #240]	; (8009e2c <USB_SetTurnaroundTime+0x120>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d306      	bcc.n	8009d4c <USB_SetTurnaroundTime+0x40>
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	4a3b      	ldr	r2, [pc, #236]	; (8009e30 <USB_SetTurnaroundTime+0x124>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d202      	bcs.n	8009d4c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009d46:	230e      	movs	r3, #14
 8009d48:	617b      	str	r3, [r7, #20]
 8009d4a:	e057      	b.n	8009dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	4a38      	ldr	r2, [pc, #224]	; (8009e30 <USB_SetTurnaroundTime+0x124>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d306      	bcc.n	8009d62 <USB_SetTurnaroundTime+0x56>
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	4a37      	ldr	r2, [pc, #220]	; (8009e34 <USB_SetTurnaroundTime+0x128>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d202      	bcs.n	8009d62 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009d5c:	230d      	movs	r3, #13
 8009d5e:	617b      	str	r3, [r7, #20]
 8009d60:	e04c      	b.n	8009dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	4a33      	ldr	r2, [pc, #204]	; (8009e34 <USB_SetTurnaroundTime+0x128>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d306      	bcc.n	8009d78 <USB_SetTurnaroundTime+0x6c>
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	4a32      	ldr	r2, [pc, #200]	; (8009e38 <USB_SetTurnaroundTime+0x12c>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d802      	bhi.n	8009d78 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009d72:	230c      	movs	r3, #12
 8009d74:	617b      	str	r3, [r7, #20]
 8009d76:	e041      	b.n	8009dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	4a2f      	ldr	r2, [pc, #188]	; (8009e38 <USB_SetTurnaroundTime+0x12c>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d906      	bls.n	8009d8e <USB_SetTurnaroundTime+0x82>
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	4a2e      	ldr	r2, [pc, #184]	; (8009e3c <USB_SetTurnaroundTime+0x130>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d802      	bhi.n	8009d8e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009d88:	230b      	movs	r3, #11
 8009d8a:	617b      	str	r3, [r7, #20]
 8009d8c:	e036      	b.n	8009dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	4a2a      	ldr	r2, [pc, #168]	; (8009e3c <USB_SetTurnaroundTime+0x130>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d906      	bls.n	8009da4 <USB_SetTurnaroundTime+0x98>
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	4a29      	ldr	r2, [pc, #164]	; (8009e40 <USB_SetTurnaroundTime+0x134>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d802      	bhi.n	8009da4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009d9e:	230a      	movs	r3, #10
 8009da0:	617b      	str	r3, [r7, #20]
 8009da2:	e02b      	b.n	8009dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	4a26      	ldr	r2, [pc, #152]	; (8009e40 <USB_SetTurnaroundTime+0x134>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d906      	bls.n	8009dba <USB_SetTurnaroundTime+0xae>
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	4a25      	ldr	r2, [pc, #148]	; (8009e44 <USB_SetTurnaroundTime+0x138>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d202      	bcs.n	8009dba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009db4:	2309      	movs	r3, #9
 8009db6:	617b      	str	r3, [r7, #20]
 8009db8:	e020      	b.n	8009dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	4a21      	ldr	r2, [pc, #132]	; (8009e44 <USB_SetTurnaroundTime+0x138>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d306      	bcc.n	8009dd0 <USB_SetTurnaroundTime+0xc4>
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	4a20      	ldr	r2, [pc, #128]	; (8009e48 <USB_SetTurnaroundTime+0x13c>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d802      	bhi.n	8009dd0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009dca:	2308      	movs	r3, #8
 8009dcc:	617b      	str	r3, [r7, #20]
 8009dce:	e015      	b.n	8009dfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	4a1d      	ldr	r2, [pc, #116]	; (8009e48 <USB_SetTurnaroundTime+0x13c>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d906      	bls.n	8009de6 <USB_SetTurnaroundTime+0xda>
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	4a1c      	ldr	r2, [pc, #112]	; (8009e4c <USB_SetTurnaroundTime+0x140>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d202      	bcs.n	8009de6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009de0:	2307      	movs	r3, #7
 8009de2:	617b      	str	r3, [r7, #20]
 8009de4:	e00a      	b.n	8009dfc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009de6:	2306      	movs	r3, #6
 8009de8:	617b      	str	r3, [r7, #20]
 8009dea:	e007      	b.n	8009dfc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009dec:	79fb      	ldrb	r3, [r7, #7]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d102      	bne.n	8009df8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009df2:	2309      	movs	r3, #9
 8009df4:	617b      	str	r3, [r7, #20]
 8009df6:	e001      	b.n	8009dfc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009df8:	2309      	movs	r3, #9
 8009dfa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	68db      	ldr	r3, [r3, #12]
 8009e00:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	68da      	ldr	r2, [r3, #12]
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	029b      	lsls	r3, r3, #10
 8009e10:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009e14:	431a      	orrs	r2, r3
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009e1a:	2300      	movs	r3, #0
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	371c      	adds	r7, #28
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr
 8009e28:	00d8acbf 	.word	0x00d8acbf
 8009e2c:	00e4e1c0 	.word	0x00e4e1c0
 8009e30:	00f42400 	.word	0x00f42400
 8009e34:	01067380 	.word	0x01067380
 8009e38:	011a499f 	.word	0x011a499f
 8009e3c:	01312cff 	.word	0x01312cff
 8009e40:	014ca43f 	.word	0x014ca43f
 8009e44:	016e3600 	.word	0x016e3600
 8009e48:	01a6ab1f 	.word	0x01a6ab1f
 8009e4c:	01e84800 	.word	0x01e84800

08009e50 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b083      	sub	sp, #12
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	689b      	ldr	r3, [r3, #8]
 8009e5c:	f023 0201 	bic.w	r2, r3, #1
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009e64:	2300      	movs	r3, #0
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	370c      	adds	r7, #12
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr

08009e72 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009e72:	b580      	push	{r7, lr}
 8009e74:	b084      	sub	sp, #16
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	6078      	str	r0, [r7, #4]
 8009e7a:	460b      	mov	r3, r1
 8009e7c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	68db      	ldr	r3, [r3, #12]
 8009e86:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009e8e:	78fb      	ldrb	r3, [r7, #3]
 8009e90:	2b01      	cmp	r3, #1
 8009e92:	d115      	bne.n	8009ec0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	68db      	ldr	r3, [r3, #12]
 8009e98:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009ea0:	2001      	movs	r0, #1
 8009ea2:	f7f7 fa41 	bl	8001328 <HAL_Delay>
      ms++;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	3301      	adds	r3, #1
 8009eaa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f000 fc07 	bl	800a6c0 <USB_GetMode>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	2b01      	cmp	r3, #1
 8009eb6:	d01e      	beq.n	8009ef6 <USB_SetCurrentMode+0x84>
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2b31      	cmp	r3, #49	; 0x31
 8009ebc:	d9f0      	bls.n	8009ea0 <USB_SetCurrentMode+0x2e>
 8009ebe:	e01a      	b.n	8009ef6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009ec0:	78fb      	ldrb	r3, [r7, #3]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d115      	bne.n	8009ef2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	68db      	ldr	r3, [r3, #12]
 8009eca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009ed2:	2001      	movs	r0, #1
 8009ed4:	f7f7 fa28 	bl	8001328 <HAL_Delay>
      ms++;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	3301      	adds	r3, #1
 8009edc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f000 fbee 	bl	800a6c0 <USB_GetMode>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d005      	beq.n	8009ef6 <USB_SetCurrentMode+0x84>
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2b31      	cmp	r3, #49	; 0x31
 8009eee:	d9f0      	bls.n	8009ed2 <USB_SetCurrentMode+0x60>
 8009ef0:	e001      	b.n	8009ef6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	e005      	b.n	8009f02 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	2b32      	cmp	r3, #50	; 0x32
 8009efa:	d101      	bne.n	8009f00 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009efc:	2301      	movs	r3, #1
 8009efe:	e000      	b.n	8009f02 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009f00:	2300      	movs	r3, #0
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3710      	adds	r7, #16
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
	...

08009f0c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009f0c:	b084      	sub	sp, #16
 8009f0e:	b580      	push	{r7, lr}
 8009f10:	b086      	sub	sp, #24
 8009f12:	af00      	add	r7, sp, #0
 8009f14:	6078      	str	r0, [r7, #4]
 8009f16:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009f1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009f26:	2300      	movs	r3, #0
 8009f28:	613b      	str	r3, [r7, #16]
 8009f2a:	e009      	b.n	8009f40 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009f2c:	687a      	ldr	r2, [r7, #4]
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	3340      	adds	r3, #64	; 0x40
 8009f32:	009b      	lsls	r3, r3, #2
 8009f34:	4413      	add	r3, r2
 8009f36:	2200      	movs	r2, #0
 8009f38:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	3301      	adds	r3, #1
 8009f3e:	613b      	str	r3, [r7, #16]
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	2b0e      	cmp	r3, #14
 8009f44:	d9f2      	bls.n	8009f2c <USB_DevInit+0x20>
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009f46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d11c      	bne.n	8009f86 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	68fa      	ldr	r2, [r7, #12]
 8009f56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f5a:	f043 0302 	orr.w	r3, r3, #2
 8009f5e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f64:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	601a      	str	r2, [r3, #0]
 8009f84:	e005      	b.n	8009f92 <USB_DevInit+0x86>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f8a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009f98:	461a      	mov	r2, r3
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	6013      	str	r3, [r2, #0]
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009f9e:	2103      	movs	r1, #3
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f000 f95b 	bl	800a25c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009fa6:	2110      	movs	r1, #16
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f000 f8f3 	bl	800a194 <USB_FlushTxFifo>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d001      	beq.n	8009fb8 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f000 f91f 	bl	800a1fc <USB_FlushRxFifo>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d001      	beq.n	8009fc8 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fce:	461a      	mov	r2, r3
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fda:	461a      	mov	r2, r3
 8009fdc:	2300      	movs	r3, #0
 8009fde:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fe6:	461a      	mov	r2, r3
 8009fe8:	2300      	movs	r3, #0
 8009fea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009fec:	2300      	movs	r3, #0
 8009fee:	613b      	str	r3, [r7, #16]
 8009ff0:	e043      	b.n	800a07a <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	015a      	lsls	r2, r3, #5
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	4413      	add	r3, r2
 8009ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a004:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a008:	d118      	bne.n	800a03c <USB_DevInit+0x130>
    {
      if (i == 0U)
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d10a      	bne.n	800a026 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	015a      	lsls	r2, r3, #5
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	4413      	add	r3, r2
 800a018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a01c:	461a      	mov	r2, r3
 800a01e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a022:	6013      	str	r3, [r2, #0]
 800a024:	e013      	b.n	800a04e <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	015a      	lsls	r2, r3, #5
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	4413      	add	r3, r2
 800a02e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a032:	461a      	mov	r2, r3
 800a034:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a038:	6013      	str	r3, [r2, #0]
 800a03a:	e008      	b.n	800a04e <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	015a      	lsls	r2, r3, #5
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	4413      	add	r3, r2
 800a044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a048:	461a      	mov	r2, r3
 800a04a:	2300      	movs	r3, #0
 800a04c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	015a      	lsls	r2, r3, #5
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	4413      	add	r3, r2
 800a056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a05a:	461a      	mov	r2, r3
 800a05c:	2300      	movs	r3, #0
 800a05e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a060:	693b      	ldr	r3, [r7, #16]
 800a062:	015a      	lsls	r2, r3, #5
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	4413      	add	r3, r2
 800a068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a06c:	461a      	mov	r2, r3
 800a06e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a072:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	3301      	adds	r3, #1
 800a078:	613b      	str	r3, [r7, #16]
 800a07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07c:	693a      	ldr	r2, [r7, #16]
 800a07e:	429a      	cmp	r2, r3
 800a080:	d3b7      	bcc.n	8009ff2 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a082:	2300      	movs	r3, #0
 800a084:	613b      	str	r3, [r7, #16]
 800a086:	e043      	b.n	800a110 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	015a      	lsls	r2, r3, #5
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	4413      	add	r3, r2
 800a090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a09a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a09e:	d118      	bne.n	800a0d2 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d10a      	bne.n	800a0bc <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	015a      	lsls	r2, r3, #5
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	4413      	add	r3, r2
 800a0ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a0b8:	6013      	str	r3, [r2, #0]
 800a0ba:	e013      	b.n	800a0e4 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	015a      	lsls	r2, r3, #5
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	4413      	add	r3, r2
 800a0c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0c8:	461a      	mov	r2, r3
 800a0ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a0ce:	6013      	str	r3, [r2, #0]
 800a0d0:	e008      	b.n	800a0e4 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	015a      	lsls	r2, r3, #5
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	4413      	add	r3, r2
 800a0da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0de:	461a      	mov	r2, r3
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	015a      	lsls	r2, r3, #5
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	4413      	add	r3, r2
 800a0ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	015a      	lsls	r2, r3, #5
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	4413      	add	r3, r2
 800a0fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a102:	461a      	mov	r2, r3
 800a104:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a108:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	3301      	adds	r3, #1
 800a10e:	613b      	str	r3, [r7, #16]
 800a110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a112:	693a      	ldr	r2, [r7, #16]
 800a114:	429a      	cmp	r2, r3
 800a116:	d3b7      	bcc.n	800a088 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a11e:	691b      	ldr	r3, [r3, #16]
 800a120:	68fa      	ldr	r2, [r7, #12]
 800a122:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a126:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a12a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2200      	movs	r2, #0
 800a130:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a138:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a13a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d105      	bne.n	800a14c <USB_DevInit+0x240>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	699b      	ldr	r3, [r3, #24]
 800a144:	f043 0210 	orr.w	r2, r3, #16
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	699a      	ldr	r2, [r3, #24]
 800a150:	4b0f      	ldr	r3, [pc, #60]	; (800a190 <USB_DevInit+0x284>)
 800a152:	4313      	orrs	r3, r2
 800a154:	687a      	ldr	r2, [r7, #4]
 800a156:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d005      	beq.n	800a16a <USB_DevInit+0x25e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	699b      	ldr	r3, [r3, #24]
 800a162:	f043 0208 	orr.w	r2, r3, #8
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a16a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	d107      	bne.n	800a180 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	699b      	ldr	r3, [r3, #24]
 800a174:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a178:	f043 0304 	orr.w	r3, r3, #4
 800a17c:	687a      	ldr	r2, [r7, #4]
 800a17e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a180:	7dfb      	ldrb	r3, [r7, #23]
}
 800a182:	4618      	mov	r0, r3
 800a184:	3718      	adds	r7, #24
 800a186:	46bd      	mov	sp, r7
 800a188:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a18c:	b004      	add	sp, #16
 800a18e:	4770      	bx	lr
 800a190:	803c3800 	.word	0x803c3800

0800a194 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a194:	b480      	push	{r7}
 800a196:	b085      	sub	sp, #20
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	3301      	adds	r3, #1
 800a1a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	4a13      	ldr	r2, [pc, #76]	; (800a1f8 <USB_FlushTxFifo+0x64>)
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d901      	bls.n	800a1b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a1b0:	2303      	movs	r3, #3
 800a1b2:	e01b      	b.n	800a1ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	691b      	ldr	r3, [r3, #16]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	daf2      	bge.n	800a1a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	019b      	lsls	r3, r3, #6
 800a1c4:	f043 0220 	orr.w	r2, r3, #32
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	3301      	adds	r3, #1
 800a1d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	4a08      	ldr	r2, [pc, #32]	; (800a1f8 <USB_FlushTxFifo+0x64>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d901      	bls.n	800a1de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a1da:	2303      	movs	r3, #3
 800a1dc:	e006      	b.n	800a1ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	691b      	ldr	r3, [r3, #16]
 800a1e2:	f003 0320 	and.w	r3, r3, #32
 800a1e6:	2b20      	cmp	r3, #32
 800a1e8:	d0f0      	beq.n	800a1cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a1ea:	2300      	movs	r3, #0
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3714      	adds	r7, #20
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr
 800a1f8:	00030d40 	.word	0x00030d40

0800a1fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b085      	sub	sp, #20
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a204:	2300      	movs	r3, #0
 800a206:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	3301      	adds	r3, #1
 800a20c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	4a11      	ldr	r2, [pc, #68]	; (800a258 <USB_FlushRxFifo+0x5c>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d901      	bls.n	800a21a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a216:	2303      	movs	r3, #3
 800a218:	e018      	b.n	800a24c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	691b      	ldr	r3, [r3, #16]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	daf2      	bge.n	800a208 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a222:	2300      	movs	r3, #0
 800a224:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2210      	movs	r2, #16
 800a22a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	3301      	adds	r3, #1
 800a230:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	4a08      	ldr	r2, [pc, #32]	; (800a258 <USB_FlushRxFifo+0x5c>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d901      	bls.n	800a23e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a23a:	2303      	movs	r3, #3
 800a23c:	e006      	b.n	800a24c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	691b      	ldr	r3, [r3, #16]
 800a242:	f003 0310 	and.w	r3, r3, #16
 800a246:	2b10      	cmp	r3, #16
 800a248:	d0f0      	beq.n	800a22c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a24a:	2300      	movs	r3, #0
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3714      	adds	r7, #20
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr
 800a258:	00030d40 	.word	0x00030d40

0800a25c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b085      	sub	sp, #20
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	460b      	mov	r3, r1
 800a266:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a272:	681a      	ldr	r2, [r3, #0]
 800a274:	78fb      	ldrb	r3, [r7, #3]
 800a276:	68f9      	ldr	r1, [r7, #12]
 800a278:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a27c:	4313      	orrs	r3, r2
 800a27e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a280:	2300      	movs	r3, #0
}
 800a282:	4618      	mov	r0, r3
 800a284:	3714      	adds	r7, #20
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr

0800a28e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a28e:	b480      	push	{r7}
 800a290:	b087      	sub	sp, #28
 800a292:	af00      	add	r7, sp, #0
 800a294:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2a0:	689b      	ldr	r3, [r3, #8]
 800a2a2:	f003 0306 	and.w	r3, r3, #6
 800a2a6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d102      	bne.n	800a2b4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	75fb      	strb	r3, [r7, #23]
 800a2b2:	e00a      	b.n	800a2ca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2b02      	cmp	r3, #2
 800a2b8:	d002      	beq.n	800a2c0 <USB_GetDevSpeed+0x32>
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2b06      	cmp	r3, #6
 800a2be:	d102      	bne.n	800a2c6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a2c0:	2302      	movs	r3, #2
 800a2c2:	75fb      	strb	r3, [r7, #23]
 800a2c4:	e001      	b.n	800a2ca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a2c6:	230f      	movs	r3, #15
 800a2c8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a2ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	371c      	adds	r7, #28
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr

0800a2d8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b087      	sub	sp, #28
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	785b      	ldrb	r3, [r3, #1]
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	d14a      	bne.n	800a38c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	015a      	lsls	r2, r3, #5
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	4413      	add	r3, r2
 800a300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a30a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a30e:	f040 8086 	bne.w	800a41e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	781b      	ldrb	r3, [r3, #0]
 800a316:	015a      	lsls	r2, r3, #5
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	4413      	add	r3, r2
 800a31c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	683a      	ldr	r2, [r7, #0]
 800a324:	7812      	ldrb	r2, [r2, #0]
 800a326:	0151      	lsls	r1, r2, #5
 800a328:	693a      	ldr	r2, [r7, #16]
 800a32a:	440a      	add	r2, r1
 800a32c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a330:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a334:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	781b      	ldrb	r3, [r3, #0]
 800a33a:	015a      	lsls	r2, r3, #5
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	4413      	add	r3, r2
 800a340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	683a      	ldr	r2, [r7, #0]
 800a348:	7812      	ldrb	r2, [r2, #0]
 800a34a:	0151      	lsls	r1, r2, #5
 800a34c:	693a      	ldr	r2, [r7, #16]
 800a34e:	440a      	add	r2, r1
 800a350:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a354:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a358:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	3301      	adds	r3, #1
 800a35e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	f242 7210 	movw	r2, #10000	; 0x2710
 800a366:	4293      	cmp	r3, r2
 800a368:	d902      	bls.n	800a370 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a36a:	2301      	movs	r3, #1
 800a36c:	75fb      	strb	r3, [r7, #23]
          break;
 800a36e:	e056      	b.n	800a41e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	781b      	ldrb	r3, [r3, #0]
 800a374:	015a      	lsls	r2, r3, #5
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	4413      	add	r3, r2
 800a37a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a384:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a388:	d0e7      	beq.n	800a35a <USB_EPStopXfer+0x82>
 800a38a:	e048      	b.n	800a41e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	781b      	ldrb	r3, [r3, #0]
 800a390:	015a      	lsls	r2, r3, #5
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	4413      	add	r3, r2
 800a396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a3a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a3a4:	d13b      	bne.n	800a41e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	781b      	ldrb	r3, [r3, #0]
 800a3aa:	015a      	lsls	r2, r3, #5
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	4413      	add	r3, r2
 800a3b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	683a      	ldr	r2, [r7, #0]
 800a3b8:	7812      	ldrb	r2, [r2, #0]
 800a3ba:	0151      	lsls	r1, r2, #5
 800a3bc:	693a      	ldr	r2, [r7, #16]
 800a3be:	440a      	add	r2, r1
 800a3c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a3c8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	781b      	ldrb	r3, [r3, #0]
 800a3ce:	015a      	lsls	r2, r3, #5
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	4413      	add	r3, r2
 800a3d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	683a      	ldr	r2, [r7, #0]
 800a3dc:	7812      	ldrb	r2, [r2, #0]
 800a3de:	0151      	lsls	r1, r2, #5
 800a3e0:	693a      	ldr	r2, [r7, #16]
 800a3e2:	440a      	add	r2, r1
 800a3e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a3ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	3301      	adds	r3, #1
 800a3f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f242 7210 	movw	r2, #10000	; 0x2710
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d902      	bls.n	800a404 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a3fe:	2301      	movs	r3, #1
 800a400:	75fb      	strb	r3, [r7, #23]
          break;
 800a402:	e00c      	b.n	800a41e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	781b      	ldrb	r3, [r3, #0]
 800a408:	015a      	lsls	r2, r3, #5
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	4413      	add	r3, r2
 800a40e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a418:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a41c:	d0e7      	beq.n	800a3ee <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a41e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a420:	4618      	mov	r0, r3
 800a422:	371c      	adds	r7, #28
 800a424:	46bd      	mov	sp, r7
 800a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42a:	4770      	bx	lr

0800a42c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b089      	sub	sp, #36	; 0x24
 800a430:	af00      	add	r7, sp, #0
 800a432:	60f8      	str	r0, [r7, #12]
 800a434:	60b9      	str	r1, [r7, #8]
 800a436:	4611      	mov	r1, r2
 800a438:	461a      	mov	r2, r3
 800a43a:	460b      	mov	r3, r1
 800a43c:	71fb      	strb	r3, [r7, #7]
 800a43e:	4613      	mov	r3, r2
 800a440:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a44a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d123      	bne.n	800a49a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a452:	88bb      	ldrh	r3, [r7, #4]
 800a454:	3303      	adds	r3, #3
 800a456:	089b      	lsrs	r3, r3, #2
 800a458:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a45a:	2300      	movs	r3, #0
 800a45c:	61bb      	str	r3, [r7, #24]
 800a45e:	e018      	b.n	800a492 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a460:	79fb      	ldrb	r3, [r7, #7]
 800a462:	031a      	lsls	r2, r3, #12
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	4413      	add	r3, r2
 800a468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a46c:	461a      	mov	r2, r3
 800a46e:	69fb      	ldr	r3, [r7, #28]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a474:	69fb      	ldr	r3, [r7, #28]
 800a476:	3301      	adds	r3, #1
 800a478:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a47a:	69fb      	ldr	r3, [r7, #28]
 800a47c:	3301      	adds	r3, #1
 800a47e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a480:	69fb      	ldr	r3, [r7, #28]
 800a482:	3301      	adds	r3, #1
 800a484:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a486:	69fb      	ldr	r3, [r7, #28]
 800a488:	3301      	adds	r3, #1
 800a48a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a48c:	69bb      	ldr	r3, [r7, #24]
 800a48e:	3301      	adds	r3, #1
 800a490:	61bb      	str	r3, [r7, #24]
 800a492:	69ba      	ldr	r2, [r7, #24]
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	429a      	cmp	r2, r3
 800a498:	d3e2      	bcc.n	800a460 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a49a:	2300      	movs	r3, #0
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3724      	adds	r7, #36	; 0x24
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a6:	4770      	bx	lr

0800a4a8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b08b      	sub	sp, #44	; 0x2c
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	60f8      	str	r0, [r7, #12]
 800a4b0:	60b9      	str	r1, [r7, #8]
 800a4b2:	4613      	mov	r3, r2
 800a4b4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a4be:	88fb      	ldrh	r3, [r7, #6]
 800a4c0:	089b      	lsrs	r3, r3, #2
 800a4c2:	b29b      	uxth	r3, r3
 800a4c4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a4c6:	88fb      	ldrh	r3, [r7, #6]
 800a4c8:	f003 0303 	and.w	r3, r3, #3
 800a4cc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	623b      	str	r3, [r7, #32]
 800a4d2:	e014      	b.n	800a4fe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a4d4:	69bb      	ldr	r3, [r7, #24]
 800a4d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4da:	681a      	ldr	r2, [r3, #0]
 800a4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4de:	601a      	str	r2, [r3, #0]
    pDest++;
 800a4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e8:	3301      	adds	r3, #1
 800a4ea:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ee:	3301      	adds	r3, #1
 800a4f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f4:	3301      	adds	r3, #1
 800a4f6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a4f8:	6a3b      	ldr	r3, [r7, #32]
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	623b      	str	r3, [r7, #32]
 800a4fe:	6a3a      	ldr	r2, [r7, #32]
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	429a      	cmp	r2, r3
 800a504:	d3e6      	bcc.n	800a4d4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a506:	8bfb      	ldrh	r3, [r7, #30]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d01e      	beq.n	800a54a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a50c:	2300      	movs	r3, #0
 800a50e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a510:	69bb      	ldr	r3, [r7, #24]
 800a512:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a516:	461a      	mov	r2, r3
 800a518:	f107 0310 	add.w	r3, r7, #16
 800a51c:	6812      	ldr	r2, [r2, #0]
 800a51e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a520:	693a      	ldr	r2, [r7, #16]
 800a522:	6a3b      	ldr	r3, [r7, #32]
 800a524:	b2db      	uxtb	r3, r3
 800a526:	00db      	lsls	r3, r3, #3
 800a528:	fa22 f303 	lsr.w	r3, r2, r3
 800a52c:	b2da      	uxtb	r2, r3
 800a52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a530:	701a      	strb	r2, [r3, #0]
      i++;
 800a532:	6a3b      	ldr	r3, [r7, #32]
 800a534:	3301      	adds	r3, #1
 800a536:	623b      	str	r3, [r7, #32]
      pDest++;
 800a538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a53a:	3301      	adds	r3, #1
 800a53c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a53e:	8bfb      	ldrh	r3, [r7, #30]
 800a540:	3b01      	subs	r3, #1
 800a542:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a544:	8bfb      	ldrh	r3, [r7, #30]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d1ea      	bne.n	800a520 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	372c      	adds	r7, #44	; 0x2c
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr

0800a558 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a558:	b480      	push	{r7}
 800a55a:	b085      	sub	sp, #20
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	68fa      	ldr	r2, [r7, #12]
 800a56e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a572:	f023 0303 	bic.w	r3, r3, #3
 800a576:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a57e:	685b      	ldr	r3, [r3, #4]
 800a580:	68fa      	ldr	r2, [r7, #12]
 800a582:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a586:	f043 0302 	orr.w	r3, r3, #2
 800a58a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a58c:	2300      	movs	r3, #0
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3714      	adds	r7, #20
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr

0800a59a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a59a:	b480      	push	{r7}
 800a59c:	b085      	sub	sp, #20
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	695b      	ldr	r3, [r3, #20]
 800a5a6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	699b      	ldr	r3, [r3, #24]
 800a5ac:	68fa      	ldr	r2, [r7, #12]
 800a5ae:	4013      	ands	r3, r2
 800a5b0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3714      	adds	r7, #20
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr

0800a5c0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b085      	sub	sp, #20
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5d2:	699b      	ldr	r3, [r3, #24]
 800a5d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5dc:	69db      	ldr	r3, [r3, #28]
 800a5de:	68ba      	ldr	r2, [r7, #8]
 800a5e0:	4013      	ands	r3, r2
 800a5e2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	0c1b      	lsrs	r3, r3, #16
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3714      	adds	r7, #20
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f2:	4770      	bx	lr

0800a5f4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b085      	sub	sp, #20
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a606:	699b      	ldr	r3, [r3, #24]
 800a608:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a610:	69db      	ldr	r3, [r3, #28]
 800a612:	68ba      	ldr	r2, [r7, #8]
 800a614:	4013      	ands	r3, r2
 800a616:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	b29b      	uxth	r3, r3
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3714      	adds	r7, #20
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr

0800a628 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a628:	b480      	push	{r7}
 800a62a:	b085      	sub	sp, #20
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	460b      	mov	r3, r1
 800a632:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a638:	78fb      	ldrb	r3, [r7, #3]
 800a63a:	015a      	lsls	r2, r3, #5
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	4413      	add	r3, r2
 800a640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a644:	689b      	ldr	r3, [r3, #8]
 800a646:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a64e:	695b      	ldr	r3, [r3, #20]
 800a650:	68ba      	ldr	r2, [r7, #8]
 800a652:	4013      	ands	r3, r2
 800a654:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a656:	68bb      	ldr	r3, [r7, #8]
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3714      	adds	r7, #20
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr

0800a664 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a664:	b480      	push	{r7}
 800a666:	b087      	sub	sp, #28
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
 800a66c:	460b      	mov	r3, r1
 800a66e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a67a:	691b      	ldr	r3, [r3, #16]
 800a67c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a686:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a688:	78fb      	ldrb	r3, [r7, #3]
 800a68a:	f003 030f 	and.w	r3, r3, #15
 800a68e:	68fa      	ldr	r2, [r7, #12]
 800a690:	fa22 f303 	lsr.w	r3, r2, r3
 800a694:	01db      	lsls	r3, r3, #7
 800a696:	b2db      	uxtb	r3, r3
 800a698:	693a      	ldr	r2, [r7, #16]
 800a69a:	4313      	orrs	r3, r2
 800a69c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a69e:	78fb      	ldrb	r3, [r7, #3]
 800a6a0:	015a      	lsls	r2, r3, #5
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	4413      	add	r3, r2
 800a6a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6aa:	689b      	ldr	r3, [r3, #8]
 800a6ac:	693a      	ldr	r2, [r7, #16]
 800a6ae:	4013      	ands	r3, r2
 800a6b0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a6b2:	68bb      	ldr	r3, [r7, #8]
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	371c      	adds	r7, #28
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6be:	4770      	bx	lr

0800a6c0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b083      	sub	sp, #12
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	695b      	ldr	r3, [r3, #20]
 800a6cc:	f003 0301 	and.w	r3, r3, #1
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	370c      	adds	r7, #12
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr

0800a6dc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b085      	sub	sp, #20
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	68fa      	ldr	r2, [r7, #12]
 800a6f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6f6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a6fa:	f023 0307 	bic.w	r3, r3, #7
 800a6fe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a706:	685b      	ldr	r3, [r3, #4]
 800a708:	68fa      	ldr	r2, [r7, #12]
 800a70a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a70e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a712:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a714:	2300      	movs	r3, #0
}
 800a716:	4618      	mov	r0, r3
 800a718:	3714      	adds	r7, #20
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr
	...

0800a724 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a724:	b480      	push	{r7}
 800a726:	b087      	sub	sp, #28
 800a728:	af00      	add	r7, sp, #0
 800a72a:	60f8      	str	r0, [r7, #12]
 800a72c:	460b      	mov	r3, r1
 800a72e:	607a      	str	r2, [r7, #4]
 800a730:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	333c      	adds	r3, #60	; 0x3c
 800a73a:	3304      	adds	r3, #4
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	4a26      	ldr	r2, [pc, #152]	; (800a7dc <USB_EP0_OutStart+0xb8>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d90a      	bls.n	800a75e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a754:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a758:	d101      	bne.n	800a75e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a75a:	2300      	movs	r3, #0
 800a75c:	e037      	b.n	800a7ce <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a764:	461a      	mov	r2, r3
 800a766:	2300      	movs	r3, #0
 800a768:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a770:	691b      	ldr	r3, [r3, #16]
 800a772:	697a      	ldr	r2, [r7, #20]
 800a774:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a778:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a77c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a784:	691b      	ldr	r3, [r3, #16]
 800a786:	697a      	ldr	r2, [r7, #20]
 800a788:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a78c:	f043 0318 	orr.w	r3, r3, #24
 800a790:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a798:	691b      	ldr	r3, [r3, #16]
 800a79a:	697a      	ldr	r2, [r7, #20]
 800a79c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7a0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a7a4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a7a6:	7afb      	ldrb	r3, [r7, #11]
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d10f      	bne.n	800a7cc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7b2:	461a      	mov	r2, r3
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a7b8:	697b      	ldr	r3, [r7, #20]
 800a7ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	697a      	ldr	r2, [r7, #20]
 800a7c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7c6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a7ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a7cc:	2300      	movs	r3, #0
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	371c      	adds	r7, #28
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d8:	4770      	bx	lr
 800a7da:	bf00      	nop
 800a7dc:	4f54300a 	.word	0x4f54300a

0800a7e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b085      	sub	sp, #20
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	4a13      	ldr	r2, [pc, #76]	; (800a844 <USB_CoreReset+0x64>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d901      	bls.n	800a7fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a7fa:	2303      	movs	r3, #3
 800a7fc:	e01b      	b.n	800a836 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	691b      	ldr	r3, [r3, #16]
 800a802:	2b00      	cmp	r3, #0
 800a804:	daf2      	bge.n	800a7ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a806:	2300      	movs	r3, #0
 800a808:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	691b      	ldr	r3, [r3, #16]
 800a80e:	f043 0201 	orr.w	r2, r3, #1
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	3301      	adds	r3, #1
 800a81a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	4a09      	ldr	r2, [pc, #36]	; (800a844 <USB_CoreReset+0x64>)
 800a820:	4293      	cmp	r3, r2
 800a822:	d901      	bls.n	800a828 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a824:	2303      	movs	r3, #3
 800a826:	e006      	b.n	800a836 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	691b      	ldr	r3, [r3, #16]
 800a82c:	f003 0301 	and.w	r3, r3, #1
 800a830:	2b01      	cmp	r3, #1
 800a832:	d0f0      	beq.n	800a816 <USB_CoreReset+0x36>

  return HAL_OK;
 800a834:	2300      	movs	r3, #0
}
 800a836:	4618      	mov	r0, r3
 800a838:	3714      	adds	r7, #20
 800a83a:	46bd      	mov	sp, r7
 800a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a840:	4770      	bx	lr
 800a842:	bf00      	nop
 800a844:	00030d40 	.word	0x00030d40

0800a848 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a848:	b580      	push	{r7, lr}
 800a84a:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 800a84c:	4b05      	ldr	r3, [pc, #20]	; (800a864 <SysTick_Handler+0x1c>)
 800a84e:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a850:	f000 f98a 	bl	800ab68 <xTaskGetSchedulerState>
 800a854:	4603      	mov	r3, r0
 800a856:	2b01      	cmp	r3, #1
 800a858:	d001      	beq.n	800a85e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a85a:	f000 f9bb 	bl	800abd4 <xPortSysTickHandler>
  }
}
 800a85e:	bf00      	nop
 800a860:	bd80      	pop	{r7, pc}
 800a862:	bf00      	nop
 800a864:	e000e010 	.word	0xe000e010

0800a868 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b088      	sub	sp, #32
 800a86c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800a86e:	2300      	movs	r3, #0
 800a870:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a872:	4b7a      	ldr	r3, [pc, #488]	; (800aa5c <xTaskIncrementTick+0x1f4>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	2b00      	cmp	r3, #0
 800a878:	f040 80e5 	bne.w	800aa46 <xTaskIncrementTick+0x1de>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a87c:	4b78      	ldr	r3, [pc, #480]	; (800aa60 <xTaskIncrementTick+0x1f8>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	3301      	adds	r3, #1
 800a882:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800a884:	4a76      	ldr	r2, [pc, #472]	; (800aa60 <xTaskIncrementTick+0x1f8>)
 800a886:	69bb      	ldr	r3, [r7, #24]
 800a888:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a88a:	69bb      	ldr	r3, [r7, #24]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d118      	bne.n	800a8c2 <xTaskIncrementTick+0x5a>
        {
            taskSWITCH_DELAYED_LISTS();
 800a890:	4b74      	ldr	r3, [pc, #464]	; (800aa64 <xTaskIncrementTick+0x1fc>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d002      	beq.n	800a8a0 <xTaskIncrementTick+0x38>
 800a89a:	f000 f9ed 	bl	800ac78 <ulSetInterruptMask>
 800a89e:	e7fe      	b.n	800a89e <xTaskIncrementTick+0x36>
 800a8a0:	4b70      	ldr	r3, [pc, #448]	; (800aa64 <xTaskIncrementTick+0x1fc>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	617b      	str	r3, [r7, #20]
 800a8a6:	4b70      	ldr	r3, [pc, #448]	; (800aa68 <xTaskIncrementTick+0x200>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	4a6e      	ldr	r2, [pc, #440]	; (800aa64 <xTaskIncrementTick+0x1fc>)
 800a8ac:	6013      	str	r3, [r2, #0]
 800a8ae:	4a6e      	ldr	r2, [pc, #440]	; (800aa68 <xTaskIncrementTick+0x200>)
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	6013      	str	r3, [r2, #0]
 800a8b4:	4b6d      	ldr	r3, [pc, #436]	; (800aa6c <xTaskIncrementTick+0x204>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	3301      	adds	r3, #1
 800a8ba:	4a6c      	ldr	r2, [pc, #432]	; (800aa6c <xTaskIncrementTick+0x204>)
 800a8bc:	6013      	str	r3, [r2, #0]
 800a8be:	f000 f937 	bl	800ab30 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800a8c2:	4b6b      	ldr	r3, [pc, #428]	; (800aa70 <xTaskIncrementTick+0x208>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	69ba      	ldr	r2, [r7, #24]
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	f0c0 80a7 	bcc.w	800aa1c <xTaskIncrementTick+0x1b4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a8ce:	4b65      	ldr	r3, [pc, #404]	; (800aa64 <xTaskIncrementTick+0x1fc>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d104      	bne.n	800a8e2 <xTaskIncrementTick+0x7a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8d8:	4b65      	ldr	r3, [pc, #404]	; (800aa70 <xTaskIncrementTick+0x208>)
 800a8da:	f04f 32ff 	mov.w	r2, #4294967295
 800a8de:	601a      	str	r2, [r3, #0]
                    break;
 800a8e0:	e09c      	b.n	800aa1c <xTaskIncrementTick+0x1b4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8e2:	4b60      	ldr	r3, [pc, #384]	; (800aa64 <xTaskIncrementTick+0x1fc>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	68db      	ldr	r3, [r3, #12]
 800a8e8:	68db      	ldr	r3, [r3, #12]
 800a8ea:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800a8f2:	69ba      	ldr	r2, [r7, #24]
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d203      	bcs.n	800a902 <xTaskIncrementTick+0x9a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800a8fa:	4a5d      	ldr	r2, [pc, #372]	; (800aa70 <xTaskIncrementTick+0x208>)
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800a900:	e08c      	b.n	800aa1c <xTaskIncrementTick+0x1b4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	695b      	ldr	r3, [r3, #20]
 800a906:	60bb      	str	r3, [r7, #8]
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	689b      	ldr	r3, [r3, #8]
 800a90c:	693a      	ldr	r2, [r7, #16]
 800a90e:	68d2      	ldr	r2, [r2, #12]
 800a910:	609a      	str	r2, [r3, #8]
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	68db      	ldr	r3, [r3, #12]
 800a916:	693a      	ldr	r2, [r7, #16]
 800a918:	6892      	ldr	r2, [r2, #8]
 800a91a:	605a      	str	r2, [r3, #4]
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	685a      	ldr	r2, [r3, #4]
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	3304      	adds	r3, #4
 800a924:	429a      	cmp	r2, r3
 800a926:	d103      	bne.n	800a930 <xTaskIncrementTick+0xc8>
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	68da      	ldr	r2, [r3, #12]
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	605a      	str	r2, [r3, #4]
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	2200      	movs	r2, #0
 800a934:	615a      	str	r2, [r3, #20]
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	1e5a      	subs	r2, r3, #1
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a944:	2b00      	cmp	r3, #0
 800a946:	d01e      	beq.n	800a986 <xTaskIncrementTick+0x11e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a94c:	607b      	str	r3, [r7, #4]
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	69db      	ldr	r3, [r3, #28]
 800a952:	693a      	ldr	r2, [r7, #16]
 800a954:	6a12      	ldr	r2, [r2, #32]
 800a956:	609a      	str	r2, [r3, #8]
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	6a1b      	ldr	r3, [r3, #32]
 800a95c:	693a      	ldr	r2, [r7, #16]
 800a95e:	69d2      	ldr	r2, [r2, #28]
 800a960:	605a      	str	r2, [r3, #4]
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	685a      	ldr	r2, [r3, #4]
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	3318      	adds	r3, #24
 800a96a:	429a      	cmp	r2, r3
 800a96c:	d103      	bne.n	800a976 <xTaskIncrementTick+0x10e>
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	6a1a      	ldr	r2, [r3, #32]
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	605a      	str	r2, [r3, #4]
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	2200      	movs	r2, #0
 800a97a:	629a      	str	r2, [r3, #40]	; 0x28
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	1e5a      	subs	r2, r3, #1
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a98a:	4b3a      	ldr	r3, [pc, #232]	; (800aa74 <xTaskIncrementTick+0x20c>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	429a      	cmp	r2, r3
 800a990:	d903      	bls.n	800a99a <xTaskIncrementTick+0x132>
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a996:	4a37      	ldr	r2, [pc, #220]	; (800aa74 <xTaskIncrementTick+0x20c>)
 800a998:	6013      	str	r3, [r2, #0]
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a99e:	4936      	ldr	r1, [pc, #216]	; (800aa78 <xTaskIncrementTick+0x210>)
 800a9a0:	4613      	mov	r3, r2
 800a9a2:	009b      	lsls	r3, r3, #2
 800a9a4:	4413      	add	r3, r2
 800a9a6:	009b      	lsls	r3, r3, #2
 800a9a8:	440b      	add	r3, r1
 800a9aa:	3304      	adds	r3, #4
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	603b      	str	r3, [r7, #0]
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	683a      	ldr	r2, [r7, #0]
 800a9b4:	609a      	str	r2, [r3, #8]
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	689a      	ldr	r2, [r3, #8]
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	60da      	str	r2, [r3, #12]
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	689b      	ldr	r3, [r3, #8]
 800a9c2:	693a      	ldr	r2, [r7, #16]
 800a9c4:	3204      	adds	r2, #4
 800a9c6:	605a      	str	r2, [r3, #4]
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	1d1a      	adds	r2, r3, #4
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	609a      	str	r2, [r3, #8]
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9d4:	4613      	mov	r3, r2
 800a9d6:	009b      	lsls	r3, r3, #2
 800a9d8:	4413      	add	r3, r2
 800a9da:	009b      	lsls	r3, r3, #2
 800a9dc:	4a26      	ldr	r2, [pc, #152]	; (800aa78 <xTaskIncrementTick+0x210>)
 800a9de:	441a      	add	r2, r3
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	615a      	str	r2, [r3, #20]
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9e8:	4923      	ldr	r1, [pc, #140]	; (800aa78 <xTaskIncrementTick+0x210>)
 800a9ea:	4613      	mov	r3, r2
 800a9ec:	009b      	lsls	r3, r3, #2
 800a9ee:	4413      	add	r3, r2
 800a9f0:	009b      	lsls	r3, r3, #2
 800a9f2:	440b      	add	r3, r1
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	1c59      	adds	r1, r3, #1
 800a9f8:	481f      	ldr	r0, [pc, #124]	; (800aa78 <xTaskIncrementTick+0x210>)
 800a9fa:	4613      	mov	r3, r2
 800a9fc:	009b      	lsls	r3, r3, #2
 800a9fe:	4413      	add	r3, r2
 800aa00:	009b      	lsls	r3, r3, #2
 800aa02:	4403      	add	r3, r0
 800aa04:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa0a:	4b1c      	ldr	r3, [pc, #112]	; (800aa7c <xTaskIncrementTick+0x214>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa10:	429a      	cmp	r2, r3
 800aa12:	f67f af5c 	bls.w	800a8ce <xTaskIncrementTick+0x66>
                        {
                            xSwitchRequired = pdTRUE;
 800aa16:	2301      	movs	r3, #1
 800aa18:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa1a:	e758      	b.n	800a8ce <xTaskIncrementTick+0x66>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800aa1c:	4b17      	ldr	r3, [pc, #92]	; (800aa7c <xTaskIncrementTick+0x214>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa22:	4915      	ldr	r1, [pc, #84]	; (800aa78 <xTaskIncrementTick+0x210>)
 800aa24:	4613      	mov	r3, r2
 800aa26:	009b      	lsls	r3, r3, #2
 800aa28:	4413      	add	r3, r2
 800aa2a:	009b      	lsls	r3, r3, #2
 800aa2c:	440b      	add	r3, r1
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	d901      	bls.n	800aa38 <xTaskIncrementTick+0x1d0>
            {
                xSwitchRequired = pdTRUE;
 800aa34:	2301      	movs	r3, #1
 800aa36:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800aa38:	4b11      	ldr	r3, [pc, #68]	; (800aa80 <xTaskIncrementTick+0x218>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d007      	beq.n	800aa50 <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 800aa40:	2301      	movs	r3, #1
 800aa42:	61fb      	str	r3, [r7, #28]
 800aa44:	e004      	b.n	800aa50 <xTaskIncrementTick+0x1e8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800aa46:	4b0f      	ldr	r3, [pc, #60]	; (800aa84 <xTaskIncrementTick+0x21c>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	3301      	adds	r3, #1
 800aa4c:	4a0d      	ldr	r2, [pc, #52]	; (800aa84 <xTaskIncrementTick+0x21c>)
 800aa4e:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800aa50:	69fb      	ldr	r3, [r7, #28]
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3720      	adds	r7, #32
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}
 800aa5a:	bf00      	nop
 800aa5c:	20000b78 	.word	0x20000b78
 800aa60:	20000b5c 	.word	0x20000b5c
 800aa64:	20000b54 	.word	0x20000b54
 800aa68:	20000b58 	.word	0x20000b58
 800aa6c:	20000b70 	.word	0x20000b70
 800aa70:	20000b74 	.word	0x20000b74
 800aa74:	20000b60 	.word	0x20000b60
 800aa78:	200006f4 	.word	0x200006f4
 800aa7c:	200006f0 	.word	0x200006f0
 800aa80:	20000b6c 	.word	0x20000b6c
 800aa84:	20000b68 	.word	0x20000b68

0800aa88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b082      	sub	sp, #8
 800aa8c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aa8e:	4b23      	ldr	r3, [pc, #140]	; (800ab1c <vTaskSwitchContext+0x94>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d003      	beq.n	800aa9e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800aa96:	4b22      	ldr	r3, [pc, #136]	; (800ab20 <vTaskSwitchContext+0x98>)
 800aa98:	2201      	movs	r2, #1
 800aa9a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800aa9c:	e039      	b.n	800ab12 <vTaskSwitchContext+0x8a>
        xYieldPending = pdFALSE;
 800aa9e:	4b20      	ldr	r3, [pc, #128]	; (800ab20 <vTaskSwitchContext+0x98>)
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aaa4:	4b1f      	ldr	r3, [pc, #124]	; (800ab24 <vTaskSwitchContext+0x9c>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	607b      	str	r3, [r7, #4]
 800aaaa:	e008      	b.n	800aabe <vTaskSwitchContext+0x36>
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d102      	bne.n	800aab8 <vTaskSwitchContext+0x30>
 800aab2:	f000 f8e1 	bl	800ac78 <ulSetInterruptMask>
 800aab6:	e7fe      	b.n	800aab6 <vTaskSwitchContext+0x2e>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	3b01      	subs	r3, #1
 800aabc:	607b      	str	r3, [r7, #4]
 800aabe:	491a      	ldr	r1, [pc, #104]	; (800ab28 <vTaskSwitchContext+0xa0>)
 800aac0:	687a      	ldr	r2, [r7, #4]
 800aac2:	4613      	mov	r3, r2
 800aac4:	009b      	lsls	r3, r3, #2
 800aac6:	4413      	add	r3, r2
 800aac8:	009b      	lsls	r3, r3, #2
 800aaca:	440b      	add	r3, r1
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d0ec      	beq.n	800aaac <vTaskSwitchContext+0x24>
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	4613      	mov	r3, r2
 800aad6:	009b      	lsls	r3, r3, #2
 800aad8:	4413      	add	r3, r2
 800aada:	009b      	lsls	r3, r3, #2
 800aadc:	4a12      	ldr	r2, [pc, #72]	; (800ab28 <vTaskSwitchContext+0xa0>)
 800aade:	4413      	add	r3, r2
 800aae0:	603b      	str	r3, [r7, #0]
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	685b      	ldr	r3, [r3, #4]
 800aae6:	685a      	ldr	r2, [r3, #4]
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	605a      	str	r2, [r3, #4]
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	685a      	ldr	r2, [r3, #4]
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	3308      	adds	r3, #8
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	d104      	bne.n	800ab02 <vTaskSwitchContext+0x7a>
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	685b      	ldr	r3, [r3, #4]
 800aafc:	685a      	ldr	r2, [r3, #4]
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	605a      	str	r2, [r3, #4]
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	68db      	ldr	r3, [r3, #12]
 800ab08:	4a08      	ldr	r2, [pc, #32]	; (800ab2c <vTaskSwitchContext+0xa4>)
 800ab0a:	6013      	str	r3, [r2, #0]
 800ab0c:	4a05      	ldr	r2, [pc, #20]	; (800ab24 <vTaskSwitchContext+0x9c>)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6013      	str	r3, [r2, #0]
}
 800ab12:	bf00      	nop
 800ab14:	3708      	adds	r7, #8
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}
 800ab1a:	bf00      	nop
 800ab1c:	20000b78 	.word	0x20000b78
 800ab20:	20000b6c 	.word	0x20000b6c
 800ab24:	20000b60 	.word	0x20000b60
 800ab28:	200006f4 	.word	0x200006f4
 800ab2c:	200006f0 	.word	0x200006f0

0800ab30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ab30:	b480      	push	{r7}
 800ab32:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab34:	4b0a      	ldr	r3, [pc, #40]	; (800ab60 <prvResetNextTaskUnblockTime+0x30>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d104      	bne.n	800ab48 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800ab3e:	4b09      	ldr	r3, [pc, #36]	; (800ab64 <prvResetNextTaskUnblockTime+0x34>)
 800ab40:	f04f 32ff 	mov.w	r2, #4294967295
 800ab44:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800ab46:	e005      	b.n	800ab54 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ab48:	4b05      	ldr	r3, [pc, #20]	; (800ab60 <prvResetNextTaskUnblockTime+0x30>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	68db      	ldr	r3, [r3, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	4a04      	ldr	r2, [pc, #16]	; (800ab64 <prvResetNextTaskUnblockTime+0x34>)
 800ab52:	6013      	str	r3, [r2, #0]
}
 800ab54:	bf00      	nop
 800ab56:	46bd      	mov	sp, r7
 800ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5c:	4770      	bx	lr
 800ab5e:	bf00      	nop
 800ab60:	20000b54 	.word	0x20000b54
 800ab64:	20000b74 	.word	0x20000b74

0800ab68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800ab68:	b480      	push	{r7}
 800ab6a:	b083      	sub	sp, #12
 800ab6c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800ab6e:	4b0b      	ldr	r3, [pc, #44]	; (800ab9c <xTaskGetSchedulerState+0x34>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d102      	bne.n	800ab7c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800ab76:	2301      	movs	r3, #1
 800ab78:	607b      	str	r3, [r7, #4]
 800ab7a:	e008      	b.n	800ab8e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab7c:	4b08      	ldr	r3, [pc, #32]	; (800aba0 <xTaskGetSchedulerState+0x38>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d102      	bne.n	800ab8a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800ab84:	2302      	movs	r3, #2
 800ab86:	607b      	str	r3, [r7, #4]
 800ab88:	e001      	b.n	800ab8e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800ab8e:	687b      	ldr	r3, [r7, #4]
    }
 800ab90:	4618      	mov	r0, r3
 800ab92:	370c      	adds	r7, #12
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr
 800ab9c:	20000b64 	.word	0x20000b64
 800aba0:	20000b78 	.word	0x20000b78

0800aba4 <prvSetupFPU>:
#endif /* configENABLE_MPU */
/*-----------------------------------------------------------*/

#if ( configENABLE_FPU == 1 )
    static void prvSetupFPU( void ) /* PRIVILEGED_FUNCTION */
    {
 800aba4:	b480      	push	{r7}
 800aba6:	af00      	add	r7, sp, #0
        #endif /* configENABLE_TRUSTZONE */

        /* CP10 = 11 ==> Full access to FPU i.e. both privileged and
         * unprivileged code should be able to access FPU. CP11 should be
         * programmed to the same value as CP10. */
        *( portCPACR ) |= ( ( portCPACR_CP10_VALUE << portCPACR_CP10_POS ) |
 800aba8:	4b08      	ldr	r3, [pc, #32]	; (800abcc <prvSetupFPU+0x28>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	4a07      	ldr	r2, [pc, #28]	; (800abcc <prvSetupFPU+0x28>)
 800abae:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800abb2:	6013      	str	r3, [r2, #0]
                            );

        /* ASPEN = 1 ==> Hardware should automatically preserve floating point
         * context on exception entry and restore on exception return.
         * LSPEN = 1 ==> Enable lazy context save of FP state. */
        *( portFPCCR ) |= ( portFPCCR_ASPEN_MASK | portFPCCR_LSPEN_MASK );
 800abb4:	4b06      	ldr	r3, [pc, #24]	; (800abd0 <prvSetupFPU+0x2c>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4a05      	ldr	r2, [pc, #20]	; (800abd0 <prvSetupFPU+0x2c>)
 800abba:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800abbe:	6013      	str	r3, [r2, #0]
    }
 800abc0:	bf00      	nop
 800abc2:	46bd      	mov	sp, r7
 800abc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc8:	4770      	bx	lr
 800abca:	bf00      	nop
 800abcc:	e000ed88 	.word	0xe000ed88
 800abd0:	e000ef34 	.word	0xe000ef34

0800abd4 <xPortSysTickHandler>:
    }
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b082      	sub	sp, #8
 800abd8:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800abda:	f000 f84d 	bl	800ac78 <ulSetInterruptMask>
 800abde:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800abe0:	f7ff fe42 	bl	800a868 <xTaskIncrementTick>
 800abe4:	4603      	mov	r3, r0
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d003      	beq.n	800abf2 <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800abea:	4b05      	ldr	r3, [pc, #20]	; (800ac00 <xPortSysTickHandler+0x2c>)
 800abec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abf0:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f000 f84d 	bl	800ac92 <vClearInterruptMask>
}
 800abf8:	bf00      	nop
 800abfa:	3708      	adds	r7, #8
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}
 800ac00:	e000ed04 	.word	0xe000ed04

0800ac04 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b084      	sub	sp, #16
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ 6 ];
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	699b      	ldr	r3, [r3, #24]
 800ac10:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	3b02      	subs	r3, #2
 800ac16:	781b      	ldrb	r3, [r3, #0]
 800ac18:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 800ac1a:	7afb      	ldrb	r3, [r7, #11]
 800ac1c:	2b02      	cmp	r3, #2
 800ac1e:	d104      	bne.n	800ac2a <vPortSVCHandler_C+0x26>
            #endif /* configENABLE_TRUSTZONE */

            #if ( configENABLE_FPU == 1 )
            {
                /* Setup the Floating Point Unit (FPU). */
                prvSetupFPU();
 800ac20:	f7ff ffc0 	bl	800aba4 <prvSetupFPU>
            }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 800ac24:	f000 f80c 	bl	800ac40 <vRestoreContextOfFirstTask>
            break;
 800ac28:	e002      	b.n	800ac30 <vPortSVCHandler_C+0x2c>
                    break;
            #endif /* configENABLE_MPU */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 800ac2a:	f000 f825 	bl	800ac78 <ulSetInterruptMask>
 800ac2e:	e7fe      	b.n	800ac2e <vPortSVCHandler_C+0x2a>
    }
}
 800ac30:	bf00      	nop
 800ac32:	3710      	adds	r7, #16
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}
	...

0800ac40 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800ac40:	4a0b      	ldr	r2, [pc, #44]	; (800ac70 <pxCurrentTCBConst2>)
 800ac42:	6811      	ldr	r1, [r2, #0]
 800ac44:	6808      	ldr	r0, [r1, #0]
 800ac46:	c806      	ldmia	r0!, {r1, r2}
 800ac48:	f381 880b 	msr	PSPLIM, r1
 800ac4c:	2102      	movs	r1, #2
 800ac4e:	f381 8814 	msr	CONTROL, r1
 800ac52:	3020      	adds	r0, #32
 800ac54:	f380 8809 	msr	PSP, r0
 800ac58:	f3bf 8f6f 	isb	sy
 800ac5c:	f04f 0000 	mov.w	r0, #0
 800ac60:	f380 8811 	msr	BASEPRI, r0
 800ac64:	4710      	bx	r2
 800ac66:	bf00      	nop
 800ac68:	f3af 8000 	nop.w
 800ac6c:	f3af 8000 	nop.w

0800ac70 <pxCurrentTCBConst2>:
 800ac70:	200006f0 	.word	0x200006f0
            "xMAIR0Const2: .word 0xe000edc0						\n"
            "xRNRConst2: .word 0xe000ed98						\n"
            "xRBARConst2: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
    );
}
 800ac74:	bf00      	nop
 800ac76:	bf00      	nop

0800ac78 <ulSetInterruptMask>:
}
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800ac78:	f3ef 8011 	mrs	r0, BASEPRI
 800ac7c:	f04f 0150 	mov.w	r1, #80	; 0x50
 800ac80:	f381 8811 	msr	BASEPRI, r1
 800ac84:	f3bf 8f4f 	dsb	sy
 800ac88:	f3bf 8f6f 	isb	sy
 800ac8c:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800ac8e:	bf00      	nop
 800ac90:	4618      	mov	r0, r3

0800ac92 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800ac92:	f380 8811 	msr	BASEPRI, r0
 800ac96:	f3bf 8f4f 	dsb	sy
 800ac9a:	f3bf 8f6f 	isb	sy
 800ac9e:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::: "memory"
    );
}
 800aca0:	bf00      	nop
	...

0800acb0 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800acb0:	f3ef 8009 	mrs	r0, PSP
 800acb4:	f01e 0f10 	tst.w	lr, #16
 800acb8:	bf08      	it	eq
 800acba:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800acbe:	f3ef 820b 	mrs	r2, PSPLIM
 800acc2:	4673      	mov	r3, lr
 800acc4:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800acc8:	4a11      	ldr	r2, [pc, #68]	; (800ad10 <pxCurrentTCBConst>)
 800acca:	6811      	ldr	r1, [r2, #0]
 800accc:	6008      	str	r0, [r1, #0]
 800acce:	f04f 0050 	mov.w	r0, #80	; 0x50
 800acd2:	f380 8811 	msr	BASEPRI, r0
 800acd6:	f3bf 8f4f 	dsb	sy
 800acda:	f3bf 8f6f 	isb	sy
 800acde:	f7ff fed3 	bl	800aa88 <vTaskSwitchContext>
 800ace2:	f04f 0000 	mov.w	r0, #0
 800ace6:	f380 8811 	msr	BASEPRI, r0
 800acea:	4a09      	ldr	r2, [pc, #36]	; (800ad10 <pxCurrentTCBConst>)
 800acec:	6811      	ldr	r1, [r2, #0]
 800acee:	6808      	ldr	r0, [r1, #0]
 800acf0:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800acf4:	f013 0f10 	tst.w	r3, #16
 800acf8:	bf08      	it	eq
 800acfa:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800acfe:	f382 880b 	msr	PSPLIM, r2
 800ad02:	f380 8809 	msr	PSP, r0
 800ad06:	4718      	bx	r3
 800ad08:	f3af 8000 	nop.w
 800ad0c:	f3af 8000 	nop.w

0800ad10 <pxCurrentTCBConst>:
 800ad10:	200006f0 	.word	0x200006f0
            "xRNRConst: .word 0xe000ed98						\n"
            "xRBARConst: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800ad14:	bf00      	nop
 800ad16:	bf00      	nop
	...

0800ad20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800ad20:	f01e 0f04 	tst.w	lr, #4
 800ad24:	bf0c      	ite	eq
 800ad26:	f3ef 8008 	mrseq	r0, MSP
 800ad2a:	f3ef 8009 	mrsne	r0, PSP
 800ad2e:	4904      	ldr	r1, [pc, #16]	; (800ad40 <svchandler_address_const>)
 800ad30:	4708      	bx	r1
 800ad32:	bf00      	nop
 800ad34:	f3af 8000 	nop.w
 800ad38:	f3af 8000 	nop.w
 800ad3c:	f3af 8000 	nop.w

0800ad40 <svchandler_address_const>:
 800ad40:	0800ac05 	.word	0x0800ac05
        "	bx r1											\n"
        "													\n"
        "	.align 4										\n"
        "svchandler_address_const: .word vPortSVCHandler_C	\n"
    );
}
 800ad44:	bf00      	nop
 800ad46:	bf00      	nop

0800ad48 <memset>:
 800ad48:	4402      	add	r2, r0
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	4293      	cmp	r3, r2
 800ad4e:	d100      	bne.n	800ad52 <memset+0xa>
 800ad50:	4770      	bx	lr
 800ad52:	f803 1b01 	strb.w	r1, [r3], #1
 800ad56:	e7f9      	b.n	800ad4c <memset+0x4>

0800ad58 <__libc_init_array>:
 800ad58:	b570      	push	{r4, r5, r6, lr}
 800ad5a:	4d0d      	ldr	r5, [pc, #52]	; (800ad90 <__libc_init_array+0x38>)
 800ad5c:	2600      	movs	r6, #0
 800ad5e:	4c0d      	ldr	r4, [pc, #52]	; (800ad94 <__libc_init_array+0x3c>)
 800ad60:	1b64      	subs	r4, r4, r5
 800ad62:	10a4      	asrs	r4, r4, #2
 800ad64:	42a6      	cmp	r6, r4
 800ad66:	d109      	bne.n	800ad7c <__libc_init_array+0x24>
 800ad68:	4d0b      	ldr	r5, [pc, #44]	; (800ad98 <__libc_init_array+0x40>)
 800ad6a:	2600      	movs	r6, #0
 800ad6c:	4c0b      	ldr	r4, [pc, #44]	; (800ad9c <__libc_init_array+0x44>)
 800ad6e:	f000 f817 	bl	800ada0 <_init>
 800ad72:	1b64      	subs	r4, r4, r5
 800ad74:	10a4      	asrs	r4, r4, #2
 800ad76:	42a6      	cmp	r6, r4
 800ad78:	d105      	bne.n	800ad86 <__libc_init_array+0x2e>
 800ad7a:	bd70      	pop	{r4, r5, r6, pc}
 800ad7c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad80:	3601      	adds	r6, #1
 800ad82:	4798      	blx	r3
 800ad84:	e7ee      	b.n	800ad64 <__libc_init_array+0xc>
 800ad86:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad8a:	3601      	adds	r6, #1
 800ad8c:	4798      	blx	r3
 800ad8e:	e7f2      	b.n	800ad76 <__libc_init_array+0x1e>
 800ad90:	0800aec0 	.word	0x0800aec0
 800ad94:	0800aec0 	.word	0x0800aec0
 800ad98:	0800aec0 	.word	0x0800aec0
 800ad9c:	0800aec4 	.word	0x0800aec4

0800ada0 <_init>:
 800ada0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ada2:	bf00      	nop
 800ada4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ada6:	bc08      	pop	{r3}
 800ada8:	469e      	mov	lr, r3
 800adaa:	4770      	bx	lr

0800adac <_fini>:
 800adac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adae:	bf00      	nop
 800adb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adb2:	bc08      	pop	{r3}
 800adb4:	469e      	mov	lr, r3
 800adb6:	4770      	bx	lr
