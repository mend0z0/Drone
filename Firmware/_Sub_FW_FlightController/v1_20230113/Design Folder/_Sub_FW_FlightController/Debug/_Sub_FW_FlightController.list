
_Sub_FW_FlightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d0ac  08000240  08000240  00010240  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  0800d2ec  0800d2ec  0001d2ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d434  0800d434  0001d434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d43c  0800d43c  0001d43c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d440  0800d440  0001d440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  20000000  0800d444  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003244  20000014  0800d458  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20003258  0800d458  00023258  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002004a  2**0
                  CONTENTS, READONLY
 11 .debug_info   00029c61  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00005077  00000000  00000000  00049cee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002368  00000000  00000000  0004ed68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001b82  00000000  00000000  000510d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00038f57  00000000  00000000  00052c52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002b35f  00000000  00000000  0008bba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016449a  00000000  00000000  000b6f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000972c  00000000  00000000  0021b3a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000009f  00000000  00000000  00224ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000240 <__do_global_dtors_aux>:
 8000240:	b510      	push	{r4, lr}
 8000242:	4c05      	ldr	r4, [pc, #20]	; (8000258 <__do_global_dtors_aux+0x18>)
 8000244:	7823      	ldrb	r3, [r4, #0]
 8000246:	b933      	cbnz	r3, 8000256 <__do_global_dtors_aux+0x16>
 8000248:	4b04      	ldr	r3, [pc, #16]	; (800025c <__do_global_dtors_aux+0x1c>)
 800024a:	b113      	cbz	r3, 8000252 <__do_global_dtors_aux+0x12>
 800024c:	4804      	ldr	r0, [pc, #16]	; (8000260 <__do_global_dtors_aux+0x20>)
 800024e:	f3af 8000 	nop.w
 8000252:	2301      	movs	r3, #1
 8000254:	7023      	strb	r3, [r4, #0]
 8000256:	bd10      	pop	{r4, pc}
 8000258:	20000014 	.word	0x20000014
 800025c:	00000000 	.word	0x00000000
 8000260:	0800d2d4 	.word	0x0800d2d4

08000264 <frame_dummy>:
 8000264:	b508      	push	{r3, lr}
 8000266:	4b03      	ldr	r3, [pc, #12]	; (8000274 <frame_dummy+0x10>)
 8000268:	b11b      	cbz	r3, 8000272 <frame_dummy+0xe>
 800026a:	4903      	ldr	r1, [pc, #12]	; (8000278 <frame_dummy+0x14>)
 800026c:	4803      	ldr	r0, [pc, #12]	; (800027c <frame_dummy+0x18>)
 800026e:	f3af 8000 	nop.w
 8000272:	bd08      	pop	{r3, pc}
 8000274:	00000000 	.word	0x00000000
 8000278:	20000018 	.word	0x20000018
 800027c:	0800d2d4 	.word	0x0800d2d4

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b982 	b.w	800059c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002b4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d146      	bne.n	800034e <__udivmoddi4+0x9e>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d95e      	bls.n	8000384 <__udivmoddi4+0xd4>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	409c      	lsls	r4, r3
 80002d8:	fa20 f202 	lsr.w	r2, r0, r2
 80002dc:	4317      	orrs	r7, r2
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	0c22      	lsrs	r2, r4, #16
 80002e8:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	fb01 f005 	mul.w	r0, r1, r5
 80002f4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d908      	bls.n	800030e <__udivmoddi4+0x5e>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	d202      	bcs.n	800030c <__udivmoddi4+0x5c>
 8000306:	4290      	cmp	r0, r2
 8000308:	f200 8134 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 800030c:	4639      	mov	r1, r7
 800030e:	1a12      	subs	r2, r2, r0
 8000310:	b2a4      	uxth	r4, r4
 8000312:	fbb2 f0fe 	udiv	r0, r2, lr
 8000316:	fb0e 2210 	mls	r2, lr, r0, r2
 800031a:	fb00 f505 	mul.w	r5, r0, r5
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	42a5      	cmp	r5, r4
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x88>
 8000326:	eb1c 0404 	adds.w	r4, ip, r4
 800032a:	f100 32ff 	add.w	r2, r0, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x86>
 8000330:	42a5      	cmp	r5, r4
 8000332:	f200 8119 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 8000336:	4610      	mov	r0, r2
 8000338:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800033c:	1b64      	subs	r4, r4, r5
 800033e:	2100      	movs	r1, #0
 8000340:	b11e      	cbz	r6, 800034a <__udivmoddi4+0x9a>
 8000342:	40dc      	lsrs	r4, r3
 8000344:	2300      	movs	r3, #0
 8000346:	e9c6 4300 	strd	r4, r3, [r6]
 800034a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0xb4>
 8000352:	2e00      	cmp	r6, #0
 8000354:	f000 80fc 	beq.w	8000550 <__udivmoddi4+0x2a0>
 8000358:	2100      	movs	r1, #0
 800035a:	e9c6 0500 	strd	r0, r5, [r6]
 800035e:	4608      	mov	r0, r1
 8000360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000364:	fab3 f183 	clz	r1, r3
 8000368:	2900      	cmp	r1, #0
 800036a:	d14c      	bne.n	8000406 <__udivmoddi4+0x156>
 800036c:	42ab      	cmp	r3, r5
 800036e:	f0c0 80f2 	bcc.w	8000556 <__udivmoddi4+0x2a6>
 8000372:	4282      	cmp	r2, r0
 8000374:	f240 80ef 	bls.w	8000556 <__udivmoddi4+0x2a6>
 8000378:	4608      	mov	r0, r1
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e5      	beq.n	800034a <__udivmoddi4+0x9a>
 800037e:	e9c6 4700 	strd	r4, r7, [r6]
 8000382:	e7e2      	b.n	800034a <__udivmoddi4+0x9a>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xd8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f382 	clz	r3, r2
 800038c:	2b00      	cmp	r3, #0
 800038e:	f040 809f 	bne.w	80004d0 <__udivmoddi4+0x220>
 8000392:	1a8a      	subs	r2, r1, r2
 8000394:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000398:	fa1f f78c 	uxth.w	r7, ip
 800039c:	2101      	movs	r1, #1
 800039e:	fbb2 f5fe 	udiv	r5, r2, lr
 80003a2:	fb0e 2015 	mls	r0, lr, r5, r2
 80003a6:	0c22      	lsrs	r2, r4, #16
 80003a8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ac:	fb07 f005 	mul.w	r0, r7, r5
 80003b0:	4290      	cmp	r0, r2
 80003b2:	d90f      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003b4:	eb1c 0202 	adds.w	r2, ip, r2
 80003b8:	f105 38ff 	add.w	r8, r5, #4294967295
 80003bc:	bf2c      	ite	cs
 80003be:	f04f 0901 	movcs.w	r9, #1
 80003c2:	f04f 0900 	movcc.w	r9, #0
 80003c6:	4290      	cmp	r0, r2
 80003c8:	d903      	bls.n	80003d2 <__udivmoddi4+0x122>
 80003ca:	f1b9 0f00 	cmp.w	r9, #0
 80003ce:	f000 80ce 	beq.w	800056e <__udivmoddi4+0x2be>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0fe 	udiv	r0, r2, lr
 80003dc:	fb0e 2210 	mls	r2, lr, r0, r2
 80003e0:	fb00 f707 	mul.w	r7, r0, r7
 80003e4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e8:	42a7      	cmp	r7, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	42a7      	cmp	r7, r4
 80003f8:	f200 80b3 	bhi.w	8000562 <__udivmoddi4+0x2b2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	1be4      	subs	r4, r4, r7
 8000400:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000404:	e79c      	b.n	8000340 <__udivmoddi4+0x90>
 8000406:	f1c1 0420 	rsb	r4, r1, #32
 800040a:	408b      	lsls	r3, r1
 800040c:	fa05 fc01 	lsl.w	ip, r5, r1
 8000410:	fa22 f704 	lsr.w	r7, r2, r4
 8000414:	40e5      	lsrs	r5, r4
 8000416:	408a      	lsls	r2, r1
 8000418:	431f      	orrs	r7, r3
 800041a:	fa20 f304 	lsr.w	r3, r0, r4
 800041e:	4088      	lsls	r0, r1
 8000420:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000430:	fbb5 fef8 	udiv	lr, r5, r8
 8000434:	fb08 551e 	mls	r5, r8, lr, r5
 8000438:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800043c:	fb0e f90c 	mul.w	r9, lr, ip
 8000440:	45a9      	cmp	r9, r5
 8000442:	d90e      	bls.n	8000462 <__udivmoddi4+0x1b2>
 8000444:	197d      	adds	r5, r7, r5
 8000446:	f10e 3aff 	add.w	sl, lr, #4294967295
 800044a:	bf2c      	ite	cs
 800044c:	f04f 0b01 	movcs.w	fp, #1
 8000450:	f04f 0b00 	movcc.w	fp, #0
 8000454:	45a9      	cmp	r9, r5
 8000456:	d903      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000458:	f1bb 0f00 	cmp.w	fp, #0
 800045c:	f000 808d 	beq.w	800057a <__udivmoddi4+0x2ca>
 8000460:	46d6      	mov	lr, sl
 8000462:	eba5 0509 	sub.w	r5, r5, r9
 8000466:	fa1f f983 	uxth.w	r9, r3
 800046a:	fbb5 f3f8 	udiv	r3, r5, r8
 800046e:	fb08 5513 	mls	r5, r8, r3, r5
 8000472:	fb03 fc0c 	mul.w	ip, r3, ip
 8000476:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800047a:	45ac      	cmp	ip, r5
 800047c:	d906      	bls.n	800048c <__udivmoddi4+0x1dc>
 800047e:	197d      	adds	r5, r7, r5
 8000480:	f103 38ff 	add.w	r8, r3, #4294967295
 8000484:	d201      	bcs.n	800048a <__udivmoddi4+0x1da>
 8000486:	45ac      	cmp	ip, r5
 8000488:	d87e      	bhi.n	8000588 <__udivmoddi4+0x2d8>
 800048a:	4643      	mov	r3, r8
 800048c:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000490:	eba5 050c 	sub.w	r5, r5, ip
 8000494:	fba3 9802 	umull	r9, r8, r3, r2
 8000498:	4545      	cmp	r5, r8
 800049a:	46ce      	mov	lr, r9
 800049c:	46c4      	mov	ip, r8
 800049e:	d302      	bcc.n	80004a6 <__udivmoddi4+0x1f6>
 80004a0:	d106      	bne.n	80004b0 <__udivmoddi4+0x200>
 80004a2:	4548      	cmp	r0, r9
 80004a4:	d204      	bcs.n	80004b0 <__udivmoddi4+0x200>
 80004a6:	3b01      	subs	r3, #1
 80004a8:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ac:	eb68 0c07 	sbc.w	ip, r8, r7
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d06f      	beq.n	8000594 <__udivmoddi4+0x2e4>
 80004b4:	ebb0 020e 	subs.w	r2, r0, lr
 80004b8:	eb65 050c 	sbc.w	r5, r5, ip
 80004bc:	40ca      	lsrs	r2, r1
 80004be:	fa05 f404 	lsl.w	r4, r5, r4
 80004c2:	40cd      	lsrs	r5, r1
 80004c4:	4618      	mov	r0, r3
 80004c6:	4314      	orrs	r4, r2
 80004c8:	2100      	movs	r1, #0
 80004ca:	e9c6 4500 	strd	r4, r5, [r6]
 80004ce:	e73c      	b.n	800034a <__udivmoddi4+0x9a>
 80004d0:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d4:	f1c3 0220 	rsb	r2, r3, #32
 80004d8:	4099      	lsls	r1, r3
 80004da:	409c      	lsls	r4, r3
 80004dc:	40d5      	lsrs	r5, r2
 80004de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004e2:	fa20 f202 	lsr.w	r2, r0, r2
 80004e6:	fa1f f78c 	uxth.w	r7, ip
 80004ea:	fbb5 f0fe 	udiv	r0, r5, lr
 80004ee:	430a      	orrs	r2, r1
 80004f0:	fb0e 5510 	mls	r5, lr, r0, r5
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f507 	mul.w	r5, r0, r7
 80004fe:	428d      	cmp	r5, r1
 8000500:	d90e      	bls.n	8000520 <__udivmoddi4+0x270>
 8000502:	eb1c 0101 	adds.w	r1, ip, r1
 8000506:	f100 38ff 	add.w	r8, r0, #4294967295
 800050a:	bf2c      	ite	cs
 800050c:	f04f 0901 	movcs.w	r9, #1
 8000510:	f04f 0900 	movcc.w	r9, #0
 8000514:	428d      	cmp	r5, r1
 8000516:	d902      	bls.n	800051e <__udivmoddi4+0x26e>
 8000518:	f1b9 0f00 	cmp.w	r9, #0
 800051c:	d031      	beq.n	8000582 <__udivmoddi4+0x2d2>
 800051e:	4640      	mov	r0, r8
 8000520:	1b49      	subs	r1, r1, r5
 8000522:	b292      	uxth	r2, r2
 8000524:	fbb1 f5fe 	udiv	r5, r1, lr
 8000528:	fb0e 1115 	mls	r1, lr, r5, r1
 800052c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000530:	fb05 f107 	mul.w	r1, r5, r7
 8000534:	4291      	cmp	r1, r2
 8000536:	d907      	bls.n	8000548 <__udivmoddi4+0x298>
 8000538:	eb1c 0202 	adds.w	r2, ip, r2
 800053c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x296>
 8000542:	4291      	cmp	r1, r2
 8000544:	d823      	bhi.n	800058e <__udivmoddi4+0x2de>
 8000546:	4645      	mov	r5, r8
 8000548:	1a52      	subs	r2, r2, r1
 800054a:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800054e:	e726      	b.n	800039e <__udivmoddi4+0xee>
 8000550:	4631      	mov	r1, r6
 8000552:	4630      	mov	r0, r6
 8000554:	e6f9      	b.n	800034a <__udivmoddi4+0x9a>
 8000556:	1a84      	subs	r4, r0, r2
 8000558:	eb65 0203 	sbc.w	r2, r5, r3
 800055c:	2001      	movs	r0, #1
 800055e:	4617      	mov	r7, r2
 8000560:	e70b      	b.n	800037a <__udivmoddi4+0xca>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e74a      	b.n	80003fe <__udivmoddi4+0x14e>
 8000568:	4464      	add	r4, ip
 800056a:	3802      	subs	r0, #2
 800056c:	e6e4      	b.n	8000338 <__udivmoddi4+0x88>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	3902      	subs	r1, #2
 8000576:	4462      	add	r2, ip
 8000578:	e6c9      	b.n	800030e <__udivmoddi4+0x5e>
 800057a:	f1ae 0e02 	sub.w	lr, lr, #2
 800057e:	443d      	add	r5, r7
 8000580:	e76f      	b.n	8000462 <__udivmoddi4+0x1b2>
 8000582:	3802      	subs	r0, #2
 8000584:	4461      	add	r1, ip
 8000586:	e7cb      	b.n	8000520 <__udivmoddi4+0x270>
 8000588:	3b02      	subs	r3, #2
 800058a:	443d      	add	r5, r7
 800058c:	e77e      	b.n	800048c <__udivmoddi4+0x1dc>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	e7d9      	b.n	8000548 <__udivmoddi4+0x298>
 8000594:	4618      	mov	r0, r3
 8000596:	4631      	mov	r1, r6
 8000598:	e6d7      	b.n	800034a <__udivmoddi4+0x9a>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005a4:	4a04      	ldr	r2, [pc, #16]	; (80005b8 <MX_FREERTOS_Init+0x18>)
 80005a6:	2100      	movs	r1, #0
 80005a8:	4804      	ldr	r0, [pc, #16]	; (80005bc <MX_FREERTOS_Init+0x1c>)
 80005aa:	f00a fc73 	bl	800ae94 <osThreadNew>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a03      	ldr	r2, [pc, #12]	; (80005c0 <MX_FREERTOS_Init+0x20>)
 80005b2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	0800d310 	.word	0x0800d310
 80005bc:	080005c5 	.word	0x080005c5
 80005c0:	20000030 	.word	0x20000030

080005c4 <StartDefaultTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN defaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005cc:	2001      	movs	r0, #1
 80005ce:	f00a fcf2 	bl	800afb6 <osDelay>
 80005d2:	e7fb      	b.n	80005cc <StartDefaultTask+0x8>

080005d4 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 80005dc:	4b0a      	ldr	r3, [pc, #40]	; (8000608 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005de:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80005e2:	4909      	ldr	r1, [pc, #36]	; (8000608 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4313      	orrs	r3, r2
 80005e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005ee:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4013      	ands	r3, r2
 80005f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005f8:	68fb      	ldr	r3, [r7, #12]
}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	46020c00 	.word	0x46020c00

0800060c <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1 (*)
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000614:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <LL_APB1_GRP2_EnableClock+0x34>)
 8000616:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800061a:	4909      	ldr	r1, [pc, #36]	; (8000640 <LL_APB1_GRP2_EnableClock+0x34>)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	4313      	orrs	r3, r2
 8000620:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <LL_APB1_GRP2_EnableClock+0x34>)
 8000626:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4013      	ands	r3, r2
 800062e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000630:	68fb      	ldr	r3, [r7, #12]
}
 8000632:	bf00      	nop
 8000634:	3714      	adds	r7, #20
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	46020c00 	.word	0x46020c00

08000644 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000648:	f000 ff12 	bl	8001470 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064c:	f000 f830 	bl	80006b0 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000650:	f000 f88b 	bl	800076a <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000654:	f000 fac6 	bl	8000be4 <MX_GPIO_Init>
  MX_ICACHE_Init();
 8000658:	f000 f8e6 	bl	8000828 <MX_ICACHE_Init>
  MX_UCPD1_Init();
 800065c:	f000 fa0c 	bl	8000a78 <MX_UCPD1_Init>
  MX_USART1_UART_Init();
 8000660:	f000 fa40 	bl	8000ae4 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000664:	f000 fa8c 	bl	8000b80 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8000668:	f000 f918 	bl	800089c <MX_TIM2_Init>
  MX_I2C1_Init();
 800066c:	f000 f894 	bl	8000798 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000670:	f000 f9b4 	bl	80009dc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 8000674:	2100      	movs	r1, #0
 8000676:	480c      	ldr	r0, [pc, #48]	; (80006a8 <main+0x64>)
 8000678:	f006 ffb2 	bl	80075e0 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_2);
 800067c:	2104      	movs	r1, #4
 800067e:	480a      	ldr	r0, [pc, #40]	; (80006a8 <main+0x64>)
 8000680:	f006 ffae 	bl	80075e0 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 8000684:	2108      	movs	r1, #8
 8000686:	4808      	ldr	r0, [pc, #32]	; (80006a8 <main+0x64>)
 8000688:	f006 ffaa 	bl	80075e0 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_4);
 800068c:	210c      	movs	r1, #12
 800068e:	4806      	ldr	r0, [pc, #24]	; (80006a8 <main+0x64>)
 8000690:	f006 ffa6 	bl	80075e0 <HAL_TIM_PWM_Start_IT>

  HAL_TIM_Base_Start_IT(&htim3);
 8000694:	4805      	ldr	r0, [pc, #20]	; (80006ac <main+0x68>)
 8000696:	f006 fea1 	bl	80073dc <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800069a:	f00a fbab 	bl	800adf4 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800069e:	f7ff ff7f 	bl	80005a0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80006a2:	f00a fbcd 	bl	800ae40 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a6:	e7fe      	b.n	80006a6 <main+0x62>
 80006a8:	20000088 	.word	0x20000088
 80006ac:	200000d4 	.word	0x200000d4

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b09e      	sub	sp, #120	; 0x78
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 0318 	add.w	r3, r7, #24
 80006ba:	2260      	movs	r2, #96	; 0x60
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f00c fdce 	bl	800d260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	463b      	mov	r3, r7
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
 80006d0:	611a      	str	r2, [r3, #16]
 80006d2:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006d4:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80006d8:	f002 fe00 	bl	80032dc <HAL_PWREx_ControlVoltageScaling>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x36>
  {
    Error_Handler();
 80006e2:	f000 fb63 	bl	8000dac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80006e6:	2322      	movs	r3, #34	; 0x22
 80006e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006ee:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f6:	2310      	movs	r3, #16
 80006f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fa:	2302      	movs	r3, #2
 80006fc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006fe:	2302      	movs	r3, #2
 8000700:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000706:	2301      	movs	r3, #1
 8000708:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 20;
 800070a:	2314      	movs	r3, #20
 800070c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 800070e:	2302      	movs	r3, #2
 8000710:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000712:	2302      	movs	r3, #2
 8000714:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000716:	2302      	movs	r3, #2
 8000718:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 800071a:	230c      	movs	r3, #12
 800071c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000722:	f107 0318 	add.w	r3, r7, #24
 8000726:	4618      	mov	r0, r3
 8000728:	f002 fe84 	bl	8003434 <HAL_RCC_OscConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000732:	f000 fb3b 	bl	8000dac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000736:	231f      	movs	r3, #31
 8000738:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073a:	2303      	movs	r3, #3
 800073c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800074e:	463b      	mov	r3, r7
 8000750:	2104      	movs	r1, #4
 8000752:	4618      	mov	r0, r3
 8000754:	f003 fd4a 	bl	80041ec <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800075e:	f000 fb25 	bl	8000dac <Error_Handler>
  }
}
 8000762:	bf00      	nop
 8000764:	3778      	adds	r7, #120	; 0x78
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b082      	sub	sp, #8
 800076e:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000770:	f002 fe50 	bl	8003414 <HAL_PWREx_EnableVddIO2>

  PWR_PVDTypeDef sConfigPVD = {0};
 8000774:	463b      	mov	r3, r7
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]

  /*
   * PVD Configuration
   */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 800077c:	2300      	movs	r3, #0
 800077e:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8000780:	2300      	movs	r3, #0
 8000782:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8000784:	463b      	mov	r3, r7
 8000786:	4618      	mov	r0, r3
 8000788:	f002 fd2a 	bl	80031e0 <HAL_PWR_ConfigPVD>

  /*
   * Enable the PVD Output
   */
  HAL_PWR_EnablePVD();
 800078c:	f002 fd96 	bl	80032bc <HAL_PWR_EnablePVD>
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000790:	bf00      	nop
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800079c:	4b1f      	ldr	r3, [pc, #124]	; (800081c <MX_I2C1_Init+0x84>)
 800079e:	4a20      	ldr	r2, [pc, #128]	; (8000820 <MX_I2C1_Init+0x88>)
 80007a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00701F6B;
 80007a2:	4b1e      	ldr	r3, [pc, #120]	; (800081c <MX_I2C1_Init+0x84>)
 80007a4:	4a1f      	ldr	r2, [pc, #124]	; (8000824 <MX_I2C1_Init+0x8c>)
 80007a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007a8:	4b1c      	ldr	r3, [pc, #112]	; (800081c <MX_I2C1_Init+0x84>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ae:	4b1b      	ldr	r3, [pc, #108]	; (800081c <MX_I2C1_Init+0x84>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b4:	4b19      	ldr	r3, [pc, #100]	; (800081c <MX_I2C1_Init+0x84>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007ba:	4b18      	ldr	r3, [pc, #96]	; (800081c <MX_I2C1_Init+0x84>)
 80007bc:	2200      	movs	r2, #0
 80007be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007c0:	4b16      	ldr	r3, [pc, #88]	; (800081c <MX_I2C1_Init+0x84>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007c6:	4b15      	ldr	r3, [pc, #84]	; (800081c <MX_I2C1_Init+0x84>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007cc:	4b13      	ldr	r3, [pc, #76]	; (800081c <MX_I2C1_Init+0x84>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007d2:	4812      	ldr	r0, [pc, #72]	; (800081c <MX_I2C1_Init+0x84>)
 80007d4:	f001 fa34 	bl	8001c40 <HAL_I2C_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007de:	f000 fae5 	bl	8000dac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007e2:	2100      	movs	r1, #0
 80007e4:	480d      	ldr	r0, [pc, #52]	; (800081c <MX_I2C1_Init+0x84>)
 80007e6:	f001 fae0 	bl	8001daa <HAL_I2CEx_ConfigAnalogFilter>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007f0:	f000 fadc 	bl	8000dac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007f4:	2100      	movs	r1, #0
 80007f6:	4809      	ldr	r0, [pc, #36]	; (800081c <MX_I2C1_Init+0x84>)
 80007f8:	f001 fb22 	bl	8001e40 <HAL_I2CEx_ConfigDigitalFilter>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000802:	f000 fad3 	bl	8000dac <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  if (HAL_I2CEx_ConfigFastModePlus(&hi2c1, I2C_FASTMODEPLUS_ENABLE) != HAL_OK)
 8000806:	2100      	movs	r1, #0
 8000808:	4804      	ldr	r0, [pc, #16]	; (800081c <MX_I2C1_Init+0x84>)
 800080a:	f001 fb65 	bl	8001ed8 <HAL_I2CEx_ConfigFastModePlus>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_I2C1_Init+0x80>
  {
    Error_Handler();
 8000814:	f000 faca 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000034 	.word	0x20000034
 8000820:	40005400 	.word	0x40005400
 8000824:	00701f6b 	.word	0x00701f6b

08000828 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b086      	sub	sp, #24
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ICACHE_Init 0 */

  /* USER CODE END ICACHE_Init 0 */

  ICACHE_RegionConfigTypeDef pRegionConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]

  /* USER CODE END ICACHE_Init 1 */

  /** Configure and enable a region for memory remapping.
  */
  if (HAL_ICACHE_Disable() != HAL_OK)
 800083c:	f001 fbcc 	bl	8001fd8 <HAL_ICACHE_Disable>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000846:	f000 fab1 	bl	8000dac <Error_Handler>
  }
  pRegionConfig.BaseAddress = 0x10000000;
 800084a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800084e:	607b      	str	r3, [r7, #4]
  pRegionConfig.RemapAddress = 0x60000000;
 8000850:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000854:	60bb      	str	r3, [r7, #8]
  pRegionConfig.Size = ICACHE_REGIONSIZE_2MB;
 8000856:	2301      	movs	r3, #1
 8000858:	60fb      	str	r3, [r7, #12]
  pRegionConfig.TrafficRoute = ICACHE_MASTER1_PORT;
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
  pRegionConfig.OutputBurstType = ICACHE_OUTPUT_BURST_WRAP;
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]
  if (HAL_ICACHE_EnableRemapRegion(_NULL, &pRegionConfig) != HAL_OK)
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	4619      	mov	r1, r3
 8000866:	2000      	movs	r0, #0
 8000868:	f001 fbe6 	bl	8002038 <HAL_ICACHE_EnableRemapRegion>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_ICACHE_Init+0x4e>
  {
    Error_Handler();
 8000872:	f000 fa9b 	bl	8000dac <Error_Handler>
  }

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000876:	2000      	movs	r0, #0
 8000878:	f001 fb7e 	bl	8001f78 <HAL_ICACHE_ConfigAssociativityMode>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_ICACHE_Init+0x5e>
  {
    Error_Handler();
 8000882:	f000 fa93 	bl	8000dac <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000886:	f001 fb97 	bl	8001fb8 <HAL_ICACHE_Enable>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_ICACHE_Init+0x6c>
  {
    Error_Handler();
 8000890:	f000 fa8c 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000894:	bf00      	nop
 8000896:	3718      	adds	r7, #24
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08e      	sub	sp, #56	; 0x38
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008bc:	463b      	mov	r3, r7
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	611a      	str	r2, [r3, #16]
 80008ca:	615a      	str	r2, [r3, #20]
 80008cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008ce:	4b42      	ldr	r3, [pc, #264]	; (80009d8 <MX_TIM2_Init+0x13c>)
 80008d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 25000;
 80008d6:	4b40      	ldr	r3, [pc, #256]	; (80009d8 <MX_TIM2_Init+0x13c>)
 80008d8:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80008dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008de:	4b3e      	ldr	r3, [pc, #248]	; (80009d8 <MX_TIM2_Init+0x13c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 80008e4:	4b3c      	ldr	r3, [pc, #240]	; (80009d8 <MX_TIM2_Init+0x13c>)
 80008e6:	f04f 32ff 	mov.w	r2, #4294967295
 80008ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80008ec:	4b3a      	ldr	r3, [pc, #232]	; (80009d8 <MX_TIM2_Init+0x13c>)
 80008ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008f4:	4b38      	ldr	r3, [pc, #224]	; (80009d8 <MX_TIM2_Init+0x13c>)
 80008f6:	2280      	movs	r2, #128	; 0x80
 80008f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008fa:	4837      	ldr	r0, [pc, #220]	; (80009d8 <MX_TIM2_Init+0x13c>)
 80008fc:	f006 fd16 	bl	800732c <HAL_TIM_Base_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000906:	f000 fa51 	bl	8000dac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800090a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000910:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000914:	4619      	mov	r1, r3
 8000916:	4830      	ldr	r0, [pc, #192]	; (80009d8 <MX_TIM2_Init+0x13c>)
 8000918:	f007 fa66 	bl	8007de8 <HAL_TIM_ConfigClockSource>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000922:	f000 fa43 	bl	8000dac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000926:	482c      	ldr	r0, [pc, #176]	; (80009d8 <MX_TIM2_Init+0x13c>)
 8000928:	f006 fdf8 	bl	800751c <HAL_TIM_PWM_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000932:	f000 fa3b 	bl	8000dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	4824      	ldr	r0, [pc, #144]	; (80009d8 <MX_TIM2_Init+0x13c>)
 8000946:	f008 f90b 	bl	8008b60 <HAL_TIMEx_MasterConfigSynchronization>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8000950:	f000 fa2c 	bl	8000dac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000954:	2360      	movs	r3, #96	; 0x60
 8000956:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 125;
 8000958:	237d      	movs	r3, #125	; 0x7d
 800095a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800095c:	2300      	movs	r3, #0
 800095e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000960:	2304      	movs	r3, #4
 8000962:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000964:	463b      	mov	r3, r7
 8000966:	2200      	movs	r2, #0
 8000968:	4619      	mov	r1, r3
 800096a:	481b      	ldr	r0, [pc, #108]	; (80009d8 <MX_TIM2_Init+0x13c>)
 800096c:	f007 f928 	bl	8007bc0 <HAL_TIM_PWM_ConfigChannel>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_TIM2_Init+0xde>
  {
    Error_Handler();
 8000976:	f000 fa19 	bl	8000dac <Error_Handler>
  }
  sConfigOC.Pulse = 85;
 800097a:	2355      	movs	r3, #85	; 0x55
 800097c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800097e:	463b      	mov	r3, r7
 8000980:	2204      	movs	r2, #4
 8000982:	4619      	mov	r1, r3
 8000984:	4814      	ldr	r0, [pc, #80]	; (80009d8 <MX_TIM2_Init+0x13c>)
 8000986:	f007 f91b 	bl	8007bc0 <HAL_TIM_PWM_ConfigChannel>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 8000990:	f000 fa0c 	bl	8000dac <Error_Handler>
  }
  sConfigOC.Pulse = 200;
 8000994:	23c8      	movs	r3, #200	; 0xc8
 8000996:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000998:	463b      	mov	r3, r7
 800099a:	2208      	movs	r2, #8
 800099c:	4619      	mov	r1, r3
 800099e:	480e      	ldr	r0, [pc, #56]	; (80009d8 <MX_TIM2_Init+0x13c>)
 80009a0:	f007 f90e 	bl	8007bc0 <HAL_TIM_PWM_ConfigChannel>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_TIM2_Init+0x112>
  {
    Error_Handler();
 80009aa:	f000 f9ff 	bl	8000dac <Error_Handler>
  }
  sConfigOC.Pulse = 125;
 80009ae:	237d      	movs	r3, #125	; 0x7d
 80009b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009b2:	463b      	mov	r3, r7
 80009b4:	220c      	movs	r2, #12
 80009b6:	4619      	mov	r1, r3
 80009b8:	4807      	ldr	r0, [pc, #28]	; (80009d8 <MX_TIM2_Init+0x13c>)
 80009ba:	f007 f901 	bl	8007bc0 <HAL_TIM_PWM_ConfigChannel>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM2_Init+0x12c>
  {
    Error_Handler();
 80009c4:	f000 f9f2 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009c8:	4803      	ldr	r0, [pc, #12]	; (80009d8 <MX_TIM2_Init+0x13c>)
 80009ca:	f000 facb 	bl	8000f64 <HAL_TIM_MspPostInit>

}
 80009ce:	bf00      	nop
 80009d0:	3738      	adds	r7, #56	; 0x38
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000088 	.word	0x20000088

080009dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b088      	sub	sp, #32
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009e2:	f107 0310 	add.w	r3, r7, #16
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009fa:	4b1d      	ldr	r3, [pc, #116]	; (8000a70 <MX_TIM3_Init+0x94>)
 80009fc:	4a1d      	ldr	r2, [pc, #116]	; (8000a74 <MX_TIM3_Init+0x98>)
 80009fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1599;
 8000a00:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <MX_TIM3_Init+0x94>)
 8000a02:	f240 623f 	movw	r2, #1599	; 0x63f
 8000a06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a08:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <MX_TIM3_Init+0x94>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8000a0e:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <MX_TIM3_Init+0x94>)
 8000a10:	2264      	movs	r2, #100	; 0x64
 8000a12:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a14:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <MX_TIM3_Init+0x94>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a1a:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <MX_TIM3_Init+0x94>)
 8000a1c:	2280      	movs	r2, #128	; 0x80
 8000a1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a20:	4813      	ldr	r0, [pc, #76]	; (8000a70 <MX_TIM3_Init+0x94>)
 8000a22:	f006 fc83 	bl	800732c <HAL_TIM_Base_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000a2c:	f000 f9be 	bl	8000dac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a34:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a36:	f107 0310 	add.w	r3, r7, #16
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	480c      	ldr	r0, [pc, #48]	; (8000a70 <MX_TIM3_Init+0x94>)
 8000a3e:	f007 f9d3 	bl	8007de8 <HAL_TIM_ConfigClockSource>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000a48:	f000 f9b0 	bl	8000dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	4619      	mov	r1, r3
 8000a58:	4805      	ldr	r0, [pc, #20]	; (8000a70 <MX_TIM3_Init+0x94>)
 8000a5a:	f008 f881 	bl	8008b60 <HAL_TIMEx_MasterConfigSynchronization>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000a64:	f000 f9a2 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a68:	bf00      	nop
 8000a6a:	3720      	adds	r7, #32
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	200000d4 	.word	0x200000d4
 8000a74:	40000400 	.word	0x40000400

08000a78 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7e:	463b      	mov	r3, r7
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
 8000a8c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000a8e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000a92:	f7ff fdbb 	bl	800060c <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000a96:	2002      	movs	r0, #2
 8000a98:	f7ff fd9c 	bl	80005d4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	f7ff fd99 	bl	80005d4 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000aa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000aa6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000aac:	2300      	movs	r3, #0
 8000aae:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab0:	463b      	mov	r3, r7
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4809      	ldr	r0, [pc, #36]	; (8000adc <MX_UCPD1_Init+0x64>)
 8000ab6:	f009 faea 	bl	800a08e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000aba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000abe:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac8:	463b      	mov	r3, r7
 8000aca:	4619      	mov	r1, r3
 8000acc:	4804      	ldr	r0, [pc, #16]	; (8000ae0 <MX_UCPD1_Init+0x68>)
 8000ace:	f009 fade 	bl	800a08e <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	3718      	adds	r7, #24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	42020400 	.word	0x42020400
 8000ae0:	42020000 	.word	0x42020000

08000ae4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ae8:	4b23      	ldr	r3, [pc, #140]	; (8000b78 <MX_USART1_UART_Init+0x94>)
 8000aea:	4a24      	ldr	r2, [pc, #144]	; (8000b7c <MX_USART1_UART_Init+0x98>)
 8000aec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000aee:	4b22      	ldr	r3, [pc, #136]	; (8000b78 <MX_USART1_UART_Init+0x94>)
 8000af0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000af4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <MX_USART1_UART_Init+0x94>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <MX_USART1_UART_Init+0x94>)
 8000afe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b02:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000b04:	4b1c      	ldr	r3, [pc, #112]	; (8000b78 <MX_USART1_UART_Init+0x94>)
 8000b06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b0c:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <MX_USART1_UART_Init+0x94>)
 8000b0e:	220c      	movs	r2, #12
 8000b10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b12:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <MX_USART1_UART_Init+0x94>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <MX_USART1_UART_Init+0x94>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b1e:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <MX_USART1_UART_Init+0x94>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b24:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <MX_USART1_UART_Init+0x94>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b2a:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <MX_USART1_UART_Init+0x94>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b30:	4811      	ldr	r0, [pc, #68]	; (8000b78 <MX_USART1_UART_Init+0x94>)
 8000b32:	f008 f91d 	bl	8008d70 <HAL_UART_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8000b3c:	f000 f936 	bl	8000dac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b40:	2100      	movs	r1, #0
 8000b42:	480d      	ldr	r0, [pc, #52]	; (8000b78 <MX_USART1_UART_Init+0x94>)
 8000b44:	f009 f88d 	bl	8009c62 <HAL_UARTEx_SetTxFifoThreshold>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8000b4e:	f000 f92d 	bl	8000dac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b52:	2100      	movs	r1, #0
 8000b54:	4808      	ldr	r0, [pc, #32]	; (8000b78 <MX_USART1_UART_Init+0x94>)
 8000b56:	f009 f8c2 	bl	8009cde <HAL_UARTEx_SetRxFifoThreshold>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8000b60:	f000 f924 	bl	8000dac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b64:	4804      	ldr	r0, [pc, #16]	; (8000b78 <MX_USART1_UART_Init+0x94>)
 8000b66:	f009 f843 	bl	8009bf0 <HAL_UARTEx_DisableFifoMode>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8000b70:	f000 f91c 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000120 	.word	0x20000120
 8000b7c:	40013800 	.word	0x40013800

08000b80 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b84:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b86:	4a16      	ldr	r2, [pc, #88]	; (8000be0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000b88:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b8a:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b8c:	2206      	movs	r2, #6
 8000b8e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b90:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b92:	2202      	movs	r2, #2
 8000b94:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b98:	2202      	movs	r2, #2
 8000b9a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000bb4:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000bba:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bc6:	4805      	ldr	r0, [pc, #20]	; (8000bdc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bc8:	f001 fa88 	bl	80020dc <HAL_PCD_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000bd2:	f000 f8eb 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200001b4 	.word	0x200001b4
 8000be0:	42040000 	.word	0x42040000

08000be4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]
 8000bf8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfa:	4b5e      	ldr	r3, [pc, #376]	; (8000d74 <MX_GPIO_Init+0x190>)
 8000bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c00:	4a5c      	ldr	r2, [pc, #368]	; (8000d74 <MX_GPIO_Init+0x190>)
 8000c02:	f043 0304 	orr.w	r3, r3, #4
 8000c06:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c0a:	4b5a      	ldr	r3, [pc, #360]	; (8000d74 <MX_GPIO_Init+0x190>)
 8000c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c10:	f003 0304 	and.w	r3, r3, #4
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c18:	4b56      	ldr	r3, [pc, #344]	; (8000d74 <MX_GPIO_Init+0x190>)
 8000c1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c1e:	4a55      	ldr	r2, [pc, #340]	; (8000d74 <MX_GPIO_Init+0x190>)
 8000c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c24:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c28:	4b52      	ldr	r3, [pc, #328]	; (8000d74 <MX_GPIO_Init+0x190>)
 8000c2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	4b4f      	ldr	r3, [pc, #316]	; (8000d74 <MX_GPIO_Init+0x190>)
 8000c38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c3c:	4a4d      	ldr	r2, [pc, #308]	; (8000d74 <MX_GPIO_Init+0x190>)
 8000c3e:	f043 0301 	orr.w	r3, r3, #1
 8000c42:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c46:	4b4b      	ldr	r3, [pc, #300]	; (8000d74 <MX_GPIO_Init+0x190>)
 8000c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c4c:	f003 0301 	and.w	r3, r3, #1
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c54:	4b47      	ldr	r3, [pc, #284]	; (8000d74 <MX_GPIO_Init+0x190>)
 8000c56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c5a:	4a46      	ldr	r2, [pc, #280]	; (8000d74 <MX_GPIO_Init+0x190>)
 8000c5c:	f043 0302 	orr.w	r3, r3, #2
 8000c60:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c64:	4b43      	ldr	r3, [pc, #268]	; (8000d74 <MX_GPIO_Init+0x190>)
 8000c66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c72:	4b40      	ldr	r3, [pc, #256]	; (8000d74 <MX_GPIO_Init+0x190>)
 8000c74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c78:	4a3e      	ldr	r2, [pc, #248]	; (8000d74 <MX_GPIO_Init+0x190>)
 8000c7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c7e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c82:	4b3c      	ldr	r3, [pc, #240]	; (8000d74 <MX_GPIO_Init+0x190>)
 8000c84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c8c:	603b      	str	r3, [r7, #0]
 8000c8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);
 8000c90:	2200      	movs	r2, #0
 8000c92:	2104      	movs	r1, #4
 8000c94:	4838      	ldr	r0, [pc, #224]	; (8000d78 <MX_GPIO_Init+0x194>)
 8000c96:	f000 ffbb 	bl	8001c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2180      	movs	r1, #128	; 0x80
 8000c9e:	4837      	ldr	r0, [pc, #220]	; (8000d7c <MX_GPIO_Init+0x198>)
 8000ca0:	f000 ffb6 	bl	8001c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	21a0      	movs	r1, #160	; 0xa0
 8000ca8:	4835      	ldr	r0, [pc, #212]	; (8000d80 <MX_GPIO_Init+0x19c>)
 8000caa:	f000 ffb1 	bl	8001c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000cae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cb4:	4b33      	ldr	r3, [pc, #204]	; (8000d84 <MX_GPIO_Init+0x1a0>)
 8000cb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	482e      	ldr	r0, [pc, #184]	; (8000d7c <MX_GPIO_Init+0x198>)
 8000cc4:	f000 fdcc 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000cc8:	2304      	movs	r3, #4
 8000cca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4828      	ldr	r0, [pc, #160]	; (8000d7c <MX_GPIO_Init+0x198>)
 8000cdc:	f000 fdc0 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000ce0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ce4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4822      	ldr	r0, [pc, #136]	; (8000d80 <MX_GPIO_Init+0x19c>)
 8000cf6:	f000 fdb3 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cfa:	2304      	movs	r3, #4
 8000cfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4819      	ldr	r0, [pc, #100]	; (8000d78 <MX_GPIO_Init+0x194>)
 8000d12:	f000 fda5 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000d16:	2380      	movs	r3, #128	; 0x80
 8000d18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d22:	2302      	movs	r3, #2
 8000d24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4813      	ldr	r0, [pc, #76]	; (8000d7c <MX_GPIO_Init+0x198>)
 8000d2e:	f000 fd97 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 8000d32:	2320      	movs	r3, #32
 8000d34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d36:	2301      	movs	r3, #1
 8000d38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	4619      	mov	r1, r3
 8000d48:	480d      	ldr	r0, [pc, #52]	; (8000d80 <MX_GPIO_Init+0x19c>)
 8000d4a:	f000 fd89 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8000d4e:	2380      	movs	r3, #128	; 0x80
 8000d50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d52:	2301      	movs	r3, #1
 8000d54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d56:	2301      	movs	r3, #1
 8000d58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8000d5e:	f107 0314 	add.w	r3, r7, #20
 8000d62:	4619      	mov	r1, r3
 8000d64:	4806      	ldr	r0, [pc, #24]	; (8000d80 <MX_GPIO_Init+0x19c>)
 8000d66:	f000 fd7b 	bl	8001860 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d6a:	bf00      	nop
 8000d6c:	3728      	adds	r7, #40	; 0x28
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	46020c00 	.word	0x46020c00
 8000d78:	42021800 	.word	0x42021800
 8000d7c:	42020800 	.word	0x42020800
 8000d80:	42020400 	.word	0x42020400
 8000d84:	10210000 	.word	0x10210000

08000d88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d101      	bne.n	8000d9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d9a:	f000 fb97 	bl	80014cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40012c00 	.word	0x40012c00

08000dac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db0:	b672      	cpsid	i
}
 8000db2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <Error_Handler+0x8>
	...

08000db8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000dbe:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <HAL_MspInit+0x38>)
 8000dc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000dc4:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <HAL_MspInit+0x38>)
 8000dc6:	f043 0304 	orr.w	r3, r3, #4
 8000dca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000dce:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <HAL_MspInit+0x38>)
 8000dd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000dd4:	f003 0304 	and.w	r3, r3, #4
 8000dd8:	607b      	str	r3, [r7, #4]
 8000dda:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	210f      	movs	r1, #15
 8000de0:	f06f 0001 	mvn.w	r0, #1
 8000de4:	f000 fc6e 	bl	80016c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de8:	bf00      	nop
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	46020c00 	.word	0x46020c00

08000df4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b0ba      	sub	sp, #232	; 0xe8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e0c:	f107 0310 	add.w	r3, r7, #16
 8000e10:	22c0      	movs	r2, #192	; 0xc0
 8000e12:	2100      	movs	r1, #0
 8000e14:	4618      	mov	r0, r3
 8000e16:	f00c fa23 	bl	800d260 <memset>
  if(hi2c->Instance==I2C1)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a2b      	ldr	r2, [pc, #172]	; (8000ecc <HAL_I2C_MspInit+0xd8>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d14e      	bne.n	8000ec2 <HAL_I2C_MspInit+0xce>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e24:	f04f 0240 	mov.w	r2, #64	; 0x40
 8000e28:	f04f 0300 	mov.w	r3, #0
 8000e2c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8000e30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e34:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e36:	f107 0310 	add.w	r3, r7, #16
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f003 fdde 	bl	80049fc <HAL_RCCEx_PeriphCLKConfig>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000e46:	f7ff ffb1 	bl	8000dac <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e4a:	4b21      	ldr	r3, [pc, #132]	; (8000ed0 <HAL_I2C_MspInit+0xdc>)
 8000e4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e50:	4a1f      	ldr	r2, [pc, #124]	; (8000ed0 <HAL_I2C_MspInit+0xdc>)
 8000e52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e56:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e5a:	4b1d      	ldr	r3, [pc, #116]	; (8000ed0 <HAL_I2C_MspInit+0xdc>)
 8000e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000e68:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000e6c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e70:	2312      	movs	r3, #18
 8000e72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e82:	2304      	movs	r3, #4
 8000e84:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e88:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4811      	ldr	r0, [pc, #68]	; (8000ed4 <HAL_I2C_MspInit+0xe0>)
 8000e90:	f000 fce6 	bl	8001860 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e94:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <HAL_I2C_MspInit+0xdc>)
 8000e96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000e9a:	4a0d      	ldr	r2, [pc, #52]	; (8000ed0 <HAL_I2C_MspInit+0xdc>)
 8000e9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ea0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000ea4:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <HAL_I2C_MspInit+0xdc>)
 8000ea6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000eaa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2105      	movs	r1, #5
 8000eb6:	2037      	movs	r0, #55	; 0x37
 8000eb8:	f000 fc04 	bl	80016c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000ebc:	2037      	movs	r0, #55	; 0x37
 8000ebe:	f000 fc1b 	bl	80016f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ec2:	bf00      	nop
 8000ec4:	37e8      	adds	r7, #232	; 0xe8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40005400 	.word	0x40005400
 8000ed0:	46020c00 	.word	0x46020c00
 8000ed4:	42021800 	.word	0x42021800

08000ed8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ee8:	d117      	bne.n	8000f1a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000eea:	4b1c      	ldr	r3, [pc, #112]	; (8000f5c <HAL_TIM_Base_MspInit+0x84>)
 8000eec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000ef0:	4a1a      	ldr	r2, [pc, #104]	; (8000f5c <HAL_TIM_Base_MspInit+0x84>)
 8000ef2:	f043 0301 	orr.w	r3, r3, #1
 8000ef6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000efa:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <HAL_TIM_Base_MspInit+0x84>)
 8000efc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000f00:	f003 0301 	and.w	r3, r3, #1
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2105      	movs	r1, #5
 8000f0c:	202d      	movs	r0, #45	; 0x2d
 8000f0e:	f000 fbd9 	bl	80016c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f12:	202d      	movs	r0, #45	; 0x2d
 8000f14:	f000 fbf0 	bl	80016f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f18:	e01b      	b.n	8000f52 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM3)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a10      	ldr	r2, [pc, #64]	; (8000f60 <HAL_TIM_Base_MspInit+0x88>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d116      	bne.n	8000f52 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f24:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <HAL_TIM_Base_MspInit+0x84>)
 8000f26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000f2a:	4a0c      	ldr	r2, [pc, #48]	; (8000f5c <HAL_TIM_Base_MspInit+0x84>)
 8000f2c:	f043 0302 	orr.w	r3, r3, #2
 8000f30:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000f34:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <HAL_TIM_Base_MspInit+0x84>)
 8000f36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2105      	movs	r1, #5
 8000f46:	202e      	movs	r0, #46	; 0x2e
 8000f48:	f000 fbbc 	bl	80016c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f4c:	202e      	movs	r0, #46	; 0x2e
 8000f4e:	f000 fbd3 	bl	80016f8 <HAL_NVIC_EnableIRQ>
}
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	46020c00 	.word	0x46020c00
 8000f60:	40000400 	.word	0x40000400

08000f64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 030c 	add.w	r3, r7, #12
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f84:	d11e      	bne.n	8000fc4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f86:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <HAL_TIM_MspPostInit+0x68>)
 8000f88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f8c:	4a0f      	ldr	r2, [pc, #60]	; (8000fcc <HAL_TIM_MspPostInit+0x68>)
 8000f8e:	f043 0301 	orr.w	r3, r3, #1
 8000f92:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000f96:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <HAL_TIM_MspPostInit+0x68>)
 8000f98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000fa4:	230f      	movs	r3, #15
 8000fa6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4804      	ldr	r0, [pc, #16]	; (8000fd0 <HAL_TIM_MspPostInit+0x6c>)
 8000fc0:	f000 fc4e 	bl	8001860 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000fc4:	bf00      	nop
 8000fc6:	3720      	adds	r7, #32
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	46020c00 	.word	0x46020c00
 8000fd0:	42020000 	.word	0x42020000

08000fd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b0ba      	sub	sp, #232	; 0xe8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fec:	f107 0310 	add.w	r3, r7, #16
 8000ff0:	22c0      	movs	r2, #192	; 0xc0
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f00c f933 	bl	800d260 <memset>
  if(huart->Instance==USART1)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a2a      	ldr	r2, [pc, #168]	; (80010a8 <HAL_UART_MspInit+0xd4>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d14d      	bne.n	80010a0 <HAL_UART_MspInit+0xcc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001004:	f04f 0201 	mov.w	r2, #1
 8001008:	f04f 0300 	mov.w	r3, #0
 800100c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8001010:	2301      	movs	r3, #1
 8001012:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001014:	f107 0310 	add.w	r3, r7, #16
 8001018:	4618      	mov	r0, r3
 800101a:	f003 fcef 	bl	80049fc <HAL_RCCEx_PeriphCLKConfig>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001024:	f7ff fec2 	bl	8000dac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001028:	4b20      	ldr	r3, [pc, #128]	; (80010ac <HAL_UART_MspInit+0xd8>)
 800102a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800102e:	4a1f      	ldr	r2, [pc, #124]	; (80010ac <HAL_UART_MspInit+0xd8>)
 8001030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001034:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001038:	4b1c      	ldr	r3, [pc, #112]	; (80010ac <HAL_UART_MspInit+0xd8>)
 800103a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800103e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001046:	4b19      	ldr	r3, [pc, #100]	; (80010ac <HAL_UART_MspInit+0xd8>)
 8001048:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800104c:	4a17      	ldr	r2, [pc, #92]	; (80010ac <HAL_UART_MspInit+0xd8>)
 800104e:	f043 0301 	orr.w	r3, r3, #1
 8001052:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <HAL_UART_MspInit+0xd8>)
 8001058:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8001064:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001068:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	2302      	movs	r3, #2
 800106e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001072:	2302      	movs	r3, #2
 8001074:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001078:	2303      	movs	r3, #3
 800107a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800107e:	2307      	movs	r3, #7
 8001080:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001084:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001088:	4619      	mov	r1, r3
 800108a:	4809      	ldr	r0, [pc, #36]	; (80010b0 <HAL_UART_MspInit+0xdc>)
 800108c:	f000 fbe8 	bl	8001860 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001090:	2200      	movs	r2, #0
 8001092:	2105      	movs	r1, #5
 8001094:	203d      	movs	r0, #61	; 0x3d
 8001096:	f000 fb15 	bl	80016c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800109a:	203d      	movs	r0, #61	; 0x3d
 800109c:	f000 fb2c 	bl	80016f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80010a0:	bf00      	nop
 80010a2:	37e8      	adds	r7, #232	; 0xe8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40013800 	.word	0x40013800
 80010ac:	46020c00 	.word	0x46020c00
 80010b0:	42020000 	.word	0x42020000

080010b4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b0bc      	sub	sp, #240	; 0xf0
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010cc:	f107 0318 	add.w	r3, r7, #24
 80010d0:	22c0      	movs	r2, #192	; 0xc0
 80010d2:	2100      	movs	r1, #0
 80010d4:	4618      	mov	r0, r3
 80010d6:	f00c f8c3 	bl	800d260 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a3c      	ldr	r2, [pc, #240]	; (80011d0 <HAL_PCD_MspInit+0x11c>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d171      	bne.n	80011c8 <HAL_PCD_MspInit+0x114>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80010e4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80010e8:	f04f 0300 	mov.w	r3, #0
 80010ec:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 80010f0:	2300      	movs	r3, #0
 80010f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010f6:	f107 0318 	add.w	r3, r7, #24
 80010fa:	4618      	mov	r0, r3
 80010fc:	f003 fc7e 	bl	80049fc <HAL_RCCEx_PeriphCLKConfig>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8001106:	f7ff fe51 	bl	8000dac <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110a:	4b32      	ldr	r3, [pc, #200]	; (80011d4 <HAL_PCD_MspInit+0x120>)
 800110c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001110:	4a30      	ldr	r2, [pc, #192]	; (80011d4 <HAL_PCD_MspInit+0x120>)
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800111a:	4b2e      	ldr	r3, [pc, #184]	; (80011d4 <HAL_PCD_MspInit+0x120>)
 800111c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001120:	f003 0301 	and.w	r3, r3, #1
 8001124:	617b      	str	r3, [r7, #20]
 8001126:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001128:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800112c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113c:	2303      	movs	r3, #3
 800113e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001142:	230a      	movs	r3, #10
 8001144:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001148:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800114c:	4619      	mov	r1, r3
 800114e:	4822      	ldr	r0, [pc, #136]	; (80011d8 <HAL_PCD_MspInit+0x124>)
 8001150:	f000 fb86 	bl	8001860 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001154:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <HAL_PCD_MspInit+0x120>)
 8001156:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800115a:	4a1e      	ldr	r2, [pc, #120]	; (80011d4 <HAL_PCD_MspInit+0x120>)
 800115c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001160:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001164:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <HAL_PCD_MspInit+0x120>)
 8001166:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800116a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001172:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <HAL_PCD_MspInit+0x120>)
 8001174:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001178:	f003 0304 	and.w	r3, r3, #4
 800117c:	2b00      	cmp	r3, #0
 800117e:	d119      	bne.n	80011b4 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001180:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <HAL_PCD_MspInit+0x120>)
 8001182:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001186:	4a13      	ldr	r2, [pc, #76]	; (80011d4 <HAL_PCD_MspInit+0x120>)
 8001188:	f043 0304 	orr.w	r3, r3, #4
 800118c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001190:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <HAL_PCD_MspInit+0x120>)
 8001192:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001196:	f003 0304 	and.w	r3, r3, #4
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800119e:	f002 f929 	bl	80033f4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80011a2:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <HAL_PCD_MspInit+0x120>)
 80011a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011a8:	4a0a      	ldr	r2, [pc, #40]	; (80011d4 <HAL_PCD_MspInit+0x120>)
 80011aa:	f023 0304 	bic.w	r3, r3, #4
 80011ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80011b2:	e001      	b.n	80011b8 <HAL_PCD_MspInit+0x104>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80011b4:	f002 f91e 	bl	80033f4 <HAL_PWREx_EnableVddUSB>
    }
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80011b8:	2200      	movs	r2, #0
 80011ba:	2105      	movs	r1, #5
 80011bc:	2049      	movs	r0, #73	; 0x49
 80011be:	f000 fa81 	bl	80016c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80011c2:	2049      	movs	r0, #73	; 0x49
 80011c4:	f000 fa98 	bl	80016f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80011c8:	bf00      	nop
 80011ca:	37f0      	adds	r7, #240	; 0xf0
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	42040000 	.word	0x42040000
 80011d4:	46020c00 	.word	0x46020c00
 80011d8:	42020000 	.word	0x42020000

080011dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08e      	sub	sp, #56	; 0x38
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80011ec:	4b2e      	ldr	r3, [pc, #184]	; (80012a8 <HAL_InitTick+0xcc>)
 80011ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80011f2:	4a2d      	ldr	r2, [pc, #180]	; (80012a8 <HAL_InitTick+0xcc>)
 80011f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011f8:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80011fc:	4b2a      	ldr	r3, [pc, #168]	; (80012a8 <HAL_InitTick+0xcc>)
 80011fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001202:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800120a:	f107 0210 	add.w	r2, r7, #16
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	4611      	mov	r1, r2
 8001214:	4618      	mov	r0, r3
 8001216:	f003 fb33 	bl	8004880 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800121a:	f003 fb09 	bl	8004830 <HAL_RCC_GetPCLK2Freq>
 800121e:	6338      	str	r0, [r7, #48]	; 0x30

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001222:	4a22      	ldr	r2, [pc, #136]	; (80012ac <HAL_InitTick+0xd0>)
 8001224:	fba2 2303 	umull	r2, r3, r2, r3
 8001228:	0c9b      	lsrs	r3, r3, #18
 800122a:	3b01      	subs	r3, #1
 800122c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800122e:	4b20      	ldr	r3, [pc, #128]	; (80012b0 <HAL_InitTick+0xd4>)
 8001230:	4a20      	ldr	r2, [pc, #128]	; (80012b4 <HAL_InitTick+0xd8>)
 8001232:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001234:	4b1e      	ldr	r3, [pc, #120]	; (80012b0 <HAL_InitTick+0xd4>)
 8001236:	f240 32e7 	movw	r2, #999	; 0x3e7
 800123a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800123c:	4a1c      	ldr	r2, [pc, #112]	; (80012b0 <HAL_InitTick+0xd4>)
 800123e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001240:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001242:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <HAL_InitTick+0xd4>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001248:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <HAL_InitTick+0xd4>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 800124e:	4818      	ldr	r0, [pc, #96]	; (80012b0 <HAL_InitTick+0xd4>)
 8001250:	f006 f86c 	bl	800732c <HAL_TIM_Base_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 800125a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800125e:	2b00      	cmp	r3, #0
 8001260:	d118      	bne.n	8001294 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001262:	4813      	ldr	r0, [pc, #76]	; (80012b0 <HAL_InitTick+0xd4>)
 8001264:	f006 f8ba 	bl	80073dc <HAL_TIM_Base_Start_IT>
 8001268:	4603      	mov	r3, r0
 800126a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 800126e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001272:	2b00      	cmp	r3, #0
 8001274:	d10e      	bne.n	8001294 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b0f      	cmp	r3, #15
 800127a:	d808      	bhi.n	800128e <HAL_InitTick+0xb2>
      {
        /* Enable the TIM1 global Interrupt */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 800127c:	2200      	movs	r2, #0
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	202a      	movs	r0, #42	; 0x2a
 8001282:	f000 fa1f 	bl	80016c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001286:	4a0c      	ldr	r2, [pc, #48]	; (80012b8 <HAL_InitTick+0xdc>)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6013      	str	r3, [r2, #0]
 800128c:	e002      	b.n	8001294 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001294:	202a      	movs	r0, #42	; 0x2a
 8001296:	f000 fa2f 	bl	80016f8 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 800129a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3738      	adds	r7, #56	; 0x38
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	46020c00 	.word	0x46020c00
 80012ac:	431bde83 	.word	0x431bde83
 80012b0:	200006c0 	.word	0x200006c0
 80012b4:	40012c00 	.word	0x40012c00
 80012b8:	20000004 	.word	0x20000004

080012bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012c0:	e7fe      	b.n	80012c0 <NMI_Handler+0x4>

080012c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c6:	e7fe      	b.n	80012c6 <HardFault_Handler+0x4>

080012c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012cc:	e7fe      	b.n	80012cc <MemManage_Handler+0x4>

080012ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012d2:	e7fe      	b.n	80012d2 <BusFault_Handler+0x4>

080012d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <UsageFault_Handler+0x4>

080012da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012ec:	4802      	ldr	r0, [pc, #8]	; (80012f8 <TIM1_UP_IRQHandler+0x10>)
 80012ee:	f006 fb17 	bl	8007920 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	200006c0 	.word	0x200006c0

080012fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001300:	4802      	ldr	r0, [pc, #8]	; (800130c <TIM2_IRQHandler+0x10>)
 8001302:	f006 fb0d 	bl	8007920 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000088 	.word	0x20000088

08001310 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001314:	4813      	ldr	r0, [pc, #76]	; (8001364 <TIM3_IRQHandler+0x54>)
 8001316:	f006 fb03 	bl	8007920 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  ledIndCnt++;
 800131a:	4b13      	ldr	r3, [pc, #76]	; (8001368 <TIM3_IRQHandler+0x58>)
 800131c:	881b      	ldrh	r3, [r3, #0]
 800131e:	3301      	adds	r3, #1
 8001320:	b29a      	uxth	r2, r3
 8001322:	4b11      	ldr	r3, [pc, #68]	; (8001368 <TIM3_IRQHandler+0x58>)
 8001324:	801a      	strh	r2, [r3, #0]

  if(ledIndCnt == LED_IND_DELAY)
 8001326:	4b10      	ldr	r3, [pc, #64]	; (8001368 <TIM3_IRQHandler+0x58>)
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800132e:	4293      	cmp	r3, r2
 8001330:	d115      	bne.n	800135e <TIM3_IRQHandler+0x4e>
  {
	  if(READ_BIT(GPIOC->IDR, GPIO_IDR_ID7))
 8001332:	4b0e      	ldr	r3, [pc, #56]	; (800136c <TIM3_IRQHandler+0x5c>)
 8001334:	691b      	ldr	r3, [r3, #16]
 8001336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800133a:	2b00      	cmp	r3, #0
 800133c:	d006      	beq.n	800134c <TIM3_IRQHandler+0x3c>
  	  {
  		  CLEAR_BIT( GPIOC->ODR, GPIO_ODR_OD7);
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <TIM3_IRQHandler+0x5c>)
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	4a0a      	ldr	r2, [pc, #40]	; (800136c <TIM3_IRQHandler+0x5c>)
 8001344:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001348:	6153      	str	r3, [r2, #20]
 800134a:	e005      	b.n	8001358 <TIM3_IRQHandler+0x48>
  	  }
  	  else
  	  {
  		  SET_BIT( GPIOC->ODR, GPIO_ODR_OD7);
 800134c:	4b07      	ldr	r3, [pc, #28]	; (800136c <TIM3_IRQHandler+0x5c>)
 800134e:	695b      	ldr	r3, [r3, #20]
 8001350:	4a06      	ldr	r2, [pc, #24]	; (800136c <TIM3_IRQHandler+0x5c>)
 8001352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001356:	6153      	str	r3, [r2, #20]
  	  }
	  ledIndCnt = 0;
 8001358:	4b03      	ldr	r3, [pc, #12]	; (8001368 <TIM3_IRQHandler+0x58>)
 800135a:	2200      	movs	r2, #0
 800135c:	801a      	strh	r2, [r3, #0]
  }
  /* USER CODE END TIM3_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	200000d4 	.word	0x200000d4
 8001368:	2000070c 	.word	0x2000070c
 800136c:	42020800 	.word	0x42020800

08001370 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 Event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001374:	4802      	ldr	r0, [pc, #8]	; (8001380 <I2C1_EV_IRQHandler+0x10>)
 8001376:	f000 fcfe 	bl	8001d76 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000034 	.word	0x20000034

08001384 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001388:	4802      	ldr	r0, [pc, #8]	; (8001394 <USART1_IRQHandler+0x10>)
 800138a:	f007 fd41 	bl	8008e10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000120 	.word	0x20000120

08001398 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800139c:	4802      	ldr	r0, [pc, #8]	; (80013a8 <OTG_FS_IRQHandler+0x10>)
 800139e:	f000 ffc1 	bl	8002324 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	200001b4 	.word	0x200001b4

080013ac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013b0:	4b18      	ldr	r3, [pc, #96]	; (8001414 <SystemInit+0x68>)
 80013b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013b6:	4a17      	ldr	r2, [pc, #92]	; (8001414 <SystemInit+0x68>)
 80013b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80013c0:	4b15      	ldr	r3, [pc, #84]	; (8001418 <SystemInit+0x6c>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80013c6:	4b14      	ldr	r3, [pc, #80]	; (8001418 <SystemInit+0x6c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80013cc:	4b12      	ldr	r3, [pc, #72]	; (8001418 <SystemInit+0x6c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80013d2:	4b11      	ldr	r3, [pc, #68]	; (8001418 <SystemInit+0x6c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80013d8:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <SystemInit+0x6c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a0e      	ldr	r2, [pc, #56]	; (8001418 <SystemInit+0x6c>)
 80013de:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80013e2:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80013e6:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80013e8:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <SystemInit+0x6c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80013ee:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <SystemInit+0x6c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a09      	ldr	r2, [pc, #36]	; (8001418 <SystemInit+0x6c>)
 80013f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013f8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80013fa:	4b07      	ldr	r3, [pc, #28]	; (8001418 <SystemInit+0x6c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001400:	4b04      	ldr	r3, [pc, #16]	; (8001414 <SystemInit+0x68>)
 8001402:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001406:	609a      	str	r2, [r3, #8]
  #endif
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	e000ed00 	.word	0xe000ed00
 8001418:	46020c00 	.word	0x46020c00

0800141c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800141c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001454 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001420:	f7ff ffc4 	bl	80013ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001424:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001426:	e003      	b.n	8001430 <LoopCopyDataInit>

08001428 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001428:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800142a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800142c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800142e:	3104      	adds	r1, #4

08001430 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001430:	480a      	ldr	r0, [pc, #40]	; (800145c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001432:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001434:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001436:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001438:	d3f6      	bcc.n	8001428 <CopyDataInit>
	ldr	r2, =_sbss
 800143a:	4a0a      	ldr	r2, [pc, #40]	; (8001464 <LoopForever+0x12>)
	b	LoopFillZerobss
 800143c:	e002      	b.n	8001444 <LoopFillZerobss>

0800143e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800143e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001440:	f842 3b04 	str.w	r3, [r2], #4

08001444 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001444:	4b08      	ldr	r3, [pc, #32]	; (8001468 <LoopForever+0x16>)
	cmp	r2, r3
 8001446:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001448:	d3f9      	bcc.n	800143e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800144a:	f00b ff11 	bl	800d270 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800144e:	f7ff f8f9 	bl	8000644 <main>

08001452 <LoopForever>:

LoopForever:
    b LoopForever
 8001452:	e7fe      	b.n	8001452 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001454:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001458:	0800d444 	.word	0x0800d444
	ldr	r0, =_sdata
 800145c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001460:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 8001464:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 8001468:	20003258 	.word	0x20003258

0800146c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800146c:	e7fe      	b.n	800146c <ADC1_IRQHandler>
	...

08001470 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001474:	4b11      	ldr	r3, [pc, #68]	; (80014bc <HAL_Init+0x4c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a10      	ldr	r2, [pc, #64]	; (80014bc <HAL_Init+0x4c>)
 800147a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800147e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001480:	2003      	movs	r0, #3
 8001482:	f000 f914 	bl	80016ae <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001486:	f003 f8a3 	bl	80045d0 <HAL_RCC_GetSysClockFreq>
 800148a:	4602      	mov	r2, r0
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <HAL_Init+0x50>)
 800148e:	6a1b      	ldr	r3, [r3, #32]
 8001490:	f003 030f 	and.w	r3, r3, #15
 8001494:	490b      	ldr	r1, [pc, #44]	; (80014c4 <HAL_Init+0x54>)
 8001496:	5ccb      	ldrb	r3, [r1, r3]
 8001498:	fa22 f303 	lsr.w	r3, r2, r3
 800149c:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <HAL_Init+0x58>)
 800149e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014a0:	200f      	movs	r0, #15
 80014a2:	f7ff fe9b 	bl	80011dc <HAL_InitTick>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e002      	b.n	80014b6 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014b0:	f7ff fc82 	bl	8000db8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40022000 	.word	0x40022000
 80014c0:	46020c00 	.word	0x46020c00
 80014c4:	0800d334 	.word	0x0800d334
 80014c8:	20000000 	.word	0x20000000

080014cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <HAL_IncTick+0x20>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <HAL_IncTick+0x24>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4413      	add	r3, r2
 80014dc:	4a04      	ldr	r2, [pc, #16]	; (80014f0 <HAL_IncTick+0x24>)
 80014de:	6013      	str	r3, [r2, #0]
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	20000008 	.word	0x20000008
 80014f0:	20000710 	.word	0x20000710

080014f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return uwTick;
 80014f8:	4b03      	ldr	r3, [pc, #12]	; (8001508 <HAL_GetTick+0x14>)
 80014fa:	681b      	ldr	r3, [r3, #0]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	20000710 	.word	0x20000710

0800150c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001514:	f7ff ffee 	bl	80014f4 <HAL_GetTick>
 8001518:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001524:	d005      	beq.n	8001532 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001526:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <HAL_Delay+0x44>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	461a      	mov	r2, r3
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	4413      	add	r3, r2
 8001530:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001532:	bf00      	nop
 8001534:	f7ff ffde 	bl	80014f4 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	429a      	cmp	r2, r3
 8001542:	d8f7      	bhi.n	8001534 <HAL_Delay+0x28>
  {
  }
}
 8001544:	bf00      	nop
 8001546:	bf00      	nop
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000008 	.word	0x20000008

08001554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001564:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <__NVIC_SetPriorityGrouping+0x44>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800156a:	68ba      	ldr	r2, [r7, #8]
 800156c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001570:	4013      	ands	r3, r2
 8001572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800157c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001586:	4a04      	ldr	r2, [pc, #16]	; (8001598 <__NVIC_SetPriorityGrouping+0x44>)
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	60d3      	str	r3, [r2, #12]
}
 800158c:	bf00      	nop
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a0:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <__NVIC_GetPriorityGrouping+0x18>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	0a1b      	lsrs	r3, r3, #8
 80015a6:	f003 0307 	and.w	r3, r3, #7
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	db0b      	blt.n	80015e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	f003 021f 	and.w	r2, r3, #31
 80015d0:	4907      	ldr	r1, [pc, #28]	; (80015f0 <__NVIC_EnableIRQ+0x38>)
 80015d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d6:	095b      	lsrs	r3, r3, #5
 80015d8:	2001      	movs	r0, #1
 80015da:	fa00 f202 	lsl.w	r2, r0, r2
 80015de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	e000e100 	.word	0xe000e100

080015f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	6039      	str	r1, [r7, #0]
 80015fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001604:	2b00      	cmp	r3, #0
 8001606:	db0a      	blt.n	800161e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	b2da      	uxtb	r2, r3
 800160c:	490c      	ldr	r1, [pc, #48]	; (8001640 <__NVIC_SetPriority+0x4c>)
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	0112      	lsls	r2, r2, #4
 8001614:	b2d2      	uxtb	r2, r2
 8001616:	440b      	add	r3, r1
 8001618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800161c:	e00a      	b.n	8001634 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	b2da      	uxtb	r2, r3
 8001622:	4908      	ldr	r1, [pc, #32]	; (8001644 <__NVIC_SetPriority+0x50>)
 8001624:	79fb      	ldrb	r3, [r7, #7]
 8001626:	f003 030f 	and.w	r3, r3, #15
 800162a:	3b04      	subs	r3, #4
 800162c:	0112      	lsls	r2, r2, #4
 800162e:	b2d2      	uxtb	r2, r2
 8001630:	440b      	add	r3, r1
 8001632:	761a      	strb	r2, [r3, #24]
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000e100 	.word	0xe000e100
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001648:	b480      	push	{r7}
 800164a:	b089      	sub	sp, #36	; 0x24
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	f1c3 0307 	rsb	r3, r3, #7
 8001662:	2b04      	cmp	r3, #4
 8001664:	bf28      	it	cs
 8001666:	2304      	movcs	r3, #4
 8001668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3304      	adds	r3, #4
 800166e:	2b06      	cmp	r3, #6
 8001670:	d902      	bls.n	8001678 <NVIC_EncodePriority+0x30>
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3b03      	subs	r3, #3
 8001676:	e000      	b.n	800167a <NVIC_EncodePriority+0x32>
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800167c:	f04f 32ff 	mov.w	r2, #4294967295
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43da      	mvns	r2, r3
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	401a      	ands	r2, r3
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001690:	f04f 31ff 	mov.w	r1, #4294967295
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	fa01 f303 	lsl.w	r3, r1, r3
 800169a:	43d9      	mvns	r1, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a0:	4313      	orrs	r3, r2
         );
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3724      	adds	r7, #36	; 0x24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff ff4c 	bl	8001554 <__NVIC_SetPriorityGrouping>
}
 80016bc:	bf00      	nop
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
 80016d0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016d2:	f7ff ff63 	bl	800159c <__NVIC_GetPriorityGrouping>
 80016d6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	68b9      	ldr	r1, [r7, #8]
 80016dc:	6978      	ldr	r0, [r7, #20]
 80016de:	f7ff ffb3 	bl	8001648 <NVIC_EncodePriority>
 80016e2:	4602      	mov	r2, r0
 80016e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016e8:	4611      	mov	r1, r2
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff ff82 	bl	80015f4 <__NVIC_SetPriority>
}
 80016f0:	bf00      	nop
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff ff56 	bl	80015b8 <__NVIC_EnableIRQ>
}
 800170c:	bf00      	nop
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 800171c:	f7ff feea 	bl	80014f4 <HAL_GetTick>
 8001720:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e06b      	b.n	8001804 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001732:	b2db      	uxtb	r3, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d008      	beq.n	800174a <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2220      	movs	r2, #32
 800173c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e05c      	b.n	8001804 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	695a      	ldr	r2, [r3, #20]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f042 0204 	orr.w	r2, r2, #4
 8001758:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2205      	movs	r2, #5
 800175e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001762:	e020      	b.n	80017a6 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001764:	f7ff fec6 	bl	80014f4 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b05      	cmp	r3, #5
 8001770:	d919      	bls.n	80017a6 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001776:	f043 0210 	orr.w	r2, r3, #16
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2203      	movs	r2, #3
 8001782:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800178a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800178e:	2b00      	cmp	r3, #0
 8001790:	d003      	beq.n	800179a <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001796:	2201      	movs	r2, #1
 8001798:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e02e      	b.n	8001804 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d0d7      	beq.n	8001764 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	695a      	ldr	r2, [r3, #20]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f042 0202 	orr.w	r2, r2, #2
 80017c2:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2204      	movs	r2, #4
 80017c8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80017d4:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2201      	movs	r2, #1
 80017da:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d007      	beq.n	80017fa <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ee:	2201      	movs	r2, #1
 80017f0:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2200      	movs	r2, #0
 80017f8:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e019      	b.n	8001852 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d004      	beq.n	8001834 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2220      	movs	r2, #32
 800182e:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e00e      	b.n	8001852 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2204      	movs	r2, #4
 8001838:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	6812      	ldr	r2, [r2, #0]
 8001846:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800184a:	f043 0304 	orr.w	r3, r3, #4
 800184e:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
	...

08001860 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001860:	b480      	push	{r7}
 8001862:	b089      	sub	sp, #36	; 0x24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001872:	e1ba      	b.n	8001bea <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	2101      	movs	r1, #1
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	fa01 f303 	lsl.w	r3, r1, r3
 8001880:	4013      	ands	r3, r2
 8001882:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2b00      	cmp	r3, #0
 800188c:	f000 81aa 	beq.w	8001be4 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a55      	ldr	r2, [pc, #340]	; (80019e8 <HAL_GPIO_Init+0x188>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d15d      	bne.n	8001954 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800189e:	2201      	movs	r2, #1
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43db      	mvns	r3, r3
 80018a8:	69fa      	ldr	r2, [r7, #28]
 80018aa:	4013      	ands	r3, r2
 80018ac:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 0201 	and.w	r2, r3, #1
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	69fa      	ldr	r2, [r7, #28]
 80018be:	4313      	orrs	r3, r2
 80018c0:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	69fa      	ldr	r2, [r7, #28]
 80018c6:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80018c8:	4a48      	ldr	r2, [pc, #288]	; (80019ec <HAL_GPIO_Init+0x18c>)
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80018d0:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80018d2:	4a46      	ldr	r2, [pc, #280]	; (80019ec <HAL_GPIO_Init+0x18c>)
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	4413      	add	r3, r2
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	08da      	lsrs	r2, r3, #3
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	3208      	adds	r2, #8
 80018e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ea:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	220f      	movs	r2, #15
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43db      	mvns	r3, r3
 80018fc:	69fa      	ldr	r2, [r7, #28]
 80018fe:	4013      	ands	r3, r2
 8001900:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	220b      	movs	r2, #11
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	69fa      	ldr	r2, [r7, #28]
 8001912:	4313      	orrs	r3, r2
 8001914:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	08da      	lsrs	r2, r3, #3
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	3208      	adds	r2, #8
 800191e:	69f9      	ldr	r1, [r7, #28]
 8001920:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	2203      	movs	r2, #3
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	69fa      	ldr	r2, [r7, #28]
 8001938:	4013      	ands	r3, r2
 800193a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	2202      	movs	r2, #2
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	69fa      	ldr	r2, [r7, #28]
 8001948:	4313      	orrs	r3, r2
 800194a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	69fa      	ldr	r2, [r7, #28]
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	e067      	b.n	8001a24 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b02      	cmp	r3, #2
 800195a:	d003      	beq.n	8001964 <HAL_GPIO_Init+0x104>
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2b12      	cmp	r3, #18
 8001962:	d145      	bne.n	80019f0 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	08da      	lsrs	r2, r3, #3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3208      	adds	r2, #8
 800196c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001970:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	f003 0307 	and.w	r3, r3, #7
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	220f      	movs	r2, #15
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	69fa      	ldr	r2, [r7, #28]
 8001984:	4013      	ands	r3, r2
 8001986:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	f003 020f 	and.w	r2, r3, #15
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	69fa      	ldr	r2, [r7, #28]
 800199e:	4313      	orrs	r3, r2
 80019a0:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	08da      	lsrs	r2, r3, #3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	3208      	adds	r2, #8
 80019aa:	69f9      	ldr	r1, [r7, #28]
 80019ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	2203      	movs	r2, #3
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	69fa      	ldr	r2, [r7, #28]
 80019c4:	4013      	ands	r3, r2
 80019c6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 0203 	and.w	r2, r3, #3
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	69fa      	ldr	r2, [r7, #28]
 80019da:	4313      	orrs	r3, r2
 80019dc:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	69fa      	ldr	r2, [r7, #28]
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	e01e      	b.n	8001a24 <HAL_GPIO_Init+0x1c4>
 80019e6:	bf00      	nop
 80019e8:	46020000 	.word	0x46020000
 80019ec:	0800d38c 	.word	0x0800d38c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	2203      	movs	r2, #3
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69fa      	ldr	r2, [r7, #28]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 0203 	and.w	r2, r3, #3
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	69fa      	ldr	r2, [r7, #28]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	69fa      	ldr	r2, [r7, #28]
 8001a22:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d00b      	beq.n	8001a44 <HAL_GPIO_Init+0x1e4>
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d007      	beq.n	8001a44 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a38:	2b11      	cmp	r3, #17
 8001a3a:	d003      	beq.n	8001a44 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b12      	cmp	r3, #18
 8001a42:	d130      	bne.n	8001aa6 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	2203      	movs	r2, #3
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	43db      	mvns	r3, r3
 8001a56:	69fa      	ldr	r2, [r7, #28]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	68da      	ldr	r2, [r3, #12]
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	69fa      	ldr	r2, [r7, #28]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	69fa      	ldr	r2, [r7, #28]
 8001a72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43db      	mvns	r3, r3
 8001a84:	69fa      	ldr	r2, [r7, #28]
 8001a86:	4013      	ands	r3, r2
 8001a88:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	091b      	lsrs	r3, r3, #4
 8001a90:	f003 0201 	and.w	r2, r3, #1
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	69fa      	ldr	r2, [r7, #28]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	69fa      	ldr	r2, [r7, #28]
 8001aa4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b03      	cmp	r3, #3
 8001aac:	d017      	beq.n	8001ade <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	2203      	movs	r2, #3
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	69fa      	ldr	r2, [r7, #28]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	69fa      	ldr	r2, [r7, #28]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	69fa      	ldr	r2, [r7, #28]
 8001adc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d07c      	beq.n	8001be4 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001aea:	4a47      	ldr	r2, [pc, #284]	; (8001c08 <HAL_GPIO_Init+0x3a8>)
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	089b      	lsrs	r3, r3, #2
 8001af0:	3318      	adds	r3, #24
 8001af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	220f      	movs	r2, #15
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43db      	mvns	r3, r3
 8001b08:	69fa      	ldr	r2, [r7, #28]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	0a9a      	lsrs	r2, r3, #10
 8001b12:	4b3e      	ldr	r3, [pc, #248]	; (8001c0c <HAL_GPIO_Init+0x3ac>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	697a      	ldr	r2, [r7, #20]
 8001b18:	f002 0203 	and.w	r2, r2, #3
 8001b1c:	00d2      	lsls	r2, r2, #3
 8001b1e:	4093      	lsls	r3, r2
 8001b20:	69fa      	ldr	r2, [r7, #28]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001b26:	4938      	ldr	r1, [pc, #224]	; (8001c08 <HAL_GPIO_Init+0x3a8>)
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	089b      	lsrs	r3, r3, #2
 8001b2c:	3318      	adds	r3, #24
 8001b2e:	69fa      	ldr	r2, [r7, #28]
 8001b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001b34:	4b34      	ldr	r3, [pc, #208]	; (8001c08 <HAL_GPIO_Init+0x3a8>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69fa      	ldr	r2, [r7, #28]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8001b50:	69fa      	ldr	r2, [r7, #28]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8001b58:	4a2b      	ldr	r2, [pc, #172]	; (8001c08 <HAL_GPIO_Init+0x3a8>)
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001b5e:	4b2a      	ldr	r3, [pc, #168]	; (8001c08 <HAL_GPIO_Init+0x3a8>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	43db      	mvns	r3, r3
 8001b68:	69fa      	ldr	r2, [r7, #28]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8001b7a:	69fa      	ldr	r2, [r7, #28]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8001b82:	4a21      	ldr	r2, [pc, #132]	; (8001c08 <HAL_GPIO_Init+0x3a8>)
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001b88:	4b1f      	ldr	r3, [pc, #124]	; (8001c08 <HAL_GPIO_Init+0x3a8>)
 8001b8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b8e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	43db      	mvns	r3, r3
 8001b94:	69fa      	ldr	r2, [r7, #28]
 8001b96:	4013      	ands	r3, r2
 8001b98:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8001ba6:	69fa      	ldr	r2, [r7, #28]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8001bae:	4a16      	ldr	r2, [pc, #88]	; (8001c08 <HAL_GPIO_Init+0x3a8>)
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8001bb6:	4b14      	ldr	r3, [pc, #80]	; (8001c08 <HAL_GPIO_Init+0x3a8>)
 8001bb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bbc:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	69fa      	ldr	r2, [r7, #28]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8001bd4:	69fa      	ldr	r2, [r7, #28]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8001bdc:	4a0a      	ldr	r2, [pc, #40]	; (8001c08 <HAL_GPIO_Init+0x3a8>)
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	3301      	adds	r3, #1
 8001be8:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f47f ae3d 	bne.w	8001874 <HAL_GPIO_Init+0x14>
  }
}
 8001bfa:	bf00      	nop
 8001bfc:	bf00      	nop
 8001bfe:	3724      	adds	r7, #36	; 0x24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	46022000 	.word	0x46022000
 8001c0c:	002f7f7f 	.word	0x002f7f7f

08001c10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	807b      	strh	r3, [r7, #2]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c20:	787b      	ldrb	r3, [r7, #1]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d003      	beq.n	8001c2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c26:	887a      	ldrh	r2, [r7, #2]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8001c2c:	e002      	b.n	8001c34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8001c2e:	887a      	ldrh	r2, [r7, #2]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e08d      	b.n	8001d6e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d106      	bne.n	8001c6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7ff f8c4 	bl	8000df4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2224      	movs	r2, #36	; 0x24
 8001c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f022 0201 	bic.w	r2, r2, #1
 8001c82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c90:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ca0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d107      	bne.n	8001cba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689a      	ldr	r2, [r3, #8]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	e006      	b.n	8001cc8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689a      	ldr	r2, [r3, #8]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001cc6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d108      	bne.n	8001ce2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cde:	605a      	str	r2, [r3, #4]
 8001ce0:	e007      	b.n	8001cf2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	685a      	ldr	r2, [r3, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cf0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	6812      	ldr	r2, [r2, #0]
 8001cfc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d04:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68da      	ldr	r2, [r3, #12]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d14:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	691a      	ldr	r2, [r3, #16]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	69d9      	ldr	r1, [r3, #28]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a1a      	ldr	r2, [r3, #32]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f042 0201 	orr.w	r2, r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2220      	movs	r2, #32
 8001d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b084      	sub	sp, #16
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d005      	beq.n	8001da2 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	68f9      	ldr	r1, [r7, #12]
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	4798      	blx	r3
  }
}
 8001da2:	bf00      	nop
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
 8001db2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2b20      	cmp	r3, #32
 8001dbe:	d138      	bne.n	8001e32 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d101      	bne.n	8001dce <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001dca:	2302      	movs	r3, #2
 8001dcc:	e032      	b.n	8001e34 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2224      	movs	r2, #36	; 0x24
 8001dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 0201 	bic.w	r2, r2, #1
 8001dec:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001dfc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6819      	ldr	r1, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f042 0201 	orr.w	r2, r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2220      	movs	r2, #32
 8001e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	e000      	b.n	8001e34 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e32:	2302      	movs	r3, #2
  }
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b20      	cmp	r3, #32
 8001e54:	d139      	bne.n	8001eca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d101      	bne.n	8001e64 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e60:	2302      	movs	r3, #2
 8001e62:	e033      	b.n	8001ecc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2224      	movs	r2, #36	; 0x24
 8001e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0201 	bic.w	r2, r2, #1
 8001e82:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e92:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	021b      	lsls	r3, r3, #8
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f042 0201 	orr.w	r2, r2, #1
 8001eb4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2220      	movs	r2, #32
 8001eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	e000      	b.n	8001ecc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001eca:	2302      	movs	r3, #2
  }
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_I2CEx_ConfigFastModePlus>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  FastModePlus New state of the Fast Mode Plus.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigFastModePlus(I2C_HandleTypeDef *hi2c, uint32_t FastModePlus)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_FASTMODEPLUS(FastModePlus));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b20      	cmp	r3, #32
 8001eec:	d13c      	bne.n	8001f68 <HAL_I2CEx_ConfigFastModePlus+0x90>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d101      	bne.n	8001efc <HAL_I2CEx_ConfigFastModePlus+0x24>
 8001ef8:	2302      	movs	r3, #2
 8001efa:	e036      	b.n	8001f6a <HAL_I2CEx_ConfigFastModePlus+0x92>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2224      	movs	r2, #36	; 0x24
 8001f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f022 0201 	bic.w	r2, r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]

    if (FastModePlus == I2C_FASTMODEPLUS_ENABLE)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d108      	bne.n	8001f34 <HAL_I2CEx_ConfigFastModePlus+0x5c>
    {
      /* Set I2Cx FMP bit */
      hi2c->Instance->CR1 |= (I2C_CR1_FMP);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	e007      	b.n	8001f44 <HAL_I2CEx_ConfigFastModePlus+0x6c>
    }
    else
    {
      /* Reset I2Cx FMP bit */
      hi2c->Instance->CR1 &= ~(I2C_CR1_FMP);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001f42:	601a      	str	r2, [r3, #0]
    }

    __HAL_I2C_ENABLE(hi2c);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f042 0201 	orr.w	r2, r2, #1
 8001f52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2220      	movs	r2, #32
 8001f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f64:	2300      	movs	r3, #0
 8001f66:	e000      	b.n	8001f6a <HAL_I2CEx_ConfigFastModePlus+0x92>
  }
  else
  {
    return HAL_BUSY;
 8001f68:	2302      	movs	r3, #2
  }
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
	...

08001f78 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f80:	2300      	movs	r3, #0
 8001f82:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8001f84:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d002      	beq.n	8001f96 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	73fb      	strb	r3, [r7, #15]
 8001f94:	e007      	b.n	8001fa6 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8001f96:	4b07      	ldr	r3, [pc, #28]	; (8001fb4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f023 0204 	bic.w	r2, r3, #4
 8001f9e:	4905      	ldr	r1, [pc, #20]	; (8001fb4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	600b      	str	r3, [r1, #0]
  }

  return status;
 8001fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3714      	adds	r7, #20
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	40030400 	.word	0x40030400

08001fb8 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001fbc:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <HAL_ICACHE_Enable+0x1c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a04      	ldr	r2, [pc, #16]	; (8001fd4 <HAL_ICACHE_Enable+0x1c>)
 8001fc2:	f043 0301 	orr.w	r3, r3, #1
 8001fc6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	40030400 	.word	0x40030400

08001fd8 <HAL_ICACHE_Disable>:
  * @note   This function waits for the cache being disabled but
  *         not for the end of the automatic cache invalidation procedure.
  * @retval HAL status (HAL_OK/HAL_TIMEOUT)
  */
HAL_StatusTypeDef HAL_ICACHE_Disable(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Make sure BSYENDF is reset before to disable the instruction cache */
  /* as it automatically starts a cache invalidation procedure */
  WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 8001fe2:	4b14      	ldr	r3, [pc, #80]	; (8002034 <HAL_ICACHE_Disable+0x5c>)
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	60da      	str	r2, [r3, #12]

  CLEAR_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001fe8:	4b12      	ldr	r3, [pc, #72]	; (8002034 <HAL_ICACHE_Disable+0x5c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a11      	ldr	r2, [pc, #68]	; (8002034 <HAL_ICACHE_Disable+0x5c>)
 8001fee:	f023 0301 	bic.w	r3, r3, #1
 8001ff2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ff4:	f7ff fa7e 	bl	80014f4 <HAL_GetTick>
 8001ff8:	6038      	str	r0, [r7, #0]

  /* Wait for instruction cache being disabled */
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8001ffa:	e00f      	b.n	800201c <HAL_ICACHE_Disable+0x44>
  {
    if ((HAL_GetTick() - tickstart) > ICACHE_DISABLE_TIMEOUT_VALUE)
 8001ffc:	f7ff fa7a 	bl	80014f4 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b01      	cmp	r3, #1
 8002008:	d908      	bls.n	800201c <HAL_ICACHE_Disable+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800200a:	4b0a      	ldr	r3, [pc, #40]	; (8002034 <HAL_ICACHE_Disable+0x5c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d002      	beq.n	800201c <HAL_ICACHE_Disable+0x44>
      {
        status = HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	71fb      	strb	r3, [r7, #7]
        break;
 800201a:	e005      	b.n	8002028 <HAL_ICACHE_Disable+0x50>
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800201c:	4b05      	ldr	r3, [pc, #20]	; (8002034 <HAL_ICACHE_Disable+0x5c>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0301 	and.w	r3, r3, #1
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1e9      	bne.n	8001ffc <HAL_ICACHE_Disable+0x24>
      }
    }
  }

  return status;
 8002028:	79fb      	ldrb	r3, [r7, #7]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40030400 	.word	0x40030400

08002038 <HAL_ICACHE_EnableRemapRegion>:
                     This parameter can be a value of @arg @ref ICACHE_Region
  * @param  pRegionConfig  Pointer to structure of ICACHE region configuration parameters
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef  HAL_ICACHE_EnableRemapRegion(uint32_t Region, const ICACHE_RegionConfigTypeDef *const pRegionConfig)
{
 8002038:	b480      	push	{r7}
 800203a:	b087      	sub	sp, #28
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002042:	2300      	movs	r3, #0
 8002044:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ICACHE_REGION_SIZE(pRegionConfig->Size));
  assert_param(IS_ICACHE_REGION_TRAFFIC_ROUTE(pRegionConfig->TrafficRoute));
  assert_param(IS_ICACHE_REGION_OUTPUT_BURST_TYPE(pRegionConfig->OutputBurstType));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002046:	4b22      	ldr	r3, [pc, #136]	; (80020d0 <HAL_ICACHE_EnableRemapRegion+0x98>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d002      	beq.n	8002058 <HAL_ICACHE_EnableRemapRegion+0x20>
  {
    status = HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	75fb      	strb	r3, [r7, #23]
 8002056:	e034      	b.n	80020c2 <HAL_ICACHE_EnableRemapRegion+0x8a>
  }
  else
  {
    /* Get region control register address */
    p_reg = &(ICACHE->CRR0) + (1U * Region);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	009a      	lsls	r2, r3, #2
 800205c:	4b1d      	ldr	r3, [pc, #116]	; (80020d4 <HAL_ICACHE_EnableRemapRegion+0x9c>)
 800205e:	4413      	add	r3, r2
 8002060:	613b      	str	r3, [r7, #16]

    /* Check region is not already enabled */
    if ((*p_reg & ICACHE_CRRx_REN) != 0U)
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d002      	beq.n	8002074 <HAL_ICACHE_EnableRemapRegion+0x3c>
    {
      status = HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	75fb      	strb	r3, [r7, #23]
 8002072:	e026      	b.n	80020c2 <HAL_ICACHE_EnableRemapRegion+0x8a>
      /* Region 8MB:   BaseAddress size 6 bits, RemapAddress size 9 bits  */
      /* Region 16MB:  BaseAddress size 5 bits, RemapAddress size 8 bits  */
      /* Region 32MB:  BaseAddress size 4 bits, RemapAddress size 7 bits  */
      /* Region 64MB:  BaseAddress size 3 bits, RemapAddress size 6 bits  */
      /* Region 128MB: BaseAddress size 2 bits, RemapAddress size 5 bits  */
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	0d5a      	lsrs	r2, r3, #21
               (0xFFU & ~(pRegionConfig->Size - 1U));
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	425b      	negs	r3, r3
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 8002080:	4013      	ands	r3, r2
 8002082:	b2db      	uxtb	r3, r3
 8002084:	60fb      	str	r3, [r7, #12]
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	095a      	lsrs	r2, r3, #5
                ((uint32_t)(0x7FFU & ~(pRegionConfig->Size - 1U)) << ICACHE_CRRx_REMAPADDR_Pos));
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	425b      	negs	r3, r3
 8002092:	041b      	lsls	r3, r3, #16
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 8002094:	401a      	ands	r2, r3
 8002096:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <HAL_ICACHE_EnableRemapRegion+0xa0>)
 8002098:	4013      	ands	r3, r2
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	4313      	orrs	r3, r2
 800209e:	60fb      	str	r3, [r7, #12]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	025a      	lsls	r2, r3, #9
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	431a      	orrs	r2, r3
               pRegionConfig->OutputBurstType;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	691b      	ldr	r3, [r3, #16]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 80020b0:	4313      	orrs	r3, r2
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	60fb      	str	r3, [r7, #12]
      *p_reg = (value | ICACHE_CRRx_REN);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
 80020c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	371c      	adds	r7, #28
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	40030400 	.word	0x40030400
 80020d4:	40030420 	.word	0x40030420
 80020d8:	07ff0000 	.word	0x07ff0000

080020dc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020de:	b08f      	sub	sp, #60	; 0x3c
 80020e0:	af0a      	add	r7, sp, #40	; 0x28
 80020e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e116      	b.n	800231c <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hpcd->Instance;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	60bb      	str	r3, [r7, #8]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d106      	bne.n	800210e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7fe ffd3 	bl	80010b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2203      	movs	r2, #3
 8002112:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (STM32U575xx) || defined (STM32U585xx)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 14)) == 0U)
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800211a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d102      	bne.n	8002128 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4618      	mov	r0, r3
 800212e:	f008 f8fb 	bl	800a328 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	603b      	str	r3, [r7, #0]
 8002138:	687e      	ldr	r6, [r7, #4]
 800213a:	466d      	mov	r5, sp
 800213c:	f106 0410 	add.w	r4, r6, #16
 8002140:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002142:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002144:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002146:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002148:	e894 0003 	ldmia.w	r4, {r0, r1}
 800214c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002150:	1d33      	adds	r3, r6, #4
 8002152:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002154:	6838      	ldr	r0, [r7, #0]
 8002156:	f008 f818 	bl	800a18a <USB_CoreInit>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d005      	beq.n	800216c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2202      	movs	r2, #2
 8002164:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e0d7      	b.n	800231c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2100      	movs	r1, #0
 8002172:	4618      	mov	r0, r3
 8002174:	f008 f8e9 	bl	800a34a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002178:	2300      	movs	r3, #0
 800217a:	73fb      	strb	r3, [r7, #15]
 800217c:	e04a      	b.n	8002214 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800217e:	7bfa      	ldrb	r2, [r7, #15]
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	4613      	mov	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	4413      	add	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	440b      	add	r3, r1
 800218c:	333d      	adds	r3, #61	; 0x3d
 800218e:	2201      	movs	r2, #1
 8002190:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002192:	7bfa      	ldrb	r2, [r7, #15]
 8002194:	6879      	ldr	r1, [r7, #4]
 8002196:	4613      	mov	r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	4413      	add	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	440b      	add	r3, r1
 80021a0:	333c      	adds	r3, #60	; 0x3c
 80021a2:	7bfa      	ldrb	r2, [r7, #15]
 80021a4:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021a6:	7bfa      	ldrb	r2, [r7, #15]
 80021a8:	7bfb      	ldrb	r3, [r7, #15]
 80021aa:	b298      	uxth	r0, r3
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	4613      	mov	r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	4413      	add	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	440b      	add	r3, r1
 80021b8:	3356      	adds	r3, #86	; 0x56
 80021ba:	4602      	mov	r2, r0
 80021bc:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021be:	7bfa      	ldrb	r2, [r7, #15]
 80021c0:	6879      	ldr	r1, [r7, #4]
 80021c2:	4613      	mov	r3, r2
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	4413      	add	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	440b      	add	r3, r1
 80021cc:	3340      	adds	r3, #64	; 0x40
 80021ce:	2200      	movs	r2, #0
 80021d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021d2:	7bfa      	ldrb	r2, [r7, #15]
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	4613      	mov	r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	4413      	add	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	440b      	add	r3, r1
 80021e0:	3344      	adds	r3, #68	; 0x44
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021e6:	7bfa      	ldrb	r2, [r7, #15]
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	4413      	add	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	440b      	add	r3, r1
 80021f4:	3348      	adds	r3, #72	; 0x48
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021fa:	7bfa      	ldrb	r2, [r7, #15]
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	4613      	mov	r3, r2
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	4413      	add	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	440b      	add	r3, r1
 8002208:	334c      	adds	r3, #76	; 0x4c
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800220e:	7bfb      	ldrb	r3, [r7, #15]
 8002210:	3301      	adds	r3, #1
 8002212:	73fb      	strb	r3, [r7, #15]
 8002214:	7bfa      	ldrb	r2, [r7, #15]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	429a      	cmp	r2, r3
 800221c:	d3af      	bcc.n	800217e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800221e:	2300      	movs	r3, #0
 8002220:	73fb      	strb	r3, [r7, #15]
 8002222:	e044      	b.n	80022ae <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002224:	7bfa      	ldrb	r2, [r7, #15]
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	4613      	mov	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	4413      	add	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002236:	2200      	movs	r2, #0
 8002238:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800223a:	7bfa      	ldrb	r2, [r7, #15]
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	4613      	mov	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	4413      	add	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	440b      	add	r3, r1
 8002248:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800224c:	7bfa      	ldrb	r2, [r7, #15]
 800224e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002250:	7bfa      	ldrb	r2, [r7, #15]
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	4613      	mov	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	4413      	add	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	440b      	add	r3, r1
 800225e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002262:	2200      	movs	r2, #0
 8002264:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002266:	7bfa      	ldrb	r2, [r7, #15]
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	4613      	mov	r3, r2
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	4413      	add	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	440b      	add	r3, r1
 8002274:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800227c:	7bfa      	ldrb	r2, [r7, #15]
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	4413      	add	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002292:	7bfa      	ldrb	r2, [r7, #15]
 8002294:	6879      	ldr	r1, [r7, #4]
 8002296:	4613      	mov	r3, r2
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	4413      	add	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	440b      	add	r3, r1
 80022a0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	3301      	adds	r3, #1
 80022ac:	73fb      	strb	r3, [r7, #15]
 80022ae:	7bfa      	ldrb	r2, [r7, #15]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d3b5      	bcc.n	8002224 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	603b      	str	r3, [r7, #0]
 80022be:	687e      	ldr	r6, [r7, #4]
 80022c0:	466d      	mov	r5, sp
 80022c2:	f106 0410 	add.w	r4, r6, #16
 80022c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80022d6:	1d33      	adds	r3, r6, #4
 80022d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022da:	6838      	ldr	r0, [r7, #0]
 80022dc:	f008 f882 	bl	800a3e4 <USB_DevInit>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d005      	beq.n	80022f2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2202      	movs	r2, #2
 80022ea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e014      	b.n	800231c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002306:	2b01      	cmp	r3, #1
 8002308:	d102      	bne.n	8002310 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 ff38 	bl	8003180 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4618      	mov	r0, r3
 8002316:	f008 fb8b 	bl	800aa30 <USB_DevDisconnect>

  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002324 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002324:	b590      	push	{r4, r7, lr}
 8002326:	b08d      	sub	sp, #52	; 0x34
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002332:	6a3b      	ldr	r3, [r7, #32]
 8002334:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f008 fc2c 	bl	800ab98 <USB_GetMode>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	f040 84b7 	bne.w	8002cb6 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4618      	mov	r0, r3
 800234e:	f008 fb90 	bl	800aa72 <USB_ReadInterrupts>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 84ad 	beq.w	8002cb4 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	0a1b      	lsrs	r3, r3, #8
 8002364:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f008 fb7d 	bl	800aa72 <USB_ReadInterrupts>
 8002378:	4603      	mov	r3, r0
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b02      	cmp	r3, #2
 8002380:	d107      	bne.n	8002392 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	695a      	ldr	r2, [r3, #20]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f002 0202 	and.w	r2, r2, #2
 8002390:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f008 fb6b 	bl	800aa72 <USB_ReadInterrupts>
 800239c:	4603      	mov	r3, r0
 800239e:	f003 0310 	and.w	r3, r3, #16
 80023a2:	2b10      	cmp	r3, #16
 80023a4:	d161      	bne.n	800246a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	699a      	ldr	r2, [r3, #24]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 0210 	bic.w	r2, r2, #16
 80023b4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80023b6:	6a3b      	ldr	r3, [r7, #32]
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	f003 020f 	and.w	r2, r3, #15
 80023c2:	4613      	mov	r3, r2
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	4413      	add	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	4413      	add	r3, r2
 80023d2:	3304      	adds	r3, #4
 80023d4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	0c5b      	lsrs	r3, r3, #17
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d124      	bne.n	800242c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80023e8:	4013      	ands	r3, r2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d035      	beq.n	800245a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	091b      	lsrs	r3, r3, #4
 80023f6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80023f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	461a      	mov	r2, r3
 8002400:	6a38      	ldr	r0, [r7, #32]
 8002402:	f008 fabd 	bl	800a980 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	68da      	ldr	r2, [r3, #12]
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	091b      	lsrs	r3, r3, #4
 800240e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002412:	441a      	add	r2, r3
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	695a      	ldr	r2, [r3, #20]
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	091b      	lsrs	r3, r3, #4
 8002420:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002424:	441a      	add	r2, r3
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	615a      	str	r2, [r3, #20]
 800242a:	e016      	b.n	800245a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	0c5b      	lsrs	r3, r3, #17
 8002430:	f003 030f 	and.w	r3, r3, #15
 8002434:	2b06      	cmp	r3, #6
 8002436:	d110      	bne.n	800245a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800243e:	2208      	movs	r2, #8
 8002440:	4619      	mov	r1, r3
 8002442:	6a38      	ldr	r0, [r7, #32]
 8002444:	f008 fa9c 	bl	800a980 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	695a      	ldr	r2, [r3, #20]
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	091b      	lsrs	r3, r3, #4
 8002450:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002454:	441a      	add	r2, r3
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	699a      	ldr	r2, [r3, #24]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f042 0210 	orr.w	r2, r2, #16
 8002468:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f008 faff 	bl	800aa72 <USB_ReadInterrupts>
 8002474:	4603      	mov	r3, r0
 8002476:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800247a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800247e:	f040 80a7 	bne.w	80025d0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002482:	2300      	movs	r3, #0
 8002484:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f008 fb04 	bl	800aa98 <USB_ReadDevAllOutEpInterrupt>
 8002490:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002492:	e099      	b.n	80025c8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 808e 	beq.w	80025bc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	4611      	mov	r1, r2
 80024aa:	4618      	mov	r0, r3
 80024ac:	f008 fb28 	bl	800ab00 <USB_ReadDevOutEPInterrupt>
 80024b0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00c      	beq.n	80024d6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024be:	015a      	lsls	r2, r3, #5
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	4413      	add	r3, r2
 80024c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024c8:	461a      	mov	r2, r3
 80024ca:	2301      	movs	r3, #1
 80024cc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80024ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 fd27 	bl	8002f24 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	f003 0308 	and.w	r3, r3, #8
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00c      	beq.n	80024fa <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	015a      	lsls	r2, r3, #5
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	4413      	add	r3, r2
 80024e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024ec:	461a      	mov	r2, r3
 80024ee:	2308      	movs	r3, #8
 80024f0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80024f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 fdfd 	bl	80030f4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	f003 0310 	and.w	r3, r3, #16
 8002500:	2b00      	cmp	r3, #0
 8002502:	d008      	beq.n	8002516 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	015a      	lsls	r2, r3, #5
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	4413      	add	r3, r2
 800250c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002510:	461a      	mov	r2, r3
 8002512:	2310      	movs	r3, #16
 8002514:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d030      	beq.n	8002582 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002520:	6a3b      	ldr	r3, [r7, #32]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002528:	2b80      	cmp	r3, #128	; 0x80
 800252a:	d109      	bne.n	8002540 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	69fa      	ldr	r2, [r7, #28]
 8002536:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800253a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800253e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002542:	4613      	mov	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	4413      	add	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	4413      	add	r3, r2
 8002552:	3304      	adds	r3, #4
 8002554:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	78db      	ldrb	r3, [r3, #3]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d108      	bne.n	8002570 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	2200      	movs	r2, #0
 8002562:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	b2db      	uxtb	r3, r3
 8002568:	4619      	mov	r1, r3
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 fbf0 	bl	8002d50 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	015a      	lsls	r2, r3, #5
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	4413      	add	r3, r2
 8002578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800257c:	461a      	mov	r2, r3
 800257e:	2302      	movs	r3, #2
 8002580:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	f003 0320 	and.w	r3, r3, #32
 8002588:	2b00      	cmp	r3, #0
 800258a:	d008      	beq.n	800259e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	015a      	lsls	r2, r3, #5
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	4413      	add	r3, r2
 8002594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002598:	461a      	mov	r2, r3
 800259a:	2320      	movs	r3, #32
 800259c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d009      	beq.n	80025bc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	015a      	lsls	r2, r3, #5
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	4413      	add	r3, r2
 80025b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025b4:	461a      	mov	r2, r3
 80025b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025ba:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	3301      	adds	r3, #1
 80025c0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80025c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c4:	085b      	lsrs	r3, r3, #1
 80025c6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80025c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f47f af62 	bne.w	8002494 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f008 fa4c 	bl	800aa72 <USB_ReadInterrupts>
 80025da:	4603      	mov	r3, r0
 80025dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80025e4:	f040 80db 	bne.w	800279e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f008 fa6d 	bl	800aacc <USB_ReadDevAllInEpInterrupt>
 80025f2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80025f8:	e0cd      	b.n	8002796 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80025fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b00      	cmp	r3, #0
 8002602:	f000 80c2 	beq.w	800278a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800260c:	b2d2      	uxtb	r2, r2
 800260e:	4611      	mov	r1, r2
 8002610:	4618      	mov	r0, r3
 8002612:	f008 fa93 	bl	800ab3c <USB_ReadDevInEPInterrupt>
 8002616:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d057      	beq.n	80026d2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	f003 030f 	and.w	r3, r3, #15
 8002628:	2201      	movs	r2, #1
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002636:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	43db      	mvns	r3, r3
 800263c:	69f9      	ldr	r1, [r7, #28]
 800263e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002642:	4013      	ands	r3, r2
 8002644:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	015a      	lsls	r2, r3, #5
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	4413      	add	r3, r2
 800264e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002652:	461a      	mov	r2, r3
 8002654:	2301      	movs	r3, #1
 8002656:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d132      	bne.n	80026c6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002660:	6879      	ldr	r1, [r7, #4]
 8002662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002664:	4613      	mov	r3, r2
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	4413      	add	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	3348      	adds	r3, #72	; 0x48
 8002670:	6819      	ldr	r1, [r3, #0]
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002676:	4613      	mov	r3, r2
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	4413      	add	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4403      	add	r3, r0
 8002680:	3344      	adds	r3, #68	; 0x44
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4419      	add	r1, r3
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800268a:	4613      	mov	r3, r2
 800268c:	00db      	lsls	r3, r3, #3
 800268e:	4413      	add	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4403      	add	r3, r0
 8002694:	3348      	adds	r3, #72	; 0x48
 8002696:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	2b00      	cmp	r3, #0
 800269c:	d113      	bne.n	80026c6 <HAL_PCD_IRQHandler+0x3a2>
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a2:	4613      	mov	r3, r2
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	4413      	add	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	440b      	add	r3, r1
 80026ac:	334c      	adds	r3, #76	; 0x4c
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d108      	bne.n	80026c6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6818      	ldr	r0, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80026be:	461a      	mov	r2, r3
 80026c0:	2101      	movs	r1, #1
 80026c2:	f008 fa9b 	bl	800abfc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	4619      	mov	r1, r3
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 fb01 	bl	8002cd4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	f003 0308 	and.w	r3, r3, #8
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d008      	beq.n	80026ee <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	015a      	lsls	r2, r3, #5
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	4413      	add	r3, r2
 80026e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026e8:	461a      	mov	r2, r3
 80026ea:	2308      	movs	r3, #8
 80026ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	f003 0310 	and.w	r3, r3, #16
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d008      	beq.n	800270a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	015a      	lsls	r2, r3, #5
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	4413      	add	r3, r2
 8002700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002704:	461a      	mov	r2, r3
 8002706:	2310      	movs	r3, #16
 8002708:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002710:	2b00      	cmp	r3, #0
 8002712:	d008      	beq.n	8002726 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002716:	015a      	lsls	r2, r3, #5
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	4413      	add	r3, r2
 800271c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002720:	461a      	mov	r2, r3
 8002722:	2340      	movs	r3, #64	; 0x40
 8002724:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d023      	beq.n	8002778 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002730:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002732:	6a38      	ldr	r0, [r7, #32]
 8002734:	f007 ff9a 	bl	800a66c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800273a:	4613      	mov	r3, r2
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	4413      	add	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	3338      	adds	r3, #56	; 0x38
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	4413      	add	r3, r2
 8002748:	3304      	adds	r3, #4
 800274a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	78db      	ldrb	r3, [r3, #3]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d108      	bne.n	8002766 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	2200      	movs	r2, #0
 8002758:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	b2db      	uxtb	r3, r3
 800275e:	4619      	mov	r1, r3
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 fb01 	bl	8002d68 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	015a      	lsls	r2, r3, #5
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	4413      	add	r3, r2
 800276e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002772:	461a      	mov	r2, r3
 8002774:	2302      	movs	r3, #2
 8002776:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002782:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 fb40 	bl	8002e0a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	3301      	adds	r3, #1
 800278e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002792:	085b      	lsrs	r3, r3, #1
 8002794:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002798:	2b00      	cmp	r3, #0
 800279a:	f47f af2e 	bne.w	80025fa <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f008 f965 	bl	800aa72 <USB_ReadInterrupts>
 80027a8:	4603      	mov	r3, r0
 80027aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80027ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027b2:	d122      	bne.n	80027fa <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	69fa      	ldr	r2, [r7, #28]
 80027be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027c2:	f023 0301 	bic.w	r3, r3, #1
 80027c6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d108      	bne.n	80027e4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80027da:	2100      	movs	r1, #0
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 fcf3 	bl	80031c8 <HAL_PCDEx_LPM_Callback>
 80027e2:	e002      	b.n	80027ea <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 faa9 	bl	8002d3c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	695a      	ldr	r2, [r3, #20]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80027f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f008 f937 	bl	800aa72 <USB_ReadInterrupts>
 8002804:	4603      	mov	r3, r0
 8002806:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800280a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800280e:	d112      	bne.n	8002836 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b01      	cmp	r3, #1
 800281e:	d102      	bne.n	8002826 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 fa81 	bl	8002d28 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	695a      	ldr	r2, [r3, #20]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002834:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f008 f919 	bl	800aa72 <USB_ReadInterrupts>
 8002840:	4603      	mov	r3, r0
 8002842:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002846:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800284a:	d121      	bne.n	8002890 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	695a      	ldr	r2, [r3, #20]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800285a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002862:	2b00      	cmp	r3, #0
 8002864:	d111      	bne.n	800288a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002874:	089b      	lsrs	r3, r3, #2
 8002876:	f003 020f 	and.w	r2, r3, #15
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002880:	2101      	movs	r1, #1
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 fca0 	bl	80031c8 <HAL_PCDEx_LPM_Callback>
 8002888:	e002      	b.n	8002890 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 fa4c 	bl	8002d28 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4618      	mov	r0, r3
 8002896:	f008 f8ec 	bl	800aa72 <USB_ReadInterrupts>
 800289a:	4603      	mov	r3, r0
 800289c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028a4:	f040 80b7 	bne.w	8002a16 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	69fa      	ldr	r2, [r7, #28]
 80028b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028b6:	f023 0301 	bic.w	r3, r3, #1
 80028ba:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2110      	movs	r1, #16
 80028c2:	4618      	mov	r0, r3
 80028c4:	f007 fed2 	bl	800a66c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028c8:	2300      	movs	r3, #0
 80028ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028cc:	e046      	b.n	800295c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80028ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d0:	015a      	lsls	r2, r3, #5
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	4413      	add	r3, r2
 80028d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028da:	461a      	mov	r2, r3
 80028dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80028e0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80028e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e4:	015a      	lsls	r2, r3, #5
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	4413      	add	r3, r2
 80028ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028f2:	0151      	lsls	r1, r2, #5
 80028f4:	69fa      	ldr	r2, [r7, #28]
 80028f6:	440a      	add	r2, r1
 80028f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80028fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002900:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002904:	015a      	lsls	r2, r3, #5
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	4413      	add	r3, r2
 800290a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800290e:	461a      	mov	r2, r3
 8002910:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002914:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002918:	015a      	lsls	r2, r3, #5
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	4413      	add	r3, r2
 800291e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002926:	0151      	lsls	r1, r2, #5
 8002928:	69fa      	ldr	r2, [r7, #28]
 800292a:	440a      	add	r2, r1
 800292c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002930:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002934:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002938:	015a      	lsls	r2, r3, #5
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	4413      	add	r3, r2
 800293e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002946:	0151      	lsls	r1, r2, #5
 8002948:	69fa      	ldr	r2, [r7, #28]
 800294a:	440a      	add	r2, r1
 800294c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002950:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002954:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002958:	3301      	adds	r3, #1
 800295a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002962:	429a      	cmp	r2, r3
 8002964:	d3b3      	bcc.n	80028ce <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800296c:	69db      	ldr	r3, [r3, #28]
 800296e:	69fa      	ldr	r2, [r7, #28]
 8002970:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002974:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002978:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	2b00      	cmp	r3, #0
 8002980:	d016      	beq.n	80029b0 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002988:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800298c:	69fa      	ldr	r2, [r7, #28]
 800298e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002992:	f043 030b 	orr.w	r3, r3, #11
 8002996:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a2:	69fa      	ldr	r2, [r7, #28]
 80029a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029a8:	f043 030b 	orr.w	r3, r3, #11
 80029ac:	6453      	str	r3, [r2, #68]	; 0x44
 80029ae:	e015      	b.n	80029dc <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	69fa      	ldr	r2, [r7, #28]
 80029ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80029c2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80029c6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	69fa      	ldr	r2, [r7, #28]
 80029d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029d6:	f043 030b 	orr.w	r3, r3, #11
 80029da:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	69fa      	ldr	r2, [r7, #28]
 80029e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029ea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80029ee:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6818      	ldr	r0, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002a00:	461a      	mov	r2, r3
 8002a02:	f008 f8fb 	bl	800abfc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	695a      	ldr	r2, [r3, #20]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002a14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f008 f829 	bl	800aa72 <USB_ReadInterrupts>
 8002a20:	4603      	mov	r3, r0
 8002a22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a2a:	d124      	bne.n	8002a76 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f008 f8bf 	bl	800abb4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f007 fe93 	bl	800a766 <USB_GetDevSpeed>
 8002a40:	4603      	mov	r3, r0
 8002a42:	461a      	mov	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681c      	ldr	r4, [r3, #0]
 8002a4c:	f001 fec2 	bl	80047d4 <HAL_RCC_GetHCLKFreq>
 8002a50:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	461a      	mov	r2, r3
 8002a5a:	4620      	mov	r0, r4
 8002a5c:	f007 fbc2 	bl	800a1e4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 f957 	bl	8002d14 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	695a      	ldr	r2, [r3, #20]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002a74:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f007 fff9 	bl	800aa72 <USB_ReadInterrupts>
 8002a80:	4603      	mov	r3, r0
 8002a82:	f003 0308 	and.w	r3, r3, #8
 8002a86:	2b08      	cmp	r3, #8
 8002a88:	d10a      	bne.n	8002aa0 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f938 	bl	8002d00 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	695a      	ldr	r2, [r3, #20]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f002 0208 	and.w	r2, r2, #8
 8002a9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f007 ffe4 	bl	800aa72 <USB_ReadInterrupts>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ab0:	2b80      	cmp	r3, #128	; 0x80
 8002ab2:	d122      	bne.n	8002afa <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002ab4:	6a3b      	ldr	r3, [r7, #32]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002abc:	6a3b      	ldr	r3, [r7, #32]
 8002abe:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ac4:	e014      	b.n	8002af0 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002ac6:	6879      	ldr	r1, [r7, #4]
 8002ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aca:	4613      	mov	r3, r2
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	4413      	add	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	440b      	add	r3, r1
 8002ad4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d105      	bne.n	8002aea <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 f95f 	bl	8002da8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	3301      	adds	r3, #1
 8002aee:	627b      	str	r3, [r7, #36]	; 0x24
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d3e5      	bcc.n	8002ac6 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f007 ffb7 	bl	800aa72 <USB_ReadInterrupts>
 8002b04:	4603      	mov	r3, r0
 8002b06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b0e:	d13b      	bne.n	8002b88 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b10:	2301      	movs	r3, #1
 8002b12:	627b      	str	r3, [r7, #36]	; 0x24
 8002b14:	e02b      	b.n	8002b6e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	015a      	lsls	r2, r3, #5
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	4413      	add	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	440b      	add	r3, r1
 8002b34:	3340      	adds	r3, #64	; 0x40
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d115      	bne.n	8002b68 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002b3c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	da12      	bge.n	8002b68 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b46:	4613      	mov	r3, r2
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	4413      	add	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	440b      	add	r3, r1
 8002b50:	333f      	adds	r3, #63	; 0x3f
 8002b52:	2201      	movs	r2, #1
 8002b54:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	4619      	mov	r1, r3
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f920 	bl	8002da8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d3ce      	bcc.n	8002b16 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	695a      	ldr	r2, [r3, #20]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002b86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f007 ff70 	bl	800aa72 <USB_ReadInterrupts>
 8002b92:	4603      	mov	r3, r0
 8002b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b9c:	d155      	bne.n	8002c4a <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba2:	e045      	b.n	8002c30 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	015a      	lsls	r2, r3, #5
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	4413      	add	r3, r2
 8002bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bb8:	4613      	mov	r3, r2
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	4413      	add	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d12e      	bne.n	8002c2a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002bcc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	da2b      	bge.n	8002c2a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002bde:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d121      	bne.n	8002c2a <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bea:	4613      	mov	r3, r2
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	4413      	add	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	440b      	add	r3, r1
 8002bf4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002bfc:	6a3b      	ldr	r3, [r7, #32]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002c04:	6a3b      	ldr	r3, [r7, #32]
 8002c06:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d10a      	bne.n	8002c2a <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	69fa      	ldr	r2, [r7, #28]
 8002c1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c26:	6053      	str	r3, [r2, #4]
            break;
 8002c28:	e007      	b.n	8002c3a <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d3b4      	bcc.n	8002ba4 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	695a      	ldr	r2, [r3, #20]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002c48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f007 ff0f 	bl	800aa72 <USB_ReadInterrupts>
 8002c54:	4603      	mov	r3, r0
 8002c56:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c5e:	d10a      	bne.n	8002c76 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 f88d 	bl	8002d80 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	695a      	ldr	r2, [r3, #20]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002c74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f007 fef9 	bl	800aa72 <USB_ReadInterrupts>
 8002c80:	4603      	mov	r3, r0
 8002c82:	f003 0304 	and.w	r3, r3, #4
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d115      	bne.n	8002cb6 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d002      	beq.n	8002ca2 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 f879 	bl	8002d94 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	6859      	ldr	r1, [r3, #4]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	605a      	str	r2, [r3, #4]
 8002cb2:	e000      	b.n	8002cb6 <HAL_PCD_IRQHandler+0x992>
      return;
 8002cb4:	bf00      	nop
    }
  }
}
 8002cb6:	3734      	adds	r7, #52	; 0x34
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd90      	pop	{r4, r7, pc}

08002cbc <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	460b      	mov	r3, r1
 8002cde:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	460b      	mov	r3, r1
 8002d72:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	460b      	mov	r3, r1
 8002db2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002db4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	da0c      	bge.n	8002dd6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dbc:	78fb      	ldrb	r3, [r7, #3]
 8002dbe:	f003 020f 	and.w	r2, r3, #15
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	4413      	add	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	3338      	adds	r3, #56	; 0x38
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	4413      	add	r3, r2
 8002dd0:	3304      	adds	r3, #4
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	e00c      	b.n	8002df0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dd6:	78fb      	ldrb	r3, [r7, #3]
 8002dd8:	f003 020f 	and.w	r2, r3, #15
 8002ddc:	4613      	mov	r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	4413      	add	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	4413      	add	r3, r2
 8002dec:	3304      	adds	r3, #4
 8002dee:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68f9      	ldr	r1, [r7, #12]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f007 fcda 	bl	800a7b0 <USB_EPStopXfer>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002e00:	7afb      	ldrb	r3, [r7, #11]
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b08a      	sub	sp, #40	; 0x28
 8002e0e:	af02      	add	r7, sp, #8
 8002e10:	6078      	str	r0, [r7, #4]
 8002e12:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	4613      	mov	r3, r2
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	4413      	add	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	3338      	adds	r3, #56	; 0x38
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	3304      	adds	r3, #4
 8002e30:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	695a      	ldr	r2, [r3, #20]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d901      	bls.n	8002e42 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e06c      	b.n	8002f1c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	691a      	ldr	r2, [r3, #16]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	69fa      	ldr	r2, [r7, #28]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d902      	bls.n	8002e5e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	3303      	adds	r3, #3
 8002e62:	089b      	lsrs	r3, r3, #2
 8002e64:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e66:	e02b      	b.n	8002ec0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	691a      	ldr	r2, [r3, #16]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	69fa      	ldr	r2, [r7, #28]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d902      	bls.n	8002e84 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	3303      	adds	r3, #3
 8002e88:	089b      	lsrs	r3, r3, #2
 8002e8a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	68d9      	ldr	r1, [r3, #12]
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	6978      	ldr	r0, [r7, #20]
 8002ea4:	f007 fd2e 	bl	800a904 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	68da      	ldr	r2, [r3, #12]
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	441a      	add	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	695a      	ldr	r2, [r3, #20]
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	441a      	add	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	015a      	lsls	r2, r3, #5
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d809      	bhi.n	8002eea <PCD_WriteEmptyTxFifo+0xe0>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	695a      	ldr	r2, [r3, #20]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d203      	bcs.n	8002eea <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1be      	bne.n	8002e68 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	691a      	ldr	r2, [r3, #16]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d811      	bhi.n	8002f1a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	f003 030f 	and.w	r3, r3, #15
 8002efc:	2201      	movs	r2, #1
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	43db      	mvns	r3, r3
 8002f10:	6939      	ldr	r1, [r7, #16]
 8002f12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f16:	4013      	ands	r3, r2
 8002f18:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3720      	adds	r7, #32
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b088      	sub	sp, #32
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	333c      	adds	r3, #60	; 0x3c
 8002f3c:	3304      	adds	r3, #4
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	015a      	lsls	r2, r3, #5
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	4413      	add	r3, r2
 8002f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d17b      	bne.n	8003052 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	f003 0308 	and.w	r3, r3, #8
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d015      	beq.n	8002f90 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	4a61      	ldr	r2, [pc, #388]	; (80030ec <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	f240 80b9 	bls.w	80030e0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f000 80b3 	beq.w	80030e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	015a      	lsls	r2, r3, #5
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	4413      	add	r3, r2
 8002f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f86:	461a      	mov	r2, r3
 8002f88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f8c:	6093      	str	r3, [r2, #8]
 8002f8e:	e0a7      	b.n	80030e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	f003 0320 	and.w	r3, r3, #32
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d009      	beq.n	8002fae <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	015a      	lsls	r2, r3, #5
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	2320      	movs	r3, #32
 8002faa:	6093      	str	r3, [r2, #8]
 8002fac:	e098      	b.n	80030e0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f040 8093 	bne.w	80030e0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	4a4b      	ldr	r2, [pc, #300]	; (80030ec <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d90f      	bls.n	8002fe2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00a      	beq.n	8002fe2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	015a      	lsls	r2, r3, #5
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fd8:	461a      	mov	r2, r3
 8002fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fde:	6093      	str	r3, [r2, #8]
 8002fe0:	e07e      	b.n	80030e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	4413      	add	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	3304      	adds	r3, #4
 8002ff6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6a1a      	ldr	r2, [r3, #32]
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	0159      	lsls	r1, r3, #5
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	440b      	add	r3, r1
 8003004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800300e:	1ad2      	subs	r2, r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d114      	bne.n	8003044 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d109      	bne.n	8003036 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6818      	ldr	r0, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800302c:	461a      	mov	r2, r3
 800302e:	2101      	movs	r1, #1
 8003030:	f007 fde4 	bl	800abfc <USB_EP0_OutStart>
 8003034:	e006      	b.n	8003044 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	68da      	ldr	r2, [r3, #12]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	441a      	add	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	b2db      	uxtb	r3, r3
 8003048:	4619      	mov	r1, r3
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7ff fe36 	bl	8002cbc <HAL_PCD_DataOutStageCallback>
 8003050:	e046      	b.n	80030e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	4a26      	ldr	r2, [pc, #152]	; (80030f0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d124      	bne.n	80030a4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00a      	beq.n	800307a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	015a      	lsls	r2, r3, #5
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	4413      	add	r3, r2
 800306c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003070:	461a      	mov	r2, r3
 8003072:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003076:	6093      	str	r3, [r2, #8]
 8003078:	e032      	b.n	80030e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	f003 0320 	and.w	r3, r3, #32
 8003080:	2b00      	cmp	r3, #0
 8003082:	d008      	beq.n	8003096 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	015a      	lsls	r2, r3, #5
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	4413      	add	r3, r2
 800308c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003090:	461a      	mov	r2, r3
 8003092:	2320      	movs	r3, #32
 8003094:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	b2db      	uxtb	r3, r3
 800309a:	4619      	mov	r1, r3
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f7ff fe0d 	bl	8002cbc <HAL_PCD_DataOutStageCallback>
 80030a2:	e01d      	b.n	80030e0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d114      	bne.n	80030d4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	4613      	mov	r3, r2
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	4413      	add	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	440b      	add	r3, r1
 80030b8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d108      	bne.n	80030d4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6818      	ldr	r0, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80030cc:	461a      	mov	r2, r3
 80030ce:	2100      	movs	r1, #0
 80030d0:	f007 fd94 	bl	800abfc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	4619      	mov	r1, r3
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7ff fdee 	bl	8002cbc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3720      	adds	r7, #32
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	4f54300a 	.word	0x4f54300a
 80030f0:	4f54310a 	.word	0x4f54310a

080030f4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	333c      	adds	r3, #60	; 0x3c
 800310c:	3304      	adds	r3, #4
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	015a      	lsls	r2, r3, #5
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	4413      	add	r3, r2
 800311a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	4a15      	ldr	r2, [pc, #84]	; (800317c <PCD_EP_OutSetupPacket_int+0x88>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d90e      	bls.n	8003148 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003130:	2b00      	cmp	r3, #0
 8003132:	d009      	beq.n	8003148 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	015a      	lsls	r2, r3, #5
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	4413      	add	r3, r2
 800313c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003140:	461a      	mov	r2, r3
 8003142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003146:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f7ff fdcf 	bl	8002cec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	4a0a      	ldr	r2, [pc, #40]	; (800317c <PCD_EP_OutSetupPacket_int+0x88>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d90c      	bls.n	8003170 <PCD_EP_OutSetupPacket_int+0x7c>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d108      	bne.n	8003170 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6818      	ldr	r0, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003168:	461a      	mov	r2, r3
 800316a:	2101      	movs	r1, #1
 800316c:	f007 fd46 	bl	800abfc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3718      	adds	r7, #24
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	4f54300a 	.word	0x4f54300a

08003180 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b2:	f043 0303 	orr.w	r3, r3, #3
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3714      	adds	r7, #20
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	460b      	mov	r3, r1
 80031d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <HAL_PWR_ConfigPVD>:
  * @param  pConfigPVD : Pointer to a PWR_PVDTypeDef structure that contains the
  *                      PVD configuration information (PVDLevel and EventMode).
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *pConfigPVD)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Check the PVD parameter */
  if (pConfigPVD == NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_PWR_ConfigPVD+0x12>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e059      	b.n	80032a6 <HAL_PWR_ConfigPVD+0xc6>
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(pConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(pConfigPVD->Mode));

  /* Set PVDLS[2:0] bits according to PVDLevel value */
  MODIFY_REG(PWR->SVMCR, PWR_SVMCR_PVDLS, pConfigPVD->PVDLevel);
 80031f2:	4b30      	ldr	r3, [pc, #192]	; (80032b4 <HAL_PWR_ConfigPVD+0xd4>)
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	492d      	ldr	r1, [pc, #180]	; (80032b4 <HAL_PWR_ConfigPVD+0xd4>)
 8003200:	4313      	orrs	r3, r2
 8003202:	610b      	str	r3, [r1, #16]

  /* Disable PVD Event/Interrupt */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8003204:	4b2c      	ldr	r3, [pc, #176]	; (80032b8 <HAL_PWR_ConfigPVD+0xd8>)
 8003206:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800320a:	4a2b      	ldr	r2, [pc, #172]	; (80032b8 <HAL_PWR_ConfigPVD+0xd8>)
 800320c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003210:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8003214:	4b28      	ldr	r3, [pc, #160]	; (80032b8 <HAL_PWR_ConfigPVD+0xd8>)
 8003216:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800321a:	4a27      	ldr	r2, [pc, #156]	; (80032b8 <HAL_PWR_ConfigPVD+0xd8>)
 800321c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003220:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8003224:	4b24      	ldr	r3, [pc, #144]	; (80032b8 <HAL_PWR_ConfigPVD+0xd8>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a23      	ldr	r2, [pc, #140]	; (80032b8 <HAL_PWR_ConfigPVD+0xd8>)
 800322a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800322e:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8003230:	4b21      	ldr	r3, [pc, #132]	; (80032b8 <HAL_PWR_ConfigPVD+0xd8>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	4a20      	ldr	r2, [pc, #128]	; (80032b8 <HAL_PWR_ConfigPVD+0xd8>)
 8003236:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800323a:	6053      	str	r3, [r2, #4]

  /* Configure the PVD in interrupt mode */
  if ((pConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	2b00      	cmp	r3, #0
 8003246:	d007      	beq.n	8003258 <HAL_PWR_ConfigPVD+0x78>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8003248:	4b1b      	ldr	r3, [pc, #108]	; (80032b8 <HAL_PWR_ConfigPVD+0xd8>)
 800324a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800324e:	4a1a      	ldr	r2, [pc, #104]	; (80032b8 <HAL_PWR_ConfigPVD+0xd8>)
 8003250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003254:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }

  /* Configure the PVD in event mode */
  if ((pConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f003 0308 	and.w	r3, r3, #8
 8003260:	2b00      	cmp	r3, #0
 8003262:	d007      	beq.n	8003274 <HAL_PWR_ConfigPVD+0x94>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8003264:	4b14      	ldr	r3, [pc, #80]	; (80032b8 <HAL_PWR_ConfigPVD+0xd8>)
 8003266:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800326a:	4a13      	ldr	r2, [pc, #76]	; (80032b8 <HAL_PWR_ConfigPVD+0xd8>)
 800326c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003270:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  }

  /* Configure the PVD in rising edge */
  if ((pConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	2b00      	cmp	r3, #0
 800327e:	d005      	beq.n	800328c <HAL_PWR_ConfigPVD+0xac>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8003280:	4b0d      	ldr	r3, [pc, #52]	; (80032b8 <HAL_PWR_ConfigPVD+0xd8>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a0c      	ldr	r2, [pc, #48]	; (80032b8 <HAL_PWR_ConfigPVD+0xd8>)
 8003286:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800328a:	6013      	str	r3, [r2, #0]
  }

  /* Configure the PVD in falling edge */
  if ((pConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d005      	beq.n	80032a4 <HAL_PWR_ConfigPVD+0xc4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8003298:	4b07      	ldr	r3, [pc, #28]	; (80032b8 <HAL_PWR_ConfigPVD+0xd8>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	4a06      	ldr	r2, [pc, #24]	; (80032b8 <HAL_PWR_ConfigPVD+0xd8>)
 800329e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a2:	6053      	str	r3, [r2, #4]
  }

  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	46020800 	.word	0x46020800
 80032b8:	46022000 	.word	0x46022000

080032bc <HAL_PWR_EnablePVD>:
/**
  * @brief  Enable the programmable voltage detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_PVDE);
 80032c0:	4b05      	ldr	r3, [pc, #20]	; (80032d8 <HAL_PWR_EnablePVD+0x1c>)
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	4a04      	ldr	r2, [pc, #16]	; (80032d8 <HAL_PWR_EnablePVD+0x1c>)
 80032c6:	f043 0310 	orr.w	r3, r3, #16
 80032ca:	6113      	str	r3, [r2, #16]
}
 80032cc:	bf00      	nop
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	46020800 	.word	0x46020800

080032dc <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80032e4:	4b39      	ldr	r3, [pc, #228]	; (80033cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80032e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032ec:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d10b      	bne.n	800330e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032fc:	d905      	bls.n	800330a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80032fe:	4b33      	ldr	r3, [pc, #204]	; (80033cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	4a32      	ldr	r2, [pc, #200]	; (80033cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003308:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800330a:	2300      	movs	r3, #0
 800330c:	e057      	b.n	80033be <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003314:	d90a      	bls.n	800332c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003316:	4b2d      	ldr	r3, [pc, #180]	; (80033cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4313      	orrs	r3, r2
 8003322:	4a2a      	ldr	r2, [pc, #168]	; (80033cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003324:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003328:	60d3      	str	r3, [r2, #12]
 800332a:	e007      	b.n	800333c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800332c:	4b27      	ldr	r3, [pc, #156]	; (80033cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003334:	4925      	ldr	r1, [pc, #148]	; (80033cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4313      	orrs	r3, r2
 800333a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800333c:	4b24      	ldr	r3, [pc, #144]	; (80033d0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a24      	ldr	r2, [pc, #144]	; (80033d4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003342:	fba2 2303 	umull	r2, r3, r2, r3
 8003346:	099b      	lsrs	r3, r3, #6
 8003348:	2232      	movs	r2, #50	; 0x32
 800334a:	fb02 f303 	mul.w	r3, r2, r3
 800334e:	4a21      	ldr	r2, [pc, #132]	; (80033d4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003350:	fba2 2303 	umull	r2, r3, r2, r3
 8003354:	099b      	lsrs	r3, r3, #6
 8003356:	3301      	adds	r3, #1
 8003358:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800335a:	e002      	b.n	8003362 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	3b01      	subs	r3, #1
 8003360:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003362:	4b1a      	ldr	r3, [pc, #104]	; (80033cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d102      	bne.n	8003374 <HAL_PWREx_ControlVoltageScaling+0x98>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1f3      	bne.n	800335c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d01b      	beq.n	80033b2 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800337a:	4b15      	ldr	r3, [pc, #84]	; (80033d0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a15      	ldr	r2, [pc, #84]	; (80033d4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003380:	fba2 2303 	umull	r2, r3, r2, r3
 8003384:	099b      	lsrs	r3, r3, #6
 8003386:	2232      	movs	r2, #50	; 0x32
 8003388:	fb02 f303 	mul.w	r3, r2, r3
 800338c:	4a11      	ldr	r2, [pc, #68]	; (80033d4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800338e:	fba2 2303 	umull	r2, r3, r2, r3
 8003392:	099b      	lsrs	r3, r3, #6
 8003394:	3301      	adds	r3, #1
 8003396:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003398:	e002      	b.n	80033a0 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	3b01      	subs	r3, #1
 800339e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80033a0:	4b0a      	ldr	r3, [pc, #40]	; (80033cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80033a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d102      	bne.n	80033b2 <HAL_PWREx_ControlVoltageScaling+0xd6>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1f3      	bne.n	800339a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d101      	bne.n	80033bc <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e000      	b.n	80033be <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	46020800 	.word	0x46020800
 80033d0:	20000000 	.word	0x20000000
 80033d4:	10624dd3 	.word	0x10624dd3

080033d8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80033dc:	4b04      	ldr	r3, [pc, #16]	; (80033f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80033de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	46020800 	.word	0x46020800

080033f4 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 80033f8:	4b05      	ldr	r3, [pc, #20]	; (8003410 <HAL_PWREx_EnableVddUSB+0x1c>)
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	4a04      	ldr	r2, [pc, #16]	; (8003410 <HAL_PWREx_EnableVddUSB+0x1c>)
 80033fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003402:	6113      	str	r3, [r2, #16]
}
 8003404:	bf00      	nop
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	46020800 	.word	0x46020800

08003414 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8003418:	4b05      	ldr	r3, [pc, #20]	; (8003430 <HAL_PWREx_EnableVddIO2+0x1c>)
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	4a04      	ldr	r2, [pc, #16]	; (8003430 <HAL_PWREx_EnableVddIO2+0x1c>)
 800341e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003422:	6113      	str	r3, [r2, #16]
}
 8003424:	bf00      	nop
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	46020800 	.word	0x46020800

08003434 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b08e      	sub	sp, #56	; 0x38
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800343c:	2300      	movs	r3, #0
 800343e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d102      	bne.n	800344e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	f000 bec8 	b.w	80041de <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800344e:	4b99      	ldr	r3, [pc, #612]	; (80036b4 <HAL_RCC_OscConfig+0x280>)
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	f003 030c 	and.w	r3, r3, #12
 8003456:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003458:	4b96      	ldr	r3, [pc, #600]	; (80036b4 <HAL_RCC_OscConfig+0x280>)
 800345a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345c:	f003 0303 	and.w	r3, r3, #3
 8003460:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0310 	and.w	r3, r3, #16
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 816c 	beq.w	8003748 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003472:	2b00      	cmp	r3, #0
 8003474:	d007      	beq.n	8003486 <HAL_RCC_OscConfig+0x52>
 8003476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003478:	2b0c      	cmp	r3, #12
 800347a:	f040 80de 	bne.w	800363a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800347e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003480:	2b01      	cmp	r3, #1
 8003482:	f040 80da 	bne.w	800363a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d102      	bne.n	8003494 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	f000 bea5 	b.w	80041de <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003498:	4b86      	ldr	r3, [pc, #536]	; (80036b4 <HAL_RCC_OscConfig+0x280>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d004      	beq.n	80034ae <HAL_RCC_OscConfig+0x7a>
 80034a4:	4b83      	ldr	r3, [pc, #524]	; (80036b4 <HAL_RCC_OscConfig+0x280>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80034ac:	e005      	b.n	80034ba <HAL_RCC_OscConfig+0x86>
 80034ae:	4b81      	ldr	r3, [pc, #516]	; (80036b4 <HAL_RCC_OscConfig+0x280>)
 80034b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80034b4:	041b      	lsls	r3, r3, #16
 80034b6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d255      	bcs.n	800356a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80034be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10a      	bne.n	80034da <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	4618      	mov	r0, r3
 80034ca:	f001 fa11 	bl	80048f0 <RCC_SetFlashLatencyFromMSIRange>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d002      	beq.n	80034da <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	f000 be82 	b.w	80041de <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80034da:	4b76      	ldr	r3, [pc, #472]	; (80036b4 <HAL_RCC_OscConfig+0x280>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	4a75      	ldr	r2, [pc, #468]	; (80036b4 <HAL_RCC_OscConfig+0x280>)
 80034e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034e4:	6093      	str	r3, [r2, #8]
 80034e6:	4b73      	ldr	r3, [pc, #460]	; (80036b4 <HAL_RCC_OscConfig+0x280>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f2:	4970      	ldr	r1, [pc, #448]	; (80036b4 <HAL_RCC_OscConfig+0x280>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003500:	d309      	bcc.n	8003516 <HAL_RCC_OscConfig+0xe2>
 8003502:	4b6c      	ldr	r3, [pc, #432]	; (80036b4 <HAL_RCC_OscConfig+0x280>)
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	f023 021f 	bic.w	r2, r3, #31
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	4969      	ldr	r1, [pc, #420]	; (80036b4 <HAL_RCC_OscConfig+0x280>)
 8003510:	4313      	orrs	r3, r2
 8003512:	60cb      	str	r3, [r1, #12]
 8003514:	e07e      	b.n	8003614 <HAL_RCC_OscConfig+0x1e0>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	2b00      	cmp	r3, #0
 800351c:	da0a      	bge.n	8003534 <HAL_RCC_OscConfig+0x100>
 800351e:	4b65      	ldr	r3, [pc, #404]	; (80036b4 <HAL_RCC_OscConfig+0x280>)
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	015b      	lsls	r3, r3, #5
 800352c:	4961      	ldr	r1, [pc, #388]	; (80036b4 <HAL_RCC_OscConfig+0x280>)
 800352e:	4313      	orrs	r3, r2
 8003530:	60cb      	str	r3, [r1, #12]
 8003532:	e06f      	b.n	8003614 <HAL_RCC_OscConfig+0x1e0>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800353c:	d30a      	bcc.n	8003554 <HAL_RCC_OscConfig+0x120>
 800353e:	4b5d      	ldr	r3, [pc, #372]	; (80036b4 <HAL_RCC_OscConfig+0x280>)
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	029b      	lsls	r3, r3, #10
 800354c:	4959      	ldr	r1, [pc, #356]	; (80036b4 <HAL_RCC_OscConfig+0x280>)
 800354e:	4313      	orrs	r3, r2
 8003550:	60cb      	str	r3, [r1, #12]
 8003552:	e05f      	b.n	8003614 <HAL_RCC_OscConfig+0x1e0>
 8003554:	4b57      	ldr	r3, [pc, #348]	; (80036b4 <HAL_RCC_OscConfig+0x280>)
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	03db      	lsls	r3, r3, #15
 8003562:	4954      	ldr	r1, [pc, #336]	; (80036b4 <HAL_RCC_OscConfig+0x280>)
 8003564:	4313      	orrs	r3, r2
 8003566:	60cb      	str	r3, [r1, #12]
 8003568:	e054      	b.n	8003614 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800356a:	4b52      	ldr	r3, [pc, #328]	; (80036b4 <HAL_RCC_OscConfig+0x280>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	4a51      	ldr	r2, [pc, #324]	; (80036b4 <HAL_RCC_OscConfig+0x280>)
 8003570:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003574:	6093      	str	r3, [r2, #8]
 8003576:	4b4f      	ldr	r3, [pc, #316]	; (80036b4 <HAL_RCC_OscConfig+0x280>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003582:	494c      	ldr	r1, [pc, #304]	; (80036b4 <HAL_RCC_OscConfig+0x280>)
 8003584:	4313      	orrs	r3, r2
 8003586:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003590:	d309      	bcc.n	80035a6 <HAL_RCC_OscConfig+0x172>
 8003592:	4b48      	ldr	r3, [pc, #288]	; (80036b4 <HAL_RCC_OscConfig+0x280>)
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	f023 021f 	bic.w	r2, r3, #31
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	4945      	ldr	r1, [pc, #276]	; (80036b4 <HAL_RCC_OscConfig+0x280>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	60cb      	str	r3, [r1, #12]
 80035a4:	e028      	b.n	80035f8 <HAL_RCC_OscConfig+0x1c4>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	da0a      	bge.n	80035c4 <HAL_RCC_OscConfig+0x190>
 80035ae:	4b41      	ldr	r3, [pc, #260]	; (80036b4 <HAL_RCC_OscConfig+0x280>)
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	015b      	lsls	r3, r3, #5
 80035bc:	493d      	ldr	r1, [pc, #244]	; (80036b4 <HAL_RCC_OscConfig+0x280>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	60cb      	str	r3, [r1, #12]
 80035c2:	e019      	b.n	80035f8 <HAL_RCC_OscConfig+0x1c4>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035cc:	d30a      	bcc.n	80035e4 <HAL_RCC_OscConfig+0x1b0>
 80035ce:	4b39      	ldr	r3, [pc, #228]	; (80036b4 <HAL_RCC_OscConfig+0x280>)
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	029b      	lsls	r3, r3, #10
 80035dc:	4935      	ldr	r1, [pc, #212]	; (80036b4 <HAL_RCC_OscConfig+0x280>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	60cb      	str	r3, [r1, #12]
 80035e2:	e009      	b.n	80035f8 <HAL_RCC_OscConfig+0x1c4>
 80035e4:	4b33      	ldr	r3, [pc, #204]	; (80036b4 <HAL_RCC_OscConfig+0x280>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	03db      	lsls	r3, r3, #15
 80035f2:	4930      	ldr	r1, [pc, #192]	; (80036b4 <HAL_RCC_OscConfig+0x280>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80035f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10a      	bne.n	8003614 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003602:	4618      	mov	r0, r3
 8003604:	f001 f974 	bl	80048f0 <RCC_SetFlashLatencyFromMSIRange>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d002      	beq.n	8003614 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	f000 bde5 	b.w	80041de <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003614:	f001 f8de 	bl	80047d4 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003618:	4b27      	ldr	r3, [pc, #156]	; (80036b8 <HAL_RCC_OscConfig+0x284>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4618      	mov	r0, r3
 800361e:	f7fd fddd 	bl	80011dc <HAL_InitTick>
 8003622:	4603      	mov	r3, r0
 8003624:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8003628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 808a 	beq.w	8003746 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8003632:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003636:	f000 bdd2 	b.w	80041de <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d066      	beq.n	8003710 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8003642:	4b1c      	ldr	r3, [pc, #112]	; (80036b4 <HAL_RCC_OscConfig+0x280>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a1b      	ldr	r2, [pc, #108]	; (80036b4 <HAL_RCC_OscConfig+0x280>)
 8003648:	f043 0301 	orr.w	r3, r3, #1
 800364c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800364e:	f7fd ff51 	bl	80014f4 <HAL_GetTick>
 8003652:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003654:	e009      	b.n	800366a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003656:	f7fd ff4d 	bl	80014f4 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d902      	bls.n	800366a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	f000 bdba 	b.w	80041de <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800366a:	4b12      	ldr	r3, [pc, #72]	; (80036b4 <HAL_RCC_OscConfig+0x280>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0304 	and.w	r3, r3, #4
 8003672:	2b00      	cmp	r3, #0
 8003674:	d0ef      	beq.n	8003656 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003676:	4b0f      	ldr	r3, [pc, #60]	; (80036b4 <HAL_RCC_OscConfig+0x280>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	4a0e      	ldr	r2, [pc, #56]	; (80036b4 <HAL_RCC_OscConfig+0x280>)
 800367c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003680:	6093      	str	r3, [r2, #8]
 8003682:	4b0c      	ldr	r3, [pc, #48]	; (80036b4 <HAL_RCC_OscConfig+0x280>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368e:	4909      	ldr	r1, [pc, #36]	; (80036b4 <HAL_RCC_OscConfig+0x280>)
 8003690:	4313      	orrs	r3, r2
 8003692:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800369c:	d30e      	bcc.n	80036bc <HAL_RCC_OscConfig+0x288>
 800369e:	4b05      	ldr	r3, [pc, #20]	; (80036b4 <HAL_RCC_OscConfig+0x280>)
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	f023 021f 	bic.w	r2, r3, #31
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	4902      	ldr	r1, [pc, #8]	; (80036b4 <HAL_RCC_OscConfig+0x280>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	60cb      	str	r3, [r1, #12]
 80036b0:	e04a      	b.n	8003748 <HAL_RCC_OscConfig+0x314>
 80036b2:	bf00      	nop
 80036b4:	46020c00 	.word	0x46020c00
 80036b8:	20000004 	.word	0x20000004
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	da0a      	bge.n	80036da <HAL_RCC_OscConfig+0x2a6>
 80036c4:	4b98      	ldr	r3, [pc, #608]	; (8003928 <HAL_RCC_OscConfig+0x4f4>)
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	015b      	lsls	r3, r3, #5
 80036d2:	4995      	ldr	r1, [pc, #596]	; (8003928 <HAL_RCC_OscConfig+0x4f4>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	60cb      	str	r3, [r1, #12]
 80036d8:	e036      	b.n	8003748 <HAL_RCC_OscConfig+0x314>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036e2:	d30a      	bcc.n	80036fa <HAL_RCC_OscConfig+0x2c6>
 80036e4:	4b90      	ldr	r3, [pc, #576]	; (8003928 <HAL_RCC_OscConfig+0x4f4>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	029b      	lsls	r3, r3, #10
 80036f2:	498d      	ldr	r1, [pc, #564]	; (8003928 <HAL_RCC_OscConfig+0x4f4>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	60cb      	str	r3, [r1, #12]
 80036f8:	e026      	b.n	8003748 <HAL_RCC_OscConfig+0x314>
 80036fa:	4b8b      	ldr	r3, [pc, #556]	; (8003928 <HAL_RCC_OscConfig+0x4f4>)
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	03db      	lsls	r3, r3, #15
 8003708:	4987      	ldr	r1, [pc, #540]	; (8003928 <HAL_RCC_OscConfig+0x4f4>)
 800370a:	4313      	orrs	r3, r2
 800370c:	60cb      	str	r3, [r1, #12]
 800370e:	e01b      	b.n	8003748 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003710:	4b85      	ldr	r3, [pc, #532]	; (8003928 <HAL_RCC_OscConfig+0x4f4>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a84      	ldr	r2, [pc, #528]	; (8003928 <HAL_RCC_OscConfig+0x4f4>)
 8003716:	f023 0301 	bic.w	r3, r3, #1
 800371a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800371c:	f7fd feea 	bl	80014f4 <HAL_GetTick>
 8003720:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003722:	e009      	b.n	8003738 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003724:	f7fd fee6 	bl	80014f4 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d902      	bls.n	8003738 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	f000 bd53 	b.w	80041de <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003738:	4b7b      	ldr	r3, [pc, #492]	; (8003928 <HAL_RCC_OscConfig+0x4f4>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1ef      	bne.n	8003724 <HAL_RCC_OscConfig+0x2f0>
 8003744:	e000      	b.n	8003748 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003746:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 808b 	beq.w	800386c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003758:	2b08      	cmp	r3, #8
 800375a:	d005      	beq.n	8003768 <HAL_RCC_OscConfig+0x334>
 800375c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375e:	2b0c      	cmp	r3, #12
 8003760:	d109      	bne.n	8003776 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003764:	2b03      	cmp	r3, #3
 8003766:	d106      	bne.n	8003776 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d17d      	bne.n	800386c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	f000 bd34 	b.w	80041de <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800377e:	d106      	bne.n	800378e <HAL_RCC_OscConfig+0x35a>
 8003780:	4b69      	ldr	r3, [pc, #420]	; (8003928 <HAL_RCC_OscConfig+0x4f4>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a68      	ldr	r2, [pc, #416]	; (8003928 <HAL_RCC_OscConfig+0x4f4>)
 8003786:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800378a:	6013      	str	r3, [r2, #0]
 800378c:	e041      	b.n	8003812 <HAL_RCC_OscConfig+0x3de>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003796:	d112      	bne.n	80037be <HAL_RCC_OscConfig+0x38a>
 8003798:	4b63      	ldr	r3, [pc, #396]	; (8003928 <HAL_RCC_OscConfig+0x4f4>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a62      	ldr	r2, [pc, #392]	; (8003928 <HAL_RCC_OscConfig+0x4f4>)
 800379e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037a2:	6013      	str	r3, [r2, #0]
 80037a4:	4b60      	ldr	r3, [pc, #384]	; (8003928 <HAL_RCC_OscConfig+0x4f4>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a5f      	ldr	r2, [pc, #380]	; (8003928 <HAL_RCC_OscConfig+0x4f4>)
 80037aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80037ae:	6013      	str	r3, [r2, #0]
 80037b0:	4b5d      	ldr	r3, [pc, #372]	; (8003928 <HAL_RCC_OscConfig+0x4f4>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a5c      	ldr	r2, [pc, #368]	; (8003928 <HAL_RCC_OscConfig+0x4f4>)
 80037b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ba:	6013      	str	r3, [r2, #0]
 80037bc:	e029      	b.n	8003812 <HAL_RCC_OscConfig+0x3de>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80037c6:	d112      	bne.n	80037ee <HAL_RCC_OscConfig+0x3ba>
 80037c8:	4b57      	ldr	r3, [pc, #348]	; (8003928 <HAL_RCC_OscConfig+0x4f4>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a56      	ldr	r2, [pc, #344]	; (8003928 <HAL_RCC_OscConfig+0x4f4>)
 80037ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037d2:	6013      	str	r3, [r2, #0]
 80037d4:	4b54      	ldr	r3, [pc, #336]	; (8003928 <HAL_RCC_OscConfig+0x4f4>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a53      	ldr	r2, [pc, #332]	; (8003928 <HAL_RCC_OscConfig+0x4f4>)
 80037da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037de:	6013      	str	r3, [r2, #0]
 80037e0:	4b51      	ldr	r3, [pc, #324]	; (8003928 <HAL_RCC_OscConfig+0x4f4>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a50      	ldr	r2, [pc, #320]	; (8003928 <HAL_RCC_OscConfig+0x4f4>)
 80037e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ea:	6013      	str	r3, [r2, #0]
 80037ec:	e011      	b.n	8003812 <HAL_RCC_OscConfig+0x3de>
 80037ee:	4b4e      	ldr	r3, [pc, #312]	; (8003928 <HAL_RCC_OscConfig+0x4f4>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a4d      	ldr	r2, [pc, #308]	; (8003928 <HAL_RCC_OscConfig+0x4f4>)
 80037f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	4b4b      	ldr	r3, [pc, #300]	; (8003928 <HAL_RCC_OscConfig+0x4f4>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a4a      	ldr	r2, [pc, #296]	; (8003928 <HAL_RCC_OscConfig+0x4f4>)
 8003800:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003804:	6013      	str	r3, [r2, #0]
 8003806:	4b48      	ldr	r3, [pc, #288]	; (8003928 <HAL_RCC_OscConfig+0x4f4>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a47      	ldr	r2, [pc, #284]	; (8003928 <HAL_RCC_OscConfig+0x4f4>)
 800380c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003810:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d014      	beq.n	8003844 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800381a:	f7fd fe6b 	bl	80014f4 <HAL_GetTick>
 800381e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003820:	e009      	b.n	8003836 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003822:	f7fd fe67 	bl	80014f4 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b64      	cmp	r3, #100	; 0x64
 800382e:	d902      	bls.n	8003836 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	f000 bcd4 	b.w	80041de <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003836:	4b3c      	ldr	r3, [pc, #240]	; (8003928 <HAL_RCC_OscConfig+0x4f4>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d0ef      	beq.n	8003822 <HAL_RCC_OscConfig+0x3ee>
 8003842:	e013      	b.n	800386c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8003844:	f7fd fe56 	bl	80014f4 <HAL_GetTick>
 8003848:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800384a:	e009      	b.n	8003860 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800384c:	f7fd fe52 	bl	80014f4 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b64      	cmp	r3, #100	; 0x64
 8003858:	d902      	bls.n	8003860 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	f000 bcbf 	b.w	80041de <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003860:	4b31      	ldr	r3, [pc, #196]	; (8003928 <HAL_RCC_OscConfig+0x4f4>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1ef      	bne.n	800384c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d05f      	beq.n	8003938 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387a:	2b04      	cmp	r3, #4
 800387c:	d005      	beq.n	800388a <HAL_RCC_OscConfig+0x456>
 800387e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003880:	2b0c      	cmp	r3, #12
 8003882:	d114      	bne.n	80038ae <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003886:	2b02      	cmp	r3, #2
 8003888:	d111      	bne.n	80038ae <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d102      	bne.n	8003898 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	f000 bca3 	b.w	80041de <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003898:	4b23      	ldr	r3, [pc, #140]	; (8003928 <HAL_RCC_OscConfig+0x4f4>)
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	041b      	lsls	r3, r3, #16
 80038a6:	4920      	ldr	r1, [pc, #128]	; (8003928 <HAL_RCC_OscConfig+0x4f4>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80038ac:	e044      	b.n	8003938 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d024      	beq.n	8003900 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80038b6:	4b1c      	ldr	r3, [pc, #112]	; (8003928 <HAL_RCC_OscConfig+0x4f4>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a1b      	ldr	r2, [pc, #108]	; (8003928 <HAL_RCC_OscConfig+0x4f4>)
 80038bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038c0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80038c2:	f7fd fe17 	bl	80014f4 <HAL_GetTick>
 80038c6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038c8:	e009      	b.n	80038de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038ca:	f7fd fe13 	bl	80014f4 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d902      	bls.n	80038de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	f000 bc80 	b.w	80041de <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038de:	4b12      	ldr	r3, [pc, #72]	; (8003928 <HAL_RCC_OscConfig+0x4f4>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d0ef      	beq.n	80038ca <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80038ea:	4b0f      	ldr	r3, [pc, #60]	; (8003928 <HAL_RCC_OscConfig+0x4f4>)
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	041b      	lsls	r3, r3, #16
 80038f8:	490b      	ldr	r1, [pc, #44]	; (8003928 <HAL_RCC_OscConfig+0x4f4>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	610b      	str	r3, [r1, #16]
 80038fe:	e01b      	b.n	8003938 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003900:	4b09      	ldr	r3, [pc, #36]	; (8003928 <HAL_RCC_OscConfig+0x4f4>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a08      	ldr	r2, [pc, #32]	; (8003928 <HAL_RCC_OscConfig+0x4f4>)
 8003906:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800390a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800390c:	f7fd fdf2 	bl	80014f4 <HAL_GetTick>
 8003910:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003912:	e00b      	b.n	800392c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003914:	f7fd fdee 	bl	80014f4 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d904      	bls.n	800392c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	f000 bc5b 	b.w	80041de <HAL_RCC_OscConfig+0xdaa>
 8003928:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800392c:	4baf      	ldr	r3, [pc, #700]	; (8003bec <HAL_RCC_OscConfig+0x7b8>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1ed      	bne.n	8003914 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0308 	and.w	r3, r3, #8
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 80c8 	beq.w	8003ad6 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8003946:	2300      	movs	r3, #0
 8003948:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800394c:	4ba7      	ldr	r3, [pc, #668]	; (8003bec <HAL_RCC_OscConfig+0x7b8>)
 800394e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003952:	f003 0304 	and.w	r3, r3, #4
 8003956:	2b00      	cmp	r3, #0
 8003958:	d111      	bne.n	800397e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800395a:	4ba4      	ldr	r3, [pc, #656]	; (8003bec <HAL_RCC_OscConfig+0x7b8>)
 800395c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003960:	4aa2      	ldr	r2, [pc, #648]	; (8003bec <HAL_RCC_OscConfig+0x7b8>)
 8003962:	f043 0304 	orr.w	r3, r3, #4
 8003966:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800396a:	4ba0      	ldr	r3, [pc, #640]	; (8003bec <HAL_RCC_OscConfig+0x7b8>)
 800396c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003970:	f003 0304 	and.w	r3, r3, #4
 8003974:	617b      	str	r3, [r7, #20]
 8003976:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8003978:	2301      	movs	r3, #1
 800397a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800397e:	4b9c      	ldr	r3, [pc, #624]	; (8003bf0 <HAL_RCC_OscConfig+0x7bc>)
 8003980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d119      	bne.n	80039be <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800398a:	4b99      	ldr	r3, [pc, #612]	; (8003bf0 <HAL_RCC_OscConfig+0x7bc>)
 800398c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398e:	4a98      	ldr	r2, [pc, #608]	; (8003bf0 <HAL_RCC_OscConfig+0x7bc>)
 8003990:	f043 0301 	orr.w	r3, r3, #1
 8003994:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003996:	f7fd fdad 	bl	80014f4 <HAL_GetTick>
 800399a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800399c:	e009      	b.n	80039b2 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800399e:	f7fd fda9 	bl	80014f4 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d902      	bls.n	80039b2 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	f000 bc16 	b.w	80041de <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80039b2:	4b8f      	ldr	r3, [pc, #572]	; (8003bf0 <HAL_RCC_OscConfig+0x7bc>)
 80039b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d0ef      	beq.n	800399e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d05f      	beq.n	8003a86 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80039c6:	4b89      	ldr	r3, [pc, #548]	; (8003bec <HAL_RCC_OscConfig+0x7b8>)
 80039c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80039cc:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	699a      	ldr	r2, [r3, #24]
 80039d2:	6a3b      	ldr	r3, [r7, #32]
 80039d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d8:	429a      	cmp	r2, r3
 80039da:	d037      	beq.n	8003a4c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80039dc:	6a3b      	ldr	r3, [r7, #32]
 80039de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d006      	beq.n	80039f4 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80039e6:	6a3b      	ldr	r3, [r7, #32]
 80039e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e3f4      	b.n	80041de <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80039f4:	6a3b      	ldr	r3, [r7, #32]
 80039f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d01b      	beq.n	8003a36 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80039fe:	4b7b      	ldr	r3, [pc, #492]	; (8003bec <HAL_RCC_OscConfig+0x7b8>)
 8003a00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a04:	4a79      	ldr	r2, [pc, #484]	; (8003bec <HAL_RCC_OscConfig+0x7b8>)
 8003a06:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8003a0a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8003a0e:	f7fd fd71 	bl	80014f4 <HAL_GetTick>
 8003a12:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003a14:	e008      	b.n	8003a28 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a16:	f7fd fd6d 	bl	80014f4 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b05      	cmp	r3, #5
 8003a22:	d901      	bls.n	8003a28 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e3da      	b.n	80041de <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003a28:	4b70      	ldr	r3, [pc, #448]	; (8003bec <HAL_RCC_OscConfig+0x7b8>)
 8003a2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1ef      	bne.n	8003a16 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8003a36:	4b6d      	ldr	r3, [pc, #436]	; (8003bec <HAL_RCC_OscConfig+0x7b8>)
 8003a38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a3c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	4969      	ldr	r1, [pc, #420]	; (8003bec <HAL_RCC_OscConfig+0x7b8>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8003a4c:	4b67      	ldr	r3, [pc, #412]	; (8003bec <HAL_RCC_OscConfig+0x7b8>)
 8003a4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a52:	4a66      	ldr	r2, [pc, #408]	; (8003bec <HAL_RCC_OscConfig+0x7b8>)
 8003a54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a58:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8003a5c:	f7fd fd4a 	bl	80014f4 <HAL_GetTick>
 8003a60:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a64:	f7fd fd46 	bl	80014f4 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b05      	cmp	r3, #5
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e3b3      	b.n	80041de <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003a76:	4b5d      	ldr	r3, [pc, #372]	; (8003bec <HAL_RCC_OscConfig+0x7b8>)
 8003a78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0ef      	beq.n	8003a64 <HAL_RCC_OscConfig+0x630>
 8003a84:	e01b      	b.n	8003abe <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8003a86:	4b59      	ldr	r3, [pc, #356]	; (8003bec <HAL_RCC_OscConfig+0x7b8>)
 8003a88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a8c:	4a57      	ldr	r2, [pc, #348]	; (8003bec <HAL_RCC_OscConfig+0x7b8>)
 8003a8e:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8003a92:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8003a96:	f7fd fd2d 	bl	80014f4 <HAL_GetTick>
 8003a9a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003a9c:	e008      	b.n	8003ab0 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a9e:	f7fd fd29 	bl	80014f4 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	2b05      	cmp	r3, #5
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e396      	b.n	80041de <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003ab0:	4b4e      	ldr	r3, [pc, #312]	; (8003bec <HAL_RCC_OscConfig+0x7b8>)
 8003ab2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ab6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1ef      	bne.n	8003a9e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003abe:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d107      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ac6:	4b49      	ldr	r3, [pc, #292]	; (8003bec <HAL_RCC_OscConfig+0x7b8>)
 8003ac8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003acc:	4a47      	ldr	r2, [pc, #284]	; (8003bec <HAL_RCC_OscConfig+0x7b8>)
 8003ace:	f023 0304 	bic.w	r3, r3, #4
 8003ad2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0304 	and.w	r3, r3, #4
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f000 8111 	beq.w	8003d06 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aea:	4b40      	ldr	r3, [pc, #256]	; (8003bec <HAL_RCC_OscConfig+0x7b8>)
 8003aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d111      	bne.n	8003b1c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003af8:	4b3c      	ldr	r3, [pc, #240]	; (8003bec <HAL_RCC_OscConfig+0x7b8>)
 8003afa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003afe:	4a3b      	ldr	r2, [pc, #236]	; (8003bec <HAL_RCC_OscConfig+0x7b8>)
 8003b00:	f043 0304 	orr.w	r3, r3, #4
 8003b04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003b08:	4b38      	ldr	r3, [pc, #224]	; (8003bec <HAL_RCC_OscConfig+0x7b8>)
 8003b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b0e:	f003 0304 	and.w	r3, r3, #4
 8003b12:	613b      	str	r3, [r7, #16]
 8003b14:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8003b16:	2301      	movs	r3, #1
 8003b18:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003b1c:	4b34      	ldr	r3, [pc, #208]	; (8003bf0 <HAL_RCC_OscConfig+0x7bc>)
 8003b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d118      	bne.n	8003b5a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003b28:	4b31      	ldr	r3, [pc, #196]	; (8003bf0 <HAL_RCC_OscConfig+0x7bc>)
 8003b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2c:	4a30      	ldr	r2, [pc, #192]	; (8003bf0 <HAL_RCC_OscConfig+0x7bc>)
 8003b2e:	f043 0301 	orr.w	r3, r3, #1
 8003b32:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b34:	f7fd fcde 	bl	80014f4 <HAL_GetTick>
 8003b38:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003b3a:	e008      	b.n	8003b4e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b3c:	f7fd fcda 	bl	80014f4 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e347      	b.n	80041de <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003b4e:	4b28      	ldr	r3, [pc, #160]	; (8003bf0 <HAL_RCC_OscConfig+0x7bc>)
 8003b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d0f0      	beq.n	8003b3c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d01f      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 0304 	and.w	r3, r3, #4
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d010      	beq.n	8003b94 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003b72:	4b1e      	ldr	r3, [pc, #120]	; (8003bec <HAL_RCC_OscConfig+0x7b8>)
 8003b74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b78:	4a1c      	ldr	r2, [pc, #112]	; (8003bec <HAL_RCC_OscConfig+0x7b8>)
 8003b7a:	f043 0304 	orr.w	r3, r3, #4
 8003b7e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003b82:	4b1a      	ldr	r3, [pc, #104]	; (8003bec <HAL_RCC_OscConfig+0x7b8>)
 8003b84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b88:	4a18      	ldr	r2, [pc, #96]	; (8003bec <HAL_RCC_OscConfig+0x7b8>)
 8003b8a:	f043 0301 	orr.w	r3, r3, #1
 8003b8e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003b92:	e018      	b.n	8003bc6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003b94:	4b15      	ldr	r3, [pc, #84]	; (8003bec <HAL_RCC_OscConfig+0x7b8>)
 8003b96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b9a:	4a14      	ldr	r2, [pc, #80]	; (8003bec <HAL_RCC_OscConfig+0x7b8>)
 8003b9c:	f043 0301 	orr.w	r3, r3, #1
 8003ba0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003ba4:	e00f      	b.n	8003bc6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003ba6:	4b11      	ldr	r3, [pc, #68]	; (8003bec <HAL_RCC_OscConfig+0x7b8>)
 8003ba8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003bac:	4a0f      	ldr	r2, [pc, #60]	; (8003bec <HAL_RCC_OscConfig+0x7b8>)
 8003bae:	f023 0301 	bic.w	r3, r3, #1
 8003bb2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003bb6:	4b0d      	ldr	r3, [pc, #52]	; (8003bec <HAL_RCC_OscConfig+0x7b8>)
 8003bb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003bbc:	4a0b      	ldr	r2, [pc, #44]	; (8003bec <HAL_RCC_OscConfig+0x7b8>)
 8003bbe:	f023 0304 	bic.w	r3, r3, #4
 8003bc2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d057      	beq.n	8003c7e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8003bce:	f7fd fc91 	bl	80014f4 <HAL_GetTick>
 8003bd2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bd4:	e00e      	b.n	8003bf4 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bd6:	f7fd fc8d 	bl	80014f4 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d905      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e2f8      	b.n	80041de <HAL_RCC_OscConfig+0xdaa>
 8003bec:	46020c00 	.word	0x46020c00
 8003bf0:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bf4:	4b9c      	ldr	r3, [pc, #624]	; (8003e68 <HAL_RCC_OscConfig+0xa34>)
 8003bf6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d0e9      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d01b      	beq.n	8003c46 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003c0e:	4b96      	ldr	r3, [pc, #600]	; (8003e68 <HAL_RCC_OscConfig+0xa34>)
 8003c10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c14:	4a94      	ldr	r2, [pc, #592]	; (8003e68 <HAL_RCC_OscConfig+0xa34>)
 8003c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c1a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003c1e:	e00a      	b.n	8003c36 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c20:	f7fd fc68 	bl	80014f4 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e2d3      	b.n	80041de <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003c36:	4b8c      	ldr	r3, [pc, #560]	; (8003e68 <HAL_RCC_OscConfig+0xa34>)
 8003c38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d0ed      	beq.n	8003c20 <HAL_RCC_OscConfig+0x7ec>
 8003c44:	e053      	b.n	8003cee <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003c46:	4b88      	ldr	r3, [pc, #544]	; (8003e68 <HAL_RCC_OscConfig+0xa34>)
 8003c48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c4c:	4a86      	ldr	r2, [pc, #536]	; (8003e68 <HAL_RCC_OscConfig+0xa34>)
 8003c4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c52:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003c56:	e00a      	b.n	8003c6e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c58:	f7fd fc4c 	bl	80014f4 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e2b7      	b.n	80041de <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003c6e:	4b7e      	ldr	r3, [pc, #504]	; (8003e68 <HAL_RCC_OscConfig+0xa34>)
 8003c70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1ed      	bne.n	8003c58 <HAL_RCC_OscConfig+0x824>
 8003c7c:	e037      	b.n	8003cee <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8003c7e:	f7fd fc39 	bl	80014f4 <HAL_GetTick>
 8003c82:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c84:	e00a      	b.n	8003c9c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c86:	f7fd fc35 	bl	80014f4 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e2a0      	b.n	80041de <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c9c:	4b72      	ldr	r3, [pc, #456]	; (8003e68 <HAL_RCC_OscConfig+0xa34>)
 8003c9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1ed      	bne.n	8003c86 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003caa:	4b6f      	ldr	r3, [pc, #444]	; (8003e68 <HAL_RCC_OscConfig+0xa34>)
 8003cac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d01a      	beq.n	8003cee <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003cb8:	4b6b      	ldr	r3, [pc, #428]	; (8003e68 <HAL_RCC_OscConfig+0xa34>)
 8003cba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003cbe:	4a6a      	ldr	r2, [pc, #424]	; (8003e68 <HAL_RCC_OscConfig+0xa34>)
 8003cc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cc4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003cc8:	e00a      	b.n	8003ce0 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cca:	f7fd fc13 	bl	80014f4 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d901      	bls.n	8003ce0 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e27e      	b.n	80041de <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003ce0:	4b61      	ldr	r3, [pc, #388]	; (8003e68 <HAL_RCC_OscConfig+0xa34>)
 8003ce2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ce6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1ed      	bne.n	8003cca <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003cee:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d107      	bne.n	8003d06 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cf6:	4b5c      	ldr	r3, [pc, #368]	; (8003e68 <HAL_RCC_OscConfig+0xa34>)
 8003cf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cfc:	4a5a      	ldr	r2, [pc, #360]	; (8003e68 <HAL_RCC_OscConfig+0xa34>)
 8003cfe:	f023 0304 	bic.w	r3, r3, #4
 8003d02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0320 	and.w	r3, r3, #32
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d036      	beq.n	8003d80 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d019      	beq.n	8003d4e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8003d1a:	4b53      	ldr	r3, [pc, #332]	; (8003e68 <HAL_RCC_OscConfig+0xa34>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a52      	ldr	r2, [pc, #328]	; (8003e68 <HAL_RCC_OscConfig+0xa34>)
 8003d20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d24:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003d26:	f7fd fbe5 	bl	80014f4 <HAL_GetTick>
 8003d2a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003d2c:	e008      	b.n	8003d40 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d2e:	f7fd fbe1 	bl	80014f4 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d901      	bls.n	8003d40 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e24e      	b.n	80041de <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003d40:	4b49      	ldr	r3, [pc, #292]	; (8003e68 <HAL_RCC_OscConfig+0xa34>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d0f0      	beq.n	8003d2e <HAL_RCC_OscConfig+0x8fa>
 8003d4c:	e018      	b.n	8003d80 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8003d4e:	4b46      	ldr	r3, [pc, #280]	; (8003e68 <HAL_RCC_OscConfig+0xa34>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a45      	ldr	r2, [pc, #276]	; (8003e68 <HAL_RCC_OscConfig+0xa34>)
 8003d54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d58:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003d5a:	f7fd fbcb 	bl	80014f4 <HAL_GetTick>
 8003d5e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003d60:	e008      	b.n	8003d74 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d62:	f7fd fbc7 	bl	80014f4 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e234      	b.n	80041de <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003d74:	4b3c      	ldr	r3, [pc, #240]	; (8003e68 <HAL_RCC_OscConfig+0xa34>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1f0      	bne.n	8003d62 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d036      	beq.n	8003dfa <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d019      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8003d94:	4b34      	ldr	r3, [pc, #208]	; (8003e68 <HAL_RCC_OscConfig+0xa34>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a33      	ldr	r2, [pc, #204]	; (8003e68 <HAL_RCC_OscConfig+0xa34>)
 8003d9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d9e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003da0:	f7fd fba8 	bl	80014f4 <HAL_GetTick>
 8003da4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003da6:	e008      	b.n	8003dba <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003da8:	f7fd fba4 	bl	80014f4 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e211      	b.n	80041de <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003dba:	4b2b      	ldr	r3, [pc, #172]	; (8003e68 <HAL_RCC_OscConfig+0xa34>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d0f0      	beq.n	8003da8 <HAL_RCC_OscConfig+0x974>
 8003dc6:	e018      	b.n	8003dfa <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8003dc8:	4b27      	ldr	r3, [pc, #156]	; (8003e68 <HAL_RCC_OscConfig+0xa34>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a26      	ldr	r2, [pc, #152]	; (8003e68 <HAL_RCC_OscConfig+0xa34>)
 8003dce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dd2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003dd4:	f7fd fb8e 	bl	80014f4 <HAL_GetTick>
 8003dd8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003ddc:	f7fd fb8a 	bl	80014f4 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e1f7      	b.n	80041de <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003dee:	4b1e      	ldr	r3, [pc, #120]	; (8003e68 <HAL_RCC_OscConfig+0xa34>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1f0      	bne.n	8003ddc <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d07f      	beq.n	8003f06 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d062      	beq.n	8003ed4 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8003e0e:	4b16      	ldr	r3, [pc, #88]	; (8003e68 <HAL_RCC_OscConfig+0xa34>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	4a15      	ldr	r2, [pc, #84]	; (8003e68 <HAL_RCC_OscConfig+0xa34>)
 8003e14:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e18:	6093      	str	r3, [r2, #8]
 8003e1a:	4b13      	ldr	r3, [pc, #76]	; (8003e68 <HAL_RCC_OscConfig+0xa34>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e26:	4910      	ldr	r1, [pc, #64]	; (8003e68 <HAL_RCC_OscConfig+0xa34>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e30:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003e34:	d309      	bcc.n	8003e4a <HAL_RCC_OscConfig+0xa16>
 8003e36:	4b0c      	ldr	r3, [pc, #48]	; (8003e68 <HAL_RCC_OscConfig+0xa34>)
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	f023 021f 	bic.w	r2, r3, #31
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	4909      	ldr	r1, [pc, #36]	; (8003e68 <HAL_RCC_OscConfig+0xa34>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	60cb      	str	r3, [r1, #12]
 8003e48:	e02a      	b.n	8003ea0 <HAL_RCC_OscConfig+0xa6c>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	da0c      	bge.n	8003e6c <HAL_RCC_OscConfig+0xa38>
 8003e52:	4b05      	ldr	r3, [pc, #20]	; (8003e68 <HAL_RCC_OscConfig+0xa34>)
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	015b      	lsls	r3, r3, #5
 8003e60:	4901      	ldr	r1, [pc, #4]	; (8003e68 <HAL_RCC_OscConfig+0xa34>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	60cb      	str	r3, [r1, #12]
 8003e66:	e01b      	b.n	8003ea0 <HAL_RCC_OscConfig+0xa6c>
 8003e68:	46020c00 	.word	0x46020c00
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e74:	d30a      	bcc.n	8003e8c <HAL_RCC_OscConfig+0xa58>
 8003e76:	4ba1      	ldr	r3, [pc, #644]	; (80040fc <HAL_RCC_OscConfig+0xcc8>)
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	029b      	lsls	r3, r3, #10
 8003e84:	499d      	ldr	r1, [pc, #628]	; (80040fc <HAL_RCC_OscConfig+0xcc8>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	60cb      	str	r3, [r1, #12]
 8003e8a:	e009      	b.n	8003ea0 <HAL_RCC_OscConfig+0xa6c>
 8003e8c:	4b9b      	ldr	r3, [pc, #620]	; (80040fc <HAL_RCC_OscConfig+0xcc8>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	03db      	lsls	r3, r3, #15
 8003e9a:	4998      	ldr	r1, [pc, #608]	; (80040fc <HAL_RCC_OscConfig+0xcc8>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8003ea0:	4b96      	ldr	r3, [pc, #600]	; (80040fc <HAL_RCC_OscConfig+0xcc8>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a95      	ldr	r2, [pc, #596]	; (80040fc <HAL_RCC_OscConfig+0xcc8>)
 8003ea6:	f043 0310 	orr.w	r3, r3, #16
 8003eaa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003eac:	f7fd fb22 	bl	80014f4 <HAL_GetTick>
 8003eb0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003eb4:	f7fd fb1e 	bl	80014f4 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e18b      	b.n	80041de <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003ec6:	4b8d      	ldr	r3, [pc, #564]	; (80040fc <HAL_RCC_OscConfig+0xcc8>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0320 	and.w	r3, r3, #32
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d0f0      	beq.n	8003eb4 <HAL_RCC_OscConfig+0xa80>
 8003ed2:	e018      	b.n	8003f06 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8003ed4:	4b89      	ldr	r3, [pc, #548]	; (80040fc <HAL_RCC_OscConfig+0xcc8>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a88      	ldr	r2, [pc, #544]	; (80040fc <HAL_RCC_OscConfig+0xcc8>)
 8003eda:	f023 0310 	bic.w	r3, r3, #16
 8003ede:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003ee0:	f7fd fb08 	bl	80014f4 <HAL_GetTick>
 8003ee4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003ee8:	f7fd fb04 	bl	80014f4 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e171      	b.n	80041de <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003efa:	4b80      	ldr	r3, [pc, #512]	; (80040fc <HAL_RCC_OscConfig+0xcc8>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0320 	and.w	r3, r3, #32
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1f0      	bne.n	8003ee8 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f000 8166 	beq.w	80041dc <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8003f10:	2300      	movs	r3, #0
 8003f12:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f16:	4b79      	ldr	r3, [pc, #484]	; (80040fc <HAL_RCC_OscConfig+0xcc8>)
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	f003 030c 	and.w	r3, r3, #12
 8003f1e:	2b0c      	cmp	r3, #12
 8003f20:	f000 80f2 	beq.w	8004108 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	f040 80c5 	bne.w	80040b8 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003f2e:	4b73      	ldr	r3, [pc, #460]	; (80040fc <HAL_RCC_OscConfig+0xcc8>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a72      	ldr	r2, [pc, #456]	; (80040fc <HAL_RCC_OscConfig+0xcc8>)
 8003f34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f38:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003f3a:	f7fd fadb 	bl	80014f4 <HAL_GetTick>
 8003f3e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003f40:	e008      	b.n	8003f54 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f42:	f7fd fad7 	bl	80014f4 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d901      	bls.n	8003f54 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e144      	b.n	80041de <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003f54:	4b69      	ldr	r3, [pc, #420]	; (80040fc <HAL_RCC_OscConfig+0xcc8>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1f0      	bne.n	8003f42 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f60:	4b66      	ldr	r3, [pc, #408]	; (80040fc <HAL_RCC_OscConfig+0xcc8>)
 8003f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f66:	f003 0304 	and.w	r3, r3, #4
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d111      	bne.n	8003f92 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8003f6e:	4b63      	ldr	r3, [pc, #396]	; (80040fc <HAL_RCC_OscConfig+0xcc8>)
 8003f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f74:	4a61      	ldr	r2, [pc, #388]	; (80040fc <HAL_RCC_OscConfig+0xcc8>)
 8003f76:	f043 0304 	orr.w	r3, r3, #4
 8003f7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003f7e:	4b5f      	ldr	r3, [pc, #380]	; (80040fc <HAL_RCC_OscConfig+0xcc8>)
 8003f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f84:	f003 0304 	and.w	r3, r3, #4
 8003f88:	60fb      	str	r3, [r7, #12]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8003f92:	4b5b      	ldr	r3, [pc, #364]	; (8004100 <HAL_RCC_OscConfig+0xccc>)
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f9a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f9e:	d102      	bne.n	8003fa6 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003fa6:	4b56      	ldr	r3, [pc, #344]	; (8004100 <HAL_RCC_OscConfig+0xccc>)
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	4a55      	ldr	r2, [pc, #340]	; (8004100 <HAL_RCC_OscConfig+0xccc>)
 8003fac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fb0:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8003fb2:	4b52      	ldr	r3, [pc, #328]	; (80040fc <HAL_RCC_OscConfig+0xcc8>)
 8003fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fba:	f023 0303 	bic.w	r3, r3, #3
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003fc6:	3a01      	subs	r2, #1
 8003fc8:	0212      	lsls	r2, r2, #8
 8003fca:	4311      	orrs	r1, r2
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	494a      	ldr	r1, [pc, #296]	; (80040fc <HAL_RCC_OscConfig+0xcc8>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	628b      	str	r3, [r1, #40]	; 0x28
 8003fd8:	4b48      	ldr	r3, [pc, #288]	; (80040fc <HAL_RCC_OscConfig+0xcc8>)
 8003fda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fdc:	4b49      	ldr	r3, [pc, #292]	; (8004104 <HAL_RCC_OscConfig+0xcd0>)
 8003fde:	4013      	ands	r3, r2
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003fe4:	3a01      	subs	r2, #1
 8003fe6:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003fee:	3a01      	subs	r2, #1
 8003ff0:	0252      	lsls	r2, r2, #9
 8003ff2:	b292      	uxth	r2, r2
 8003ff4:	4311      	orrs	r1, r2
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ffa:	3a01      	subs	r2, #1
 8003ffc:	0412      	lsls	r2, r2, #16
 8003ffe:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004002:	4311      	orrs	r1, r2
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004008:	3a01      	subs	r2, #1
 800400a:	0612      	lsls	r2, r2, #24
 800400c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004010:	430a      	orrs	r2, r1
 8004012:	493a      	ldr	r1, [pc, #232]	; (80040fc <HAL_RCC_OscConfig+0xcc8>)
 8004014:	4313      	orrs	r3, r2
 8004016:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004018:	4b38      	ldr	r3, [pc, #224]	; (80040fc <HAL_RCC_OscConfig+0xcc8>)
 800401a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401c:	4a37      	ldr	r2, [pc, #220]	; (80040fc <HAL_RCC_OscConfig+0xcc8>)
 800401e:	f023 0310 	bic.w	r3, r3, #16
 8004022:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004028:	4a34      	ldr	r2, [pc, #208]	; (80040fc <HAL_RCC_OscConfig+0xcc8>)
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800402e:	4b33      	ldr	r3, [pc, #204]	; (80040fc <HAL_RCC_OscConfig+0xcc8>)
 8004030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004032:	4a32      	ldr	r2, [pc, #200]	; (80040fc <HAL_RCC_OscConfig+0xcc8>)
 8004034:	f043 0310 	orr.w	r3, r3, #16
 8004038:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800403a:	4b30      	ldr	r3, [pc, #192]	; (80040fc <HAL_RCC_OscConfig+0xcc8>)
 800403c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403e:	f023 020c 	bic.w	r2, r3, #12
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004046:	492d      	ldr	r1, [pc, #180]	; (80040fc <HAL_RCC_OscConfig+0xcc8>)
 8004048:	4313      	orrs	r3, r2
 800404a:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 800404c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004050:	2b01      	cmp	r3, #1
 8004052:	d105      	bne.n	8004060 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004054:	4b2a      	ldr	r3, [pc, #168]	; (8004100 <HAL_RCC_OscConfig+0xccc>)
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	4a29      	ldr	r2, [pc, #164]	; (8004100 <HAL_RCC_OscConfig+0xccc>)
 800405a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800405e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004060:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004064:	2b01      	cmp	r3, #1
 8004066:	d107      	bne.n	8004078 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8004068:	4b24      	ldr	r3, [pc, #144]	; (80040fc <HAL_RCC_OscConfig+0xcc8>)
 800406a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800406e:	4a23      	ldr	r2, [pc, #140]	; (80040fc <HAL_RCC_OscConfig+0xcc8>)
 8004070:	f023 0304 	bic.w	r3, r3, #4
 8004074:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004078:	4b20      	ldr	r3, [pc, #128]	; (80040fc <HAL_RCC_OscConfig+0xcc8>)
 800407a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407c:	4a1f      	ldr	r2, [pc, #124]	; (80040fc <HAL_RCC_OscConfig+0xcc8>)
 800407e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004082:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8004084:	4b1d      	ldr	r3, [pc, #116]	; (80040fc <HAL_RCC_OscConfig+0xcc8>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a1c      	ldr	r2, [pc, #112]	; (80040fc <HAL_RCC_OscConfig+0xcc8>)
 800408a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800408e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004090:	f7fd fa30 	bl	80014f4 <HAL_GetTick>
 8004094:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004098:	f7fd fa2c 	bl	80014f4 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e099      	b.n	80041de <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80040aa:	4b14      	ldr	r3, [pc, #80]	; (80040fc <HAL_RCC_OscConfig+0xcc8>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d0f0      	beq.n	8004098 <HAL_RCC_OscConfig+0xc64>
 80040b6:	e091      	b.n	80041dc <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80040b8:	4b10      	ldr	r3, [pc, #64]	; (80040fc <HAL_RCC_OscConfig+0xcc8>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a0f      	ldr	r2, [pc, #60]	; (80040fc <HAL_RCC_OscConfig+0xcc8>)
 80040be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040c2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80040c4:	f7fd fa16 	bl	80014f4 <HAL_GetTick>
 80040c8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040cc:	f7fd fa12 	bl	80014f4 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e07f      	b.n	80041de <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80040de:	4b07      	ldr	r3, [pc, #28]	; (80040fc <HAL_RCC_OscConfig+0xcc8>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1f0      	bne.n	80040cc <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80040ea:	4b04      	ldr	r3, [pc, #16]	; (80040fc <HAL_RCC_OscConfig+0xcc8>)
 80040ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ee:	4a03      	ldr	r2, [pc, #12]	; (80040fc <HAL_RCC_OscConfig+0xcc8>)
 80040f0:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80040f4:	f023 0303 	bic.w	r3, r3, #3
 80040f8:	6293      	str	r3, [r2, #40]	; 0x28
 80040fa:	e06f      	b.n	80041dc <HAL_RCC_OscConfig+0xda8>
 80040fc:	46020c00 	.word	0x46020c00
 8004100:	46020800 	.word	0x46020800
 8004104:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004108:	4b37      	ldr	r3, [pc, #220]	; (80041e8 <HAL_RCC_OscConfig+0xdb4>)
 800410a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800410e:	4b36      	ldr	r3, [pc, #216]	; (80041e8 <HAL_RCC_OscConfig+0xdb4>)
 8004110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004112:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004118:	2b01      	cmp	r3, #1
 800411a:	d039      	beq.n	8004190 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	f003 0203 	and.w	r2, r3, #3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004126:	429a      	cmp	r2, r3
 8004128:	d132      	bne.n	8004190 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	0a1b      	lsrs	r3, r3, #8
 800412e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004138:	429a      	cmp	r2, r3
 800413a:	d129      	bne.n	8004190 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004146:	429a      	cmp	r2, r3
 8004148:	d122      	bne.n	8004190 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004154:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004156:	429a      	cmp	r2, r3
 8004158:	d11a      	bne.n	8004190 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	0a5b      	lsrs	r3, r3, #9
 800415e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004166:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004168:	429a      	cmp	r2, r3
 800416a:	d111      	bne.n	8004190 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	0c1b      	lsrs	r3, r3, #16
 8004170:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004178:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800417a:	429a      	cmp	r2, r3
 800417c:	d108      	bne.n	8004190 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	0e1b      	lsrs	r3, r3, #24
 8004182:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800418c:	429a      	cmp	r2, r3
 800418e:	d001      	beq.n	8004194 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e024      	b.n	80041de <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004194:	4b14      	ldr	r3, [pc, #80]	; (80041e8 <HAL_RCC_OscConfig+0xdb4>)
 8004196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004198:	08db      	lsrs	r3, r3, #3
 800419a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d01a      	beq.n	80041dc <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80041a6:	4b10      	ldr	r3, [pc, #64]	; (80041e8 <HAL_RCC_OscConfig+0xdb4>)
 80041a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041aa:	4a0f      	ldr	r2, [pc, #60]	; (80041e8 <HAL_RCC_OscConfig+0xdb4>)
 80041ac:	f023 0310 	bic.w	r3, r3, #16
 80041b0:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b2:	f7fd f99f 	bl	80014f4 <HAL_GetTick>
 80041b6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80041b8:	bf00      	nop
 80041ba:	f7fd f99b 	bl	80014f4 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d0f9      	beq.n	80041ba <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ca:	4a07      	ldr	r2, [pc, #28]	; (80041e8 <HAL_RCC_OscConfig+0xdb4>)
 80041cc:	00db      	lsls	r3, r3, #3
 80041ce:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80041d0:	4b05      	ldr	r3, [pc, #20]	; (80041e8 <HAL_RCC_OscConfig+0xdb4>)
 80041d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d4:	4a04      	ldr	r2, [pc, #16]	; (80041e8 <HAL_RCC_OscConfig+0xdb4>)
 80041d6:	f043 0310 	orr.w	r3, r3, #16
 80041da:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3738      	adds	r7, #56	; 0x38
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	46020c00 	.word	0x46020c00

080041ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e1d9      	b.n	80045b4 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004200:	4b9b      	ldr	r3, [pc, #620]	; (8004470 <HAL_RCC_ClockConfig+0x284>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 030f 	and.w	r3, r3, #15
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	429a      	cmp	r2, r3
 800420c:	d910      	bls.n	8004230 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800420e:	4b98      	ldr	r3, [pc, #608]	; (8004470 <HAL_RCC_ClockConfig+0x284>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f023 020f 	bic.w	r2, r3, #15
 8004216:	4996      	ldr	r1, [pc, #600]	; (8004470 <HAL_RCC_ClockConfig+0x284>)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	4313      	orrs	r3, r2
 800421c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800421e:	4b94      	ldr	r3, [pc, #592]	; (8004470 <HAL_RCC_ClockConfig+0x284>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 030f 	and.w	r3, r3, #15
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	429a      	cmp	r2, r3
 800422a:	d001      	beq.n	8004230 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e1c1      	b.n	80045b4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0310 	and.w	r3, r3, #16
 8004238:	2b00      	cmp	r3, #0
 800423a:	d010      	beq.n	800425e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	695a      	ldr	r2, [r3, #20]
 8004240:	4b8c      	ldr	r3, [pc, #560]	; (8004474 <HAL_RCC_ClockConfig+0x288>)
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004248:	429a      	cmp	r2, r3
 800424a:	d908      	bls.n	800425e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800424c:	4b89      	ldr	r3, [pc, #548]	; (8004474 <HAL_RCC_ClockConfig+0x288>)
 800424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004250:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	695b      	ldr	r3, [r3, #20]
 8004258:	4986      	ldr	r1, [pc, #536]	; (8004474 <HAL_RCC_ClockConfig+0x288>)
 800425a:	4313      	orrs	r3, r2
 800425c:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0308 	and.w	r3, r3, #8
 8004266:	2b00      	cmp	r3, #0
 8004268:	d012      	beq.n	8004290 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	691a      	ldr	r2, [r3, #16]
 800426e:	4b81      	ldr	r3, [pc, #516]	; (8004474 <HAL_RCC_ClockConfig+0x288>)
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	091b      	lsrs	r3, r3, #4
 8004274:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004278:	429a      	cmp	r2, r3
 800427a:	d909      	bls.n	8004290 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800427c:	4b7d      	ldr	r3, [pc, #500]	; (8004474 <HAL_RCC_ClockConfig+0x288>)
 800427e:	6a1b      	ldr	r3, [r3, #32]
 8004280:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	011b      	lsls	r3, r3, #4
 800428a:	497a      	ldr	r1, [pc, #488]	; (8004474 <HAL_RCC_ClockConfig+0x288>)
 800428c:	4313      	orrs	r3, r2
 800428e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0304 	and.w	r3, r3, #4
 8004298:	2b00      	cmp	r3, #0
 800429a:	d010      	beq.n	80042be <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68da      	ldr	r2, [r3, #12]
 80042a0:	4b74      	ldr	r3, [pc, #464]	; (8004474 <HAL_RCC_ClockConfig+0x288>)
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d908      	bls.n	80042be <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80042ac:	4b71      	ldr	r3, [pc, #452]	; (8004474 <HAL_RCC_ClockConfig+0x288>)
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	496e      	ldr	r1, [pc, #440]	; (8004474 <HAL_RCC_ClockConfig+0x288>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d010      	beq.n	80042ec <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	689a      	ldr	r2, [r3, #8]
 80042ce:	4b69      	ldr	r3, [pc, #420]	; (8004474 <HAL_RCC_ClockConfig+0x288>)
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	f003 030f 	and.w	r3, r3, #15
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d908      	bls.n	80042ec <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80042da:	4b66      	ldr	r3, [pc, #408]	; (8004474 <HAL_RCC_ClockConfig+0x288>)
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	f023 020f 	bic.w	r2, r3, #15
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	4963      	ldr	r1, [pc, #396]	; (8004474 <HAL_RCC_ClockConfig+0x288>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 80d2 	beq.w	800449e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80042fa:	2300      	movs	r3, #0
 80042fc:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	2b03      	cmp	r3, #3
 8004304:	d143      	bne.n	800438e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004306:	4b5b      	ldr	r3, [pc, #364]	; (8004474 <HAL_RCC_ClockConfig+0x288>)
 8004308:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b00      	cmp	r3, #0
 8004312:	d110      	bne.n	8004336 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004314:	4b57      	ldr	r3, [pc, #348]	; (8004474 <HAL_RCC_ClockConfig+0x288>)
 8004316:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800431a:	4a56      	ldr	r2, [pc, #344]	; (8004474 <HAL_RCC_ClockConfig+0x288>)
 800431c:	f043 0304 	orr.w	r3, r3, #4
 8004320:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004324:	4b53      	ldr	r3, [pc, #332]	; (8004474 <HAL_RCC_ClockConfig+0x288>)
 8004326:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800432a:	f003 0304 	and.w	r3, r3, #4
 800432e:	60bb      	str	r3, [r7, #8]
 8004330:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8004332:	2301      	movs	r3, #1
 8004334:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8004336:	f7fd f8dd 	bl	80014f4 <HAL_GetTick>
 800433a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800433c:	4b4e      	ldr	r3, [pc, #312]	; (8004478 <HAL_RCC_ClockConfig+0x28c>)
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00f      	beq.n	8004368 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004348:	e008      	b.n	800435c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800434a:	f7fd f8d3 	bl	80014f4 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d901      	bls.n	800435c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e12b      	b.n	80045b4 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800435c:	4b46      	ldr	r3, [pc, #280]	; (8004478 <HAL_RCC_ClockConfig+0x28c>)
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d0f0      	beq.n	800434a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004368:	7dfb      	ldrb	r3, [r7, #23]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d107      	bne.n	800437e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800436e:	4b41      	ldr	r3, [pc, #260]	; (8004474 <HAL_RCC_ClockConfig+0x288>)
 8004370:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004374:	4a3f      	ldr	r2, [pc, #252]	; (8004474 <HAL_RCC_ClockConfig+0x288>)
 8004376:	f023 0304 	bic.w	r3, r3, #4
 800437a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800437e:	4b3d      	ldr	r3, [pc, #244]	; (8004474 <HAL_RCC_ClockConfig+0x288>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d121      	bne.n	80043ce <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e112      	b.n	80045b4 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	2b02      	cmp	r3, #2
 8004394:	d107      	bne.n	80043a6 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004396:	4b37      	ldr	r3, [pc, #220]	; (8004474 <HAL_RCC_ClockConfig+0x288>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d115      	bne.n	80043ce <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e106      	b.n	80045b4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d107      	bne.n	80043be <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80043ae:	4b31      	ldr	r3, [pc, #196]	; (8004474 <HAL_RCC_ClockConfig+0x288>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0304 	and.w	r3, r3, #4
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d109      	bne.n	80043ce <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e0fa      	b.n	80045b4 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043be:	4b2d      	ldr	r3, [pc, #180]	; (8004474 <HAL_RCC_ClockConfig+0x288>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e0f2      	b.n	80045b4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80043ce:	4b29      	ldr	r3, [pc, #164]	; (8004474 <HAL_RCC_ClockConfig+0x288>)
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	f023 0203 	bic.w	r2, r3, #3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	4926      	ldr	r1, [pc, #152]	; (8004474 <HAL_RCC_ClockConfig+0x288>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80043e0:	f7fd f888 	bl	80014f4 <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	2b03      	cmp	r3, #3
 80043ec:	d112      	bne.n	8004414 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043ee:	e00a      	b.n	8004406 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043f0:	f7fd f880 	bl	80014f4 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80043fe:	4293      	cmp	r3, r2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e0d6      	b.n	80045b4 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004406:	4b1b      	ldr	r3, [pc, #108]	; (8004474 <HAL_RCC_ClockConfig+0x288>)
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	f003 030c 	and.w	r3, r3, #12
 800440e:	2b0c      	cmp	r3, #12
 8004410:	d1ee      	bne.n	80043f0 <HAL_RCC_ClockConfig+0x204>
 8004412:	e044      	b.n	800449e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	2b02      	cmp	r3, #2
 800441a:	d112      	bne.n	8004442 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800441c:	e00a      	b.n	8004434 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800441e:	f7fd f869 	bl	80014f4 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	f241 3288 	movw	r2, #5000	; 0x1388
 800442c:	4293      	cmp	r3, r2
 800442e:	d901      	bls.n	8004434 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e0bf      	b.n	80045b4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004434:	4b0f      	ldr	r3, [pc, #60]	; (8004474 <HAL_RCC_ClockConfig+0x288>)
 8004436:	69db      	ldr	r3, [r3, #28]
 8004438:	f003 030c 	and.w	r3, r3, #12
 800443c:	2b08      	cmp	r3, #8
 800443e:	d1ee      	bne.n	800441e <HAL_RCC_ClockConfig+0x232>
 8004440:	e02d      	b.n	800449e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d123      	bne.n	8004492 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800444a:	e00a      	b.n	8004462 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800444c:	f7fd f852 	bl	80014f4 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	f241 3288 	movw	r2, #5000	; 0x1388
 800445a:	4293      	cmp	r3, r2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e0a8      	b.n	80045b4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004462:	4b04      	ldr	r3, [pc, #16]	; (8004474 <HAL_RCC_ClockConfig+0x288>)
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	f003 030c 	and.w	r3, r3, #12
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1ee      	bne.n	800444c <HAL_RCC_ClockConfig+0x260>
 800446e:	e016      	b.n	800449e <HAL_RCC_ClockConfig+0x2b2>
 8004470:	40022000 	.word	0x40022000
 8004474:	46020c00 	.word	0x46020c00
 8004478:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800447c:	f7fd f83a 	bl	80014f4 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	f241 3288 	movw	r2, #5000	; 0x1388
 800448a:	4293      	cmp	r3, r2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e090      	b.n	80045b4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004492:	4b4a      	ldr	r3, [pc, #296]	; (80045bc <HAL_RCC_ClockConfig+0x3d0>)
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	f003 030c 	and.w	r3, r3, #12
 800449a:	2b04      	cmp	r3, #4
 800449c:	d1ee      	bne.n	800447c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d010      	beq.n	80044cc <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	689a      	ldr	r2, [r3, #8]
 80044ae:	4b43      	ldr	r3, [pc, #268]	; (80045bc <HAL_RCC_ClockConfig+0x3d0>)
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	f003 030f 	and.w	r3, r3, #15
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d208      	bcs.n	80044cc <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80044ba:	4b40      	ldr	r3, [pc, #256]	; (80045bc <HAL_RCC_ClockConfig+0x3d0>)
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	f023 020f 	bic.w	r2, r3, #15
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	493d      	ldr	r1, [pc, #244]	; (80045bc <HAL_RCC_ClockConfig+0x3d0>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044cc:	4b3c      	ldr	r3, [pc, #240]	; (80045c0 <HAL_RCC_ClockConfig+0x3d4>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 030f 	and.w	r3, r3, #15
 80044d4:	683a      	ldr	r2, [r7, #0]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d210      	bcs.n	80044fc <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044da:	4b39      	ldr	r3, [pc, #228]	; (80045c0 <HAL_RCC_ClockConfig+0x3d4>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f023 020f 	bic.w	r2, r3, #15
 80044e2:	4937      	ldr	r1, [pc, #220]	; (80045c0 <HAL_RCC_ClockConfig+0x3d4>)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ea:	4b35      	ldr	r3, [pc, #212]	; (80045c0 <HAL_RCC_ClockConfig+0x3d4>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 030f 	and.w	r3, r3, #15
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d001      	beq.n	80044fc <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e05b      	b.n	80045b4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0304 	and.w	r3, r3, #4
 8004504:	2b00      	cmp	r3, #0
 8004506:	d010      	beq.n	800452a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68da      	ldr	r2, [r3, #12]
 800450c:	4b2b      	ldr	r3, [pc, #172]	; (80045bc <HAL_RCC_ClockConfig+0x3d0>)
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004514:	429a      	cmp	r2, r3
 8004516:	d208      	bcs.n	800452a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004518:	4b28      	ldr	r3, [pc, #160]	; (80045bc <HAL_RCC_ClockConfig+0x3d0>)
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	4925      	ldr	r1, [pc, #148]	; (80045bc <HAL_RCC_ClockConfig+0x3d0>)
 8004526:	4313      	orrs	r3, r2
 8004528:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0308 	and.w	r3, r3, #8
 8004532:	2b00      	cmp	r3, #0
 8004534:	d012      	beq.n	800455c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	691a      	ldr	r2, [r3, #16]
 800453a:	4b20      	ldr	r3, [pc, #128]	; (80045bc <HAL_RCC_ClockConfig+0x3d0>)
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	091b      	lsrs	r3, r3, #4
 8004540:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004544:	429a      	cmp	r2, r3
 8004546:	d209      	bcs.n	800455c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004548:	4b1c      	ldr	r3, [pc, #112]	; (80045bc <HAL_RCC_ClockConfig+0x3d0>)
 800454a:	6a1b      	ldr	r3, [r3, #32]
 800454c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	011b      	lsls	r3, r3, #4
 8004556:	4919      	ldr	r1, [pc, #100]	; (80045bc <HAL_RCC_ClockConfig+0x3d0>)
 8004558:	4313      	orrs	r3, r2
 800455a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0310 	and.w	r3, r3, #16
 8004564:	2b00      	cmp	r3, #0
 8004566:	d010      	beq.n	800458a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	695a      	ldr	r2, [r3, #20]
 800456c:	4b13      	ldr	r3, [pc, #76]	; (80045bc <HAL_RCC_ClockConfig+0x3d0>)
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004574:	429a      	cmp	r2, r3
 8004576:	d208      	bcs.n	800458a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8004578:	4b10      	ldr	r3, [pc, #64]	; (80045bc <HAL_RCC_ClockConfig+0x3d0>)
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	695b      	ldr	r3, [r3, #20]
 8004584:	490d      	ldr	r1, [pc, #52]	; (80045bc <HAL_RCC_ClockConfig+0x3d0>)
 8004586:	4313      	orrs	r3, r2
 8004588:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800458a:	f000 f821 	bl	80045d0 <HAL_RCC_GetSysClockFreq>
 800458e:	4602      	mov	r2, r0
 8004590:	4b0a      	ldr	r3, [pc, #40]	; (80045bc <HAL_RCC_ClockConfig+0x3d0>)
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	f003 030f 	and.w	r3, r3, #15
 8004598:	490a      	ldr	r1, [pc, #40]	; (80045c4 <HAL_RCC_ClockConfig+0x3d8>)
 800459a:	5ccb      	ldrb	r3, [r1, r3]
 800459c:	fa22 f303 	lsr.w	r3, r2, r3
 80045a0:	4a09      	ldr	r2, [pc, #36]	; (80045c8 <HAL_RCC_ClockConfig+0x3dc>)
 80045a2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80045a4:	4b09      	ldr	r3, [pc, #36]	; (80045cc <HAL_RCC_ClockConfig+0x3e0>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7fc fe17 	bl	80011dc <HAL_InitTick>
 80045ae:	4603      	mov	r3, r0
 80045b0:	73fb      	strb	r3, [r7, #15]

  return status;
 80045b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3718      	adds	r7, #24
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	46020c00 	.word	0x46020c00
 80045c0:	40022000 	.word	0x40022000
 80045c4:	0800d334 	.word	0x0800d334
 80045c8:	20000000 	.word	0x20000000
 80045cc:	20000004 	.word	0x20000004

080045d0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b08b      	sub	sp, #44	; 0x2c
 80045d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80045d6:	2300      	movs	r3, #0
 80045d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80045da:	2300      	movs	r3, #0
 80045dc:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045de:	4b78      	ldr	r3, [pc, #480]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80045e0:	69db      	ldr	r3, [r3, #28]
 80045e2:	f003 030c 	and.w	r3, r3, #12
 80045e6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045e8:	4b75      	ldr	r3, [pc, #468]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80045ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ec:	f003 0303 	and.w	r3, r3, #3
 80045f0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d005      	beq.n	8004604 <HAL_RCC_GetSysClockFreq+0x34>
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	2b0c      	cmp	r3, #12
 80045fc:	d121      	bne.n	8004642 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d11e      	bne.n	8004642 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004604:	4b6e      	ldr	r3, [pc, #440]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d107      	bne.n	8004620 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004610:	4b6b      	ldr	r3, [pc, #428]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004612:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004616:	0b1b      	lsrs	r3, r3, #12
 8004618:	f003 030f 	and.w	r3, r3, #15
 800461c:	627b      	str	r3, [r7, #36]	; 0x24
 800461e:	e005      	b.n	800462c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8004620:	4b67      	ldr	r3, [pc, #412]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	0f1b      	lsrs	r3, r3, #28
 8004626:	f003 030f 	and.w	r3, r3, #15
 800462a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800462c:	4a65      	ldr	r2, [pc, #404]	; (80047c4 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800462e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004634:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d110      	bne.n	800465e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800463c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004640:	e00d      	b.n	800465e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004642:	4b5f      	ldr	r3, [pc, #380]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	f003 030c 	and.w	r3, r3, #12
 800464a:	2b04      	cmp	r3, #4
 800464c:	d102      	bne.n	8004654 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800464e:	4b5e      	ldr	r3, [pc, #376]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004650:	623b      	str	r3, [r7, #32]
 8004652:	e004      	b.n	800465e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	2b08      	cmp	r3, #8
 8004658:	d101      	bne.n	800465e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800465a:	4b5b      	ldr	r3, [pc, #364]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800465c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	2b0c      	cmp	r3, #12
 8004662:	f040 80a5 	bne.w	80047b0 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004666:	4b56      	ldr	r3, [pc, #344]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466a:	f003 0303 	and.w	r3, r3, #3
 800466e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004670:	4b53      	ldr	r3, [pc, #332]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004674:	0a1b      	lsrs	r3, r3, #8
 8004676:	f003 030f 	and.w	r3, r3, #15
 800467a:	3301      	adds	r3, #1
 800467c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800467e:	4b50      	ldr	r3, [pc, #320]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004682:	091b      	lsrs	r3, r3, #4
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800468a:	4b4d      	ldr	r3, [pc, #308]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800468c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468e:	08db      	lsrs	r3, r3, #3
 8004690:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004694:	68ba      	ldr	r2, [r7, #8]
 8004696:	fb02 f303 	mul.w	r3, r2, r3
 800469a:	ee07 3a90 	vmov	s15, r3
 800469e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046a2:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d003      	beq.n	80046b4 <HAL_RCC_GetSysClockFreq+0xe4>
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	2b03      	cmp	r3, #3
 80046b0:	d022      	beq.n	80046f8 <HAL_RCC_GetSysClockFreq+0x128>
 80046b2:	e043      	b.n	800473c <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	ee07 3a90 	vmov	s15, r3
 80046ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046be:	eddf 6a43 	vldr	s13, [pc, #268]	; 80047cc <HAL_RCC_GetSysClockFreq+0x1fc>
 80046c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046c6:	4b3e      	ldr	r3, [pc, #248]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80046c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ce:	ee07 3a90 	vmov	s15, r3
 80046d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80046d6:	ed97 6a01 	vldr	s12, [r7, #4]
 80046da:	eddf 5a3d 	vldr	s11, [pc, #244]	; 80047d0 <HAL_RCC_GetSysClockFreq+0x200>
 80046de:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80046e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80046e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80046ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046f6:	e046      	b.n	8004786 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	ee07 3a90 	vmov	s15, r3
 80046fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004702:	eddf 6a32 	vldr	s13, [pc, #200]	; 80047cc <HAL_RCC_GetSysClockFreq+0x1fc>
 8004706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800470a:	4b2d      	ldr	r3, [pc, #180]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800470c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800470e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004712:	ee07 3a90 	vmov	s15, r3
 8004716:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800471a:	ed97 6a01 	vldr	s12, [r7, #4]
 800471e:	eddf 5a2c 	vldr	s11, [pc, #176]	; 80047d0 <HAL_RCC_GetSysClockFreq+0x200>
 8004722:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004726:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800472a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800472e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004736:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800473a:	e024      	b.n	8004786 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	ee07 3a90 	vmov	s15, r3
 8004742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	ee07 3a90 	vmov	s15, r3
 800474c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004750:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004754:	4b1a      	ldr	r3, [pc, #104]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800475c:	ee07 3a90 	vmov	s15, r3
 8004760:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004764:	ed97 6a01 	vldr	s12, [r7, #4]
 8004768:	eddf 5a19 	vldr	s11, [pc, #100]	; 80047d0 <HAL_RCC_GetSysClockFreq+0x200>
 800476c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004770:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004774:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004778:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800477c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004780:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004784:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8004786:	4b0e      	ldr	r3, [pc, #56]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800478a:	0e1b      	lsrs	r3, r3, #24
 800478c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004790:	3301      	adds	r3, #1
 8004792:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	ee07 3a90 	vmov	s15, r3
 800479a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800479e:	edd7 6a07 	vldr	s13, [r7, #28]
 80047a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047aa:	ee17 3a90 	vmov	r3, s15
 80047ae:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80047b0:	6a3b      	ldr	r3, [r7, #32]
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	372c      	adds	r7, #44	; 0x2c
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	46020c00 	.word	0x46020c00
 80047c4:	0800d34c 	.word	0x0800d34c
 80047c8:	00f42400 	.word	0x00f42400
 80047cc:	4b742400 	.word	0x4b742400
 80047d0:	46000000 	.word	0x46000000

080047d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80047d8:	f7ff fefa 	bl	80045d0 <HAL_RCC_GetSysClockFreq>
 80047dc:	4602      	mov	r2, r0
 80047de:	4b07      	ldr	r3, [pc, #28]	; (80047fc <HAL_RCC_GetHCLKFreq+0x28>)
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	f003 030f 	and.w	r3, r3, #15
 80047e6:	4906      	ldr	r1, [pc, #24]	; (8004800 <HAL_RCC_GetHCLKFreq+0x2c>)
 80047e8:	5ccb      	ldrb	r3, [r1, r3]
 80047ea:	fa22 f303 	lsr.w	r3, r2, r3
 80047ee:	4a05      	ldr	r2, [pc, #20]	; (8004804 <HAL_RCC_GetHCLKFreq+0x30>)
 80047f0:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80047f2:	4b04      	ldr	r3, [pc, #16]	; (8004804 <HAL_RCC_GetHCLKFreq+0x30>)
 80047f4:	681b      	ldr	r3, [r3, #0]
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	46020c00 	.word	0x46020c00
 8004800:	0800d334 	.word	0x0800d334
 8004804:	20000000 	.word	0x20000000

08004808 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800480c:	f7ff ffe2 	bl	80047d4 <HAL_RCC_GetHCLKFreq>
 8004810:	4602      	mov	r2, r0
 8004812:	4b05      	ldr	r3, [pc, #20]	; (8004828 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	091b      	lsrs	r3, r3, #4
 8004818:	f003 0307 	and.w	r3, r3, #7
 800481c:	4903      	ldr	r1, [pc, #12]	; (800482c <HAL_RCC_GetPCLK1Freq+0x24>)
 800481e:	5ccb      	ldrb	r3, [r1, r3]
 8004820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004824:	4618      	mov	r0, r3
 8004826:	bd80      	pop	{r7, pc}
 8004828:	46020c00 	.word	0x46020c00
 800482c:	0800d344 	.word	0x0800d344

08004830 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8004834:	f7ff ffce 	bl	80047d4 <HAL_RCC_GetHCLKFreq>
 8004838:	4602      	mov	r2, r0
 800483a:	4b05      	ldr	r3, [pc, #20]	; (8004850 <HAL_RCC_GetPCLK2Freq+0x20>)
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	0a1b      	lsrs	r3, r3, #8
 8004840:	f003 0307 	and.w	r3, r3, #7
 8004844:	4903      	ldr	r1, [pc, #12]	; (8004854 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004846:	5ccb      	ldrb	r3, [r1, r3]
 8004848:	fa22 f303 	lsr.w	r3, r2, r3
}
 800484c:	4618      	mov	r0, r3
 800484e:	bd80      	pop	{r7, pc}
 8004850:	46020c00 	.word	0x46020c00
 8004854:	0800d344 	.word	0x0800d344

08004858 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800485c:	f7ff ffba 	bl	80047d4 <HAL_RCC_GetHCLKFreq>
 8004860:	4602      	mov	r2, r0
 8004862:	4b05      	ldr	r3, [pc, #20]	; (8004878 <HAL_RCC_GetPCLK3Freq+0x20>)
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	091b      	lsrs	r3, r3, #4
 8004868:	f003 0307 	and.w	r3, r3, #7
 800486c:	4903      	ldr	r1, [pc, #12]	; (800487c <HAL_RCC_GetPCLK3Freq+0x24>)
 800486e:	5ccb      	ldrb	r3, [r1, r3]
 8004870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004874:	4618      	mov	r0, r3
 8004876:	bd80      	pop	{r7, pc}
 8004878:	46020c00 	.word	0x46020c00
 800487c:	0800d344 	.word	0x0800d344

08004880 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	221f      	movs	r2, #31
 800488e:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8004890:	4b15      	ldr	r3, [pc, #84]	; (80048e8 <HAL_RCC_GetClockConfig+0x68>)
 8004892:	69db      	ldr	r3, [r3, #28]
 8004894:	f003 0203 	and.w	r2, r3, #3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 800489c:	4b12      	ldr	r3, [pc, #72]	; (80048e8 <HAL_RCC_GetClockConfig+0x68>)
 800489e:	6a1b      	ldr	r3, [r3, #32]
 80048a0:	f003 020f 	and.w	r2, r3, #15
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 80048a8:	4b0f      	ldr	r3, [pc, #60]	; (80048e8 <HAL_RCC_GetClockConfig+0x68>)
 80048aa:	6a1b      	ldr	r3, [r3, #32]
 80048ac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 80048b4:	4b0c      	ldr	r3, [pc, #48]	; (80048e8 <HAL_RCC_GetClockConfig+0x68>)
 80048b6:	6a1b      	ldr	r3, [r3, #32]
 80048b8:	091b      	lsrs	r3, r3, #4
 80048ba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 80048c2:	4b09      	ldr	r3, [pc, #36]	; (80048e8 <HAL_RCC_GetClockConfig+0x68>)
 80048c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80048ce:	4b07      	ldr	r3, [pc, #28]	; (80048ec <HAL_RCC_GetClockConfig+0x6c>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 020f 	and.w	r2, r3, #15
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	601a      	str	r2, [r3, #0]
}
 80048da:	bf00      	nop
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	46020c00 	.word	0x46020c00
 80048ec:	40022000 	.word	0x40022000

080048f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80048f8:	4b3e      	ldr	r3, [pc, #248]	; (80049f4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80048fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048fe:	f003 0304 	and.w	r3, r3, #4
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004906:	f7fe fd67 	bl	80033d8 <HAL_PWREx_GetVoltageRange>
 800490a:	6178      	str	r0, [r7, #20]
 800490c:	e019      	b.n	8004942 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800490e:	4b39      	ldr	r3, [pc, #228]	; (80049f4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004910:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004914:	4a37      	ldr	r2, [pc, #220]	; (80049f4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004916:	f043 0304 	orr.w	r3, r3, #4
 800491a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800491e:	4b35      	ldr	r3, [pc, #212]	; (80049f4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004920:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004924:	f003 0304 	and.w	r3, r3, #4
 8004928:	60fb      	str	r3, [r7, #12]
 800492a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800492c:	f7fe fd54 	bl	80033d8 <HAL_PWREx_GetVoltageRange>
 8004930:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004932:	4b30      	ldr	r3, [pc, #192]	; (80049f4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004934:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004938:	4a2e      	ldr	r2, [pc, #184]	; (80049f4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800493a:	f023 0304 	bic.w	r3, r3, #4
 800493e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004948:	d003      	beq.n	8004952 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004950:	d109      	bne.n	8004966 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004958:	d202      	bcs.n	8004960 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800495a:	2301      	movs	r3, #1
 800495c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800495e:	e033      	b.n	80049c8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004960:	2300      	movs	r3, #0
 8004962:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004964:	e030      	b.n	80049c8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800496c:	d208      	bcs.n	8004980 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004974:	d102      	bne.n	800497c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8004976:	2303      	movs	r3, #3
 8004978:	613b      	str	r3, [r7, #16]
 800497a:	e025      	b.n	80049c8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e035      	b.n	80049ec <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004986:	d90f      	bls.n	80049a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d109      	bne.n	80049a2 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004994:	d902      	bls.n	800499c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8004996:	2300      	movs	r3, #0
 8004998:	613b      	str	r3, [r7, #16]
 800499a:	e015      	b.n	80049c8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800499c:	2301      	movs	r3, #1
 800499e:	613b      	str	r3, [r7, #16]
 80049a0:	e012      	b.n	80049c8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80049a2:	2300      	movs	r3, #0
 80049a4:	613b      	str	r3, [r7, #16]
 80049a6:	e00f      	b.n	80049c8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049ae:	d109      	bne.n	80049c4 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b6:	d102      	bne.n	80049be <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80049b8:	2301      	movs	r3, #1
 80049ba:	613b      	str	r3, [r7, #16]
 80049bc:	e004      	b.n	80049c8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80049be:	2302      	movs	r3, #2
 80049c0:	613b      	str	r3, [r7, #16]
 80049c2:	e001      	b.n	80049c8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80049c4:	2301      	movs	r3, #1
 80049c6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80049c8:	4b0b      	ldr	r3, [pc, #44]	; (80049f8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f023 020f 	bic.w	r2, r3, #15
 80049d0:	4909      	ldr	r1, [pc, #36]	; (80049f8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80049d8:	4b07      	ldr	r3, [pc, #28]	; (80049f8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 030f 	and.w	r3, r3, #15
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d001      	beq.n	80049ea <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e000      	b.n	80049ec <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3718      	adds	r7, #24
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	46020c00 	.word	0x46020c00
 80049f8:	40022000 	.word	0x40022000

080049fc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80049fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a00:	b0b8      	sub	sp, #224	; 0xe0
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a08:	2300      	movs	r3, #0
 8004a0a:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a0e:	2300      	movs	r3, #0
 8004a10:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1c:	f002 0401 	and.w	r4, r2, #1
 8004a20:	2500      	movs	r5, #0
 8004a22:	ea54 0305 	orrs.w	r3, r4, r5
 8004a26:	d00b      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004a28:	4bca      	ldr	r3, [pc, #808]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a2e:	f023 0103 	bic.w	r1, r3, #3
 8004a32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a38:	4ac6      	ldr	r2, [pc, #792]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a3a:	430b      	orrs	r3, r1
 8004a3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a48:	f002 0802 	and.w	r8, r2, #2
 8004a4c:	f04f 0900 	mov.w	r9, #0
 8004a50:	ea58 0309 	orrs.w	r3, r8, r9
 8004a54:	d00b      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004a56:	4bbf      	ldr	r3, [pc, #764]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a5c:	f023 010c 	bic.w	r1, r3, #12
 8004a60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a66:	4abb      	ldr	r2, [pc, #748]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a68:	430b      	orrs	r3, r1
 8004a6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a76:	f002 0a04 	and.w	sl, r2, #4
 8004a7a:	f04f 0b00 	mov.w	fp, #0
 8004a7e:	ea5a 030b 	orrs.w	r3, sl, fp
 8004a82:	d00b      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004a84:	4bb3      	ldr	r3, [pc, #716]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a8a:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004a8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a94:	4aaf      	ldr	r2, [pc, #700]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a96:	430b      	orrs	r3, r1
 8004a98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa4:	f002 0308 	and.w	r3, r2, #8
 8004aa8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004aac:	2300      	movs	r3, #0
 8004aae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ab2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	d00b      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004abc:	4ba5      	ldr	r3, [pc, #660]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ac2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004ac6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004acc:	4aa1      	ldr	r2, [pc, #644]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ace:	430b      	orrs	r3, r1
 8004ad0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ad4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004adc:	f002 0310 	and.w	r3, r2, #16
 8004ae0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004aea:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004aee:	460b      	mov	r3, r1
 8004af0:	4313      	orrs	r3, r2
 8004af2:	d00b      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004af4:	4b97      	ldr	r3, [pc, #604]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004afa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004afe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b04:	4a93      	ldr	r2, [pc, #588]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b06:	430b      	orrs	r3, r1
 8004b08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b14:	f002 0320 	and.w	r3, r2, #32
 8004b18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b22:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004b26:	460b      	mov	r3, r1
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	d00b      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004b2c:	4b89      	ldr	r3, [pc, #548]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b32:	f023 0107 	bic.w	r1, r3, #7
 8004b36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b3c:	4a85      	ldr	r2, [pc, #532]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b3e:	430b      	orrs	r3, r1
 8004b40:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b4c:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004b50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b54:	2300      	movs	r3, #0
 8004b56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b5a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b5e:	460b      	mov	r3, r1
 8004b60:	4313      	orrs	r3, r2
 8004b62:	d00b      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004b64:	4b7b      	ldr	r3, [pc, #492]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b6a:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8004b6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b74:	4a77      	ldr	r2, [pc, #476]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b76:	430b      	orrs	r3, r1
 8004b78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b84:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004b88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004b92:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004b96:	460b      	mov	r3, r1
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	d00b      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004b9c:	4b6d      	ldr	r3, [pc, #436]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ba2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ba6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004baa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bac:	4a69      	ldr	r2, [pc, #420]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004bae:	430b      	orrs	r3, r1
 8004bb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bbc:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8004bc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004bca:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004bce:	460b      	mov	r3, r1
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	d00b      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004bd4:	4b5f      	ldr	r3, [pc, #380]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004bd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004bda:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004bde:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be4:	4a5b      	ldr	r2, [pc, #364]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004be6:	430b      	orrs	r3, r1
 8004be8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004bec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004bf8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004c02:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004c06:	460b      	mov	r3, r1
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	d00b      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004c0c:	4b51      	ldr	r3, [pc, #324]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c12:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8004c16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c1c:	4a4d      	ldr	r2, [pc, #308]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c1e:	430b      	orrs	r3, r1
 8004c20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2c:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8004c30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c34:	2300      	movs	r3, #0
 8004c36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004c3a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004c3e:	460b      	mov	r3, r1
 8004c40:	4313      	orrs	r3, r2
 8004c42:	d00b      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004c44:	4b43      	ldr	r3, [pc, #268]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c4a:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8004c4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c54:	4a3f      	ldr	r2, [pc, #252]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c56:	430b      	orrs	r3, r1
 8004c58:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004c5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c64:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004c68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c72:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004c76:	460b      	mov	r3, r1
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	d00b      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004c7c:	4b35      	ldr	r3, [pc, #212]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c82:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8004c86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c8c:	4a31      	ldr	r2, [pc, #196]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c8e:	430b      	orrs	r3, r1
 8004c90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8004c94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004ca0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004ca6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004caa:	460b      	mov	r3, r1
 8004cac:	4313      	orrs	r3, r2
 8004cae:	d00c      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8004cb0:	4b28      	ldr	r3, [pc, #160]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004cb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004cb6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004cba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004cbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cc2:	4a24      	ldr	r2, [pc, #144]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004cc4:	430b      	orrs	r3, r1
 8004cc6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004cca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004cd6:	673b      	str	r3, [r7, #112]	; 0x70
 8004cd8:	2300      	movs	r3, #0
 8004cda:	677b      	str	r3, [r7, #116]	; 0x74
 8004cdc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	d04f      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004ce6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cee:	2b80      	cmp	r3, #128	; 0x80
 8004cf0:	d02d      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x352>
 8004cf2:	2b80      	cmp	r3, #128	; 0x80
 8004cf4:	d827      	bhi.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004cf6:	2b60      	cmp	r3, #96	; 0x60
 8004cf8:	d02e      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004cfa:	2b60      	cmp	r3, #96	; 0x60
 8004cfc:	d823      	bhi.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004cfe:	2b40      	cmp	r3, #64	; 0x40
 8004d00:	d006      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004d02:	2b40      	cmp	r3, #64	; 0x40
 8004d04:	d81f      	bhi.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d009      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x322>
 8004d0a:	2b20      	cmp	r3, #32
 8004d0c:	d011      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004d0e:	e01a      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004d10:	4b10      	ldr	r3, [pc, #64]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d14:	4a0f      	ldr	r2, [pc, #60]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d1a:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004d1c:	e01d      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d22:	3308      	adds	r3, #8
 8004d24:	4618      	mov	r0, r3
 8004d26:	f002 f9d1 	bl	80070cc <RCCEx_PLL2_Config>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004d30:	e013      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d36:	332c      	adds	r3, #44	; 0x2c
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f002 fa5f 	bl	80071fc <RCCEx_PLL3_Config>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004d44:	e009      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8004d4c:	e005      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 8004d4e:	bf00      	nop
 8004d50:	e003      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8004d52:	bf00      	nop
 8004d54:	46020c00 	.word	0x46020c00
        break;
 8004d58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d5a:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d10d      	bne.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004d62:	4bb6      	ldr	r3, [pc, #728]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004d64:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004d68:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8004d6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d74:	4ab1      	ldr	r2, [pc, #708]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004d76:	430b      	orrs	r3, r1
 8004d78:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004d7c:	e003      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d7e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004d82:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004d86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004d92:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d94:	2300      	movs	r3, #0
 8004d96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d98:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	d053      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8004da2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dae:	d033      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004db0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004db4:	d82c      	bhi.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004db6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dba:	d02f      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004dbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dc0:	d826      	bhi.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004dc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dc6:	d008      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004dc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dcc:	d820      	bhi.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00a      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004dd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dd6:	d011      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004dd8:	e01a      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004dda:	4b98      	ldr	r3, [pc, #608]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dde:	4a97      	ldr	r2, [pc, #604]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004de4:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004de6:	e01a      	b.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004de8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004dec:	3308      	adds	r3, #8
 8004dee:	4618      	mov	r0, r3
 8004df0:	f002 f96c 	bl	80070cc <RCCEx_PLL2_Config>
 8004df4:	4603      	mov	r3, r0
 8004df6:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004dfa:	e010      	b.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004dfc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e00:	332c      	adds	r3, #44	; 0x2c
 8004e02:	4618      	mov	r0, r3
 8004e04:	f002 f9fa 	bl	80071fc <RCCEx_PLL3_Config>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004e0e:	e006      	b.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8004e16:	e002      	b.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8004e18:	bf00      	nop
 8004e1a:	e000      	b.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8004e1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e1e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10d      	bne.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8004e26:	4b85      	ldr	r3, [pc, #532]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004e28:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004e2c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004e30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e38:	4a80      	ldr	r2, [pc, #512]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004e3a:	430b      	orrs	r3, r1
 8004e3c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004e40:	e003      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e42:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004e46:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004e4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e52:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004e56:	663b      	str	r3, [r7, #96]	; 0x60
 8004e58:	2300      	movs	r3, #0
 8004e5a:	667b      	str	r3, [r7, #100]	; 0x64
 8004e5c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004e60:	460b      	mov	r3, r1
 8004e62:	4313      	orrs	r3, r2
 8004e64:	d046      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004e66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004e6e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004e72:	d028      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004e74:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004e78:	d821      	bhi.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004e7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e7e:	d022      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004e80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e84:	d81b      	bhi.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004e86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e8a:	d01c      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004e8c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e90:	d815      	bhi.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004e92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e96:	d008      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8004e98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e9c:	d80f      	bhi.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d011      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ea6:	d00e      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004ea8:	e009      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004eaa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004eae:	3308      	adds	r3, #8
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f002 f90b 	bl	80070cc <RCCEx_PLL2_Config>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8004ebc:	e004      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8004ec4:	e000      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 8004ec6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ec8:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10d      	bne.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004ed0:	4b5a      	ldr	r3, [pc, #360]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004ed2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ed6:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004eda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ede:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004ee2:	4a56      	ldr	r2, [pc, #344]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004ee4:	430b      	orrs	r3, r1
 8004ee6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004eea:	e003      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eec:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004ef0:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8004ef4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efc:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004f00:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f02:	2300      	movs	r3, #0
 8004f04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f06:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	d03f      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8004f10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f18:	2b04      	cmp	r3, #4
 8004f1a:	d81e      	bhi.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8004f1c:	a201      	add	r2, pc, #4	; (adr r2, 8004f24 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8004f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f22:	bf00      	nop
 8004f24:	08004f63 	.word	0x08004f63
 8004f28:	08004f39 	.word	0x08004f39
 8004f2c:	08004f47 	.word	0x08004f47
 8004f30:	08004f63 	.word	0x08004f63
 8004f34:	08004f63 	.word	0x08004f63
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004f38:	4b40      	ldr	r3, [pc, #256]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3c:	4a3f      	ldr	r2, [pc, #252]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004f3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f42:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8004f44:	e00e      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f4a:	332c      	adds	r3, #44	; 0x2c
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f002 f955 	bl	80071fc <RCCEx_PLL3_Config>
 8004f52:	4603      	mov	r3, r0
 8004f54:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8004f58:	e004      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8004f60:	e000      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 8004f62:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004f64:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10d      	bne.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8004f6c:	4b33      	ldr	r3, [pc, #204]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004f6e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004f72:	f023 0107 	bic.w	r1, r3, #7
 8004f76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f7e:	4a2f      	ldr	r2, [pc, #188]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004f80:	430b      	orrs	r3, r1
 8004f82:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004f86:	e003      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f88:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004f8c:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8004f90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f98:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004f9c:	653b      	str	r3, [r7, #80]	; 0x50
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	657b      	str	r3, [r7, #84]	; 0x54
 8004fa2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	d04d      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8004fac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fb4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004fb8:	d028      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x610>
 8004fba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004fbe:	d821      	bhi.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004fc0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004fc4:	d024      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8004fc6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004fca:	d81b      	bhi.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004fcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fd0:	d00e      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8004fd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fd6:	d815      	bhi.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d01b      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8004fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fe0:	d110      	bne.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004fe2:	4b16      	ldr	r3, [pc, #88]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe6:	4a15      	ldr	r2, [pc, #84]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fec:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8004fee:	e012      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ff0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ff4:	332c      	adds	r3, #44	; 0x2c
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f002 f900 	bl	80071fc <RCCEx_PLL3_Config>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8005002:	e008      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 800500a:	e004      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 800500c:	bf00      	nop
 800500e:	e002      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8005010:	bf00      	nop
 8005012:	e000      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8005014:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005016:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800501a:	2b00      	cmp	r3, #0
 800501c:	d110      	bne.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800501e:	4b07      	ldr	r3, [pc, #28]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005020:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005024:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005028:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800502c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005030:	4a02      	ldr	r2, [pc, #8]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005032:	430b      	orrs	r3, r1
 8005034:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005038:	e006      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800503a:	bf00      	nop
 800503c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005040:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005044:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005048:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800504c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005050:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005054:	64bb      	str	r3, [r7, #72]	; 0x48
 8005056:	2300      	movs	r3, #0
 8005058:	64fb      	str	r3, [r7, #76]	; 0x4c
 800505a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800505e:	460b      	mov	r3, r1
 8005060:	4313      	orrs	r3, r2
 8005062:	f000 80b5 	beq.w	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005066:	2300      	movs	r3, #0
 8005068:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800506c:	4b9d      	ldr	r3, [pc, #628]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800506e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005072:	f003 0304 	and.w	r3, r3, #4
 8005076:	2b00      	cmp	r3, #0
 8005078:	d113      	bne.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800507a:	4b9a      	ldr	r3, [pc, #616]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800507c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005080:	4a98      	ldr	r2, [pc, #608]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005082:	f043 0304 	orr.w	r3, r3, #4
 8005086:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800508a:	4b96      	ldr	r3, [pc, #600]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800508c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005090:	f003 0304 	and.w	r3, r3, #4
 8005094:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005098:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
      pwrclkchanged = SET;
 800509c:	2301      	movs	r3, #1
 800509e:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80050a2:	4b91      	ldr	r3, [pc, #580]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80050a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a6:	4a90      	ldr	r2, [pc, #576]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80050a8:	f043 0301 	orr.w	r3, r3, #1
 80050ac:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050ae:	f7fc fa21 	bl	80014f4 <HAL_GetTick>
 80050b2:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80050b6:	e00b      	b.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050b8:	f7fc fa1c 	bl	80014f4 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d903      	bls.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 80050ce:	e005      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80050d0:	4b85      	ldr	r3, [pc, #532]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80050d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d4:	f003 0301 	and.w	r3, r3, #1
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d0ed      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 80050dc:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d165      	bne.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80050e4:	4b7f      	ldr	r3, [pc, #508]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80050e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80050f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d023      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x746>
 80050fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80050fe:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8005102:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005106:	4293      	cmp	r3, r2
 8005108:	d01b      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800510a:	4b76      	ldr	r3, [pc, #472]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800510c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005110:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005114:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005118:	4b72      	ldr	r3, [pc, #456]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800511a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800511e:	4a71      	ldr	r2, [pc, #452]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005124:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005128:	4b6e      	ldr	r3, [pc, #440]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800512a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800512e:	4a6d      	ldr	r2, [pc, #436]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005130:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005134:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005138:	4a6a      	ldr	r2, [pc, #424]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800513a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800513e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005142:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b00      	cmp	r3, #0
 800514c:	d019      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800514e:	f7fc f9d1 	bl	80014f4 <HAL_GetTick>
 8005152:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005156:	e00d      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005158:	f7fc f9cc 	bl	80014f4 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005162:	1ad2      	subs	r2, r2, r3
 8005164:	f241 3388 	movw	r3, #5000	; 0x1388
 8005168:	429a      	cmp	r2, r3
 800516a:	d903      	bls.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
            break;
 8005172:	e006      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005174:	4b5b      	ldr	r3, [pc, #364]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005176:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800517a:	f003 0302 	and.w	r3, r3, #2
 800517e:	2b00      	cmp	r3, #0
 8005180:	d0ea      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 8005182:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005186:	2b00      	cmp	r3, #0
 8005188:	d10d      	bne.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800518a:	4b56      	ldr	r3, [pc, #344]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800518c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005190:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005194:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005198:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800519c:	4a51      	ldr	r2, [pc, #324]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800519e:	430b      	orrs	r3, r1
 80051a0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80051a4:	e008      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80051a6:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80051aa:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 80051ae:	e003      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051b0:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80051b4:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80051b8:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d107      	bne.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051c0:	4b48      	ldr	r3, [pc, #288]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80051c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051c6:	4a47      	ldr	r2, [pc, #284]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80051c8:	f023 0304 	bic.w	r3, r3, #4
 80051cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80051d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80051d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80051dc:	643b      	str	r3, [r7, #64]	; 0x40
 80051de:	2300      	movs	r3, #0
 80051e0:	647b      	str	r3, [r7, #68]	; 0x44
 80051e2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80051e6:	460b      	mov	r3, r1
 80051e8:	4313      	orrs	r3, r2
 80051ea:	d042      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80051ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80051f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051f4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80051f8:	d022      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x844>
 80051fa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80051fe:	d81b      	bhi.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8005200:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005204:	d011      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8005206:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800520a:	d815      	bhi.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800520c:	2b00      	cmp	r3, #0
 800520e:	d019      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8005210:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005214:	d110      	bne.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005216:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800521a:	3308      	adds	r3, #8
 800521c:	4618      	mov	r0, r3
 800521e:	f001 ff55 	bl	80070cc <RCCEx_PLL2_Config>
 8005222:	4603      	mov	r3, r0
 8005224:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8005228:	e00d      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800522a:	4b2e      	ldr	r3, [pc, #184]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800522c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522e:	4a2d      	ldr	r2, [pc, #180]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005234:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005236:	e006      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 800523e:	e002      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8005240:	bf00      	nop
 8005242:	e000      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8005244:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005246:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800524a:	2b00      	cmp	r3, #0
 800524c:	d10d      	bne.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800524e:	4b25      	ldr	r3, [pc, #148]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005254:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005258:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800525c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005260:	4a20      	ldr	r2, [pc, #128]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005262:	430b      	orrs	r3, r1
 8005264:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005268:	e003      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800526a:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800526e:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005272:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527a:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800527e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005280:	2300      	movs	r3, #0
 8005282:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005284:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005288:	460b      	mov	r3, r1
 800528a:	4313      	orrs	r3, r2
 800528c:	d032      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800528e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005292:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005296:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800529a:	d00b      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800529c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052a0:	d804      	bhi.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d008      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80052a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052aa:	d007      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 80052b2:	e004      	b.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80052b4:	bf00      	nop
 80052b6:	e002      	b.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80052b8:	bf00      	nop
 80052ba:	e000      	b.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80052bc:	bf00      	nop
    }
    if (ret == HAL_OK)
 80052be:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d112      	bne.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80052c6:	4b07      	ldr	r3, [pc, #28]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80052c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80052cc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80052d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052d8:	4a02      	ldr	r2, [pc, #8]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80052da:	430b      	orrs	r3, r1
 80052dc:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80052e0:	e008      	b.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 80052e2:	bf00      	nop
 80052e4:	46020c00 	.word	0x46020c00
 80052e8:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ec:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80052f0:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80052f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80052f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fc:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005300:	633b      	str	r3, [r7, #48]	; 0x30
 8005302:	2300      	movs	r3, #0
 8005304:	637b      	str	r3, [r7, #52]	; 0x34
 8005306:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800530a:	460b      	mov	r3, r1
 800530c:	4313      	orrs	r3, r2
 800530e:	d019      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005310:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005314:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005318:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800531c:	d105      	bne.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800531e:	4b88      	ldr	r3, [pc, #544]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005322:	4a87      	ldr	r2, [pc, #540]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005328:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800532a:	4b85      	ldr	r3, [pc, #532]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800532c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005330:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005334:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005338:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800533c:	4a80      	ldr	r2, [pc, #512]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800533e:	430b      	orrs	r3, r1
 8005340:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005344:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005350:	62bb      	str	r3, [r7, #40]	; 0x28
 8005352:	2300      	movs	r3, #0
 8005354:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005356:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800535a:	460b      	mov	r3, r1
 800535c:	4313      	orrs	r3, r2
 800535e:	d00c      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005360:	4b77      	ldr	r3, [pc, #476]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005366:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800536a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800536e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005372:	4973      	ldr	r1, [pc, #460]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005374:	4313      	orrs	r3, r2
 8005376:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800537a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800537e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005382:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005386:	623b      	str	r3, [r7, #32]
 8005388:	2300      	movs	r3, #0
 800538a:	627b      	str	r3, [r7, #36]	; 0x24
 800538c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005390:	460b      	mov	r3, r1
 8005392:	4313      	orrs	r3, r2
 8005394:	d00c      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005396:	4b6a      	ldr	r3, [pc, #424]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800539c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80053a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80053a8:	4965      	ldr	r1, [pc, #404]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80053b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80053b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80053bc:	61bb      	str	r3, [r7, #24]
 80053be:	2300      	movs	r3, #0
 80053c0:	61fb      	str	r3, [r7, #28]
 80053c2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80053c6:	460b      	mov	r3, r1
 80053c8:	4313      	orrs	r3, r2
 80053ca:	d00c      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80053cc:	4b5c      	ldr	r3, [pc, #368]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80053ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80053d2:	f023 0218 	bic.w	r2, r3, #24
 80053d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80053da:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80053de:	4958      	ldr	r1, [pc, #352]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80053e0:	4313      	orrs	r3, r2
 80053e2:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80053e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80053ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ee:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 80053f2:	613b      	str	r3, [r7, #16]
 80053f4:	2300      	movs	r3, #0
 80053f6:	617b      	str	r3, [r7, #20]
 80053f8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80053fc:	460b      	mov	r3, r1
 80053fe:	4313      	orrs	r3, r2
 8005400:	d032      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8005402:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005406:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800540a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800540e:	d105      	bne.n	800541c <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005410:	4b4b      	ldr	r3, [pc, #300]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005414:	4a4a      	ldr	r2, [pc, #296]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005416:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800541a:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800541c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005420:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005424:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005428:	d108      	bne.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800542a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800542e:	3308      	adds	r3, #8
 8005430:	4618      	mov	r0, r3
 8005432:	f001 fe4b 	bl	80070cc <RCCEx_PLL2_Config>
 8005436:	4603      	mov	r3, r0
 8005438:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
    }
    if (ret == HAL_OK)
 800543c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005440:	2b00      	cmp	r3, #0
 8005442:	d10d      	bne.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005444:	4b3e      	ldr	r3, [pc, #248]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005446:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800544a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800544e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005452:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005456:	493a      	ldr	r1, [pc, #232]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005458:	4313      	orrs	r3, r2
 800545a:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800545e:	e003      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005460:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005464:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8005468:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800546c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005470:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8005474:	60bb      	str	r3, [r7, #8]
 8005476:	2300      	movs	r3, #0
 8005478:	60fb      	str	r3, [r7, #12]
 800547a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800547e:	460b      	mov	r3, r1
 8005480:	4313      	orrs	r3, r2
 8005482:	d03a      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8005484:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005488:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800548c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005490:	d00e      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8005492:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005496:	d815      	bhi.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8005498:	2b00      	cmp	r3, #0
 800549a:	d017      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0xad0>
 800549c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054a0:	d110      	bne.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054a2:	4b27      	ldr	r3, [pc, #156]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80054a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a6:	4a26      	ldr	r2, [pc, #152]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80054a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054ac:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80054ae:	e00e      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80054b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80054b4:	3308      	adds	r3, #8
 80054b6:	4618      	mov	r0, r3
 80054b8:	f001 fe08 	bl	80070cc <RCCEx_PLL2_Config>
 80054bc:	4603      	mov	r3, r0
 80054be:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80054c2:	e004      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 80054ca:	e000      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 80054cc:	bf00      	nop
    }
    if (ret == HAL_OK)
 80054ce:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d10d      	bne.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80054d6:	4b1a      	ldr	r3, [pc, #104]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80054d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054dc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80054e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80054e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054e8:	4915      	ldr	r1, [pc, #84]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80054f0:	e003      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054f2:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80054f6:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80054fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80054fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005502:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005506:	603b      	str	r3, [r7, #0]
 8005508:	2300      	movs	r3, #0
 800550a:	607b      	str	r3, [r7, #4]
 800550c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005510:	460b      	mov	r3, r1
 8005512:	4313      	orrs	r3, r2
 8005514:	d00c      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8005516:	4b0a      	ldr	r3, [pc, #40]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005518:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800551c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005520:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005524:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005528:	4905      	ldr	r1, [pc, #20]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800552a:	4313      	orrs	r3, r2
 800552c:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8005530:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
}
 8005534:	4618      	mov	r0, r3
 8005536:	37e0      	adds	r7, #224	; 0xe0
 8005538:	46bd      	mov	sp, r7
 800553a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800553e:	bf00      	nop
 8005540:	46020c00 	.word	0x46020c00

08005544 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005544:	b480      	push	{r7}
 8005546:	b089      	sub	sp, #36	; 0x24
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800554c:	4ba6      	ldr	r3, [pc, #664]	; (80057e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800554e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005554:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005556:	4ba4      	ldr	r3, [pc, #656]	; (80057e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555a:	f003 0303 	and.w	r3, r3, #3
 800555e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005560:	4ba1      	ldr	r3, [pc, #644]	; (80057e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005564:	0a1b      	lsrs	r3, r3, #8
 8005566:	f003 030f 	and.w	r3, r3, #15
 800556a:	3301      	adds	r3, #1
 800556c:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800556e:	4b9e      	ldr	r3, [pc, #632]	; (80057e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005572:	091b      	lsrs	r3, r3, #4
 8005574:	f003 0301 	and.w	r3, r3, #1
 8005578:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800557a:	4b9b      	ldr	r3, [pc, #620]	; (80057e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800557c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557e:	08db      	lsrs	r3, r3, #3
 8005580:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	fb02 f303 	mul.w	r3, r2, r3
 800558a:	ee07 3a90 	vmov	s15, r3
 800558e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005592:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	2b03      	cmp	r3, #3
 800559a:	d062      	beq.n	8005662 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	2b03      	cmp	r3, #3
 80055a0:	f200 8081 	bhi.w	80056a6 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d024      	beq.n	80055f4 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d17a      	bne.n	80056a6 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	ee07 3a90 	vmov	s15, r3
 80055b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ba:	eddf 6a8c 	vldr	s13, [pc, #560]	; 80057ec <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80055be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055c2:	4b89      	ldr	r3, [pc, #548]	; (80057e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80055c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ca:	ee07 3a90 	vmov	s15, r3
 80055ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80055d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80055d6:	eddf 5a86 	vldr	s11, [pc, #536]	; 80057f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80055da:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80055de:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80055e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80055ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80055f2:	e08f      	b.n	8005714 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80055f4:	4b7c      	ldr	r3, [pc, #496]	; (80057e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d005      	beq.n	800560c <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8005600:	4b79      	ldr	r3, [pc, #484]	; (80057e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	0f1b      	lsrs	r3, r3, #28
 8005606:	f003 030f 	and.w	r3, r3, #15
 800560a:	e006      	b.n	800561a <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800560c:	4b76      	ldr	r3, [pc, #472]	; (80057e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800560e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005612:	041b      	lsls	r3, r3, #16
 8005614:	0f1b      	lsrs	r3, r3, #28
 8005616:	f003 030f 	and.w	r3, r3, #15
 800561a:	4a76      	ldr	r2, [pc, #472]	; (80057f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800561c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005620:	ee07 3a90 	vmov	s15, r3
 8005624:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	ee07 3a90 	vmov	s15, r3
 800562e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	ee07 3a90 	vmov	s15, r3
 800563c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005640:	ed97 6a02 	vldr	s12, [r7, #8]
 8005644:	eddf 5a6a 	vldr	s11, [pc, #424]	; 80057f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005648:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800564c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005650:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005654:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800565c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005660:	e058      	b.n	8005714 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	ee07 3a90 	vmov	s15, r3
 8005668:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800566c:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80057ec <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8005670:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005674:	4b5c      	ldr	r3, [pc, #368]	; (80057e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800567c:	ee07 3a90 	vmov	s15, r3
 8005680:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005684:	ed97 6a02 	vldr	s12, [r7, #8]
 8005688:	eddf 5a59 	vldr	s11, [pc, #356]	; 80057f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800568c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005690:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005694:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005698:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800569c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056a4:	e036      	b.n	8005714 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80056a6:	4b50      	ldr	r3, [pc, #320]	; (80057e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d005      	beq.n	80056be <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 80056b2:	4b4d      	ldr	r3, [pc, #308]	; (80057e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	0f1b      	lsrs	r3, r3, #28
 80056b8:	f003 030f 	and.w	r3, r3, #15
 80056bc:	e006      	b.n	80056cc <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 80056be:	4b4a      	ldr	r3, [pc, #296]	; (80057e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80056c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80056c4:	041b      	lsls	r3, r3, #16
 80056c6:	0f1b      	lsrs	r3, r3, #28
 80056c8:	f003 030f 	and.w	r3, r3, #15
 80056cc:	4a49      	ldr	r2, [pc, #292]	; (80057f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80056ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056d2:	ee07 3a90 	vmov	s15, r3
 80056d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	ee07 3a90 	vmov	s15, r3
 80056e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	ee07 3a90 	vmov	s15, r3
 80056ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80056f6:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80057f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80056fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005702:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005706:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800570a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800570e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005712:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005714:	4b34      	ldr	r3, [pc, #208]	; (80057e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005718:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d017      	beq.n	8005750 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005720:	4b31      	ldr	r3, [pc, #196]	; (80057e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005724:	0a5b      	lsrs	r3, r3, #9
 8005726:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800572a:	ee07 3a90 	vmov	s15, r3
 800572e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8005732:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005736:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800573a:	edd7 6a07 	vldr	s13, [r7, #28]
 800573e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005742:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005746:	ee17 2a90 	vmov	r2, s15
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	601a      	str	r2, [r3, #0]
 800574e:	e002      	b.n	8005756 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005756:	4b24      	ldr	r3, [pc, #144]	; (80057e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d017      	beq.n	8005792 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005762:	4b21      	ldr	r3, [pc, #132]	; (80057e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005766:	0c1b      	lsrs	r3, r3, #16
 8005768:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800576c:	ee07 3a90 	vmov	s15, r3
 8005770:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005774:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005778:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800577c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005780:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005784:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005788:	ee17 2a90 	vmov	r2, s15
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	605a      	str	r2, [r3, #4]
 8005790:	e002      	b.n	8005798 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005798:	4b13      	ldr	r3, [pc, #76]	; (80057e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800579a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800579c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d017      	beq.n	80057d4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80057a4:	4b10      	ldr	r3, [pc, #64]	; (80057e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80057a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057a8:	0e1b      	lsrs	r3, r3, #24
 80057aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057ae:	ee07 3a90 	vmov	s15, r3
 80057b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80057b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057ba:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80057be:	edd7 6a07 	vldr	s13, [r7, #28]
 80057c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057ca:	ee17 2a90 	vmov	r2, s15
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80057d2:	e002      	b.n	80057da <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	609a      	str	r2, [r3, #8]
}
 80057da:	bf00      	nop
 80057dc:	3724      	adds	r7, #36	; 0x24
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	46020c00 	.word	0x46020c00
 80057ec:	4b742400 	.word	0x4b742400
 80057f0:	46000000 	.word	0x46000000
 80057f4:	0800d34c 	.word	0x0800d34c

080057f8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b089      	sub	sp, #36	; 0x24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005800:	4ba6      	ldr	r3, [pc, #664]	; (8005a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005808:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800580a:	4ba4      	ldr	r3, [pc, #656]	; (8005a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800580c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580e:	f003 0303 	and.w	r3, r3, #3
 8005812:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8005814:	4ba1      	ldr	r3, [pc, #644]	; (8005a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005818:	0a1b      	lsrs	r3, r3, #8
 800581a:	f003 030f 	and.w	r3, r3, #15
 800581e:	3301      	adds	r3, #1
 8005820:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8005822:	4b9e      	ldr	r3, [pc, #632]	; (8005a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005826:	091b      	lsrs	r3, r3, #4
 8005828:	f003 0301 	and.w	r3, r3, #1
 800582c:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800582e:	4b9b      	ldr	r3, [pc, #620]	; (8005a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005832:	08db      	lsrs	r3, r3, #3
 8005834:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	fb02 f303 	mul.w	r3, r2, r3
 800583e:	ee07 3a90 	vmov	s15, r3
 8005842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005846:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	2b03      	cmp	r3, #3
 800584e:	d062      	beq.n	8005916 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	2b03      	cmp	r3, #3
 8005854:	f200 8081 	bhi.w	800595a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	2b01      	cmp	r3, #1
 800585c:	d024      	beq.n	80058a8 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	2b02      	cmp	r3, #2
 8005862:	d17a      	bne.n	800595a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	ee07 3a90 	vmov	s15, r3
 800586a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800586e:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8005aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005876:	4b89      	ldr	r3, [pc, #548]	; (8005a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800587a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800587e:	ee07 3a90 	vmov	s15, r3
 8005882:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005886:	ed97 6a02 	vldr	s12, [r7, #8]
 800588a:	eddf 5a86 	vldr	s11, [pc, #536]	; 8005aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800588e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005892:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005896:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800589a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800589e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058a6:	e08f      	b.n	80059c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80058a8:	4b7c      	ldr	r3, [pc, #496]	; (8005a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d005      	beq.n	80058c0 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80058b4:	4b79      	ldr	r3, [pc, #484]	; (8005a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	0f1b      	lsrs	r3, r3, #28
 80058ba:	f003 030f 	and.w	r3, r3, #15
 80058be:	e006      	b.n	80058ce <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 80058c0:	4b76      	ldr	r3, [pc, #472]	; (8005a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80058c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80058c6:	041b      	lsls	r3, r3, #16
 80058c8:	0f1b      	lsrs	r3, r3, #28
 80058ca:	f003 030f 	and.w	r3, r3, #15
 80058ce:	4a76      	ldr	r2, [pc, #472]	; (8005aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80058d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058d4:	ee07 3a90 	vmov	s15, r3
 80058d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	ee07 3a90 	vmov	s15, r3
 80058e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	ee07 3a90 	vmov	s15, r3
 80058f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058f4:	ed97 6a02 	vldr	s12, [r7, #8]
 80058f8:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8005aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80058fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005900:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005904:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005908:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800590c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005910:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005914:	e058      	b.n	80059c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	ee07 3a90 	vmov	s15, r3
 800591c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005920:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005924:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005928:	4b5c      	ldr	r3, [pc, #368]	; (8005a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800592a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800592c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005930:	ee07 3a90 	vmov	s15, r3
 8005934:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005938:	ed97 6a02 	vldr	s12, [r7, #8]
 800593c:	eddf 5a59 	vldr	s11, [pc, #356]	; 8005aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005940:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005944:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005948:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800594c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005950:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005954:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005958:	e036      	b.n	80059c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800595a:	4b50      	ldr	r3, [pc, #320]	; (8005a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d005      	beq.n	8005972 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8005966:	4b4d      	ldr	r3, [pc, #308]	; (8005a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	0f1b      	lsrs	r3, r3, #28
 800596c:	f003 030f 	and.w	r3, r3, #15
 8005970:	e006      	b.n	8005980 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8005972:	4b4a      	ldr	r3, [pc, #296]	; (8005a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005974:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005978:	041b      	lsls	r3, r3, #16
 800597a:	0f1b      	lsrs	r3, r3, #28
 800597c:	f003 030f 	and.w	r3, r3, #15
 8005980:	4a49      	ldr	r2, [pc, #292]	; (8005aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005986:	ee07 3a90 	vmov	s15, r3
 800598a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	ee07 3a90 	vmov	s15, r3
 8005994:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005998:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	ee07 3a90 	vmov	s15, r3
 80059a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80059aa:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80059ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80059be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059c6:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80059c8:	4b34      	ldr	r3, [pc, #208]	; (8005a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80059ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d017      	beq.n	8005a04 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80059d4:	4b31      	ldr	r3, [pc, #196]	; (8005a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80059d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059d8:	0a5b      	lsrs	r3, r3, #9
 80059da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059de:	ee07 3a90 	vmov	s15, r3
 80059e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80059e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059ea:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80059ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80059f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059fa:	ee17 2a90 	vmov	r2, s15
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	601a      	str	r2, [r3, #0]
 8005a02:	e002      	b.n	8005a0a <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005a0a:	4b24      	ldr	r3, [pc, #144]	; (8005a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d017      	beq.n	8005a46 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005a16:	4b21      	ldr	r3, [pc, #132]	; (8005a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a1a:	0c1b      	lsrs	r3, r3, #16
 8005a1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a20:	ee07 3a90 	vmov	s15, r3
 8005a24:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005a28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a2c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005a30:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a3c:	ee17 2a90 	vmov	r2, s15
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	605a      	str	r2, [r3, #4]
 8005a44:	e002      	b.n	8005a4c <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005a4c:	4b13      	ldr	r3, [pc, #76]	; (8005a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d017      	beq.n	8005a88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005a58:	4b10      	ldr	r3, [pc, #64]	; (8005a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a5c:	0e1b      	lsrs	r3, r3, #24
 8005a5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a62:	ee07 3a90 	vmov	s15, r3
 8005a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8005a6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a6e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005a72:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a7e:	ee17 2a90 	vmov	r2, s15
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005a86:	e002      	b.n	8005a8e <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	609a      	str	r2, [r3, #8]
}
 8005a8e:	bf00      	nop
 8005a90:	3724      	adds	r7, #36	; 0x24
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	46020c00 	.word	0x46020c00
 8005aa0:	4b742400 	.word	0x4b742400
 8005aa4:	46000000 	.word	0x46000000
 8005aa8:	0800d34c 	.word	0x0800d34c

08005aac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b089      	sub	sp, #36	; 0x24
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005ab4:	4ba6      	ldr	r3, [pc, #664]	; (8005d50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005abc:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005abe:	4ba4      	ldr	r3, [pc, #656]	; (8005d50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac2:	f003 0303 	and.w	r3, r3, #3
 8005ac6:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8005ac8:	4ba1      	ldr	r3, [pc, #644]	; (8005d50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005acc:	0a1b      	lsrs	r3, r3, #8
 8005ace:	f003 030f 	and.w	r3, r3, #15
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8005ad6:	4b9e      	ldr	r3, [pc, #632]	; (8005d50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ada:	091b      	lsrs	r3, r3, #4
 8005adc:	f003 0301 	and.w	r3, r3, #1
 8005ae0:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005ae2:	4b9b      	ldr	r3, [pc, #620]	; (8005d50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ae4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ae6:	08db      	lsrs	r3, r3, #3
 8005ae8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	fb02 f303 	mul.w	r3, r2, r3
 8005af2:	ee07 3a90 	vmov	s15, r3
 8005af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005afa:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	2b03      	cmp	r3, #3
 8005b02:	d062      	beq.n	8005bca <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	2b03      	cmp	r3, #3
 8005b08:	f200 8081 	bhi.w	8005c0e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d024      	beq.n	8005b5c <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d17a      	bne.n	8005c0e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	ee07 3a90 	vmov	s15, r3
 8005b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b22:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8005d54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b2a:	4b89      	ldr	r3, [pc, #548]	; (8005d50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b32:	ee07 3a90 	vmov	s15, r3
 8005b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b3e:	eddf 5a86 	vldr	s11, [pc, #536]	; 8005d58 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b56:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8005b5a:	e08f      	b.n	8005c7c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005b5c:	4b7c      	ldr	r3, [pc, #496]	; (8005d50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d005      	beq.n	8005b74 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8005b68:	4b79      	ldr	r3, [pc, #484]	; (8005d50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	0f1b      	lsrs	r3, r3, #28
 8005b6e:	f003 030f 	and.w	r3, r3, #15
 8005b72:	e006      	b.n	8005b82 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8005b74:	4b76      	ldr	r3, [pc, #472]	; (8005d50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005b76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b7a:	041b      	lsls	r3, r3, #16
 8005b7c:	0f1b      	lsrs	r3, r3, #28
 8005b7e:	f003 030f 	and.w	r3, r3, #15
 8005b82:	4a76      	ldr	r2, [pc, #472]	; (8005d5c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b88:	ee07 3a90 	vmov	s15, r3
 8005b8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	ee07 3a90 	vmov	s15, r3
 8005b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	ee07 3a90 	vmov	s15, r3
 8005ba4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ba8:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bac:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8005d58 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005bb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005bc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bc4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005bc8:	e058      	b.n	8005c7c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	ee07 3a90 	vmov	s15, r3
 8005bd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bd4:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005d54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005bd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bdc:	4b5c      	ldr	r3, [pc, #368]	; (8005d50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005be4:	ee07 3a90 	vmov	s15, r3
 8005be8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005bec:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bf0:	eddf 5a59 	vldr	s11, [pc, #356]	; 8005d58 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005bf4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005bf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005bfc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c00:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005c04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c08:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c0c:	e036      	b.n	8005c7c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005c0e:	4b50      	ldr	r3, [pc, #320]	; (8005d50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d005      	beq.n	8005c26 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8005c1a:	4b4d      	ldr	r3, [pc, #308]	; (8005d50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	0f1b      	lsrs	r3, r3, #28
 8005c20:	f003 030f 	and.w	r3, r3, #15
 8005c24:	e006      	b.n	8005c34 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8005c26:	4b4a      	ldr	r3, [pc, #296]	; (8005d50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005c2c:	041b      	lsls	r3, r3, #16
 8005c2e:	0f1b      	lsrs	r3, r3, #28
 8005c30:	f003 030f 	and.w	r3, r3, #15
 8005c34:	4a49      	ldr	r2, [pc, #292]	; (8005d5c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c3a:	ee07 3a90 	vmov	s15, r3
 8005c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	ee07 3a90 	vmov	s15, r3
 8005c48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	ee07 3a90 	vmov	s15, r3
 8005c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c5e:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005d58 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c7a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005c7c:	4b34      	ldr	r3, [pc, #208]	; (8005d50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d017      	beq.n	8005cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005c88:	4b31      	ldr	r3, [pc, #196]	; (8005d50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c8c:	0a5b      	lsrs	r3, r3, #9
 8005c8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c92:	ee07 3a90 	vmov	s15, r3
 8005c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8005c9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c9e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005ca2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ca6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005caa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cae:	ee17 2a90 	vmov	r2, s15
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	601a      	str	r2, [r3, #0]
 8005cb6:	e002      	b.n	8005cbe <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005cbe:	4b24      	ldr	r3, [pc, #144]	; (8005d50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d017      	beq.n	8005cfa <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005cca:	4b21      	ldr	r3, [pc, #132]	; (8005d50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cce:	0c1b      	lsrs	r3, r3, #16
 8005cd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cd4:	ee07 3a90 	vmov	s15, r3
 8005cd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005cdc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ce0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005ce4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ce8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cf0:	ee17 2a90 	vmov	r2, s15
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	605a      	str	r2, [r3, #4]
 8005cf8:	e002      	b.n	8005d00 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005d00:	4b13      	ldr	r3, [pc, #76]	; (8005d50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d017      	beq.n	8005d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005d0c:	4b10      	ldr	r3, [pc, #64]	; (8005d50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d10:	0e1b      	lsrs	r3, r3, #24
 8005d12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d16:	ee07 3a90 	vmov	s15, r3
 8005d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8005d1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d22:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005d26:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d32:	ee17 2a90 	vmov	r2, s15
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005d3a:	e002      	b.n	8005d42 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	609a      	str	r2, [r3, #8]
}
 8005d42:	bf00      	nop
 8005d44:	3724      	adds	r7, #36	; 0x24
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	46020c00 	.word	0x46020c00
 8005d54:	4b742400 	.word	0x4b742400
 8005d58:	46000000 	.word	0x46000000
 8005d5c:	0800d34c 	.word	0x0800d34c

08005d60 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b08e      	sub	sp, #56	; 0x38
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005d6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d6e:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8005d72:	430b      	orrs	r3, r1
 8005d74:	d145      	bne.n	8005e02 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005d76:	4baa      	ldr	r3, [pc, #680]	; (8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005d78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d80:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005d82:	4ba7      	ldr	r3, [pc, #668]	; (8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005d84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d88:	f003 0302 	and.w	r3, r3, #2
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d108      	bne.n	8005da2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d96:	d104      	bne.n	8005da2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005d98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d9c:	637b      	str	r3, [r7, #52]	; 0x34
 8005d9e:	f001 b987 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005da2:	4b9f      	ldr	r3, [pc, #636]	; (8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005da4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005da8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005db0:	d114      	bne.n	8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8005db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005db8:	d110      	bne.n	8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005dba:	4b99      	ldr	r3, [pc, #612]	; (8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005dbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dc8:	d103      	bne.n	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8005dca:	23fa      	movs	r3, #250	; 0xfa
 8005dcc:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005dce:	f001 b96f 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8005dd2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005dd6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005dd8:	f001 b96a 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8005ddc:	4b90      	ldr	r3, [pc, #576]	; (8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005de4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005de8:	d107      	bne.n	8005dfa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8005dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005df0:	d103      	bne.n	8005dfa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8005df2:	4b8c      	ldr	r3, [pc, #560]	; (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005df4:	637b      	str	r3, [r7, #52]	; 0x34
 8005df6:	f001 b95b 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	637b      	str	r3, [r7, #52]	; 0x34
 8005dfe:	f001 b957 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005e02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e06:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8005e0a:	430b      	orrs	r3, r1
 8005e0c:	d151      	bne.n	8005eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005e0e:	4b84      	ldr	r3, [pc, #528]	; (8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005e10:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005e14:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8005e18:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1c:	2b80      	cmp	r3, #128	; 0x80
 8005e1e:	d035      	beq.n	8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8005e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e22:	2b80      	cmp	r3, #128	; 0x80
 8005e24:	d841      	bhi.n	8005eaa <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e28:	2b60      	cmp	r3, #96	; 0x60
 8005e2a:	d02a      	beq.n	8005e82 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8005e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2e:	2b60      	cmp	r3, #96	; 0x60
 8005e30:	d83b      	bhi.n	8005eaa <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e34:	2b40      	cmp	r3, #64	; 0x40
 8005e36:	d009      	beq.n	8005e4c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3a:	2b40      	cmp	r3, #64	; 0x40
 8005e3c:	d835      	bhi.n	8005eaa <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00c      	beq.n	8005e5e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8005e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e46:	2b20      	cmp	r3, #32
 8005e48:	d012      	beq.n	8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005e4a:	e02e      	b.n	8005eaa <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e50:	4618      	mov	r0, r3
 8005e52:	f7ff fb77 	bl	8005544 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e5a:	f001 b929 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e5e:	f107 0318 	add.w	r3, r7, #24
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7ff fcc8 	bl	80057f8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e6c:	f001 b920 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e70:	f107 030c 	add.w	r3, r7, #12
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7ff fe19 	bl	8005aac <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e7e:	f001 b917 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005e82:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005e86:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e88:	f001 b912 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e8c:	4b64      	ldr	r3, [pc, #400]	; (8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e98:	d103      	bne.n	8005ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8005e9a:	4b63      	ldr	r3, [pc, #396]	; (8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005e9c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005e9e:	f001 b907 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ea6:	f001 b903 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005eae:	f001 b8ff 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005eb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005eb6:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8005eba:	430b      	orrs	r3, r1
 8005ebc:	d158      	bne.n	8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005ebe:	4b58      	ldr	r3, [pc, #352]	; (8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005ec0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005ec4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ec8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ed0:	d03b      	beq.n	8005f4a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8005ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ed8:	d846      	bhi.n	8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005edc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ee0:	d02e      	beq.n	8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8005ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ee8:	d83e      	bhi.n	8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ef0:	d00b      	beq.n	8005f0a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8005ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ef8:	d836      	bhi.n	8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d00d      	beq.n	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8005f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f06:	d012      	beq.n	8005f2e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8005f08:	e02e      	b.n	8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7ff fb18 	bl	8005544 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f16:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f18:	f001 b8ca 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f1c:	f107 0318 	add.w	r3, r7, #24
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7ff fc69 	bl	80057f8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f2a:	f001 b8c1 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f2e:	f107 030c 	add.w	r3, r7, #12
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7ff fdba 	bl	8005aac <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f3c:	f001 b8b8 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005f40:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005f44:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f46:	f001 b8b3 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f4a:	4b35      	ldr	r3, [pc, #212]	; (8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f56:	d103      	bne.n	8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8005f58:	4b33      	ldr	r3, [pc, #204]	; (8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005f5a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005f5c:	f001 b8a8 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005f60:	2300      	movs	r3, #0
 8005f62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f64:	f001 b8a4 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f6c:	f001 b8a0 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8005f70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f74:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8005f78:	430b      	orrs	r3, r1
 8005f7a:	d16e      	bne.n	800605a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8005f7c:	4b28      	ldr	r3, [pc, #160]	; (8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f82:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005f86:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005f8e:	d034      	beq.n	8005ffa <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 8005f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f92:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005f96:	d85c      	bhi.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8005f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f9e:	d00b      	beq.n	8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8005fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fa6:	d854      	bhi.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8005fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d016      	beq.n	8005fdc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8005fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005fb4:	d009      	beq.n	8005fca <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005fb6:	e04c      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005fb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f7ff fac1 	bl	8005544 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fc6:	f001 b873 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fca:	f107 0318 	add.w	r3, r7, #24
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7ff fc12 	bl	80057f8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fd8:	f001 b86a 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8005fdc:	4b10      	ldr	r3, [pc, #64]	; (8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fe4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fe8:	d103      	bne.n	8005ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 8005fea:	4b10      	ldr	r3, [pc, #64]	; (800602c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005fec:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005fee:	f001 b85f 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ff6:	f001 b85b 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005ffa:	4b09      	ldr	r3, [pc, #36]	; (8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0320 	and.w	r3, r3, #32
 8006002:	2b20      	cmp	r3, #32
 8006004:	d121      	bne.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006006:	4b06      	ldr	r3, [pc, #24]	; (8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00e      	beq.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8006012:	4b03      	ldr	r3, [pc, #12]	; (8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	0e1b      	lsrs	r3, r3, #24
 8006018:	f003 030f 	and.w	r3, r3, #15
 800601c:	e00f      	b.n	800603e <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800601e:	bf00      	nop
 8006020:	46020c00 	.word	0x46020c00
 8006024:	0007a120 	.word	0x0007a120
 8006028:	00f42400 	.word	0x00f42400
 800602c:	02dc6c00 	.word	0x02dc6c00
 8006030:	4ba7      	ldr	r3, [pc, #668]	; (80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006032:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006036:	041b      	lsls	r3, r3, #16
 8006038:	0e1b      	lsrs	r3, r3, #24
 800603a:	f003 030f 	and.w	r3, r3, #15
 800603e:	4aa5      	ldr	r2, [pc, #660]	; (80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8006040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006044:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006046:	f001 b833 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800604a:	2300      	movs	r3, #0
 800604c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800604e:	f001 b82f 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8006052:	2300      	movs	r3, #0
 8006054:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006056:	f001 b82b 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800605a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800605e:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8006062:	430b      	orrs	r3, r1
 8006064:	d17f      	bne.n	8006166 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006066:	4b9a      	ldr	r3, [pc, #616]	; (80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006068:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800606c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006070:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8006072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006074:	2b00      	cmp	r3, #0
 8006076:	d165      	bne.n	8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006078:	4b95      	ldr	r3, [pc, #596]	; (80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800607a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800607e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006082:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8006084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006086:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800608a:	d034      	beq.n	80060f6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800608c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006092:	d853      	bhi.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006096:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800609a:	d00b      	beq.n	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 800609c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060a2:	d84b      	bhi.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80060a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d016      	beq.n	80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 80060aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80060b0:	d009      	beq.n	80060c6 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80060b2:	e043      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80060b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060b8:	4618      	mov	r0, r3
 80060ba:	f7ff fa43 	bl	8005544 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80060be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80060c2:	f000 bff5 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060c6:	f107 0318 	add.w	r3, r7, #24
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7ff fb94 	bl	80057f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80060d4:	f000 bfec 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80060d8:	4b7d      	ldr	r3, [pc, #500]	; (80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060e4:	d103      	bne.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 80060e6:	4b7c      	ldr	r3, [pc, #496]	; (80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80060e8:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80060ea:	f000 bfe1 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 80060ee:	2300      	movs	r3, #0
 80060f0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80060f2:	f000 bfdd 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80060f6:	4b76      	ldr	r3, [pc, #472]	; (80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0320 	and.w	r3, r3, #32
 80060fe:	2b20      	cmp	r3, #32
 8006100:	d118      	bne.n	8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006102:	4b73      	ldr	r3, [pc, #460]	; (80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800610a:	2b00      	cmp	r3, #0
 800610c:	d005      	beq.n	800611a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800610e:	4b70      	ldr	r3, [pc, #448]	; (80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	0e1b      	lsrs	r3, r3, #24
 8006114:	f003 030f 	and.w	r3, r3, #15
 8006118:	e006      	b.n	8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 800611a:	4b6d      	ldr	r3, [pc, #436]	; (80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800611c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006120:	041b      	lsls	r3, r3, #16
 8006122:	0e1b      	lsrs	r3, r3, #24
 8006124:	f003 030f 	and.w	r3, r3, #15
 8006128:	4a6a      	ldr	r2, [pc, #424]	; (80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800612a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800612e:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006130:	f000 bfbe 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8006134:	2300      	movs	r3, #0
 8006136:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006138:	f000 bfba 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 800613c:	2300      	movs	r3, #0
 800613e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006140:	f000 bfb6 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8006144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006146:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800614a:	d108      	bne.n	800615e <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800614c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006150:	4618      	mov	r0, r3
 8006152:	f7ff f9f7 	bl	8005544 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006158:	637b      	str	r3, [r7, #52]	; 0x34
 800615a:	f000 bfa9 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 800615e:	2300      	movs	r3, #0
 8006160:	637b      	str	r3, [r7, #52]	; 0x34
 8006162:	f000 bfa5 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8006166:	e9d7 2300 	ldrd	r2, r3, [r7]
 800616a:	1e51      	subs	r1, r2, #1
 800616c:	430b      	orrs	r3, r1
 800616e:	d136      	bne.n	80061de <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006170:	4b57      	ldr	r3, [pc, #348]	; (80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006176:	f003 0303 	and.w	r3, r3, #3
 800617a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800617c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617e:	2b00      	cmp	r3, #0
 8006180:	d104      	bne.n	800618c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8006182:	f7fe fb55 	bl	8004830 <HAL_RCC_GetPCLK2Freq>
 8006186:	6378      	str	r0, [r7, #52]	; 0x34
 8006188:	f000 bf92 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800618c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618e:	2b01      	cmp	r3, #1
 8006190:	d104      	bne.n	800619c <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006192:	f7fe fa1d 	bl	80045d0 <HAL_RCC_GetSysClockFreq>
 8006196:	6378      	str	r0, [r7, #52]	; 0x34
 8006198:	f000 bf8a 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800619c:	4b4c      	ldr	r3, [pc, #304]	; (80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061a8:	d106      	bne.n	80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 80061aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d103      	bne.n	80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 80061b0:	4b4a      	ldr	r3, [pc, #296]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80061b2:	637b      	str	r3, [r7, #52]	; 0x34
 80061b4:	f000 bf7c 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80061b8:	4b45      	ldr	r3, [pc, #276]	; (80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80061ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80061be:	f003 0302 	and.w	r3, r3, #2
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d107      	bne.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80061c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c8:	2b03      	cmp	r3, #3
 80061ca:	d104      	bne.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 80061cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061d0:	637b      	str	r3, [r7, #52]	; 0x34
 80061d2:	f000 bf6d 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80061d6:	2300      	movs	r3, #0
 80061d8:	637b      	str	r3, [r7, #52]	; 0x34
 80061da:	f000 bf69 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 80061de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061e2:	1e91      	subs	r1, r2, #2
 80061e4:	430b      	orrs	r3, r1
 80061e6:	d136      	bne.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80061e8:	4b39      	ldr	r3, [pc, #228]	; (80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80061ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061ee:	f003 030c 	and.w	r3, r3, #12
 80061f2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80061f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d104      	bne.n	8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80061fa:	f7fe fb05 	bl	8004808 <HAL_RCC_GetPCLK1Freq>
 80061fe:	6378      	str	r0, [r7, #52]	; 0x34
 8006200:	f000 bf56 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8006204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006206:	2b04      	cmp	r3, #4
 8006208:	d104      	bne.n	8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800620a:	f7fe f9e1 	bl	80045d0 <HAL_RCC_GetSysClockFreq>
 800620e:	6378      	str	r0, [r7, #52]	; 0x34
 8006210:	f000 bf4e 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006214:	4b2e      	ldr	r3, [pc, #184]	; (80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800621c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006220:	d106      	bne.n	8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8006222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006224:	2b08      	cmp	r3, #8
 8006226:	d103      	bne.n	8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 8006228:	4b2c      	ldr	r3, [pc, #176]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800622a:	637b      	str	r3, [r7, #52]	; 0x34
 800622c:	f000 bf40 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006230:	4b27      	ldr	r3, [pc, #156]	; (80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006232:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006236:	f003 0302 	and.w	r3, r3, #2
 800623a:	2b02      	cmp	r3, #2
 800623c:	d107      	bne.n	800624e <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 800623e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006240:	2b0c      	cmp	r3, #12
 8006242:	d104      	bne.n	800624e <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 8006244:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006248:	637b      	str	r3, [r7, #52]	; 0x34
 800624a:	f000 bf31 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800624e:	2300      	movs	r3, #0
 8006250:	637b      	str	r3, [r7, #52]	; 0x34
 8006252:	f000 bf2d 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006256:	e9d7 2300 	ldrd	r2, r3, [r7]
 800625a:	1f11      	subs	r1, r2, #4
 800625c:	430b      	orrs	r3, r1
 800625e:	d13f      	bne.n	80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006260:	4b1b      	ldr	r3, [pc, #108]	; (80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006266:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800626a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800626c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626e:	2b00      	cmp	r3, #0
 8006270:	d104      	bne.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006272:	f7fe fac9 	bl	8004808 <HAL_RCC_GetPCLK1Freq>
 8006276:	6378      	str	r0, [r7, #52]	; 0x34
 8006278:	f000 bf1a 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800627c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627e:	2b10      	cmp	r3, #16
 8006280:	d104      	bne.n	800628c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006282:	f7fe f9a5 	bl	80045d0 <HAL_RCC_GetSysClockFreq>
 8006286:	6378      	str	r0, [r7, #52]	; 0x34
 8006288:	f000 bf12 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800628c:	4b10      	ldr	r3, [pc, #64]	; (80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006298:	d106      	bne.n	80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800629a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629c:	2b20      	cmp	r3, #32
 800629e:	d103      	bne.n	80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 80062a0:	4b0e      	ldr	r3, [pc, #56]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80062a2:	637b      	str	r3, [r7, #52]	; 0x34
 80062a4:	f000 bf04 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80062a8:	4b09      	ldr	r3, [pc, #36]	; (80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80062aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80062ae:	f003 0302 	and.w	r3, r3, #2
 80062b2:	2b02      	cmp	r3, #2
 80062b4:	d107      	bne.n	80062c6 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 80062b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b8:	2b30      	cmp	r3, #48	; 0x30
 80062ba:	d104      	bne.n	80062c6 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 80062bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062c0:	637b      	str	r3, [r7, #52]	; 0x34
 80062c2:	f000 bef5 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80062c6:	2300      	movs	r3, #0
 80062c8:	637b      	str	r3, [r7, #52]	; 0x34
 80062ca:	f000 bef1 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80062ce:	bf00      	nop
 80062d0:	46020c00 	.word	0x46020c00
 80062d4:	0800d34c 	.word	0x0800d34c
 80062d8:	02dc6c00 	.word	0x02dc6c00
 80062dc:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 80062e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062e4:	f1a2 0108 	sub.w	r1, r2, #8
 80062e8:	430b      	orrs	r3, r1
 80062ea:	d136      	bne.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80062ec:	4ba4      	ldr	r3, [pc, #656]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80062ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80062f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80062f6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80062f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d104      	bne.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80062fe:	f7fe fa83 	bl	8004808 <HAL_RCC_GetPCLK1Freq>
 8006302:	6378      	str	r0, [r7, #52]	; 0x34
 8006304:	f000 bed4 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8006308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630a:	2b40      	cmp	r3, #64	; 0x40
 800630c:	d104      	bne.n	8006318 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800630e:	f7fe f95f 	bl	80045d0 <HAL_RCC_GetSysClockFreq>
 8006312:	6378      	str	r0, [r7, #52]	; 0x34
 8006314:	f000 becc 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006318:	4b99      	ldr	r3, [pc, #612]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006324:	d106      	bne.n	8006334 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8006326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006328:	2b80      	cmp	r3, #128	; 0x80
 800632a:	d103      	bne.n	8006334 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 800632c:	4b95      	ldr	r3, [pc, #596]	; (8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800632e:	637b      	str	r3, [r7, #52]	; 0x34
 8006330:	f000 bebe 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006334:	4b92      	ldr	r3, [pc, #584]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006336:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800633a:	f003 0302 	and.w	r3, r3, #2
 800633e:	2b02      	cmp	r3, #2
 8006340:	d107      	bne.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 8006342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006344:	2bc0      	cmp	r3, #192	; 0xc0
 8006346:	d104      	bne.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 8006348:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800634c:	637b      	str	r3, [r7, #52]	; 0x34
 800634e:	f000 beaf 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8006352:	2300      	movs	r3, #0
 8006354:	637b      	str	r3, [r7, #52]	; 0x34
 8006356:	f000 beab 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800635a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800635e:	f1a2 0110 	sub.w	r1, r2, #16
 8006362:	430b      	orrs	r3, r1
 8006364:	d139      	bne.n	80063da <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006366:	4b86      	ldr	r3, [pc, #536]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800636c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006370:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006374:	2b00      	cmp	r3, #0
 8006376:	d104      	bne.n	8006382 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006378:	f7fe fa46 	bl	8004808 <HAL_RCC_GetPCLK1Freq>
 800637c:	6378      	str	r0, [r7, #52]	; 0x34
 800637e:	f000 be97 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8006382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006384:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006388:	d104      	bne.n	8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800638a:	f7fe f921 	bl	80045d0 <HAL_RCC_GetSysClockFreq>
 800638e:	6378      	str	r0, [r7, #52]	; 0x34
 8006390:	f000 be8e 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006394:	4b7a      	ldr	r3, [pc, #488]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800639c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063a0:	d107      	bne.n	80063b2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 80063a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063a8:	d103      	bne.n	80063b2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 80063aa:	4b76      	ldr	r3, [pc, #472]	; (8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80063ac:	637b      	str	r3, [r7, #52]	; 0x34
 80063ae:	f000 be7f 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80063b2:	4b73      	ldr	r3, [pc, #460]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80063b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063b8:	f003 0302 	and.w	r3, r3, #2
 80063bc:	2b02      	cmp	r3, #2
 80063be:	d108      	bne.n	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 80063c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063c6:	d104      	bne.n	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 80063c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063cc:	637b      	str	r3, [r7, #52]	; 0x34
 80063ce:	f000 be6f 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80063d2:	2300      	movs	r3, #0
 80063d4:	637b      	str	r3, [r7, #52]	; 0x34
 80063d6:	f000 be6b 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80063da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063de:	f1a2 0120 	sub.w	r1, r2, #32
 80063e2:	430b      	orrs	r3, r1
 80063e4:	d158      	bne.n	8006498 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80063e6:	4b66      	ldr	r3, [pc, #408]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80063e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80063ec:	f003 0307 	and.w	r3, r3, #7
 80063f0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80063f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d104      	bne.n	8006402 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80063f8:	f7fe fa2e 	bl	8004858 <HAL_RCC_GetPCLK3Freq>
 80063fc:	6378      	str	r0, [r7, #52]	; 0x34
 80063fe:	f000 be57 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006404:	2b01      	cmp	r3, #1
 8006406:	d104      	bne.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006408:	f7fe f8e2 	bl	80045d0 <HAL_RCC_GetSysClockFreq>
 800640c:	6378      	str	r0, [r7, #52]	; 0x34
 800640e:	f000 be4f 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006412:	4b5b      	ldr	r3, [pc, #364]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800641a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800641e:	d106      	bne.n	800642e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 8006420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006422:	2b02      	cmp	r3, #2
 8006424:	d103      	bne.n	800642e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 8006426:	4b57      	ldr	r3, [pc, #348]	; (8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006428:	637b      	str	r3, [r7, #52]	; 0x34
 800642a:	f000 be41 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800642e:	4b54      	ldr	r3, [pc, #336]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006430:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006434:	f003 0302 	and.w	r3, r3, #2
 8006438:	2b02      	cmp	r3, #2
 800643a:	d107      	bne.n	800644c <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 800643c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643e:	2b03      	cmp	r3, #3
 8006440:	d104      	bne.n	800644c <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 8006442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006446:	637b      	str	r3, [r7, #52]	; 0x34
 8006448:	f000 be32 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800644c:	4b4c      	ldr	r3, [pc, #304]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 0320 	and.w	r3, r3, #32
 8006454:	2b20      	cmp	r3, #32
 8006456:	d11b      	bne.n	8006490 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8006458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645a:	2b04      	cmp	r3, #4
 800645c:	d118      	bne.n	8006490 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800645e:	4b48      	ldr	r3, [pc, #288]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d005      	beq.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 800646a:	4b45      	ldr	r3, [pc, #276]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	0e1b      	lsrs	r3, r3, #24
 8006470:	f003 030f 	and.w	r3, r3, #15
 8006474:	e006      	b.n	8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006476:	4b42      	ldr	r3, [pc, #264]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006478:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800647c:	041b      	lsls	r3, r3, #16
 800647e:	0e1b      	lsrs	r3, r3, #24
 8006480:	f003 030f 	and.w	r3, r3, #15
 8006484:	4a40      	ldr	r2, [pc, #256]	; (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8006486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800648a:	637b      	str	r3, [r7, #52]	; 0x34
 800648c:	f000 be10 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8006490:	2300      	movs	r3, #0
 8006492:	637b      	str	r3, [r7, #52]	; 0x34
 8006494:	f000 be0c 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8006498:	e9d7 2300 	ldrd	r2, r3, [r7]
 800649c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80064a0:	430b      	orrs	r3, r1
 80064a2:	d173      	bne.n	800658c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80064a4:	4b36      	ldr	r3, [pc, #216]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80064a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80064aa:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80064ae:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80064b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064b6:	d104      	bne.n	80064c2 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80064b8:	f7fe f88a 	bl	80045d0 <HAL_RCC_GetSysClockFreq>
 80064bc:	6378      	str	r0, [r7, #52]	; 0x34
 80064be:	f000 bdf7 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80064c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064c8:	d108      	bne.n	80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064ca:	f107 0318 	add.w	r3, r7, #24
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7ff f992 	bl	80057f8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80064d4:	6a3b      	ldr	r3, [r7, #32]
 80064d6:	637b      	str	r3, [r7, #52]	; 0x34
 80064d8:	f000 bdea 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80064dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d104      	bne.n	80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80064e2:	f7fe f977 	bl	80047d4 <HAL_RCC_GetHCLKFreq>
 80064e6:	6378      	str	r0, [r7, #52]	; 0x34
 80064e8:	f000 bde2 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80064ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ee:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80064f2:	d122      	bne.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80064f4:	4b22      	ldr	r3, [pc, #136]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 0320 	and.w	r3, r3, #32
 80064fc:	2b20      	cmp	r3, #32
 80064fe:	d118      	bne.n	8006532 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006500:	4b1f      	ldr	r3, [pc, #124]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006508:	2b00      	cmp	r3, #0
 800650a:	d005      	beq.n	8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 800650c:	4b1c      	ldr	r3, [pc, #112]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	0e1b      	lsrs	r3, r3, #24
 8006512:	f003 030f 	and.w	r3, r3, #15
 8006516:	e006      	b.n	8006526 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8006518:	4b19      	ldr	r3, [pc, #100]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800651a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800651e:	041b      	lsls	r3, r3, #16
 8006520:	0e1b      	lsrs	r3, r3, #24
 8006522:	f003 030f 	and.w	r3, r3, #15
 8006526:	4a18      	ldr	r2, [pc, #96]	; (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8006528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800652c:	637b      	str	r3, [r7, #52]	; 0x34
 800652e:	f000 bdbf 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8006532:	2300      	movs	r3, #0
 8006534:	637b      	str	r3, [r7, #52]	; 0x34
 8006536:	f000 bdbb 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800653a:	4b11      	ldr	r3, [pc, #68]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006542:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006546:	d107      	bne.n	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 8006548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800654e:	d103      	bne.n	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 8006550:	4b0c      	ldr	r3, [pc, #48]	; (8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006552:	637b      	str	r3, [r7, #52]	; 0x34
 8006554:	f000 bdac 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006558:	4b09      	ldr	r3, [pc, #36]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006564:	d107      	bne.n	8006576 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006568:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800656c:	d103      	bne.n	8006576 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 800656e:	4b05      	ldr	r3, [pc, #20]	; (8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006570:	637b      	str	r3, [r7, #52]	; 0x34
 8006572:	f000 bd9d 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8006576:	2300      	movs	r3, #0
 8006578:	637b      	str	r3, [r7, #52]	; 0x34
 800657a:	f000 bd99 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800657e:	bf00      	nop
 8006580:	46020c00 	.word	0x46020c00
 8006584:	00f42400 	.word	0x00f42400
 8006588:	0800d34c 	.word	0x0800d34c
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800658c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006590:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8006594:	430b      	orrs	r3, r1
 8006596:	d158      	bne.n	800664a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8006598:	4bad      	ldr	r3, [pc, #692]	; (8006850 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800659a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800659e:	f003 0307 	and.w	r3, r3, #7
 80065a2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80065a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a6:	2b04      	cmp	r3, #4
 80065a8:	d84b      	bhi.n	8006642 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80065aa:	a201      	add	r2, pc, #4	; (adr r2, 80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80065ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b0:	080065e9 	.word	0x080065e9
 80065b4:	080065c5 	.word	0x080065c5
 80065b8:	080065d7 	.word	0x080065d7
 80065bc:	080065f3 	.word	0x080065f3
 80065c0:	080065fd 	.word	0x080065fd
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80065c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7fe ffbb 	bl	8005544 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80065ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065d2:	f000 bd6d 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065d6:	f107 030c 	add.w	r3, r7, #12
 80065da:	4618      	mov	r0, r3
 80065dc:	f7ff fa66 	bl	8005aac <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065e4:	f000 bd64 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80065e8:	f7fe f8f4 	bl	80047d4 <HAL_RCC_GetHCLKFreq>
 80065ec:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80065ee:	f000 bd5f 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80065f2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80065f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065f8:	f000 bd5a 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80065fc:	4b94      	ldr	r3, [pc, #592]	; (8006850 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0320 	and.w	r3, r3, #32
 8006604:	2b20      	cmp	r3, #32
 8006606:	d118      	bne.n	800663a <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006608:	4b91      	ldr	r3, [pc, #580]	; (8006850 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006610:	2b00      	cmp	r3, #0
 8006612:	d005      	beq.n	8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 8006614:	4b8e      	ldr	r3, [pc, #568]	; (8006850 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	0e1b      	lsrs	r3, r3, #24
 800661a:	f003 030f 	and.w	r3, r3, #15
 800661e:	e006      	b.n	800662e <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 8006620:	4b8b      	ldr	r3, [pc, #556]	; (8006850 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006622:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006626:	041b      	lsls	r3, r3, #16
 8006628:	0e1b      	lsrs	r3, r3, #24
 800662a:	f003 030f 	and.w	r3, r3, #15
 800662e:	4a89      	ldr	r2, [pc, #548]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8006630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006634:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006636:	f000 bd3b 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800663a:	2300      	movs	r3, #0
 800663c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800663e:	f000 bd37 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006642:	2300      	movs	r3, #0
 8006644:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006646:	f000 bd33 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800664a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800664e:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8006652:	430b      	orrs	r3, r1
 8006654:	d167      	bne.n	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8006656:	4b7e      	ldr	r3, [pc, #504]	; (8006850 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006658:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800665c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006660:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006664:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006668:	d036      	beq.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 800666a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006670:	d855      	bhi.n	800671e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8006672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006674:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006678:	d029      	beq.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800667a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006680:	d84d      	bhi.n	800671e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8006682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006684:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006688:	d013      	beq.n	80066b2 <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 800668a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006690:	d845      	bhi.n	800671e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8006692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006694:	2b00      	cmp	r3, #0
 8006696:	d015      	beq.n	80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8006698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800669e:	d13e      	bne.n	800671e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80066a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7fe ff4d 	bl	8005544 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80066aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066ae:	f000 bcff 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066b2:	f107 030c 	add.w	r3, r7, #12
 80066b6:	4618      	mov	r0, r3
 80066b8:	f7ff f9f8 	bl	8005aac <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066c0:	f000 bcf6 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80066c4:	f7fe f886 	bl	80047d4 <HAL_RCC_GetHCLKFreq>
 80066c8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80066ca:	f000 bcf1 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80066ce:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80066d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066d4:	f000 bcec 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80066d8:	4b5d      	ldr	r3, [pc, #372]	; (8006850 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0320 	and.w	r3, r3, #32
 80066e0:	2b20      	cmp	r3, #32
 80066e2:	d118      	bne.n	8006716 <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80066e4:	4b5a      	ldr	r3, [pc, #360]	; (8006850 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d005      	beq.n	80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 80066f0:	4b57      	ldr	r3, [pc, #348]	; (8006850 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	0e1b      	lsrs	r3, r3, #24
 80066f6:	f003 030f 	and.w	r3, r3, #15
 80066fa:	e006      	b.n	800670a <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 80066fc:	4b54      	ldr	r3, [pc, #336]	; (8006850 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80066fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006702:	041b      	lsls	r3, r3, #16
 8006704:	0e1b      	lsrs	r3, r3, #24
 8006706:	f003 030f 	and.w	r3, r3, #15
 800670a:	4a52      	ldr	r2, [pc, #328]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800670c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006710:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006712:	f000 bccd 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006716:	2300      	movs	r3, #0
 8006718:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800671a:	f000 bcc9 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800671e:	2300      	movs	r3, #0
 8006720:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006722:	f000 bcc5 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8006726:	e9d7 2300 	ldrd	r2, r3, [r7]
 800672a:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800672e:	430b      	orrs	r3, r1
 8006730:	d14c      	bne.n	80067cc <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006732:	4b47      	ldr	r3, [pc, #284]	; (8006850 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006734:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006738:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800673c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800673e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006740:	2b00      	cmp	r3, #0
 8006742:	d104      	bne.n	800674e <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006744:	f7fe f860 	bl	8004808 <HAL_RCC_GetPCLK1Freq>
 8006748:	6378      	str	r0, [r7, #52]	; 0x34
 800674a:	f000 bcb1 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800674e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006754:	d104      	bne.n	8006760 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006756:	f7fd ff3b 	bl	80045d0 <HAL_RCC_GetSysClockFreq>
 800675a:	6378      	str	r0, [r7, #52]	; 0x34
 800675c:	f000 bca8 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006760:	4b3b      	ldr	r3, [pc, #236]	; (8006850 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006768:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800676c:	d107      	bne.n	800677e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 800676e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006770:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006774:	d103      	bne.n	800677e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 8006776:	4b38      	ldr	r3, [pc, #224]	; (8006858 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006778:	637b      	str	r3, [r7, #52]	; 0x34
 800677a:	f000 bc99 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800677e:	4b34      	ldr	r3, [pc, #208]	; (8006850 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0320 	and.w	r3, r3, #32
 8006786:	2b20      	cmp	r3, #32
 8006788:	d11c      	bne.n	80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 800678a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006790:	d118      	bne.n	80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006792:	4b2f      	ldr	r3, [pc, #188]	; (8006850 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d005      	beq.n	80067aa <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 800679e:	4b2c      	ldr	r3, [pc, #176]	; (8006850 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	0e1b      	lsrs	r3, r3, #24
 80067a4:	f003 030f 	and.w	r3, r3, #15
 80067a8:	e006      	b.n	80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 80067aa:	4b29      	ldr	r3, [pc, #164]	; (8006850 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80067ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80067b0:	041b      	lsls	r3, r3, #16
 80067b2:	0e1b      	lsrs	r3, r3, #24
 80067b4:	f003 030f 	and.w	r3, r3, #15
 80067b8:	4a26      	ldr	r2, [pc, #152]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80067ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067be:	637b      	str	r3, [r7, #52]	; 0x34
 80067c0:	f000 bc76 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80067c4:	2300      	movs	r3, #0
 80067c6:	637b      	str	r3, [r7, #52]	; 0x34
 80067c8:	f000 bc72 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80067cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067d0:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 80067d4:	430b      	orrs	r3, r1
 80067d6:	d152      	bne.n	800687e <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80067d8:	4b1d      	ldr	r3, [pc, #116]	; (8006850 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80067da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80067de:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80067e2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80067e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d104      	bne.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80067ea:	f7fe f80d 	bl	8004808 <HAL_RCC_GetPCLK1Freq>
 80067ee:	6378      	str	r0, [r7, #52]	; 0x34
 80067f0:	f000 bc5e 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80067f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067fa:	d104      	bne.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80067fc:	f7fd fee8 	bl	80045d0 <HAL_RCC_GetSysClockFreq>
 8006800:	6378      	str	r0, [r7, #52]	; 0x34
 8006802:	f000 bc55 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006806:	4b12      	ldr	r3, [pc, #72]	; (8006850 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800680e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006812:	d107      	bne.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 8006814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006816:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800681a:	d103      	bne.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 800681c:	4b0e      	ldr	r3, [pc, #56]	; (8006858 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800681e:	637b      	str	r3, [r7, #52]	; 0x34
 8006820:	f000 bc46 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8006824:	4b0a      	ldr	r3, [pc, #40]	; (8006850 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 0320 	and.w	r3, r3, #32
 800682c:	2b20      	cmp	r3, #32
 800682e:	d122      	bne.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 8006830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006832:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006836:	d11e      	bne.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006838:	4b05      	ldr	r3, [pc, #20]	; (8006850 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00b      	beq.n	800685c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 8006844:	4b02      	ldr	r3, [pc, #8]	; (8006850 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	0e1b      	lsrs	r3, r3, #24
 800684a:	f003 030f 	and.w	r3, r3, #15
 800684e:	e00c      	b.n	800686a <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8006850:	46020c00 	.word	0x46020c00
 8006854:	0800d34c 	.word	0x0800d34c
 8006858:	00f42400 	.word	0x00f42400
 800685c:	4ba1      	ldr	r3, [pc, #644]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800685e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006862:	041b      	lsls	r3, r3, #16
 8006864:	0e1b      	lsrs	r3, r3, #24
 8006866:	f003 030f 	and.w	r3, r3, #15
 800686a:	4a9f      	ldr	r2, [pc, #636]	; (8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800686c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006870:	637b      	str	r3, [r7, #52]	; 0x34
 8006872:	f000 bc1d 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8006876:	2300      	movs	r3, #0
 8006878:	637b      	str	r3, [r7, #52]	; 0x34
 800687a:	f000 bc19 	b.w	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800687e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006882:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006886:	430b      	orrs	r3, r1
 8006888:	d151      	bne.n	800692e <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800688a:	4b96      	ldr	r3, [pc, #600]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800688c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006890:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006894:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006898:	2bc0      	cmp	r3, #192	; 0xc0
 800689a:	d024      	beq.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800689c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689e:	2bc0      	cmp	r3, #192	; 0xc0
 80068a0:	d842      	bhi.n	8006928 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 80068a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a4:	2b80      	cmp	r3, #128	; 0x80
 80068a6:	d00d      	beq.n	80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80068a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068aa:	2b80      	cmp	r3, #128	; 0x80
 80068ac:	d83c      	bhi.n	8006928 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 80068ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d003      	beq.n	80068bc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 80068b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b6:	2b40      	cmp	r3, #64	; 0x40
 80068b8:	d011      	beq.n	80068de <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 80068ba:	e035      	b.n	8006928 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80068bc:	f7fd ffcc 	bl	8004858 <HAL_RCC_GetPCLK3Freq>
 80068c0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80068c2:	e3f5      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80068c4:	4b87      	ldr	r3, [pc, #540]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068d0:	d102      	bne.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 80068d2:	4b86      	ldr	r3, [pc, #536]	; (8006aec <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80068d4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80068d6:	e3eb      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80068d8:	2300      	movs	r3, #0
 80068da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068dc:	e3e8      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80068de:	f7fd fe77 	bl	80045d0 <HAL_RCC_GetSysClockFreq>
 80068e2:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80068e4:	e3e4      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80068e6:	4b7f      	ldr	r3, [pc, #508]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 0320 	and.w	r3, r3, #32
 80068ee:	2b20      	cmp	r3, #32
 80068f0:	d117      	bne.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80068f2:	4b7c      	ldr	r3, [pc, #496]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d005      	beq.n	800690a <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 80068fe:	4b79      	ldr	r3, [pc, #484]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	0e1b      	lsrs	r3, r3, #24
 8006904:	f003 030f 	and.w	r3, r3, #15
 8006908:	e006      	b.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 800690a:	4b76      	ldr	r3, [pc, #472]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800690c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006910:	041b      	lsls	r3, r3, #16
 8006912:	0e1b      	lsrs	r3, r3, #24
 8006914:	f003 030f 	and.w	r3, r3, #15
 8006918:	4a73      	ldr	r2, [pc, #460]	; (8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800691a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800691e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006920:	e3c6      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006922:	2300      	movs	r3, #0
 8006924:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006926:	e3c3      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 8006928:	2300      	movs	r3, #0
 800692a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800692c:	e3c0      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800692e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006932:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8006936:	430b      	orrs	r3, r1
 8006938:	d147      	bne.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800693a:	4b6a      	ldr	r3, [pc, #424]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800693c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006940:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006944:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8006946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006948:	2b00      	cmp	r3, #0
 800694a:	d103      	bne.n	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800694c:	f7fd ff5c 	bl	8004808 <HAL_RCC_GetPCLK1Freq>
 8006950:	6378      	str	r0, [r7, #52]	; 0x34
 8006952:	e3ad      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8006954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006956:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800695a:	d103      	bne.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800695c:	f7fd fe38 	bl	80045d0 <HAL_RCC_GetSysClockFreq>
 8006960:	6378      	str	r0, [r7, #52]	; 0x34
 8006962:	e3a5      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006964:	4b5f      	ldr	r3, [pc, #380]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800696c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006970:	d106      	bne.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8006972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006974:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006978:	d102      	bne.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 800697a:	4b5c      	ldr	r3, [pc, #368]	; (8006aec <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800697c:	637b      	str	r3, [r7, #52]	; 0x34
 800697e:	e397      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8006980:	4b58      	ldr	r3, [pc, #352]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 0320 	and.w	r3, r3, #32
 8006988:	2b20      	cmp	r3, #32
 800698a:	d11b      	bne.n	80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 800698c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800698e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006992:	d117      	bne.n	80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006994:	4b53      	ldr	r3, [pc, #332]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800699c:	2b00      	cmp	r3, #0
 800699e:	d005      	beq.n	80069ac <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 80069a0:	4b50      	ldr	r3, [pc, #320]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	0e1b      	lsrs	r3, r3, #24
 80069a6:	f003 030f 	and.w	r3, r3, #15
 80069aa:	e006      	b.n	80069ba <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 80069ac:	4b4d      	ldr	r3, [pc, #308]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80069ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80069b2:	041b      	lsls	r3, r3, #16
 80069b4:	0e1b      	lsrs	r3, r3, #24
 80069b6:	f003 030f 	and.w	r3, r3, #15
 80069ba:	4a4b      	ldr	r2, [pc, #300]	; (8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80069bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069c0:	637b      	str	r3, [r7, #52]	; 0x34
 80069c2:	e375      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80069c4:	2300      	movs	r3, #0
 80069c6:	637b      	str	r3, [r7, #52]	; 0x34
 80069c8:	e372      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80069ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069ce:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80069d2:	430b      	orrs	r3, r1
 80069d4:	d164      	bne.n	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80069d6:	4b43      	ldr	r3, [pc, #268]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80069d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80069dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069e0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80069e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d120      	bne.n	8006a2a <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80069e8:	4b3e      	ldr	r3, [pc, #248]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 0320 	and.w	r3, r3, #32
 80069f0:	2b20      	cmp	r3, #32
 80069f2:	d117      	bne.n	8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80069f4:	4b3b      	ldr	r3, [pc, #236]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d005      	beq.n	8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8006a00:	4b38      	ldr	r3, [pc, #224]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	0e1b      	lsrs	r3, r3, #24
 8006a06:	f003 030f 	and.w	r3, r3, #15
 8006a0a:	e006      	b.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8006a0c:	4b35      	ldr	r3, [pc, #212]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006a0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006a12:	041b      	lsls	r3, r3, #16
 8006a14:	0e1b      	lsrs	r3, r3, #24
 8006a16:	f003 030f 	and.w	r3, r3, #15
 8006a1a:	4a33      	ldr	r2, [pc, #204]	; (8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a20:	637b      	str	r3, [r7, #52]	; 0x34
 8006a22:	e345      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8006a24:	2300      	movs	r3, #0
 8006a26:	637b      	str	r3, [r7, #52]	; 0x34
 8006a28:	e342      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8006a2a:	4b2e      	ldr	r3, [pc, #184]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006a2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a38:	d112      	bne.n	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a40:	d10e      	bne.n	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006a42:	4b28      	ldr	r3, [pc, #160]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006a44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a50:	d102      	bne.n	8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8006a52:	23fa      	movs	r3, #250	; 0xfa
 8006a54:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006a56:	e32b      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006a58:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006a5c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006a5e:	e327      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8006a60:	4b20      	ldr	r3, [pc, #128]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a6c:	d106      	bne.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8006a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a74:	d102      	bne.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8006a76:	4b1d      	ldr	r3, [pc, #116]	; (8006aec <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006a78:	637b      	str	r3, [r7, #52]	; 0x34
 8006a7a:	e319      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8006a7c:	4b19      	ldr	r3, [pc, #100]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006a7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a82:	f003 0302 	and.w	r3, r3, #2
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d107      	bne.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8006a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a90:	d103      	bne.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8006a92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a96:	637b      	str	r3, [r7, #52]	; 0x34
 8006a98:	e30a      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	637b      	str	r3, [r7, #52]	; 0x34
 8006a9e:	e307      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8006aa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006aa4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8006aa8:	430b      	orrs	r3, r1
 8006aaa:	d16b      	bne.n	8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006aac:	4b0d      	ldr	r3, [pc, #52]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006aae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ab2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ab6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8006ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d127      	bne.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006abe:	4b09      	ldr	r3, [pc, #36]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0320 	and.w	r3, r3, #32
 8006ac6:	2b20      	cmp	r3, #32
 8006ac8:	d11e      	bne.n	8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006aca:	4b06      	ldr	r3, [pc, #24]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00c      	beq.n	8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 8006ad6:	4b03      	ldr	r3, [pc, #12]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	0e1b      	lsrs	r3, r3, #24
 8006adc:	f003 030f 	and.w	r3, r3, #15
 8006ae0:	e00d      	b.n	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8006ae2:	bf00      	nop
 8006ae4:	46020c00 	.word	0x46020c00
 8006ae8:	0800d34c 	.word	0x0800d34c
 8006aec:	00f42400 	.word	0x00f42400
 8006af0:	4b94      	ldr	r3, [pc, #592]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006af2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006af6:	041b      	lsls	r3, r3, #16
 8006af8:	0e1b      	lsrs	r3, r3, #24
 8006afa:	f003 030f 	and.w	r3, r3, #15
 8006afe:	4a92      	ldr	r2, [pc, #584]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8006b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b04:	637b      	str	r3, [r7, #52]	; 0x34
 8006b06:	e2d3      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	637b      	str	r3, [r7, #52]	; 0x34
 8006b0c:	e2d0      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8006b0e:	4b8d      	ldr	r3, [pc, #564]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006b10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b1c:	d112      	bne.n	8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 8006b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b24:	d10e      	bne.n	8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006b26:	4b87      	ldr	r3, [pc, #540]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006b28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b34:	d102      	bne.n	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 8006b36:	23fa      	movs	r3, #250	; 0xfa
 8006b38:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006b3a:	e2b9      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006b3c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006b40:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006b42:	e2b5      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006b44:	4b7f      	ldr	r3, [pc, #508]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b50:	d106      	bne.n	8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 8006b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b58:	d102      	bne.n	8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 8006b5a:	4b7c      	ldr	r3, [pc, #496]	; (8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006b5c:	637b      	str	r3, [r7, #52]	; 0x34
 8006b5e:	e2a7      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006b60:	4b78      	ldr	r3, [pc, #480]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006b62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b66:	f003 0302 	and.w	r3, r3, #2
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d107      	bne.n	8006b7e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 8006b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b74:	d103      	bne.n	8006b7e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 8006b76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b7a:	637b      	str	r3, [r7, #52]	; 0x34
 8006b7c:	e298      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	637b      	str	r3, [r7, #52]	; 0x34
 8006b82:	e295      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8006b84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b88:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006b8c:	430b      	orrs	r3, r1
 8006b8e:	d147      	bne.n	8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006b90:	4b6c      	ldr	r3, [pc, #432]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b96:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006b9a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d103      	bne.n	8006baa <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006ba2:	f7fd fe31 	bl	8004808 <HAL_RCC_GetPCLK1Freq>
 8006ba6:	6378      	str	r0, [r7, #52]	; 0x34
 8006ba8:	e282      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8006baa:	4b66      	ldr	r3, [pc, #408]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006bac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006bb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bb8:	d112      	bne.n	8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 8006bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bbc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006bc0:	d10e      	bne.n	8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006bc2:	4b60      	ldr	r3, [pc, #384]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006bc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bcc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bd0:	d102      	bne.n	8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 8006bd2:	23fa      	movs	r3, #250	; 0xfa
 8006bd4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006bd6:	e26b      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006bd8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006bdc:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006bde:	e267      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8006be0:	4b58      	ldr	r3, [pc, #352]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bec:	d106      	bne.n	8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 8006bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006bf4:	d102      	bne.n	8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 8006bf6:	4b55      	ldr	r3, [pc, #340]	; (8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006bf8:	637b      	str	r3, [r7, #52]	; 0x34
 8006bfa:	e259      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8006bfc:	4b51      	ldr	r3, [pc, #324]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006bfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c02:	f003 0302 	and.w	r3, r3, #2
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	d107      	bne.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006c10:	d103      	bne.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 8006c12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c16:	637b      	str	r3, [r7, #52]	; 0x34
 8006c18:	e24a      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	637b      	str	r3, [r7, #52]	; 0x34
 8006c1e:	e247      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8006c20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c24:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8006c28:	430b      	orrs	r3, r1
 8006c2a:	d12d      	bne.n	8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8006c2c:	4b45      	ldr	r3, [pc, #276]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c32:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8006c36:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8006c38:	4b42      	ldr	r3, [pc, #264]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c44:	d105      	bne.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 8006c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d102      	bne.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 8006c4c:	4b3f      	ldr	r3, [pc, #252]	; (8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006c4e:	637b      	str	r3, [r7, #52]	; 0x34
 8006c50:	e22e      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8006c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c58:	d107      	bne.n	8006c6a <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f7fe fc70 	bl	8005544 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c66:	637b      	str	r3, [r7, #52]	; 0x34
 8006c68:	e222      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8006c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c70:	d107      	bne.n	8006c82 <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c72:	f107 0318 	add.w	r3, r7, #24
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7fe fdbe 	bl	80057f8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	637b      	str	r3, [r7, #52]	; 0x34
 8006c80:	e216      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8006c82:	2300      	movs	r3, #0
 8006c84:	637b      	str	r3, [r7, #52]	; 0x34
 8006c86:	e213      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8006c88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c8c:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8006c90:	430b      	orrs	r3, r1
 8006c92:	d15d      	bne.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006c94:	4b2b      	ldr	r3, [pc, #172]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c9a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006c9e:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8006ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ca6:	d028      	beq.n	8006cfa <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 8006ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006caa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006cae:	d845      	bhi.n	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cb6:	d013      	beq.n	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 8006cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cbe:	d83d      	bhi.n	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d004      	beq.n	8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8006cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ccc:	d004      	beq.n	8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 8006cce:	e035      	b.n	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8006cd0:	f7fd fdae 	bl	8004830 <HAL_RCC_GetPCLK2Freq>
 8006cd4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006cd6:	e1eb      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006cd8:	f7fd fc7a 	bl	80045d0 <HAL_RCC_GetSysClockFreq>
 8006cdc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006cde:	e1e7      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ce0:	4b18      	ldr	r3, [pc, #96]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ce8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cec:	d102      	bne.n	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 8006cee:	4b17      	ldr	r3, [pc, #92]	; (8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006cf0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006cf2:	e1dd      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006cf8:	e1da      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006cfa:	4b12      	ldr	r3, [pc, #72]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0320 	and.w	r3, r3, #32
 8006d02:	2b20      	cmp	r3, #32
 8006d04:	d117      	bne.n	8006d36 <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006d06:	4b0f      	ldr	r3, [pc, #60]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d005      	beq.n	8006d1e <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8006d12:	4b0c      	ldr	r3, [pc, #48]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	0e1b      	lsrs	r3, r3, #24
 8006d18:	f003 030f 	and.w	r3, r3, #15
 8006d1c:	e006      	b.n	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 8006d1e:	4b09      	ldr	r3, [pc, #36]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006d20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006d24:	041b      	lsls	r3, r3, #16
 8006d26:	0e1b      	lsrs	r3, r3, #24
 8006d28:	f003 030f 	and.w	r3, r3, #15
 8006d2c:	4a06      	ldr	r2, [pc, #24]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8006d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d32:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006d34:	e1bc      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006d36:	2300      	movs	r3, #0
 8006d38:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d3a:	e1b9      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d40:	e1b6      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8006d42:	bf00      	nop
 8006d44:	46020c00 	.word	0x46020c00
 8006d48:	0800d34c 	.word	0x0800d34c
 8006d4c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8006d50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d54:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8006d58:	430b      	orrs	r3, r1
 8006d5a:	d156      	bne.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006d5c:	4ba5      	ldr	r3, [pc, #660]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d62:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006d66:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8006d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d6e:	d028      	beq.n	8006dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 8006d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d72:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d76:	d845      	bhi.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8006d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d7e:	d013      	beq.n	8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 8006d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d86:	d83d      	bhi.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8006d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d004      	beq.n	8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 8006d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d94:	d004      	beq.n	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8006d96:	e035      	b.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8006d98:	f7fd fd36 	bl	8004808 <HAL_RCC_GetPCLK1Freq>
 8006d9c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006d9e:	e187      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006da0:	f7fd fc16 	bl	80045d0 <HAL_RCC_GetSysClockFreq>
 8006da4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006da6:	e183      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006da8:	4b92      	ldr	r3, [pc, #584]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006db0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006db4:	d102      	bne.n	8006dbc <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 8006db6:	4b90      	ldr	r3, [pc, #576]	; (8006ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8006db8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006dba:	e179      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006dc0:	e176      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006dc2:	4b8c      	ldr	r3, [pc, #560]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 0320 	and.w	r3, r3, #32
 8006dca:	2b20      	cmp	r3, #32
 8006dcc:	d117      	bne.n	8006dfe <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006dce:	4b89      	ldr	r3, [pc, #548]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d005      	beq.n	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 8006dda:	4b86      	ldr	r3, [pc, #536]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	0e1b      	lsrs	r3, r3, #24
 8006de0:	f003 030f 	and.w	r3, r3, #15
 8006de4:	e006      	b.n	8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 8006de6:	4b83      	ldr	r3, [pc, #524]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006de8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006dec:	041b      	lsls	r3, r3, #16
 8006dee:	0e1b      	lsrs	r3, r3, #24
 8006df0:	f003 030f 	and.w	r3, r3, #15
 8006df4:	4a81      	ldr	r2, [pc, #516]	; (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8006df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dfa:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006dfc:	e158      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e02:	e155      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006e04:	2300      	movs	r3, #0
 8006e06:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e08:	e152      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8006e0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e0e:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8006e12:	430b      	orrs	r3, r1
 8006e14:	d177      	bne.n	8006f06 <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006e16:	4b77      	ldr	r3, [pc, #476]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006e18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006e1c:	f003 0318 	and.w	r3, r3, #24
 8006e20:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8006e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e24:	2b18      	cmp	r3, #24
 8006e26:	d86b      	bhi.n	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 8006e28:	a201      	add	r2, pc, #4	; (adr r2, 8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 8006e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e2e:	bf00      	nop
 8006e30:	08006e95 	.word	0x08006e95
 8006e34:	08006f01 	.word	0x08006f01
 8006e38:	08006f01 	.word	0x08006f01
 8006e3c:	08006f01 	.word	0x08006f01
 8006e40:	08006f01 	.word	0x08006f01
 8006e44:	08006f01 	.word	0x08006f01
 8006e48:	08006f01 	.word	0x08006f01
 8006e4c:	08006f01 	.word	0x08006f01
 8006e50:	08006e9d 	.word	0x08006e9d
 8006e54:	08006f01 	.word	0x08006f01
 8006e58:	08006f01 	.word	0x08006f01
 8006e5c:	08006f01 	.word	0x08006f01
 8006e60:	08006f01 	.word	0x08006f01
 8006e64:	08006f01 	.word	0x08006f01
 8006e68:	08006f01 	.word	0x08006f01
 8006e6c:	08006f01 	.word	0x08006f01
 8006e70:	08006ea5 	.word	0x08006ea5
 8006e74:	08006f01 	.word	0x08006f01
 8006e78:	08006f01 	.word	0x08006f01
 8006e7c:	08006f01 	.word	0x08006f01
 8006e80:	08006f01 	.word	0x08006f01
 8006e84:	08006f01 	.word	0x08006f01
 8006e88:	08006f01 	.word	0x08006f01
 8006e8c:	08006f01 	.word	0x08006f01
 8006e90:	08006ebf 	.word	0x08006ebf
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8006e94:	f7fd fce0 	bl	8004858 <HAL_RCC_GetPCLK3Freq>
 8006e98:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006e9a:	e109      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006e9c:	f7fd fb98 	bl	80045d0 <HAL_RCC_GetSysClockFreq>
 8006ea0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006ea2:	e105      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ea4:	4b53      	ldr	r3, [pc, #332]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eb0:	d102      	bne.n	8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 8006eb2:	4b51      	ldr	r3, [pc, #324]	; (8006ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8006eb4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006eb6:	e0fb      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ebc:	e0f8      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006ebe:	4b4d      	ldr	r3, [pc, #308]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 0320 	and.w	r3, r3, #32
 8006ec6:	2b20      	cmp	r3, #32
 8006ec8:	d117      	bne.n	8006efa <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006eca:	4b4a      	ldr	r3, [pc, #296]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d005      	beq.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 8006ed6:	4b47      	ldr	r3, [pc, #284]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	0e1b      	lsrs	r3, r3, #24
 8006edc:	f003 030f 	and.w	r3, r3, #15
 8006ee0:	e006      	b.n	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8006ee2:	4b44      	ldr	r3, [pc, #272]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006ee4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006ee8:	041b      	lsls	r3, r3, #16
 8006eea:	0e1b      	lsrs	r3, r3, #24
 8006eec:	f003 030f 	and.w	r3, r3, #15
 8006ef0:	4a42      	ldr	r2, [pc, #264]	; (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8006ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ef6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006ef8:	e0da      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006efa:	2300      	movs	r3, #0
 8006efc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006efe:	e0d7      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006f00:	2300      	movs	r3, #0
 8006f02:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f04:	e0d4      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8006f06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f0a:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8006f0e:	430b      	orrs	r3, r1
 8006f10:	d155      	bne.n	8006fbe <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006f12:	4b38      	ldr	r3, [pc, #224]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006f14:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006f18:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006f1c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f20:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f24:	d013      	beq.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 8006f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f28:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f2c:	d844      	bhi.n	8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8006f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f34:	d013      	beq.n	8006f5e <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 8006f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f3c:	d83c      	bhi.n	8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8006f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d014      	beq.n	8006f6e <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 8006f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f4a:	d014      	beq.n	8006f76 <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 8006f4c:	e034      	b.n	8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f4e:	f107 0318 	add.w	r3, r7, #24
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7fe fc50 	bl	80057f8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006f58:	69fb      	ldr	r3, [r7, #28]
 8006f5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f5c:	e0a8      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7fe faee 	bl	8005544 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f6c:	e0a0      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006f6e:	f7fd fb2f 	bl	80045d0 <HAL_RCC_GetSysClockFreq>
 8006f72:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006f74:	e09c      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006f76:	4b1f      	ldr	r3, [pc, #124]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 0320 	and.w	r3, r3, #32
 8006f7e:	2b20      	cmp	r3, #32
 8006f80:	d117      	bne.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006f82:	4b1c      	ldr	r3, [pc, #112]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d005      	beq.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8006f8e:	4b19      	ldr	r3, [pc, #100]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	0e1b      	lsrs	r3, r3, #24
 8006f94:	f003 030f 	and.w	r3, r3, #15
 8006f98:	e006      	b.n	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 8006f9a:	4b16      	ldr	r3, [pc, #88]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006f9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006fa0:	041b      	lsls	r3, r3, #16
 8006fa2:	0e1b      	lsrs	r3, r3, #24
 8006fa4:	f003 030f 	and.w	r3, r3, #15
 8006fa8:	4a14      	ldr	r2, [pc, #80]	; (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8006faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fae:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006fb0:	e07e      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006fb6:	e07b      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006fbc:	e078      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8006fbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fc2:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8006fc6:	430b      	orrs	r3, r1
 8006fc8:	d138      	bne.n	800703c <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8006fca:	4b0a      	ldr	r3, [pc, #40]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006fcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006fd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fd4:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8006fd6:	4b07      	ldr	r3, [pc, #28]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006fd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006fdc:	f003 0302 	and.w	r3, r3, #2
 8006fe0:	2b02      	cmp	r3, #2
 8006fe2:	d10d      	bne.n	8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8006fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d10a      	bne.n	8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 8006fea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fee:	637b      	str	r3, [r7, #52]	; 0x34
 8006ff0:	e05e      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8006ff2:	bf00      	nop
 8006ff4:	46020c00 	.word	0x46020c00
 8006ff8:	00f42400 	.word	0x00f42400
 8006ffc:	0800d34c 	.word	0x0800d34c
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8007000:	4b2e      	ldr	r3, [pc, #184]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007002:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007006:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800700a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800700e:	d112      	bne.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 8007010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007012:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007016:	d10e      	bne.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007018:	4b28      	ldr	r3, [pc, #160]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800701a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800701e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007022:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007026:	d102      	bne.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 8007028:	23fa      	movs	r3, #250	; 0xfa
 800702a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800702c:	e040      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800702e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007032:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007034:	e03c      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8007036:	2300      	movs	r3, #0
 8007038:	637b      	str	r3, [r7, #52]	; 0x34
 800703a:	e039      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800703c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007040:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8007044:	430b      	orrs	r3, r1
 8007046:	d131      	bne.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007048:	4b1c      	ldr	r3, [pc, #112]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800704a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800704e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007052:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007054:	4b19      	ldr	r3, [pc, #100]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800705c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007060:	d105      	bne.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 8007062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007064:	2b00      	cmp	r3, #0
 8007066:	d102      	bne.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 8007068:	4b15      	ldr	r3, [pc, #84]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 800706a:	637b      	str	r3, [r7, #52]	; 0x34
 800706c:	e020      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800706e:	4b13      	ldr	r3, [pc, #76]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007076:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800707a:	d106      	bne.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 800707c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007082:	d102      	bne.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 8007084:	4b0f      	ldr	r3, [pc, #60]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 8007086:	637b      	str	r3, [r7, #52]	; 0x34
 8007088:	e012      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800708a:	4b0c      	ldr	r3, [pc, #48]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007096:	d106      	bne.n	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8007098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800709e:	d102      	bne.n	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 80070a0:	4b09      	ldr	r3, [pc, #36]	; (80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80070a2:	637b      	str	r3, [r7, #52]	; 0x34
 80070a4:	e004      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 80070a6:	2300      	movs	r3, #0
 80070a8:	637b      	str	r3, [r7, #52]	; 0x34
 80070aa:	e001      	b.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 80070ac:	2300      	movs	r3, #0
 80070ae:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 80070b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3738      	adds	r7, #56	; 0x38
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	bf00      	nop
 80070bc:	46020c00 	.word	0x46020c00
 80070c0:	02dc6c00 	.word	0x02dc6c00
 80070c4:	016e3600 	.word	0x016e3600
 80070c8:	00f42400 	.word	0x00f42400

080070cc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80070d4:	4b47      	ldr	r3, [pc, #284]	; (80071f4 <RCCEx_PLL2_Config+0x128>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a46      	ldr	r2, [pc, #280]	; (80071f4 <RCCEx_PLL2_Config+0x128>)
 80070da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80070de:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80070e0:	f7fa fa08 	bl	80014f4 <HAL_GetTick>
 80070e4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80070e6:	e008      	b.n	80070fa <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80070e8:	f7fa fa04 	bl	80014f4 <HAL_GetTick>
 80070ec:	4602      	mov	r2, r0
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	2b02      	cmp	r3, #2
 80070f4:	d901      	bls.n	80070fa <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80070f6:	2303      	movs	r3, #3
 80070f8:	e077      	b.n	80071ea <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80070fa:	4b3e      	ldr	r3, [pc, #248]	; (80071f4 <RCCEx_PLL2_Config+0x128>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007102:	2b00      	cmp	r3, #0
 8007104:	d1f0      	bne.n	80070e8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007106:	4b3b      	ldr	r3, [pc, #236]	; (80071f4 <RCCEx_PLL2_Config+0x128>)
 8007108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800710e:	f023 0303 	bic.w	r3, r3, #3
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	6811      	ldr	r1, [r2, #0]
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	6852      	ldr	r2, [r2, #4]
 800711a:	3a01      	subs	r2, #1
 800711c:	0212      	lsls	r2, r2, #8
 800711e:	430a      	orrs	r2, r1
 8007120:	4934      	ldr	r1, [pc, #208]	; (80071f4 <RCCEx_PLL2_Config+0x128>)
 8007122:	4313      	orrs	r3, r2
 8007124:	62cb      	str	r3, [r1, #44]	; 0x2c
 8007126:	4b33      	ldr	r3, [pc, #204]	; (80071f4 <RCCEx_PLL2_Config+0x128>)
 8007128:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800712a:	4b33      	ldr	r3, [pc, #204]	; (80071f8 <RCCEx_PLL2_Config+0x12c>)
 800712c:	4013      	ands	r3, r2
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	6892      	ldr	r2, [r2, #8]
 8007132:	3a01      	subs	r2, #1
 8007134:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	68d2      	ldr	r2, [r2, #12]
 800713c:	3a01      	subs	r2, #1
 800713e:	0252      	lsls	r2, r2, #9
 8007140:	b292      	uxth	r2, r2
 8007142:	4311      	orrs	r1, r2
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	6912      	ldr	r2, [r2, #16]
 8007148:	3a01      	subs	r2, #1
 800714a:	0412      	lsls	r2, r2, #16
 800714c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007150:	4311      	orrs	r1, r2
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	6952      	ldr	r2, [r2, #20]
 8007156:	3a01      	subs	r2, #1
 8007158:	0612      	lsls	r2, r2, #24
 800715a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800715e:	430a      	orrs	r2, r1
 8007160:	4924      	ldr	r1, [pc, #144]	; (80071f4 <RCCEx_PLL2_Config+0x128>)
 8007162:	4313      	orrs	r3, r2
 8007164:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007166:	4b23      	ldr	r3, [pc, #140]	; (80071f4 <RCCEx_PLL2_Config+0x128>)
 8007168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800716a:	f023 020c 	bic.w	r2, r3, #12
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	699b      	ldr	r3, [r3, #24]
 8007172:	4920      	ldr	r1, [pc, #128]	; (80071f4 <RCCEx_PLL2_Config+0x128>)
 8007174:	4313      	orrs	r3, r2
 8007176:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007178:	4b1e      	ldr	r3, [pc, #120]	; (80071f4 <RCCEx_PLL2_Config+0x128>)
 800717a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6a1b      	ldr	r3, [r3, #32]
 8007180:	491c      	ldr	r1, [pc, #112]	; (80071f4 <RCCEx_PLL2_Config+0x128>)
 8007182:	4313      	orrs	r3, r2
 8007184:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8007186:	4b1b      	ldr	r3, [pc, #108]	; (80071f4 <RCCEx_PLL2_Config+0x128>)
 8007188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718a:	4a1a      	ldr	r2, [pc, #104]	; (80071f4 <RCCEx_PLL2_Config+0x128>)
 800718c:	f023 0310 	bic.w	r3, r3, #16
 8007190:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007192:	4b18      	ldr	r3, [pc, #96]	; (80071f4 <RCCEx_PLL2_Config+0x128>)
 8007194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007196:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800719a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	69d2      	ldr	r2, [r2, #28]
 80071a2:	00d2      	lsls	r2, r2, #3
 80071a4:	4913      	ldr	r1, [pc, #76]	; (80071f4 <RCCEx_PLL2_Config+0x128>)
 80071a6:	4313      	orrs	r3, r2
 80071a8:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80071aa:	4b12      	ldr	r3, [pc, #72]	; (80071f4 <RCCEx_PLL2_Config+0x128>)
 80071ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ae:	4a11      	ldr	r2, [pc, #68]	; (80071f4 <RCCEx_PLL2_Config+0x128>)
 80071b0:	f043 0310 	orr.w	r3, r3, #16
 80071b4:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80071b6:	4b0f      	ldr	r3, [pc, #60]	; (80071f4 <RCCEx_PLL2_Config+0x128>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a0e      	ldr	r2, [pc, #56]	; (80071f4 <RCCEx_PLL2_Config+0x128>)
 80071bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80071c0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80071c2:	f7fa f997 	bl	80014f4 <HAL_GetTick>
 80071c6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80071c8:	e008      	b.n	80071dc <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80071ca:	f7fa f993 	bl	80014f4 <HAL_GetTick>
 80071ce:	4602      	mov	r2, r0
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	1ad3      	subs	r3, r2, r3
 80071d4:	2b02      	cmp	r3, #2
 80071d6:	d901      	bls.n	80071dc <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80071d8:	2303      	movs	r3, #3
 80071da:	e006      	b.n	80071ea <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80071dc:	4b05      	ldr	r3, [pc, #20]	; (80071f4 <RCCEx_PLL2_Config+0x128>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d0f0      	beq.n	80071ca <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80071e8:	2300      	movs	r3, #0

}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3710      	adds	r7, #16
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	46020c00 	.word	0x46020c00
 80071f8:	80800000 	.word	0x80800000

080071fc <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b084      	sub	sp, #16
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8007204:	4b47      	ldr	r3, [pc, #284]	; (8007324 <RCCEx_PLL3_Config+0x128>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a46      	ldr	r2, [pc, #280]	; (8007324 <RCCEx_PLL3_Config+0x128>)
 800720a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800720e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007210:	f7fa f970 	bl	80014f4 <HAL_GetTick>
 8007214:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007216:	e008      	b.n	800722a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007218:	f7fa f96c 	bl	80014f4 <HAL_GetTick>
 800721c:	4602      	mov	r2, r0
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	1ad3      	subs	r3, r2, r3
 8007222:	2b02      	cmp	r3, #2
 8007224:	d901      	bls.n	800722a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007226:	2303      	movs	r3, #3
 8007228:	e077      	b.n	800731a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800722a:	4b3e      	ldr	r3, [pc, #248]	; (8007324 <RCCEx_PLL3_Config+0x128>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007232:	2b00      	cmp	r3, #0
 8007234:	d1f0      	bne.n	8007218 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007236:	4b3b      	ldr	r3, [pc, #236]	; (8007324 <RCCEx_PLL3_Config+0x128>)
 8007238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800723a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800723e:	f023 0303 	bic.w	r3, r3, #3
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	6811      	ldr	r1, [r2, #0]
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	6852      	ldr	r2, [r2, #4]
 800724a:	3a01      	subs	r2, #1
 800724c:	0212      	lsls	r2, r2, #8
 800724e:	430a      	orrs	r2, r1
 8007250:	4934      	ldr	r1, [pc, #208]	; (8007324 <RCCEx_PLL3_Config+0x128>)
 8007252:	4313      	orrs	r3, r2
 8007254:	630b      	str	r3, [r1, #48]	; 0x30
 8007256:	4b33      	ldr	r3, [pc, #204]	; (8007324 <RCCEx_PLL3_Config+0x128>)
 8007258:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800725a:	4b33      	ldr	r3, [pc, #204]	; (8007328 <RCCEx_PLL3_Config+0x12c>)
 800725c:	4013      	ands	r3, r2
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	6892      	ldr	r2, [r2, #8]
 8007262:	3a01      	subs	r2, #1
 8007264:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	68d2      	ldr	r2, [r2, #12]
 800726c:	3a01      	subs	r2, #1
 800726e:	0252      	lsls	r2, r2, #9
 8007270:	b292      	uxth	r2, r2
 8007272:	4311      	orrs	r1, r2
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	6912      	ldr	r2, [r2, #16]
 8007278:	3a01      	subs	r2, #1
 800727a:	0412      	lsls	r2, r2, #16
 800727c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007280:	4311      	orrs	r1, r2
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	6952      	ldr	r2, [r2, #20]
 8007286:	3a01      	subs	r2, #1
 8007288:	0612      	lsls	r2, r2, #24
 800728a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800728e:	430a      	orrs	r2, r1
 8007290:	4924      	ldr	r1, [pc, #144]	; (8007324 <RCCEx_PLL3_Config+0x128>)
 8007292:	4313      	orrs	r3, r2
 8007294:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8007296:	4b23      	ldr	r3, [pc, #140]	; (8007324 <RCCEx_PLL3_Config+0x128>)
 8007298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800729a:	f023 020c 	bic.w	r2, r3, #12
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	699b      	ldr	r3, [r3, #24]
 80072a2:	4920      	ldr	r1, [pc, #128]	; (8007324 <RCCEx_PLL3_Config+0x128>)
 80072a4:	4313      	orrs	r3, r2
 80072a6:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80072a8:	4b1e      	ldr	r3, [pc, #120]	; (8007324 <RCCEx_PLL3_Config+0x128>)
 80072aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6a1b      	ldr	r3, [r3, #32]
 80072b0:	491c      	ldr	r1, [pc, #112]	; (8007324 <RCCEx_PLL3_Config+0x128>)
 80072b2:	4313      	orrs	r3, r2
 80072b4:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80072b6:	4b1b      	ldr	r3, [pc, #108]	; (8007324 <RCCEx_PLL3_Config+0x128>)
 80072b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ba:	4a1a      	ldr	r2, [pc, #104]	; (8007324 <RCCEx_PLL3_Config+0x128>)
 80072bc:	f023 0310 	bic.w	r3, r3, #16
 80072c0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80072c2:	4b18      	ldr	r3, [pc, #96]	; (8007324 <RCCEx_PLL3_Config+0x128>)
 80072c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072ca:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	69d2      	ldr	r2, [r2, #28]
 80072d2:	00d2      	lsls	r2, r2, #3
 80072d4:	4913      	ldr	r1, [pc, #76]	; (8007324 <RCCEx_PLL3_Config+0x128>)
 80072d6:	4313      	orrs	r3, r2
 80072d8:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80072da:	4b12      	ldr	r3, [pc, #72]	; (8007324 <RCCEx_PLL3_Config+0x128>)
 80072dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072de:	4a11      	ldr	r2, [pc, #68]	; (8007324 <RCCEx_PLL3_Config+0x128>)
 80072e0:	f043 0310 	orr.w	r3, r3, #16
 80072e4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 80072e6:	4b0f      	ldr	r3, [pc, #60]	; (8007324 <RCCEx_PLL3_Config+0x128>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a0e      	ldr	r2, [pc, #56]	; (8007324 <RCCEx_PLL3_Config+0x128>)
 80072ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072f0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80072f2:	f7fa f8ff 	bl	80014f4 <HAL_GetTick>
 80072f6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80072f8:	e008      	b.n	800730c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80072fa:	f7fa f8fb 	bl	80014f4 <HAL_GetTick>
 80072fe:	4602      	mov	r2, r0
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	1ad3      	subs	r3, r2, r3
 8007304:	2b02      	cmp	r3, #2
 8007306:	d901      	bls.n	800730c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007308:	2303      	movs	r3, #3
 800730a:	e006      	b.n	800731a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800730c:	4b05      	ldr	r3, [pc, #20]	; (8007324 <RCCEx_PLL3_Config+0x128>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007314:	2b00      	cmp	r3, #0
 8007316:	d0f0      	beq.n	80072fa <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop
 8007324:	46020c00 	.word	0x46020c00
 8007328:	80800000 	.word	0x80800000

0800732c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d101      	bne.n	800733e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	e049      	b.n	80073d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007344:	b2db      	uxtb	r3, r3
 8007346:	2b00      	cmp	r3, #0
 8007348:	d106      	bne.n	8007358 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f7f9 fdc0 	bl	8000ed8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2202      	movs	r2, #2
 800735c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	3304      	adds	r3, #4
 8007368:	4619      	mov	r1, r3
 800736a:	4610      	mov	r0, r2
 800736c:	f000 fe66 	bl	800803c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2201      	movs	r2, #1
 800737c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3708      	adds	r7, #8
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
	...

080073dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80073dc:	b480      	push	{r7}
 80073de:	b085      	sub	sp, #20
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d001      	beq.n	80073f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	e072      	b.n	80074da <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2202      	movs	r2, #2
 80073f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68da      	ldr	r2, [r3, #12]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f042 0201 	orr.w	r2, r2, #1
 800740a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a35      	ldr	r2, [pc, #212]	; (80074e8 <HAL_TIM_Base_Start_IT+0x10c>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d040      	beq.n	8007498 <HAL_TIM_Base_Start_IT+0xbc>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a34      	ldr	r2, [pc, #208]	; (80074ec <HAL_TIM_Base_Start_IT+0x110>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d03b      	beq.n	8007498 <HAL_TIM_Base_Start_IT+0xbc>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007428:	d036      	beq.n	8007498 <HAL_TIM_Base_Start_IT+0xbc>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007432:	d031      	beq.n	8007498 <HAL_TIM_Base_Start_IT+0xbc>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a2d      	ldr	r2, [pc, #180]	; (80074f0 <HAL_TIM_Base_Start_IT+0x114>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d02c      	beq.n	8007498 <HAL_TIM_Base_Start_IT+0xbc>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a2c      	ldr	r2, [pc, #176]	; (80074f4 <HAL_TIM_Base_Start_IT+0x118>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d027      	beq.n	8007498 <HAL_TIM_Base_Start_IT+0xbc>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a2a      	ldr	r2, [pc, #168]	; (80074f8 <HAL_TIM_Base_Start_IT+0x11c>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d022      	beq.n	8007498 <HAL_TIM_Base_Start_IT+0xbc>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a29      	ldr	r2, [pc, #164]	; (80074fc <HAL_TIM_Base_Start_IT+0x120>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d01d      	beq.n	8007498 <HAL_TIM_Base_Start_IT+0xbc>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a27      	ldr	r2, [pc, #156]	; (8007500 <HAL_TIM_Base_Start_IT+0x124>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d018      	beq.n	8007498 <HAL_TIM_Base_Start_IT+0xbc>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a26      	ldr	r2, [pc, #152]	; (8007504 <HAL_TIM_Base_Start_IT+0x128>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d013      	beq.n	8007498 <HAL_TIM_Base_Start_IT+0xbc>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a24      	ldr	r2, [pc, #144]	; (8007508 <HAL_TIM_Base_Start_IT+0x12c>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d00e      	beq.n	8007498 <HAL_TIM_Base_Start_IT+0xbc>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a23      	ldr	r2, [pc, #140]	; (800750c <HAL_TIM_Base_Start_IT+0x130>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d009      	beq.n	8007498 <HAL_TIM_Base_Start_IT+0xbc>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a21      	ldr	r2, [pc, #132]	; (8007510 <HAL_TIM_Base_Start_IT+0x134>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d004      	beq.n	8007498 <HAL_TIM_Base_Start_IT+0xbc>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a20      	ldr	r2, [pc, #128]	; (8007514 <HAL_TIM_Base_Start_IT+0x138>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d115      	bne.n	80074c4 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	689a      	ldr	r2, [r3, #8]
 800749e:	4b1e      	ldr	r3, [pc, #120]	; (8007518 <HAL_TIM_Base_Start_IT+0x13c>)
 80074a0:	4013      	ands	r3, r2
 80074a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2b06      	cmp	r3, #6
 80074a8:	d015      	beq.n	80074d6 <HAL_TIM_Base_Start_IT+0xfa>
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074b0:	d011      	beq.n	80074d6 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f042 0201 	orr.w	r2, r2, #1
 80074c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074c2:	e008      	b.n	80074d6 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f042 0201 	orr.w	r2, r2, #1
 80074d2:	601a      	str	r2, [r3, #0]
 80074d4:	e000      	b.n	80074d8 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3714      	adds	r7, #20
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop
 80074e8:	40012c00 	.word	0x40012c00
 80074ec:	50012c00 	.word	0x50012c00
 80074f0:	40000400 	.word	0x40000400
 80074f4:	50000400 	.word	0x50000400
 80074f8:	40000800 	.word	0x40000800
 80074fc:	50000800 	.word	0x50000800
 8007500:	40000c00 	.word	0x40000c00
 8007504:	50000c00 	.word	0x50000c00
 8007508:	40013400 	.word	0x40013400
 800750c:	50013400 	.word	0x50013400
 8007510:	40014000 	.word	0x40014000
 8007514:	50014000 	.word	0x50014000
 8007518:	00010007 	.word	0x00010007

0800751c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d101      	bne.n	800752e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	e049      	b.n	80075c2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007534:	b2db      	uxtb	r3, r3
 8007536:	2b00      	cmp	r3, #0
 8007538:	d106      	bne.n	8007548 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 f841 	bl	80075ca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2202      	movs	r2, #2
 800754c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	3304      	adds	r3, #4
 8007558:	4619      	mov	r1, r3
 800755a:	4610      	mov	r0, r2
 800755c:	f000 fd6e 	bl	800803c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2201      	movs	r2, #1
 8007594:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075c0:	2300      	movs	r3, #0
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3708      	adds	r7, #8
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}

080075ca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80075ca:	b480      	push	{r7}
 80075cc:	b083      	sub	sp, #12
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80075d2:	bf00      	nop
 80075d4:	370c      	adds	r7, #12
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr
	...

080075e0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075ea:	2300      	movs	r3, #0
 80075ec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d109      	bne.n	8007608 <HAL_TIM_PWM_Start_IT+0x28>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	bf14      	ite	ne
 8007600:	2301      	movne	r3, #1
 8007602:	2300      	moveq	r3, #0
 8007604:	b2db      	uxtb	r3, r3
 8007606:	e03c      	b.n	8007682 <HAL_TIM_PWM_Start_IT+0xa2>
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	2b04      	cmp	r3, #4
 800760c:	d109      	bne.n	8007622 <HAL_TIM_PWM_Start_IT+0x42>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007614:	b2db      	uxtb	r3, r3
 8007616:	2b01      	cmp	r3, #1
 8007618:	bf14      	ite	ne
 800761a:	2301      	movne	r3, #1
 800761c:	2300      	moveq	r3, #0
 800761e:	b2db      	uxtb	r3, r3
 8007620:	e02f      	b.n	8007682 <HAL_TIM_PWM_Start_IT+0xa2>
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	2b08      	cmp	r3, #8
 8007626:	d109      	bne.n	800763c <HAL_TIM_PWM_Start_IT+0x5c>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800762e:	b2db      	uxtb	r3, r3
 8007630:	2b01      	cmp	r3, #1
 8007632:	bf14      	ite	ne
 8007634:	2301      	movne	r3, #1
 8007636:	2300      	moveq	r3, #0
 8007638:	b2db      	uxtb	r3, r3
 800763a:	e022      	b.n	8007682 <HAL_TIM_PWM_Start_IT+0xa2>
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	2b0c      	cmp	r3, #12
 8007640:	d109      	bne.n	8007656 <HAL_TIM_PWM_Start_IT+0x76>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007648:	b2db      	uxtb	r3, r3
 800764a:	2b01      	cmp	r3, #1
 800764c:	bf14      	ite	ne
 800764e:	2301      	movne	r3, #1
 8007650:	2300      	moveq	r3, #0
 8007652:	b2db      	uxtb	r3, r3
 8007654:	e015      	b.n	8007682 <HAL_TIM_PWM_Start_IT+0xa2>
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	2b10      	cmp	r3, #16
 800765a:	d109      	bne.n	8007670 <HAL_TIM_PWM_Start_IT+0x90>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007662:	b2db      	uxtb	r3, r3
 8007664:	2b01      	cmp	r3, #1
 8007666:	bf14      	ite	ne
 8007668:	2301      	movne	r3, #1
 800766a:	2300      	moveq	r3, #0
 800766c:	b2db      	uxtb	r3, r3
 800766e:	e008      	b.n	8007682 <HAL_TIM_PWM_Start_IT+0xa2>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007676:	b2db      	uxtb	r3, r3
 8007678:	2b01      	cmp	r3, #1
 800767a:	bf14      	ite	ne
 800767c:	2301      	movne	r3, #1
 800767e:	2300      	moveq	r3, #0
 8007680:	b2db      	uxtb	r3, r3
 8007682:	2b00      	cmp	r3, #0
 8007684:	d001      	beq.n	800768a <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	e124      	b.n	80078d4 <HAL_TIM_PWM_Start_IT+0x2f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d104      	bne.n	800769a <HAL_TIM_PWM_Start_IT+0xba>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2202      	movs	r2, #2
 8007694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007698:	e023      	b.n	80076e2 <HAL_TIM_PWM_Start_IT+0x102>
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	2b04      	cmp	r3, #4
 800769e:	d104      	bne.n	80076aa <HAL_TIM_PWM_Start_IT+0xca>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2202      	movs	r2, #2
 80076a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076a8:	e01b      	b.n	80076e2 <HAL_TIM_PWM_Start_IT+0x102>
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	2b08      	cmp	r3, #8
 80076ae:	d104      	bne.n	80076ba <HAL_TIM_PWM_Start_IT+0xda>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2202      	movs	r2, #2
 80076b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076b8:	e013      	b.n	80076e2 <HAL_TIM_PWM_Start_IT+0x102>
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	2b0c      	cmp	r3, #12
 80076be:	d104      	bne.n	80076ca <HAL_TIM_PWM_Start_IT+0xea>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2202      	movs	r2, #2
 80076c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80076c8:	e00b      	b.n	80076e2 <HAL_TIM_PWM_Start_IT+0x102>
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	2b10      	cmp	r3, #16
 80076ce:	d104      	bne.n	80076da <HAL_TIM_PWM_Start_IT+0xfa>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2202      	movs	r2, #2
 80076d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076d8:	e003      	b.n	80076e2 <HAL_TIM_PWM_Start_IT+0x102>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2202      	movs	r2, #2
 80076de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	2b0c      	cmp	r3, #12
 80076e6:	d841      	bhi.n	800776c <HAL_TIM_PWM_Start_IT+0x18c>
 80076e8:	a201      	add	r2, pc, #4	; (adr r2, 80076f0 <HAL_TIM_PWM_Start_IT+0x110>)
 80076ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ee:	bf00      	nop
 80076f0:	08007725 	.word	0x08007725
 80076f4:	0800776d 	.word	0x0800776d
 80076f8:	0800776d 	.word	0x0800776d
 80076fc:	0800776d 	.word	0x0800776d
 8007700:	08007737 	.word	0x08007737
 8007704:	0800776d 	.word	0x0800776d
 8007708:	0800776d 	.word	0x0800776d
 800770c:	0800776d 	.word	0x0800776d
 8007710:	08007749 	.word	0x08007749
 8007714:	0800776d 	.word	0x0800776d
 8007718:	0800776d 	.word	0x0800776d
 800771c:	0800776d 	.word	0x0800776d
 8007720:	0800775b 	.word	0x0800775b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	68da      	ldr	r2, [r3, #12]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f042 0202 	orr.w	r2, r2, #2
 8007732:	60da      	str	r2, [r3, #12]
      break;
 8007734:	e01d      	b.n	8007772 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68da      	ldr	r2, [r3, #12]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f042 0204 	orr.w	r2, r2, #4
 8007744:	60da      	str	r2, [r3, #12]
      break;
 8007746:	e014      	b.n	8007772 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	68da      	ldr	r2, [r3, #12]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f042 0208 	orr.w	r2, r2, #8
 8007756:	60da      	str	r2, [r3, #12]
      break;
 8007758:	e00b      	b.n	8007772 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68da      	ldr	r2, [r3, #12]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f042 0210 	orr.w	r2, r2, #16
 8007768:	60da      	str	r2, [r3, #12]
      break;
 800776a:	e002      	b.n	8007772 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	73fb      	strb	r3, [r7, #15]
      break;
 8007770:	bf00      	nop
  }

  if (status == HAL_OK)
 8007772:	7bfb      	ldrb	r3, [r7, #15]
 8007774:	2b00      	cmp	r3, #0
 8007776:	f040 80ac 	bne.w	80078d2 <HAL_TIM_PWM_Start_IT+0x2f2>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2201      	movs	r2, #1
 8007780:	6839      	ldr	r1, [r7, #0]
 8007782:	4618      	mov	r0, r3
 8007784:	f001 f9c6 	bl	8008b14 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a53      	ldr	r2, [pc, #332]	; (80078dc <HAL_TIM_PWM_Start_IT+0x2fc>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d02c      	beq.n	80077ec <HAL_TIM_PWM_Start_IT+0x20c>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a52      	ldr	r2, [pc, #328]	; (80078e0 <HAL_TIM_PWM_Start_IT+0x300>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d027      	beq.n	80077ec <HAL_TIM_PWM_Start_IT+0x20c>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a50      	ldr	r2, [pc, #320]	; (80078e4 <HAL_TIM_PWM_Start_IT+0x304>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d022      	beq.n	80077ec <HAL_TIM_PWM_Start_IT+0x20c>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a4f      	ldr	r2, [pc, #316]	; (80078e8 <HAL_TIM_PWM_Start_IT+0x308>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d01d      	beq.n	80077ec <HAL_TIM_PWM_Start_IT+0x20c>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a4d      	ldr	r2, [pc, #308]	; (80078ec <HAL_TIM_PWM_Start_IT+0x30c>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d018      	beq.n	80077ec <HAL_TIM_PWM_Start_IT+0x20c>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a4c      	ldr	r2, [pc, #304]	; (80078f0 <HAL_TIM_PWM_Start_IT+0x310>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d013      	beq.n	80077ec <HAL_TIM_PWM_Start_IT+0x20c>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a4a      	ldr	r2, [pc, #296]	; (80078f4 <HAL_TIM_PWM_Start_IT+0x314>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d00e      	beq.n	80077ec <HAL_TIM_PWM_Start_IT+0x20c>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a49      	ldr	r2, [pc, #292]	; (80078f8 <HAL_TIM_PWM_Start_IT+0x318>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d009      	beq.n	80077ec <HAL_TIM_PWM_Start_IT+0x20c>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a47      	ldr	r2, [pc, #284]	; (80078fc <HAL_TIM_PWM_Start_IT+0x31c>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d004      	beq.n	80077ec <HAL_TIM_PWM_Start_IT+0x20c>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a46      	ldr	r2, [pc, #280]	; (8007900 <HAL_TIM_PWM_Start_IT+0x320>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d101      	bne.n	80077f0 <HAL_TIM_PWM_Start_IT+0x210>
 80077ec:	2301      	movs	r3, #1
 80077ee:	e000      	b.n	80077f2 <HAL_TIM_PWM_Start_IT+0x212>
 80077f0:	2300      	movs	r3, #0
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d007      	beq.n	8007806 <HAL_TIM_PWM_Start_IT+0x226>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007804:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a34      	ldr	r2, [pc, #208]	; (80078dc <HAL_TIM_PWM_Start_IT+0x2fc>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d040      	beq.n	8007892 <HAL_TIM_PWM_Start_IT+0x2b2>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a32      	ldr	r2, [pc, #200]	; (80078e0 <HAL_TIM_PWM_Start_IT+0x300>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d03b      	beq.n	8007892 <HAL_TIM_PWM_Start_IT+0x2b2>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007822:	d036      	beq.n	8007892 <HAL_TIM_PWM_Start_IT+0x2b2>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800782c:	d031      	beq.n	8007892 <HAL_TIM_PWM_Start_IT+0x2b2>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a34      	ldr	r2, [pc, #208]	; (8007904 <HAL_TIM_PWM_Start_IT+0x324>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d02c      	beq.n	8007892 <HAL_TIM_PWM_Start_IT+0x2b2>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a32      	ldr	r2, [pc, #200]	; (8007908 <HAL_TIM_PWM_Start_IT+0x328>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d027      	beq.n	8007892 <HAL_TIM_PWM_Start_IT+0x2b2>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a31      	ldr	r2, [pc, #196]	; (800790c <HAL_TIM_PWM_Start_IT+0x32c>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d022      	beq.n	8007892 <HAL_TIM_PWM_Start_IT+0x2b2>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a2f      	ldr	r2, [pc, #188]	; (8007910 <HAL_TIM_PWM_Start_IT+0x330>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d01d      	beq.n	8007892 <HAL_TIM_PWM_Start_IT+0x2b2>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a2e      	ldr	r2, [pc, #184]	; (8007914 <HAL_TIM_PWM_Start_IT+0x334>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d018      	beq.n	8007892 <HAL_TIM_PWM_Start_IT+0x2b2>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a2c      	ldr	r2, [pc, #176]	; (8007918 <HAL_TIM_PWM_Start_IT+0x338>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d013      	beq.n	8007892 <HAL_TIM_PWM_Start_IT+0x2b2>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a1d      	ldr	r2, [pc, #116]	; (80078e4 <HAL_TIM_PWM_Start_IT+0x304>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d00e      	beq.n	8007892 <HAL_TIM_PWM_Start_IT+0x2b2>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a1b      	ldr	r2, [pc, #108]	; (80078e8 <HAL_TIM_PWM_Start_IT+0x308>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d009      	beq.n	8007892 <HAL_TIM_PWM_Start_IT+0x2b2>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a1a      	ldr	r2, [pc, #104]	; (80078ec <HAL_TIM_PWM_Start_IT+0x30c>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d004      	beq.n	8007892 <HAL_TIM_PWM_Start_IT+0x2b2>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a18      	ldr	r2, [pc, #96]	; (80078f0 <HAL_TIM_PWM_Start_IT+0x310>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d115      	bne.n	80078be <HAL_TIM_PWM_Start_IT+0x2de>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	689a      	ldr	r2, [r3, #8]
 8007898:	4b20      	ldr	r3, [pc, #128]	; (800791c <HAL_TIM_PWM_Start_IT+0x33c>)
 800789a:	4013      	ands	r3, r2
 800789c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	2b06      	cmp	r3, #6
 80078a2:	d015      	beq.n	80078d0 <HAL_TIM_PWM_Start_IT+0x2f0>
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078aa:	d011      	beq.n	80078d0 <HAL_TIM_PWM_Start_IT+0x2f0>
      {
        __HAL_TIM_ENABLE(htim);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f042 0201 	orr.w	r2, r2, #1
 80078ba:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078bc:	e008      	b.n	80078d0 <HAL_TIM_PWM_Start_IT+0x2f0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f042 0201 	orr.w	r2, r2, #1
 80078cc:	601a      	str	r2, [r3, #0]
 80078ce:	e000      	b.n	80078d2 <HAL_TIM_PWM_Start_IT+0x2f2>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078d0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80078d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3710      	adds	r7, #16
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}
 80078dc:	40012c00 	.word	0x40012c00
 80078e0:	50012c00 	.word	0x50012c00
 80078e4:	40013400 	.word	0x40013400
 80078e8:	50013400 	.word	0x50013400
 80078ec:	40014000 	.word	0x40014000
 80078f0:	50014000 	.word	0x50014000
 80078f4:	40014400 	.word	0x40014400
 80078f8:	50014400 	.word	0x50014400
 80078fc:	40014800 	.word	0x40014800
 8007900:	50014800 	.word	0x50014800
 8007904:	40000400 	.word	0x40000400
 8007908:	50000400 	.word	0x50000400
 800790c:	40000800 	.word	0x40000800
 8007910:	50000800 	.word	0x50000800
 8007914:	40000c00 	.word	0x40000c00
 8007918:	50000c00 	.word	0x50000c00
 800791c:	00010007 	.word	0x00010007

08007920 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	f003 0302 	and.w	r3, r3, #2
 800793e:	2b00      	cmp	r3, #0
 8007940:	d020      	beq.n	8007984 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f003 0302 	and.w	r3, r3, #2
 8007948:	2b00      	cmp	r3, #0
 800794a:	d01b      	beq.n	8007984 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f06f 0202 	mvn.w	r2, #2
 8007954:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2201      	movs	r2, #1
 800795a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	699b      	ldr	r3, [r3, #24]
 8007962:	f003 0303 	and.w	r3, r3, #3
 8007966:	2b00      	cmp	r3, #0
 8007968:	d003      	beq.n	8007972 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 fb48 	bl	8008000 <HAL_TIM_IC_CaptureCallback>
 8007970:	e005      	b.n	800797e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 fb3a 	bl	8007fec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 fb4b 	bl	8008014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	f003 0304 	and.w	r3, r3, #4
 800798a:	2b00      	cmp	r3, #0
 800798c:	d020      	beq.n	80079d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f003 0304 	and.w	r3, r3, #4
 8007994:	2b00      	cmp	r3, #0
 8007996:	d01b      	beq.n	80079d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f06f 0204 	mvn.w	r2, #4
 80079a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2202      	movs	r2, #2
 80079a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	699b      	ldr	r3, [r3, #24]
 80079ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d003      	beq.n	80079be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 fb22 	bl	8008000 <HAL_TIM_IC_CaptureCallback>
 80079bc:	e005      	b.n	80079ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 fb14 	bl	8007fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 fb25 	bl	8008014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2200      	movs	r2, #0
 80079ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	f003 0308 	and.w	r3, r3, #8
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d020      	beq.n	8007a1c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f003 0308 	and.w	r3, r3, #8
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d01b      	beq.n	8007a1c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f06f 0208 	mvn.w	r2, #8
 80079ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2204      	movs	r2, #4
 80079f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	69db      	ldr	r3, [r3, #28]
 80079fa:	f003 0303 	and.w	r3, r3, #3
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d003      	beq.n	8007a0a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 fafc 	bl	8008000 <HAL_TIM_IC_CaptureCallback>
 8007a08:	e005      	b.n	8007a16 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 faee 	bl	8007fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 faff 	bl	8008014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	f003 0310 	and.w	r3, r3, #16
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d020      	beq.n	8007a68 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f003 0310 	and.w	r3, r3, #16
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d01b      	beq.n	8007a68 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f06f 0210 	mvn.w	r2, #16
 8007a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2208      	movs	r2, #8
 8007a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	69db      	ldr	r3, [r3, #28]
 8007a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d003      	beq.n	8007a56 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 fad6 	bl	8008000 <HAL_TIM_IC_CaptureCallback>
 8007a54:	e005      	b.n	8007a62 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 fac8 	bl	8007fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 fad9 	bl	8008014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	f003 0301 	and.w	r3, r3, #1
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00c      	beq.n	8007a8c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f003 0301 	and.w	r3, r3, #1
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d007      	beq.n	8007a8c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f06f 0201 	mvn.w	r2, #1
 8007a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f7f9 f97e 	bl	8000d88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d104      	bne.n	8007aa0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d00c      	beq.n	8007aba <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d007      	beq.n	8007aba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8007ab2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f001 f91f 	bl	8008cf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d00c      	beq.n	8007ade <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d007      	beq.n	8007ade <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007ad6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f001 f917 	bl	8008d0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00c      	beq.n	8007b02 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d007      	beq.n	8007b02 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007afa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 fa93 	bl	8008028 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	f003 0320 	and.w	r3, r3, #32
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00c      	beq.n	8007b26 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f003 0320 	and.w	r3, r3, #32
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d007      	beq.n	8007b26 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f06f 0220 	mvn.w	r2, #32
 8007b1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f001 f8df 	bl	8008ce4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d00c      	beq.n	8007b4a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d007      	beq.n	8007b4a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8007b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f001 f8eb 	bl	8008d20 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d00c      	beq.n	8007b6e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d007      	beq.n	8007b6e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8007b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f001 f8e3 	bl	8008d34 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d00c      	beq.n	8007b92 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d007      	beq.n	8007b92 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8007b8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f001 f8db 	bl	8008d48 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d00c      	beq.n	8007bb6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d007      	beq.n	8007bb6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8007bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f001 f8d3 	bl	8008d5c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007bb6:	bf00      	nop
 8007bb8:	3710      	adds	r7, #16
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
	...

08007bc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b086      	sub	sp, #24
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d101      	bne.n	8007bde <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007bda:	2302      	movs	r3, #2
 8007bdc:	e0ff      	b.n	8007dde <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2201      	movs	r2, #1
 8007be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2b14      	cmp	r3, #20
 8007bea:	f200 80f0 	bhi.w	8007dce <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007bee:	a201      	add	r2, pc, #4	; (adr r2, 8007bf4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf4:	08007c49 	.word	0x08007c49
 8007bf8:	08007dcf 	.word	0x08007dcf
 8007bfc:	08007dcf 	.word	0x08007dcf
 8007c00:	08007dcf 	.word	0x08007dcf
 8007c04:	08007c89 	.word	0x08007c89
 8007c08:	08007dcf 	.word	0x08007dcf
 8007c0c:	08007dcf 	.word	0x08007dcf
 8007c10:	08007dcf 	.word	0x08007dcf
 8007c14:	08007ccb 	.word	0x08007ccb
 8007c18:	08007dcf 	.word	0x08007dcf
 8007c1c:	08007dcf 	.word	0x08007dcf
 8007c20:	08007dcf 	.word	0x08007dcf
 8007c24:	08007d0b 	.word	0x08007d0b
 8007c28:	08007dcf 	.word	0x08007dcf
 8007c2c:	08007dcf 	.word	0x08007dcf
 8007c30:	08007dcf 	.word	0x08007dcf
 8007c34:	08007d4d 	.word	0x08007d4d
 8007c38:	08007dcf 	.word	0x08007dcf
 8007c3c:	08007dcf 	.word	0x08007dcf
 8007c40:	08007dcf 	.word	0x08007dcf
 8007c44:	08007d8d 	.word	0x08007d8d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	68b9      	ldr	r1, [r7, #8]
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f000 faee 	bl	8008230 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	699a      	ldr	r2, [r3, #24]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f042 0208 	orr.w	r2, r2, #8
 8007c62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	699a      	ldr	r2, [r3, #24]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f022 0204 	bic.w	r2, r2, #4
 8007c72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	6999      	ldr	r1, [r3, #24]
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	691a      	ldr	r2, [r3, #16]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	430a      	orrs	r2, r1
 8007c84:	619a      	str	r2, [r3, #24]
      break;
 8007c86:	e0a5      	b.n	8007dd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	68b9      	ldr	r1, [r7, #8]
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f000 fb90 	bl	80083b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	699a      	ldr	r2, [r3, #24]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ca2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	699a      	ldr	r2, [r3, #24]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	6999      	ldr	r1, [r3, #24]
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	691b      	ldr	r3, [r3, #16]
 8007cbe:	021a      	lsls	r2, r3, #8
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	430a      	orrs	r2, r1
 8007cc6:	619a      	str	r2, [r3, #24]
      break;
 8007cc8:	e084      	b.n	8007dd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	68b9      	ldr	r1, [r7, #8]
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f000 fc1f 	bl	8008514 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	69da      	ldr	r2, [r3, #28]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f042 0208 	orr.w	r2, r2, #8
 8007ce4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	69da      	ldr	r2, [r3, #28]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f022 0204 	bic.w	r2, r2, #4
 8007cf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	69d9      	ldr	r1, [r3, #28]
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	691a      	ldr	r2, [r3, #16]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	430a      	orrs	r2, r1
 8007d06:	61da      	str	r2, [r3, #28]
      break;
 8007d08:	e064      	b.n	8007dd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	68b9      	ldr	r1, [r7, #8]
 8007d10:	4618      	mov	r0, r3
 8007d12:	f000 fcad 	bl	8008670 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	69da      	ldr	r2, [r3, #28]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	69da      	ldr	r2, [r3, #28]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	69d9      	ldr	r1, [r3, #28]
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	021a      	lsls	r2, r3, #8
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	430a      	orrs	r2, r1
 8007d48:	61da      	str	r2, [r3, #28]
      break;
 8007d4a:	e043      	b.n	8007dd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	68b9      	ldr	r1, [r7, #8]
 8007d52:	4618      	mov	r0, r3
 8007d54:	f000 fd3c 	bl	80087d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f042 0208 	orr.w	r2, r2, #8
 8007d66:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f022 0204 	bic.w	r2, r2, #4
 8007d76:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	691a      	ldr	r2, [r3, #16]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	430a      	orrs	r2, r1
 8007d88:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007d8a:	e023      	b.n	8007dd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	68b9      	ldr	r1, [r7, #8]
 8007d92:	4618      	mov	r0, r3
 8007d94:	f000 fd9e 	bl	80088d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007da6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007db6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	691b      	ldr	r3, [r3, #16]
 8007dc2:	021a      	lsls	r2, r3, #8
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	430a      	orrs	r2, r1
 8007dca:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007dcc:	e002      	b.n	8007dd4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	75fb      	strb	r3, [r7, #23]
      break;
 8007dd2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007ddc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3718      	adds	r7, #24
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop

08007de8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007df2:	2300      	movs	r3, #0
 8007df4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d101      	bne.n	8007e04 <HAL_TIM_ConfigClockSource+0x1c>
 8007e00:	2302      	movs	r3, #2
 8007e02:	e0e6      	b.n	8007fd2 <HAL_TIM_ConfigClockSource+0x1ea>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2202      	movs	r2, #2
 8007e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8007e22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007e26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	68ba      	ldr	r2, [r7, #8]
 8007e36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a67      	ldr	r2, [pc, #412]	; (8007fdc <HAL_TIM_ConfigClockSource+0x1f4>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	f000 80b1 	beq.w	8007fa6 <HAL_TIM_ConfigClockSource+0x1be>
 8007e44:	4a65      	ldr	r2, [pc, #404]	; (8007fdc <HAL_TIM_ConfigClockSource+0x1f4>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	f200 80b6 	bhi.w	8007fb8 <HAL_TIM_ConfigClockSource+0x1d0>
 8007e4c:	4a64      	ldr	r2, [pc, #400]	; (8007fe0 <HAL_TIM_ConfigClockSource+0x1f8>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	f000 80a9 	beq.w	8007fa6 <HAL_TIM_ConfigClockSource+0x1be>
 8007e54:	4a62      	ldr	r2, [pc, #392]	; (8007fe0 <HAL_TIM_ConfigClockSource+0x1f8>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	f200 80ae 	bhi.w	8007fb8 <HAL_TIM_ConfigClockSource+0x1d0>
 8007e5c:	4a61      	ldr	r2, [pc, #388]	; (8007fe4 <HAL_TIM_ConfigClockSource+0x1fc>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	f000 80a1 	beq.w	8007fa6 <HAL_TIM_ConfigClockSource+0x1be>
 8007e64:	4a5f      	ldr	r2, [pc, #380]	; (8007fe4 <HAL_TIM_ConfigClockSource+0x1fc>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	f200 80a6 	bhi.w	8007fb8 <HAL_TIM_ConfigClockSource+0x1d0>
 8007e6c:	4a5e      	ldr	r2, [pc, #376]	; (8007fe8 <HAL_TIM_ConfigClockSource+0x200>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	f000 8099 	beq.w	8007fa6 <HAL_TIM_ConfigClockSource+0x1be>
 8007e74:	4a5c      	ldr	r2, [pc, #368]	; (8007fe8 <HAL_TIM_ConfigClockSource+0x200>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	f200 809e 	bhi.w	8007fb8 <HAL_TIM_ConfigClockSource+0x1d0>
 8007e7c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007e80:	f000 8091 	beq.w	8007fa6 <HAL_TIM_ConfigClockSource+0x1be>
 8007e84:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007e88:	f200 8096 	bhi.w	8007fb8 <HAL_TIM_ConfigClockSource+0x1d0>
 8007e8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e90:	f000 8089 	beq.w	8007fa6 <HAL_TIM_ConfigClockSource+0x1be>
 8007e94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e98:	f200 808e 	bhi.w	8007fb8 <HAL_TIM_ConfigClockSource+0x1d0>
 8007e9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ea0:	d03e      	beq.n	8007f20 <HAL_TIM_ConfigClockSource+0x138>
 8007ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ea6:	f200 8087 	bhi.w	8007fb8 <HAL_TIM_ConfigClockSource+0x1d0>
 8007eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eae:	f000 8086 	beq.w	8007fbe <HAL_TIM_ConfigClockSource+0x1d6>
 8007eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eb6:	d87f      	bhi.n	8007fb8 <HAL_TIM_ConfigClockSource+0x1d0>
 8007eb8:	2b70      	cmp	r3, #112	; 0x70
 8007eba:	d01a      	beq.n	8007ef2 <HAL_TIM_ConfigClockSource+0x10a>
 8007ebc:	2b70      	cmp	r3, #112	; 0x70
 8007ebe:	d87b      	bhi.n	8007fb8 <HAL_TIM_ConfigClockSource+0x1d0>
 8007ec0:	2b60      	cmp	r3, #96	; 0x60
 8007ec2:	d050      	beq.n	8007f66 <HAL_TIM_ConfigClockSource+0x17e>
 8007ec4:	2b60      	cmp	r3, #96	; 0x60
 8007ec6:	d877      	bhi.n	8007fb8 <HAL_TIM_ConfigClockSource+0x1d0>
 8007ec8:	2b50      	cmp	r3, #80	; 0x50
 8007eca:	d03c      	beq.n	8007f46 <HAL_TIM_ConfigClockSource+0x15e>
 8007ecc:	2b50      	cmp	r3, #80	; 0x50
 8007ece:	d873      	bhi.n	8007fb8 <HAL_TIM_ConfigClockSource+0x1d0>
 8007ed0:	2b40      	cmp	r3, #64	; 0x40
 8007ed2:	d058      	beq.n	8007f86 <HAL_TIM_ConfigClockSource+0x19e>
 8007ed4:	2b40      	cmp	r3, #64	; 0x40
 8007ed6:	d86f      	bhi.n	8007fb8 <HAL_TIM_ConfigClockSource+0x1d0>
 8007ed8:	2b30      	cmp	r3, #48	; 0x30
 8007eda:	d064      	beq.n	8007fa6 <HAL_TIM_ConfigClockSource+0x1be>
 8007edc:	2b30      	cmp	r3, #48	; 0x30
 8007ede:	d86b      	bhi.n	8007fb8 <HAL_TIM_ConfigClockSource+0x1d0>
 8007ee0:	2b20      	cmp	r3, #32
 8007ee2:	d060      	beq.n	8007fa6 <HAL_TIM_ConfigClockSource+0x1be>
 8007ee4:	2b20      	cmp	r3, #32
 8007ee6:	d867      	bhi.n	8007fb8 <HAL_TIM_ConfigClockSource+0x1d0>
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d05c      	beq.n	8007fa6 <HAL_TIM_ConfigClockSource+0x1be>
 8007eec:	2b10      	cmp	r3, #16
 8007eee:	d05a      	beq.n	8007fa6 <HAL_TIM_ConfigClockSource+0x1be>
 8007ef0:	e062      	b.n	8007fb8 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f02:	f000 fde7 	bl	8008ad4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007f14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68ba      	ldr	r2, [r7, #8]
 8007f1c:	609a      	str	r2, [r3, #8]
      break;
 8007f1e:	e04f      	b.n	8007fc0 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f30:	f000 fdd0 	bl	8008ad4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	689a      	ldr	r2, [r3, #8]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f42:	609a      	str	r2, [r3, #8]
      break;
 8007f44:	e03c      	b.n	8007fc0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f52:	461a      	mov	r2, r3
 8007f54:	f000 fd42 	bl	80089dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2150      	movs	r1, #80	; 0x50
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f000 fd9b 	bl	8008a9a <TIM_ITRx_SetConfig>
      break;
 8007f64:	e02c      	b.n	8007fc0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f72:	461a      	mov	r2, r3
 8007f74:	f000 fd61 	bl	8008a3a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	2160      	movs	r1, #96	; 0x60
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f000 fd8b 	bl	8008a9a <TIM_ITRx_SetConfig>
      break;
 8007f84:	e01c      	b.n	8007fc0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f92:	461a      	mov	r2, r3
 8007f94:	f000 fd22 	bl	80089dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2140      	movs	r1, #64	; 0x40
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f000 fd7b 	bl	8008a9a <TIM_ITRx_SetConfig>
      break;
 8007fa4:	e00c      	b.n	8007fc0 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4619      	mov	r1, r3
 8007fb0:	4610      	mov	r0, r2
 8007fb2:	f000 fd72 	bl	8008a9a <TIM_ITRx_SetConfig>
      break;
 8007fb6:	e003      	b.n	8007fc0 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	73fb      	strb	r3, [r7, #15]
      break;
 8007fbc:	e000      	b.n	8007fc0 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 8007fbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3710      	adds	r7, #16
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	00100070 	.word	0x00100070
 8007fe0:	00100040 	.word	0x00100040
 8007fe4:	00100030 	.word	0x00100030
 8007fe8:	00100020 	.word	0x00100020

08007fec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ff4:	bf00      	nop
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr

08008000 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008008:	bf00      	nop
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr

08008014 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008014:	b480      	push	{r7}
 8008016:	b083      	sub	sp, #12
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800801c:	bf00      	nop
 800801e:	370c      	adds	r7, #12
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr

08008028 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008030:	bf00      	nop
 8008032:	370c      	adds	r7, #12
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800803c:	b480      	push	{r7}
 800803e:	b085      	sub	sp, #20
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4a68      	ldr	r2, [pc, #416]	; (80081f0 <TIM_Base_SetConfig+0x1b4>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d02b      	beq.n	80080ac <TIM_Base_SetConfig+0x70>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	4a67      	ldr	r2, [pc, #412]	; (80081f4 <TIM_Base_SetConfig+0x1b8>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d027      	beq.n	80080ac <TIM_Base_SetConfig+0x70>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008062:	d023      	beq.n	80080ac <TIM_Base_SetConfig+0x70>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800806a:	d01f      	beq.n	80080ac <TIM_Base_SetConfig+0x70>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4a62      	ldr	r2, [pc, #392]	; (80081f8 <TIM_Base_SetConfig+0x1bc>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d01b      	beq.n	80080ac <TIM_Base_SetConfig+0x70>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	4a61      	ldr	r2, [pc, #388]	; (80081fc <TIM_Base_SetConfig+0x1c0>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d017      	beq.n	80080ac <TIM_Base_SetConfig+0x70>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	4a60      	ldr	r2, [pc, #384]	; (8008200 <TIM_Base_SetConfig+0x1c4>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d013      	beq.n	80080ac <TIM_Base_SetConfig+0x70>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4a5f      	ldr	r2, [pc, #380]	; (8008204 <TIM_Base_SetConfig+0x1c8>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d00f      	beq.n	80080ac <TIM_Base_SetConfig+0x70>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	4a5e      	ldr	r2, [pc, #376]	; (8008208 <TIM_Base_SetConfig+0x1cc>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d00b      	beq.n	80080ac <TIM_Base_SetConfig+0x70>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4a5d      	ldr	r2, [pc, #372]	; (800820c <TIM_Base_SetConfig+0x1d0>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d007      	beq.n	80080ac <TIM_Base_SetConfig+0x70>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	4a5c      	ldr	r2, [pc, #368]	; (8008210 <TIM_Base_SetConfig+0x1d4>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d003      	beq.n	80080ac <TIM_Base_SetConfig+0x70>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4a5b      	ldr	r2, [pc, #364]	; (8008214 <TIM_Base_SetConfig+0x1d8>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d108      	bne.n	80080be <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	68fa      	ldr	r2, [r7, #12]
 80080ba:	4313      	orrs	r3, r2
 80080bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	4a4b      	ldr	r2, [pc, #300]	; (80081f0 <TIM_Base_SetConfig+0x1b4>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d043      	beq.n	800814e <TIM_Base_SetConfig+0x112>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4a4a      	ldr	r2, [pc, #296]	; (80081f4 <TIM_Base_SetConfig+0x1b8>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d03f      	beq.n	800814e <TIM_Base_SetConfig+0x112>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080d4:	d03b      	beq.n	800814e <TIM_Base_SetConfig+0x112>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080dc:	d037      	beq.n	800814e <TIM_Base_SetConfig+0x112>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a45      	ldr	r2, [pc, #276]	; (80081f8 <TIM_Base_SetConfig+0x1bc>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d033      	beq.n	800814e <TIM_Base_SetConfig+0x112>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4a44      	ldr	r2, [pc, #272]	; (80081fc <TIM_Base_SetConfig+0x1c0>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d02f      	beq.n	800814e <TIM_Base_SetConfig+0x112>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	4a43      	ldr	r2, [pc, #268]	; (8008200 <TIM_Base_SetConfig+0x1c4>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d02b      	beq.n	800814e <TIM_Base_SetConfig+0x112>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	4a42      	ldr	r2, [pc, #264]	; (8008204 <TIM_Base_SetConfig+0x1c8>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d027      	beq.n	800814e <TIM_Base_SetConfig+0x112>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4a41      	ldr	r2, [pc, #260]	; (8008208 <TIM_Base_SetConfig+0x1cc>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d023      	beq.n	800814e <TIM_Base_SetConfig+0x112>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4a40      	ldr	r2, [pc, #256]	; (800820c <TIM_Base_SetConfig+0x1d0>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d01f      	beq.n	800814e <TIM_Base_SetConfig+0x112>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	4a3f      	ldr	r2, [pc, #252]	; (8008210 <TIM_Base_SetConfig+0x1d4>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d01b      	beq.n	800814e <TIM_Base_SetConfig+0x112>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	4a3e      	ldr	r2, [pc, #248]	; (8008214 <TIM_Base_SetConfig+0x1d8>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d017      	beq.n	800814e <TIM_Base_SetConfig+0x112>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	4a3d      	ldr	r2, [pc, #244]	; (8008218 <TIM_Base_SetConfig+0x1dc>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d013      	beq.n	800814e <TIM_Base_SetConfig+0x112>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4a3c      	ldr	r2, [pc, #240]	; (800821c <TIM_Base_SetConfig+0x1e0>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d00f      	beq.n	800814e <TIM_Base_SetConfig+0x112>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	4a3b      	ldr	r2, [pc, #236]	; (8008220 <TIM_Base_SetConfig+0x1e4>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d00b      	beq.n	800814e <TIM_Base_SetConfig+0x112>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	4a3a      	ldr	r2, [pc, #232]	; (8008224 <TIM_Base_SetConfig+0x1e8>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d007      	beq.n	800814e <TIM_Base_SetConfig+0x112>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4a39      	ldr	r2, [pc, #228]	; (8008228 <TIM_Base_SetConfig+0x1ec>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d003      	beq.n	800814e <TIM_Base_SetConfig+0x112>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	4a38      	ldr	r2, [pc, #224]	; (800822c <TIM_Base_SetConfig+0x1f0>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d108      	bne.n	8008160 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008154:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	68fa      	ldr	r2, [r7, #12]
 800815c:	4313      	orrs	r3, r2
 800815e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	695b      	ldr	r3, [r3, #20]
 800816a:	4313      	orrs	r3, r2
 800816c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	68fa      	ldr	r2, [r7, #12]
 8008172:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	689a      	ldr	r2, [r3, #8]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	4a1a      	ldr	r2, [pc, #104]	; (80081f0 <TIM_Base_SetConfig+0x1b4>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d023      	beq.n	80081d4 <TIM_Base_SetConfig+0x198>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	4a19      	ldr	r2, [pc, #100]	; (80081f4 <TIM_Base_SetConfig+0x1b8>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d01f      	beq.n	80081d4 <TIM_Base_SetConfig+0x198>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	4a1e      	ldr	r2, [pc, #120]	; (8008210 <TIM_Base_SetConfig+0x1d4>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d01b      	beq.n	80081d4 <TIM_Base_SetConfig+0x198>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	4a1d      	ldr	r2, [pc, #116]	; (8008214 <TIM_Base_SetConfig+0x1d8>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d017      	beq.n	80081d4 <TIM_Base_SetConfig+0x198>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	4a1c      	ldr	r2, [pc, #112]	; (8008218 <TIM_Base_SetConfig+0x1dc>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d013      	beq.n	80081d4 <TIM_Base_SetConfig+0x198>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	4a1b      	ldr	r2, [pc, #108]	; (800821c <TIM_Base_SetConfig+0x1e0>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d00f      	beq.n	80081d4 <TIM_Base_SetConfig+0x198>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	4a1a      	ldr	r2, [pc, #104]	; (8008220 <TIM_Base_SetConfig+0x1e4>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d00b      	beq.n	80081d4 <TIM_Base_SetConfig+0x198>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	4a19      	ldr	r2, [pc, #100]	; (8008224 <TIM_Base_SetConfig+0x1e8>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d007      	beq.n	80081d4 <TIM_Base_SetConfig+0x198>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	4a18      	ldr	r2, [pc, #96]	; (8008228 <TIM_Base_SetConfig+0x1ec>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d003      	beq.n	80081d4 <TIM_Base_SetConfig+0x198>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	4a17      	ldr	r2, [pc, #92]	; (800822c <TIM_Base_SetConfig+0x1f0>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d103      	bne.n	80081dc <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	691a      	ldr	r2, [r3, #16]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	615a      	str	r2, [r3, #20]
}
 80081e2:	bf00      	nop
 80081e4:	3714      	adds	r7, #20
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop
 80081f0:	40012c00 	.word	0x40012c00
 80081f4:	50012c00 	.word	0x50012c00
 80081f8:	40000400 	.word	0x40000400
 80081fc:	50000400 	.word	0x50000400
 8008200:	40000800 	.word	0x40000800
 8008204:	50000800 	.word	0x50000800
 8008208:	40000c00 	.word	0x40000c00
 800820c:	50000c00 	.word	0x50000c00
 8008210:	40013400 	.word	0x40013400
 8008214:	50013400 	.word	0x50013400
 8008218:	40014000 	.word	0x40014000
 800821c:	50014000 	.word	0x50014000
 8008220:	40014400 	.word	0x40014400
 8008224:	50014400 	.word	0x50014400
 8008228:	40014800 	.word	0x40014800
 800822c:	50014800 	.word	0x50014800

08008230 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008230:	b480      	push	{r7}
 8008232:	b087      	sub	sp, #28
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6a1b      	ldr	r3, [r3, #32]
 800823e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6a1b      	ldr	r3, [r3, #32]
 8008244:	f023 0201 	bic.w	r2, r3, #1
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	699b      	ldr	r3, [r3, #24]
 8008256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800825e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f023 0303 	bic.w	r3, r3, #3
 800826a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	68fa      	ldr	r2, [r7, #12]
 8008272:	4313      	orrs	r3, r2
 8008274:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	f023 0302 	bic.w	r3, r3, #2
 800827c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	697a      	ldr	r2, [r7, #20]
 8008284:	4313      	orrs	r3, r2
 8008286:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	4a40      	ldr	r2, [pc, #256]	; (800838c <TIM_OC1_SetConfig+0x15c>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d023      	beq.n	80082d8 <TIM_OC1_SetConfig+0xa8>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	4a3f      	ldr	r2, [pc, #252]	; (8008390 <TIM_OC1_SetConfig+0x160>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d01f      	beq.n	80082d8 <TIM_OC1_SetConfig+0xa8>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	4a3e      	ldr	r2, [pc, #248]	; (8008394 <TIM_OC1_SetConfig+0x164>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d01b      	beq.n	80082d8 <TIM_OC1_SetConfig+0xa8>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	4a3d      	ldr	r2, [pc, #244]	; (8008398 <TIM_OC1_SetConfig+0x168>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d017      	beq.n	80082d8 <TIM_OC1_SetConfig+0xa8>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	4a3c      	ldr	r2, [pc, #240]	; (800839c <TIM_OC1_SetConfig+0x16c>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d013      	beq.n	80082d8 <TIM_OC1_SetConfig+0xa8>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	4a3b      	ldr	r2, [pc, #236]	; (80083a0 <TIM_OC1_SetConfig+0x170>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d00f      	beq.n	80082d8 <TIM_OC1_SetConfig+0xa8>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	4a3a      	ldr	r2, [pc, #232]	; (80083a4 <TIM_OC1_SetConfig+0x174>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d00b      	beq.n	80082d8 <TIM_OC1_SetConfig+0xa8>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	4a39      	ldr	r2, [pc, #228]	; (80083a8 <TIM_OC1_SetConfig+0x178>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d007      	beq.n	80082d8 <TIM_OC1_SetConfig+0xa8>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4a38      	ldr	r2, [pc, #224]	; (80083ac <TIM_OC1_SetConfig+0x17c>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d003      	beq.n	80082d8 <TIM_OC1_SetConfig+0xa8>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	4a37      	ldr	r2, [pc, #220]	; (80083b0 <TIM_OC1_SetConfig+0x180>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d10c      	bne.n	80082f2 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	f023 0308 	bic.w	r3, r3, #8
 80082de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	697a      	ldr	r2, [r7, #20]
 80082e6:	4313      	orrs	r3, r2
 80082e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	f023 0304 	bic.w	r3, r3, #4
 80082f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4a25      	ldr	r2, [pc, #148]	; (800838c <TIM_OC1_SetConfig+0x15c>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d023      	beq.n	8008342 <TIM_OC1_SetConfig+0x112>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4a24      	ldr	r2, [pc, #144]	; (8008390 <TIM_OC1_SetConfig+0x160>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d01f      	beq.n	8008342 <TIM_OC1_SetConfig+0x112>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4a23      	ldr	r2, [pc, #140]	; (8008394 <TIM_OC1_SetConfig+0x164>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d01b      	beq.n	8008342 <TIM_OC1_SetConfig+0x112>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4a22      	ldr	r2, [pc, #136]	; (8008398 <TIM_OC1_SetConfig+0x168>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d017      	beq.n	8008342 <TIM_OC1_SetConfig+0x112>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4a21      	ldr	r2, [pc, #132]	; (800839c <TIM_OC1_SetConfig+0x16c>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d013      	beq.n	8008342 <TIM_OC1_SetConfig+0x112>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4a20      	ldr	r2, [pc, #128]	; (80083a0 <TIM_OC1_SetConfig+0x170>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d00f      	beq.n	8008342 <TIM_OC1_SetConfig+0x112>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4a1f      	ldr	r2, [pc, #124]	; (80083a4 <TIM_OC1_SetConfig+0x174>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d00b      	beq.n	8008342 <TIM_OC1_SetConfig+0x112>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4a1e      	ldr	r2, [pc, #120]	; (80083a8 <TIM_OC1_SetConfig+0x178>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d007      	beq.n	8008342 <TIM_OC1_SetConfig+0x112>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4a1d      	ldr	r2, [pc, #116]	; (80083ac <TIM_OC1_SetConfig+0x17c>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d003      	beq.n	8008342 <TIM_OC1_SetConfig+0x112>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4a1c      	ldr	r2, [pc, #112]	; (80083b0 <TIM_OC1_SetConfig+0x180>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d111      	bne.n	8008366 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008348:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008350:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	695b      	ldr	r3, [r3, #20]
 8008356:	693a      	ldr	r2, [r7, #16]
 8008358:	4313      	orrs	r3, r2
 800835a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	699b      	ldr	r3, [r3, #24]
 8008360:	693a      	ldr	r2, [r7, #16]
 8008362:	4313      	orrs	r3, r2
 8008364:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	693a      	ldr	r2, [r7, #16]
 800836a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	68fa      	ldr	r2, [r7, #12]
 8008370:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	685a      	ldr	r2, [r3, #4]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	697a      	ldr	r2, [r7, #20]
 800837e:	621a      	str	r2, [r3, #32]
}
 8008380:	bf00      	nop
 8008382:	371c      	adds	r7, #28
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr
 800838c:	40012c00 	.word	0x40012c00
 8008390:	50012c00 	.word	0x50012c00
 8008394:	40013400 	.word	0x40013400
 8008398:	50013400 	.word	0x50013400
 800839c:	40014000 	.word	0x40014000
 80083a0:	50014000 	.word	0x50014000
 80083a4:	40014400 	.word	0x40014400
 80083a8:	50014400 	.word	0x50014400
 80083ac:	40014800 	.word	0x40014800
 80083b0:	50014800 	.word	0x50014800

080083b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b087      	sub	sp, #28
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a1b      	ldr	r3, [r3, #32]
 80083c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6a1b      	ldr	r3, [r3, #32]
 80083c8:	f023 0210 	bic.w	r2, r3, #16
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	699b      	ldr	r3, [r3, #24]
 80083da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80083e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	021b      	lsls	r3, r3, #8
 80083f6:	68fa      	ldr	r2, [r7, #12]
 80083f8:	4313      	orrs	r3, r2
 80083fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	f023 0320 	bic.w	r3, r3, #32
 8008402:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	011b      	lsls	r3, r3, #4
 800840a:	697a      	ldr	r2, [r7, #20]
 800840c:	4313      	orrs	r3, r2
 800840e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	4a36      	ldr	r2, [pc, #216]	; (80084ec <TIM_OC2_SetConfig+0x138>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d00b      	beq.n	8008430 <TIM_OC2_SetConfig+0x7c>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	4a35      	ldr	r2, [pc, #212]	; (80084f0 <TIM_OC2_SetConfig+0x13c>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d007      	beq.n	8008430 <TIM_OC2_SetConfig+0x7c>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	4a34      	ldr	r2, [pc, #208]	; (80084f4 <TIM_OC2_SetConfig+0x140>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d003      	beq.n	8008430 <TIM_OC2_SetConfig+0x7c>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	4a33      	ldr	r2, [pc, #204]	; (80084f8 <TIM_OC2_SetConfig+0x144>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d10d      	bne.n	800844c <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008436:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	011b      	lsls	r3, r3, #4
 800843e:	697a      	ldr	r2, [r7, #20]
 8008440:	4313      	orrs	r3, r2
 8008442:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800844a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	4a27      	ldr	r2, [pc, #156]	; (80084ec <TIM_OC2_SetConfig+0x138>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d023      	beq.n	800849c <TIM_OC2_SetConfig+0xe8>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	4a26      	ldr	r2, [pc, #152]	; (80084f0 <TIM_OC2_SetConfig+0x13c>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d01f      	beq.n	800849c <TIM_OC2_SetConfig+0xe8>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	4a25      	ldr	r2, [pc, #148]	; (80084f4 <TIM_OC2_SetConfig+0x140>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d01b      	beq.n	800849c <TIM_OC2_SetConfig+0xe8>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	4a24      	ldr	r2, [pc, #144]	; (80084f8 <TIM_OC2_SetConfig+0x144>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d017      	beq.n	800849c <TIM_OC2_SetConfig+0xe8>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4a23      	ldr	r2, [pc, #140]	; (80084fc <TIM_OC2_SetConfig+0x148>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d013      	beq.n	800849c <TIM_OC2_SetConfig+0xe8>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4a22      	ldr	r2, [pc, #136]	; (8008500 <TIM_OC2_SetConfig+0x14c>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d00f      	beq.n	800849c <TIM_OC2_SetConfig+0xe8>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4a21      	ldr	r2, [pc, #132]	; (8008504 <TIM_OC2_SetConfig+0x150>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d00b      	beq.n	800849c <TIM_OC2_SetConfig+0xe8>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	4a20      	ldr	r2, [pc, #128]	; (8008508 <TIM_OC2_SetConfig+0x154>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d007      	beq.n	800849c <TIM_OC2_SetConfig+0xe8>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	4a1f      	ldr	r2, [pc, #124]	; (800850c <TIM_OC2_SetConfig+0x158>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d003      	beq.n	800849c <TIM_OC2_SetConfig+0xe8>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	4a1e      	ldr	r2, [pc, #120]	; (8008510 <TIM_OC2_SetConfig+0x15c>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d113      	bne.n	80084c4 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80084a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80084aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	695b      	ldr	r3, [r3, #20]
 80084b0:	009b      	lsls	r3, r3, #2
 80084b2:	693a      	ldr	r2, [r7, #16]
 80084b4:	4313      	orrs	r3, r2
 80084b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	699b      	ldr	r3, [r3, #24]
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	693a      	ldr	r2, [r7, #16]
 80084c0:	4313      	orrs	r3, r2
 80084c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	693a      	ldr	r2, [r7, #16]
 80084c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	685a      	ldr	r2, [r3, #4]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	697a      	ldr	r2, [r7, #20]
 80084dc:	621a      	str	r2, [r3, #32]
}
 80084de:	bf00      	nop
 80084e0:	371c      	adds	r7, #28
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr
 80084ea:	bf00      	nop
 80084ec:	40012c00 	.word	0x40012c00
 80084f0:	50012c00 	.word	0x50012c00
 80084f4:	40013400 	.word	0x40013400
 80084f8:	50013400 	.word	0x50013400
 80084fc:	40014000 	.word	0x40014000
 8008500:	50014000 	.word	0x50014000
 8008504:	40014400 	.word	0x40014400
 8008508:	50014400 	.word	0x50014400
 800850c:	40014800 	.word	0x40014800
 8008510:	50014800 	.word	0x50014800

08008514 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008514:	b480      	push	{r7}
 8008516:	b087      	sub	sp, #28
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6a1b      	ldr	r3, [r3, #32]
 8008522:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6a1b      	ldr	r3, [r3, #32]
 8008528:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	69db      	ldr	r3, [r3, #28]
 800853a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f023 0303 	bic.w	r3, r3, #3
 800854e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	68fa      	ldr	r2, [r7, #12]
 8008556:	4313      	orrs	r3, r2
 8008558:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008560:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	021b      	lsls	r3, r3, #8
 8008568:	697a      	ldr	r2, [r7, #20]
 800856a:	4313      	orrs	r3, r2
 800856c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	4a35      	ldr	r2, [pc, #212]	; (8008648 <TIM_OC3_SetConfig+0x134>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d00b      	beq.n	800858e <TIM_OC3_SetConfig+0x7a>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	4a34      	ldr	r2, [pc, #208]	; (800864c <TIM_OC3_SetConfig+0x138>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d007      	beq.n	800858e <TIM_OC3_SetConfig+0x7a>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	4a33      	ldr	r2, [pc, #204]	; (8008650 <TIM_OC3_SetConfig+0x13c>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d003      	beq.n	800858e <TIM_OC3_SetConfig+0x7a>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4a32      	ldr	r2, [pc, #200]	; (8008654 <TIM_OC3_SetConfig+0x140>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d10d      	bne.n	80085aa <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008594:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	68db      	ldr	r3, [r3, #12]
 800859a:	021b      	lsls	r3, r3, #8
 800859c:	697a      	ldr	r2, [r7, #20]
 800859e:	4313      	orrs	r3, r2
 80085a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80085a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	4a26      	ldr	r2, [pc, #152]	; (8008648 <TIM_OC3_SetConfig+0x134>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d023      	beq.n	80085fa <TIM_OC3_SetConfig+0xe6>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	4a25      	ldr	r2, [pc, #148]	; (800864c <TIM_OC3_SetConfig+0x138>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d01f      	beq.n	80085fa <TIM_OC3_SetConfig+0xe6>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	4a24      	ldr	r2, [pc, #144]	; (8008650 <TIM_OC3_SetConfig+0x13c>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d01b      	beq.n	80085fa <TIM_OC3_SetConfig+0xe6>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	4a23      	ldr	r2, [pc, #140]	; (8008654 <TIM_OC3_SetConfig+0x140>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d017      	beq.n	80085fa <TIM_OC3_SetConfig+0xe6>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4a22      	ldr	r2, [pc, #136]	; (8008658 <TIM_OC3_SetConfig+0x144>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d013      	beq.n	80085fa <TIM_OC3_SetConfig+0xe6>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	4a21      	ldr	r2, [pc, #132]	; (800865c <TIM_OC3_SetConfig+0x148>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d00f      	beq.n	80085fa <TIM_OC3_SetConfig+0xe6>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4a20      	ldr	r2, [pc, #128]	; (8008660 <TIM_OC3_SetConfig+0x14c>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d00b      	beq.n	80085fa <TIM_OC3_SetConfig+0xe6>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	4a1f      	ldr	r2, [pc, #124]	; (8008664 <TIM_OC3_SetConfig+0x150>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d007      	beq.n	80085fa <TIM_OC3_SetConfig+0xe6>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4a1e      	ldr	r2, [pc, #120]	; (8008668 <TIM_OC3_SetConfig+0x154>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d003      	beq.n	80085fa <TIM_OC3_SetConfig+0xe6>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4a1d      	ldr	r2, [pc, #116]	; (800866c <TIM_OC3_SetConfig+0x158>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d113      	bne.n	8008622 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008600:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008608:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	695b      	ldr	r3, [r3, #20]
 800860e:	011b      	lsls	r3, r3, #4
 8008610:	693a      	ldr	r2, [r7, #16]
 8008612:	4313      	orrs	r3, r2
 8008614:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	699b      	ldr	r3, [r3, #24]
 800861a:	011b      	lsls	r3, r3, #4
 800861c:	693a      	ldr	r2, [r7, #16]
 800861e:	4313      	orrs	r3, r2
 8008620:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	693a      	ldr	r2, [r7, #16]
 8008626:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	68fa      	ldr	r2, [r7, #12]
 800862c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	685a      	ldr	r2, [r3, #4]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	697a      	ldr	r2, [r7, #20]
 800863a:	621a      	str	r2, [r3, #32]
}
 800863c:	bf00      	nop
 800863e:	371c      	adds	r7, #28
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr
 8008648:	40012c00 	.word	0x40012c00
 800864c:	50012c00 	.word	0x50012c00
 8008650:	40013400 	.word	0x40013400
 8008654:	50013400 	.word	0x50013400
 8008658:	40014000 	.word	0x40014000
 800865c:	50014000 	.word	0x50014000
 8008660:	40014400 	.word	0x40014400
 8008664:	50014400 	.word	0x50014400
 8008668:	40014800 	.word	0x40014800
 800866c:	50014800 	.word	0x50014800

08008670 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008670:	b480      	push	{r7}
 8008672:	b087      	sub	sp, #28
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6a1b      	ldr	r3, [r3, #32]
 800867e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6a1b      	ldr	r3, [r3, #32]
 8008684:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	69db      	ldr	r3, [r3, #28]
 8008696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800869e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	021b      	lsls	r3, r3, #8
 80086b2:	68fa      	ldr	r2, [r7, #12]
 80086b4:	4313      	orrs	r3, r2
 80086b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80086be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	689b      	ldr	r3, [r3, #8]
 80086c4:	031b      	lsls	r3, r3, #12
 80086c6:	697a      	ldr	r2, [r7, #20]
 80086c8:	4313      	orrs	r3, r2
 80086ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	4a36      	ldr	r2, [pc, #216]	; (80087a8 <TIM_OC4_SetConfig+0x138>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d00b      	beq.n	80086ec <TIM_OC4_SetConfig+0x7c>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	4a35      	ldr	r2, [pc, #212]	; (80087ac <TIM_OC4_SetConfig+0x13c>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d007      	beq.n	80086ec <TIM_OC4_SetConfig+0x7c>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	4a34      	ldr	r2, [pc, #208]	; (80087b0 <TIM_OC4_SetConfig+0x140>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d003      	beq.n	80086ec <TIM_OC4_SetConfig+0x7c>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	4a33      	ldr	r2, [pc, #204]	; (80087b4 <TIM_OC4_SetConfig+0x144>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d10d      	bne.n	8008708 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80086f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	031b      	lsls	r3, r3, #12
 80086fa:	697a      	ldr	r2, [r7, #20]
 80086fc:	4313      	orrs	r3, r2
 80086fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008706:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4a27      	ldr	r2, [pc, #156]	; (80087a8 <TIM_OC4_SetConfig+0x138>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d023      	beq.n	8008758 <TIM_OC4_SetConfig+0xe8>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	4a26      	ldr	r2, [pc, #152]	; (80087ac <TIM_OC4_SetConfig+0x13c>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d01f      	beq.n	8008758 <TIM_OC4_SetConfig+0xe8>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	4a25      	ldr	r2, [pc, #148]	; (80087b0 <TIM_OC4_SetConfig+0x140>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d01b      	beq.n	8008758 <TIM_OC4_SetConfig+0xe8>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	4a24      	ldr	r2, [pc, #144]	; (80087b4 <TIM_OC4_SetConfig+0x144>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d017      	beq.n	8008758 <TIM_OC4_SetConfig+0xe8>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	4a23      	ldr	r2, [pc, #140]	; (80087b8 <TIM_OC4_SetConfig+0x148>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d013      	beq.n	8008758 <TIM_OC4_SetConfig+0xe8>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	4a22      	ldr	r2, [pc, #136]	; (80087bc <TIM_OC4_SetConfig+0x14c>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d00f      	beq.n	8008758 <TIM_OC4_SetConfig+0xe8>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	4a21      	ldr	r2, [pc, #132]	; (80087c0 <TIM_OC4_SetConfig+0x150>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d00b      	beq.n	8008758 <TIM_OC4_SetConfig+0xe8>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	4a20      	ldr	r2, [pc, #128]	; (80087c4 <TIM_OC4_SetConfig+0x154>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d007      	beq.n	8008758 <TIM_OC4_SetConfig+0xe8>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a1f      	ldr	r2, [pc, #124]	; (80087c8 <TIM_OC4_SetConfig+0x158>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d003      	beq.n	8008758 <TIM_OC4_SetConfig+0xe8>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	4a1e      	ldr	r2, [pc, #120]	; (80087cc <TIM_OC4_SetConfig+0x15c>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d113      	bne.n	8008780 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800875e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008766:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	695b      	ldr	r3, [r3, #20]
 800876c:	019b      	lsls	r3, r3, #6
 800876e:	693a      	ldr	r2, [r7, #16]
 8008770:	4313      	orrs	r3, r2
 8008772:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	699b      	ldr	r3, [r3, #24]
 8008778:	019b      	lsls	r3, r3, #6
 800877a:	693a      	ldr	r2, [r7, #16]
 800877c:	4313      	orrs	r3, r2
 800877e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	693a      	ldr	r2, [r7, #16]
 8008784:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	685a      	ldr	r2, [r3, #4]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	697a      	ldr	r2, [r7, #20]
 8008798:	621a      	str	r2, [r3, #32]
}
 800879a:	bf00      	nop
 800879c:	371c      	adds	r7, #28
 800879e:	46bd      	mov	sp, r7
 80087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a4:	4770      	bx	lr
 80087a6:	bf00      	nop
 80087a8:	40012c00 	.word	0x40012c00
 80087ac:	50012c00 	.word	0x50012c00
 80087b0:	40013400 	.word	0x40013400
 80087b4:	50013400 	.word	0x50013400
 80087b8:	40014000 	.word	0x40014000
 80087bc:	50014000 	.word	0x50014000
 80087c0:	40014400 	.word	0x40014400
 80087c4:	50014400 	.word	0x50014400
 80087c8:	40014800 	.word	0x40014800
 80087cc:	50014800 	.word	0x50014800

080087d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b087      	sub	sp, #28
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6a1b      	ldr	r3, [r3, #32]
 80087de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6a1b      	ldr	r3, [r3, #32]
 80087e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008802:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	68fa      	ldr	r2, [r7, #12]
 800880a:	4313      	orrs	r3, r2
 800880c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008814:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	041b      	lsls	r3, r3, #16
 800881c:	693a      	ldr	r2, [r7, #16]
 800881e:	4313      	orrs	r3, r2
 8008820:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	4a21      	ldr	r2, [pc, #132]	; (80088ac <TIM_OC5_SetConfig+0xdc>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d023      	beq.n	8008872 <TIM_OC5_SetConfig+0xa2>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4a20      	ldr	r2, [pc, #128]	; (80088b0 <TIM_OC5_SetConfig+0xe0>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d01f      	beq.n	8008872 <TIM_OC5_SetConfig+0xa2>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	4a1f      	ldr	r2, [pc, #124]	; (80088b4 <TIM_OC5_SetConfig+0xe4>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d01b      	beq.n	8008872 <TIM_OC5_SetConfig+0xa2>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4a1e      	ldr	r2, [pc, #120]	; (80088b8 <TIM_OC5_SetConfig+0xe8>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d017      	beq.n	8008872 <TIM_OC5_SetConfig+0xa2>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	4a1d      	ldr	r2, [pc, #116]	; (80088bc <TIM_OC5_SetConfig+0xec>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d013      	beq.n	8008872 <TIM_OC5_SetConfig+0xa2>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	4a1c      	ldr	r2, [pc, #112]	; (80088c0 <TIM_OC5_SetConfig+0xf0>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d00f      	beq.n	8008872 <TIM_OC5_SetConfig+0xa2>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	4a1b      	ldr	r2, [pc, #108]	; (80088c4 <TIM_OC5_SetConfig+0xf4>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d00b      	beq.n	8008872 <TIM_OC5_SetConfig+0xa2>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	4a1a      	ldr	r2, [pc, #104]	; (80088c8 <TIM_OC5_SetConfig+0xf8>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d007      	beq.n	8008872 <TIM_OC5_SetConfig+0xa2>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4a19      	ldr	r2, [pc, #100]	; (80088cc <TIM_OC5_SetConfig+0xfc>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d003      	beq.n	8008872 <TIM_OC5_SetConfig+0xa2>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4a18      	ldr	r2, [pc, #96]	; (80088d0 <TIM_OC5_SetConfig+0x100>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d109      	bne.n	8008886 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008878:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	695b      	ldr	r3, [r3, #20]
 800887e:	021b      	lsls	r3, r3, #8
 8008880:	697a      	ldr	r2, [r7, #20]
 8008882:	4313      	orrs	r3, r2
 8008884:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	697a      	ldr	r2, [r7, #20]
 800888a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	68fa      	ldr	r2, [r7, #12]
 8008890:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	685a      	ldr	r2, [r3, #4]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	693a      	ldr	r2, [r7, #16]
 800889e:	621a      	str	r2, [r3, #32]
}
 80088a0:	bf00      	nop
 80088a2:	371c      	adds	r7, #28
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr
 80088ac:	40012c00 	.word	0x40012c00
 80088b0:	50012c00 	.word	0x50012c00
 80088b4:	40013400 	.word	0x40013400
 80088b8:	50013400 	.word	0x50013400
 80088bc:	40014000 	.word	0x40014000
 80088c0:	50014000 	.word	0x50014000
 80088c4:	40014400 	.word	0x40014400
 80088c8:	50014400 	.word	0x50014400
 80088cc:	40014800 	.word	0x40014800
 80088d0:	50014800 	.word	0x50014800

080088d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b087      	sub	sp, #28
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6a1b      	ldr	r3, [r3, #32]
 80088e2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6a1b      	ldr	r3, [r3, #32]
 80088e8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008906:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	021b      	lsls	r3, r3, #8
 800890e:	68fa      	ldr	r2, [r7, #12]
 8008910:	4313      	orrs	r3, r2
 8008912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800891a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	051b      	lsls	r3, r3, #20
 8008922:	693a      	ldr	r2, [r7, #16]
 8008924:	4313      	orrs	r3, r2
 8008926:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	4a22      	ldr	r2, [pc, #136]	; (80089b4 <TIM_OC6_SetConfig+0xe0>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d023      	beq.n	8008978 <TIM_OC6_SetConfig+0xa4>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	4a21      	ldr	r2, [pc, #132]	; (80089b8 <TIM_OC6_SetConfig+0xe4>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d01f      	beq.n	8008978 <TIM_OC6_SetConfig+0xa4>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4a20      	ldr	r2, [pc, #128]	; (80089bc <TIM_OC6_SetConfig+0xe8>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d01b      	beq.n	8008978 <TIM_OC6_SetConfig+0xa4>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4a1f      	ldr	r2, [pc, #124]	; (80089c0 <TIM_OC6_SetConfig+0xec>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d017      	beq.n	8008978 <TIM_OC6_SetConfig+0xa4>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	4a1e      	ldr	r2, [pc, #120]	; (80089c4 <TIM_OC6_SetConfig+0xf0>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d013      	beq.n	8008978 <TIM_OC6_SetConfig+0xa4>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	4a1d      	ldr	r2, [pc, #116]	; (80089c8 <TIM_OC6_SetConfig+0xf4>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d00f      	beq.n	8008978 <TIM_OC6_SetConfig+0xa4>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4a1c      	ldr	r2, [pc, #112]	; (80089cc <TIM_OC6_SetConfig+0xf8>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d00b      	beq.n	8008978 <TIM_OC6_SetConfig+0xa4>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	4a1b      	ldr	r2, [pc, #108]	; (80089d0 <TIM_OC6_SetConfig+0xfc>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d007      	beq.n	8008978 <TIM_OC6_SetConfig+0xa4>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	4a1a      	ldr	r2, [pc, #104]	; (80089d4 <TIM_OC6_SetConfig+0x100>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d003      	beq.n	8008978 <TIM_OC6_SetConfig+0xa4>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	4a19      	ldr	r2, [pc, #100]	; (80089d8 <TIM_OC6_SetConfig+0x104>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d109      	bne.n	800898c <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800897e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	695b      	ldr	r3, [r3, #20]
 8008984:	029b      	lsls	r3, r3, #10
 8008986:	697a      	ldr	r2, [r7, #20]
 8008988:	4313      	orrs	r3, r2
 800898a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	697a      	ldr	r2, [r7, #20]
 8008990:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	68fa      	ldr	r2, [r7, #12]
 8008996:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	685a      	ldr	r2, [r3, #4]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	693a      	ldr	r2, [r7, #16]
 80089a4:	621a      	str	r2, [r3, #32]
}
 80089a6:	bf00      	nop
 80089a8:	371c      	adds	r7, #28
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr
 80089b2:	bf00      	nop
 80089b4:	40012c00 	.word	0x40012c00
 80089b8:	50012c00 	.word	0x50012c00
 80089bc:	40013400 	.word	0x40013400
 80089c0:	50013400 	.word	0x50013400
 80089c4:	40014000 	.word	0x40014000
 80089c8:	50014000 	.word	0x50014000
 80089cc:	40014400 	.word	0x40014400
 80089d0:	50014400 	.word	0x50014400
 80089d4:	40014800 	.word	0x40014800
 80089d8:	50014800 	.word	0x50014800

080089dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089dc:	b480      	push	{r7}
 80089de:	b087      	sub	sp, #28
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	60f8      	str	r0, [r7, #12]
 80089e4:	60b9      	str	r1, [r7, #8]
 80089e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	6a1b      	ldr	r3, [r3, #32]
 80089ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	6a1b      	ldr	r3, [r3, #32]
 80089f2:	f023 0201 	bic.w	r2, r3, #1
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	699b      	ldr	r3, [r3, #24]
 80089fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	011b      	lsls	r3, r3, #4
 8008a0c:	693a      	ldr	r2, [r7, #16]
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	f023 030a 	bic.w	r3, r3, #10
 8008a18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008a1a:	697a      	ldr	r2, [r7, #20]
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	693a      	ldr	r2, [r7, #16]
 8008a26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	697a      	ldr	r2, [r7, #20]
 8008a2c:	621a      	str	r2, [r3, #32]
}
 8008a2e:	bf00      	nop
 8008a30:	371c      	adds	r7, #28
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr

08008a3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a3a:	b480      	push	{r7}
 8008a3c:	b087      	sub	sp, #28
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	60f8      	str	r0, [r7, #12]
 8008a42:	60b9      	str	r1, [r7, #8]
 8008a44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	6a1b      	ldr	r3, [r3, #32]
 8008a4a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	6a1b      	ldr	r3, [r3, #32]
 8008a50:	f023 0210 	bic.w	r2, r3, #16
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	699b      	ldr	r3, [r3, #24]
 8008a5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008a64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	031b      	lsls	r3, r3, #12
 8008a6a:	693a      	ldr	r2, [r7, #16]
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008a76:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	011b      	lsls	r3, r3, #4
 8008a7c:	697a      	ldr	r2, [r7, #20]
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	693a      	ldr	r2, [r7, #16]
 8008a86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	697a      	ldr	r2, [r7, #20]
 8008a8c:	621a      	str	r2, [r3, #32]
}
 8008a8e:	bf00      	nop
 8008a90:	371c      	adds	r7, #28
 8008a92:	46bd      	mov	sp, r7
 8008a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a98:	4770      	bx	lr

08008a9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008a9a:	b480      	push	{r7}
 8008a9c:	b085      	sub	sp, #20
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
 8008aa2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ab4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008ab6:	683a      	ldr	r2, [r7, #0]
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	4313      	orrs	r3, r2
 8008abc:	f043 0307 	orr.w	r3, r3, #7
 8008ac0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	68fa      	ldr	r2, [r7, #12]
 8008ac6:	609a      	str	r2, [r3, #8]
}
 8008ac8:	bf00      	nop
 8008aca:	3714      	adds	r7, #20
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr

08008ad4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b087      	sub	sp, #28
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	60f8      	str	r0, [r7, #12]
 8008adc:	60b9      	str	r1, [r7, #8]
 8008ade:	607a      	str	r2, [r7, #4]
 8008ae0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008aee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	021a      	lsls	r2, r3, #8
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	431a      	orrs	r2, r3
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	4313      	orrs	r3, r2
 8008afc:	697a      	ldr	r2, [r7, #20]
 8008afe:	4313      	orrs	r3, r2
 8008b00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	697a      	ldr	r2, [r7, #20]
 8008b06:	609a      	str	r2, [r3, #8]
}
 8008b08:	bf00      	nop
 8008b0a:	371c      	adds	r7, #28
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr

08008b14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b087      	sub	sp, #28
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	f003 031f 	and.w	r3, r3, #31
 8008b26:	2201      	movs	r2, #1
 8008b28:	fa02 f303 	lsl.w	r3, r2, r3
 8008b2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	6a1a      	ldr	r2, [r3, #32]
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	43db      	mvns	r3, r3
 8008b36:	401a      	ands	r2, r3
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	6a1a      	ldr	r2, [r3, #32]
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	f003 031f 	and.w	r3, r3, #31
 8008b46:	6879      	ldr	r1, [r7, #4]
 8008b48:	fa01 f303 	lsl.w	r3, r1, r3
 8008b4c:	431a      	orrs	r2, r3
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	621a      	str	r2, [r3, #32]
}
 8008b52:	bf00      	nop
 8008b54:	371c      	adds	r7, #28
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr
	...

08008b60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b085      	sub	sp, #20
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d101      	bne.n	8008b78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b74:	2302      	movs	r3, #2
 8008b76:	e097      	b.n	8008ca8 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2202      	movs	r2, #2
 8008b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a45      	ldr	r2, [pc, #276]	; (8008cb4 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d00e      	beq.n	8008bc0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a44      	ldr	r2, [pc, #272]	; (8008cb8 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d009      	beq.n	8008bc0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a42      	ldr	r2, [pc, #264]	; (8008cbc <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d004      	beq.n	8008bc0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a41      	ldr	r2, [pc, #260]	; (8008cc0 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d108      	bne.n	8008bd2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008bc6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	68fa      	ldr	r2, [r7, #12]
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bdc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	68fa      	ldr	r2, [r7, #12]
 8008be4:	4313      	orrs	r3, r2
 8008be6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	68fa      	ldr	r2, [r7, #12]
 8008bee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a2f      	ldr	r2, [pc, #188]	; (8008cb4 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d040      	beq.n	8008c7c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a2e      	ldr	r2, [pc, #184]	; (8008cb8 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d03b      	beq.n	8008c7c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c0c:	d036      	beq.n	8008c7c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c16:	d031      	beq.n	8008c7c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a29      	ldr	r2, [pc, #164]	; (8008cc4 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d02c      	beq.n	8008c7c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a28      	ldr	r2, [pc, #160]	; (8008cc8 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d027      	beq.n	8008c7c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a26      	ldr	r2, [pc, #152]	; (8008ccc <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d022      	beq.n	8008c7c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4a25      	ldr	r2, [pc, #148]	; (8008cd0 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d01d      	beq.n	8008c7c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4a23      	ldr	r2, [pc, #140]	; (8008cd4 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d018      	beq.n	8008c7c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4a22      	ldr	r2, [pc, #136]	; (8008cd8 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d013      	beq.n	8008c7c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4a18      	ldr	r2, [pc, #96]	; (8008cbc <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d00e      	beq.n	8008c7c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4a17      	ldr	r2, [pc, #92]	; (8008cc0 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d009      	beq.n	8008c7c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a1b      	ldr	r2, [pc, #108]	; (8008cdc <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d004      	beq.n	8008c7c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a1a      	ldr	r2, [pc, #104]	; (8008ce0 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d10c      	bne.n	8008c96 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	689b      	ldr	r3, [r3, #8]
 8008c88:	68ba      	ldr	r2, [r7, #8]
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	68ba      	ldr	r2, [r7, #8]
 8008c94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2201      	movs	r2, #1
 8008c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3714      	adds	r7, #20
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr
 8008cb4:	40012c00 	.word	0x40012c00
 8008cb8:	50012c00 	.word	0x50012c00
 8008cbc:	40013400 	.word	0x40013400
 8008cc0:	50013400 	.word	0x50013400
 8008cc4:	40000400 	.word	0x40000400
 8008cc8:	50000400 	.word	0x50000400
 8008ccc:	40000800 	.word	0x40000800
 8008cd0:	50000800 	.word	0x50000800
 8008cd4:	40000c00 	.word	0x40000c00
 8008cd8:	50000c00 	.word	0x50000c00
 8008cdc:	40014000 	.word	0x40014000
 8008ce0:	50014000 	.word	0x50014000

08008ce4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b083      	sub	sp, #12
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008cec:	bf00      	nop
 8008cee:	370c      	adds	r7, #12
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr

08008cf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b083      	sub	sp, #12
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d00:	bf00      	nop
 8008d02:	370c      	adds	r7, #12
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr

08008d0c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b083      	sub	sp, #12
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008d14:	bf00      	nop
 8008d16:	370c      	adds	r7, #12
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b083      	sub	sp, #12
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008d28:	bf00      	nop
 8008d2a:	370c      	adds	r7, #12
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr

08008d34 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008d3c:	bf00      	nop
 8008d3e:	370c      	adds	r7, #12
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008d50:	bf00      	nop
 8008d52:	370c      	adds	r7, #12
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr

08008d5c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008d64:	bf00      	nop
 8008d66:	370c      	adds	r7, #12
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr

08008d70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d101      	bne.n	8008d82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	e042      	b.n	8008e08 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d106      	bne.n	8008d9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f7f8 f91d 	bl	8000fd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2224      	movs	r2, #36	; 0x24
 8008d9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f022 0201 	bic.w	r2, r2, #1
 8008db0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d002      	beq.n	8008dc0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 fcaa 	bl	8009714 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 fb05 	bl	80093d0 <UART_SetConfig>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d101      	bne.n	8008dd0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	e01b      	b.n	8008e08 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	685a      	ldr	r2, [r3, #4]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008dde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	689a      	ldr	r2, [r3, #8]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008dee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	681a      	ldr	r2, [r3, #0]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f042 0201 	orr.w	r2, r2, #1
 8008dfe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 fd29 	bl	8009858 <UART_CheckIdleState>
 8008e06:	4603      	mov	r3, r0
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3708      	adds	r7, #8
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b0ae      	sub	sp, #184	; 0xb8
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	69db      	ldr	r3, [r3, #28]
 8008e1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	689b      	ldr	r3, [r3, #8]
 8008e32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008e36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008e3a:	f640 030f 	movw	r3, #2063	; 0x80f
 8008e3e:	4013      	ands	r3, r2
 8008e40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (errorflags == 0U)
 8008e44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d11b      	bne.n	8008e84 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008e4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008e50:	f003 0320 	and.w	r3, r3, #32
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d015      	beq.n	8008e84 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008e58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008e5c:	f003 0320 	and.w	r3, r3, #32
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d105      	bne.n	8008e70 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008e64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d009      	beq.n	8008e84 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	f000 827e 	beq.w	8009376 <HAL_UART_IRQHandler+0x566>
      {
        huart->RxISR(huart);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	4798      	blx	r3
      }
      return;
 8008e82:	e278      	b.n	8009376 <HAL_UART_IRQHandler+0x566>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008e84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	f000 80fd 	beq.w	8009088 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008e8e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008e92:	4b7a      	ldr	r3, [pc, #488]	; (800907c <HAL_UART_IRQHandler+0x26c>)
 8008e94:	4013      	ands	r3, r2
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d106      	bne.n	8008ea8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008e9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008e9e:	4b78      	ldr	r3, [pc, #480]	; (8009080 <HAL_UART_IRQHandler+0x270>)
 8008ea0:	4013      	ands	r3, r2
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	f000 80f0 	beq.w	8009088 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ea8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008eac:	f003 0301 	and.w	r3, r3, #1
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d011      	beq.n	8008ed8 <HAL_UART_IRQHandler+0xc8>
 8008eb4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d00b      	beq.n	8008ed8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ece:	f043 0201 	orr.w	r2, r3, #1
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ed8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008edc:	f003 0302 	and.w	r3, r3, #2
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d011      	beq.n	8008f08 <HAL_UART_IRQHandler+0xf8>
 8008ee4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008ee8:	f003 0301 	and.w	r3, r3, #1
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d00b      	beq.n	8008f08 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	2202      	movs	r2, #2
 8008ef6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008efe:	f043 0204 	orr.w	r2, r3, #4
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008f0c:	f003 0304 	and.w	r3, r3, #4
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d011      	beq.n	8008f38 <HAL_UART_IRQHandler+0x128>
 8008f14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008f18:	f003 0301 	and.w	r3, r3, #1
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d00b      	beq.n	8008f38 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	2204      	movs	r2, #4
 8008f26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f2e:	f043 0202 	orr.w	r2, r3, #2
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008f38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008f3c:	f003 0308 	and.w	r3, r3, #8
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d017      	beq.n	8008f74 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008f44:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008f48:	f003 0320 	and.w	r3, r3, #32
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d105      	bne.n	8008f5c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008f50:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008f54:	4b49      	ldr	r3, [pc, #292]	; (800907c <HAL_UART_IRQHandler+0x26c>)
 8008f56:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d00b      	beq.n	8008f74 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	2208      	movs	r2, #8
 8008f62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f6a:	f043 0208 	orr.w	r2, r3, #8
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008f74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008f78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d012      	beq.n	8008fa6 <HAL_UART_IRQHandler+0x196>
 8008f80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008f84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d00c      	beq.n	8008fa6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f9c:	f043 0220 	orr.w	r2, r3, #32
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	f000 81e4 	beq.w	800937a <HAL_UART_IRQHandler+0x56a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008fb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008fb6:	f003 0320 	and.w	r3, r3, #32
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d013      	beq.n	8008fe6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008fbe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008fc2:	f003 0320 	and.w	r3, r3, #32
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d105      	bne.n	8008fd6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008fca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d007      	beq.n	8008fe6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d003      	beq.n	8008fe6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ffa:	2b40      	cmp	r3, #64	; 0x40
 8008ffc:	d005      	beq.n	800900a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008ffe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009002:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009006:	2b00      	cmp	r3, #0
 8009008:	d02e      	beq.n	8009068 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 fd35 	bl	8009a7a <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	689b      	ldr	r3, [r3, #8]
 8009016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800901a:	2b40      	cmp	r3, #64	; 0x40
 800901c:	d120      	bne.n	8009060 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009024:	2b00      	cmp	r3, #0
 8009026:	d017      	beq.n	8009058 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800902e:	4a15      	ldr	r2, [pc, #84]	; (8009084 <HAL_UART_IRQHandler+0x274>)
 8009030:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009038:	4618      	mov	r0, r3
 800903a:	f7f8 fbe7 	bl	800180c <HAL_DMA_Abort_IT>
 800903e:	4603      	mov	r3, r0
 8009040:	2b00      	cmp	r3, #0
 8009042:	d019      	beq.n	8009078 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800904a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8009052:	4610      	mov	r0, r2
 8009054:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009056:	e00f      	b.n	8009078 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 f9a3 	bl	80093a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800905e:	e00b      	b.n	8009078 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 f99f 	bl	80093a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009066:	e007      	b.n	8009078 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 f99b 	bl	80093a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2200      	movs	r2, #0
 8009072:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8009076:	e180      	b.n	800937a <HAL_UART_IRQHandler+0x56a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009078:	bf00      	nop
    return;
 800907a:	e17e      	b.n	800937a <HAL_UART_IRQHandler+0x56a>
 800907c:	10000001 	.word	0x10000001
 8009080:	04000120 	.word	0x04000120
 8009084:	08009b47 	.word	0x08009b47

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800908c:	2b01      	cmp	r3, #1
 800908e:	f040 8129 	bne.w	80092e4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009092:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009096:	f003 0310 	and.w	r3, r3, #16
 800909a:	2b00      	cmp	r3, #0
 800909c:	f000 8122 	beq.w	80092e4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80090a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80090a4:	f003 0310 	and.w	r3, r3, #16
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	f000 811b 	beq.w	80092e4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	2210      	movs	r2, #16
 80090b4:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	689b      	ldr	r3, [r3, #8]
 80090bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090c0:	2b40      	cmp	r3, #64	; 0x40
 80090c2:	f040 8091 	bne.w	80091e8 <HAL_UART_IRQHandler+0x3d8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090d0:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
      if ((nb_remaining_rx_data > 0U)
 80090d4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80090d8:	2b00      	cmp	r3, #0
 80090da:	f000 8150 	beq.w	800937e <HAL_UART_IRQHandler+0x56e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80090e4:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80090e8:	429a      	cmp	r2, r3
 80090ea:	f080 8148 	bcs.w	800937e <HAL_UART_IRQHandler+0x56e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80090f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009100:	2b81      	cmp	r3, #129	; 0x81
 8009102:	d060      	beq.n	80091c6 <HAL_UART_IRQHandler+0x3b6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800910a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800910c:	e853 3f00 	ldrex	r3, [r3]
 8009110:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009112:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009114:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009118:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	461a      	mov	r2, r3
 8009122:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009126:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800912a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800912c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800912e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009132:	e841 2300 	strex	r3, r2, [r1]
 8009136:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009138:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800913a:	2b00      	cmp	r3, #0
 800913c:	d1e2      	bne.n	8009104 <HAL_UART_IRQHandler+0x2f4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	3308      	adds	r3, #8
 8009144:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009146:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009148:	e853 3f00 	ldrex	r3, [r3]
 800914c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800914e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009150:	f023 0301 	bic.w	r3, r3, #1
 8009154:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	3308      	adds	r3, #8
 800915e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009162:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009164:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009166:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009168:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800916a:	e841 2300 	strex	r3, r2, [r1]
 800916e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009170:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009172:	2b00      	cmp	r3, #0
 8009174:	d1e3      	bne.n	800913e <HAL_UART_IRQHandler+0x32e>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2220      	movs	r2, #32
 800917a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2200      	movs	r2, #0
 8009182:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800918a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800918c:	e853 3f00 	ldrex	r3, [r3]
 8009190:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009192:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009194:	f023 0310 	bic.w	r3, r3, #16
 8009198:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	461a      	mov	r2, r3
 80091a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80091a8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80091ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80091ae:	e841 2300 	strex	r3, r2, [r1]
 80091b2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80091b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d1e4      	bne.n	8009184 <HAL_UART_IRQHandler+0x374>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091c0:	4618      	mov	r0, r3
 80091c2:	f7f8 faa7 	bl	8001714 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2202      	movs	r2, #2
 80091ca:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091d8:	b29b      	uxth	r3, r3
 80091da:	1ad3      	subs	r3, r2, r3
 80091dc:	b29b      	uxth	r3, r3
 80091de:	4619      	mov	r1, r3
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 f8e9 	bl	80093b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80091e6:	e0ca      	b.n	800937e <HAL_UART_IRQHandler+0x56e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091f4:	b29b      	uxth	r3, r3
 80091f6:	1ad3      	subs	r3, r2, r3
 80091f8:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
      if ((huart->RxXferCount > 0U)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009202:	b29b      	uxth	r3, r3
 8009204:	2b00      	cmp	r3, #0
 8009206:	f000 80bc 	beq.w	8009382 <HAL_UART_IRQHandler+0x572>
          && (nb_rx_data > 0U))
 800920a:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800920e:	2b00      	cmp	r3, #0
 8009210:	f000 80b7 	beq.w	8009382 <HAL_UART_IRQHandler+0x572>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800921a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800921c:	e853 3f00 	ldrex	r3, [r3]
 8009220:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009224:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009228:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	461a      	mov	r2, r3
 8009232:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009236:	647b      	str	r3, [r7, #68]	; 0x44
 8009238:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800923a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800923c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800923e:	e841 2300 	strex	r3, r2, [r1]
 8009242:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009246:	2b00      	cmp	r3, #0
 8009248:	d1e4      	bne.n	8009214 <HAL_UART_IRQHandler+0x404>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	3308      	adds	r3, #8
 8009250:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009254:	e853 3f00 	ldrex	r3, [r3]
 8009258:	623b      	str	r3, [r7, #32]
   return(result);
 800925a:	6a3b      	ldr	r3, [r7, #32]
 800925c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009260:	f023 0301 	bic.w	r3, r3, #1
 8009264:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	3308      	adds	r3, #8
 800926e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009272:	633a      	str	r2, [r7, #48]	; 0x30
 8009274:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009276:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800927a:	e841 2300 	strex	r3, r2, [r1]
 800927e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009282:	2b00      	cmp	r3, #0
 8009284:	d1e1      	bne.n	800924a <HAL_UART_IRQHandler+0x43a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2220      	movs	r2, #32
 800928a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2200      	movs	r2, #0
 8009298:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	e853 3f00 	ldrex	r3, [r3]
 80092a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	f023 0310 	bic.w	r3, r3, #16
 80092ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	461a      	mov	r2, r3
 80092b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80092bc:	61fb      	str	r3, [r7, #28]
 80092be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c0:	69b9      	ldr	r1, [r7, #24]
 80092c2:	69fa      	ldr	r2, [r7, #28]
 80092c4:	e841 2300 	strex	r3, r2, [r1]
 80092c8:	617b      	str	r3, [r7, #20]
   return(result);
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d1e4      	bne.n	800929a <HAL_UART_IRQHandler+0x48a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2202      	movs	r2, #2
 80092d4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80092d6:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80092da:	4619      	mov	r1, r3
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 f86b 	bl	80093b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80092e2:	e04e      	b.n	8009382 <HAL_UART_IRQHandler+0x572>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80092e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80092e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d014      	beq.n	800931a <HAL_UART_IRQHandler+0x50a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80092f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80092f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d105      	bne.n	8009308 <HAL_UART_IRQHandler+0x4f8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80092fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009300:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009304:	2b00      	cmp	r3, #0
 8009306:	d008      	beq.n	800931a <HAL_UART_IRQHandler+0x50a>
  {
    if (huart->TxISR != NULL)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800930c:	2b00      	cmp	r3, #0
 800930e:	d03a      	beq.n	8009386 <HAL_UART_IRQHandler+0x576>
    {
      huart->TxISR(huart);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	4798      	blx	r3
    }
    return;
 8009318:	e035      	b.n	8009386 <HAL_UART_IRQHandler+0x576>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800931a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800931e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009322:	2b00      	cmp	r3, #0
 8009324:	d009      	beq.n	800933a <HAL_UART_IRQHandler+0x52a>
 8009326:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800932a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800932e:	2b00      	cmp	r3, #0
 8009330:	d003      	beq.n	800933a <HAL_UART_IRQHandler+0x52a>
  {
    UART_EndTransmit_IT(huart);
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 fc1d 	bl	8009b72 <UART_EndTransmit_IT>
    return;
 8009338:	e026      	b.n	8009388 <HAL_UART_IRQHandler+0x578>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800933a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800933e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009342:	2b00      	cmp	r3, #0
 8009344:	d009      	beq.n	800935a <HAL_UART_IRQHandler+0x54a>
 8009346:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800934a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800934e:	2b00      	cmp	r3, #0
 8009350:	d003      	beq.n	800935a <HAL_UART_IRQHandler+0x54a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 fc42 	bl	8009bdc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009358:	e016      	b.n	8009388 <HAL_UART_IRQHandler+0x578>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800935a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800935e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009362:	2b00      	cmp	r3, #0
 8009364:	d010      	beq.n	8009388 <HAL_UART_IRQHandler+0x578>
 8009366:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800936a:	2b00      	cmp	r3, #0
 800936c:	da0c      	bge.n	8009388 <HAL_UART_IRQHandler+0x578>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 fc2a 	bl	8009bc8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009374:	e008      	b.n	8009388 <HAL_UART_IRQHandler+0x578>
      return;
 8009376:	bf00      	nop
 8009378:	e006      	b.n	8009388 <HAL_UART_IRQHandler+0x578>
    return;
 800937a:	bf00      	nop
 800937c:	e004      	b.n	8009388 <HAL_UART_IRQHandler+0x578>
      return;
 800937e:	bf00      	nop
 8009380:	e002      	b.n	8009388 <HAL_UART_IRQHandler+0x578>
      return;
 8009382:	bf00      	nop
 8009384:	e000      	b.n	8009388 <HAL_UART_IRQHandler+0x578>
    return;
 8009386:	bf00      	nop
  }
}
 8009388:	37b8      	adds	r7, #184	; 0xb8
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}
 800938e:	bf00      	nop

08009390 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009390:	b480      	push	{r7}
 8009392:	b083      	sub	sp, #12
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009398:	bf00      	nop
 800939a:	370c      	adds	r7, #12
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr

080093a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80093ac:	bf00      	nop
 80093ae:	370c      	adds	r7, #12
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr

080093b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	460b      	mov	r3, r1
 80093c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80093c4:	bf00      	nop
 80093c6:	370c      	adds	r7, #12
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr

080093d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80093d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80093d4:	b094      	sub	sp, #80	; 0x50
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80093da:	2300      	movs	r3, #0
 80093dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80093e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	4b7e      	ldr	r3, [pc, #504]	; (80095e0 <UART_SetConfig+0x210>)
 80093e6:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80093e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ea:	689a      	ldr	r2, [r3, #8]
 80093ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ee:	691b      	ldr	r3, [r3, #16]
 80093f0:	431a      	orrs	r2, r3
 80093f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f4:	695b      	ldr	r3, [r3, #20]
 80093f6:	431a      	orrs	r2, r3
 80093f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093fa:	69db      	ldr	r3, [r3, #28]
 80093fc:	4313      	orrs	r3, r2
 80093fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4977      	ldr	r1, [pc, #476]	; (80095e4 <UART_SetConfig+0x214>)
 8009408:	4019      	ands	r1, r3
 800940a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009410:	430b      	orrs	r3, r1
 8009412:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800941e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009420:	68d9      	ldr	r1, [r3, #12]
 8009422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	ea40 0301 	orr.w	r3, r0, r1
 800942a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800942c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800942e:	699b      	ldr	r3, [r3, #24]
 8009430:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	4b6a      	ldr	r3, [pc, #424]	; (80095e0 <UART_SetConfig+0x210>)
 8009438:	429a      	cmp	r2, r3
 800943a:	d009      	beq.n	8009450 <UART_SetConfig+0x80>
 800943c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800943e:	681a      	ldr	r2, [r3, #0]
 8009440:	4b69      	ldr	r3, [pc, #420]	; (80095e8 <UART_SetConfig+0x218>)
 8009442:	429a      	cmp	r2, r3
 8009444:	d004      	beq.n	8009450 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009448:	6a1a      	ldr	r2, [r3, #32]
 800944a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800944c:	4313      	orrs	r3, r2
 800944e:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	689b      	ldr	r3, [r3, #8]
 8009456:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800945a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800945e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009460:	681a      	ldr	r2, [r3, #0]
 8009462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009464:	430b      	orrs	r3, r1
 8009466:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800946e:	f023 000f 	bic.w	r0, r3, #15
 8009472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009474:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	ea40 0301 	orr.w	r3, r0, r1
 800947e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	4b59      	ldr	r3, [pc, #356]	; (80095ec <UART_SetConfig+0x21c>)
 8009486:	429a      	cmp	r2, r3
 8009488:	d102      	bne.n	8009490 <UART_SetConfig+0xc0>
 800948a:	2301      	movs	r3, #1
 800948c:	64bb      	str	r3, [r7, #72]	; 0x48
 800948e:	e029      	b.n	80094e4 <UART_SetConfig+0x114>
 8009490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	4b56      	ldr	r3, [pc, #344]	; (80095f0 <UART_SetConfig+0x220>)
 8009496:	429a      	cmp	r2, r3
 8009498:	d102      	bne.n	80094a0 <UART_SetConfig+0xd0>
 800949a:	2302      	movs	r3, #2
 800949c:	64bb      	str	r3, [r7, #72]	; 0x48
 800949e:	e021      	b.n	80094e4 <UART_SetConfig+0x114>
 80094a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	4b53      	ldr	r3, [pc, #332]	; (80095f4 <UART_SetConfig+0x224>)
 80094a6:	429a      	cmp	r2, r3
 80094a8:	d102      	bne.n	80094b0 <UART_SetConfig+0xe0>
 80094aa:	2304      	movs	r3, #4
 80094ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80094ae:	e019      	b.n	80094e4 <UART_SetConfig+0x114>
 80094b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	4b50      	ldr	r3, [pc, #320]	; (80095f8 <UART_SetConfig+0x228>)
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d102      	bne.n	80094c0 <UART_SetConfig+0xf0>
 80094ba:	2308      	movs	r3, #8
 80094bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80094be:	e011      	b.n	80094e4 <UART_SetConfig+0x114>
 80094c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094c2:	681a      	ldr	r2, [r3, #0]
 80094c4:	4b4d      	ldr	r3, [pc, #308]	; (80095fc <UART_SetConfig+0x22c>)
 80094c6:	429a      	cmp	r2, r3
 80094c8:	d102      	bne.n	80094d0 <UART_SetConfig+0x100>
 80094ca:	2310      	movs	r3, #16
 80094cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80094ce:	e009      	b.n	80094e4 <UART_SetConfig+0x114>
 80094d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094d2:	681a      	ldr	r2, [r3, #0]
 80094d4:	4b42      	ldr	r3, [pc, #264]	; (80095e0 <UART_SetConfig+0x210>)
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d102      	bne.n	80094e0 <UART_SetConfig+0x110>
 80094da:	2320      	movs	r3, #32
 80094dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80094de:	e001      	b.n	80094e4 <UART_SetConfig+0x114>
 80094e0:	2300      	movs	r3, #0
 80094e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80094e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e6:	681a      	ldr	r2, [r3, #0]
 80094e8:	4b3d      	ldr	r3, [pc, #244]	; (80095e0 <UART_SetConfig+0x210>)
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d005      	beq.n	80094fa <UART_SetConfig+0x12a>
 80094ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	4b3d      	ldr	r3, [pc, #244]	; (80095e8 <UART_SetConfig+0x218>)
 80094f4:	429a      	cmp	r2, r3
 80094f6:	f040 8085 	bne.w	8009604 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80094fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094fc:	2200      	movs	r2, #0
 80094fe:	623b      	str	r3, [r7, #32]
 8009500:	627a      	str	r2, [r7, #36]	; 0x24
 8009502:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009506:	f7fc fc2b 	bl	8005d60 <HAL_RCCEx_GetPeriphCLKFreq>
 800950a:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800950c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800950e:	2b00      	cmp	r3, #0
 8009510:	f000 80e8 	beq.w	80096e4 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009518:	4a39      	ldr	r2, [pc, #228]	; (8009600 <UART_SetConfig+0x230>)
 800951a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800951e:	461a      	mov	r2, r3
 8009520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009522:	fbb3 f3f2 	udiv	r3, r3, r2
 8009526:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800952a:	685a      	ldr	r2, [r3, #4]
 800952c:	4613      	mov	r3, r2
 800952e:	005b      	lsls	r3, r3, #1
 8009530:	4413      	add	r3, r2
 8009532:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009534:	429a      	cmp	r2, r3
 8009536:	d305      	bcc.n	8009544 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800953e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009540:	429a      	cmp	r2, r3
 8009542:	d903      	bls.n	800954c <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8009544:	2301      	movs	r3, #1
 8009546:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800954a:	e048      	b.n	80095de <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800954c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800954e:	2200      	movs	r2, #0
 8009550:	61bb      	str	r3, [r7, #24]
 8009552:	61fa      	str	r2, [r7, #28]
 8009554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009558:	4a29      	ldr	r2, [pc, #164]	; (8009600 <UART_SetConfig+0x230>)
 800955a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800955e:	b29b      	uxth	r3, r3
 8009560:	2200      	movs	r2, #0
 8009562:	613b      	str	r3, [r7, #16]
 8009564:	617a      	str	r2, [r7, #20]
 8009566:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800956a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800956e:	f7f6 fe87 	bl	8000280 <__aeabi_uldivmod>
 8009572:	4602      	mov	r2, r0
 8009574:	460b      	mov	r3, r1
 8009576:	4610      	mov	r0, r2
 8009578:	4619      	mov	r1, r3
 800957a:	f04f 0200 	mov.w	r2, #0
 800957e:	f04f 0300 	mov.w	r3, #0
 8009582:	020b      	lsls	r3, r1, #8
 8009584:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009588:	0202      	lsls	r2, r0, #8
 800958a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800958c:	6849      	ldr	r1, [r1, #4]
 800958e:	0849      	lsrs	r1, r1, #1
 8009590:	2000      	movs	r0, #0
 8009592:	460c      	mov	r4, r1
 8009594:	4605      	mov	r5, r0
 8009596:	eb12 0804 	adds.w	r8, r2, r4
 800959a:	eb43 0905 	adc.w	r9, r3, r5
 800959e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	2200      	movs	r2, #0
 80095a4:	60bb      	str	r3, [r7, #8]
 80095a6:	60fa      	str	r2, [r7, #12]
 80095a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80095ac:	4640      	mov	r0, r8
 80095ae:	4649      	mov	r1, r9
 80095b0:	f7f6 fe66 	bl	8000280 <__aeabi_uldivmod>
 80095b4:	4602      	mov	r2, r0
 80095b6:	460b      	mov	r3, r1
 80095b8:	4613      	mov	r3, r2
 80095ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80095bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80095c2:	d308      	bcc.n	80095d6 <UART_SetConfig+0x206>
 80095c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80095ca:	d204      	bcs.n	80095d6 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 80095cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80095d2:	60da      	str	r2, [r3, #12]
 80095d4:	e003      	b.n	80095de <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 80095d6:	2301      	movs	r3, #1
 80095d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 80095dc:	e082      	b.n	80096e4 <UART_SetConfig+0x314>
 80095de:	e081      	b.n	80096e4 <UART_SetConfig+0x314>
 80095e0:	46002400 	.word	0x46002400
 80095e4:	cfff69f3 	.word	0xcfff69f3
 80095e8:	56002400 	.word	0x56002400
 80095ec:	40013800 	.word	0x40013800
 80095f0:	40004400 	.word	0x40004400
 80095f4:	40004800 	.word	0x40004800
 80095f8:	40004c00 	.word	0x40004c00
 80095fc:	40005000 	.word	0x40005000
 8009600:	0800d40c 	.word	0x0800d40c
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009606:	69db      	ldr	r3, [r3, #28]
 8009608:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800960c:	d13c      	bne.n	8009688 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800960e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009610:	2200      	movs	r2, #0
 8009612:	603b      	str	r3, [r7, #0]
 8009614:	607a      	str	r2, [r7, #4]
 8009616:	e9d7 0100 	ldrd	r0, r1, [r7]
 800961a:	f7fc fba1 	bl	8005d60 <HAL_RCCEx_GetPeriphCLKFreq>
 800961e:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009622:	2b00      	cmp	r3, #0
 8009624:	d05e      	beq.n	80096e4 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800962a:	4a39      	ldr	r2, [pc, #228]	; (8009710 <UART_SetConfig+0x340>)
 800962c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009630:	461a      	mov	r2, r3
 8009632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009634:	fbb3 f3f2 	udiv	r3, r3, r2
 8009638:	005a      	lsls	r2, r3, #1
 800963a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	085b      	lsrs	r3, r3, #1
 8009640:	441a      	add	r2, r3
 8009642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	fbb2 f3f3 	udiv	r3, r2, r3
 800964a:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800964c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800964e:	2b0f      	cmp	r3, #15
 8009650:	d916      	bls.n	8009680 <UART_SetConfig+0x2b0>
 8009652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009658:	d212      	bcs.n	8009680 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800965a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800965c:	b29b      	uxth	r3, r3
 800965e:	f023 030f 	bic.w	r3, r3, #15
 8009662:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009666:	085b      	lsrs	r3, r3, #1
 8009668:	b29b      	uxth	r3, r3
 800966a:	f003 0307 	and.w	r3, r3, #7
 800966e:	b29a      	uxth	r2, r3
 8009670:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009672:	4313      	orrs	r3, r2
 8009674:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8009676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800967c:	60da      	str	r2, [r3, #12]
 800967e:	e031      	b.n	80096e4 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8009680:	2301      	movs	r3, #1
 8009682:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009686:	e02d      	b.n	80096e4 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009688:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800968a:	2200      	movs	r2, #0
 800968c:	469a      	mov	sl, r3
 800968e:	4693      	mov	fp, r2
 8009690:	4650      	mov	r0, sl
 8009692:	4659      	mov	r1, fp
 8009694:	f7fc fb64 	bl	8005d60 <HAL_RCCEx_GetPeriphCLKFreq>
 8009698:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800969a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800969c:	2b00      	cmp	r3, #0
 800969e:	d021      	beq.n	80096e4 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a4:	4a1a      	ldr	r2, [pc, #104]	; (8009710 <UART_SetConfig+0x340>)
 80096a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096aa:	461a      	mov	r2, r3
 80096ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80096b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	085b      	lsrs	r3, r3, #1
 80096b8:	441a      	add	r2, r3
 80096ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	fbb2 f3f3 	udiv	r3, r2, r3
 80096c2:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096c6:	2b0f      	cmp	r3, #15
 80096c8:	d909      	bls.n	80096de <UART_SetConfig+0x30e>
 80096ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096d0:	d205      	bcs.n	80096de <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80096d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096d4:	b29a      	uxth	r2, r3
 80096d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	60da      	str	r2, [r3, #12]
 80096dc:	e002      	b.n	80096e4 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 80096de:	2301      	movs	r3, #1
 80096e0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80096e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e6:	2201      	movs	r2, #1
 80096e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80096ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ee:	2201      	movs	r2, #1
 80096f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80096f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f6:	2200      	movs	r2, #0
 80096f8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80096fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096fc:	2200      	movs	r2, #0
 80096fe:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009700:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009704:	4618      	mov	r0, r3
 8009706:	3750      	adds	r7, #80	; 0x50
 8009708:	46bd      	mov	sp, r7
 800970a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800970e:	bf00      	nop
 8009710:	0800d40c 	.word	0x0800d40c

08009714 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009714:	b480      	push	{r7}
 8009716:	b083      	sub	sp, #12
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009720:	f003 0308 	and.w	r3, r3, #8
 8009724:	2b00      	cmp	r3, #0
 8009726:	d00a      	beq.n	800973e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	430a      	orrs	r2, r1
 800973c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009742:	f003 0301 	and.w	r3, r3, #1
 8009746:	2b00      	cmp	r3, #0
 8009748:	d00a      	beq.n	8009760 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	430a      	orrs	r2, r1
 800975e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009764:	f003 0302 	and.w	r3, r3, #2
 8009768:	2b00      	cmp	r3, #0
 800976a:	d00a      	beq.n	8009782 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	430a      	orrs	r2, r1
 8009780:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009786:	f003 0304 	and.w	r3, r3, #4
 800978a:	2b00      	cmp	r3, #0
 800978c:	d00a      	beq.n	80097a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	430a      	orrs	r2, r1
 80097a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097a8:	f003 0310 	and.w	r3, r3, #16
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d00a      	beq.n	80097c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	689b      	ldr	r3, [r3, #8]
 80097b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	430a      	orrs	r2, r1
 80097c4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ca:	f003 0320 	and.w	r3, r3, #32
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d00a      	beq.n	80097e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	430a      	orrs	r2, r1
 80097e6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d01a      	beq.n	800982a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	430a      	orrs	r2, r1
 8009808:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800980e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009812:	d10a      	bne.n	800982a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	430a      	orrs	r2, r1
 8009828:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800982e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00a      	beq.n	800984c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	430a      	orrs	r2, r1
 800984a:	605a      	str	r2, [r3, #4]
  }
}
 800984c:	bf00      	nop
 800984e:	370c      	adds	r7, #12
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr

08009858 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b098      	sub	sp, #96	; 0x60
 800985c:	af02      	add	r7, sp, #8
 800985e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009868:	f7f7 fe44 	bl	80014f4 <HAL_GetTick>
 800986c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f003 0308 	and.w	r3, r3, #8
 8009878:	2b08      	cmp	r3, #8
 800987a:	d12f      	bne.n	80098dc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800987c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009880:	9300      	str	r3, [sp, #0]
 8009882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009884:	2200      	movs	r2, #0
 8009886:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 f88e 	bl	80099ac <UART_WaitOnFlagUntilTimeout>
 8009890:	4603      	mov	r3, r0
 8009892:	2b00      	cmp	r3, #0
 8009894:	d022      	beq.n	80098dc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800989c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800989e:	e853 3f00 	ldrex	r3, [r3]
 80098a2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80098a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80098aa:	653b      	str	r3, [r7, #80]	; 0x50
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	461a      	mov	r2, r3
 80098b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098b4:	647b      	str	r3, [r7, #68]	; 0x44
 80098b6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80098ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80098bc:	e841 2300 	strex	r3, r2, [r1]
 80098c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80098c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d1e6      	bne.n	8009896 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2220      	movs	r2, #32
 80098cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2200      	movs	r2, #0
 80098d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80098d8:	2303      	movs	r3, #3
 80098da:	e063      	b.n	80099a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f003 0304 	and.w	r3, r3, #4
 80098e6:	2b04      	cmp	r3, #4
 80098e8:	d149      	bne.n	800997e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80098ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80098ee:	9300      	str	r3, [sp, #0]
 80098f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098f2:	2200      	movs	r2, #0
 80098f4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f000 f857 	bl	80099ac <UART_WaitOnFlagUntilTimeout>
 80098fe:	4603      	mov	r3, r0
 8009900:	2b00      	cmp	r3, #0
 8009902:	d03c      	beq.n	800997e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800990a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990c:	e853 3f00 	ldrex	r3, [r3]
 8009910:	623b      	str	r3, [r7, #32]
   return(result);
 8009912:	6a3b      	ldr	r3, [r7, #32]
 8009914:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009918:	64fb      	str	r3, [r7, #76]	; 0x4c
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	461a      	mov	r2, r3
 8009920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009922:	633b      	str	r3, [r7, #48]	; 0x30
 8009924:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009926:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800992a:	e841 2300 	strex	r3, r2, [r1]
 800992e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009932:	2b00      	cmp	r3, #0
 8009934:	d1e6      	bne.n	8009904 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	3308      	adds	r3, #8
 800993c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	e853 3f00 	ldrex	r3, [r3]
 8009944:	60fb      	str	r3, [r7, #12]
   return(result);
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	f023 0301 	bic.w	r3, r3, #1
 800994c:	64bb      	str	r3, [r7, #72]	; 0x48
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	3308      	adds	r3, #8
 8009954:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009956:	61fa      	str	r2, [r7, #28]
 8009958:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800995a:	69b9      	ldr	r1, [r7, #24]
 800995c:	69fa      	ldr	r2, [r7, #28]
 800995e:	e841 2300 	strex	r3, r2, [r1]
 8009962:	617b      	str	r3, [r7, #20]
   return(result);
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d1e5      	bne.n	8009936 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2220      	movs	r2, #32
 800996e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2200      	movs	r2, #0
 8009976:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800997a:	2303      	movs	r3, #3
 800997c:	e012      	b.n	80099a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2220      	movs	r2, #32
 8009982:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2220      	movs	r2, #32
 800998a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2200      	movs	r2, #0
 8009992:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2200      	movs	r2, #0
 8009998:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2200      	movs	r2, #0
 800999e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80099a2:	2300      	movs	r3, #0
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3758      	adds	r7, #88	; 0x58
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b084      	sub	sp, #16
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	60b9      	str	r1, [r7, #8]
 80099b6:	603b      	str	r3, [r7, #0]
 80099b8:	4613      	mov	r3, r2
 80099ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099bc:	e049      	b.n	8009a52 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099be:	69bb      	ldr	r3, [r7, #24]
 80099c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099c4:	d045      	beq.n	8009a52 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099c6:	f7f7 fd95 	bl	80014f4 <HAL_GetTick>
 80099ca:	4602      	mov	r2, r0
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	1ad3      	subs	r3, r2, r3
 80099d0:	69ba      	ldr	r2, [r7, #24]
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d302      	bcc.n	80099dc <UART_WaitOnFlagUntilTimeout+0x30>
 80099d6:	69bb      	ldr	r3, [r7, #24]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d101      	bne.n	80099e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80099dc:	2303      	movs	r3, #3
 80099de:	e048      	b.n	8009a72 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f003 0304 	and.w	r3, r3, #4
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d031      	beq.n	8009a52 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	69db      	ldr	r3, [r3, #28]
 80099f4:	f003 0308 	and.w	r3, r3, #8
 80099f8:	2b08      	cmp	r3, #8
 80099fa:	d110      	bne.n	8009a1e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	2208      	movs	r2, #8
 8009a02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009a04:	68f8      	ldr	r0, [r7, #12]
 8009a06:	f000 f838 	bl	8009a7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	2208      	movs	r2, #8
 8009a0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2200      	movs	r2, #0
 8009a16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	e029      	b.n	8009a72 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	69db      	ldr	r3, [r3, #28]
 8009a24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a2c:	d111      	bne.n	8009a52 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009a36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009a38:	68f8      	ldr	r0, [r7, #12]
 8009a3a:	f000 f81e 	bl	8009a7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2220      	movs	r2, #32
 8009a42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009a4e:	2303      	movs	r3, #3
 8009a50:	e00f      	b.n	8009a72 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	69da      	ldr	r2, [r3, #28]
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	4013      	ands	r3, r2
 8009a5c:	68ba      	ldr	r2, [r7, #8]
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	bf0c      	ite	eq
 8009a62:	2301      	moveq	r3, #1
 8009a64:	2300      	movne	r3, #0
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	461a      	mov	r2, r3
 8009a6a:	79fb      	ldrb	r3, [r7, #7]
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d0a6      	beq.n	80099be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a70:	2300      	movs	r3, #0
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3710      	adds	r7, #16
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}

08009a7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009a7a:	b480      	push	{r7}
 8009a7c:	b095      	sub	sp, #84	; 0x54
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a8a:	e853 3f00 	ldrex	r3, [r3]
 8009a8e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	461a      	mov	r2, r3
 8009a9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009aa0:	643b      	str	r3, [r7, #64]	; 0x40
 8009aa2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009aa6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009aa8:	e841 2300 	strex	r3, r2, [r1]
 8009aac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d1e6      	bne.n	8009a82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	3308      	adds	r3, #8
 8009aba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009abc:	6a3b      	ldr	r3, [r7, #32]
 8009abe:	e853 3f00 	ldrex	r3, [r3]
 8009ac2:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ac4:	69fb      	ldr	r3, [r7, #28]
 8009ac6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009aca:	f023 0301 	bic.w	r3, r3, #1
 8009ace:	64bb      	str	r3, [r7, #72]	; 0x48
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	3308      	adds	r3, #8
 8009ad6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ad8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009ada:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009adc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ade:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ae0:	e841 2300 	strex	r3, r2, [r1]
 8009ae4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d1e3      	bne.n	8009ab4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009af0:	2b01      	cmp	r3, #1
 8009af2:	d118      	bne.n	8009b26 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	e853 3f00 	ldrex	r3, [r3]
 8009b00:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	f023 0310 	bic.w	r3, r3, #16
 8009b08:	647b      	str	r3, [r7, #68]	; 0x44
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	461a      	mov	r2, r3
 8009b10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b12:	61bb      	str	r3, [r7, #24]
 8009b14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b16:	6979      	ldr	r1, [r7, #20]
 8009b18:	69ba      	ldr	r2, [r7, #24]
 8009b1a:	e841 2300 	strex	r3, r2, [r1]
 8009b1e:	613b      	str	r3, [r7, #16]
   return(result);
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d1e6      	bne.n	8009af4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2220      	movs	r2, #32
 8009b2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2200      	movs	r2, #0
 8009b32:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2200      	movs	r2, #0
 8009b38:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009b3a:	bf00      	nop
 8009b3c:	3754      	adds	r7, #84	; 0x54
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b44:	4770      	bx	lr

08009b46 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b46:	b580      	push	{r7, lr}
 8009b48:	b084      	sub	sp, #16
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2200      	movs	r2, #0
 8009b58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009b64:	68f8      	ldr	r0, [r7, #12]
 8009b66:	f7ff fc1d 	bl	80093a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b6a:	bf00      	nop
 8009b6c:	3710      	adds	r7, #16
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}

08009b72 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009b72:	b580      	push	{r7, lr}
 8009b74:	b088      	sub	sp, #32
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	e853 3f00 	ldrex	r3, [r3]
 8009b86:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b8e:	61fb      	str	r3, [r7, #28]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	461a      	mov	r2, r3
 8009b96:	69fb      	ldr	r3, [r7, #28]
 8009b98:	61bb      	str	r3, [r7, #24]
 8009b9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b9c:	6979      	ldr	r1, [r7, #20]
 8009b9e:	69ba      	ldr	r2, [r7, #24]
 8009ba0:	e841 2300 	strex	r3, r2, [r1]
 8009ba4:	613b      	str	r3, [r7, #16]
   return(result);
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d1e6      	bne.n	8009b7a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2220      	movs	r2, #32
 8009bb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f7ff fbe8 	bl	8009390 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009bc0:	bf00      	nop
 8009bc2:	3720      	adds	r7, #32
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b083      	sub	sp, #12
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009bd0:	bf00      	nop
 8009bd2:	370c      	adds	r7, #12
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr

08009bdc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b083      	sub	sp, #12
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009be4:	bf00      	nop
 8009be6:	370c      	adds	r7, #12
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr

08009bf0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b085      	sub	sp, #20
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009bfe:	2b01      	cmp	r3, #1
 8009c00:	d101      	bne.n	8009c06 <HAL_UARTEx_DisableFifoMode+0x16>
 8009c02:	2302      	movs	r3, #2
 8009c04:	e027      	b.n	8009c56 <HAL_UARTEx_DisableFifoMode+0x66>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2201      	movs	r2, #1
 8009c0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2224      	movs	r2, #36	; 0x24
 8009c12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f022 0201 	bic.w	r2, r2, #1
 8009c2c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009c34:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	68fa      	ldr	r2, [r7, #12]
 8009c42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2220      	movs	r2, #32
 8009c48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009c54:	2300      	movs	r3, #0
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3714      	adds	r7, #20
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr

08009c62 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c62:	b580      	push	{r7, lr}
 8009c64:	b084      	sub	sp, #16
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	6078      	str	r0, [r7, #4]
 8009c6a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009c72:	2b01      	cmp	r3, #1
 8009c74:	d101      	bne.n	8009c7a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009c76:	2302      	movs	r3, #2
 8009c78:	e02d      	b.n	8009cd6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2224      	movs	r2, #36	; 0x24
 8009c86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	681a      	ldr	r2, [r3, #0]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f022 0201 	bic.w	r2, r2, #1
 8009ca0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	689b      	ldr	r3, [r3, #8]
 8009ca8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	683a      	ldr	r2, [r7, #0]
 8009cb2:	430a      	orrs	r2, r1
 8009cb4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f000 f850 	bl	8009d5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	68fa      	ldr	r2, [r7, #12]
 8009cc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2220      	movs	r2, #32
 8009cc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009cd4:	2300      	movs	r3, #0
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3710      	adds	r7, #16
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}

08009cde <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009cde:	b580      	push	{r7, lr}
 8009ce0:	b084      	sub	sp, #16
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
 8009ce6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009cee:	2b01      	cmp	r3, #1
 8009cf0:	d101      	bne.n	8009cf6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009cf2:	2302      	movs	r3, #2
 8009cf4:	e02d      	b.n	8009d52 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2224      	movs	r2, #36	; 0x24
 8009d02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	681a      	ldr	r2, [r3, #0]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f022 0201 	bic.w	r2, r2, #1
 8009d1c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	689b      	ldr	r3, [r3, #8]
 8009d24:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	683a      	ldr	r2, [r7, #0]
 8009d2e:	430a      	orrs	r2, r1
 8009d30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 f812 	bl	8009d5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	68fa      	ldr	r2, [r7, #12]
 8009d3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2220      	movs	r2, #32
 8009d44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009d50:	2300      	movs	r3, #0
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3710      	adds	r7, #16
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
	...

08009d5c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b085      	sub	sp, #20
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d108      	bne.n	8009d7e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2201      	movs	r2, #1
 8009d70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2201      	movs	r2, #1
 8009d78:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009d7c:	e031      	b.n	8009de2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009d7e:	2308      	movs	r3, #8
 8009d80:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009d82:	2308      	movs	r3, #8
 8009d84:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	689b      	ldr	r3, [r3, #8]
 8009d8c:	0e5b      	lsrs	r3, r3, #25
 8009d8e:	b2db      	uxtb	r3, r3
 8009d90:	f003 0307 	and.w	r3, r3, #7
 8009d94:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	0f5b      	lsrs	r3, r3, #29
 8009d9e:	b2db      	uxtb	r3, r3
 8009da0:	f003 0307 	and.w	r3, r3, #7
 8009da4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009da6:	7bbb      	ldrb	r3, [r7, #14]
 8009da8:	7b3a      	ldrb	r2, [r7, #12]
 8009daa:	4911      	ldr	r1, [pc, #68]	; (8009df0 <UARTEx_SetNbDataToProcess+0x94>)
 8009dac:	5c8a      	ldrb	r2, [r1, r2]
 8009dae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009db2:	7b3a      	ldrb	r2, [r7, #12]
 8009db4:	490f      	ldr	r1, [pc, #60]	; (8009df4 <UARTEx_SetNbDataToProcess+0x98>)
 8009db6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009db8:	fb93 f3f2 	sdiv	r3, r3, r2
 8009dbc:	b29a      	uxth	r2, r3
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009dc4:	7bfb      	ldrb	r3, [r7, #15]
 8009dc6:	7b7a      	ldrb	r2, [r7, #13]
 8009dc8:	4909      	ldr	r1, [pc, #36]	; (8009df0 <UARTEx_SetNbDataToProcess+0x94>)
 8009dca:	5c8a      	ldrb	r2, [r1, r2]
 8009dcc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009dd0:	7b7a      	ldrb	r2, [r7, #13]
 8009dd2:	4908      	ldr	r1, [pc, #32]	; (8009df4 <UARTEx_SetNbDataToProcess+0x98>)
 8009dd4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009dd6:	fb93 f3f2 	sdiv	r3, r3, r2
 8009dda:	b29a      	uxth	r2, r3
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009de2:	bf00      	nop
 8009de4:	3714      	adds	r7, #20
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr
 8009dee:	bf00      	nop
 8009df0:	0800d424 	.word	0x0800d424
 8009df4:	0800d42c 	.word	0x0800d42c

08009df8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b08b      	sub	sp, #44	; 0x2c
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	60f8      	str	r0, [r7, #12]
 8009e00:	60b9      	str	r1, [r7, #8]
 8009e02:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681a      	ldr	r2, [r3, #0]
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	fa93 f3a3 	rbit	r3, r3
 8009e12:	613b      	str	r3, [r7, #16]
  return result;
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009e18:	69bb      	ldr	r3, [r7, #24]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d101      	bne.n	8009e22 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8009e1e:	2320      	movs	r3, #32
 8009e20:	e003      	b.n	8009e2a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8009e22:	69bb      	ldr	r3, [r7, #24]
 8009e24:	fab3 f383 	clz	r3, r3
 8009e28:	b2db      	uxtb	r3, r3
 8009e2a:	005b      	lsls	r3, r3, #1
 8009e2c:	2103      	movs	r1, #3
 8009e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8009e32:	43db      	mvns	r3, r3
 8009e34:	401a      	ands	r2, r3
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e3a:	6a3b      	ldr	r3, [r7, #32]
 8009e3c:	fa93 f3a3 	rbit	r3, r3
 8009e40:	61fb      	str	r3, [r7, #28]
  return result;
 8009e42:	69fb      	ldr	r3, [r7, #28]
 8009e44:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d101      	bne.n	8009e50 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8009e4c:	2320      	movs	r3, #32
 8009e4e:	e003      	b.n	8009e58 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8009e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e52:	fab3 f383 	clz	r3, r3
 8009e56:	b2db      	uxtb	r3, r3
 8009e58:	005b      	lsls	r3, r3, #1
 8009e5a:	6879      	ldr	r1, [r7, #4]
 8009e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8009e60:	431a      	orrs	r2, r3
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	601a      	str	r2, [r3, #0]
}
 8009e66:	bf00      	nop
 8009e68:	372c      	adds	r7, #44	; 0x2c
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr

08009e72 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8009e72:	b480      	push	{r7}
 8009e74:	b085      	sub	sp, #20
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	60f8      	str	r0, [r7, #12]
 8009e7a:	60b9      	str	r1, [r7, #8]
 8009e7c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	685a      	ldr	r2, [r3, #4]
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	43db      	mvns	r3, r3
 8009e86:	401a      	ands	r2, r3
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	6879      	ldr	r1, [r7, #4]
 8009e8c:	fb01 f303 	mul.w	r3, r1, r3
 8009e90:	431a      	orrs	r2, r3
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	605a      	str	r2, [r3, #4]
}
 8009e96:	bf00      	nop
 8009e98:	3714      	adds	r7, #20
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr

08009ea2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8009ea2:	b480      	push	{r7}
 8009ea4:	b08b      	sub	sp, #44	; 0x2c
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	60f8      	str	r0, [r7, #12]
 8009eaa:	60b9      	str	r1, [r7, #8]
 8009eac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	689a      	ldr	r2, [r3, #8]
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	fa93 f3a3 	rbit	r3, r3
 8009ebc:	613b      	str	r3, [r7, #16]
  return result;
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009ec2:	69bb      	ldr	r3, [r7, #24]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d101      	bne.n	8009ecc <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8009ec8:	2320      	movs	r3, #32
 8009eca:	e003      	b.n	8009ed4 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8009ecc:	69bb      	ldr	r3, [r7, #24]
 8009ece:	fab3 f383 	clz	r3, r3
 8009ed2:	b2db      	uxtb	r3, r3
 8009ed4:	005b      	lsls	r3, r3, #1
 8009ed6:	2103      	movs	r1, #3
 8009ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8009edc:	43db      	mvns	r3, r3
 8009ede:	401a      	ands	r2, r3
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ee4:	6a3b      	ldr	r3, [r7, #32]
 8009ee6:	fa93 f3a3 	rbit	r3, r3
 8009eea:	61fb      	str	r3, [r7, #28]
  return result;
 8009eec:	69fb      	ldr	r3, [r7, #28]
 8009eee:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d101      	bne.n	8009efa <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8009ef6:	2320      	movs	r3, #32
 8009ef8:	e003      	b.n	8009f02 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8009efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efc:	fab3 f383 	clz	r3, r3
 8009f00:	b2db      	uxtb	r3, r3
 8009f02:	005b      	lsls	r3, r3, #1
 8009f04:	6879      	ldr	r1, [r7, #4]
 8009f06:	fa01 f303 	lsl.w	r3, r1, r3
 8009f0a:	431a      	orrs	r2, r3
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8009f10:	bf00      	nop
 8009f12:	372c      	adds	r7, #44	; 0x2c
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr

08009f1c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b08b      	sub	sp, #44	; 0x2c
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	60f8      	str	r0, [r7, #12]
 8009f24:	60b9      	str	r1, [r7, #8]
 8009f26:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	68da      	ldr	r2, [r3, #12]
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	fa93 f3a3 	rbit	r3, r3
 8009f36:	613b      	str	r3, [r7, #16]
  return result;
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009f3c:	69bb      	ldr	r3, [r7, #24]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d101      	bne.n	8009f46 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8009f42:	2320      	movs	r3, #32
 8009f44:	e003      	b.n	8009f4e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8009f46:	69bb      	ldr	r3, [r7, #24]
 8009f48:	fab3 f383 	clz	r3, r3
 8009f4c:	b2db      	uxtb	r3, r3
 8009f4e:	005b      	lsls	r3, r3, #1
 8009f50:	2103      	movs	r1, #3
 8009f52:	fa01 f303 	lsl.w	r3, r1, r3
 8009f56:	43db      	mvns	r3, r3
 8009f58:	401a      	ands	r2, r3
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f5e:	6a3b      	ldr	r3, [r7, #32]
 8009f60:	fa93 f3a3 	rbit	r3, r3
 8009f64:	61fb      	str	r3, [r7, #28]
  return result;
 8009f66:	69fb      	ldr	r3, [r7, #28]
 8009f68:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d101      	bne.n	8009f74 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8009f70:	2320      	movs	r3, #32
 8009f72:	e003      	b.n	8009f7c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8009f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f76:	fab3 f383 	clz	r3, r3
 8009f7a:	b2db      	uxtb	r3, r3
 8009f7c:	005b      	lsls	r3, r3, #1
 8009f7e:	6879      	ldr	r1, [r7, #4]
 8009f80:	fa01 f303 	lsl.w	r3, r1, r3
 8009f84:	431a      	orrs	r2, r3
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	60da      	str	r2, [r3, #12]
}
 8009f8a:	bf00      	nop
 8009f8c:	372c      	adds	r7, #44	; 0x2c
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f94:	4770      	bx	lr

08009f96 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009f96:	b480      	push	{r7}
 8009f98:	b08b      	sub	sp, #44	; 0x2c
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	60f8      	str	r0, [r7, #12]
 8009f9e:	60b9      	str	r1, [r7, #8]
 8009fa0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	6a1a      	ldr	r2, [r3, #32]
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	fa93 f3a3 	rbit	r3, r3
 8009fb0:	613b      	str	r3, [r7, #16]
  return result;
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009fb6:	69bb      	ldr	r3, [r7, #24]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d101      	bne.n	8009fc0 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8009fbc:	2320      	movs	r3, #32
 8009fbe:	e003      	b.n	8009fc8 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8009fc0:	69bb      	ldr	r3, [r7, #24]
 8009fc2:	fab3 f383 	clz	r3, r3
 8009fc6:	b2db      	uxtb	r3, r3
 8009fc8:	009b      	lsls	r3, r3, #2
 8009fca:	210f      	movs	r1, #15
 8009fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8009fd0:	43db      	mvns	r3, r3
 8009fd2:	401a      	ands	r2, r3
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009fd8:	6a3b      	ldr	r3, [r7, #32]
 8009fda:	fa93 f3a3 	rbit	r3, r3
 8009fde:	61fb      	str	r3, [r7, #28]
  return result;
 8009fe0:	69fb      	ldr	r3, [r7, #28]
 8009fe2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d101      	bne.n	8009fee <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8009fea:	2320      	movs	r3, #32
 8009fec:	e003      	b.n	8009ff6 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8009fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff0:	fab3 f383 	clz	r3, r3
 8009ff4:	b2db      	uxtb	r3, r3
 8009ff6:	009b      	lsls	r3, r3, #2
 8009ff8:	6879      	ldr	r1, [r7, #4]
 8009ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8009ffe:	431a      	orrs	r2, r3
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800a004:	bf00      	nop
 800a006:	372c      	adds	r7, #44	; 0x2c
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr

0800a010 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800a010:	b480      	push	{r7}
 800a012:	b08b      	sub	sp, #44	; 0x2c
 800a014:	af00      	add	r7, sp, #0
 800a016:	60f8      	str	r0, [r7, #12]
 800a018:	60b9      	str	r1, [r7, #8]
 800a01a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	0a1b      	lsrs	r3, r3, #8
 800a024:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	fa93 f3a3 	rbit	r3, r3
 800a02c:	613b      	str	r3, [r7, #16]
  return result;
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a032:	69bb      	ldr	r3, [r7, #24]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d101      	bne.n	800a03c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800a038:	2320      	movs	r3, #32
 800a03a:	e003      	b.n	800a044 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800a03c:	69bb      	ldr	r3, [r7, #24]
 800a03e:	fab3 f383 	clz	r3, r3
 800a042:	b2db      	uxtb	r3, r3
 800a044:	009b      	lsls	r3, r3, #2
 800a046:	210f      	movs	r1, #15
 800a048:	fa01 f303 	lsl.w	r3, r1, r3
 800a04c:	43db      	mvns	r3, r3
 800a04e:	401a      	ands	r2, r3
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	0a1b      	lsrs	r3, r3, #8
 800a054:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a056:	6a3b      	ldr	r3, [r7, #32]
 800a058:	fa93 f3a3 	rbit	r3, r3
 800a05c:	61fb      	str	r3, [r7, #28]
  return result;
 800a05e:	69fb      	ldr	r3, [r7, #28]
 800a060:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a064:	2b00      	cmp	r3, #0
 800a066:	d101      	bne.n	800a06c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800a068:	2320      	movs	r3, #32
 800a06a:	e003      	b.n	800a074 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800a06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a06e:	fab3 f383 	clz	r3, r3
 800a072:	b2db      	uxtb	r3, r3
 800a074:	009b      	lsls	r3, r3, #2
 800a076:	6879      	ldr	r1, [r7, #4]
 800a078:	fa01 f303 	lsl.w	r3, r1, r3
 800a07c:	431a      	orrs	r2, r3
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800a082:	bf00      	nop
 800a084:	372c      	adds	r7, #44	; 0x2c
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr

0800a08e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800a08e:	b580      	push	{r7, lr}
 800a090:	b08a      	sub	sp, #40	; 0x28
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
 800a096:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a09e:	69bb      	ldr	r3, [r7, #24]
 800a0a0:	fa93 f3a3 	rbit	r3, r3
 800a0a4:	617b      	str	r3, [r7, #20]
  return result;
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800a0aa:	69fb      	ldr	r3, [r7, #28]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d101      	bne.n	800a0b4 <LL_GPIO_Init+0x26>
    return 32U;
 800a0b0:	2320      	movs	r3, #32
 800a0b2:	e003      	b.n	800a0bc <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800a0b4:	69fb      	ldr	r3, [r7, #28]
 800a0b6:	fab3 f383 	clz	r3, r3
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800a0be:	e058      	b.n	800a172 <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	681a      	ldr	r2, [r3, #0]
 800a0c4:	2101      	movs	r1, #1
 800a0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c8:	fa01 f303 	lsl.w	r3, r1, r3
 800a0cc:	4013      	ands	r3, r2
 800a0ce:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 800a0d0:	6a3b      	ldr	r3, [r7, #32]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d04a      	beq.n	800a16c <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	685b      	ldr	r3, [r3, #4]
 800a0da:	2b01      	cmp	r3, #1
 800a0dc:	d003      	beq.n	800a0e6 <LL_GPIO_Init+0x58>
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	685b      	ldr	r3, [r3, #4]
 800a0e2:	2b02      	cmp	r3, #2
 800a0e4:	d10e      	bne.n	800a104 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	689b      	ldr	r3, [r3, #8]
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	6a39      	ldr	r1, [r7, #32]
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f7ff fed7 	bl	8009ea2 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	6819      	ldr	r1, [r3, #0]
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	68db      	ldr	r3, [r3, #12]
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f7ff feb7 	bl	8009e72 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	691b      	ldr	r3, [r3, #16]
 800a108:	461a      	mov	r2, r3
 800a10a:	6a39      	ldr	r1, [r7, #32]
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f7ff ff05 	bl	8009f1c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	2b02      	cmp	r3, #2
 800a118:	d121      	bne.n	800a15e <LL_GPIO_Init+0xd0>
 800a11a:	6a3b      	ldr	r3, [r7, #32]
 800a11c:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	fa93 f3a3 	rbit	r3, r3
 800a124:	60bb      	str	r3, [r7, #8]
  return result;
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d101      	bne.n	800a134 <LL_GPIO_Init+0xa6>
    return 32U;
 800a130:	2320      	movs	r3, #32
 800a132:	e003      	b.n	800a13c <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	fab3 f383 	clz	r3, r3
 800a13a:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 800a13c:	2b07      	cmp	r3, #7
 800a13e:	d807      	bhi.n	800a150 <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	695b      	ldr	r3, [r3, #20]
 800a144:	461a      	mov	r2, r3
 800a146:	6a39      	ldr	r1, [r7, #32]
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f7ff ff24 	bl	8009f96 <LL_GPIO_SetAFPin_0_7>
 800a14e:	e006      	b.n	800a15e <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	695b      	ldr	r3, [r3, #20]
 800a154:	461a      	mov	r2, r3
 800a156:	6a39      	ldr	r1, [r7, #32]
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f7ff ff59 	bl	800a010 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	461a      	mov	r2, r3
 800a164:	6a39      	ldr	r1, [r7, #32]
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f7ff fe46 	bl	8009df8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800a16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a16e:	3301      	adds	r3, #1
 800a170:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	681a      	ldr	r2, [r3, #0]
 800a176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a178:	fa22 f303 	lsr.w	r3, r2, r3
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d19f      	bne.n	800a0c0 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 800a180:	2300      	movs	r3, #0
}
 800a182:	4618      	mov	r0, r3
 800a184:	3728      	adds	r7, #40	; 0x28
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}

0800a18a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a18a:	b084      	sub	sp, #16
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b084      	sub	sp, #16
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	f107 001c 	add.w	r0, r7, #28
 800a198:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	68db      	ldr	r3, [r3, #12]
 800a1a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f000 fd85 	bl	800acb8 <USB_CoreReset>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800a1b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d106      	bne.n	800a1c6 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1bc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	639a      	str	r2, [r3, #56]	; 0x38
 800a1c4:	e005      	b.n	800a1d2 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 800a1d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3710      	adds	r7, #16
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a1de:	b004      	add	sp, #16
 800a1e0:	4770      	bx	lr
	...

0800a1e4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b087      	sub	sp, #28
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	60f8      	str	r0, [r7, #12]
 800a1ec:	60b9      	str	r1, [r7, #8]
 800a1ee:	4613      	mov	r3, r2
 800a1f0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a1f2:	79fb      	ldrb	r3, [r7, #7]
 800a1f4:	2b02      	cmp	r3, #2
 800a1f6:	d165      	bne.n	800a2c4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	4a41      	ldr	r2, [pc, #260]	; (800a300 <USB_SetTurnaroundTime+0x11c>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d906      	bls.n	800a20e <USB_SetTurnaroundTime+0x2a>
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	4a40      	ldr	r2, [pc, #256]	; (800a304 <USB_SetTurnaroundTime+0x120>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d202      	bcs.n	800a20e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a208:	230f      	movs	r3, #15
 800a20a:	617b      	str	r3, [r7, #20]
 800a20c:	e062      	b.n	800a2d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	4a3c      	ldr	r2, [pc, #240]	; (800a304 <USB_SetTurnaroundTime+0x120>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d306      	bcc.n	800a224 <USB_SetTurnaroundTime+0x40>
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	4a3b      	ldr	r2, [pc, #236]	; (800a308 <USB_SetTurnaroundTime+0x124>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d202      	bcs.n	800a224 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a21e:	230e      	movs	r3, #14
 800a220:	617b      	str	r3, [r7, #20]
 800a222:	e057      	b.n	800a2d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	4a38      	ldr	r2, [pc, #224]	; (800a308 <USB_SetTurnaroundTime+0x124>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d306      	bcc.n	800a23a <USB_SetTurnaroundTime+0x56>
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	4a37      	ldr	r2, [pc, #220]	; (800a30c <USB_SetTurnaroundTime+0x128>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d202      	bcs.n	800a23a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a234:	230d      	movs	r3, #13
 800a236:	617b      	str	r3, [r7, #20]
 800a238:	e04c      	b.n	800a2d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	4a33      	ldr	r2, [pc, #204]	; (800a30c <USB_SetTurnaroundTime+0x128>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d306      	bcc.n	800a250 <USB_SetTurnaroundTime+0x6c>
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	4a32      	ldr	r2, [pc, #200]	; (800a310 <USB_SetTurnaroundTime+0x12c>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d802      	bhi.n	800a250 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a24a:	230c      	movs	r3, #12
 800a24c:	617b      	str	r3, [r7, #20]
 800a24e:	e041      	b.n	800a2d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	4a2f      	ldr	r2, [pc, #188]	; (800a310 <USB_SetTurnaroundTime+0x12c>)
 800a254:	4293      	cmp	r3, r2
 800a256:	d906      	bls.n	800a266 <USB_SetTurnaroundTime+0x82>
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	4a2e      	ldr	r2, [pc, #184]	; (800a314 <USB_SetTurnaroundTime+0x130>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d802      	bhi.n	800a266 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a260:	230b      	movs	r3, #11
 800a262:	617b      	str	r3, [r7, #20]
 800a264:	e036      	b.n	800a2d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	4a2a      	ldr	r2, [pc, #168]	; (800a314 <USB_SetTurnaroundTime+0x130>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d906      	bls.n	800a27c <USB_SetTurnaroundTime+0x98>
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	4a29      	ldr	r2, [pc, #164]	; (800a318 <USB_SetTurnaroundTime+0x134>)
 800a272:	4293      	cmp	r3, r2
 800a274:	d802      	bhi.n	800a27c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a276:	230a      	movs	r3, #10
 800a278:	617b      	str	r3, [r7, #20]
 800a27a:	e02b      	b.n	800a2d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	4a26      	ldr	r2, [pc, #152]	; (800a318 <USB_SetTurnaroundTime+0x134>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d906      	bls.n	800a292 <USB_SetTurnaroundTime+0xae>
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	4a25      	ldr	r2, [pc, #148]	; (800a31c <USB_SetTurnaroundTime+0x138>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d202      	bcs.n	800a292 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a28c:	2309      	movs	r3, #9
 800a28e:	617b      	str	r3, [r7, #20]
 800a290:	e020      	b.n	800a2d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	4a21      	ldr	r2, [pc, #132]	; (800a31c <USB_SetTurnaroundTime+0x138>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d306      	bcc.n	800a2a8 <USB_SetTurnaroundTime+0xc4>
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	4a20      	ldr	r2, [pc, #128]	; (800a320 <USB_SetTurnaroundTime+0x13c>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d802      	bhi.n	800a2a8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a2a2:	2308      	movs	r3, #8
 800a2a4:	617b      	str	r3, [r7, #20]
 800a2a6:	e015      	b.n	800a2d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	4a1d      	ldr	r2, [pc, #116]	; (800a320 <USB_SetTurnaroundTime+0x13c>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d906      	bls.n	800a2be <USB_SetTurnaroundTime+0xda>
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	4a1c      	ldr	r2, [pc, #112]	; (800a324 <USB_SetTurnaroundTime+0x140>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d202      	bcs.n	800a2be <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a2b8:	2307      	movs	r3, #7
 800a2ba:	617b      	str	r3, [r7, #20]
 800a2bc:	e00a      	b.n	800a2d4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a2be:	2306      	movs	r3, #6
 800a2c0:	617b      	str	r3, [r7, #20]
 800a2c2:	e007      	b.n	800a2d4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a2c4:	79fb      	ldrb	r3, [r7, #7]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d102      	bne.n	800a2d0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a2ca:	2309      	movs	r3, #9
 800a2cc:	617b      	str	r3, [r7, #20]
 800a2ce:	e001      	b.n	800a2d4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a2d0:	2309      	movs	r3, #9
 800a2d2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	68db      	ldr	r3, [r3, #12]
 800a2d8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	68da      	ldr	r2, [r3, #12]
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	029b      	lsls	r3, r3, #10
 800a2e8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a2ec:	431a      	orrs	r2, r3
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a2f2:	2300      	movs	r3, #0
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	371c      	adds	r7, #28
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr
 800a300:	00d8acbf 	.word	0x00d8acbf
 800a304:	00e4e1c0 	.word	0x00e4e1c0
 800a308:	00f42400 	.word	0x00f42400
 800a30c:	01067380 	.word	0x01067380
 800a310:	011a499f 	.word	0x011a499f
 800a314:	01312cff 	.word	0x01312cff
 800a318:	014ca43f 	.word	0x014ca43f
 800a31c:	016e3600 	.word	0x016e3600
 800a320:	01a6ab1f 	.word	0x01a6ab1f
 800a324:	01e84800 	.word	0x01e84800

0800a328 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a328:	b480      	push	{r7}
 800a32a:	b083      	sub	sp, #12
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	689b      	ldr	r3, [r3, #8]
 800a334:	f023 0201 	bic.w	r2, r3, #1
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a33c:	2300      	movs	r3, #0
}
 800a33e:	4618      	mov	r0, r3
 800a340:	370c      	adds	r7, #12
 800a342:	46bd      	mov	sp, r7
 800a344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a348:	4770      	bx	lr

0800a34a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a34a:	b580      	push	{r7, lr}
 800a34c:	b084      	sub	sp, #16
 800a34e:	af00      	add	r7, sp, #0
 800a350:	6078      	str	r0, [r7, #4]
 800a352:	460b      	mov	r3, r1
 800a354:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a356:	2300      	movs	r3, #0
 800a358:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	68db      	ldr	r3, [r3, #12]
 800a35e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a366:	78fb      	ldrb	r3, [r7, #3]
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d115      	bne.n	800a398 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	68db      	ldr	r3, [r3, #12]
 800a370:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a378:	2001      	movs	r0, #1
 800a37a:	f7f7 f8c7 	bl	800150c <HAL_Delay>
      ms++;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	3301      	adds	r3, #1
 800a382:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f000 fc07 	bl	800ab98 <USB_GetMode>
 800a38a:	4603      	mov	r3, r0
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d01e      	beq.n	800a3ce <USB_SetCurrentMode+0x84>
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2b31      	cmp	r3, #49	; 0x31
 800a394:	d9f0      	bls.n	800a378 <USB_SetCurrentMode+0x2e>
 800a396:	e01a      	b.n	800a3ce <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a398:	78fb      	ldrb	r3, [r7, #3]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d115      	bne.n	800a3ca <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	68db      	ldr	r3, [r3, #12]
 800a3a2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a3aa:	2001      	movs	r0, #1
 800a3ac:	f7f7 f8ae 	bl	800150c <HAL_Delay>
      ms++;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	3301      	adds	r3, #1
 800a3b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f000 fbee 	bl	800ab98 <USB_GetMode>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d005      	beq.n	800a3ce <USB_SetCurrentMode+0x84>
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2b31      	cmp	r3, #49	; 0x31
 800a3c6:	d9f0      	bls.n	800a3aa <USB_SetCurrentMode+0x60>
 800a3c8:	e001      	b.n	800a3ce <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	e005      	b.n	800a3da <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2b32      	cmp	r3, #50	; 0x32
 800a3d2:	d101      	bne.n	800a3d8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	e000      	b.n	800a3da <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a3d8:	2300      	movs	r3, #0
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3710      	adds	r7, #16
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
	...

0800a3e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a3e4:	b084      	sub	sp, #16
 800a3e6:	b580      	push	{r7, lr}
 800a3e8:	b086      	sub	sp, #24
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	6078      	str	r0, [r7, #4]
 800a3ee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a3f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a3fe:	2300      	movs	r3, #0
 800a400:	613b      	str	r3, [r7, #16]
 800a402:	e009      	b.n	800a418 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a404:	687a      	ldr	r2, [r7, #4]
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	3340      	adds	r3, #64	; 0x40
 800a40a:	009b      	lsls	r3, r3, #2
 800a40c:	4413      	add	r3, r2
 800a40e:	2200      	movs	r2, #0
 800a410:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	3301      	adds	r3, #1
 800a416:	613b      	str	r3, [r7, #16]
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	2b0e      	cmp	r3, #14
 800a41c:	d9f2      	bls.n	800a404 <USB_DevInit+0x20>
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a41e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a420:	2b00      	cmp	r3, #0
 800a422:	d11c      	bne.n	800a45e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	68fa      	ldr	r2, [r7, #12]
 800a42e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a432:	f043 0302 	orr.w	r3, r3, #2
 800a436:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a43c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	601a      	str	r2, [r3, #0]
 800a45c:	e005      	b.n	800a46a <USB_DevInit+0x86>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a462:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a470:	461a      	mov	r2, r3
 800a472:	2300      	movs	r3, #0
 800a474:	6013      	str	r3, [r2, #0]
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a476:	2103      	movs	r1, #3
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f000 f95b 	bl	800a734 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a47e:	2110      	movs	r1, #16
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f000 f8f3 	bl	800a66c <USB_FlushTxFifo>
 800a486:	4603      	mov	r3, r0
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d001      	beq.n	800a490 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 800a48c:	2301      	movs	r3, #1
 800a48e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f000 f91f 	bl	800a6d4 <USB_FlushRxFifo>
 800a496:	4603      	mov	r3, r0
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d001      	beq.n	800a4a0 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 800a49c:	2301      	movs	r3, #1
 800a49e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4be:	461a      	mov	r2, r3
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	613b      	str	r3, [r7, #16]
 800a4c8:	e043      	b.n	800a552 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	015a      	lsls	r2, r3, #5
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	4413      	add	r3, r2
 800a4d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a4dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a4e0:	d118      	bne.n	800a514 <USB_DevInit+0x130>
    {
      if (i == 0U)
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d10a      	bne.n	800a4fe <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	015a      	lsls	r2, r3, #5
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	4413      	add	r3, r2
 800a4f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4f4:	461a      	mov	r2, r3
 800a4f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a4fa:	6013      	str	r3, [r2, #0]
 800a4fc:	e013      	b.n	800a526 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	015a      	lsls	r2, r3, #5
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	4413      	add	r3, r2
 800a506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a50a:	461a      	mov	r2, r3
 800a50c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a510:	6013      	str	r3, [r2, #0]
 800a512:	e008      	b.n	800a526 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	015a      	lsls	r2, r3, #5
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	4413      	add	r3, r2
 800a51c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a520:	461a      	mov	r2, r3
 800a522:	2300      	movs	r3, #0
 800a524:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	015a      	lsls	r2, r3, #5
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	4413      	add	r3, r2
 800a52e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a532:	461a      	mov	r2, r3
 800a534:	2300      	movs	r3, #0
 800a536:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	015a      	lsls	r2, r3, #5
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	4413      	add	r3, r2
 800a540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a544:	461a      	mov	r2, r3
 800a546:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a54a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	3301      	adds	r3, #1
 800a550:	613b      	str	r3, [r7, #16]
 800a552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a554:	693a      	ldr	r2, [r7, #16]
 800a556:	429a      	cmp	r2, r3
 800a558:	d3b7      	bcc.n	800a4ca <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a55a:	2300      	movs	r3, #0
 800a55c:	613b      	str	r3, [r7, #16]
 800a55e:	e043      	b.n	800a5e8 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	015a      	lsls	r2, r3, #5
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	4413      	add	r3, r2
 800a568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a572:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a576:	d118      	bne.n	800a5aa <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d10a      	bne.n	800a594 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	015a      	lsls	r2, r3, #5
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	4413      	add	r3, r2
 800a586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a58a:	461a      	mov	r2, r3
 800a58c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a590:	6013      	str	r3, [r2, #0]
 800a592:	e013      	b.n	800a5bc <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	015a      	lsls	r2, r3, #5
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	4413      	add	r3, r2
 800a59c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5a0:	461a      	mov	r2, r3
 800a5a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a5a6:	6013      	str	r3, [r2, #0]
 800a5a8:	e008      	b.n	800a5bc <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	015a      	lsls	r2, r3, #5
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	4413      	add	r3, r2
 800a5b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	015a      	lsls	r2, r3, #5
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	4413      	add	r3, r2
 800a5c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5c8:	461a      	mov	r2, r3
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a5ce:	693b      	ldr	r3, [r7, #16]
 800a5d0:	015a      	lsls	r2, r3, #5
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	4413      	add	r3, r2
 800a5d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5da:	461a      	mov	r2, r3
 800a5dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a5e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	3301      	adds	r3, #1
 800a5e6:	613b      	str	r3, [r7, #16]
 800a5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ea:	693a      	ldr	r2, [r7, #16]
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	d3b7      	bcc.n	800a560 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5f6:	691b      	ldr	r3, [r3, #16]
 800a5f8:	68fa      	ldr	r2, [r7, #12]
 800a5fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a5fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a602:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2200      	movs	r2, #0
 800a608:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a610:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a614:	2b00      	cmp	r3, #0
 800a616:	d105      	bne.n	800a624 <USB_DevInit+0x240>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	699b      	ldr	r3, [r3, #24]
 800a61c:	f043 0210 	orr.w	r2, r3, #16
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	699a      	ldr	r2, [r3, #24]
 800a628:	4b0f      	ldr	r3, [pc, #60]	; (800a668 <USB_DevInit+0x284>)
 800a62a:	4313      	orrs	r3, r2
 800a62c:	687a      	ldr	r2, [r7, #4]
 800a62e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a632:	2b00      	cmp	r3, #0
 800a634:	d005      	beq.n	800a642 <USB_DevInit+0x25e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	699b      	ldr	r3, [r3, #24]
 800a63a:	f043 0208 	orr.w	r2, r3, #8
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a644:	2b01      	cmp	r3, #1
 800a646:	d107      	bne.n	800a658 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	699b      	ldr	r3, [r3, #24]
 800a64c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a650:	f043 0304 	orr.w	r3, r3, #4
 800a654:	687a      	ldr	r2, [r7, #4]
 800a656:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a658:	7dfb      	ldrb	r3, [r7, #23]
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3718      	adds	r7, #24
 800a65e:	46bd      	mov	sp, r7
 800a660:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a664:	b004      	add	sp, #16
 800a666:	4770      	bx	lr
 800a668:	803c3800 	.word	0x803c3800

0800a66c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b085      	sub	sp, #20
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a676:	2300      	movs	r3, #0
 800a678:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	3301      	adds	r3, #1
 800a67e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	4a13      	ldr	r2, [pc, #76]	; (800a6d0 <USB_FlushTxFifo+0x64>)
 800a684:	4293      	cmp	r3, r2
 800a686:	d901      	bls.n	800a68c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a688:	2303      	movs	r3, #3
 800a68a:	e01b      	b.n	800a6c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	691b      	ldr	r3, [r3, #16]
 800a690:	2b00      	cmp	r3, #0
 800a692:	daf2      	bge.n	800a67a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a694:	2300      	movs	r3, #0
 800a696:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	019b      	lsls	r3, r3, #6
 800a69c:	f043 0220 	orr.w	r2, r3, #32
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	3301      	adds	r3, #1
 800a6a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	4a08      	ldr	r2, [pc, #32]	; (800a6d0 <USB_FlushTxFifo+0x64>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d901      	bls.n	800a6b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a6b2:	2303      	movs	r3, #3
 800a6b4:	e006      	b.n	800a6c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	691b      	ldr	r3, [r3, #16]
 800a6ba:	f003 0320 	and.w	r3, r3, #32
 800a6be:	2b20      	cmp	r3, #32
 800a6c0:	d0f0      	beq.n	800a6a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a6c2:	2300      	movs	r3, #0
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3714      	adds	r7, #20
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr
 800a6d0:	00030d40 	.word	0x00030d40

0800a6d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b085      	sub	sp, #20
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	3301      	adds	r3, #1
 800a6e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	4a11      	ldr	r2, [pc, #68]	; (800a730 <USB_FlushRxFifo+0x5c>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d901      	bls.n	800a6f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a6ee:	2303      	movs	r3, #3
 800a6f0:	e018      	b.n	800a724 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	691b      	ldr	r3, [r3, #16]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	daf2      	bge.n	800a6e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2210      	movs	r2, #16
 800a702:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	3301      	adds	r3, #1
 800a708:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	4a08      	ldr	r2, [pc, #32]	; (800a730 <USB_FlushRxFifo+0x5c>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d901      	bls.n	800a716 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a712:	2303      	movs	r3, #3
 800a714:	e006      	b.n	800a724 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	691b      	ldr	r3, [r3, #16]
 800a71a:	f003 0310 	and.w	r3, r3, #16
 800a71e:	2b10      	cmp	r3, #16
 800a720:	d0f0      	beq.n	800a704 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a722:	2300      	movs	r3, #0
}
 800a724:	4618      	mov	r0, r3
 800a726:	3714      	adds	r7, #20
 800a728:	46bd      	mov	sp, r7
 800a72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72e:	4770      	bx	lr
 800a730:	00030d40 	.word	0x00030d40

0800a734 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a734:	b480      	push	{r7}
 800a736:	b085      	sub	sp, #20
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	460b      	mov	r3, r1
 800a73e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a74a:	681a      	ldr	r2, [r3, #0]
 800a74c:	78fb      	ldrb	r3, [r7, #3]
 800a74e:	68f9      	ldr	r1, [r7, #12]
 800a750:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a754:	4313      	orrs	r3, r2
 800a756:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a758:	2300      	movs	r3, #0
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3714      	adds	r7, #20
 800a75e:	46bd      	mov	sp, r7
 800a760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a764:	4770      	bx	lr

0800a766 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a766:	b480      	push	{r7}
 800a768:	b087      	sub	sp, #28
 800a76a:	af00      	add	r7, sp, #0
 800a76c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a778:	689b      	ldr	r3, [r3, #8]
 800a77a:	f003 0306 	and.w	r3, r3, #6
 800a77e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d102      	bne.n	800a78c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a786:	2300      	movs	r3, #0
 800a788:	75fb      	strb	r3, [r7, #23]
 800a78a:	e00a      	b.n	800a7a2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	2b02      	cmp	r3, #2
 800a790:	d002      	beq.n	800a798 <USB_GetDevSpeed+0x32>
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	2b06      	cmp	r3, #6
 800a796:	d102      	bne.n	800a79e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a798:	2302      	movs	r3, #2
 800a79a:	75fb      	strb	r3, [r7, #23]
 800a79c:	e001      	b.n	800a7a2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a79e:	230f      	movs	r3, #15
 800a7a0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a7a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	371c      	adds	r7, #28
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr

0800a7b0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b087      	sub	sp, #28
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	785b      	ldrb	r3, [r3, #1]
 800a7ca:	2b01      	cmp	r3, #1
 800a7cc:	d14a      	bne.n	800a864 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	781b      	ldrb	r3, [r3, #0]
 800a7d2:	015a      	lsls	r2, r3, #5
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	4413      	add	r3, r2
 800a7d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a7e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a7e6:	f040 8086 	bne.w	800a8f6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	015a      	lsls	r2, r3, #5
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	4413      	add	r3, r2
 800a7f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	683a      	ldr	r2, [r7, #0]
 800a7fc:	7812      	ldrb	r2, [r2, #0]
 800a7fe:	0151      	lsls	r1, r2, #5
 800a800:	693a      	ldr	r2, [r7, #16]
 800a802:	440a      	add	r2, r1
 800a804:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a808:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a80c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	781b      	ldrb	r3, [r3, #0]
 800a812:	015a      	lsls	r2, r3, #5
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	4413      	add	r3, r2
 800a818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	683a      	ldr	r2, [r7, #0]
 800a820:	7812      	ldrb	r2, [r2, #0]
 800a822:	0151      	lsls	r1, r2, #5
 800a824:	693a      	ldr	r2, [r7, #16]
 800a826:	440a      	add	r2, r1
 800a828:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a82c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a830:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	3301      	adds	r3, #1
 800a836:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f242 7210 	movw	r2, #10000	; 0x2710
 800a83e:	4293      	cmp	r3, r2
 800a840:	d902      	bls.n	800a848 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a842:	2301      	movs	r3, #1
 800a844:	75fb      	strb	r3, [r7, #23]
          break;
 800a846:	e056      	b.n	800a8f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	781b      	ldrb	r3, [r3, #0]
 800a84c:	015a      	lsls	r2, r3, #5
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	4413      	add	r3, r2
 800a852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a85c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a860:	d0e7      	beq.n	800a832 <USB_EPStopXfer+0x82>
 800a862:	e048      	b.n	800a8f6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	781b      	ldrb	r3, [r3, #0]
 800a868:	015a      	lsls	r2, r3, #5
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	4413      	add	r3, r2
 800a86e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a878:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a87c:	d13b      	bne.n	800a8f6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	781b      	ldrb	r3, [r3, #0]
 800a882:	015a      	lsls	r2, r3, #5
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	4413      	add	r3, r2
 800a888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	683a      	ldr	r2, [r7, #0]
 800a890:	7812      	ldrb	r2, [r2, #0]
 800a892:	0151      	lsls	r1, r2, #5
 800a894:	693a      	ldr	r2, [r7, #16]
 800a896:	440a      	add	r2, r1
 800a898:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a89c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a8a0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	781b      	ldrb	r3, [r3, #0]
 800a8a6:	015a      	lsls	r2, r3, #5
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	4413      	add	r3, r2
 800a8ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	683a      	ldr	r2, [r7, #0]
 800a8b4:	7812      	ldrb	r2, [r2, #0]
 800a8b6:	0151      	lsls	r1, r2, #5
 800a8b8:	693a      	ldr	r2, [r7, #16]
 800a8ba:	440a      	add	r2, r1
 800a8bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a8c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	3301      	adds	r3, #1
 800a8ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f242 7210 	movw	r2, #10000	; 0x2710
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d902      	bls.n	800a8dc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	75fb      	strb	r3, [r7, #23]
          break;
 800a8da:	e00c      	b.n	800a8f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	781b      	ldrb	r3, [r3, #0]
 800a8e0:	015a      	lsls	r2, r3, #5
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	4413      	add	r3, r2
 800a8e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a8f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a8f4:	d0e7      	beq.n	800a8c6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a8f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	371c      	adds	r7, #28
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a902:	4770      	bx	lr

0800a904 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a904:	b480      	push	{r7}
 800a906:	b089      	sub	sp, #36	; 0x24
 800a908:	af00      	add	r7, sp, #0
 800a90a:	60f8      	str	r0, [r7, #12]
 800a90c:	60b9      	str	r1, [r7, #8]
 800a90e:	4611      	mov	r1, r2
 800a910:	461a      	mov	r2, r3
 800a912:	460b      	mov	r3, r1
 800a914:	71fb      	strb	r3, [r7, #7]
 800a916:	4613      	mov	r3, r2
 800a918:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a922:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a926:	2b00      	cmp	r3, #0
 800a928:	d123      	bne.n	800a972 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a92a:	88bb      	ldrh	r3, [r7, #4]
 800a92c:	3303      	adds	r3, #3
 800a92e:	089b      	lsrs	r3, r3, #2
 800a930:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a932:	2300      	movs	r3, #0
 800a934:	61bb      	str	r3, [r7, #24]
 800a936:	e018      	b.n	800a96a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a938:	79fb      	ldrb	r3, [r7, #7]
 800a93a:	031a      	lsls	r2, r3, #12
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	4413      	add	r3, r2
 800a940:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a944:	461a      	mov	r2, r3
 800a946:	69fb      	ldr	r3, [r7, #28]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a94c:	69fb      	ldr	r3, [r7, #28]
 800a94e:	3301      	adds	r3, #1
 800a950:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a952:	69fb      	ldr	r3, [r7, #28]
 800a954:	3301      	adds	r3, #1
 800a956:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a958:	69fb      	ldr	r3, [r7, #28]
 800a95a:	3301      	adds	r3, #1
 800a95c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a95e:	69fb      	ldr	r3, [r7, #28]
 800a960:	3301      	adds	r3, #1
 800a962:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a964:	69bb      	ldr	r3, [r7, #24]
 800a966:	3301      	adds	r3, #1
 800a968:	61bb      	str	r3, [r7, #24]
 800a96a:	69ba      	ldr	r2, [r7, #24]
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	429a      	cmp	r2, r3
 800a970:	d3e2      	bcc.n	800a938 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a972:	2300      	movs	r3, #0
}
 800a974:	4618      	mov	r0, r3
 800a976:	3724      	adds	r7, #36	; 0x24
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr

0800a980 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a980:	b480      	push	{r7}
 800a982:	b08b      	sub	sp, #44	; 0x2c
 800a984:	af00      	add	r7, sp, #0
 800a986:	60f8      	str	r0, [r7, #12]
 800a988:	60b9      	str	r1, [r7, #8]
 800a98a:	4613      	mov	r3, r2
 800a98c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a996:	88fb      	ldrh	r3, [r7, #6]
 800a998:	089b      	lsrs	r3, r3, #2
 800a99a:	b29b      	uxth	r3, r3
 800a99c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a99e:	88fb      	ldrh	r3, [r7, #6]
 800a9a0:	f003 0303 	and.w	r3, r3, #3
 800a9a4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	623b      	str	r3, [r7, #32]
 800a9aa:	e014      	b.n	800a9d6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a9ac:	69bb      	ldr	r3, [r7, #24]
 800a9ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9b2:	681a      	ldr	r2, [r3, #0]
 800a9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b6:	601a      	str	r2, [r3, #0]
    pDest++;
 800a9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ba:	3301      	adds	r3, #1
 800a9bc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c0:	3301      	adds	r3, #1
 800a9c2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c6:	3301      	adds	r3, #1
 800a9c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9cc:	3301      	adds	r3, #1
 800a9ce:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a9d0:	6a3b      	ldr	r3, [r7, #32]
 800a9d2:	3301      	adds	r3, #1
 800a9d4:	623b      	str	r3, [r7, #32]
 800a9d6:	6a3a      	ldr	r2, [r7, #32]
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	d3e6      	bcc.n	800a9ac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a9de:	8bfb      	ldrh	r3, [r7, #30]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d01e      	beq.n	800aa22 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a9e8:	69bb      	ldr	r3, [r7, #24]
 800a9ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	f107 0310 	add.w	r3, r7, #16
 800a9f4:	6812      	ldr	r2, [r2, #0]
 800a9f6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a9f8:	693a      	ldr	r2, [r7, #16]
 800a9fa:	6a3b      	ldr	r3, [r7, #32]
 800a9fc:	b2db      	uxtb	r3, r3
 800a9fe:	00db      	lsls	r3, r3, #3
 800aa00:	fa22 f303 	lsr.w	r3, r2, r3
 800aa04:	b2da      	uxtb	r2, r3
 800aa06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa08:	701a      	strb	r2, [r3, #0]
      i++;
 800aa0a:	6a3b      	ldr	r3, [r7, #32]
 800aa0c:	3301      	adds	r3, #1
 800aa0e:	623b      	str	r3, [r7, #32]
      pDest++;
 800aa10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa12:	3301      	adds	r3, #1
 800aa14:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800aa16:	8bfb      	ldrh	r3, [r7, #30]
 800aa18:	3b01      	subs	r3, #1
 800aa1a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800aa1c:	8bfb      	ldrh	r3, [r7, #30]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d1ea      	bne.n	800a9f8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800aa22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	372c      	adds	r7, #44	; 0x2c
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2e:	4770      	bx	lr

0800aa30 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b085      	sub	sp, #20
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	68fa      	ldr	r2, [r7, #12]
 800aa46:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aa4a:	f023 0303 	bic.w	r3, r3, #3
 800aa4e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	68fa      	ldr	r2, [r7, #12]
 800aa5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa5e:	f043 0302 	orr.w	r3, r3, #2
 800aa62:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aa64:	2300      	movs	r3, #0
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3714      	adds	r7, #20
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa70:	4770      	bx	lr

0800aa72 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800aa72:	b480      	push	{r7}
 800aa74:	b085      	sub	sp, #20
 800aa76:	af00      	add	r7, sp, #0
 800aa78:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	695b      	ldr	r3, [r3, #20]
 800aa7e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	699b      	ldr	r3, [r3, #24]
 800aa84:	68fa      	ldr	r2, [r7, #12]
 800aa86:	4013      	ands	r3, r2
 800aa88:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3714      	adds	r7, #20
 800aa90:	46bd      	mov	sp, r7
 800aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa96:	4770      	bx	lr

0800aa98 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b085      	sub	sp, #20
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaaa:	699b      	ldr	r3, [r3, #24]
 800aaac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aab4:	69db      	ldr	r3, [r3, #28]
 800aab6:	68ba      	ldr	r2, [r7, #8]
 800aab8:	4013      	ands	r3, r2
 800aaba:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	0c1b      	lsrs	r3, r3, #16
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3714      	adds	r7, #20
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr

0800aacc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800aacc:	b480      	push	{r7}
 800aace:	b085      	sub	sp, #20
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aade:	699b      	ldr	r3, [r3, #24]
 800aae0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aae8:	69db      	ldr	r3, [r3, #28]
 800aaea:	68ba      	ldr	r2, [r7, #8]
 800aaec:	4013      	ands	r3, r2
 800aaee:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	b29b      	uxth	r3, r3
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3714      	adds	r7, #20
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafe:	4770      	bx	lr

0800ab00 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ab00:	b480      	push	{r7}
 800ab02:	b085      	sub	sp, #20
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	460b      	mov	r3, r1
 800ab0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ab10:	78fb      	ldrb	r3, [r7, #3]
 800ab12:	015a      	lsls	r2, r3, #5
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	4413      	add	r3, r2
 800ab18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab1c:	689b      	ldr	r3, [r3, #8]
 800ab1e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab26:	695b      	ldr	r3, [r3, #20]
 800ab28:	68ba      	ldr	r2, [r7, #8]
 800ab2a:	4013      	ands	r3, r2
 800ab2c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ab2e:	68bb      	ldr	r3, [r7, #8]
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	3714      	adds	r7, #20
 800ab34:	46bd      	mov	sp, r7
 800ab36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3a:	4770      	bx	lr

0800ab3c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b087      	sub	sp, #28
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	460b      	mov	r3, r1
 800ab46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab52:	691b      	ldr	r3, [r3, #16]
 800ab54:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab5e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ab60:	78fb      	ldrb	r3, [r7, #3]
 800ab62:	f003 030f 	and.w	r3, r3, #15
 800ab66:	68fa      	ldr	r2, [r7, #12]
 800ab68:	fa22 f303 	lsr.w	r3, r2, r3
 800ab6c:	01db      	lsls	r3, r3, #7
 800ab6e:	b2db      	uxtb	r3, r3
 800ab70:	693a      	ldr	r2, [r7, #16]
 800ab72:	4313      	orrs	r3, r2
 800ab74:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ab76:	78fb      	ldrb	r3, [r7, #3]
 800ab78:	015a      	lsls	r2, r3, #5
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	4413      	add	r3, r2
 800ab7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab82:	689b      	ldr	r3, [r3, #8]
 800ab84:	693a      	ldr	r2, [r7, #16]
 800ab86:	4013      	ands	r3, r2
 800ab88:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ab8a:	68bb      	ldr	r3, [r7, #8]
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	371c      	adds	r7, #28
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr

0800ab98 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b083      	sub	sp, #12
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	695b      	ldr	r3, [r3, #20]
 800aba4:	f003 0301 	and.w	r3, r3, #1
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	370c      	adds	r7, #12
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr

0800abb4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800abb4:	b480      	push	{r7}
 800abb6:	b085      	sub	sp, #20
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	68fa      	ldr	r2, [r7, #12]
 800abca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abce:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800abd2:	f023 0307 	bic.w	r3, r3, #7
 800abd6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abde:	685b      	ldr	r3, [r3, #4]
 800abe0:	68fa      	ldr	r2, [r7, #12]
 800abe2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800abe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800abea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800abec:	2300      	movs	r3, #0
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3714      	adds	r7, #20
 800abf2:	46bd      	mov	sp, r7
 800abf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf8:	4770      	bx	lr
	...

0800abfc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b087      	sub	sp, #28
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	60f8      	str	r0, [r7, #12]
 800ac04:	460b      	mov	r3, r1
 800ac06:	607a      	str	r2, [r7, #4]
 800ac08:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	333c      	adds	r3, #60	; 0x3c
 800ac12:	3304      	adds	r3, #4
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	4a26      	ldr	r2, [pc, #152]	; (800acb4 <USB_EP0_OutStart+0xb8>)
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d90a      	bls.n	800ac36 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ac20:	697b      	ldr	r3, [r7, #20]
 800ac22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ac2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ac30:	d101      	bne.n	800ac36 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ac32:	2300      	movs	r3, #0
 800ac34:	e037      	b.n	800aca6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac3c:	461a      	mov	r2, r3
 800ac3e:	2300      	movs	r3, #0
 800ac40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac48:	691b      	ldr	r3, [r3, #16]
 800ac4a:	697a      	ldr	r2, [r7, #20]
 800ac4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ac54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac5c:	691b      	ldr	r3, [r3, #16]
 800ac5e:	697a      	ldr	r2, [r7, #20]
 800ac60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac64:	f043 0318 	orr.w	r3, r3, #24
 800ac68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac70:	691b      	ldr	r3, [r3, #16]
 800ac72:	697a      	ldr	r2, [r7, #20]
 800ac74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac78:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ac7c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ac7e:	7afb      	ldrb	r3, [r7, #11]
 800ac80:	2b01      	cmp	r3, #1
 800ac82:	d10f      	bne.n	800aca4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	697a      	ldr	r2, [r7, #20]
 800ac9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac9e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800aca2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aca4:	2300      	movs	r3, #0
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	371c      	adds	r7, #28
 800acaa:	46bd      	mov	sp, r7
 800acac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb0:	4770      	bx	lr
 800acb2:	bf00      	nop
 800acb4:	4f54300a 	.word	0x4f54300a

0800acb8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800acb8:	b480      	push	{r7}
 800acba:	b085      	sub	sp, #20
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800acc0:	2300      	movs	r3, #0
 800acc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	3301      	adds	r3, #1
 800acc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	4a13      	ldr	r2, [pc, #76]	; (800ad1c <USB_CoreReset+0x64>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d901      	bls.n	800acd6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800acd2:	2303      	movs	r3, #3
 800acd4:	e01b      	b.n	800ad0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	691b      	ldr	r3, [r3, #16]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	daf2      	bge.n	800acc4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800acde:	2300      	movs	r3, #0
 800ace0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	691b      	ldr	r3, [r3, #16]
 800ace6:	f043 0201 	orr.w	r2, r3, #1
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	3301      	adds	r3, #1
 800acf2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	4a09      	ldr	r2, [pc, #36]	; (800ad1c <USB_CoreReset+0x64>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d901      	bls.n	800ad00 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800acfc:	2303      	movs	r3, #3
 800acfe:	e006      	b.n	800ad0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	691b      	ldr	r3, [r3, #16]
 800ad04:	f003 0301 	and.w	r3, r3, #1
 800ad08:	2b01      	cmp	r3, #1
 800ad0a:	d0f0      	beq.n	800acee <USB_CoreReset+0x36>

  return HAL_OK;
 800ad0c:	2300      	movs	r3, #0
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3714      	adds	r7, #20
 800ad12:	46bd      	mov	sp, r7
 800ad14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad18:	4770      	bx	lr
 800ad1a:	bf00      	nop
 800ad1c:	00030d40 	.word	0x00030d40

0800ad20 <__NVIC_SetPriority>:
{
 800ad20:	b480      	push	{r7}
 800ad22:	b083      	sub	sp, #12
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	4603      	mov	r3, r0
 800ad28:	6039      	str	r1, [r7, #0]
 800ad2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ad2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	db0a      	blt.n	800ad4a <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	b2da      	uxtb	r2, r3
 800ad38:	490c      	ldr	r1, [pc, #48]	; (800ad6c <__NVIC_SetPriority+0x4c>)
 800ad3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad3e:	0112      	lsls	r2, r2, #4
 800ad40:	b2d2      	uxtb	r2, r2
 800ad42:	440b      	add	r3, r1
 800ad44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ad48:	e00a      	b.n	800ad60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	b2da      	uxtb	r2, r3
 800ad4e:	4908      	ldr	r1, [pc, #32]	; (800ad70 <__NVIC_SetPriority+0x50>)
 800ad50:	79fb      	ldrb	r3, [r7, #7]
 800ad52:	f003 030f 	and.w	r3, r3, #15
 800ad56:	3b04      	subs	r3, #4
 800ad58:	0112      	lsls	r2, r2, #4
 800ad5a:	b2d2      	uxtb	r2, r2
 800ad5c:	440b      	add	r3, r1
 800ad5e:	761a      	strb	r2, [r3, #24]
}
 800ad60:	bf00      	nop
 800ad62:	370c      	adds	r7, #12
 800ad64:	46bd      	mov	sp, r7
 800ad66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6a:	4770      	bx	lr
 800ad6c:	e000e100 	.word	0xe000e100
 800ad70:	e000ed00 	.word	0xe000ed00

0800ad74 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ad74:	b580      	push	{r7, lr}
 800ad76:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 800ad78:	4b05      	ldr	r3, [pc, #20]	; (800ad90 <SysTick_Handler+0x1c>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ad7c:	f001 fb8c 	bl	800c498 <xTaskGetSchedulerState>
 800ad80:	4603      	mov	r3, r0
 800ad82:	2b01      	cmp	r3, #1
 800ad84:	d001      	beq.n	800ad8a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ad86:	f001 ff47 	bl	800cc18 <xPortSysTickHandler>
  }
}
 800ad8a:	bf00      	nop
 800ad8c:	bd80      	pop	{r7, pc}
 800ad8e:	bf00      	nop
 800ad90:	e000e010 	.word	0xe000e010

0800ad94 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ad94:	b580      	push	{r7, lr}
 800ad96:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start      */
  /* and when its priority is lower or equal to BASEPRI, svc instruction */
  /* causes a Hard Fault.                                                */
  NVIC_SetPriority (SVCall_IRQn, 0U);
 800ad98:	2100      	movs	r1, #0
 800ad9a:	f06f 0004 	mvn.w	r0, #4
 800ad9e:	f7ff ffbf 	bl	800ad20 <__NVIC_SetPriority>
#endif
}
 800ada2:	bf00      	nop
 800ada4:	bd80      	pop	{r7, pc}

0800ada6 <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
 800ada6:	b580      	push	{r7, lr}
 800ada8:	b086      	sub	sp, #24
 800adaa:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
 800adac:	2300      	movs	r3, #0
 800adae:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800adb0:	f3ef 8305 	mrs	r3, IPSR
 800adb4:	60fb      	str	r3, [r7, #12]
  return(result);
 800adb6:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ_MODE()) {
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d002      	beq.n	800adc2 <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
 800adbc:	2301      	movs	r3, #1
 800adbe:	617b      	str	r3, [r7, #20]
 800adc0:	e013      	b.n	800adea <IRQ_Context+0x44>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
 800adc2:	f001 fb69 	bl	800c498 <xTaskGetSchedulerState>
 800adc6:	6138      	str	r0, [r7, #16]

    if (state != taskSCHEDULER_NOT_STARTED) {
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	2b01      	cmp	r3, #1
 800adcc:	d00d      	beq.n	800adea <IRQ_Context+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800adce:	f3ef 8310 	mrs	r3, PRIMASK
 800add2:	60bb      	str	r3, [r7, #8]
  return(result);
 800add4:	68bb      	ldr	r3, [r7, #8]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
 800add6:	2b00      	cmp	r3, #0
 800add8:	d105      	bne.n	800ade6 <IRQ_Context+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800adda:	f3ef 8311 	mrs	r3, BASEPRI
 800adde:	607b      	str	r3, [r7, #4]
  return(result);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d001      	beq.n	800adea <IRQ_Context+0x44>
        /* Interrupts are masked */
        irq = 1U;
 800ade6:	2301      	movs	r3, #1
 800ade8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
 800adea:	697b      	ldr	r3, [r7, #20]
}
 800adec:	4618      	mov	r0, r3
 800adee:	3718      	adds	r7, #24
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}

0800adf4 <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b082      	sub	sp, #8
 800adf8:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 800adfa:	f7ff ffd4 	bl	800ada6 <IRQ_Context>
 800adfe:	4603      	mov	r3, r0
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d003      	beq.n	800ae0c <osKernelInitialize+0x18>
    stat = osErrorISR;
 800ae04:	f06f 0305 	mvn.w	r3, #5
 800ae08:	607b      	str	r3, [r7, #4]
 800ae0a:	e012      	b.n	800ae32 <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
 800ae0c:	f001 fb44 	bl	800c498 <xTaskGetSchedulerState>
 800ae10:	6038      	str	r0, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	2b01      	cmp	r3, #1
 800ae16:	d109      	bne.n	800ae2c <osKernelInitialize+0x38>
 800ae18:	4b08      	ldr	r3, [pc, #32]	; (800ae3c <osKernelInitialize+0x48>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d105      	bne.n	800ae2c <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ae20:	4b06      	ldr	r3, [pc, #24]	; (800ae3c <osKernelInitialize+0x48>)
 800ae22:	2201      	movs	r2, #1
 800ae24:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ae26:	2300      	movs	r3, #0
 800ae28:	607b      	str	r3, [r7, #4]
 800ae2a:	e002      	b.n	800ae32 <osKernelInitialize+0x3e>
    } else {
      stat = osError;
 800ae2c:	f04f 33ff 	mov.w	r3, #4294967295
 800ae30:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 800ae32:	687b      	ldr	r3, [r7, #4]
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	3708      	adds	r7, #8
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}
 800ae3c:	20000714 	.word	0x20000714

0800ae40 <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b082      	sub	sp, #8
 800ae44:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 800ae46:	f7ff ffae 	bl	800ada6 <IRQ_Context>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d003      	beq.n	800ae58 <osKernelStart+0x18>
    stat = osErrorISR;
 800ae50:	f06f 0305 	mvn.w	r3, #5
 800ae54:	607b      	str	r3, [r7, #4]
 800ae56:	e016      	b.n	800ae86 <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
 800ae58:	f001 fb1e 	bl	800c498 <xTaskGetSchedulerState>
 800ae5c:	6038      	str	r0, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	2b01      	cmp	r3, #1
 800ae62:	d10d      	bne.n	800ae80 <osKernelStart+0x40>
 800ae64:	4b0a      	ldr	r3, [pc, #40]	; (800ae90 <osKernelStart+0x50>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	2b01      	cmp	r3, #1
 800ae6a:	d109      	bne.n	800ae80 <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ae6c:	f7ff ff92 	bl	800ad94 <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
 800ae70:	4b07      	ldr	r3, [pc, #28]	; (800ae90 <osKernelStart+0x50>)
 800ae72:	2202      	movs	r2, #2
 800ae74:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ae76:	f000 fde5 	bl	800ba44 <vTaskStartScheduler>
      stat = osOK;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	607b      	str	r3, [r7, #4]
 800ae7e:	e002      	b.n	800ae86 <osKernelStart+0x46>
    } else {
      stat = osError;
 800ae80:	f04f 33ff 	mov.w	r3, #4294967295
 800ae84:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 800ae86:	687b      	ldr	r3, [r7, #4]
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3708      	adds	r7, #8
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}
 800ae90:	20000714 	.word	0x20000714

0800ae94 <osThreadNew>:
  Limitations:
  - The memory for control block and stack must be provided in the osThreadAttr_t
    structure in order to allocate object statically.
  - Attribute osThreadJoinable is not supported, NULL is returned if used.
*/
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b08e      	sub	sp, #56	; 0x38
 800ae98:	af04      	add	r7, sp, #16
 800ae9a:	60f8      	str	r0, [r7, #12]
 800ae9c:	60b9      	str	r1, [r7, #8]
 800ae9e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800aea0:	2300      	movs	r3, #0
 800aea2:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
 800aea4:	f7ff ff7f 	bl	800ada6 <IRQ_Context>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d17e      	bne.n	800afac <osThreadNew+0x118>
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d07b      	beq.n	800afac <osThreadNew+0x118>
    stack = configMINIMAL_STACK_SIZE;
 800aeb4:	2380      	movs	r3, #128	; 0x80
 800aeb6:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800aeb8:	2318      	movs	r3, #24
 800aeba:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800aebc:	2300      	movs	r3, #0
 800aebe:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800aec0:	f04f 33ff 	mov.w	r3, #4294967295
 800aec4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d045      	beq.n	800af58 <osThreadNew+0xc4>
      if (attr->name != NULL) {
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d002      	beq.n	800aeda <osThreadNew+0x46>
        name = attr->name;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	699b      	ldr	r3, [r3, #24]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d002      	beq.n	800aee8 <osThreadNew+0x54>
        prio = (UBaseType_t)attr->priority;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	699b      	ldr	r3, [r3, #24]
 800aee6:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800aee8:	69fb      	ldr	r3, [r7, #28]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d008      	beq.n	800af00 <osThreadNew+0x6c>
 800aeee:	69fb      	ldr	r3, [r7, #28]
 800aef0:	2b38      	cmp	r3, #56	; 0x38
 800aef2:	d805      	bhi.n	800af00 <osThreadNew+0x6c>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	685b      	ldr	r3, [r3, #4]
 800aef8:	f003 0301 	and.w	r3, r3, #1
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d001      	beq.n	800af04 <osThreadNew+0x70>
        /* Invalid priority or unsupported osThreadJoinable attribute used */
        return (NULL);
 800af00:	2300      	movs	r3, #0
 800af02:	e054      	b.n	800afae <osThreadNew+0x11a>
      }

      if (attr->stack_size > 0U) {
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	695b      	ldr	r3, [r3, #20]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d003      	beq.n	800af14 <osThreadNew+0x80>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	695b      	ldr	r3, [r3, #20]
 800af10:	089b      	lsrs	r3, r3, #2
 800af12:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	689b      	ldr	r3, [r3, #8]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d00e      	beq.n	800af3a <osThreadNew+0xa6>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	68db      	ldr	r3, [r3, #12]
 800af20:	2b5b      	cmp	r3, #91	; 0x5b
 800af22:	d90a      	bls.n	800af3a <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d006      	beq.n	800af3a <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	695b      	ldr	r3, [r3, #20]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d002      	beq.n	800af3a <osThreadNew+0xa6>
        /* The memory for control block and stack is provided, use static object */
        mem = 1;
 800af34:	2301      	movs	r3, #1
 800af36:	61bb      	str	r3, [r7, #24]
 800af38:	e010      	b.n	800af5c <osThreadNew+0xc8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	689b      	ldr	r3, [r3, #8]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d10c      	bne.n	800af5c <osThreadNew+0xc8>
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	68db      	ldr	r3, [r3, #12]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d108      	bne.n	800af5c <osThreadNew+0xc8>
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	691b      	ldr	r3, [r3, #16]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d104      	bne.n	800af5c <osThreadNew+0xc8>
          /* Control block and stack memory will be allocated from the dynamic pool */
          mem = 0;
 800af52:	2300      	movs	r3, #0
 800af54:	61bb      	str	r3, [r7, #24]
 800af56:	e001      	b.n	800af5c <osThreadNew+0xc8>
        }
      }
    }
    else {
      mem = 0;
 800af58:	2300      	movs	r3, #0
 800af5a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800af5c:	69bb      	ldr	r3, [r7, #24]
 800af5e:	2b01      	cmp	r3, #1
 800af60:	d110      	bne.n	800af84 <osThreadNew+0xf0>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800af66:	687a      	ldr	r2, [r7, #4]
 800af68:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800af6a:	9202      	str	r2, [sp, #8]
 800af6c:	9301      	str	r3, [sp, #4]
 800af6e:	69fb      	ldr	r3, [r7, #28]
 800af70:	9300      	str	r3, [sp, #0]
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	6a3a      	ldr	r2, [r7, #32]
 800af76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af78:	68f8      	ldr	r0, [r7, #12]
 800af7a:	f000 fb9b 	bl	800b6b4 <xTaskCreateStatic>
 800af7e:	4603      	mov	r3, r0
 800af80:	617b      	str	r3, [r7, #20]
 800af82:	e013      	b.n	800afac <osThreadNew+0x118>
      #endif
    }
    else {
      if (mem == 0) {
 800af84:	69bb      	ldr	r3, [r7, #24]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d110      	bne.n	800afac <osThreadNew+0x118>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (configSTACK_DEPTH_TYPE)stack, argument, prio, &hTask) != pdPASS) {
 800af8a:	6a3b      	ldr	r3, [r7, #32]
 800af8c:	b29a      	uxth	r2, r3
 800af8e:	f107 0314 	add.w	r3, r7, #20
 800af92:	9301      	str	r3, [sp, #4]
 800af94:	69fb      	ldr	r3, [r7, #28]
 800af96:	9300      	str	r3, [sp, #0]
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af9c:	68f8      	ldr	r0, [r7, #12]
 800af9e:	f000 fbd3 	bl	800b748 <xTaskCreate>
 800afa2:	4603      	mov	r3, r0
 800afa4:	2b01      	cmp	r3, #1
 800afa6:	d001      	beq.n	800afac <osThreadNew+0x118>
            hTask = NULL;
 800afa8:	2300      	movs	r3, #0
 800afaa:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return thread ID */
  return ((osThreadId_t)hTask);
 800afac:	697b      	ldr	r3, [r7, #20]
}
 800afae:	4618      	mov	r0, r3
 800afb0:	3728      	adds	r7, #40	; 0x28
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}

0800afb6 <osDelay>:
/* ==== Generic Wait Functions ==== */

/*
  Wait for Timeout (Time Delay).
*/
osStatus_t osDelay (uint32_t ticks) {
 800afb6:	b580      	push	{r7, lr}
 800afb8:	b084      	sub	sp, #16
 800afba:	af00      	add	r7, sp, #0
 800afbc:	6078      	str	r0, [r7, #4]
  osStatus_t stat;

  if (IRQ_Context() != 0U) {
 800afbe:	f7ff fef2 	bl	800ada6 <IRQ_Context>
 800afc2:	4603      	mov	r3, r0
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d003      	beq.n	800afd0 <osDelay+0x1a>
    stat = osErrorISR;
 800afc8:	f06f 0305 	mvn.w	r3, #5
 800afcc:	60fb      	str	r3, [r7, #12]
 800afce:	e007      	b.n	800afe0 <osDelay+0x2a>
  }
  else {
    stat = osOK;
 800afd0:	2300      	movs	r3, #0
 800afd2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d002      	beq.n	800afe0 <osDelay+0x2a>
      vTaskDelay(ticks);
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f000 fd0e 	bl	800b9fc <vTaskDelay>
    }
  }

  /* Return execution status */
  return (stat);
 800afe0:	68fb      	ldr	r3, [r7, #12]
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	3710      	adds	r7, #16
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}
	...

0800afec <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800afec:	b480      	push	{r7}
 800afee:	b085      	sub	sp, #20
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	60f8      	str	r0, [r7, #12]
 800aff4:	60b9      	str	r1, [r7, #8]
 800aff6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	4a07      	ldr	r2, [pc, #28]	; (800b018 <vApplicationGetIdleTaskMemory+0x2c>)
 800affc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	4a06      	ldr	r2, [pc, #24]	; (800b01c <vApplicationGetIdleTaskMemory+0x30>)
 800b002:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2280      	movs	r2, #128	; 0x80
 800b008:	601a      	str	r2, [r3, #0]
}
 800b00a:	bf00      	nop
 800b00c:	3714      	adds	r7, #20
 800b00e:	46bd      	mov	sp, r7
 800b010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b014:	4770      	bx	lr
 800b016:	bf00      	nop
 800b018:	20000718 	.word	0x20000718
 800b01c:	20000774 	.word	0x20000774

0800b020 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b020:	b480      	push	{r7}
 800b022:	b085      	sub	sp, #20
 800b024:	af00      	add	r7, sp, #0
 800b026:	60f8      	str	r0, [r7, #12]
 800b028:	60b9      	str	r1, [r7, #8]
 800b02a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	4a07      	ldr	r2, [pc, #28]	; (800b04c <vApplicationGetTimerTaskMemory+0x2c>)
 800b030:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	4a06      	ldr	r2, [pc, #24]	; (800b050 <vApplicationGetTimerTaskMemory+0x30>)
 800b036:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2280      	movs	r2, #128	; 0x80
 800b03c:	601a      	str	r2, [r3, #0]
}
 800b03e:	bf00      	nop
 800b040:	3714      	adds	r7, #20
 800b042:	46bd      	mov	sp, r7
 800b044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b048:	4770      	bx	lr
 800b04a:	bf00      	nop
 800b04c:	20000974 	.word	0x20000974
 800b050:	200009d0 	.word	0x200009d0

0800b054 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b054:	b480      	push	{r7}
 800b056:	b083      	sub	sp, #12
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f103 0208 	add.w	r2, r3, #8
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f04f 32ff 	mov.w	r2, #4294967295
 800b06c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f103 0208 	add.w	r2, r3, #8
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f103 0208 	add.w	r2, r3, #8
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2200      	movs	r2, #0
 800b086:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b088:	bf00      	nop
 800b08a:	370c      	adds	r7, #12
 800b08c:	46bd      	mov	sp, r7
 800b08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b092:	4770      	bx	lr

0800b094 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b094:	b480      	push	{r7}
 800b096:	b083      	sub	sp, #12
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b0a2:	bf00      	nop
 800b0a4:	370c      	adds	r7, #12
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ac:	4770      	bx	lr

0800b0ae <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800b0ae:	b480      	push	{r7}
 800b0b0:	b085      	sub	sp, #20
 800b0b2:	af00      	add	r7, sp, #0
 800b0b4:	6078      	str	r0, [r7, #4]
 800b0b6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0c4:	d103      	bne.n	800b0ce <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	691b      	ldr	r3, [r3, #16]
 800b0ca:	60fb      	str	r3, [r7, #12]
 800b0cc:	e00c      	b.n	800b0e8 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	3308      	adds	r3, #8
 800b0d2:	60fb      	str	r3, [r7, #12]
 800b0d4:	e002      	b.n	800b0dc <vListInsert+0x2e>
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	60fb      	str	r3, [r7, #12]
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	685b      	ldr	r3, [r3, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	68ba      	ldr	r2, [r7, #8]
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d2f6      	bcs.n	800b0d6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	685a      	ldr	r2, [r3, #4]
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	685b      	ldr	r3, [r3, #4]
 800b0f4:	683a      	ldr	r2, [r7, #0]
 800b0f6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	68fa      	ldr	r2, [r7, #12]
 800b0fc:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	683a      	ldr	r2, [r7, #0]
 800b102:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	1c5a      	adds	r2, r3, #1
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	601a      	str	r2, [r3, #0]
}
 800b114:	bf00      	nop
 800b116:	3714      	adds	r7, #20
 800b118:	46bd      	mov	sp, r7
 800b11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11e:	4770      	bx	lr

0800b120 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b120:	b480      	push	{r7}
 800b122:	b085      	sub	sp, #20
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	691b      	ldr	r3, [r3, #16]
 800b12c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	685b      	ldr	r3, [r3, #4]
 800b132:	687a      	ldr	r2, [r7, #4]
 800b134:	6892      	ldr	r2, [r2, #8]
 800b136:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	689b      	ldr	r3, [r3, #8]
 800b13c:	687a      	ldr	r2, [r7, #4]
 800b13e:	6852      	ldr	r2, [r2, #4]
 800b140:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	687a      	ldr	r2, [r7, #4]
 800b148:	429a      	cmp	r2, r3
 800b14a:	d103      	bne.n	800b154 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	689a      	ldr	r2, [r3, #8]
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2200      	movs	r2, #0
 800b158:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	1e5a      	subs	r2, r3, #1
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	681b      	ldr	r3, [r3, #0]
}
 800b168:	4618      	mov	r0, r3
 800b16a:	3714      	adds	r7, #20
 800b16c:	46bd      	mov	sp, r7
 800b16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b172:	4770      	bx	lr

0800b174 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b084      	sub	sp, #16
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800b17e:	2301      	movs	r3, #1
 800b180:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d102      	bne.n	800b192 <xQueueGenericReset+0x1e>
 800b18c:	f001 fe54 	bl	800ce38 <ulSetInterruptMask>
 800b190:	e7fe      	b.n	800b190 <xQueueGenericReset+0x1c>

    if( ( pxQueue != NULL ) &&
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d057      	beq.n	800b248 <xQueueGenericReset+0xd4>
        ( pxQueue->uxLength >= 1U ) &&
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d053      	beq.n	800b248 <xQueueGenericReset+0xd4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1a8:	2100      	movs	r1, #0
 800b1aa:	fba3 2302 	umull	r2, r3, r3, r2
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d000      	beq.n	800b1b4 <xQueueGenericReset+0x40>
 800b1b2:	2101      	movs	r1, #1
 800b1b4:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d146      	bne.n	800b248 <xQueueGenericReset+0xd4>
    {
        taskENTER_CRITICAL();
 800b1ba:	f001 fd01 	bl	800cbc0 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	681a      	ldr	r2, [r3, #0]
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1c6:	68b9      	ldr	r1, [r7, #8]
 800b1c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b1ca:	fb01 f303 	mul.w	r3, r1, r3
 800b1ce:	441a      	add	r2, r3
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	681a      	ldr	r2, [r3, #0]
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b1e2:	68bb      	ldr	r3, [r7, #8]
 800b1e4:	681a      	ldr	r2, [r3, #0]
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1ea:	3b01      	subs	r3, #1
 800b1ec:	68b9      	ldr	r1, [r7, #8]
 800b1ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b1f0:	fb01 f303 	mul.w	r3, r1, r3
 800b1f4:	441a      	add	r2, r3
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	22ff      	movs	r2, #255	; 0xff
 800b1fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	22ff      	movs	r2, #255	; 0xff
 800b206:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d10e      	bne.n	800b22e <xQueueGenericReset+0xba>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	691b      	ldr	r3, [r3, #16]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d014      	beq.n	800b242 <xQueueGenericReset+0xce>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	3310      	adds	r3, #16
 800b21c:	4618      	mov	r0, r3
 800b21e:	f000 ff33 	bl	800c088 <xTaskRemoveFromEventList>
 800b222:	4603      	mov	r3, r0
 800b224:	2b00      	cmp	r3, #0
 800b226:	d00c      	beq.n	800b242 <xQueueGenericReset+0xce>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800b228:	f001 fcb8 	bl	800cb9c <vPortYield>
 800b22c:	e009      	b.n	800b242 <xQueueGenericReset+0xce>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	3310      	adds	r3, #16
 800b232:	4618      	mov	r0, r3
 800b234:	f7ff ff0e 	bl	800b054 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	3324      	adds	r3, #36	; 0x24
 800b23c:	4618      	mov	r0, r3
 800b23e:	f7ff ff09 	bl	800b054 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800b242:	f001 fccf 	bl	800cbe4 <vPortExitCritical>
 800b246:	e001      	b.n	800b24c <xQueueGenericReset+0xd8>
    }
    else
    {
        xReturn = pdFAIL;
 800b248:	2300      	movs	r3, #0
 800b24a:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d102      	bne.n	800b258 <xQueueGenericReset+0xe4>
 800b252:	f001 fdf1 	bl	800ce38 <ulSetInterruptMask>
 800b256:	e7fe      	b.n	800b256 <xQueueGenericReset+0xe2>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800b258:	68fb      	ldr	r3, [r7, #12]
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3710      	adds	r7, #16
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}

0800b262 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 800b262:	b580      	push	{r7, lr}
 800b264:	b088      	sub	sp, #32
 800b266:	af02      	add	r7, sp, #8
 800b268:	60f8      	str	r0, [r7, #12]
 800b26a:	60b9      	str	r1, [r7, #8]
 800b26c:	607a      	str	r2, [r7, #4]
 800b26e:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 800b270:	2300      	movs	r3, #0
 800b272:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d102      	bne.n	800b280 <xQueueGenericCreateStatic+0x1e>
 800b27a:	f001 fddd 	bl	800ce38 <ulSetInterruptMask>
 800b27e:	e7fe      	b.n	800b27e <xQueueGenericCreateStatic+0x1c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d028      	beq.n	800b2d8 <xQueueGenericCreateStatic+0x76>
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d025      	beq.n	800b2d8 <xQueueGenericCreateStatic+0x76>
            ( pxStaticQueue != NULL ) &&
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d002      	beq.n	800b298 <xQueueGenericCreateStatic+0x36>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d01f      	beq.n	800b2d8 <xQueueGenericCreateStatic+0x76>
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d102      	bne.n	800b2a4 <xQueueGenericCreateStatic+0x42>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d119      	bne.n	800b2d8 <xQueueGenericCreateStatic+0x76>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 800b2a4:	2350      	movs	r3, #80	; 0x50
 800b2a6:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	2b50      	cmp	r3, #80	; 0x50
 800b2ac:	d002      	beq.n	800b2b4 <xQueueGenericCreateStatic+0x52>
 800b2ae:	f001 fdc3 	bl	800ce38 <ulSetInterruptMask>
 800b2b2:	e7fe      	b.n	800b2b2 <xQueueGenericCreateStatic+0x50>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 800b2b4:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	2201      	movs	r2, #1
 800b2be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b2c2:	f897 2020 	ldrb.w	r2, [r7, #32]
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	9300      	str	r3, [sp, #0]
 800b2ca:	4613      	mov	r3, r2
 800b2cc:	687a      	ldr	r2, [r7, #4]
 800b2ce:	68b9      	ldr	r1, [r7, #8]
 800b2d0:	68f8      	ldr	r0, [r7, #12]
 800b2d2:	f000 f80c 	bl	800b2ee <prvInitialiseNewQueue>
 800b2d6:	e005      	b.n	800b2e4 <xQueueGenericCreateStatic+0x82>
        }
        else
        {
            configASSERT( pxNewQueue );
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d102      	bne.n	800b2e4 <xQueueGenericCreateStatic+0x82>
 800b2de:	f001 fdab 	bl	800ce38 <ulSetInterruptMask>
 800b2e2:	e7fe      	b.n	800b2e2 <xQueueGenericCreateStatic+0x80>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800b2e4:	697b      	ldr	r3, [r7, #20]
    }
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3718      	adds	r7, #24
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}

0800b2ee <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800b2ee:	b580      	push	{r7, lr}
 800b2f0:	b084      	sub	sp, #16
 800b2f2:	af00      	add	r7, sp, #0
 800b2f4:	60f8      	str	r0, [r7, #12]
 800b2f6:	60b9      	str	r1, [r7, #8]
 800b2f8:	607a      	str	r2, [r7, #4]
 800b2fa:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d103      	bne.n	800b30a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b302:	69bb      	ldr	r3, [r7, #24]
 800b304:	69ba      	ldr	r2, [r7, #24]
 800b306:	601a      	str	r2, [r3, #0]
 800b308:	e002      	b.n	800b310 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b30a:	69bb      	ldr	r3, [r7, #24]
 800b30c:	687a      	ldr	r2, [r7, #4]
 800b30e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800b310:	69bb      	ldr	r3, [r7, #24]
 800b312:	68fa      	ldr	r2, [r7, #12]
 800b314:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800b316:	69bb      	ldr	r3, [r7, #24]
 800b318:	68ba      	ldr	r2, [r7, #8]
 800b31a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b31c:	2101      	movs	r1, #1
 800b31e:	69b8      	ldr	r0, [r7, #24]
 800b320:	f7ff ff28 	bl	800b174 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800b324:	69bb      	ldr	r3, [r7, #24]
 800b326:	78fa      	ldrb	r2, [r7, #3]
 800b328:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800b32c:	bf00      	nop
 800b32e:	3710      	adds	r7, #16
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}

0800b334 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b08a      	sub	sp, #40	; 0x28
 800b338:	af00      	add	r7, sp, #0
 800b33a:	60f8      	str	r0, [r7, #12]
 800b33c:	60b9      	str	r1, [r7, #8]
 800b33e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800b340:	2300      	movs	r3, #0
 800b342:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800b348:	6a3b      	ldr	r3, [r7, #32]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d102      	bne.n	800b354 <xQueueReceive+0x20>
 800b34e:	f001 fd73 	bl	800ce38 <ulSetInterruptMask>
 800b352:	e7fe      	b.n	800b352 <xQueueReceive+0x1e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d103      	bne.n	800b362 <xQueueReceive+0x2e>
 800b35a:	6a3b      	ldr	r3, [r7, #32]
 800b35c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d101      	bne.n	800b366 <xQueueReceive+0x32>
 800b362:	2301      	movs	r3, #1
 800b364:	e000      	b.n	800b368 <xQueueReceive+0x34>
 800b366:	2300      	movs	r3, #0
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d102      	bne.n	800b372 <xQueueReceive+0x3e>
 800b36c:	f001 fd64 	bl	800ce38 <ulSetInterruptMask>
 800b370:	e7fe      	b.n	800b370 <xQueueReceive+0x3c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b372:	f001 f891 	bl	800c498 <xTaskGetSchedulerState>
 800b376:	4603      	mov	r3, r0
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d102      	bne.n	800b382 <xQueueReceive+0x4e>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d101      	bne.n	800b386 <xQueueReceive+0x52>
 800b382:	2301      	movs	r3, #1
 800b384:	e000      	b.n	800b388 <xQueueReceive+0x54>
 800b386:	2300      	movs	r3, #0
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d102      	bne.n	800b392 <xQueueReceive+0x5e>
 800b38c:	f001 fd54 	bl	800ce38 <ulSetInterruptMask>
 800b390:	e7fe      	b.n	800b390 <xQueueReceive+0x5c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800b392:	f001 fc15 	bl	800cbc0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b396:	6a3b      	ldr	r3, [r7, #32]
 800b398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b39a:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b39c:	69fb      	ldr	r3, [r7, #28]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d019      	beq.n	800b3d6 <xQueueReceive+0xa2>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b3a2:	68b9      	ldr	r1, [r7, #8]
 800b3a4:	6a38      	ldr	r0, [r7, #32]
 800b3a6:	f000 f87e 	bl	800b4a6 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b3aa:	69fb      	ldr	r3, [r7, #28]
 800b3ac:	1e5a      	subs	r2, r3, #1
 800b3ae:	6a3b      	ldr	r3, [r7, #32]
 800b3b0:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b3b2:	6a3b      	ldr	r3, [r7, #32]
 800b3b4:	691b      	ldr	r3, [r3, #16]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d009      	beq.n	800b3ce <xQueueReceive+0x9a>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3ba:	6a3b      	ldr	r3, [r7, #32]
 800b3bc:	3310      	adds	r3, #16
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f000 fe62 	bl	800c088 <xTaskRemoveFromEventList>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d001      	beq.n	800b3ce <xQueueReceive+0x9a>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800b3ca:	f001 fbe7 	bl	800cb9c <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800b3ce:	f001 fc09 	bl	800cbe4 <vPortExitCritical>
                return pdPASS;
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	e063      	b.n	800b49e <xQueueReceive+0x16a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d103      	bne.n	800b3e4 <xQueueReceive+0xb0>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800b3dc:	f001 fc02 	bl	800cbe4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	e05c      	b.n	800b49e <xQueueReceive+0x16a>
                }
                else if( xEntryTimeSet == pdFALSE )
 800b3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d106      	bne.n	800b3f8 <xQueueReceive+0xc4>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800b3ea:	f107 0314 	add.w	r3, r7, #20
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f000 ff18 	bl	800c224 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800b3f8:	f001 fbf4 	bl	800cbe4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800b3fc:	f000 fb7c 	bl	800baf8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800b400:	f001 fbde 	bl	800cbc0 <vPortEnterCritical>
 800b404:	6a3b      	ldr	r3, [r7, #32]
 800b406:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b40a:	b25b      	sxtb	r3, r3
 800b40c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b410:	d103      	bne.n	800b41a <xQueueReceive+0xe6>
 800b412:	6a3b      	ldr	r3, [r7, #32]
 800b414:	2200      	movs	r2, #0
 800b416:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b41a:	6a3b      	ldr	r3, [r7, #32]
 800b41c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b420:	b25b      	sxtb	r3, r3
 800b422:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b426:	d103      	bne.n	800b430 <xQueueReceive+0xfc>
 800b428:	6a3b      	ldr	r3, [r7, #32]
 800b42a:	2200      	movs	r2, #0
 800b42c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b430:	f001 fbd8 	bl	800cbe4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b434:	1d3a      	adds	r2, r7, #4
 800b436:	f107 0314 	add.w	r3, r7, #20
 800b43a:	4611      	mov	r1, r2
 800b43c:	4618      	mov	r0, r3
 800b43e:	f000 ff07 	bl	800c250 <xTaskCheckForTimeOut>
 800b442:	4603      	mov	r3, r0
 800b444:	2b00      	cmp	r3, #0
 800b446:	d11d      	bne.n	800b484 <xQueueReceive+0x150>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b448:	6a38      	ldr	r0, [r7, #32]
 800b44a:	f000 f8a4 	bl	800b596 <prvIsQueueEmpty>
 800b44e:	4603      	mov	r3, r0
 800b450:	2b00      	cmp	r3, #0
 800b452:	d011      	beq.n	800b478 <xQueueReceive+0x144>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b454:	6a3b      	ldr	r3, [r7, #32]
 800b456:	3324      	adds	r3, #36	; 0x24
 800b458:	687a      	ldr	r2, [r7, #4]
 800b45a:	4611      	mov	r1, r2
 800b45c:	4618      	mov	r0, r3
 800b45e:	f000 fdb9 	bl	800bfd4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800b462:	6a38      	ldr	r0, [r7, #32]
 800b464:	f000 f845 	bl	800b4f2 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800b468:	f000 fb54 	bl	800bb14 <xTaskResumeAll>
 800b46c:	4603      	mov	r3, r0
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d18f      	bne.n	800b392 <xQueueReceive+0x5e>
                {
                    portYIELD_WITHIN_API();
 800b472:	f001 fb93 	bl	800cb9c <vPortYield>
 800b476:	e78c      	b.n	800b392 <xQueueReceive+0x5e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800b478:	6a38      	ldr	r0, [r7, #32]
 800b47a:	f000 f83a 	bl	800b4f2 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800b47e:	f000 fb49 	bl	800bb14 <xTaskResumeAll>
 800b482:	e786      	b.n	800b392 <xQueueReceive+0x5e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800b484:	6a38      	ldr	r0, [r7, #32]
 800b486:	f000 f834 	bl	800b4f2 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800b48a:	f000 fb43 	bl	800bb14 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b48e:	6a38      	ldr	r0, [r7, #32]
 800b490:	f000 f881 	bl	800b596 <prvIsQueueEmpty>
 800b494:	4603      	mov	r3, r0
 800b496:	2b00      	cmp	r3, #0
 800b498:	f43f af7b 	beq.w	800b392 <xQueueReceive+0x5e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800b49c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3728      	adds	r7, #40	; 0x28
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}

0800b4a6 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800b4a6:	b580      	push	{r7, lr}
 800b4a8:	b082      	sub	sp, #8
 800b4aa:	af00      	add	r7, sp, #0
 800b4ac:	6078      	str	r0, [r7, #4]
 800b4ae:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d018      	beq.n	800b4ea <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	68da      	ldr	r2, [r3, #12]
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4c0:	441a      	add	r2, r3
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	68da      	ldr	r2, [r3, #12]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	689b      	ldr	r3, [r3, #8]
 800b4ce:	429a      	cmp	r2, r3
 800b4d0:	d303      	bcc.n	800b4da <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681a      	ldr	r2, [r3, #0]
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	68d9      	ldr	r1, [r3, #12]
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	6838      	ldr	r0, [r7, #0]
 800b4e6:	f001 fee7 	bl	800d2b8 <memcpy>
    }
}
 800b4ea:	bf00      	nop
 800b4ec:	3708      	adds	r7, #8
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}

0800b4f2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b4f2:	b580      	push	{r7, lr}
 800b4f4:	b084      	sub	sp, #16
 800b4f6:	af00      	add	r7, sp, #0
 800b4f8:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800b4fa:	f001 fb61 	bl	800cbc0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b504:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800b506:	e011      	b.n	800b52c <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d012      	beq.n	800b536 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	3324      	adds	r3, #36	; 0x24
 800b514:	4618      	mov	r0, r3
 800b516:	f000 fdb7 	bl	800c088 <xTaskRemoveFromEventList>
 800b51a:	4603      	mov	r3, r0
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d001      	beq.n	800b524 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800b520:	f000 feec 	bl	800c2fc <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800b524:	7bfb      	ldrb	r3, [r7, #15]
 800b526:	3b01      	subs	r3, #1
 800b528:	b2db      	uxtb	r3, r3
 800b52a:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800b52c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b530:	2b00      	cmp	r3, #0
 800b532:	dce9      	bgt.n	800b508 <prvUnlockQueue+0x16>
 800b534:	e000      	b.n	800b538 <prvUnlockQueue+0x46>
                    break;
 800b536:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	22ff      	movs	r2, #255	; 0xff
 800b53c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800b540:	f001 fb50 	bl	800cbe4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800b544:	f001 fb3c 	bl	800cbc0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b54e:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800b550:	e011      	b.n	800b576 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	691b      	ldr	r3, [r3, #16]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d012      	beq.n	800b580 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	3310      	adds	r3, #16
 800b55e:	4618      	mov	r0, r3
 800b560:	f000 fd92 	bl	800c088 <xTaskRemoveFromEventList>
 800b564:	4603      	mov	r3, r0
 800b566:	2b00      	cmp	r3, #0
 800b568:	d001      	beq.n	800b56e <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800b56a:	f000 fec7 	bl	800c2fc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800b56e:	7bbb      	ldrb	r3, [r7, #14]
 800b570:	3b01      	subs	r3, #1
 800b572:	b2db      	uxtb	r3, r3
 800b574:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800b576:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	dce9      	bgt.n	800b552 <prvUnlockQueue+0x60>
 800b57e:	e000      	b.n	800b582 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800b580:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	22ff      	movs	r2, #255	; 0xff
 800b586:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800b58a:	f001 fb2b 	bl	800cbe4 <vPortExitCritical>
}
 800b58e:	bf00      	nop
 800b590:	3710      	adds	r7, #16
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}

0800b596 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800b596:	b580      	push	{r7, lr}
 800b598:	b084      	sub	sp, #16
 800b59a:	af00      	add	r7, sp, #0
 800b59c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800b59e:	f001 fb0f 	bl	800cbc0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d102      	bne.n	800b5b0 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	60fb      	str	r3, [r7, #12]
 800b5ae:	e001      	b.n	800b5b4 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800b5b4:	f001 fb16 	bl	800cbe4 <vPortExitCritical>

    return xReturn;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3710      	adds	r7, #16
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}
	...

0800b5c4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b084      	sub	sp, #16
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
 800b5cc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d102      	bne.n	800b5de <vQueueAddToRegistry+0x1a>
 800b5d8:	f001 fc2e 	bl	800ce38 <ulSetInterruptMask>
 800b5dc:	e7fe      	b.n	800b5dc <vQueueAddToRegistry+0x18>

        if( pcQueueName != NULL )
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d024      	beq.n	800b62e <vQueueAddToRegistry+0x6a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	60fb      	str	r3, [r7, #12]
 800b5e8:	e01e      	b.n	800b628 <vQueueAddToRegistry+0x64>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800b5ea:	4a17      	ldr	r2, [pc, #92]	; (800b648 <vQueueAddToRegistry+0x84>)
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	00db      	lsls	r3, r3, #3
 800b5f0:	4413      	add	r3, r2
 800b5f2:	685b      	ldr	r3, [r3, #4]
 800b5f4:	687a      	ldr	r2, [r7, #4]
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	d105      	bne.n	800b606 <vQueueAddToRegistry+0x42>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	00db      	lsls	r3, r3, #3
 800b5fe:	4a12      	ldr	r2, [pc, #72]	; (800b648 <vQueueAddToRegistry+0x84>)
 800b600:	4413      	add	r3, r2
 800b602:	60bb      	str	r3, [r7, #8]
                    break;
 800b604:	e013      	b.n	800b62e <vQueueAddToRegistry+0x6a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d10a      	bne.n	800b622 <vQueueAddToRegistry+0x5e>
 800b60c:	4a0e      	ldr	r2, [pc, #56]	; (800b648 <vQueueAddToRegistry+0x84>)
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d104      	bne.n	800b622 <vQueueAddToRegistry+0x5e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	00db      	lsls	r3, r3, #3
 800b61c:	4a0a      	ldr	r2, [pc, #40]	; (800b648 <vQueueAddToRegistry+0x84>)
 800b61e:	4413      	add	r3, r2
 800b620:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	3301      	adds	r3, #1
 800b626:	60fb      	str	r3, [r7, #12]
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	2b07      	cmp	r3, #7
 800b62c:	d9dd      	bls.n	800b5ea <vQueueAddToRegistry+0x26>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d005      	beq.n	800b640 <vQueueAddToRegistry+0x7c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	683a      	ldr	r2, [r7, #0]
 800b638:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	687a      	ldr	r2, [r7, #4]
 800b63e:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800b640:	bf00      	nop
 800b642:	3710      	adds	r7, #16
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}
 800b648:	20000bd0 	.word	0x20000bd0

0800b64c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b086      	sub	sp, #24
 800b650:	af00      	add	r7, sp, #0
 800b652:	60f8      	str	r0, [r7, #12]
 800b654:	60b9      	str	r1, [r7, #8]
 800b656:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800b65c:	f001 fab0 	bl	800cbc0 <vPortEnterCritical>
 800b660:	697b      	ldr	r3, [r7, #20]
 800b662:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b666:	b25b      	sxtb	r3, r3
 800b668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b66c:	d103      	bne.n	800b676 <vQueueWaitForMessageRestricted+0x2a>
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	2200      	movs	r2, #0
 800b672:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b67c:	b25b      	sxtb	r3, r3
 800b67e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b682:	d103      	bne.n	800b68c <vQueueWaitForMessageRestricted+0x40>
 800b684:	697b      	ldr	r3, [r7, #20]
 800b686:	2200      	movs	r2, #0
 800b688:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b68c:	f001 faaa 	bl	800cbe4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b690:	697b      	ldr	r3, [r7, #20]
 800b692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b694:	2b00      	cmp	r3, #0
 800b696:	d106      	bne.n	800b6a6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	3324      	adds	r3, #36	; 0x24
 800b69c:	687a      	ldr	r2, [r7, #4]
 800b69e:	68b9      	ldr	r1, [r7, #8]
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f000 fcb3 	bl	800c00c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800b6a6:	6978      	ldr	r0, [r7, #20]
 800b6a8:	f7ff ff23 	bl	800b4f2 <prvUnlockQueue>
    }
 800b6ac:	bf00      	nop
 800b6ae:	3718      	adds	r7, #24
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}

0800b6b4 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b08c      	sub	sp, #48	; 0x30
 800b6b8:	af04      	add	r7, sp, #16
 800b6ba:	60f8      	str	r0, [r7, #12]
 800b6bc:	60b9      	str	r1, [r7, #8]
 800b6be:	607a      	str	r2, [r7, #4]
 800b6c0:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 800b6c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d102      	bne.n	800b6ce <xTaskCreateStatic+0x1a>
 800b6c8:	f001 fbb6 	bl	800ce38 <ulSetInterruptMask>
 800b6cc:	e7fe      	b.n	800b6cc <xTaskCreateStatic+0x18>
        configASSERT( pxTaskBuffer != NULL );
 800b6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d102      	bne.n	800b6da <xTaskCreateStatic+0x26>
 800b6d4:	f001 fbb0 	bl	800ce38 <ulSetInterruptMask>
 800b6d8:	e7fe      	b.n	800b6d8 <xTaskCreateStatic+0x24>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 800b6da:	235c      	movs	r3, #92	; 0x5c
 800b6dc:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 800b6de:	697b      	ldr	r3, [r7, #20]
 800b6e0:	2b5c      	cmp	r3, #92	; 0x5c
 800b6e2:	d002      	beq.n	800b6ea <xTaskCreateStatic+0x36>
 800b6e4:	f001 fba8 	bl	800ce38 <ulSetInterruptMask>
 800b6e8:	e7fe      	b.n	800b6e8 <xTaskCreateStatic+0x34>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b6ea:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b6ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d023      	beq.n	800b73a <xTaskCreateStatic+0x86>
 800b6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d020      	beq.n	800b73a <xTaskCreateStatic+0x86>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b6f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6fa:	61fb      	str	r3, [r7, #28]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800b6fc:	225c      	movs	r2, #92	; 0x5c
 800b6fe:	2100      	movs	r1, #0
 800b700:	69f8      	ldr	r0, [r7, #28]
 800b702:	f001 fdad 	bl	800d260 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b706:	69fb      	ldr	r3, [r7, #28]
 800b708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b70a:	631a      	str	r2, [r3, #48]	; 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b70c:	69fb      	ldr	r3, [r7, #28]
 800b70e:	2202      	movs	r2, #2
 800b710:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b714:	2300      	movs	r3, #0
 800b716:	9303      	str	r3, [sp, #12]
 800b718:	69fb      	ldr	r3, [r7, #28]
 800b71a:	9302      	str	r3, [sp, #8]
 800b71c:	f107 0318 	add.w	r3, r7, #24
 800b720:	9301      	str	r3, [sp, #4]
 800b722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b724:	9300      	str	r3, [sp, #0]
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	687a      	ldr	r2, [r7, #4]
 800b72a:	68b9      	ldr	r1, [r7, #8]
 800b72c:	68f8      	ldr	r0, [r7, #12]
 800b72e:	f000 f855 	bl	800b7dc <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800b732:	69f8      	ldr	r0, [r7, #28]
 800b734:	f000 f8d2 	bl	800b8dc <prvAddNewTaskToReadyList>
 800b738:	e001      	b.n	800b73e <xTaskCreateStatic+0x8a>
        }
        else
        {
            xReturn = NULL;
 800b73a:	2300      	movs	r3, #0
 800b73c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800b73e:	69bb      	ldr	r3, [r7, #24]
    }
 800b740:	4618      	mov	r0, r3
 800b742:	3720      	adds	r7, #32
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}

0800b748 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800b748:	b580      	push	{r7, lr}
 800b74a:	b08c      	sub	sp, #48	; 0x30
 800b74c:	af04      	add	r7, sp, #16
 800b74e:	60f8      	str	r0, [r7, #12]
 800b750:	60b9      	str	r1, [r7, #8]
 800b752:	603b      	str	r3, [r7, #0]
 800b754:	4613      	mov	r3, r2
 800b756:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b758:	88fb      	ldrh	r3, [r7, #6]
 800b75a:	009b      	lsls	r3, r3, #2
 800b75c:	4618      	mov	r0, r3
 800b75e:	f001 fbd3 	bl	800cf08 <pvPortMalloc>
 800b762:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d013      	beq.n	800b792 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b76a:	205c      	movs	r0, #92	; 0x5c
 800b76c:	f001 fbcc 	bl	800cf08 <pvPortMalloc>
 800b770:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800b772:	69fb      	ldr	r3, [r7, #28]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d008      	beq.n	800b78a <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800b778:	225c      	movs	r2, #92	; 0x5c
 800b77a:	2100      	movs	r1, #0
 800b77c:	69f8      	ldr	r0, [r7, #28]
 800b77e:	f001 fd6f 	bl	800d260 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800b782:	69fb      	ldr	r3, [r7, #28]
 800b784:	697a      	ldr	r2, [r7, #20]
 800b786:	631a      	str	r2, [r3, #48]	; 0x30
 800b788:	e005      	b.n	800b796 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800b78a:	6978      	ldr	r0, [r7, #20]
 800b78c:	f001 fc66 	bl	800d05c <vPortFree>
 800b790:	e001      	b.n	800b796 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800b792:	2300      	movs	r3, #0
 800b794:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800b796:	69fb      	ldr	r3, [r7, #28]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d017      	beq.n	800b7cc <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b79c:	69fb      	ldr	r3, [r7, #28]
 800b79e:	2200      	movs	r2, #0
 800b7a0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b7a4:	88fa      	ldrh	r2, [r7, #6]
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	9303      	str	r3, [sp, #12]
 800b7aa:	69fb      	ldr	r3, [r7, #28]
 800b7ac:	9302      	str	r3, [sp, #8]
 800b7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7b0:	9301      	str	r3, [sp, #4]
 800b7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7b4:	9300      	str	r3, [sp, #0]
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	68b9      	ldr	r1, [r7, #8]
 800b7ba:	68f8      	ldr	r0, [r7, #12]
 800b7bc:	f000 f80e 	bl	800b7dc <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800b7c0:	69f8      	ldr	r0, [r7, #28]
 800b7c2:	f000 f88b 	bl	800b8dc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	61bb      	str	r3, [r7, #24]
 800b7ca:	e002      	b.n	800b7d2 <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b7cc:	f04f 33ff 	mov.w	r3, #4294967295
 800b7d0:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800b7d2:	69bb      	ldr	r3, [r7, #24]
    }
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	3720      	adds	r7, #32
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}

0800b7dc <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b086      	sub	sp, #24
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	60f8      	str	r0, [r7, #12]
 800b7e4:	60b9      	str	r1, [r7, #8]
 800b7e6:	607a      	str	r2, [r7, #4]
 800b7e8:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	009b      	lsls	r3, r3, #2
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	21a5      	movs	r1, #165	; 0xa5
 800b7f6:	f001 fd33 	bl	800d260 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b804:	3b01      	subs	r3, #1
 800b806:	009b      	lsls	r3, r3, #2
 800b808:	4413      	add	r3, r2
 800b80a:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b80c:	693b      	ldr	r3, [r7, #16]
 800b80e:	f023 0307 	bic.w	r3, r3, #7
 800b812:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b814:	693b      	ldr	r3, [r7, #16]
 800b816:	f003 0307 	and.w	r3, r3, #7
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d002      	beq.n	800b824 <prvInitialiseNewTask+0x48>
 800b81e:	f001 fb0b 	bl	800ce38 <ulSetInterruptMask>
 800b822:	e7fe      	b.n	800b822 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d01e      	beq.n	800b868 <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b82a:	2300      	movs	r3, #0
 800b82c:	617b      	str	r3, [r7, #20]
 800b82e:	e012      	b.n	800b856 <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b830:	68ba      	ldr	r2, [r7, #8]
 800b832:	697b      	ldr	r3, [r7, #20]
 800b834:	4413      	add	r3, r2
 800b836:	7819      	ldrb	r1, [r3, #0]
 800b838:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b83a:	697b      	ldr	r3, [r7, #20]
 800b83c:	4413      	add	r3, r2
 800b83e:	3334      	adds	r3, #52	; 0x34
 800b840:	460a      	mov	r2, r1
 800b842:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800b844:	68ba      	ldr	r2, [r7, #8]
 800b846:	697b      	ldr	r3, [r7, #20]
 800b848:	4413      	add	r3, r2
 800b84a:	781b      	ldrb	r3, [r3, #0]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d006      	beq.n	800b85e <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	3301      	adds	r3, #1
 800b854:	617b      	str	r3, [r7, #20]
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	2b0f      	cmp	r3, #15
 800b85a:	d9e9      	bls.n	800b830 <prvInitialiseNewTask+0x54>
 800b85c:	e000      	b.n	800b860 <prvInitialiseNewTask+0x84>
            {
                break;
 800b85e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b862:	2200      	movs	r2, #0
 800b864:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800b868:	6a3b      	ldr	r3, [r7, #32]
 800b86a:	2b37      	cmp	r3, #55	; 0x37
 800b86c:	d902      	bls.n	800b874 <prvInitialiseNewTask+0x98>
 800b86e:	f001 fae3 	bl	800ce38 <ulSetInterruptMask>
 800b872:	e7fe      	b.n	800b872 <prvInitialiseNewTask+0x96>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b874:	6a3b      	ldr	r3, [r7, #32]
 800b876:	2b37      	cmp	r3, #55	; 0x37
 800b878:	d901      	bls.n	800b87e <prvInitialiseNewTask+0xa2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b87a:	2337      	movs	r3, #55	; 0x37
 800b87c:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800b87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b880:	6a3a      	ldr	r2, [r7, #32]
 800b882:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800b884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b886:	6a3a      	ldr	r2, [r7, #32]
 800b888:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b88c:	3304      	adds	r3, #4
 800b88e:	4618      	mov	r0, r3
 800b890:	f7ff fc00 	bl	800b094 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b896:	3318      	adds	r3, #24
 800b898:	4618      	mov	r0, r3
 800b89a:	f7ff fbfb 	bl	800b094 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8a2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8a4:	6a3b      	ldr	r3, [r7, #32]
 800b8a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ac:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8b2:	625a      	str	r2, [r3, #36]	; 0x24
         * function as well. */
        #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
        {
            #if ( portSTACK_GROWTH < 0 )
            {
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 800b8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	68fa      	ldr	r2, [r7, #12]
 800b8bc:	6938      	ldr	r0, [r7, #16]
 800b8be:	f001 f9dd 	bl	800cc7c <pxPortInitialiseStack>
 800b8c2:	4602      	mov	r2, r0
 800b8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8c6:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800b8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d002      	beq.n	800b8d4 <prvInitialiseNewTask+0xf8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8d2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800b8d4:	bf00      	nop
 800b8d6:	3718      	adds	r7, #24
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}

0800b8dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b084      	sub	sp, #16
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800b8e4:	f001 f96c 	bl	800cbc0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800b8e8:	4b3e      	ldr	r3, [pc, #248]	; (800b9e4 <prvAddNewTaskToReadyList+0x108>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	3301      	adds	r3, #1
 800b8ee:	4a3d      	ldr	r2, [pc, #244]	; (800b9e4 <prvAddNewTaskToReadyList+0x108>)
 800b8f0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800b8f2:	4b3d      	ldr	r3, [pc, #244]	; (800b9e8 <prvAddNewTaskToReadyList+0x10c>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d109      	bne.n	800b90e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800b8fa:	4a3b      	ldr	r2, [pc, #236]	; (800b9e8 <prvAddNewTaskToReadyList+0x10c>)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b900:	4b38      	ldr	r3, [pc, #224]	; (800b9e4 <prvAddNewTaskToReadyList+0x108>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	2b01      	cmp	r3, #1
 800b906:	d110      	bne.n	800b92a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800b908:	f000 fd14 	bl	800c334 <prvInitialiseTaskLists>
 800b90c:	e00d      	b.n	800b92a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800b90e:	4b37      	ldr	r3, [pc, #220]	; (800b9ec <prvAddNewTaskToReadyList+0x110>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d109      	bne.n	800b92a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b916:	4b34      	ldr	r3, [pc, #208]	; (800b9e8 <prvAddNewTaskToReadyList+0x10c>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b920:	429a      	cmp	r2, r3
 800b922:	d802      	bhi.n	800b92a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800b924:	4a30      	ldr	r2, [pc, #192]	; (800b9e8 <prvAddNewTaskToReadyList+0x10c>)
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800b92a:	4b31      	ldr	r3, [pc, #196]	; (800b9f0 <prvAddNewTaskToReadyList+0x114>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	3301      	adds	r3, #1
 800b930:	4a2f      	ldr	r2, [pc, #188]	; (800b9f0 <prvAddNewTaskToReadyList+0x114>)
 800b932:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b934:	4b2e      	ldr	r3, [pc, #184]	; (800b9f0 <prvAddNewTaskToReadyList+0x114>)
 800b936:	681a      	ldr	r2, [r3, #0]
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	645a      	str	r2, [r3, #68]	; 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b940:	4b2c      	ldr	r3, [pc, #176]	; (800b9f4 <prvAddNewTaskToReadyList+0x118>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	429a      	cmp	r2, r3
 800b946:	d903      	bls.n	800b950 <prvAddNewTaskToReadyList+0x74>
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b94c:	4a29      	ldr	r2, [pc, #164]	; (800b9f4 <prvAddNewTaskToReadyList+0x118>)
 800b94e:	6013      	str	r3, [r2, #0]
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b954:	4928      	ldr	r1, [pc, #160]	; (800b9f8 <prvAddNewTaskToReadyList+0x11c>)
 800b956:	4613      	mov	r3, r2
 800b958:	009b      	lsls	r3, r3, #2
 800b95a:	4413      	add	r3, r2
 800b95c:	009b      	lsls	r3, r3, #2
 800b95e:	440b      	add	r3, r1
 800b960:	3304      	adds	r3, #4
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	60fb      	str	r3, [r7, #12]
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	68fa      	ldr	r2, [r7, #12]
 800b96a:	609a      	str	r2, [r3, #8]
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	689a      	ldr	r2, [r3, #8]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	60da      	str	r2, [r3, #12]
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	689b      	ldr	r3, [r3, #8]
 800b978:	687a      	ldr	r2, [r7, #4]
 800b97a:	3204      	adds	r2, #4
 800b97c:	605a      	str	r2, [r3, #4]
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	1d1a      	adds	r2, r3, #4
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	609a      	str	r2, [r3, #8]
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b98a:	4613      	mov	r3, r2
 800b98c:	009b      	lsls	r3, r3, #2
 800b98e:	4413      	add	r3, r2
 800b990:	009b      	lsls	r3, r3, #2
 800b992:	4a19      	ldr	r2, [pc, #100]	; (800b9f8 <prvAddNewTaskToReadyList+0x11c>)
 800b994:	441a      	add	r2, r3
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	615a      	str	r2, [r3, #20]
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b99e:	4916      	ldr	r1, [pc, #88]	; (800b9f8 <prvAddNewTaskToReadyList+0x11c>)
 800b9a0:	4613      	mov	r3, r2
 800b9a2:	009b      	lsls	r3, r3, #2
 800b9a4:	4413      	add	r3, r2
 800b9a6:	009b      	lsls	r3, r3, #2
 800b9a8:	440b      	add	r3, r1
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	1c59      	adds	r1, r3, #1
 800b9ae:	4812      	ldr	r0, [pc, #72]	; (800b9f8 <prvAddNewTaskToReadyList+0x11c>)
 800b9b0:	4613      	mov	r3, r2
 800b9b2:	009b      	lsls	r3, r3, #2
 800b9b4:	4413      	add	r3, r2
 800b9b6:	009b      	lsls	r3, r3, #2
 800b9b8:	4403      	add	r3, r0
 800b9ba:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800b9bc:	f001 f912 	bl	800cbe4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800b9c0:	4b0a      	ldr	r3, [pc, #40]	; (800b9ec <prvAddNewTaskToReadyList+0x110>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d008      	beq.n	800b9da <prvAddNewTaskToReadyList+0xfe>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b9c8:	4b07      	ldr	r3, [pc, #28]	; (800b9e8 <prvAddNewTaskToReadyList+0x10c>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	d201      	bcs.n	800b9da <prvAddNewTaskToReadyList+0xfe>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800b9d6:	f001 f8e1 	bl	800cb9c <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800b9da:	bf00      	nop
 800b9dc:	3710      	adds	r7, #16
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}
 800b9e2:	bf00      	nop
 800b9e4:	200010e4 	.word	0x200010e4
 800b9e8:	20000c10 	.word	0x20000c10
 800b9ec:	200010f0 	.word	0x200010f0
 800b9f0:	20001100 	.word	0x20001100
 800b9f4:	200010ec 	.word	0x200010ec
 800b9f8:	20000c14 	.word	0x20000c14

0800b9fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b084      	sub	sp, #16
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800ba04:	2300      	movs	r3, #0
 800ba06:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d00f      	beq.n	800ba2e <vTaskDelay+0x32>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800ba0e:	4b0c      	ldr	r3, [pc, #48]	; (800ba40 <vTaskDelay+0x44>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d002      	beq.n	800ba1c <vTaskDelay+0x20>
 800ba16:	f001 fa0f 	bl	800ce38 <ulSetInterruptMask>
 800ba1a:	e7fe      	b.n	800ba1a <vTaskDelay+0x1e>
            vTaskSuspendAll();
 800ba1c:	f000 f86c 	bl	800baf8 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ba20:	2100      	movs	r1, #0
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f000 fd56 	bl	800c4d4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800ba28:	f000 f874 	bl	800bb14 <xTaskResumeAll>
 800ba2c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d101      	bne.n	800ba38 <vTaskDelay+0x3c>
        {
            portYIELD_WITHIN_API();
 800ba34:	f001 f8b2 	bl	800cb9c <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800ba38:	bf00      	nop
 800ba3a:	3710      	adds	r7, #16
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}
 800ba40:	2000110c 	.word	0x2000110c

0800ba44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b088      	sub	sp, #32
 800ba48:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ba52:	463a      	mov	r2, r7
 800ba54:	1d39      	adds	r1, r7, #4
 800ba56:	f107 0308 	add.w	r3, r7, #8
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f7ff fac6 	bl	800afec <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 800ba60:	6839      	ldr	r1, [r7, #0]
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	68ba      	ldr	r2, [r7, #8]
 800ba66:	9202      	str	r2, [sp, #8]
 800ba68:	9301      	str	r3, [sp, #4]
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	9300      	str	r3, [sp, #0]
 800ba6e:	2300      	movs	r3, #0
 800ba70:	460a      	mov	r2, r1
 800ba72:	491a      	ldr	r1, [pc, #104]	; (800badc <vTaskStartScheduler+0x98>)
 800ba74:	481a      	ldr	r0, [pc, #104]	; (800bae0 <vTaskStartScheduler+0x9c>)
 800ba76:	f7ff fe1d 	bl	800b6b4 <xTaskCreateStatic>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	4a19      	ldr	r2, [pc, #100]	; (800bae4 <vTaskStartScheduler+0xa0>)
 800ba7e:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 800ba80:	4b18      	ldr	r3, [pc, #96]	; (800bae4 <vTaskStartScheduler+0xa0>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d002      	beq.n	800ba8e <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 800ba88:	2301      	movs	r3, #1
 800ba8a:	60fb      	str	r3, [r7, #12]
 800ba8c:	e001      	b.n	800ba92 <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	60fb      	str	r3, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	2b01      	cmp	r3, #1
 800ba96:	d102      	bne.n	800ba9e <vTaskStartScheduler+0x5a>
        {
            xReturn = xTimerCreateTimerTask();
 800ba98:	f000 fd8a 	bl	800c5b0 <xTimerCreateTimerTask>
 800ba9c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	2b01      	cmp	r3, #1
 800baa2:	d10e      	bne.n	800bac2 <vTaskStartScheduler+0x7e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 800baa4:	f001 f9c8 	bl	800ce38 <ulSetInterruptMask>
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800baa8:	4b0f      	ldr	r3, [pc, #60]	; (800bae8 <vTaskStartScheduler+0xa4>)
 800baaa:	f04f 32ff 	mov.w	r2, #4294967295
 800baae:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800bab0:	4b0e      	ldr	r3, [pc, #56]	; (800baec <vTaskStartScheduler+0xa8>)
 800bab2:	2201      	movs	r2, #1
 800bab4:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bab6:	4b0e      	ldr	r3, [pc, #56]	; (800baf0 <vTaskStartScheduler+0xac>)
 800bab8:	2200      	movs	r2, #0
 800baba:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800babc:	f001 f968 	bl	800cd90 <xPortStartScheduler>
 800bac0:	e006      	b.n	800bad0 <vTaskStartScheduler+0x8c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bac8:	d102      	bne.n	800bad0 <vTaskStartScheduler+0x8c>
 800baca:	f001 f9b5 	bl	800ce38 <ulSetInterruptMask>
 800bace:	e7fe      	b.n	800bace <vTaskStartScheduler+0x8a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800bad0:	4b08      	ldr	r3, [pc, #32]	; (800baf4 <vTaskStartScheduler+0xb0>)
 800bad2:	681b      	ldr	r3, [r3, #0]
}
 800bad4:	bf00      	nop
 800bad6:	3710      	adds	r7, #16
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}
 800badc:	0800d2f8 	.word	0x0800d2f8
 800bae0:	0800c315 	.word	0x0800c315
 800bae4:	20001108 	.word	0x20001108
 800bae8:	20001104 	.word	0x20001104
 800baec:	200010f0 	.word	0x200010f0
 800baf0:	200010e8 	.word	0x200010e8
 800baf4:	2000000c 	.word	0x2000000c

0800baf8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800baf8:	b480      	push	{r7}
 800bafa:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800bafc:	4b04      	ldr	r3, [pc, #16]	; (800bb10 <vTaskSuspendAll+0x18>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	3301      	adds	r3, #1
 800bb02:	4a03      	ldr	r2, [pc, #12]	; (800bb10 <vTaskSuspendAll+0x18>)
 800bb04:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800bb06:	bf00      	nop
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0e:	4770      	bx	lr
 800bb10:	2000110c 	.word	0x2000110c

0800bb14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b086      	sub	sp, #24
 800bb18:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800bb22:	4b6a      	ldr	r3, [pc, #424]	; (800bccc <xTaskResumeAll+0x1b8>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d102      	bne.n	800bb30 <xTaskResumeAll+0x1c>
 800bb2a:	f001 f985 	bl	800ce38 <ulSetInterruptMask>
 800bb2e:	e7fe      	b.n	800bb2e <xTaskResumeAll+0x1a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800bb30:	f001 f846 	bl	800cbc0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800bb34:	4b65      	ldr	r3, [pc, #404]	; (800bccc <xTaskResumeAll+0x1b8>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	3b01      	subs	r3, #1
 800bb3a:	4a64      	ldr	r2, [pc, #400]	; (800bccc <xTaskResumeAll+0x1b8>)
 800bb3c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb3e:	4b63      	ldr	r3, [pc, #396]	; (800bccc <xTaskResumeAll+0x1b8>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	f040 80bb 	bne.w	800bcbe <xTaskResumeAll+0x1aa>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bb48:	4b61      	ldr	r3, [pc, #388]	; (800bcd0 <xTaskResumeAll+0x1bc>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	f000 80b6 	beq.w	800bcbe <xTaskResumeAll+0x1aa>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bb52:	e08b      	b.n	800bc6c <xTaskResumeAll+0x158>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb54:	4b5f      	ldr	r3, [pc, #380]	; (800bcd4 <xTaskResumeAll+0x1c0>)
 800bb56:	68db      	ldr	r3, [r3, #12]
 800bb58:	68db      	ldr	r3, [r3, #12]
 800bb5a:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb60:	60bb      	str	r3, [r7, #8]
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	69db      	ldr	r3, [r3, #28]
 800bb66:	697a      	ldr	r2, [r7, #20]
 800bb68:	6a12      	ldr	r2, [r2, #32]
 800bb6a:	609a      	str	r2, [r3, #8]
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	6a1b      	ldr	r3, [r3, #32]
 800bb70:	697a      	ldr	r2, [r7, #20]
 800bb72:	69d2      	ldr	r2, [r2, #28]
 800bb74:	605a      	str	r2, [r3, #4]
 800bb76:	68bb      	ldr	r3, [r7, #8]
 800bb78:	685a      	ldr	r2, [r3, #4]
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	3318      	adds	r3, #24
 800bb7e:	429a      	cmp	r2, r3
 800bb80:	d103      	bne.n	800bb8a <xTaskResumeAll+0x76>
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	6a1a      	ldr	r2, [r3, #32]
 800bb86:	68bb      	ldr	r3, [r7, #8]
 800bb88:	605a      	str	r2, [r3, #4]
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	629a      	str	r2, [r3, #40]	; 0x28
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	1e5a      	subs	r2, r3, #1
 800bb96:	68bb      	ldr	r3, [r7, #8]
 800bb98:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	695b      	ldr	r3, [r3, #20]
 800bb9e:	607b      	str	r3, [r7, #4]
 800bba0:	697b      	ldr	r3, [r7, #20]
 800bba2:	689b      	ldr	r3, [r3, #8]
 800bba4:	697a      	ldr	r2, [r7, #20]
 800bba6:	68d2      	ldr	r2, [r2, #12]
 800bba8:	609a      	str	r2, [r3, #8]
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	68db      	ldr	r3, [r3, #12]
 800bbae:	697a      	ldr	r2, [r7, #20]
 800bbb0:	6892      	ldr	r2, [r2, #8]
 800bbb2:	605a      	str	r2, [r3, #4]
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	685a      	ldr	r2, [r3, #4]
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	3304      	adds	r3, #4
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	d103      	bne.n	800bbc8 <xTaskResumeAll+0xb4>
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	68da      	ldr	r2, [r3, #12]
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	605a      	str	r2, [r3, #4]
 800bbc8:	697b      	ldr	r3, [r7, #20]
 800bbca:	2200      	movs	r2, #0
 800bbcc:	615a      	str	r2, [r3, #20]
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	1e5a      	subs	r2, r3, #1
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800bbd8:	697b      	ldr	r3, [r7, #20]
 800bbda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbdc:	4b3e      	ldr	r3, [pc, #248]	; (800bcd8 <xTaskResumeAll+0x1c4>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d903      	bls.n	800bbec <xTaskResumeAll+0xd8>
 800bbe4:	697b      	ldr	r3, [r7, #20]
 800bbe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbe8:	4a3b      	ldr	r2, [pc, #236]	; (800bcd8 <xTaskResumeAll+0x1c4>)
 800bbea:	6013      	str	r3, [r2, #0]
 800bbec:	697b      	ldr	r3, [r7, #20]
 800bbee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbf0:	493a      	ldr	r1, [pc, #232]	; (800bcdc <xTaskResumeAll+0x1c8>)
 800bbf2:	4613      	mov	r3, r2
 800bbf4:	009b      	lsls	r3, r3, #2
 800bbf6:	4413      	add	r3, r2
 800bbf8:	009b      	lsls	r3, r3, #2
 800bbfa:	440b      	add	r3, r1
 800bbfc:	3304      	adds	r3, #4
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	603b      	str	r3, [r7, #0]
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	683a      	ldr	r2, [r7, #0]
 800bc06:	609a      	str	r2, [r3, #8]
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	689a      	ldr	r2, [r3, #8]
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	60da      	str	r2, [r3, #12]
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	689b      	ldr	r3, [r3, #8]
 800bc14:	697a      	ldr	r2, [r7, #20]
 800bc16:	3204      	adds	r2, #4
 800bc18:	605a      	str	r2, [r3, #4]
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	1d1a      	adds	r2, r3, #4
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	609a      	str	r2, [r3, #8]
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc26:	4613      	mov	r3, r2
 800bc28:	009b      	lsls	r3, r3, #2
 800bc2a:	4413      	add	r3, r2
 800bc2c:	009b      	lsls	r3, r3, #2
 800bc2e:	4a2b      	ldr	r2, [pc, #172]	; (800bcdc <xTaskResumeAll+0x1c8>)
 800bc30:	441a      	add	r2, r3
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	615a      	str	r2, [r3, #20]
 800bc36:	697b      	ldr	r3, [r7, #20]
 800bc38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc3a:	4928      	ldr	r1, [pc, #160]	; (800bcdc <xTaskResumeAll+0x1c8>)
 800bc3c:	4613      	mov	r3, r2
 800bc3e:	009b      	lsls	r3, r3, #2
 800bc40:	4413      	add	r3, r2
 800bc42:	009b      	lsls	r3, r3, #2
 800bc44:	440b      	add	r3, r1
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	1c59      	adds	r1, r3, #1
 800bc4a:	4824      	ldr	r0, [pc, #144]	; (800bcdc <xTaskResumeAll+0x1c8>)
 800bc4c:	4613      	mov	r3, r2
 800bc4e:	009b      	lsls	r3, r3, #2
 800bc50:	4413      	add	r3, r2
 800bc52:	009b      	lsls	r3, r3, #2
 800bc54:	4403      	add	r3, r0
 800bc56:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc5c:	4b20      	ldr	r3, [pc, #128]	; (800bce0 <xTaskResumeAll+0x1cc>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc62:	429a      	cmp	r2, r3
 800bc64:	d302      	bcc.n	800bc6c <xTaskResumeAll+0x158>
                    {
                        xYieldPending = pdTRUE;
 800bc66:	4b1f      	ldr	r3, [pc, #124]	; (800bce4 <xTaskResumeAll+0x1d0>)
 800bc68:	2201      	movs	r2, #1
 800bc6a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bc6c:	4b19      	ldr	r3, [pc, #100]	; (800bcd4 <xTaskResumeAll+0x1c0>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	f47f af6f 	bne.w	800bb54 <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d001      	beq.n	800bc80 <xTaskResumeAll+0x16c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800bc7c:	f000 fbf0 	bl	800c460 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bc80:	4b19      	ldr	r3, [pc, #100]	; (800bce8 <xTaskResumeAll+0x1d4>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d010      	beq.n	800bcae <xTaskResumeAll+0x19a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800bc8c:	f000 f83e 	bl	800bd0c <xTaskIncrementTick>
 800bc90:	4603      	mov	r3, r0
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d002      	beq.n	800bc9c <xTaskResumeAll+0x188>
                            {
                                xYieldPending = pdTRUE;
 800bc96:	4b13      	ldr	r3, [pc, #76]	; (800bce4 <xTaskResumeAll+0x1d0>)
 800bc98:	2201      	movs	r2, #1
 800bc9a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	3b01      	subs	r3, #1
 800bca0:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d1f1      	bne.n	800bc8c <xTaskResumeAll+0x178>

                        xPendedTicks = 0;
 800bca8:	4b0f      	ldr	r3, [pc, #60]	; (800bce8 <xTaskResumeAll+0x1d4>)
 800bcaa:	2200      	movs	r2, #0
 800bcac:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800bcae:	4b0d      	ldr	r3, [pc, #52]	; (800bce4 <xTaskResumeAll+0x1d0>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d003      	beq.n	800bcbe <xTaskResumeAll+0x1aa>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800bcba:	f000 ff6f 	bl	800cb9c <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800bcbe:	f000 ff91 	bl	800cbe4 <vPortExitCritical>

    return xAlreadyYielded;
 800bcc2:	693b      	ldr	r3, [r7, #16]
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	3718      	adds	r7, #24
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}
 800bccc:	2000110c 	.word	0x2000110c
 800bcd0:	200010e4 	.word	0x200010e4
 800bcd4:	200010a4 	.word	0x200010a4
 800bcd8:	200010ec 	.word	0x200010ec
 800bcdc:	20000c14 	.word	0x20000c14
 800bce0:	20000c10 	.word	0x20000c10
 800bce4:	200010f8 	.word	0x200010f8
 800bce8:	200010f4 	.word	0x200010f4

0800bcec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bcec:	b480      	push	{r7}
 800bcee:	b083      	sub	sp, #12
 800bcf0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800bcf2:	4b05      	ldr	r3, [pc, #20]	; (800bd08 <xTaskGetTickCount+0x1c>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800bcf8:	687b      	ldr	r3, [r7, #4]
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	370c      	adds	r7, #12
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd04:	4770      	bx	lr
 800bd06:	bf00      	nop
 800bd08:	200010e8 	.word	0x200010e8

0800bd0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b088      	sub	sp, #32
 800bd10:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800bd12:	2300      	movs	r3, #0
 800bd14:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd16:	4b7a      	ldr	r3, [pc, #488]	; (800bf00 <xTaskIncrementTick+0x1f4>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	f040 80e5 	bne.w	800beea <xTaskIncrementTick+0x1de>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bd20:	4b78      	ldr	r3, [pc, #480]	; (800bf04 <xTaskIncrementTick+0x1f8>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	3301      	adds	r3, #1
 800bd26:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800bd28:	4a76      	ldr	r2, [pc, #472]	; (800bf04 <xTaskIncrementTick+0x1f8>)
 800bd2a:	69bb      	ldr	r3, [r7, #24]
 800bd2c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bd2e:	69bb      	ldr	r3, [r7, #24]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d118      	bne.n	800bd66 <xTaskIncrementTick+0x5a>
        {
            taskSWITCH_DELAYED_LISTS();
 800bd34:	4b74      	ldr	r3, [pc, #464]	; (800bf08 <xTaskIncrementTick+0x1fc>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d002      	beq.n	800bd44 <xTaskIncrementTick+0x38>
 800bd3e:	f001 f87b 	bl	800ce38 <ulSetInterruptMask>
 800bd42:	e7fe      	b.n	800bd42 <xTaskIncrementTick+0x36>
 800bd44:	4b70      	ldr	r3, [pc, #448]	; (800bf08 <xTaskIncrementTick+0x1fc>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	617b      	str	r3, [r7, #20]
 800bd4a:	4b70      	ldr	r3, [pc, #448]	; (800bf0c <xTaskIncrementTick+0x200>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	4a6e      	ldr	r2, [pc, #440]	; (800bf08 <xTaskIncrementTick+0x1fc>)
 800bd50:	6013      	str	r3, [r2, #0]
 800bd52:	4a6e      	ldr	r2, [pc, #440]	; (800bf0c <xTaskIncrementTick+0x200>)
 800bd54:	697b      	ldr	r3, [r7, #20]
 800bd56:	6013      	str	r3, [r2, #0]
 800bd58:	4b6d      	ldr	r3, [pc, #436]	; (800bf10 <xTaskIncrementTick+0x204>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	3301      	adds	r3, #1
 800bd5e:	4a6c      	ldr	r2, [pc, #432]	; (800bf10 <xTaskIncrementTick+0x204>)
 800bd60:	6013      	str	r3, [r2, #0]
 800bd62:	f000 fb7d 	bl	800c460 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800bd66:	4b6b      	ldr	r3, [pc, #428]	; (800bf14 <xTaskIncrementTick+0x208>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	69ba      	ldr	r2, [r7, #24]
 800bd6c:	429a      	cmp	r2, r3
 800bd6e:	f0c0 80a7 	bcc.w	800bec0 <xTaskIncrementTick+0x1b4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd72:	4b65      	ldr	r3, [pc, #404]	; (800bf08 <xTaskIncrementTick+0x1fc>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d104      	bne.n	800bd86 <xTaskIncrementTick+0x7a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd7c:	4b65      	ldr	r3, [pc, #404]	; (800bf14 <xTaskIncrementTick+0x208>)
 800bd7e:	f04f 32ff 	mov.w	r2, #4294967295
 800bd82:	601a      	str	r2, [r3, #0]
                    break;
 800bd84:	e09c      	b.n	800bec0 <xTaskIncrementTick+0x1b4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd86:	4b60      	ldr	r3, [pc, #384]	; (800bf08 <xTaskIncrementTick+0x1fc>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	68db      	ldr	r3, [r3, #12]
 800bd8c:	68db      	ldr	r3, [r3, #12]
 800bd8e:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	685b      	ldr	r3, [r3, #4]
 800bd94:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800bd96:	69ba      	ldr	r2, [r7, #24]
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	429a      	cmp	r2, r3
 800bd9c:	d203      	bcs.n	800bda6 <xTaskIncrementTick+0x9a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800bd9e:	4a5d      	ldr	r2, [pc, #372]	; (800bf14 <xTaskIncrementTick+0x208>)
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800bda4:	e08c      	b.n	800bec0 <xTaskIncrementTick+0x1b4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800bda6:	693b      	ldr	r3, [r7, #16]
 800bda8:	695b      	ldr	r3, [r3, #20]
 800bdaa:	60bb      	str	r3, [r7, #8]
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	689b      	ldr	r3, [r3, #8]
 800bdb0:	693a      	ldr	r2, [r7, #16]
 800bdb2:	68d2      	ldr	r2, [r2, #12]
 800bdb4:	609a      	str	r2, [r3, #8]
 800bdb6:	693b      	ldr	r3, [r7, #16]
 800bdb8:	68db      	ldr	r3, [r3, #12]
 800bdba:	693a      	ldr	r2, [r7, #16]
 800bdbc:	6892      	ldr	r2, [r2, #8]
 800bdbe:	605a      	str	r2, [r3, #4]
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	685a      	ldr	r2, [r3, #4]
 800bdc4:	693b      	ldr	r3, [r7, #16]
 800bdc6:	3304      	adds	r3, #4
 800bdc8:	429a      	cmp	r2, r3
 800bdca:	d103      	bne.n	800bdd4 <xTaskIncrementTick+0xc8>
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	68da      	ldr	r2, [r3, #12]
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	605a      	str	r2, [r3, #4]
 800bdd4:	693b      	ldr	r3, [r7, #16]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	615a      	str	r2, [r3, #20]
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	1e5a      	subs	r2, r3, #1
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bde4:	693b      	ldr	r3, [r7, #16]
 800bde6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d01e      	beq.n	800be2a <xTaskIncrementTick+0x11e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdf0:	607b      	str	r3, [r7, #4]
 800bdf2:	693b      	ldr	r3, [r7, #16]
 800bdf4:	69db      	ldr	r3, [r3, #28]
 800bdf6:	693a      	ldr	r2, [r7, #16]
 800bdf8:	6a12      	ldr	r2, [r2, #32]
 800bdfa:	609a      	str	r2, [r3, #8]
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	6a1b      	ldr	r3, [r3, #32]
 800be00:	693a      	ldr	r2, [r7, #16]
 800be02:	69d2      	ldr	r2, [r2, #28]
 800be04:	605a      	str	r2, [r3, #4]
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	685a      	ldr	r2, [r3, #4]
 800be0a:	693b      	ldr	r3, [r7, #16]
 800be0c:	3318      	adds	r3, #24
 800be0e:	429a      	cmp	r2, r3
 800be10:	d103      	bne.n	800be1a <xTaskIncrementTick+0x10e>
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	6a1a      	ldr	r2, [r3, #32]
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	605a      	str	r2, [r3, #4]
 800be1a:	693b      	ldr	r3, [r7, #16]
 800be1c:	2200      	movs	r2, #0
 800be1e:	629a      	str	r2, [r3, #40]	; 0x28
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	1e5a      	subs	r2, r3, #1
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be2e:	4b3a      	ldr	r3, [pc, #232]	; (800bf18 <xTaskIncrementTick+0x20c>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	429a      	cmp	r2, r3
 800be34:	d903      	bls.n	800be3e <xTaskIncrementTick+0x132>
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be3a:	4a37      	ldr	r2, [pc, #220]	; (800bf18 <xTaskIncrementTick+0x20c>)
 800be3c:	6013      	str	r3, [r2, #0]
 800be3e:	693b      	ldr	r3, [r7, #16]
 800be40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be42:	4936      	ldr	r1, [pc, #216]	; (800bf1c <xTaskIncrementTick+0x210>)
 800be44:	4613      	mov	r3, r2
 800be46:	009b      	lsls	r3, r3, #2
 800be48:	4413      	add	r3, r2
 800be4a:	009b      	lsls	r3, r3, #2
 800be4c:	440b      	add	r3, r1
 800be4e:	3304      	adds	r3, #4
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	603b      	str	r3, [r7, #0]
 800be54:	693b      	ldr	r3, [r7, #16]
 800be56:	683a      	ldr	r2, [r7, #0]
 800be58:	609a      	str	r2, [r3, #8]
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	689a      	ldr	r2, [r3, #8]
 800be5e:	693b      	ldr	r3, [r7, #16]
 800be60:	60da      	str	r2, [r3, #12]
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	689b      	ldr	r3, [r3, #8]
 800be66:	693a      	ldr	r2, [r7, #16]
 800be68:	3204      	adds	r2, #4
 800be6a:	605a      	str	r2, [r3, #4]
 800be6c:	693b      	ldr	r3, [r7, #16]
 800be6e:	1d1a      	adds	r2, r3, #4
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	609a      	str	r2, [r3, #8]
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be78:	4613      	mov	r3, r2
 800be7a:	009b      	lsls	r3, r3, #2
 800be7c:	4413      	add	r3, r2
 800be7e:	009b      	lsls	r3, r3, #2
 800be80:	4a26      	ldr	r2, [pc, #152]	; (800bf1c <xTaskIncrementTick+0x210>)
 800be82:	441a      	add	r2, r3
 800be84:	693b      	ldr	r3, [r7, #16]
 800be86:	615a      	str	r2, [r3, #20]
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be8c:	4923      	ldr	r1, [pc, #140]	; (800bf1c <xTaskIncrementTick+0x210>)
 800be8e:	4613      	mov	r3, r2
 800be90:	009b      	lsls	r3, r3, #2
 800be92:	4413      	add	r3, r2
 800be94:	009b      	lsls	r3, r3, #2
 800be96:	440b      	add	r3, r1
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	1c59      	adds	r1, r3, #1
 800be9c:	481f      	ldr	r0, [pc, #124]	; (800bf1c <xTaskIncrementTick+0x210>)
 800be9e:	4613      	mov	r3, r2
 800bea0:	009b      	lsls	r3, r3, #2
 800bea2:	4413      	add	r3, r2
 800bea4:	009b      	lsls	r3, r3, #2
 800bea6:	4403      	add	r3, r0
 800bea8:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800beaa:	693b      	ldr	r3, [r7, #16]
 800beac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800beae:	4b1c      	ldr	r3, [pc, #112]	; (800bf20 <xTaskIncrementTick+0x214>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beb4:	429a      	cmp	r2, r3
 800beb6:	f67f af5c 	bls.w	800bd72 <xTaskIncrementTick+0x66>
                        {
                            xSwitchRequired = pdTRUE;
 800beba:	2301      	movs	r3, #1
 800bebc:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bebe:	e758      	b.n	800bd72 <xTaskIncrementTick+0x66>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bec0:	4b17      	ldr	r3, [pc, #92]	; (800bf20 <xTaskIncrementTick+0x214>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bec6:	4915      	ldr	r1, [pc, #84]	; (800bf1c <xTaskIncrementTick+0x210>)
 800bec8:	4613      	mov	r3, r2
 800beca:	009b      	lsls	r3, r3, #2
 800becc:	4413      	add	r3, r2
 800bece:	009b      	lsls	r3, r3, #2
 800bed0:	440b      	add	r3, r1
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	2b01      	cmp	r3, #1
 800bed6:	d901      	bls.n	800bedc <xTaskIncrementTick+0x1d0>
            {
                xSwitchRequired = pdTRUE;
 800bed8:	2301      	movs	r3, #1
 800beda:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800bedc:	4b11      	ldr	r3, [pc, #68]	; (800bf24 <xTaskIncrementTick+0x218>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d007      	beq.n	800bef4 <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 800bee4:	2301      	movs	r3, #1
 800bee6:	61fb      	str	r3, [r7, #28]
 800bee8:	e004      	b.n	800bef4 <xTaskIncrementTick+0x1e8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800beea:	4b0f      	ldr	r3, [pc, #60]	; (800bf28 <xTaskIncrementTick+0x21c>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	3301      	adds	r3, #1
 800bef0:	4a0d      	ldr	r2, [pc, #52]	; (800bf28 <xTaskIncrementTick+0x21c>)
 800bef2:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800bef4:	69fb      	ldr	r3, [r7, #28]
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3720      	adds	r7, #32
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}
 800befe:	bf00      	nop
 800bf00:	2000110c 	.word	0x2000110c
 800bf04:	200010e8 	.word	0x200010e8
 800bf08:	2000109c 	.word	0x2000109c
 800bf0c:	200010a0 	.word	0x200010a0
 800bf10:	200010fc 	.word	0x200010fc
 800bf14:	20001104 	.word	0x20001104
 800bf18:	200010ec 	.word	0x200010ec
 800bf1c:	20000c14 	.word	0x20000c14
 800bf20:	20000c10 	.word	0x20000c10
 800bf24:	200010f8 	.word	0x200010f8
 800bf28:	200010f4 	.word	0x200010f4

0800bf2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b082      	sub	sp, #8
 800bf30:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bf32:	4b23      	ldr	r3, [pc, #140]	; (800bfc0 <vTaskSwitchContext+0x94>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d003      	beq.n	800bf42 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800bf3a:	4b22      	ldr	r3, [pc, #136]	; (800bfc4 <vTaskSwitchContext+0x98>)
 800bf3c:	2201      	movs	r2, #1
 800bf3e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800bf40:	e039      	b.n	800bfb6 <vTaskSwitchContext+0x8a>
        xYieldPending = pdFALSE;
 800bf42:	4b20      	ldr	r3, [pc, #128]	; (800bfc4 <vTaskSwitchContext+0x98>)
 800bf44:	2200      	movs	r2, #0
 800bf46:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf48:	4b1f      	ldr	r3, [pc, #124]	; (800bfc8 <vTaskSwitchContext+0x9c>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	607b      	str	r3, [r7, #4]
 800bf4e:	e008      	b.n	800bf62 <vTaskSwitchContext+0x36>
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d102      	bne.n	800bf5c <vTaskSwitchContext+0x30>
 800bf56:	f000 ff6f 	bl	800ce38 <ulSetInterruptMask>
 800bf5a:	e7fe      	b.n	800bf5a <vTaskSwitchContext+0x2e>
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	3b01      	subs	r3, #1
 800bf60:	607b      	str	r3, [r7, #4]
 800bf62:	491a      	ldr	r1, [pc, #104]	; (800bfcc <vTaskSwitchContext+0xa0>)
 800bf64:	687a      	ldr	r2, [r7, #4]
 800bf66:	4613      	mov	r3, r2
 800bf68:	009b      	lsls	r3, r3, #2
 800bf6a:	4413      	add	r3, r2
 800bf6c:	009b      	lsls	r3, r3, #2
 800bf6e:	440b      	add	r3, r1
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d0ec      	beq.n	800bf50 <vTaskSwitchContext+0x24>
 800bf76:	687a      	ldr	r2, [r7, #4]
 800bf78:	4613      	mov	r3, r2
 800bf7a:	009b      	lsls	r3, r3, #2
 800bf7c:	4413      	add	r3, r2
 800bf7e:	009b      	lsls	r3, r3, #2
 800bf80:	4a12      	ldr	r2, [pc, #72]	; (800bfcc <vTaskSwitchContext+0xa0>)
 800bf82:	4413      	add	r3, r2
 800bf84:	603b      	str	r3, [r7, #0]
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	685b      	ldr	r3, [r3, #4]
 800bf8a:	685a      	ldr	r2, [r3, #4]
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	605a      	str	r2, [r3, #4]
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	685a      	ldr	r2, [r3, #4]
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	3308      	adds	r3, #8
 800bf98:	429a      	cmp	r2, r3
 800bf9a:	d104      	bne.n	800bfa6 <vTaskSwitchContext+0x7a>
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	685b      	ldr	r3, [r3, #4]
 800bfa0:	685a      	ldr	r2, [r3, #4]
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	605a      	str	r2, [r3, #4]
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	685b      	ldr	r3, [r3, #4]
 800bfaa:	68db      	ldr	r3, [r3, #12]
 800bfac:	4a08      	ldr	r2, [pc, #32]	; (800bfd0 <vTaskSwitchContext+0xa4>)
 800bfae:	6013      	str	r3, [r2, #0]
 800bfb0:	4a05      	ldr	r2, [pc, #20]	; (800bfc8 <vTaskSwitchContext+0x9c>)
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6013      	str	r3, [r2, #0]
}
 800bfb6:	bf00      	nop
 800bfb8:	3708      	adds	r7, #8
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bd80      	pop	{r7, pc}
 800bfbe:	bf00      	nop
 800bfc0:	2000110c 	.word	0x2000110c
 800bfc4:	200010f8 	.word	0x200010f8
 800bfc8:	200010ec 	.word	0x200010ec
 800bfcc:	20000c14 	.word	0x20000c14
 800bfd0:	20000c10 	.word	0x20000c10

0800bfd4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b082      	sub	sp, #8
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
 800bfdc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d102      	bne.n	800bfea <vTaskPlaceOnEventList+0x16>
 800bfe4:	f000 ff28 	bl	800ce38 <ulSetInterruptMask>
 800bfe8:	e7fe      	b.n	800bfe8 <vTaskPlaceOnEventList+0x14>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bfea:	4b07      	ldr	r3, [pc, #28]	; (800c008 <vTaskPlaceOnEventList+0x34>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	3318      	adds	r3, #24
 800bff0:	4619      	mov	r1, r3
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f7ff f85b 	bl	800b0ae <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bff8:	2101      	movs	r1, #1
 800bffa:	6838      	ldr	r0, [r7, #0]
 800bffc:	f000 fa6a 	bl	800c4d4 <prvAddCurrentTaskToDelayedList>
}
 800c000:	bf00      	nop
 800c002:	3708      	adds	r7, #8
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}
 800c008:	20000c10 	.word	0x20000c10

0800c00c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b086      	sub	sp, #24
 800c010:	af00      	add	r7, sp, #0
 800c012:	60f8      	str	r0, [r7, #12]
 800c014:	60b9      	str	r1, [r7, #8]
 800c016:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d102      	bne.n	800c024 <vTaskPlaceOnEventListRestricted+0x18>
 800c01e:	f000 ff0b 	bl	800ce38 <ulSetInterruptMask>
 800c022:	e7fe      	b.n	800c022 <vTaskPlaceOnEventListRestricted+0x16>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	685b      	ldr	r3, [r3, #4]
 800c028:	617b      	str	r3, [r7, #20]
 800c02a:	4b16      	ldr	r3, [pc, #88]	; (800c084 <vTaskPlaceOnEventListRestricted+0x78>)
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	697a      	ldr	r2, [r7, #20]
 800c030:	61da      	str	r2, [r3, #28]
 800c032:	4b14      	ldr	r3, [pc, #80]	; (800c084 <vTaskPlaceOnEventListRestricted+0x78>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	697a      	ldr	r2, [r7, #20]
 800c038:	6892      	ldr	r2, [r2, #8]
 800c03a:	621a      	str	r2, [r3, #32]
 800c03c:	4b11      	ldr	r3, [pc, #68]	; (800c084 <vTaskPlaceOnEventListRestricted+0x78>)
 800c03e:	681a      	ldr	r2, [r3, #0]
 800c040:	697b      	ldr	r3, [r7, #20]
 800c042:	689b      	ldr	r3, [r3, #8]
 800c044:	3218      	adds	r2, #24
 800c046:	605a      	str	r2, [r3, #4]
 800c048:	4b0e      	ldr	r3, [pc, #56]	; (800c084 <vTaskPlaceOnEventListRestricted+0x78>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	f103 0218 	add.w	r2, r3, #24
 800c050:	697b      	ldr	r3, [r7, #20]
 800c052:	609a      	str	r2, [r3, #8]
 800c054:	4b0b      	ldr	r3, [pc, #44]	; (800c084 <vTaskPlaceOnEventListRestricted+0x78>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	68fa      	ldr	r2, [r7, #12]
 800c05a:	629a      	str	r2, [r3, #40]	; 0x28
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	1c5a      	adds	r2, r3, #1
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d002      	beq.n	800c072 <vTaskPlaceOnEventListRestricted+0x66>
        {
            xTicksToWait = portMAX_DELAY;
 800c06c:	f04f 33ff 	mov.w	r3, #4294967295
 800c070:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c072:	6879      	ldr	r1, [r7, #4]
 800c074:	68b8      	ldr	r0, [r7, #8]
 800c076:	f000 fa2d 	bl	800c4d4 <prvAddCurrentTaskToDelayedList>
    }
 800c07a:	bf00      	nop
 800c07c:	3718      	adds	r7, #24
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}
 800c082:	bf00      	nop
 800c084:	20000c10 	.word	0x20000c10

0800c088 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b088      	sub	sp, #32
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	68db      	ldr	r3, [r3, #12]
 800c094:	68db      	ldr	r3, [r3, #12]
 800c096:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 800c098:	69bb      	ldr	r3, [r7, #24]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d102      	bne.n	800c0a4 <xTaskRemoveFromEventList+0x1c>
 800c09e:	f000 fecb 	bl	800ce38 <ulSetInterruptMask>
 800c0a2:	e7fe      	b.n	800c0a2 <xTaskRemoveFromEventList+0x1a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800c0a4:	69bb      	ldr	r3, [r7, #24]
 800c0a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0a8:	617b      	str	r3, [r7, #20]
 800c0aa:	69bb      	ldr	r3, [r7, #24]
 800c0ac:	69db      	ldr	r3, [r3, #28]
 800c0ae:	69ba      	ldr	r2, [r7, #24]
 800c0b0:	6a12      	ldr	r2, [r2, #32]
 800c0b2:	609a      	str	r2, [r3, #8]
 800c0b4:	69bb      	ldr	r3, [r7, #24]
 800c0b6:	6a1b      	ldr	r3, [r3, #32]
 800c0b8:	69ba      	ldr	r2, [r7, #24]
 800c0ba:	69d2      	ldr	r2, [r2, #28]
 800c0bc:	605a      	str	r2, [r3, #4]
 800c0be:	697b      	ldr	r3, [r7, #20]
 800c0c0:	685a      	ldr	r2, [r3, #4]
 800c0c2:	69bb      	ldr	r3, [r7, #24]
 800c0c4:	3318      	adds	r3, #24
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	d103      	bne.n	800c0d2 <xTaskRemoveFromEventList+0x4a>
 800c0ca:	69bb      	ldr	r3, [r7, #24]
 800c0cc:	6a1a      	ldr	r2, [r3, #32]
 800c0ce:	697b      	ldr	r3, [r7, #20]
 800c0d0:	605a      	str	r2, [r3, #4]
 800c0d2:	69bb      	ldr	r3, [r7, #24]
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	629a      	str	r2, [r3, #40]	; 0x28
 800c0d8:	697b      	ldr	r3, [r7, #20]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	1e5a      	subs	r2, r3, #1
 800c0de:	697b      	ldr	r3, [r7, #20]
 800c0e0:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0e2:	4b4a      	ldr	r3, [pc, #296]	; (800c20c <xTaskRemoveFromEventList+0x184>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d15f      	bne.n	800c1aa <xTaskRemoveFromEventList+0x122>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800c0ea:	69bb      	ldr	r3, [r7, #24]
 800c0ec:	695b      	ldr	r3, [r3, #20]
 800c0ee:	60fb      	str	r3, [r7, #12]
 800c0f0:	69bb      	ldr	r3, [r7, #24]
 800c0f2:	689b      	ldr	r3, [r3, #8]
 800c0f4:	69ba      	ldr	r2, [r7, #24]
 800c0f6:	68d2      	ldr	r2, [r2, #12]
 800c0f8:	609a      	str	r2, [r3, #8]
 800c0fa:	69bb      	ldr	r3, [r7, #24]
 800c0fc:	68db      	ldr	r3, [r3, #12]
 800c0fe:	69ba      	ldr	r2, [r7, #24]
 800c100:	6892      	ldr	r2, [r2, #8]
 800c102:	605a      	str	r2, [r3, #4]
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	685a      	ldr	r2, [r3, #4]
 800c108:	69bb      	ldr	r3, [r7, #24]
 800c10a:	3304      	adds	r3, #4
 800c10c:	429a      	cmp	r2, r3
 800c10e:	d103      	bne.n	800c118 <xTaskRemoveFromEventList+0x90>
 800c110:	69bb      	ldr	r3, [r7, #24]
 800c112:	68da      	ldr	r2, [r3, #12]
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	605a      	str	r2, [r3, #4]
 800c118:	69bb      	ldr	r3, [r7, #24]
 800c11a:	2200      	movs	r2, #0
 800c11c:	615a      	str	r2, [r3, #20]
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	1e5a      	subs	r2, r3, #1
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800c128:	69bb      	ldr	r3, [r7, #24]
 800c12a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c12c:	4b38      	ldr	r3, [pc, #224]	; (800c210 <xTaskRemoveFromEventList+0x188>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	429a      	cmp	r2, r3
 800c132:	d903      	bls.n	800c13c <xTaskRemoveFromEventList+0xb4>
 800c134:	69bb      	ldr	r3, [r7, #24]
 800c136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c138:	4a35      	ldr	r2, [pc, #212]	; (800c210 <xTaskRemoveFromEventList+0x188>)
 800c13a:	6013      	str	r3, [r2, #0]
 800c13c:	69bb      	ldr	r3, [r7, #24]
 800c13e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c140:	4934      	ldr	r1, [pc, #208]	; (800c214 <xTaskRemoveFromEventList+0x18c>)
 800c142:	4613      	mov	r3, r2
 800c144:	009b      	lsls	r3, r3, #2
 800c146:	4413      	add	r3, r2
 800c148:	009b      	lsls	r3, r3, #2
 800c14a:	440b      	add	r3, r1
 800c14c:	3304      	adds	r3, #4
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	60bb      	str	r3, [r7, #8]
 800c152:	69bb      	ldr	r3, [r7, #24]
 800c154:	68ba      	ldr	r2, [r7, #8]
 800c156:	609a      	str	r2, [r3, #8]
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	689a      	ldr	r2, [r3, #8]
 800c15c:	69bb      	ldr	r3, [r7, #24]
 800c15e:	60da      	str	r2, [r3, #12]
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	689b      	ldr	r3, [r3, #8]
 800c164:	69ba      	ldr	r2, [r7, #24]
 800c166:	3204      	adds	r2, #4
 800c168:	605a      	str	r2, [r3, #4]
 800c16a:	69bb      	ldr	r3, [r7, #24]
 800c16c:	1d1a      	adds	r2, r3, #4
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	609a      	str	r2, [r3, #8]
 800c172:	69bb      	ldr	r3, [r7, #24]
 800c174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c176:	4613      	mov	r3, r2
 800c178:	009b      	lsls	r3, r3, #2
 800c17a:	4413      	add	r3, r2
 800c17c:	009b      	lsls	r3, r3, #2
 800c17e:	4a25      	ldr	r2, [pc, #148]	; (800c214 <xTaskRemoveFromEventList+0x18c>)
 800c180:	441a      	add	r2, r3
 800c182:	69bb      	ldr	r3, [r7, #24]
 800c184:	615a      	str	r2, [r3, #20]
 800c186:	69bb      	ldr	r3, [r7, #24]
 800c188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c18a:	4922      	ldr	r1, [pc, #136]	; (800c214 <xTaskRemoveFromEventList+0x18c>)
 800c18c:	4613      	mov	r3, r2
 800c18e:	009b      	lsls	r3, r3, #2
 800c190:	4413      	add	r3, r2
 800c192:	009b      	lsls	r3, r3, #2
 800c194:	440b      	add	r3, r1
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	1c59      	adds	r1, r3, #1
 800c19a:	481e      	ldr	r0, [pc, #120]	; (800c214 <xTaskRemoveFromEventList+0x18c>)
 800c19c:	4613      	mov	r3, r2
 800c19e:	009b      	lsls	r3, r3, #2
 800c1a0:	4413      	add	r3, r2
 800c1a2:	009b      	lsls	r3, r3, #2
 800c1a4:	4403      	add	r3, r0
 800c1a6:	6019      	str	r1, [r3, #0]
 800c1a8:	e01b      	b.n	800c1e2 <xTaskRemoveFromEventList+0x15a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c1aa:	4b1b      	ldr	r3, [pc, #108]	; (800c218 <xTaskRemoveFromEventList+0x190>)
 800c1ac:	685b      	ldr	r3, [r3, #4]
 800c1ae:	613b      	str	r3, [r7, #16]
 800c1b0:	69bb      	ldr	r3, [r7, #24]
 800c1b2:	693a      	ldr	r2, [r7, #16]
 800c1b4:	61da      	str	r2, [r3, #28]
 800c1b6:	693b      	ldr	r3, [r7, #16]
 800c1b8:	689a      	ldr	r2, [r3, #8]
 800c1ba:	69bb      	ldr	r3, [r7, #24]
 800c1bc:	621a      	str	r2, [r3, #32]
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	689b      	ldr	r3, [r3, #8]
 800c1c2:	69ba      	ldr	r2, [r7, #24]
 800c1c4:	3218      	adds	r2, #24
 800c1c6:	605a      	str	r2, [r3, #4]
 800c1c8:	69bb      	ldr	r3, [r7, #24]
 800c1ca:	f103 0218 	add.w	r2, r3, #24
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	609a      	str	r2, [r3, #8]
 800c1d2:	69bb      	ldr	r3, [r7, #24]
 800c1d4:	4a10      	ldr	r2, [pc, #64]	; (800c218 <xTaskRemoveFromEventList+0x190>)
 800c1d6:	629a      	str	r2, [r3, #40]	; 0x28
 800c1d8:	4b0f      	ldr	r3, [pc, #60]	; (800c218 <xTaskRemoveFromEventList+0x190>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	3301      	adds	r3, #1
 800c1de:	4a0e      	ldr	r2, [pc, #56]	; (800c218 <xTaskRemoveFromEventList+0x190>)
 800c1e0:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c1e2:	69bb      	ldr	r3, [r7, #24]
 800c1e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1e6:	4b0d      	ldr	r3, [pc, #52]	; (800c21c <xTaskRemoveFromEventList+0x194>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ec:	429a      	cmp	r2, r3
 800c1ee:	d905      	bls.n	800c1fc <xTaskRemoveFromEventList+0x174>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800c1f4:	4b0a      	ldr	r3, [pc, #40]	; (800c220 <xTaskRemoveFromEventList+0x198>)
 800c1f6:	2201      	movs	r2, #1
 800c1f8:	601a      	str	r2, [r3, #0]
 800c1fa:	e001      	b.n	800c200 <xTaskRemoveFromEventList+0x178>
    }
    else
    {
        xReturn = pdFALSE;
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800c200:	69fb      	ldr	r3, [r7, #28]
}
 800c202:	4618      	mov	r0, r3
 800c204:	3720      	adds	r7, #32
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}
 800c20a:	bf00      	nop
 800c20c:	2000110c 	.word	0x2000110c
 800c210:	200010ec 	.word	0x200010ec
 800c214:	20000c14 	.word	0x20000c14
 800c218:	200010a4 	.word	0x200010a4
 800c21c:	20000c10 	.word	0x20000c10
 800c220:	200010f8 	.word	0x200010f8

0800c224 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c224:	b480      	push	{r7}
 800c226:	b083      	sub	sp, #12
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c22c:	4b06      	ldr	r3, [pc, #24]	; (800c248 <vTaskInternalSetTimeOutState+0x24>)
 800c22e:	681a      	ldr	r2, [r3, #0]
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800c234:	4b05      	ldr	r3, [pc, #20]	; (800c24c <vTaskInternalSetTimeOutState+0x28>)
 800c236:	681a      	ldr	r2, [r3, #0]
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	605a      	str	r2, [r3, #4]
}
 800c23c:	bf00      	nop
 800c23e:	370c      	adds	r7, #12
 800c240:	46bd      	mov	sp, r7
 800c242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c246:	4770      	bx	lr
 800c248:	200010fc 	.word	0x200010fc
 800c24c:	200010e8 	.word	0x200010e8

0800c250 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b086      	sub	sp, #24
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
 800c258:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d102      	bne.n	800c266 <xTaskCheckForTimeOut+0x16>
 800c260:	f000 fdea 	bl	800ce38 <ulSetInterruptMask>
 800c264:	e7fe      	b.n	800c264 <xTaskCheckForTimeOut+0x14>
    configASSERT( pxTicksToWait );
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d102      	bne.n	800c272 <xTaskCheckForTimeOut+0x22>
 800c26c:	f000 fde4 	bl	800ce38 <ulSetInterruptMask>
 800c270:	e7fe      	b.n	800c270 <xTaskCheckForTimeOut+0x20>

    taskENTER_CRITICAL();
 800c272:	f000 fca5 	bl	800cbc0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800c276:	4b1f      	ldr	r3, [pc, #124]	; (800c2f4 <xTaskCheckForTimeOut+0xa4>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	685b      	ldr	r3, [r3, #4]
 800c280:	693a      	ldr	r2, [r7, #16]
 800c282:	1ad3      	subs	r3, r2, r3
 800c284:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c28e:	d102      	bne.n	800c296 <xTaskCheckForTimeOut+0x46>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800c290:	2300      	movs	r3, #0
 800c292:	617b      	str	r3, [r7, #20]
 800c294:	e026      	b.n	800c2e4 <xTaskCheckForTimeOut+0x94>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681a      	ldr	r2, [r3, #0]
 800c29a:	4b17      	ldr	r3, [pc, #92]	; (800c2f8 <xTaskCheckForTimeOut+0xa8>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	d00a      	beq.n	800c2b8 <xTaskCheckForTimeOut+0x68>
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	685b      	ldr	r3, [r3, #4]
 800c2a6:	693a      	ldr	r2, [r7, #16]
 800c2a8:	429a      	cmp	r2, r3
 800c2aa:	d305      	bcc.n	800c2b8 <xTaskCheckForTimeOut+0x68>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 800c2b0:	683b      	ldr	r3, [r7, #0]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	601a      	str	r2, [r3, #0]
 800c2b6:	e015      	b.n	800c2e4 <xTaskCheckForTimeOut+0x94>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	68fa      	ldr	r2, [r7, #12]
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	d20b      	bcs.n	800c2da <xTaskCheckForTimeOut+0x8a>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	681a      	ldr	r2, [r3, #0]
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	1ad2      	subs	r2, r2, r3
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f7ff ffa8 	bl	800c224 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	617b      	str	r3, [r7, #20]
 800c2d8:	e004      	b.n	800c2e4 <xTaskCheckForTimeOut+0x94>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	2200      	movs	r2, #0
 800c2de:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 800c2e4:	f000 fc7e 	bl	800cbe4 <vPortExitCritical>

    return xReturn;
 800c2e8:	697b      	ldr	r3, [r7, #20]
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3718      	adds	r7, #24
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}
 800c2f2:	bf00      	nop
 800c2f4:	200010e8 	.word	0x200010e8
 800c2f8:	200010fc 	.word	0x200010fc

0800c2fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800c300:	4b03      	ldr	r3, [pc, #12]	; (800c310 <vTaskMissedYield+0x14>)
 800c302:	2201      	movs	r2, #1
 800c304:	601a      	str	r2, [r3, #0]
}
 800c306:	bf00      	nop
 800c308:	46bd      	mov	sp, r7
 800c30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30e:	4770      	bx	lr
 800c310:	200010f8 	.word	0x200010f8

0800c314 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b082      	sub	sp, #8
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800c31c:	f000 f84a 	bl	800c3b4 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c320:	4b03      	ldr	r3, [pc, #12]	; (800c330 <prvIdleTask+0x1c>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	2b01      	cmp	r3, #1
 800c326:	d9f9      	bls.n	800c31c <prvIdleTask+0x8>
            {
                taskYIELD();
 800c328:	f000 fc38 	bl	800cb9c <vPortYield>
        prvCheckTasksWaitingTermination();
 800c32c:	e7f6      	b.n	800c31c <prvIdleTask+0x8>
 800c32e:	bf00      	nop
 800c330:	20000c14 	.word	0x20000c14

0800c334 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b082      	sub	sp, #8
 800c338:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c33a:	2300      	movs	r3, #0
 800c33c:	607b      	str	r3, [r7, #4]
 800c33e:	e00c      	b.n	800c35a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c340:	687a      	ldr	r2, [r7, #4]
 800c342:	4613      	mov	r3, r2
 800c344:	009b      	lsls	r3, r3, #2
 800c346:	4413      	add	r3, r2
 800c348:	009b      	lsls	r3, r3, #2
 800c34a:	4a12      	ldr	r2, [pc, #72]	; (800c394 <prvInitialiseTaskLists+0x60>)
 800c34c:	4413      	add	r3, r2
 800c34e:	4618      	mov	r0, r3
 800c350:	f7fe fe80 	bl	800b054 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	3301      	adds	r3, #1
 800c358:	607b      	str	r3, [r7, #4]
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2b37      	cmp	r3, #55	; 0x37
 800c35e:	d9ef      	bls.n	800c340 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800c360:	480d      	ldr	r0, [pc, #52]	; (800c398 <prvInitialiseTaskLists+0x64>)
 800c362:	f7fe fe77 	bl	800b054 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800c366:	480d      	ldr	r0, [pc, #52]	; (800c39c <prvInitialiseTaskLists+0x68>)
 800c368:	f7fe fe74 	bl	800b054 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800c36c:	480c      	ldr	r0, [pc, #48]	; (800c3a0 <prvInitialiseTaskLists+0x6c>)
 800c36e:	f7fe fe71 	bl	800b054 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800c372:	480c      	ldr	r0, [pc, #48]	; (800c3a4 <prvInitialiseTaskLists+0x70>)
 800c374:	f7fe fe6e 	bl	800b054 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800c378:	480b      	ldr	r0, [pc, #44]	; (800c3a8 <prvInitialiseTaskLists+0x74>)
 800c37a:	f7fe fe6b 	bl	800b054 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800c37e:	4b0b      	ldr	r3, [pc, #44]	; (800c3ac <prvInitialiseTaskLists+0x78>)
 800c380:	4a05      	ldr	r2, [pc, #20]	; (800c398 <prvInitialiseTaskLists+0x64>)
 800c382:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c384:	4b0a      	ldr	r3, [pc, #40]	; (800c3b0 <prvInitialiseTaskLists+0x7c>)
 800c386:	4a05      	ldr	r2, [pc, #20]	; (800c39c <prvInitialiseTaskLists+0x68>)
 800c388:	601a      	str	r2, [r3, #0]
}
 800c38a:	bf00      	nop
 800c38c:	3708      	adds	r7, #8
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}
 800c392:	bf00      	nop
 800c394:	20000c14 	.word	0x20000c14
 800c398:	20001074 	.word	0x20001074
 800c39c:	20001088 	.word	0x20001088
 800c3a0:	200010a4 	.word	0x200010a4
 800c3a4:	200010b8 	.word	0x200010b8
 800c3a8:	200010d0 	.word	0x200010d0
 800c3ac:	2000109c 	.word	0x2000109c
 800c3b0:	200010a0 	.word	0x200010a0

0800c3b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b082      	sub	sp, #8
 800c3b8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c3ba:	e019      	b.n	800c3f0 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800c3bc:	f000 fc00 	bl	800cbc0 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3c0:	4b10      	ldr	r3, [pc, #64]	; (800c404 <prvCheckTasksWaitingTermination+0x50>)
 800c3c2:	68db      	ldr	r3, [r3, #12]
 800c3c4:	68db      	ldr	r3, [r3, #12]
 800c3c6:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	3304      	adds	r3, #4
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f7fe fea7 	bl	800b120 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800c3d2:	4b0d      	ldr	r3, [pc, #52]	; (800c408 <prvCheckTasksWaitingTermination+0x54>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	3b01      	subs	r3, #1
 800c3d8:	4a0b      	ldr	r2, [pc, #44]	; (800c408 <prvCheckTasksWaitingTermination+0x54>)
 800c3da:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800c3dc:	4b0b      	ldr	r3, [pc, #44]	; (800c40c <prvCheckTasksWaitingTermination+0x58>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	3b01      	subs	r3, #1
 800c3e2:	4a0a      	ldr	r2, [pc, #40]	; (800c40c <prvCheckTasksWaitingTermination+0x58>)
 800c3e4:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800c3e6:	f000 fbfd 	bl	800cbe4 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	f000 f810 	bl	800c410 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c3f0:	4b06      	ldr	r3, [pc, #24]	; (800c40c <prvCheckTasksWaitingTermination+0x58>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d1e1      	bne.n	800c3bc <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800c3f8:	bf00      	nop
 800c3fa:	bf00      	nop
 800c3fc:	3708      	adds	r7, #8
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}
 800c402:	bf00      	nop
 800c404:	200010b8 	.word	0x200010b8
 800c408:	200010e4 	.word	0x200010e4
 800c40c:	200010cc 	.word	0x200010cc

0800c410 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800c410:	b580      	push	{r7, lr}
 800c412:	b082      	sub	sp, #8
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d108      	bne.n	800c434 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c426:	4618      	mov	r0, r3
 800c428:	f000 fe18 	bl	800d05c <vPortFree>
                vPortFree( pxTCB );
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f000 fe15 	bl	800d05c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800c432:	e010      	b.n	800c456 <prvDeleteTCB+0x46>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c43a:	2b01      	cmp	r3, #1
 800c43c:	d103      	bne.n	800c446 <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f000 fe0c 	bl	800d05c <vPortFree>
    }
 800c444:	e007      	b.n	800c456 <prvDeleteTCB+0x46>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c44c:	2b02      	cmp	r3, #2
 800c44e:	d002      	beq.n	800c456 <prvDeleteTCB+0x46>
 800c450:	f000 fcf2 	bl	800ce38 <ulSetInterruptMask>
 800c454:	e7fe      	b.n	800c454 <prvDeleteTCB+0x44>
    }
 800c456:	bf00      	nop
 800c458:	3708      	adds	r7, #8
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}
	...

0800c460 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c460:	b480      	push	{r7}
 800c462:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c464:	4b0a      	ldr	r3, [pc, #40]	; (800c490 <prvResetNextTaskUnblockTime+0x30>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d104      	bne.n	800c478 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800c46e:	4b09      	ldr	r3, [pc, #36]	; (800c494 <prvResetNextTaskUnblockTime+0x34>)
 800c470:	f04f 32ff 	mov.w	r2, #4294967295
 800c474:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800c476:	e005      	b.n	800c484 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800c478:	4b05      	ldr	r3, [pc, #20]	; (800c490 <prvResetNextTaskUnblockTime+0x30>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	68db      	ldr	r3, [r3, #12]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	4a04      	ldr	r2, [pc, #16]	; (800c494 <prvResetNextTaskUnblockTime+0x34>)
 800c482:	6013      	str	r3, [r2, #0]
}
 800c484:	bf00      	nop
 800c486:	46bd      	mov	sp, r7
 800c488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48c:	4770      	bx	lr
 800c48e:	bf00      	nop
 800c490:	2000109c 	.word	0x2000109c
 800c494:	20001104 	.word	0x20001104

0800c498 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800c498:	b480      	push	{r7}
 800c49a:	b083      	sub	sp, #12
 800c49c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800c49e:	4b0b      	ldr	r3, [pc, #44]	; (800c4cc <xTaskGetSchedulerState+0x34>)
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d102      	bne.n	800c4ac <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	607b      	str	r3, [r7, #4]
 800c4aa:	e008      	b.n	800c4be <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c4ac:	4b08      	ldr	r3, [pc, #32]	; (800c4d0 <xTaskGetSchedulerState+0x38>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d102      	bne.n	800c4ba <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800c4b4:	2302      	movs	r3, #2
 800c4b6:	607b      	str	r3, [r7, #4]
 800c4b8:	e001      	b.n	800c4be <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800c4be:	687b      	ldr	r3, [r7, #4]
    }
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	370c      	adds	r7, #12
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ca:	4770      	bx	lr
 800c4cc:	200010f0 	.word	0x200010f0
 800c4d0:	2000110c 	.word	0x2000110c

0800c4d4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b086      	sub	sp, #24
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
 800c4dc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800c4de:	4b2e      	ldr	r3, [pc, #184]	; (800c598 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c4e4:	4b2d      	ldr	r3, [pc, #180]	; (800c59c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	3304      	adds	r3, #4
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7fe fe18 	bl	800b120 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4f6:	d124      	bne.n	800c542 <prvAddCurrentTaskToDelayedList+0x6e>
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d021      	beq.n	800c542 <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c4fe:	4b28      	ldr	r3, [pc, #160]	; (800c5a0 <prvAddCurrentTaskToDelayedList+0xcc>)
 800c500:	685b      	ldr	r3, [r3, #4]
 800c502:	613b      	str	r3, [r7, #16]
 800c504:	4b25      	ldr	r3, [pc, #148]	; (800c59c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	693a      	ldr	r2, [r7, #16]
 800c50a:	609a      	str	r2, [r3, #8]
 800c50c:	4b23      	ldr	r3, [pc, #140]	; (800c59c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	693a      	ldr	r2, [r7, #16]
 800c512:	6892      	ldr	r2, [r2, #8]
 800c514:	60da      	str	r2, [r3, #12]
 800c516:	4b21      	ldr	r3, [pc, #132]	; (800c59c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c518:	681a      	ldr	r2, [r3, #0]
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	689b      	ldr	r3, [r3, #8]
 800c51e:	3204      	adds	r2, #4
 800c520:	605a      	str	r2, [r3, #4]
 800c522:	4b1e      	ldr	r3, [pc, #120]	; (800c59c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	1d1a      	adds	r2, r3, #4
 800c528:	693b      	ldr	r3, [r7, #16]
 800c52a:	609a      	str	r2, [r3, #8]
 800c52c:	4b1b      	ldr	r3, [pc, #108]	; (800c59c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	4a1b      	ldr	r2, [pc, #108]	; (800c5a0 <prvAddCurrentTaskToDelayedList+0xcc>)
 800c532:	615a      	str	r2, [r3, #20]
 800c534:	4b1a      	ldr	r3, [pc, #104]	; (800c5a0 <prvAddCurrentTaskToDelayedList+0xcc>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	3301      	adds	r3, #1
 800c53a:	4a19      	ldr	r2, [pc, #100]	; (800c5a0 <prvAddCurrentTaskToDelayedList+0xcc>)
 800c53c:	6013      	str	r3, [r2, #0]
 800c53e:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800c540:	e026      	b.n	800c590 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800c542:	697a      	ldr	r2, [r7, #20]
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	4413      	add	r3, r2
 800c548:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c54a:	4b14      	ldr	r3, [pc, #80]	; (800c59c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	68fa      	ldr	r2, [r7, #12]
 800c550:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800c552:	68fa      	ldr	r2, [r7, #12]
 800c554:	697b      	ldr	r3, [r7, #20]
 800c556:	429a      	cmp	r2, r3
 800c558:	d209      	bcs.n	800c56e <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c55a:	4b12      	ldr	r3, [pc, #72]	; (800c5a4 <prvAddCurrentTaskToDelayedList+0xd0>)
 800c55c:	681a      	ldr	r2, [r3, #0]
 800c55e:	4b0f      	ldr	r3, [pc, #60]	; (800c59c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	3304      	adds	r3, #4
 800c564:	4619      	mov	r1, r3
 800c566:	4610      	mov	r0, r2
 800c568:	f7fe fda1 	bl	800b0ae <vListInsert>
}
 800c56c:	e010      	b.n	800c590 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c56e:	4b0e      	ldr	r3, [pc, #56]	; (800c5a8 <prvAddCurrentTaskToDelayedList+0xd4>)
 800c570:	681a      	ldr	r2, [r3, #0]
 800c572:	4b0a      	ldr	r3, [pc, #40]	; (800c59c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	3304      	adds	r3, #4
 800c578:	4619      	mov	r1, r3
 800c57a:	4610      	mov	r0, r2
 800c57c:	f7fe fd97 	bl	800b0ae <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800c580:	4b0a      	ldr	r3, [pc, #40]	; (800c5ac <prvAddCurrentTaskToDelayedList+0xd8>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	68fa      	ldr	r2, [r7, #12]
 800c586:	429a      	cmp	r2, r3
 800c588:	d202      	bcs.n	800c590 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 800c58a:	4a08      	ldr	r2, [pc, #32]	; (800c5ac <prvAddCurrentTaskToDelayedList+0xd8>)
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	6013      	str	r3, [r2, #0]
}
 800c590:	bf00      	nop
 800c592:	3718      	adds	r7, #24
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}
 800c598:	200010e8 	.word	0x200010e8
 800c59c:	20000c10 	.word	0x20000c10
 800c5a0:	200010d0 	.word	0x200010d0
 800c5a4:	200010a0 	.word	0x200010a0
 800c5a8:	2000109c 	.word	0x2000109c
 800c5ac:	20001104 	.word	0x20001104

0800c5b0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b088      	sub	sp, #32
 800c5b4:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800c5ba:	f000 fa59 	bl	800ca70 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800c5be:	4b18      	ldr	r3, [pc, #96]	; (800c620 <xTimerCreateTimerTask+0x70>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d020      	beq.n	800c608 <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	60bb      	str	r3, [r7, #8]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	607b      	str	r3, [r7, #4]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c5ce:	463a      	mov	r2, r7
 800c5d0:	1d39      	adds	r1, r7, #4
 800c5d2:	f107 0308 	add.w	r3, r7, #8
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f7fe fd22 	bl	800b020 <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800c5dc:	6839      	ldr	r1, [r7, #0]
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	68ba      	ldr	r2, [r7, #8]
 800c5e2:	9202      	str	r2, [sp, #8]
 800c5e4:	9301      	str	r3, [sp, #4]
 800c5e6:	2302      	movs	r3, #2
 800c5e8:	9300      	str	r3, [sp, #0]
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	460a      	mov	r2, r1
 800c5ee:	490d      	ldr	r1, [pc, #52]	; (800c624 <xTimerCreateTimerTask+0x74>)
 800c5f0:	480d      	ldr	r0, [pc, #52]	; (800c628 <xTimerCreateTimerTask+0x78>)
 800c5f2:	f7ff f85f 	bl	800b6b4 <xTaskCreateStatic>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	4a0c      	ldr	r2, [pc, #48]	; (800c62c <xTimerCreateTimerTask+0x7c>)
 800c5fa:	6013      	str	r3, [r2, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 800c5fc:	4b0b      	ldr	r3, [pc, #44]	; (800c62c <xTimerCreateTimerTask+0x7c>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d001      	beq.n	800c608 <xTimerCreateTimerTask+0x58>
                {
                    xReturn = pdPASS;
 800c604:	2301      	movs	r3, #1
 800c606:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d102      	bne.n	800c614 <xTimerCreateTimerTask+0x64>
 800c60e:	f000 fc13 	bl	800ce38 <ulSetInterruptMask>
 800c612:	e7fe      	b.n	800c612 <xTimerCreateTimerTask+0x62>
        return xReturn;
 800c614:	68fb      	ldr	r3, [r7, #12]
    }
 800c616:	4618      	mov	r0, r3
 800c618:	3710      	adds	r7, #16
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}
 800c61e:	bf00      	nop
 800c620:	20001140 	.word	0x20001140
 800c624:	0800d300 	.word	0x0800d300
 800c628:	0800c6d5 	.word	0x0800c6d5
 800c62c:	20001144 	.word	0x20001144

0800c630 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800c630:	b580      	push	{r7, lr}
 800c632:	b084      	sub	sp, #16
 800c634:	af00      	add	r7, sp, #0
 800c636:	60f8      	str	r0, [r7, #12]
 800c638:	60b9      	str	r1, [r7, #8]
 800c63a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800c63c:	e008      	b.n	800c650 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	699b      	ldr	r3, [r3, #24]
 800c642:	68ba      	ldr	r2, [r7, #8]
 800c644:	4413      	add	r3, r2
 800c646:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	6a1b      	ldr	r3, [r3, #32]
 800c64c:	68f8      	ldr	r0, [r7, #12]
 800c64e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	699a      	ldr	r2, [r3, #24]
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	18d1      	adds	r1, r2, r3
 800c658:	68bb      	ldr	r3, [r7, #8]
 800c65a:	687a      	ldr	r2, [r7, #4]
 800c65c:	68f8      	ldr	r0, [r7, #12]
 800c65e:	f000 f8d5 	bl	800c80c <prvInsertTimerInActiveList>
 800c662:	4603      	mov	r3, r0
 800c664:	2b00      	cmp	r3, #0
 800c666:	d1ea      	bne.n	800c63e <prvReloadTimer+0xe>
        }
    }
 800c668:	bf00      	nop
 800c66a:	bf00      	nop
 800c66c:	3710      	adds	r7, #16
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}
	...

0800c674 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800c674:	b580      	push	{r7, lr}
 800c676:	b084      	sub	sp, #16
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
 800c67c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c67e:	4b14      	ldr	r3, [pc, #80]	; (800c6d0 <prvProcessExpiredTimer+0x5c>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	68db      	ldr	r3, [r3, #12]
 800c684:	68db      	ldr	r3, [r3, #12]
 800c686:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	3304      	adds	r3, #4
 800c68c:	4618      	mov	r0, r3
 800c68e:	f7fe fd47 	bl	800b120 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c698:	f003 0304 	and.w	r3, r3, #4
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d005      	beq.n	800c6ac <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800c6a0:	683a      	ldr	r2, [r7, #0]
 800c6a2:	6879      	ldr	r1, [r7, #4]
 800c6a4:	68f8      	ldr	r0, [r7, #12]
 800c6a6:	f7ff ffc3 	bl	800c630 <prvReloadTimer>
 800c6aa:	e008      	b.n	800c6be <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6b2:	f023 0301 	bic.w	r3, r3, #1
 800c6b6:	b2da      	uxtb	r2, r3
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	6a1b      	ldr	r3, [r3, #32]
 800c6c2:	68f8      	ldr	r0, [r7, #12]
 800c6c4:	4798      	blx	r3
    }
 800c6c6:	bf00      	nop
 800c6c8:	3710      	adds	r7, #16
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}
 800c6ce:	bf00      	nop
 800c6d0:	20001138 	.word	0x20001138

0800c6d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b084      	sub	sp, #16
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c6dc:	f107 0308 	add.w	r3, r7, #8
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	f000 f84f 	bl	800c784 <prvGetNextExpireTime>
 800c6e6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	4619      	mov	r1, r3
 800c6ec:	68f8      	ldr	r0, [r7, #12]
 800c6ee:	f000 f803 	bl	800c6f8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800c6f2:	f000 f8cd 	bl	800c890 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c6f6:	e7f1      	b.n	800c6dc <prvTimerTask+0x8>

0800c6f8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b084      	sub	sp, #16
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
 800c700:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800c702:	f7ff f9f9 	bl	800baf8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c706:	f107 0308 	add.w	r3, r7, #8
 800c70a:	4618      	mov	r0, r3
 800c70c:	f000 f85e 	bl	800c7cc <prvSampleTimeNow>
 800c710:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800c712:	68bb      	ldr	r3, [r7, #8]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d12a      	bne.n	800c76e <prvProcessTimerOrBlockTask+0x76>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d10a      	bne.n	800c734 <prvProcessTimerOrBlockTask+0x3c>
 800c71e:	687a      	ldr	r2, [r7, #4]
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	429a      	cmp	r2, r3
 800c724:	d806      	bhi.n	800c734 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800c726:	f7ff f9f5 	bl	800bb14 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c72a:	68f9      	ldr	r1, [r7, #12]
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	f7ff ffa1 	bl	800c674 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800c732:	e01e      	b.n	800c772 <prvProcessTimerOrBlockTask+0x7a>
                    if( xListWasEmpty != pdFALSE )
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d008      	beq.n	800c74c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c73a:	4b10      	ldr	r3, [pc, #64]	; (800c77c <prvProcessTimerOrBlockTask+0x84>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d101      	bne.n	800c748 <prvProcessTimerOrBlockTask+0x50>
 800c744:	2301      	movs	r3, #1
 800c746:	e000      	b.n	800c74a <prvProcessTimerOrBlockTask+0x52>
 800c748:	2300      	movs	r3, #0
 800c74a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c74c:	4b0c      	ldr	r3, [pc, #48]	; (800c780 <prvProcessTimerOrBlockTask+0x88>)
 800c74e:	6818      	ldr	r0, [r3, #0]
 800c750:	687a      	ldr	r2, [r7, #4]
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	1ad3      	subs	r3, r2, r3
 800c756:	683a      	ldr	r2, [r7, #0]
 800c758:	4619      	mov	r1, r3
 800c75a:	f7fe ff77 	bl	800b64c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800c75e:	f7ff f9d9 	bl	800bb14 <xTaskResumeAll>
 800c762:	4603      	mov	r3, r0
 800c764:	2b00      	cmp	r3, #0
 800c766:	d104      	bne.n	800c772 <prvProcessTimerOrBlockTask+0x7a>
                        portYIELD_WITHIN_API();
 800c768:	f000 fa18 	bl	800cb9c <vPortYield>
    }
 800c76c:	e001      	b.n	800c772 <prvProcessTimerOrBlockTask+0x7a>
                ( void ) xTaskResumeAll();
 800c76e:	f7ff f9d1 	bl	800bb14 <xTaskResumeAll>
    }
 800c772:	bf00      	nop
 800c774:	3710      	adds	r7, #16
 800c776:	46bd      	mov	sp, r7
 800c778:	bd80      	pop	{r7, pc}
 800c77a:	bf00      	nop
 800c77c:	2000113c 	.word	0x2000113c
 800c780:	20001140 	.word	0x20001140

0800c784 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800c784:	b480      	push	{r7}
 800c786:	b085      	sub	sp, #20
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c78c:	4b0e      	ldr	r3, [pc, #56]	; (800c7c8 <prvGetNextExpireTime+0x44>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d101      	bne.n	800c79a <prvGetNextExpireTime+0x16>
 800c796:	2201      	movs	r2, #1
 800c798:	e000      	b.n	800c79c <prvGetNextExpireTime+0x18>
 800c79a:	2200      	movs	r2, #0
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d105      	bne.n	800c7b4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c7a8:	4b07      	ldr	r3, [pc, #28]	; (800c7c8 <prvGetNextExpireTime+0x44>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	68db      	ldr	r3, [r3, #12]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	60fb      	str	r3, [r7, #12]
 800c7b2:	e001      	b.n	800c7b8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
    }
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	3714      	adds	r7, #20
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c4:	4770      	bx	lr
 800c7c6:	bf00      	nop
 800c7c8:	20001138 	.word	0x20001138

0800c7cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b084      	sub	sp, #16
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800c7d4:	f7ff fa8a 	bl	800bcec <xTaskGetTickCount>
 800c7d8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800c7da:	4b0b      	ldr	r3, [pc, #44]	; (800c808 <prvSampleTimeNow+0x3c>)
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	68fa      	ldr	r2, [r7, #12]
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	d205      	bcs.n	800c7f0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800c7e4:	f000 f91e 	bl	800ca24 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2201      	movs	r2, #1
 800c7ec:	601a      	str	r2, [r3, #0]
 800c7ee:	e002      	b.n	800c7f6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800c7f6:	4a04      	ldr	r2, [pc, #16]	; (800c808 <prvSampleTimeNow+0x3c>)
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800c7fc:	68fb      	ldr	r3, [r7, #12]
    }
 800c7fe:	4618      	mov	r0, r3
 800c800:	3710      	adds	r7, #16
 800c802:	46bd      	mov	sp, r7
 800c804:	bd80      	pop	{r7, pc}
 800c806:	bf00      	nop
 800c808:	20001148 	.word	0x20001148

0800c80c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b086      	sub	sp, #24
 800c810:	af00      	add	r7, sp, #0
 800c812:	60f8      	str	r0, [r7, #12]
 800c814:	60b9      	str	r1, [r7, #8]
 800c816:	607a      	str	r2, [r7, #4]
 800c818:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800c81a:	2300      	movs	r3, #0
 800c81c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	68ba      	ldr	r2, [r7, #8]
 800c822:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	68fa      	ldr	r2, [r7, #12]
 800c828:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800c82a:	68ba      	ldr	r2, [r7, #8]
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	429a      	cmp	r2, r3
 800c830:	d812      	bhi.n	800c858 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c832:	687a      	ldr	r2, [r7, #4]
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	1ad2      	subs	r2, r2, r3
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	699b      	ldr	r3, [r3, #24]
 800c83c:	429a      	cmp	r2, r3
 800c83e:	d302      	bcc.n	800c846 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800c840:	2301      	movs	r3, #1
 800c842:	617b      	str	r3, [r7, #20]
 800c844:	e01b      	b.n	800c87e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c846:	4b10      	ldr	r3, [pc, #64]	; (800c888 <prvInsertTimerInActiveList+0x7c>)
 800c848:	681a      	ldr	r2, [r3, #0]
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	3304      	adds	r3, #4
 800c84e:	4619      	mov	r1, r3
 800c850:	4610      	mov	r0, r2
 800c852:	f7fe fc2c 	bl	800b0ae <vListInsert>
 800c856:	e012      	b.n	800c87e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c858:	687a      	ldr	r2, [r7, #4]
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	429a      	cmp	r2, r3
 800c85e:	d206      	bcs.n	800c86e <prvInsertTimerInActiveList+0x62>
 800c860:	68ba      	ldr	r2, [r7, #8]
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	429a      	cmp	r2, r3
 800c866:	d302      	bcc.n	800c86e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800c868:	2301      	movs	r3, #1
 800c86a:	617b      	str	r3, [r7, #20]
 800c86c:	e007      	b.n	800c87e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c86e:	4b07      	ldr	r3, [pc, #28]	; (800c88c <prvInsertTimerInActiveList+0x80>)
 800c870:	681a      	ldr	r2, [r3, #0]
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	3304      	adds	r3, #4
 800c876:	4619      	mov	r1, r3
 800c878:	4610      	mov	r0, r2
 800c87a:	f7fe fc18 	bl	800b0ae <vListInsert>
            }
        }

        return xProcessTimerNow;
 800c87e:	697b      	ldr	r3, [r7, #20]
    }
 800c880:	4618      	mov	r0, r3
 800c882:	3718      	adds	r7, #24
 800c884:	46bd      	mov	sp, r7
 800c886:	bd80      	pop	{r7, pc}
 800c888:	2000113c 	.word	0x2000113c
 800c88c:	20001138 	.word	0x20001138

0800c890 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800c890:	b580      	push	{r7, lr}
 800c892:	b088      	sub	sp, #32
 800c894:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c896:	e0b2      	b.n	800c9fe <prvProcessReceivedCommands+0x16e>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	da10      	bge.n	800c8c0 <prvProcessReceivedCommands+0x30>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c89e:	1d3b      	adds	r3, r7, #4
 800c8a0:	3304      	adds	r3, #4
 800c8a2:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 800c8a4:	69fb      	ldr	r3, [r7, #28]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d102      	bne.n	800c8b0 <prvProcessReceivedCommands+0x20>
 800c8aa:	f000 fac5 	bl	800ce38 <ulSetInterruptMask>
 800c8ae:	e7fe      	b.n	800c8ae <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c8b0:	69fb      	ldr	r3, [r7, #28]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	69fa      	ldr	r2, [r7, #28]
 800c8b6:	6850      	ldr	r0, [r2, #4]
 800c8b8:	69fa      	ldr	r2, [r7, #28]
 800c8ba:	6892      	ldr	r2, [r2, #8]
 800c8bc:	4611      	mov	r1, r2
 800c8be:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	f2c0 809b 	blt.w	800c9fe <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c8cc:	69bb      	ldr	r3, [r7, #24]
 800c8ce:	695b      	ldr	r3, [r3, #20]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d004      	beq.n	800c8de <prvProcessReceivedCommands+0x4e>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c8d4:	69bb      	ldr	r3, [r7, #24]
 800c8d6:	3304      	adds	r3, #4
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f7fe fc21 	bl	800b120 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c8de:	463b      	mov	r3, r7
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	f7ff ff73 	bl	800c7cc <prvSampleTimeNow>
 800c8e6:	6178      	str	r0, [r7, #20]

                switch( xMessage.xMessageID )
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	3b01      	subs	r3, #1
 800c8ec:	2b08      	cmp	r3, #8
 800c8ee:	f200 8085 	bhi.w	800c9fc <prvProcessReceivedCommands+0x16c>
 800c8f2:	a201      	add	r2, pc, #4	; (adr r2, 800c8f8 <prvProcessReceivedCommands+0x68>)
 800c8f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8f8:	0800c91d 	.word	0x0800c91d
 800c8fc:	0800c91d 	.word	0x0800c91d
 800c900:	0800c985 	.word	0x0800c985
 800c904:	0800c999 	.word	0x0800c999
 800c908:	0800c9d3 	.word	0x0800c9d3
 800c90c:	0800c91d 	.word	0x0800c91d
 800c910:	0800c91d 	.word	0x0800c91d
 800c914:	0800c985 	.word	0x0800c985
 800c918:	0800c999 	.word	0x0800c999
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c91c:	69bb      	ldr	r3, [r7, #24]
 800c91e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c922:	f043 0301 	orr.w	r3, r3, #1
 800c926:	b2da      	uxtb	r2, r3
 800c928:	69bb      	ldr	r3, [r7, #24]
 800c92a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c92e:	68ba      	ldr	r2, [r7, #8]
 800c930:	69bb      	ldr	r3, [r7, #24]
 800c932:	699b      	ldr	r3, [r3, #24]
 800c934:	18d1      	adds	r1, r2, r3
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	697a      	ldr	r2, [r7, #20]
 800c93a:	69b8      	ldr	r0, [r7, #24]
 800c93c:	f7ff ff66 	bl	800c80c <prvInsertTimerInActiveList>
 800c940:	4603      	mov	r3, r0
 800c942:	2b00      	cmp	r3, #0
 800c944:	d05b      	beq.n	800c9fe <prvProcessReceivedCommands+0x16e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c946:	69bb      	ldr	r3, [r7, #24]
 800c948:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c94c:	f003 0304 	and.w	r3, r3, #4
 800c950:	2b00      	cmp	r3, #0
 800c952:	d009      	beq.n	800c968 <prvProcessReceivedCommands+0xd8>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800c954:	68ba      	ldr	r2, [r7, #8]
 800c956:	69bb      	ldr	r3, [r7, #24]
 800c958:	699b      	ldr	r3, [r3, #24]
 800c95a:	4413      	add	r3, r2
 800c95c:	697a      	ldr	r2, [r7, #20]
 800c95e:	4619      	mov	r1, r3
 800c960:	69b8      	ldr	r0, [r7, #24]
 800c962:	f7ff fe65 	bl	800c630 <prvReloadTimer>
 800c966:	e008      	b.n	800c97a <prvProcessReceivedCommands+0xea>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800c968:	69bb      	ldr	r3, [r7, #24]
 800c96a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c96e:	f023 0301 	bic.w	r3, r3, #1
 800c972:	b2da      	uxtb	r2, r3
 800c974:	69bb      	ldr	r3, [r7, #24]
 800c976:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c97a:	69bb      	ldr	r3, [r7, #24]
 800c97c:	6a1b      	ldr	r3, [r3, #32]
 800c97e:	69b8      	ldr	r0, [r7, #24]
 800c980:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800c982:	e03c      	b.n	800c9fe <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800c984:	69bb      	ldr	r3, [r7, #24]
 800c986:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c98a:	f023 0301 	bic.w	r3, r3, #1
 800c98e:	b2da      	uxtb	r2, r3
 800c990:	69bb      	ldr	r3, [r7, #24]
 800c992:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800c996:	e032      	b.n	800c9fe <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c998:	69bb      	ldr	r3, [r7, #24]
 800c99a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c99e:	f043 0301 	orr.w	r3, r3, #1
 800c9a2:	b2da      	uxtb	r2, r3
 800c9a4:	69bb      	ldr	r3, [r7, #24]
 800c9a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c9aa:	68ba      	ldr	r2, [r7, #8]
 800c9ac:	69bb      	ldr	r3, [r7, #24]
 800c9ae:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c9b0:	69bb      	ldr	r3, [r7, #24]
 800c9b2:	699b      	ldr	r3, [r3, #24]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d102      	bne.n	800c9be <prvProcessReceivedCommands+0x12e>
 800c9b8:	f000 fa3e 	bl	800ce38 <ulSetInterruptMask>
 800c9bc:	e7fe      	b.n	800c9bc <prvProcessReceivedCommands+0x12c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c9be:	69bb      	ldr	r3, [r7, #24]
 800c9c0:	699a      	ldr	r2, [r3, #24]
 800c9c2:	697b      	ldr	r3, [r7, #20]
 800c9c4:	18d1      	adds	r1, r2, r3
 800c9c6:	697b      	ldr	r3, [r7, #20]
 800c9c8:	697a      	ldr	r2, [r7, #20]
 800c9ca:	69b8      	ldr	r0, [r7, #24]
 800c9cc:	f7ff ff1e 	bl	800c80c <prvInsertTimerInActiveList>
                        break;
 800c9d0:	e015      	b.n	800c9fe <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c9d2:	69bb      	ldr	r3, [r7, #24]
 800c9d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c9d8:	f003 0302 	and.w	r3, r3, #2
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d103      	bne.n	800c9e8 <prvProcessReceivedCommands+0x158>
                            {
                                vPortFree( pxTimer );
 800c9e0:	69b8      	ldr	r0, [r7, #24]
 800c9e2:	f000 fb3b 	bl	800d05c <vPortFree>
 800c9e6:	e00a      	b.n	800c9fe <prvProcessReceivedCommands+0x16e>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800c9e8:	69bb      	ldr	r3, [r7, #24]
 800c9ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c9ee:	f023 0301 	bic.w	r3, r3, #1
 800c9f2:	b2da      	uxtb	r2, r3
 800c9f4:	69bb      	ldr	r3, [r7, #24]
 800c9f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800c9fa:	e000      	b.n	800c9fe <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 800c9fc:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c9fe:	4b08      	ldr	r3, [pc, #32]	; (800ca20 <prvProcessReceivedCommands+0x190>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	1d39      	adds	r1, r7, #4
 800ca04:	2200      	movs	r2, #0
 800ca06:	4618      	mov	r0, r3
 800ca08:	f7fe fc94 	bl	800b334 <xQueueReceive>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	f47f af42 	bne.w	800c898 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800ca14:	bf00      	nop
 800ca16:	bf00      	nop
 800ca18:	3720      	adds	r7, #32
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}
 800ca1e:	bf00      	nop
 800ca20:	20001140 	.word	0x20001140

0800ca24 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b082      	sub	sp, #8
 800ca28:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ca2a:	e009      	b.n	800ca40 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ca2c:	4b0e      	ldr	r3, [pc, #56]	; (800ca68 <prvSwitchTimerLists+0x44>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	68db      	ldr	r3, [r3, #12]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800ca36:	f04f 31ff 	mov.w	r1, #4294967295
 800ca3a:	6838      	ldr	r0, [r7, #0]
 800ca3c:	f7ff fe1a 	bl	800c674 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ca40:	4b09      	ldr	r3, [pc, #36]	; (800ca68 <prvSwitchTimerLists+0x44>)
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d1f0      	bne.n	800ca2c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800ca4a:	4b07      	ldr	r3, [pc, #28]	; (800ca68 <prvSwitchTimerLists+0x44>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800ca50:	4b06      	ldr	r3, [pc, #24]	; (800ca6c <prvSwitchTimerLists+0x48>)
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	4a04      	ldr	r2, [pc, #16]	; (800ca68 <prvSwitchTimerLists+0x44>)
 800ca56:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800ca58:	4a04      	ldr	r2, [pc, #16]	; (800ca6c <prvSwitchTimerLists+0x48>)
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6013      	str	r3, [r2, #0]
    }
 800ca5e:	bf00      	nop
 800ca60:	3708      	adds	r7, #8
 800ca62:	46bd      	mov	sp, r7
 800ca64:	bd80      	pop	{r7, pc}
 800ca66:	bf00      	nop
 800ca68:	20001138 	.word	0x20001138
 800ca6c:	2000113c 	.word	0x2000113c

0800ca70 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b082      	sub	sp, #8
 800ca74:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800ca76:	f000 f8a3 	bl	800cbc0 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800ca7a:	4b15      	ldr	r3, [pc, #84]	; (800cad0 <prvCheckForValidListAndQueue+0x60>)
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d120      	bne.n	800cac4 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 800ca82:	4814      	ldr	r0, [pc, #80]	; (800cad4 <prvCheckForValidListAndQueue+0x64>)
 800ca84:	f7fe fae6 	bl	800b054 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800ca88:	4813      	ldr	r0, [pc, #76]	; (800cad8 <prvCheckForValidListAndQueue+0x68>)
 800ca8a:	f7fe fae3 	bl	800b054 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800ca8e:	4b13      	ldr	r3, [pc, #76]	; (800cadc <prvCheckForValidListAndQueue+0x6c>)
 800ca90:	4a10      	ldr	r2, [pc, #64]	; (800cad4 <prvCheckForValidListAndQueue+0x64>)
 800ca92:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800ca94:	4b12      	ldr	r3, [pc, #72]	; (800cae0 <prvCheckForValidListAndQueue+0x70>)
 800ca96:	4a10      	ldr	r2, [pc, #64]	; (800cad8 <prvCheckForValidListAndQueue+0x68>)
 800ca98:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	9300      	str	r3, [sp, #0]
 800ca9e:	4b11      	ldr	r3, [pc, #68]	; (800cae4 <prvCheckForValidListAndQueue+0x74>)
 800caa0:	4a11      	ldr	r2, [pc, #68]	; (800cae8 <prvCheckForValidListAndQueue+0x78>)
 800caa2:	2110      	movs	r1, #16
 800caa4:	200a      	movs	r0, #10
 800caa6:	f7fe fbdc 	bl	800b262 <xQueueGenericCreateStatic>
 800caaa:	4603      	mov	r3, r0
 800caac:	4a08      	ldr	r2, [pc, #32]	; (800cad0 <prvCheckForValidListAndQueue+0x60>)
 800caae:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800cab0:	4b07      	ldr	r3, [pc, #28]	; (800cad0 <prvCheckForValidListAndQueue+0x60>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d005      	beq.n	800cac4 <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cab8:	4b05      	ldr	r3, [pc, #20]	; (800cad0 <prvCheckForValidListAndQueue+0x60>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	490b      	ldr	r1, [pc, #44]	; (800caec <prvCheckForValidListAndQueue+0x7c>)
 800cabe:	4618      	mov	r0, r3
 800cac0:	f7fe fd80 	bl	800b5c4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800cac4:	f000 f88e 	bl	800cbe4 <vPortExitCritical>
    }
 800cac8:	bf00      	nop
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}
 800cace:	bf00      	nop
 800cad0:	20001140 	.word	0x20001140
 800cad4:	20001110 	.word	0x20001110
 800cad8:	20001124 	.word	0x20001124
 800cadc:	20001138 	.word	0x20001138
 800cae0:	2000113c 	.word	0x2000113c
 800cae4:	200011ec 	.word	0x200011ec
 800cae8:	2000114c 	.word	0x2000114c
 800caec:	0800d308 	.word	0x0800d308

0800caf0 <vPortSetupTimerInterrupt>:
    }
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 800caf0:	b480      	push	{r7}
 800caf2:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800caf4:	4b0b      	ldr	r3, [pc, #44]	; (800cb24 <vPortSetupTimerInterrupt+0x34>)
 800caf6:	2200      	movs	r2, #0
 800caf8:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cafa:	4b0b      	ldr	r3, [pc, #44]	; (800cb28 <vPortSetupTimerInterrupt+0x38>)
 800cafc:	2200      	movs	r2, #0
 800cafe:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cb00:	4b0a      	ldr	r3, [pc, #40]	; (800cb2c <vPortSetupTimerInterrupt+0x3c>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	4a0a      	ldr	r2, [pc, #40]	; (800cb30 <vPortSetupTimerInterrupt+0x40>)
 800cb06:	fba2 2303 	umull	r2, r3, r2, r3
 800cb0a:	099b      	lsrs	r3, r3, #6
 800cb0c:	4a09      	ldr	r2, [pc, #36]	; (800cb34 <vPortSetupTimerInterrupt+0x44>)
 800cb0e:	3b01      	subs	r3, #1
 800cb10:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800cb12:	4b04      	ldr	r3, [pc, #16]	; (800cb24 <vPortSetupTimerInterrupt+0x34>)
 800cb14:	2207      	movs	r2, #7
 800cb16:	601a      	str	r2, [r3, #0]
}
 800cb18:	bf00      	nop
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb20:	4770      	bx	lr
 800cb22:	bf00      	nop
 800cb24:	e000e010 	.word	0xe000e010
 800cb28:	e000e018 	.word	0xe000e018
 800cb2c:	20000000 	.word	0x20000000
 800cb30:	10624dd3 	.word	0x10624dd3
 800cb34:	e000e014 	.word	0xe000e014

0800cb38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b082      	sub	sp, #8
 800cb3c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	607b      	str	r3, [r7, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 800cb42:	4b09      	ldr	r3, [pc, #36]	; (800cb68 <prvTaskExitError+0x30>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb4a:	d002      	beq.n	800cb52 <prvTaskExitError+0x1a>
 800cb4c:	f000 f974 	bl	800ce38 <ulSetInterruptMask>
 800cb50:	e7fe      	b.n	800cb50 <prvTaskExitError+0x18>
    portDISABLE_INTERRUPTS();
 800cb52:	f000 f971 	bl	800ce38 <ulSetInterruptMask>

    while( ulDummy == 0 )
 800cb56:	bf00      	nop
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d0fc      	beq.n	800cb58 <prvTaskExitError+0x20>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 800cb5e:	bf00      	nop
 800cb60:	bf00      	nop
 800cb62:	3708      	adds	r7, #8
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}
 800cb68:	20000010 	.word	0x20000010

0800cb6c <prvSetupFPU>:
#endif /* configENABLE_MPU */
/*-----------------------------------------------------------*/

#if ( configENABLE_FPU == 1 )
    static void prvSetupFPU( void ) /* PRIVILEGED_FUNCTION */
    {
 800cb6c:	b480      	push	{r7}
 800cb6e:	af00      	add	r7, sp, #0
        #endif /* configENABLE_TRUSTZONE */

        /* CP10 = 11 ==> Full access to FPU i.e. both privileged and
         * unprivileged code should be able to access FPU. CP11 should be
         * programmed to the same value as CP10. */
        *( portCPACR ) |= ( ( portCPACR_CP10_VALUE << portCPACR_CP10_POS ) |
 800cb70:	4b08      	ldr	r3, [pc, #32]	; (800cb94 <prvSetupFPU+0x28>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	4a07      	ldr	r2, [pc, #28]	; (800cb94 <prvSetupFPU+0x28>)
 800cb76:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cb7a:	6013      	str	r3, [r2, #0]
                            );

        /* ASPEN = 1 ==> Hardware should automatically preserve floating point
         * context on exception entry and restore on exception return.
         * LSPEN = 1 ==> Enable lazy context save of FP state. */
        *( portFPCCR ) |= ( portFPCCR_ASPEN_MASK | portFPCCR_LSPEN_MASK );
 800cb7c:	4b06      	ldr	r3, [pc, #24]	; (800cb98 <prvSetupFPU+0x2c>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	4a05      	ldr	r2, [pc, #20]	; (800cb98 <prvSetupFPU+0x2c>)
 800cb82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cb86:	6013      	str	r3, [r2, #0]
    }
 800cb88:	bf00      	nop
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb90:	4770      	bx	lr
 800cb92:	bf00      	nop
 800cb94:	e000ed88 	.word	0xe000ed88
 800cb98:	e000ef34 	.word	0xe000ef34

0800cb9c <vPortYield>:
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 800cb9c:	b480      	push	{r7}
 800cb9e:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cba0:	4b06      	ldr	r3, [pc, #24]	; (800cbbc <vPortYield+0x20>)
 800cba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cba6:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800cba8:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800cbac:	f3bf 8f6f 	isb	sy
}
 800cbb0:	bf00      	nop
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb8:	4770      	bx	lr
 800cbba:	bf00      	nop
 800cbbc:	e000ed04 	.word	0xe000ed04

0800cbc0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 800cbc4:	f000 f938 	bl	800ce38 <ulSetInterruptMask>
    ulCriticalNesting++;
 800cbc8:	4b05      	ldr	r3, [pc, #20]	; (800cbe0 <vPortEnterCritical+0x20>)
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	3301      	adds	r3, #1
 800cbce:	4a04      	ldr	r2, [pc, #16]	; (800cbe0 <vPortEnterCritical+0x20>)
 800cbd0:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800cbd2:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800cbd6:	f3bf 8f6f 	isb	sy
}
 800cbda:	bf00      	nop
 800cbdc:	bd80      	pop	{r7, pc}
 800cbde:	bf00      	nop
 800cbe0:	20000010 	.word	0x20000010

0800cbe4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	af00      	add	r7, sp, #0
    configASSERT( ulCriticalNesting );
 800cbe8:	4b0a      	ldr	r3, [pc, #40]	; (800cc14 <vPortExitCritical+0x30>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d102      	bne.n	800cbf6 <vPortExitCritical+0x12>
 800cbf0:	f000 f922 	bl	800ce38 <ulSetInterruptMask>
 800cbf4:	e7fe      	b.n	800cbf4 <vPortExitCritical+0x10>
    ulCriticalNesting--;
 800cbf6:	4b07      	ldr	r3, [pc, #28]	; (800cc14 <vPortExitCritical+0x30>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	3b01      	subs	r3, #1
 800cbfc:	4a05      	ldr	r2, [pc, #20]	; (800cc14 <vPortExitCritical+0x30>)
 800cbfe:	6013      	str	r3, [r2, #0]

    if( ulCriticalNesting == 0 )
 800cc00:	4b04      	ldr	r3, [pc, #16]	; (800cc14 <vPortExitCritical+0x30>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d102      	bne.n	800cc0e <vPortExitCritical+0x2a>
    {
        portENABLE_INTERRUPTS();
 800cc08:	2000      	movs	r0, #0
 800cc0a:	f000 f922 	bl	800ce52 <vClearInterruptMask>
    }
}
 800cc0e:	bf00      	nop
 800cc10:	bd80      	pop	{r7, pc}
 800cc12:	bf00      	nop
 800cc14:	20000010 	.word	0x20000010

0800cc18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b082      	sub	sp, #8
 800cc1c:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800cc1e:	f000 f90b 	bl	800ce38 <ulSetInterruptMask>
 800cc22:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800cc24:	f7ff f872 	bl	800bd0c <xTaskIncrementTick>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d003      	beq.n	800cc36 <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cc2e:	4b05      	ldr	r3, [pc, #20]	; (800cc44 <xPortSysTickHandler+0x2c>)
 800cc30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc34:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f000 f90b 	bl	800ce52 <vClearInterruptMask>
}
 800cc3c:	bf00      	nop
 800cc3e:	3708      	adds	r7, #8
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}
 800cc44:	e000ed04 	.word	0xe000ed04

0800cc48 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b084      	sub	sp, #16
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ 6 ];
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	699b      	ldr	r3, [r3, #24]
 800cc54:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	3b02      	subs	r3, #2
 800cc5a:	781b      	ldrb	r3, [r3, #0]
 800cc5c:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 800cc5e:	7afb      	ldrb	r3, [r7, #11]
 800cc60:	2b02      	cmp	r3, #2
 800cc62:	d104      	bne.n	800cc6e <vPortSVCHandler_C+0x26>
            #endif /* configENABLE_TRUSTZONE */

            #if ( configENABLE_FPU == 1 )
            {
                /* Setup the Floating Point Unit (FPU). */
                prvSetupFPU();
 800cc64:	f7ff ff82 	bl	800cb6c <prvSetupFPU>
            }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 800cc68:	f000 f8b2 	bl	800cdd0 <vRestoreContextOfFirstTask>
            break;
 800cc6c:	e002      	b.n	800cc74 <vPortSVCHandler_C+0x2c>
                    break;
            #endif /* configENABLE_MPU */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 800cc6e:	f000 f8e3 	bl	800ce38 <ulSetInterruptMask>
 800cc72:	e7fe      	b.n	800cc72 <vPortSVCHandler_C+0x2a>
    }
}
 800cc74:	bf00      	nop
 800cc76:	3710      	adds	r7, #16
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bd80      	pop	{r7, pc}

0800cc7c <pxPortInitialiseStack>:
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
/* *INDENT-ON* */
{
 800cc7c:	b480      	push	{r7}
 800cc7e:	b085      	sub	sp, #20
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	60f8      	str	r0, [r7, #12]
 800cc84:	60b9      	str	r1, [r7, #8]
 800cc86:	607a      	str	r2, [r7, #4]
 800cc88:	603b      	str	r3, [r7, #0]
        }
        #endif /* configENABLE_TRUSTZONE */
    }
    #else /* portPRELOAD_REGISTERS */
    {
        pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	3b04      	subs	r3, #4
 800cc8e:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cc96:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	3b04      	subs	r3, #4
 800cc9c:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 800cc9e:	687a      	ldr	r2, [r7, #4]
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	3b04      	subs	r3, #4
 800cca8:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 800ccaa:	4a38      	ldr	r2, [pc, #224]	; (800cd8c <pxPortInitialiseStack+0x110>)
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	3b04      	subs	r3, #4
 800ccb4:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12 */
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 800ccbc:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	3b04      	subs	r3, #4
 800ccc2:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3 */
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 800ccca:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	3b04      	subs	r3, #4
 800ccd0:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2 */
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 800ccd8:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	3b04      	subs	r3, #4
 800ccde:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1 */
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 800cce6:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	3b04      	subs	r3, #4
 800ccec:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 800ccee:	683a      	ldr	r2, [r7, #0]
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	3b04      	subs	r3, #4
 800ccf8:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11 */
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 800cd00:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	3b04      	subs	r3, #4
 800cd06:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10 */
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 800cd0e:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	3b04      	subs	r3, #4
 800cd14:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09 */
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 800cd1c:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	3b04      	subs	r3, #4
 800cd22:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08 */
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 800cd2a:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	3b04      	subs	r3, #4
 800cd30:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07 */
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 800cd38:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	3b04      	subs	r3, #4
 800cd3e:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06 */
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 800cd46:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	3b04      	subs	r3, #4
 800cd4c:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05 */
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 800cd54:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	3b04      	subs	r3, #4
 800cd5a:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04 */
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 800cd62:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	3b04      	subs	r3, #4
 800cd68:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN */
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	f06f 0243 	mvn.w	r2, #67	; 0x43
 800cd70:	601a      	str	r2, [r3, #0]
                *pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED; /* Slot used to hold this task's CONTROL value. */
            }
        }
        #endif /* configENABLE_MPU */

        pxTopOfStack--;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	3b04      	subs	r3, #4
 800cd76:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
 800cd78:	68ba      	ldr	r2, [r7, #8]
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	601a      	str	r2, [r3, #0]
        }
        #endif /* configENABLE_TRUSTZONE */
    }
    #endif /* portPRELOAD_REGISTERS */

    return pxTopOfStack;
 800cd7e:	68fb      	ldr	r3, [r7, #12]
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	3714      	adds	r7, #20
 800cd84:	46bd      	mov	sp, r7
 800cd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8a:	4770      	bx	lr
 800cd8c:	0800cb39 	.word	0x0800cb39

0800cd90 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800cd94:	4b0c      	ldr	r3, [pc, #48]	; (800cdc8 <xPortStartScheduler+0x38>)
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	4a0b      	ldr	r2, [pc, #44]	; (800cdc8 <xPortStartScheduler+0x38>)
 800cd9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cd9e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800cda0:	4b09      	ldr	r3, [pc, #36]	; (800cdc8 <xPortStartScheduler+0x38>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	4a08      	ldr	r2, [pc, #32]	; (800cdc8 <xPortStartScheduler+0x38>)
 800cda6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cdaa:	6013      	str	r3, [r2, #0]
    }
    #endif /* configENABLE_MPU */

    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800cdac:	f7ff fea0 	bl	800caf0 <vPortSetupTimerInterrupt>

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 800cdb0:	4b06      	ldr	r3, [pc, #24]	; (800cdcc <xPortStartScheduler+0x3c>)
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vStartFirstTask();
 800cdb6:	f000 f82b 	bl	800ce10 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 800cdba:	f7ff f8b7 	bl	800bf2c <vTaskSwitchContext>
    prvTaskExitError();
 800cdbe:	f7ff febb 	bl	800cb38 <prvTaskExitError>

    /* Should not get here. */
    return 0;
 800cdc2:	2300      	movs	r3, #0
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	bd80      	pop	{r7, pc}
 800cdc8:	e000ed20 	.word	0xe000ed20
 800cdcc:	20000010 	.word	0x20000010

0800cdd0 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800cdd0:	4a0b      	ldr	r2, [pc, #44]	; (800ce00 <pxCurrentTCBConst2>)
 800cdd2:	6811      	ldr	r1, [r2, #0]
 800cdd4:	6808      	ldr	r0, [r1, #0]
 800cdd6:	c806      	ldmia	r0!, {r1, r2}
 800cdd8:	f381 880b 	msr	PSPLIM, r1
 800cddc:	2102      	movs	r1, #2
 800cdde:	f381 8814 	msr	CONTROL, r1
 800cde2:	3020      	adds	r0, #32
 800cde4:	f380 8809 	msr	PSP, r0
 800cde8:	f3bf 8f6f 	isb	sy
 800cdec:	f04f 0000 	mov.w	r0, #0
 800cdf0:	f380 8811 	msr	BASEPRI, r0
 800cdf4:	4710      	bx	r2
 800cdf6:	bf00      	nop
 800cdf8:	f3af 8000 	nop.w
 800cdfc:	f3af 8000 	nop.w

0800ce00 <pxCurrentTCBConst2>:
 800ce00:	20000c10 	.word	0x20000c10
            "xMAIR0Const2: .word 0xe000edc0						\n"
            "xRNRConst2: .word 0xe000ed98						\n"
            "xRBARConst2: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
    );
}
 800ce04:	bf00      	nop
 800ce06:	bf00      	nop
	...

0800ce10 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800ce10:	4807      	ldr	r0, [pc, #28]	; (800ce30 <xVTORConst>)
 800ce12:	6800      	ldr	r0, [r0, #0]
 800ce14:	6800      	ldr	r0, [r0, #0]
 800ce16:	f380 8808 	msr	MSP, r0
 800ce1a:	b662      	cpsie	i
 800ce1c:	b661      	cpsie	f
 800ce1e:	f3bf 8f4f 	dsb	sy
 800ce22:	f3bf 8f6f 	isb	sy
 800ce26:	df02      	svc	2
 800ce28:	bf00      	nop
 800ce2a:	bf00      	nop
 800ce2c:	f3af 8000 	nop.w

0800ce30 <xVTORConst>:
 800ce30:	e000ed08 	.word	0xe000ed08
        "													\n"
        "   .align 4										\n"
        "xVTORConst: .word 0xe000ed08						\n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 800ce34:	bf00      	nop
 800ce36:	bf00      	nop

0800ce38 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800ce38:	f3ef 8011 	mrs	r0, BASEPRI
 800ce3c:	f04f 0150 	mov.w	r1, #80	; 0x50
 800ce40:	f381 8811 	msr	BASEPRI, r1
 800ce44:	f3bf 8f4f 	dsb	sy
 800ce48:	f3bf 8f6f 	isb	sy
 800ce4c:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800ce4e:	bf00      	nop
 800ce50:	4618      	mov	r0, r3

0800ce52 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800ce52:	f380 8811 	msr	BASEPRI, r0
 800ce56:	f3bf 8f4f 	dsb	sy
 800ce5a:	f3bf 8f6f 	isb	sy
 800ce5e:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::: "memory"
    );
}
 800ce60:	bf00      	nop
	...

0800ce70 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800ce70:	f3ef 8009 	mrs	r0, PSP
 800ce74:	f01e 0f10 	tst.w	lr, #16
 800ce78:	bf08      	it	eq
 800ce7a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ce7e:	f3ef 820b 	mrs	r2, PSPLIM
 800ce82:	4673      	mov	r3, lr
 800ce84:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800ce88:	4a11      	ldr	r2, [pc, #68]	; (800ced0 <pxCurrentTCBConst>)
 800ce8a:	6811      	ldr	r1, [r2, #0]
 800ce8c:	6008      	str	r0, [r1, #0]
 800ce8e:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ce92:	f380 8811 	msr	BASEPRI, r0
 800ce96:	f3bf 8f4f 	dsb	sy
 800ce9a:	f3bf 8f6f 	isb	sy
 800ce9e:	f7ff f845 	bl	800bf2c <vTaskSwitchContext>
 800cea2:	f04f 0000 	mov.w	r0, #0
 800cea6:	f380 8811 	msr	BASEPRI, r0
 800ceaa:	4a09      	ldr	r2, [pc, #36]	; (800ced0 <pxCurrentTCBConst>)
 800ceac:	6811      	ldr	r1, [r2, #0]
 800ceae:	6808      	ldr	r0, [r1, #0]
 800ceb0:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800ceb4:	f013 0f10 	tst.w	r3, #16
 800ceb8:	bf08      	it	eq
 800ceba:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cebe:	f382 880b 	msr	PSPLIM, r2
 800cec2:	f380 8809 	msr	PSP, r0
 800cec6:	4718      	bx	r3
 800cec8:	f3af 8000 	nop.w
 800cecc:	f3af 8000 	nop.w

0800ced0 <pxCurrentTCBConst>:
 800ced0:	20000c10 	.word	0x20000c10
            "xRNRConst: .word 0xe000ed98						\n"
            "xRBARConst: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800ced4:	bf00      	nop
 800ced6:	bf00      	nop
	...

0800cee0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800cee0:	f01e 0f04 	tst.w	lr, #4
 800cee4:	bf0c      	ite	eq
 800cee6:	f3ef 8008 	mrseq	r0, MSP
 800ceea:	f3ef 8009 	mrsne	r0, PSP
 800ceee:	4904      	ldr	r1, [pc, #16]	; (800cf00 <svchandler_address_const>)
 800cef0:	4708      	bx	r1
 800cef2:	bf00      	nop
 800cef4:	f3af 8000 	nop.w
 800cef8:	f3af 8000 	nop.w
 800cefc:	f3af 8000 	nop.w

0800cf00 <svchandler_address_const>:
 800cf00:	0800cc49 	.word	0x0800cc49
        "	bx r1											\n"
        "													\n"
        "	.align 4										\n"
        "svchandler_address_const: .word vPortSVCHandler_C	\n"
    );
}
 800cf04:	bf00      	nop
 800cf06:	bf00      	nop

0800cf08 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b088      	sub	sp, #32
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 800cf10:	2300      	movs	r3, #0
 800cf12:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800cf14:	f7fe fdf0 	bl	800baf8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800cf18:	4b4b      	ldr	r3, [pc, #300]	; (800d048 <pvPortMalloc+0x140>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d101      	bne.n	800cf24 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800cf20:	f000 f8e8 	bl	800d0f4 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d012      	beq.n	800cf50 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800cf2a:	2208      	movs	r2, #8
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	f003 0307 	and.w	r3, r3, #7
 800cf32:	1ad3      	subs	r3, r2, r3
 800cf34:	3308      	adds	r3, #8
 800cf36:	613b      	str	r3, [r7, #16]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800cf38:	693b      	ldr	r3, [r7, #16]
 800cf3a:	43db      	mvns	r3, r3
 800cf3c:	687a      	ldr	r2, [r7, #4]
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d804      	bhi.n	800cf4c <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800cf42:	687a      	ldr	r2, [r7, #4]
 800cf44:	693b      	ldr	r3, [r7, #16]
 800cf46:	4413      	add	r3, r2
 800cf48:	607b      	str	r3, [r7, #4]
 800cf4a:	e001      	b.n	800cf50 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	db68      	blt.n	800d028 <pvPortMalloc+0x120>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d065      	beq.n	800d028 <pvPortMalloc+0x120>
 800cf5c:	4b3b      	ldr	r3, [pc, #236]	; (800d04c <pvPortMalloc+0x144>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	687a      	ldr	r2, [r7, #4]
 800cf62:	429a      	cmp	r2, r3
 800cf64:	d860      	bhi.n	800d028 <pvPortMalloc+0x120>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800cf66:	4b3a      	ldr	r3, [pc, #232]	; (800d050 <pvPortMalloc+0x148>)
 800cf68:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 800cf6a:	4b39      	ldr	r3, [pc, #228]	; (800d050 <pvPortMalloc+0x148>)
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cf70:	e004      	b.n	800cf7c <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800cf72:	69fb      	ldr	r3, [r7, #28]
 800cf74:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800cf76:	69fb      	ldr	r3, [r7, #28]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cf7c:	69fb      	ldr	r3, [r7, #28]
 800cf7e:	685b      	ldr	r3, [r3, #4]
 800cf80:	687a      	ldr	r2, [r7, #4]
 800cf82:	429a      	cmp	r2, r3
 800cf84:	d903      	bls.n	800cf8e <pvPortMalloc+0x86>
 800cf86:	69fb      	ldr	r3, [r7, #28]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d1f1      	bne.n	800cf72 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800cf8e:	4b2e      	ldr	r3, [pc, #184]	; (800d048 <pvPortMalloc+0x140>)
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	69fa      	ldr	r2, [r7, #28]
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d047      	beq.n	800d028 <pvPortMalloc+0x120>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cf98:	69bb      	ldr	r3, [r7, #24]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	2208      	movs	r2, #8
 800cf9e:	4413      	add	r3, r2
 800cfa0:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cfa2:	69fb      	ldr	r3, [r7, #28]
 800cfa4:	681a      	ldr	r2, [r3, #0]
 800cfa6:	69bb      	ldr	r3, [r7, #24]
 800cfa8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cfaa:	69fb      	ldr	r3, [r7, #28]
 800cfac:	685a      	ldr	r2, [r3, #4]
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	1ad2      	subs	r2, r2, r3
 800cfb2:	2308      	movs	r3, #8
 800cfb4:	005b      	lsls	r3, r3, #1
 800cfb6:	429a      	cmp	r2, r3
 800cfb8:	d917      	bls.n	800cfea <pvPortMalloc+0xe2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cfba:	69fa      	ldr	r2, [r7, #28]
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	4413      	add	r3, r2
 800cfc0:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	f003 0307 	and.w	r3, r3, #7
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d002      	beq.n	800cfd2 <pvPortMalloc+0xca>
 800cfcc:	f7ff ff34 	bl	800ce38 <ulSetInterruptMask>
 800cfd0:	e7fe      	b.n	800cfd0 <pvPortMalloc+0xc8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cfd2:	69fb      	ldr	r3, [r7, #28]
 800cfd4:	685a      	ldr	r2, [r3, #4]
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	1ad2      	subs	r2, r2, r3
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800cfde:	69fb      	ldr	r3, [r7, #28]
 800cfe0:	687a      	ldr	r2, [r7, #4]
 800cfe2:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cfe4:	68f8      	ldr	r0, [r7, #12]
 800cfe6:	f000 f8e1 	bl	800d1ac <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cfea:	4b18      	ldr	r3, [pc, #96]	; (800d04c <pvPortMalloc+0x144>)
 800cfec:	681a      	ldr	r2, [r3, #0]
 800cfee:	69fb      	ldr	r3, [r7, #28]
 800cff0:	685b      	ldr	r3, [r3, #4]
 800cff2:	1ad3      	subs	r3, r2, r3
 800cff4:	4a15      	ldr	r2, [pc, #84]	; (800d04c <pvPortMalloc+0x144>)
 800cff6:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cff8:	4b14      	ldr	r3, [pc, #80]	; (800d04c <pvPortMalloc+0x144>)
 800cffa:	681a      	ldr	r2, [r3, #0]
 800cffc:	4b15      	ldr	r3, [pc, #84]	; (800d054 <pvPortMalloc+0x14c>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	429a      	cmp	r2, r3
 800d002:	d203      	bcs.n	800d00c <pvPortMalloc+0x104>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d004:	4b11      	ldr	r3, [pc, #68]	; (800d04c <pvPortMalloc+0x144>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	4a12      	ldr	r2, [pc, #72]	; (800d054 <pvPortMalloc+0x14c>)
 800d00a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800d00c:	69fb      	ldr	r3, [r7, #28]
 800d00e:	685b      	ldr	r3, [r3, #4]
 800d010:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800d014:	69fb      	ldr	r3, [r7, #28]
 800d016:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800d018:	69fb      	ldr	r3, [r7, #28]
 800d01a:	2200      	movs	r2, #0
 800d01c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800d01e:	4b0e      	ldr	r3, [pc, #56]	; (800d058 <pvPortMalloc+0x150>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	3301      	adds	r3, #1
 800d024:	4a0c      	ldr	r2, [pc, #48]	; (800d058 <pvPortMalloc+0x150>)
 800d026:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800d028:	f7fe fd74 	bl	800bb14 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d02c:	697b      	ldr	r3, [r7, #20]
 800d02e:	f003 0307 	and.w	r3, r3, #7
 800d032:	2b00      	cmp	r3, #0
 800d034:	d002      	beq.n	800d03c <pvPortMalloc+0x134>
 800d036:	f7ff feff 	bl	800ce38 <ulSetInterruptMask>
 800d03a:	e7fe      	b.n	800d03a <pvPortMalloc+0x132>
    return pvReturn;
 800d03c:	697b      	ldr	r3, [r7, #20]
}
 800d03e:	4618      	mov	r0, r3
 800d040:	3720      	adds	r7, #32
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}
 800d046:	bf00      	nop
 800d048:	20003244 	.word	0x20003244
 800d04c:	20003248 	.word	0x20003248
 800d050:	2000323c 	.word	0x2000323c
 800d054:	2000324c 	.word	0x2000324c
 800d058:	20003250 	.word	0x20003250

0800d05c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b084      	sub	sp, #16
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d039      	beq.n	800d0e2 <vPortFree+0x86>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800d06e:	2308      	movs	r3, #8
 800d070:	425b      	negs	r3, r3
 800d072:	68fa      	ldr	r2, [r7, #12]
 800d074:	4413      	add	r3, r2
 800d076:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800d07c:	68bb      	ldr	r3, [r7, #8]
 800d07e:	685b      	ldr	r3, [r3, #4]
 800d080:	2b00      	cmp	r3, #0
 800d082:	db02      	blt.n	800d08a <vPortFree+0x2e>
 800d084:	f7ff fed8 	bl	800ce38 <ulSetInterruptMask>
 800d088:	e7fe      	b.n	800d088 <vPortFree+0x2c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d08a:	68bb      	ldr	r3, [r7, #8]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d002      	beq.n	800d098 <vPortFree+0x3c>
 800d092:	f7ff fed1 	bl	800ce38 <ulSetInterruptMask>
 800d096:	e7fe      	b.n	800d096 <vPortFree+0x3a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800d098:	68bb      	ldr	r3, [r7, #8]
 800d09a:	685b      	ldr	r3, [r3, #4]
 800d09c:	0fdb      	lsrs	r3, r3, #31
 800d09e:	f003 0301 	and.w	r3, r3, #1
 800d0a2:	b2db      	uxtb	r3, r3
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d01c      	beq.n	800d0e2 <vPortFree+0x86>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800d0a8:	68bb      	ldr	r3, [r7, #8]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d118      	bne.n	800d0e2 <vPortFree+0x86>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800d0b0:	68bb      	ldr	r3, [r7, #8]
 800d0b2:	685b      	ldr	r3, [r3, #4]
 800d0b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800d0bc:	f7fe fd1c 	bl	800baf8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800d0c0:	68bb      	ldr	r3, [r7, #8]
 800d0c2:	685a      	ldr	r2, [r3, #4]
 800d0c4:	4b09      	ldr	r3, [pc, #36]	; (800d0ec <vPortFree+0x90>)
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	4413      	add	r3, r2
 800d0ca:	4a08      	ldr	r2, [pc, #32]	; (800d0ec <vPortFree+0x90>)
 800d0cc:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d0ce:	68b8      	ldr	r0, [r7, #8]
 800d0d0:	f000 f86c 	bl	800d1ac <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800d0d4:	4b06      	ldr	r3, [pc, #24]	; (800d0f0 <vPortFree+0x94>)
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	3301      	adds	r3, #1
 800d0da:	4a05      	ldr	r2, [pc, #20]	; (800d0f0 <vPortFree+0x94>)
 800d0dc:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800d0de:	f7fe fd19 	bl	800bb14 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800d0e2:	bf00      	nop
 800d0e4:	3710      	adds	r7, #16
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	bd80      	pop	{r7, pc}
 800d0ea:	bf00      	nop
 800d0ec:	20003248 	.word	0x20003248
 800d0f0:	20003254 	.word	0x20003254

0800d0f4 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800d0f4:	b480      	push	{r7}
 800d0f6:	b085      	sub	sp, #20
 800d0f8:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d0fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d0fe:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800d100:	4b25      	ldr	r3, [pc, #148]	; (800d198 <prvHeapInit+0xa4>)
 800d102:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	f003 0307 	and.w	r3, r3, #7
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d00c      	beq.n	800d128 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	3307      	adds	r3, #7
 800d112:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	f023 0307 	bic.w	r3, r3, #7
 800d11a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800d11c:	68ba      	ldr	r2, [r7, #8]
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	1ad3      	subs	r3, r2, r3
 800d122:	4a1d      	ldr	r2, [pc, #116]	; (800d198 <prvHeapInit+0xa4>)
 800d124:	4413      	add	r3, r2
 800d126:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d12c:	4a1b      	ldr	r2, [pc, #108]	; (800d19c <prvHeapInit+0xa8>)
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800d132:	4b1a      	ldr	r3, [pc, #104]	; (800d19c <prvHeapInit+0xa8>)
 800d134:	2200      	movs	r2, #0
 800d136:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	68ba      	ldr	r2, [r7, #8]
 800d13c:	4413      	add	r3, r2
 800d13e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800d140:	2208      	movs	r2, #8
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	1a9b      	subs	r3, r3, r2
 800d146:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	f023 0307 	bic.w	r3, r3, #7
 800d14e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	4a13      	ldr	r2, [pc, #76]	; (800d1a0 <prvHeapInit+0xac>)
 800d154:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800d156:	4b12      	ldr	r3, [pc, #72]	; (800d1a0 <prvHeapInit+0xac>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	2200      	movs	r2, #0
 800d15c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800d15e:	4b10      	ldr	r3, [pc, #64]	; (800d1a0 <prvHeapInit+0xac>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	2200      	movs	r2, #0
 800d164:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	68fa      	ldr	r2, [r7, #12]
 800d16e:	1ad2      	subs	r2, r2, r3
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d174:	4b0a      	ldr	r3, [pc, #40]	; (800d1a0 <prvHeapInit+0xac>)
 800d176:	681a      	ldr	r2, [r3, #0]
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	685b      	ldr	r3, [r3, #4]
 800d180:	4a08      	ldr	r2, [pc, #32]	; (800d1a4 <prvHeapInit+0xb0>)
 800d182:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	685b      	ldr	r3, [r3, #4]
 800d188:	4a07      	ldr	r2, [pc, #28]	; (800d1a8 <prvHeapInit+0xb4>)
 800d18a:	6013      	str	r3, [r2, #0]
}
 800d18c:	bf00      	nop
 800d18e:	3714      	adds	r7, #20
 800d190:	46bd      	mov	sp, r7
 800d192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d196:	4770      	bx	lr
 800d198:	2000123c 	.word	0x2000123c
 800d19c:	2000323c 	.word	0x2000323c
 800d1a0:	20003244 	.word	0x20003244
 800d1a4:	2000324c 	.word	0x2000324c
 800d1a8:	20003248 	.word	0x20003248

0800d1ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800d1ac:	b480      	push	{r7}
 800d1ae:	b085      	sub	sp, #20
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d1b4:	4b28      	ldr	r3, [pc, #160]	; (800d258 <prvInsertBlockIntoFreeList+0xac>)
 800d1b6:	60fb      	str	r3, [r7, #12]
 800d1b8:	e002      	b.n	800d1c0 <prvInsertBlockIntoFreeList+0x14>
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	60fb      	str	r3, [r7, #12]
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	687a      	ldr	r2, [r7, #4]
 800d1c6:	429a      	cmp	r2, r3
 800d1c8:	d8f7      	bhi.n	800d1ba <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	685b      	ldr	r3, [r3, #4]
 800d1d2:	68ba      	ldr	r2, [r7, #8]
 800d1d4:	4413      	add	r3, r2
 800d1d6:	687a      	ldr	r2, [r7, #4]
 800d1d8:	429a      	cmp	r2, r3
 800d1da:	d108      	bne.n	800d1ee <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	685a      	ldr	r2, [r3, #4]
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	685b      	ldr	r3, [r3, #4]
 800d1e4:	441a      	add	r2, r3
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	685b      	ldr	r3, [r3, #4]
 800d1f6:	68ba      	ldr	r2, [r7, #8]
 800d1f8:	441a      	add	r2, r3
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	429a      	cmp	r2, r3
 800d200:	d118      	bne.n	800d234 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	681a      	ldr	r2, [r3, #0]
 800d206:	4b15      	ldr	r3, [pc, #84]	; (800d25c <prvInsertBlockIntoFreeList+0xb0>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	429a      	cmp	r2, r3
 800d20c:	d00d      	beq.n	800d22a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	685a      	ldr	r2, [r3, #4]
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	685b      	ldr	r3, [r3, #4]
 800d218:	441a      	add	r2, r3
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	681a      	ldr	r2, [r3, #0]
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	601a      	str	r2, [r3, #0]
 800d228:	e008      	b.n	800d23c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d22a:	4b0c      	ldr	r3, [pc, #48]	; (800d25c <prvInsertBlockIntoFreeList+0xb0>)
 800d22c:	681a      	ldr	r2, [r3, #0]
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	601a      	str	r2, [r3, #0]
 800d232:	e003      	b.n	800d23c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	681a      	ldr	r2, [r3, #0]
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800d23c:	68fa      	ldr	r2, [r7, #12]
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	429a      	cmp	r2, r3
 800d242:	d002      	beq.n	800d24a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	687a      	ldr	r2, [r7, #4]
 800d248:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800d24a:	bf00      	nop
 800d24c:	3714      	adds	r7, #20
 800d24e:	46bd      	mov	sp, r7
 800d250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d254:	4770      	bx	lr
 800d256:	bf00      	nop
 800d258:	2000323c 	.word	0x2000323c
 800d25c:	20003244 	.word	0x20003244

0800d260 <memset>:
 800d260:	4402      	add	r2, r0
 800d262:	4603      	mov	r3, r0
 800d264:	4293      	cmp	r3, r2
 800d266:	d100      	bne.n	800d26a <memset+0xa>
 800d268:	4770      	bx	lr
 800d26a:	f803 1b01 	strb.w	r1, [r3], #1
 800d26e:	e7f9      	b.n	800d264 <memset+0x4>

0800d270 <__libc_init_array>:
 800d270:	b570      	push	{r4, r5, r6, lr}
 800d272:	4d0d      	ldr	r5, [pc, #52]	; (800d2a8 <__libc_init_array+0x38>)
 800d274:	2600      	movs	r6, #0
 800d276:	4c0d      	ldr	r4, [pc, #52]	; (800d2ac <__libc_init_array+0x3c>)
 800d278:	1b64      	subs	r4, r4, r5
 800d27a:	10a4      	asrs	r4, r4, #2
 800d27c:	42a6      	cmp	r6, r4
 800d27e:	d109      	bne.n	800d294 <__libc_init_array+0x24>
 800d280:	4d0b      	ldr	r5, [pc, #44]	; (800d2b0 <__libc_init_array+0x40>)
 800d282:	2600      	movs	r6, #0
 800d284:	4c0b      	ldr	r4, [pc, #44]	; (800d2b4 <__libc_init_array+0x44>)
 800d286:	f000 f825 	bl	800d2d4 <_init>
 800d28a:	1b64      	subs	r4, r4, r5
 800d28c:	10a4      	asrs	r4, r4, #2
 800d28e:	42a6      	cmp	r6, r4
 800d290:	d105      	bne.n	800d29e <__libc_init_array+0x2e>
 800d292:	bd70      	pop	{r4, r5, r6, pc}
 800d294:	f855 3b04 	ldr.w	r3, [r5], #4
 800d298:	3601      	adds	r6, #1
 800d29a:	4798      	blx	r3
 800d29c:	e7ee      	b.n	800d27c <__libc_init_array+0xc>
 800d29e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2a2:	3601      	adds	r6, #1
 800d2a4:	4798      	blx	r3
 800d2a6:	e7f2      	b.n	800d28e <__libc_init_array+0x1e>
 800d2a8:	0800d43c 	.word	0x0800d43c
 800d2ac:	0800d43c 	.word	0x0800d43c
 800d2b0:	0800d43c 	.word	0x0800d43c
 800d2b4:	0800d440 	.word	0x0800d440

0800d2b8 <memcpy>:
 800d2b8:	440a      	add	r2, r1
 800d2ba:	1e43      	subs	r3, r0, #1
 800d2bc:	4291      	cmp	r1, r2
 800d2be:	d100      	bne.n	800d2c2 <memcpy+0xa>
 800d2c0:	4770      	bx	lr
 800d2c2:	b510      	push	{r4, lr}
 800d2c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2c8:	4291      	cmp	r1, r2
 800d2ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d2ce:	d1f9      	bne.n	800d2c4 <memcpy+0xc>
 800d2d0:	bd10      	pop	{r4, pc}
	...

0800d2d4 <_init>:
 800d2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2d6:	bf00      	nop
 800d2d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2da:	bc08      	pop	{r3}
 800d2dc:	469e      	mov	lr, r3
 800d2de:	4770      	bx	lr

0800d2e0 <_fini>:
 800d2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2e2:	bf00      	nop
 800d2e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2e6:	bc08      	pop	{r3}
 800d2e8:	469e      	mov	lr, r3
 800d2ea:	4770      	bx	lr
