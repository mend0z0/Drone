
_TestCode_STM32U575.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8b4  08000238  08000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  0800aaec  0800aaec  0001aaec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ac14  0800ac14  0001ac14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ac1c  0800ac1c  0001ac1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ac20  0800ac20  0001ac20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000d  20000000  0800ac24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002d8  20000010  0800ac31  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200002e8  0800ac31  000202e8  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0002000d  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020043  2**0
                  CONTENTS, READONLY
 11 .debug_info   00025a64  00000000  00000000  00020086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003dec  00000000  00000000  00045aea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001f38  00000000  00000000  000498d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000186f  00000000  00000000  0004b810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00037789  00000000  00000000  0004d07f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000274a2  00000000  00000000  00084808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016878b  00000000  00000000  000abcaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000088f4  00000000  00000000  00214438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000009a  00000000  00000000  0021cd2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000010 	.word	0x20000010
 8000254:	00000000 	.word	0x00000000
 8000258:	0800aad4 	.word	0x0800aad4

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000014 	.word	0x20000014
 8000274:	0800aad4 	.word	0x0800aad4

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295
 8000288:	f04f 30ff 	movne.w	r0, #4294967295
 800028c:	f000 b982 	b.w	8000594 <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002ae:	460d      	mov	r5, r1
 80002b0:	4604      	mov	r4, r0
 80002b2:	460f      	mov	r7, r1
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d146      	bne.n	8000346 <__udivmoddi4+0x9e>
 80002b8:	428a      	cmp	r2, r1
 80002ba:	4694      	mov	ip, r2
 80002bc:	d95e      	bls.n	800037c <__udivmoddi4+0xd4>
 80002be:	fab2 f382 	clz	r3, r2
 80002c2:	b143      	cbz	r3, 80002d6 <__udivmoddi4+0x2e>
 80002c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c8:	f1c3 0220 	rsb	r2, r3, #32
 80002cc:	409f      	lsls	r7, r3
 80002ce:	409c      	lsls	r4, r3
 80002d0:	fa20 f202 	lsr.w	r2, r0, r2
 80002d4:	4317      	orrs	r7, r2
 80002d6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002da:	fa1f f58c 	uxth.w	r5, ip
 80002de:	0c22      	lsrs	r2, r4, #16
 80002e0:	fbb7 f1fe 	udiv	r1, r7, lr
 80002e4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e8:	fb01 f005 	mul.w	r0, r1, r5
 80002ec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f0:	4290      	cmp	r0, r2
 80002f2:	d908      	bls.n	8000306 <__udivmoddi4+0x5e>
 80002f4:	eb1c 0202 	adds.w	r2, ip, r2
 80002f8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002fc:	d202      	bcs.n	8000304 <__udivmoddi4+0x5c>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f200 8134 	bhi.w	800056c <__udivmoddi4+0x2c4>
 8000304:	4639      	mov	r1, r7
 8000306:	1a12      	subs	r2, r2, r0
 8000308:	b2a4      	uxth	r4, r4
 800030a:	fbb2 f0fe 	udiv	r0, r2, lr
 800030e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800031a:	42a5      	cmp	r5, r4
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x88>
 800031e:	eb1c 0404 	adds.w	r4, ip, r4
 8000322:	f100 32ff 	add.w	r2, r0, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x86>
 8000328:	42a5      	cmp	r5, r4
 800032a:	f200 8119 	bhi.w	8000560 <__udivmoddi4+0x2b8>
 800032e:	4610      	mov	r0, r2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0x9a>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xb4>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80fc 	beq.w	8000548 <__udivmoddi4+0x2a0>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d14c      	bne.n	80003fe <__udivmoddi4+0x156>
 8000364:	42ab      	cmp	r3, r5
 8000366:	f0c0 80f2 	bcc.w	800054e <__udivmoddi4+0x2a6>
 800036a:	4282      	cmp	r2, r0
 800036c:	f240 80ef 	bls.w	800054e <__udivmoddi4+0x2a6>
 8000370:	4608      	mov	r0, r1
 8000372:	2e00      	cmp	r6, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0x9a>
 8000376:	e9c6 4700 	strd	r4, r7, [r6]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0x9a>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xd8>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f382 	clz	r3, r2
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 809f 	bne.w	80004c8 <__udivmoddi4+0x220>
 800038a:	1a8a      	subs	r2, r1, r2
 800038c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000390:	fa1f f78c 	uxth.w	r7, ip
 8000394:	2101      	movs	r1, #1
 8000396:	fbb2 f5fe 	udiv	r5, r2, lr
 800039a:	fb0e 2015 	mls	r0, lr, r5, r2
 800039e:	0c22      	lsrs	r2, r4, #16
 80003a0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003a4:	fb07 f005 	mul.w	r0, r7, r5
 80003a8:	4290      	cmp	r0, r2
 80003aa:	d90f      	bls.n	80003cc <__udivmoddi4+0x124>
 80003ac:	eb1c 0202 	adds.w	r2, ip, r2
 80003b0:	f105 38ff 	add.w	r8, r5, #4294967295
 80003b4:	bf2c      	ite	cs
 80003b6:	f04f 0901 	movcs.w	r9, #1
 80003ba:	f04f 0900 	movcc.w	r9, #0
 80003be:	4290      	cmp	r0, r2
 80003c0:	d903      	bls.n	80003ca <__udivmoddi4+0x122>
 80003c2:	f1b9 0f00 	cmp.w	r9, #0
 80003c6:	f000 80ce 	beq.w	8000566 <__udivmoddi4+0x2be>
 80003ca:	4645      	mov	r5, r8
 80003cc:	1a12      	subs	r2, r2, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb2 f0fe 	udiv	r0, r2, lr
 80003d4:	fb0e 2210 	mls	r2, lr, r0, r2
 80003d8:	fb00 f707 	mul.w	r7, r0, r7
 80003dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e0:	42a7      	cmp	r7, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x14e>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x14c>
 80003ee:	42a7      	cmp	r7, r4
 80003f0:	f200 80b3 	bhi.w	800055a <__udivmoddi4+0x2b2>
 80003f4:	4610      	mov	r0, r2
 80003f6:	1be4      	subs	r4, r4, r7
 80003f8:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003fc:	e79c      	b.n	8000338 <__udivmoddi4+0x90>
 80003fe:	f1c1 0420 	rsb	r4, r1, #32
 8000402:	408b      	lsls	r3, r1
 8000404:	fa05 fc01 	lsl.w	ip, r5, r1
 8000408:	fa22 f704 	lsr.w	r7, r2, r4
 800040c:	40e5      	lsrs	r5, r4
 800040e:	408a      	lsls	r2, r1
 8000410:	431f      	orrs	r7, r3
 8000412:	fa20 f304 	lsr.w	r3, r0, r4
 8000416:	4088      	lsls	r0, r1
 8000418:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800041c:	ea43 030c 	orr.w	r3, r3, ip
 8000420:	fa1f fc87 	uxth.w	ip, r7
 8000424:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000428:	fbb5 fef8 	udiv	lr, r5, r8
 800042c:	fb08 551e 	mls	r5, r8, lr, r5
 8000430:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a9      	cmp	r9, r5
 800043a:	d90e      	bls.n	800045a <__udivmoddi4+0x1b2>
 800043c:	197d      	adds	r5, r7, r5
 800043e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000442:	bf2c      	ite	cs
 8000444:	f04f 0b01 	movcs.w	fp, #1
 8000448:	f04f 0b00 	movcc.w	fp, #0
 800044c:	45a9      	cmp	r9, r5
 800044e:	d903      	bls.n	8000458 <__udivmoddi4+0x1b0>
 8000450:	f1bb 0f00 	cmp.w	fp, #0
 8000454:	f000 808d 	beq.w	8000572 <__udivmoddi4+0x2ca>
 8000458:	46d6      	mov	lr, sl
 800045a:	eba5 0509 	sub.w	r5, r5, r9
 800045e:	fa1f f983 	uxth.w	r9, r3
 8000462:	fbb5 f3f8 	udiv	r3, r5, r8
 8000466:	fb08 5513 	mls	r5, r8, r3, r5
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000472:	45ac      	cmp	ip, r5
 8000474:	d906      	bls.n	8000484 <__udivmoddi4+0x1dc>
 8000476:	197d      	adds	r5, r7, r5
 8000478:	f103 38ff 	add.w	r8, r3, #4294967295
 800047c:	d201      	bcs.n	8000482 <__udivmoddi4+0x1da>
 800047e:	45ac      	cmp	ip, r5
 8000480:	d87e      	bhi.n	8000580 <__udivmoddi4+0x2d8>
 8000482:	4643      	mov	r3, r8
 8000484:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000488:	eba5 050c 	sub.w	r5, r5, ip
 800048c:	fba3 9802 	umull	r9, r8, r3, r2
 8000490:	4545      	cmp	r5, r8
 8000492:	46ce      	mov	lr, r9
 8000494:	46c4      	mov	ip, r8
 8000496:	d302      	bcc.n	800049e <__udivmoddi4+0x1f6>
 8000498:	d106      	bne.n	80004a8 <__udivmoddi4+0x200>
 800049a:	4548      	cmp	r0, r9
 800049c:	d204      	bcs.n	80004a8 <__udivmoddi4+0x200>
 800049e:	3b01      	subs	r3, #1
 80004a0:	ebb9 0e02 	subs.w	lr, r9, r2
 80004a4:	eb68 0c07 	sbc.w	ip, r8, r7
 80004a8:	2e00      	cmp	r6, #0
 80004aa:	d06f      	beq.n	800058c <__udivmoddi4+0x2e4>
 80004ac:	ebb0 020e 	subs.w	r2, r0, lr
 80004b0:	eb65 050c 	sbc.w	r5, r5, ip
 80004b4:	40ca      	lsrs	r2, r1
 80004b6:	fa05 f404 	lsl.w	r4, r5, r4
 80004ba:	40cd      	lsrs	r5, r1
 80004bc:	4618      	mov	r0, r3
 80004be:	4314      	orrs	r4, r2
 80004c0:	2100      	movs	r1, #0
 80004c2:	e9c6 4500 	strd	r4, r5, [r6]
 80004c6:	e73c      	b.n	8000342 <__udivmoddi4+0x9a>
 80004c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004cc:	f1c3 0220 	rsb	r2, r3, #32
 80004d0:	4099      	lsls	r1, r3
 80004d2:	409c      	lsls	r4, r3
 80004d4:	40d5      	lsrs	r5, r2
 80004d6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004da:	fa20 f202 	lsr.w	r2, r0, r2
 80004de:	fa1f f78c 	uxth.w	r7, ip
 80004e2:	fbb5 f0fe 	udiv	r0, r5, lr
 80004e6:	430a      	orrs	r2, r1
 80004e8:	fb0e 5510 	mls	r5, lr, r0, r5
 80004ec:	0c11      	lsrs	r1, r2, #16
 80004ee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004f2:	fb00 f507 	mul.w	r5, r0, r7
 80004f6:	428d      	cmp	r5, r1
 80004f8:	d90e      	bls.n	8000518 <__udivmoddi4+0x270>
 80004fa:	eb1c 0101 	adds.w	r1, ip, r1
 80004fe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000502:	bf2c      	ite	cs
 8000504:	f04f 0901 	movcs.w	r9, #1
 8000508:	f04f 0900 	movcc.w	r9, #0
 800050c:	428d      	cmp	r5, r1
 800050e:	d902      	bls.n	8000516 <__udivmoddi4+0x26e>
 8000510:	f1b9 0f00 	cmp.w	r9, #0
 8000514:	d031      	beq.n	800057a <__udivmoddi4+0x2d2>
 8000516:	4640      	mov	r0, r8
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5fe 	udiv	r5, r1, lr
 8000520:	fb0e 1115 	mls	r1, lr, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f107 	mul.w	r1, r5, r7
 800052c:	4291      	cmp	r1, r2
 800052e:	d907      	bls.n	8000540 <__udivmoddi4+0x298>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d201      	bcs.n	800053e <__udivmoddi4+0x296>
 800053a:	4291      	cmp	r1, r2
 800053c:	d823      	bhi.n	8000586 <__udivmoddi4+0x2de>
 800053e:	4645      	mov	r5, r8
 8000540:	1a52      	subs	r2, r2, r1
 8000542:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000546:	e726      	b.n	8000396 <__udivmoddi4+0xee>
 8000548:	4631      	mov	r1, r6
 800054a:	4630      	mov	r0, r6
 800054c:	e6f9      	b.n	8000342 <__udivmoddi4+0x9a>
 800054e:	1a84      	subs	r4, r0, r2
 8000550:	eb65 0203 	sbc.w	r2, r5, r3
 8000554:	2001      	movs	r0, #1
 8000556:	4617      	mov	r7, r2
 8000558:	e70b      	b.n	8000372 <__udivmoddi4+0xca>
 800055a:	4464      	add	r4, ip
 800055c:	3802      	subs	r0, #2
 800055e:	e74a      	b.n	80003f6 <__udivmoddi4+0x14e>
 8000560:	4464      	add	r4, ip
 8000562:	3802      	subs	r0, #2
 8000564:	e6e4      	b.n	8000330 <__udivmoddi4+0x88>
 8000566:	3d02      	subs	r5, #2
 8000568:	4462      	add	r2, ip
 800056a:	e72f      	b.n	80003cc <__udivmoddi4+0x124>
 800056c:	3902      	subs	r1, #2
 800056e:	4462      	add	r2, ip
 8000570:	e6c9      	b.n	8000306 <__udivmoddi4+0x5e>
 8000572:	f1ae 0e02 	sub.w	lr, lr, #2
 8000576:	443d      	add	r5, r7
 8000578:	e76f      	b.n	800045a <__udivmoddi4+0x1b2>
 800057a:	3802      	subs	r0, #2
 800057c:	4461      	add	r1, ip
 800057e:	e7cb      	b.n	8000518 <__udivmoddi4+0x270>
 8000580:	3b02      	subs	r3, #2
 8000582:	443d      	add	r5, r7
 8000584:	e77e      	b.n	8000484 <__udivmoddi4+0x1dc>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	e7d9      	b.n	8000540 <__udivmoddi4+0x298>
 800058c:	4618      	mov	r0, r3
 800058e:	4631      	mov	r1, r6
 8000590:	e6d7      	b.n	8000342 <__udivmoddi4+0x9a>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059c:	f001 f930 	bl	8001800 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a0:	f000 f84e 	bl	8000640 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005a4:	f000 f8c0 	bl	8000728 <PeriphCommonClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80005a8:	f000 f8f1 	bl	800078e <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ac:	f000 fb8a 	bl	8000cc4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005b0:	f000 f904 	bl	80007bc <MX_ADC1_Init>
  MX_DAC1_Init();
 80005b4:	f000 f946 	bl	8000844 <MX_DAC1_Init>
  MX_I2C1_Init();
 80005b8:	f000 f98c 	bl	80008d4 <MX_I2C1_Init>
  MX_LPTIM1_Init();
 80005bc:	f000 f9f6 	bl	80009ac <MX_LPTIM1_Init>
  MX_LPUART1_UART_Init();
 80005c0:	f000 fa26 	bl	8000a10 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 80005c4:	f000 fae6 	bl	8000b94 <MX_TIM2_Init>
  MX_ICACHE_Init();
 80005c8:	f000 f9c4 	bl	8000954 <MX_ICACHE_Init>
  MX_SPI1_Init();
 80005cc:	f000 fa72 	bl	8000ab4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_LPTIM_Counter_Start_IT( &hlptim1);
 80005d0:	4816      	ldr	r0, [pc, #88]	; (800062c <main+0x94>)
 80005d2:	f002 fdcd 	bl	8003170 <HAL_LPTIM_Counter_Start_IT>

  HAL_TIM_PWM_Start_IT( &htim2, TIM_CHANNEL_1);
 80005d6:	2100      	movs	r1, #0
 80005d8:	4815      	ldr	r0, [pc, #84]	; (8000630 <main+0x98>)
 80005da:	f007 fd9b 	bl	8008114 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT( &htim2, TIM_CHANNEL_2);
 80005de:	2104      	movs	r1, #4
 80005e0:	4813      	ldr	r0, [pc, #76]	; (8000630 <main+0x98>)
 80005e2:	f007 fd97 	bl	8008114 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT( &htim2, TIM_CHANNEL_3);
 80005e6:	2108      	movs	r1, #8
 80005e8:	4811      	ldr	r0, [pc, #68]	; (8000630 <main+0x98>)
 80005ea:	f007 fd93 	bl	8008114 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT( &htim2, TIM_CHANNEL_4);
 80005ee:	210c      	movs	r1, #12
 80005f0:	480f      	ldr	r0, [pc, #60]	; (8000630 <main+0x98>)
 80005f2:	f007 fd8f 	bl	8008114 <HAL_TIM_PWM_Start_IT>

  __HAL_UART_ENABLE(&hlpuart1);
 80005f6:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <main+0x9c>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	4b0d      	ldr	r3, [pc, #52]	; (8000634 <main+0x9c>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f042 0201 	orr.w	r2, r2, #1
 8000604:	601a      	str	r2, [r3, #0]

  __HAL_I2C_ENABLE(&hi2c1);
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <main+0xa0>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	681a      	ldr	r2, [r3, #0]
 800060c:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <main+0xa0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f042 0201 	orr.w	r2, r2, #1
 8000614:	601a      	str	r2, [r3, #0]

  __HAL_SPI_ENABLE(&hspi1);
 8000616:	4b09      	ldr	r3, [pc, #36]	; (800063c <main+0xa4>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	681a      	ldr	r2, [r3, #0]
 800061c:	4b07      	ldr	r3, [pc, #28]	; (800063c <main+0xa4>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f042 0201 	orr.w	r2, r2, #1
 8000624:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  _init_LCD();
 8000626:	f000 fbff 	bl	8000e28 <_init_LCD>


  while (1)
 800062a:	e7fe      	b.n	800062a <main+0x92>
 800062c:	20000120 	.word	0x20000120
 8000630:	20000294 	.word	0x20000294
 8000634:	20000170 	.word	0x20000170
 8000638:	200000cc 	.word	0x200000cc
 800063c:	20000204 	.word	0x20000204

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b09e      	sub	sp, #120	; 0x78
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0318 	add.w	r3, r7, #24
 800064a:	2260      	movs	r2, #96	; 0x60
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f00a fa14 	bl	800aa7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	463b      	mov	r3, r7
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
 8000660:	611a      	str	r2, [r3, #16]
 8000662:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000664:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8000668:	f003 f84e 	bl	8003708 <HAL_PWREx_ControlVoltageScaling>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000672:	f000 fc4f 	bl	8000f14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000676:	235a      	movs	r3, #90	; 0x5a
 8000678:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI|RCC_OSCILLATORTYPE_MSIK;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800067e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000680:	2310      	movs	r3, #16
 8000682:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000684:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000688:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800068a:	2301      	movs	r3, #1
 800068c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800068e:	2310      	movs	r3, #16
 8000690:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_2;
 8000692:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000696:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIKClockRange = RCC_MSIKRANGE_4;
 800069c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80006a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIKState = RCC_MSIK_ON;
 80006a2:	2310      	movs	r3, #16
 80006a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a6:	2302      	movs	r3, #2
 80006a8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006aa:	2301      	movs	r3, #1
 80006ac:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006b2:	2304      	movs	r3, #4
 80006b4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 80006b6:	2378      	movs	r3, #120	; 0x78
 80006b8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006be:	2302      	movs	r3, #2
 80006c0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 4;
 80006c2:	2304      	movs	r3, #4
 80006c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ce:	f107 0318 	add.w	r3, r7, #24
 80006d2:	4618      	mov	r0, r3
 80006d4:	f003 f8c4 	bl	8003860 <HAL_RCC_OscConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80006de:	f000 fc19 	bl	8000f14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e2:	231f      	movs	r3, #31
 80006e4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e6:	2303      	movs	r3, #3
 80006e8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006fa:	463b      	mov	r3, r7
 80006fc:	2103      	movs	r1, #3
 80006fe:	4618      	mov	r0, r3
 8000700:	f003 ff8a 	bl	8004618 <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800070a:	f000 fc03 	bl	8000f14 <Error_Handler>
  }

  /** Enable the force of MSIK in stop mode
  */
  __HAL_RCC_MSIKSTOP_ENABLE();
 800070e:	4b05      	ldr	r3, [pc, #20]	; (8000724 <SystemClock_Config+0xe4>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a04      	ldr	r2, [pc, #16]	; (8000724 <SystemClock_Config+0xe4>)
 8000714:	f043 0302 	orr.w	r3, r3, #2
 8000718:	6013      	str	r3, [r2, #0]
}
 800071a:	bf00      	nop
 800071c:	3778      	adds	r7, #120	; 0x78
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	46020c00 	.word	0x46020c00

08000728 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b0b0      	sub	sp, #192	; 0xc0
 800072c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800072e:	463b      	mov	r3, r7
 8000730:	22c0      	movs	r2, #192	; 0xc0
 8000732:	2100      	movs	r1, #0
 8000734:	4618      	mov	r0, r3
 8000736:	f00a f9a1 	bl	800aa7c <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 800073a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800073e:	f04f 0300 	mov.w	r3, #0
 8000742:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_PLL2;
 8000746:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800074a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_MSI;
 800074e:	2301      	movs	r3, #1
 8000750:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLL2.PLL2M = 4;
 8000752:	2304      	movs	r3, #4
 8000754:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLL2.PLL2N = 120;
 8000756:	2378      	movs	r3, #120	; 0x78
 8000758:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLL2.PLL2P = 2;
 800075a:	2302      	movs	r3, #2
 800075c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLL2.PLL2Q = 2;
 800075e:	2302      	movs	r3, #2
 8000760:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLL2.PLL2R = 20;
 8000762:	2314      	movs	r3, #20
 8000764:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_0;
 8000766:	2300      	movs	r3, #0
 8000768:	623b      	str	r3, [r7, #32]
  PeriphClkInit.PLL2.PLL2FRACN = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVR;
 800076e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000772:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000774:	463b      	mov	r3, r7
 8000776:	4618      	mov	r0, r3
 8000778:	f004 fb1e 	bl	8004db8 <HAL_RCCEx_PeriphCLKConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <PeriphCommonClock_Config+0x5e>
  {
    Error_Handler();
 8000782:	f000 fbc7 	bl	8000f14 <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	37c0      	adds	r7, #192	; 0xc0
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800078e:	b580      	push	{r7, lr}
 8000790:	b082      	sub	sp, #8
 8000792:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000794:	f003 f844 	bl	8003820 <HAL_PWREx_EnableVddIO2>

  PWR_PVDTypeDef sConfigPVD = {0};
 8000798:	463b      	mov	r3, r7
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]

  /*
   * PVD Configuration
   */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 80007a8:	463b      	mov	r3, r7
 80007aa:	4618      	mov	r0, r3
 80007ac:	f002 ff2e 	bl	800360c <HAL_PWR_ConfigPVD>

  /*
   * Enable the PVD Output
   */
  HAL_PWR_EnablePVD();
 80007b0:	f002 ff9a 	bl	80036e8 <HAL_PWR_EnablePVD>
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80007b4:	bf00      	nop
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007c0:	4b1e      	ldr	r3, [pc, #120]	; (800083c <MX_ADC1_Init+0x80>)
 80007c2:	4a1f      	ldr	r2, [pc, #124]	; (8000840 <MX_ADC1_Init+0x84>)
 80007c4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007c6:	4b1d      	ldr	r3, [pc, #116]	; (800083c <MX_ADC1_Init+0x80>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 80007cc:	4b1b      	ldr	r3, [pc, #108]	; (800083c <MX_ADC1_Init+0x80>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 80007d2:	4b1a      	ldr	r3, [pc, #104]	; (800083c <MX_ADC1_Init+0x80>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007d8:	4b18      	ldr	r3, [pc, #96]	; (800083c <MX_ADC1_Init+0x80>)
 80007da:	2200      	movs	r2, #0
 80007dc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007de:	4b17      	ldr	r3, [pc, #92]	; (800083c <MX_ADC1_Init+0x80>)
 80007e0:	2204      	movs	r2, #4
 80007e2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007e4:	4b15      	ldr	r3, [pc, #84]	; (800083c <MX_ADC1_Init+0x80>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007ea:	4b14      	ldr	r3, [pc, #80]	; (800083c <MX_ADC1_Init+0x80>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfConversion = 1;
 80007f2:	4b12      	ldr	r3, [pc, #72]	; (800083c <MX_ADC1_Init+0x80>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007f8:	4b10      	ldr	r3, [pc, #64]	; (800083c <MX_ADC1_Init+0x80>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000800:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_ADC1_Init+0x80>)
 8000802:	2200      	movs	r2, #0
 8000804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <MX_ADC1_Init+0x80>)
 800080a:	2200      	movs	r2, #0
 800080c:	669a      	str	r2, [r3, #104]	; 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800080e:	4b0b      	ldr	r3, [pc, #44]	; (800083c <MX_ADC1_Init+0x80>)
 8000810:	2200      	movs	r2, #0
 8000812:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000814:	4b09      	ldr	r3, [pc, #36]	; (800083c <MX_ADC1_Init+0x80>)
 8000816:	2200      	movs	r2, #0
 8000818:	651a      	str	r2, [r3, #80]	; 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <MX_ADC1_Init+0x80>)
 800081c:	2200      	movs	r2, #0
 800081e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <MX_ADC1_Init+0x80>)
 8000822:	2200      	movs	r2, #0
 8000824:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000828:	4804      	ldr	r0, [pc, #16]	; (800083c <MX_ADC1_Init+0x80>)
 800082a:	f001 f96b 	bl	8001b04 <HAL_ADC_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 8000834:	f000 fb6e 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	2000002c 	.word	0x2000002c
 8000840:	42028000 	.word	0x42028000

08000844 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08e      	sub	sp, #56	; 0x38
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800084a:	f107 0308 	add.w	r3, r7, #8
 800084e:	2230      	movs	r2, #48	; 0x30
 8000850:	2100      	movs	r1, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f00a f912 	bl	800aa7c <memset>
  DAC_AutonomousModeConfTypeDef sAutonomousMode = {0};
 8000858:	2300      	movs	r3, #0
 800085a:	607b      	str	r3, [r7, #4]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800085c:	4b1b      	ldr	r3, [pc, #108]	; (80008cc <MX_DAC1_Init+0x88>)
 800085e:	4a1c      	ldr	r2, [pc, #112]	; (80008d0 <MX_DAC1_Init+0x8c>)
 8000860:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000862:	481a      	ldr	r0, [pc, #104]	; (80008cc <MX_DAC1_Init+0x88>)
 8000864:	f001 fd27 	bl	80022b6 <HAL_DAC_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_DAC1_Init+0x2e>
  {
    Error_Handler();
 800086e:	f000 fb51 	bl	8000f14 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8000872:	2300      	movs	r3, #0
 8000874:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000876:	2300      	movs	r3, #0
 8000878:	743b      	strb	r3, [r7, #16]
  sConfig.DAC_SignedFormat = DISABLE;
 800087a:	2300      	movs	r3, #0
 800087c:	747b      	strb	r3, [r7, #17]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000882:	2300      	movs	r3, #0
 8000884:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000886:	2302      	movs	r3, #2
 8000888:	61fb      	str	r3, [r7, #28]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800088a:	2301      	movs	r3, #1
 800088c:	623b      	str	r3, [r7, #32]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000892:	f107 0308 	add.w	r3, r7, #8
 8000896:	2210      	movs	r2, #16
 8000898:	4619      	mov	r1, r3
 800089a:	480c      	ldr	r0, [pc, #48]	; (80008cc <MX_DAC1_Init+0x88>)
 800089c:	f001 fd2e 	bl	80022fc <HAL_DAC_ConfigChannel>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_DAC1_Init+0x66>
  {
    Error_Handler();
 80008a6:	f000 fb35 	bl	8000f14 <Error_Handler>
  }

  /** Configure Autonomous Mode
  */
  sAutonomousMode.AutonomousModeState = DAC_AUTONOMOUS_MODE_DISABLE;
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
  if (HAL_DACEx_SetConfigAutonomousMode(&hdac1, &sAutonomousMode) != HAL_OK)
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	4619      	mov	r1, r3
 80008b2:	4806      	ldr	r0, [pc, #24]	; (80008cc <MX_DAC1_Init+0x88>)
 80008b4:	f001 fec0 	bl	8002638 <HAL_DACEx_SetConfigAutonomousMode>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_DAC1_Init+0x7e>
  {
    Error_Handler();
 80008be:	f000 fb29 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	3738      	adds	r7, #56	; 0x38
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	200000b8 	.word	0x200000b8
 80008d0:	46021800 	.word	0x46021800

080008d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008d8:	4b1b      	ldr	r3, [pc, #108]	; (8000948 <MX_I2C1_Init+0x74>)
 80008da:	4a1c      	ldr	r2, [pc, #112]	; (800094c <MX_I2C1_Init+0x78>)
 80008dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10911E24;
 80008de:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <MX_I2C1_Init+0x74>)
 80008e0:	4a1b      	ldr	r2, [pc, #108]	; (8000950 <MX_I2C1_Init+0x7c>)
 80008e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008e4:	4b18      	ldr	r3, [pc, #96]	; (8000948 <MX_I2C1_Init+0x74>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008ea:	4b17      	ldr	r3, [pc, #92]	; (8000948 <MX_I2C1_Init+0x74>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008f0:	4b15      	ldr	r3, [pc, #84]	; (8000948 <MX_I2C1_Init+0x74>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008f6:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_I2C1_Init+0x74>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <MX_I2C1_Init+0x74>)
 80008fe:	2200      	movs	r2, #0
 8000900:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_I2C1_Init+0x74>)
 8000904:	2200      	movs	r2, #0
 8000906:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000908:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <MX_I2C1_Init+0x74>)
 800090a:	2200      	movs	r2, #0
 800090c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800090e:	480e      	ldr	r0, [pc, #56]	; (8000948 <MX_I2C1_Init+0x74>)
 8000910:	f002 f960 	bl	8002bd4 <HAL_I2C_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800091a:	f000 fafb 	bl	8000f14 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 800091e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000922:	4809      	ldr	r0, [pc, #36]	; (8000948 <MX_I2C1_Init+0x74>)
 8000924:	f002 fa0b 	bl	8002d3e <HAL_I2CEx_ConfigAnalogFilter>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800092e:	f000 faf1 	bl	8000f14 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000932:	2100      	movs	r1, #0
 8000934:	4804      	ldr	r0, [pc, #16]	; (8000948 <MX_I2C1_Init+0x74>)
 8000936:	f002 fa4d 	bl	8002dd4 <HAL_I2CEx_ConfigDigitalFilter>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000940:	f000 fae8 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	200000cc 	.word	0x200000cc
 800094c:	40005400 	.word	0x40005400
 8000950:	10911e24 	.word	0x10911e24

08000954 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b086      	sub	sp, #24
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ICACHE_Init 0 */

  /* USER CODE END ICACHE_Init 0 */

  ICACHE_RegionConfigTypeDef pRegionConfig = {0};
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]

  /* USER CODE END ICACHE_Init 1 */

  /** Configure and enable a region for memory remapping.
  */
  if (HAL_ICACHE_Disable() != HAL_OK)
 8000968:	f002 fa80 	bl	8002e6c <HAL_ICACHE_Disable>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000972:	f000 facf 	bl	8000f14 <Error_Handler>
  }
  pRegionConfig.BaseAddress = 0x10000000;
 8000976:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800097a:	607b      	str	r3, [r7, #4]
  pRegionConfig.RemapAddress = 0x60000000;
 800097c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000980:	60bb      	str	r3, [r7, #8]
  pRegionConfig.Size = ICACHE_REGIONSIZE_2MB;
 8000982:	2301      	movs	r3, #1
 8000984:	60fb      	str	r3, [r7, #12]
  pRegionConfig.TrafficRoute = ICACHE_MASTER1_PORT;
 8000986:	2300      	movs	r3, #0
 8000988:	613b      	str	r3, [r7, #16]
  pRegionConfig.OutputBurstType = ICACHE_OUTPUT_BURST_WRAP;
 800098a:	2300      	movs	r3, #0
 800098c:	617b      	str	r3, [r7, #20]
  if (HAL_ICACHE_EnableRemapRegion(_NULL, &pRegionConfig) != HAL_OK)
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	4619      	mov	r1, r3
 8000992:	2000      	movs	r0, #0
 8000994:	f002 fa9a 	bl	8002ecc <HAL_ICACHE_EnableRemapRegion>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_ICACHE_Init+0x4e>
  {
    Error_Handler();
 800099e:	f000 fab9 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	3718      	adds	r7, #24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
	...

080009ac <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80009b0:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <MX_LPTIM1_Init+0x5c>)
 80009b2:	4a16      	ldr	r2, [pc, #88]	; (8000a0c <MX_LPTIM1_Init+0x60>)
 80009b4:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80009b6:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <MX_LPTIM1_Init+0x5c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV2;
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <MX_LPTIM1_Init+0x5c>)
 80009be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009c2:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80009c4:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <MX_LPTIM1_Init+0x5c>)
 80009c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009ca:	615a      	str	r2, [r3, #20]
  hlptim1.Init.Period = 2000;
 80009cc:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <MX_LPTIM1_Init+0x5c>)
 80009ce:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80009d2:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <MX_LPTIM1_Init+0x5c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80009da:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <MX_LPTIM1_Init+0x5c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80009e0:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <MX_LPTIM1_Init+0x5c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <MX_LPTIM1_Init+0x5c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	631a      	str	r2, [r3, #48]	; 0x30
  hlptim1.Init.RepetitionCounter = 0;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <MX_LPTIM1_Init+0x5c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <MX_LPTIM1_Init+0x5c>)
 80009f4:	f002 fabc 	bl	8002f70 <HAL_LPTIM_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_LPTIM1_Init+0x56>
  {
    Error_Handler();
 80009fe:	f000 fa89 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000120 	.word	0x20000120
 8000a0c:	46004400 	.word	0x46004400

08000a10 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000a14:	4b25      	ldr	r3, [pc, #148]	; (8000aac <MX_LPUART1_UART_Init+0x9c>)
 8000a16:	4a26      	ldr	r2, [pc, #152]	; (8000ab0 <MX_LPUART1_UART_Init+0xa0>)
 8000a18:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8000a1a:	4b24      	ldr	r3, [pc, #144]	; (8000aac <MX_LPUART1_UART_Init+0x9c>)
 8000a1c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a20:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a22:	4b22      	ldr	r3, [pc, #136]	; (8000aac <MX_LPUART1_UART_Init+0x9c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_2;
 8000a28:	4b20      	ldr	r3, [pc, #128]	; (8000aac <MX_LPUART1_UART_Init+0x9c>)
 8000a2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a2e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000a30:	4b1e      	ldr	r3, [pc, #120]	; (8000aac <MX_LPUART1_UART_Init+0x9c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000a36:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <MX_LPUART1_UART_Init+0x9c>)
 8000a38:	220c      	movs	r2, #12
 8000a3a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3c:	4b1b      	ldr	r3, [pc, #108]	; (8000aac <MX_LPUART1_UART_Init+0x9c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a42:	4b1a      	ldr	r3, [pc, #104]	; (8000aac <MX_LPUART1_UART_Init+0x9c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000a48:	4b18      	ldr	r3, [pc, #96]	; (8000aac <MX_LPUART1_UART_Init+0x9c>)
 8000a4a:	2230      	movs	r2, #48	; 0x30
 8000a4c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000a4e:	4b17      	ldr	r3, [pc, #92]	; (8000aac <MX_LPUART1_UART_Init+0x9c>)
 8000a50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a54:	63da      	str	r2, [r3, #60]	; 0x3c
  hlpuart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000a56:	4b15      	ldr	r3, [pc, #84]	; (8000aac <MX_LPUART1_UART_Init+0x9c>)
 8000a58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5c:	641a      	str	r2, [r3, #64]	; 0x40
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000a5e:	4b13      	ldr	r3, [pc, #76]	; (8000aac <MX_LPUART1_UART_Init+0x9c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000a64:	4811      	ldr	r0, [pc, #68]	; (8000aac <MX_LPUART1_UART_Init+0x9c>)
 8000a66:	f008 ff27 	bl	80098b8 <HAL_UART_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000a70:	f000 fa50 	bl	8000f14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a74:	2100      	movs	r1, #0
 8000a76:	480d      	ldr	r0, [pc, #52]	; (8000aac <MX_LPUART1_UART_Init+0x9c>)
 8000a78:	f009 ff35 	bl	800a8e6 <HAL_UARTEx_SetTxFifoThreshold>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000a82:	f000 fa47 	bl	8000f14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a86:	2100      	movs	r1, #0
 8000a88:	4808      	ldr	r0, [pc, #32]	; (8000aac <MX_LPUART1_UART_Init+0x9c>)
 8000a8a:	f009 ff6a 	bl	800a962 <HAL_UARTEx_SetRxFifoThreshold>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_LPUART1_UART_Init+0x88>
  {
    Error_Handler();
 8000a94:	f000 fa3e 	bl	8000f14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000a98:	4804      	ldr	r0, [pc, #16]	; (8000aac <MX_LPUART1_UART_Init+0x9c>)
 8000a9a:	f009 feeb 	bl	800a874 <HAL_UARTEx_DisableFifoMode>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_LPUART1_UART_Init+0x98>
  {
    Error_Handler();
 8000aa4:	f000 fa36 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000170 	.word	0x20000170
 8000ab0:	46002400 	.word	0x46002400

08000ab4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ac4:	4b31      	ldr	r3, [pc, #196]	; (8000b8c <MX_SPI1_Init+0xd8>)
 8000ac6:	4a32      	ldr	r2, [pc, #200]	; (8000b90 <MX_SPI1_Init+0xdc>)
 8000ac8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aca:	4b30      	ldr	r3, [pc, #192]	; (8000b8c <MX_SPI1_Init+0xd8>)
 8000acc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000ad0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000ad2:	4b2e      	ldr	r3, [pc, #184]	; (8000b8c <MX_SPI1_Init+0xd8>)
 8000ad4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ad8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ada:	4b2c      	ldr	r3, [pc, #176]	; (8000b8c <MX_SPI1_Init+0xd8>)
 8000adc:	2207      	movs	r2, #7
 8000ade:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ae0:	4b2a      	ldr	r3, [pc, #168]	; (8000b8c <MX_SPI1_Init+0xd8>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ae6:	4b29      	ldr	r3, [pc, #164]	; (8000b8c <MX_SPI1_Init+0xd8>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000aec:	4b27      	ldr	r3, [pc, #156]	; (8000b8c <MX_SPI1_Init+0xd8>)
 8000aee:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000af2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000af4:	4b25      	ldr	r3, [pc, #148]	; (8000b8c <MX_SPI1_Init+0xd8>)
 8000af6:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8000afa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000afc:	4b23      	ldr	r3, [pc, #140]	; (8000b8c <MX_SPI1_Init+0xd8>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b02:	4b22      	ldr	r3, [pc, #136]	; (8000b8c <MX_SPI1_Init+0xd8>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b08:	4b20      	ldr	r3, [pc, #128]	; (8000b8c <MX_SPI1_Init+0xd8>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000b0e:	4b1f      	ldr	r3, [pc, #124]	; (8000b8c <MX_SPI1_Init+0xd8>)
 8000b10:	2207      	movs	r2, #7
 8000b12:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b14:	4b1d      	ldr	r3, [pc, #116]	; (8000b8c <MX_SPI1_Init+0xd8>)
 8000b16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b1a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b1c:	4b1b      	ldr	r3, [pc, #108]	; (8000b8c <MX_SPI1_Init+0xd8>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b22:	4b1a      	ldr	r3, [pc, #104]	; (8000b8c <MX_SPI1_Init+0xd8>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b28:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <MX_SPI1_Init+0xd8>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b2e:	4b17      	ldr	r3, [pc, #92]	; (8000b8c <MX_SPI1_Init+0xd8>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b34:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <MX_SPI1_Init+0xd8>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b3a:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <MX_SPI1_Init+0xd8>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <MX_SPI1_Init+0xd8>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <MX_SPI1_Init+0xd8>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <MX_SPI1_Init+0xd8>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b52:	480e      	ldr	r0, [pc, #56]	; (8000b8c <MX_SPI1_Init+0xd8>)
 8000b54:	f006 fdc8 	bl	80076e8 <HAL_SPI_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_SPI1_Init+0xae>
  {
    Error_Handler();
 8000b5e:	f000 f9d9 	bl	8000f14 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000b66:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b6a:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	4619      	mov	r1, r3
 8000b74:	4805      	ldr	r0, [pc, #20]	; (8000b8c <MX_SPI1_Init+0xd8>)
 8000b76:	f007 f9d4 	bl	8007f22 <HAL_SPIEx_SetConfigAutonomousMode>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_SPI1_Init+0xd0>
  {
    Error_Handler();
 8000b80:	f000 f9c8 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b84:	bf00      	nop
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000204 	.word	0x20000204
 8000b90:	40013000 	.word	0x40013000

08000b94 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08e      	sub	sp, #56	; 0x38
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba8:	f107 031c 	add.w	r3, r7, #28
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]
 8000bc0:	611a      	str	r2, [r3, #16]
 8000bc2:	615a      	str	r2, [r3, #20]
 8000bc4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bc6:	4b3e      	ldr	r3, [pc, #248]	; (8000cc0 <MX_TIM2_Init+0x12c>)
 8000bc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bcc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 12000;
 8000bce:	4b3c      	ldr	r3, [pc, #240]	; (8000cc0 <MX_TIM2_Init+0x12c>)
 8000bd0:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8000bd4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd6:	4b3a      	ldr	r3, [pc, #232]	; (8000cc0 <MX_TIM2_Init+0x12c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8000bdc:	4b38      	ldr	r3, [pc, #224]	; (8000cc0 <MX_TIM2_Init+0x12c>)
 8000bde:	2264      	movs	r2, #100	; 0x64
 8000be0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be2:	4b37      	ldr	r3, [pc, #220]	; (8000cc0 <MX_TIM2_Init+0x12c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be8:	4b35      	ldr	r3, [pc, #212]	; (8000cc0 <MX_TIM2_Init+0x12c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bee:	4834      	ldr	r0, [pc, #208]	; (8000cc0 <MX_TIM2_Init+0x12c>)
 8000bf0:	f007 f9d8 	bl	8007fa4 <HAL_TIM_Base_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000bfa:	f000 f98b 	bl	8000f14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c02:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c08:	4619      	mov	r1, r3
 8000c0a:	482d      	ldr	r0, [pc, #180]	; (8000cc0 <MX_TIM2_Init+0x12c>)
 8000c0c:	f007 fe86 	bl	800891c <HAL_TIM_ConfigClockSource>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000c16:	f000 f97d 	bl	8000f14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c1a:	4829      	ldr	r0, [pc, #164]	; (8000cc0 <MX_TIM2_Init+0x12c>)
 8000c1c:	f007 fa19 	bl	8008052 <HAL_TIM_PWM_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000c26:	f000 f975 	bl	8000f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c32:	f107 031c 	add.w	r3, r7, #28
 8000c36:	4619      	mov	r1, r3
 8000c38:	4821      	ldr	r0, [pc, #132]	; (8000cc0 <MX_TIM2_Init+0x12c>)
 8000c3a:	f008 fd35 	bl	80096a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000c44:	f000 f966 	bl	8000f14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c48:	2360      	movs	r3, #96	; 0x60
 8000c4a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 8000c4c:	2332      	movs	r3, #50	; 0x32
 8000c4e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c50:	2300      	movs	r3, #0
 8000c52:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c54:	2300      	movs	r3, #0
 8000c56:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c58:	463b      	mov	r3, r7
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4818      	ldr	r0, [pc, #96]	; (8000cc0 <MX_TIM2_Init+0x12c>)
 8000c60:	f007 fd48 	bl	80086f4 <HAL_TIM_PWM_ConfigChannel>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000c6a:	f000 f953 	bl	8000f14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c6e:	463b      	mov	r3, r7
 8000c70:	2204      	movs	r2, #4
 8000c72:	4619      	mov	r1, r3
 8000c74:	4812      	ldr	r0, [pc, #72]	; (8000cc0 <MX_TIM2_Init+0x12c>)
 8000c76:	f007 fd3d 	bl	80086f4 <HAL_TIM_PWM_ConfigChannel>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000c80:	f000 f948 	bl	8000f14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c84:	463b      	mov	r3, r7
 8000c86:	2208      	movs	r2, #8
 8000c88:	4619      	mov	r1, r3
 8000c8a:	480d      	ldr	r0, [pc, #52]	; (8000cc0 <MX_TIM2_Init+0x12c>)
 8000c8c:	f007 fd32 	bl	80086f4 <HAL_TIM_PWM_ConfigChannel>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000c96:	f000 f93d 	bl	8000f14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c9a:	463b      	mov	r3, r7
 8000c9c:	220c      	movs	r2, #12
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4807      	ldr	r0, [pc, #28]	; (8000cc0 <MX_TIM2_Init+0x12c>)
 8000ca2:	f007 fd27 	bl	80086f4 <HAL_TIM_PWM_ConfigChannel>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8000cac:	f000 f932 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000cb0:	4803      	ldr	r0, [pc, #12]	; (8000cc0 <MX_TIM2_Init+0x12c>)
 8000cb2:	f000 fbf9 	bl	80014a8 <HAL_TIM_MspPostInit>

}
 8000cb6:	bf00      	nop
 8000cb8:	3738      	adds	r7, #56	; 0x38
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000294 	.word	0x20000294

08000cc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08a      	sub	sp, #40	; 0x28
 8000cc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
 8000cd6:	60da      	str	r2, [r3, #12]
 8000cd8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cda:	4b4e      	ldr	r3, [pc, #312]	; (8000e14 <MX_GPIO_Init+0x150>)
 8000cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ce0:	4a4c      	ldr	r2, [pc, #304]	; (8000e14 <MX_GPIO_Init+0x150>)
 8000ce2:	f043 0304 	orr.w	r3, r3, #4
 8000ce6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000cea:	4b4a      	ldr	r3, [pc, #296]	; (8000e14 <MX_GPIO_Init+0x150>)
 8000cec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cf0:	f003 0304 	and.w	r3, r3, #4
 8000cf4:	613b      	str	r3, [r7, #16]
 8000cf6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf8:	4b46      	ldr	r3, [pc, #280]	; (8000e14 <MX_GPIO_Init+0x150>)
 8000cfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cfe:	4a45      	ldr	r2, [pc, #276]	; (8000e14 <MX_GPIO_Init+0x150>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d08:	4b42      	ldr	r3, [pc, #264]	; (8000e14 <MX_GPIO_Init+0x150>)
 8000d0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d16:	4b3f      	ldr	r3, [pc, #252]	; (8000e14 <MX_GPIO_Init+0x150>)
 8000d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d1c:	4a3d      	ldr	r2, [pc, #244]	; (8000e14 <MX_GPIO_Init+0x150>)
 8000d1e:	f043 0310 	orr.w	r3, r3, #16
 8000d22:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d26:	4b3b      	ldr	r3, [pc, #236]	; (8000e14 <MX_GPIO_Init+0x150>)
 8000d28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d2c:	f003 0310 	and.w	r3, r3, #16
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d34:	4b37      	ldr	r3, [pc, #220]	; (8000e14 <MX_GPIO_Init+0x150>)
 8000d36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d3a:	4a36      	ldr	r2, [pc, #216]	; (8000e14 <MX_GPIO_Init+0x150>)
 8000d3c:	f043 0302 	orr.w	r3, r3, #2
 8000d40:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d44:	4b33      	ldr	r3, [pc, #204]	; (8000e14 <MX_GPIO_Init+0x150>)
 8000d46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	607b      	str	r3, [r7, #4]
 8000d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d52:	4b30      	ldr	r3, [pc, #192]	; (8000e14 <MX_GPIO_Init+0x150>)
 8000d54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d58:	4a2e      	ldr	r2, [pc, #184]	; (8000e14 <MX_GPIO_Init+0x150>)
 8000d5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d5e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d62:	4b2c      	ldr	r3, [pc, #176]	; (8000e14 <MX_GPIO_Init+0x150>)
 8000d64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d6c:	603b      	str	r3, [r7, #0]
 8000d6e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8000d70:	2200      	movs	r2, #0
 8000d72:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000d76:	4828      	ldr	r0, [pc, #160]	; (8000e18 <MX_GPIO_Init+0x154>)
 8000d78:	f001 ff14 	bl	8002ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2104      	movs	r1, #4
 8000d80:	4826      	ldr	r0, [pc, #152]	; (8000e1c <MX_GPIO_Init+0x158>)
 8000d82:	f001 ff0f 	bl	8002ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2180      	movs	r1, #128	; 0x80
 8000d8a:	4825      	ldr	r0, [pc, #148]	; (8000e20 <MX_GPIO_Init+0x15c>)
 8000d8c:	f001 ff0a 	bl	8002ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2180      	movs	r1, #128	; 0x80
 8000d94:	4823      	ldr	r0, [pc, #140]	; (8000e24 <MX_GPIO_Init+0x160>)
 8000d96:	f001 ff05 	bl	8002ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8000d9a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000d9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da0:	2301      	movs	r3, #1
 8000da2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da8:	2300      	movs	r3, #0
 8000daa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	4619      	mov	r1, r3
 8000db2:	4819      	ldr	r0, [pc, #100]	; (8000e18 <MX_GPIO_Init+0x154>)
 8000db4:	f001 fd1e 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000db8:	2304      	movs	r3, #4
 8000dba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4813      	ldr	r0, [pc, #76]	; (8000e1c <MX_GPIO_Init+0x158>)
 8000dd0:	f001 fd10 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000dd4:	2380      	movs	r3, #128	; 0x80
 8000dd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	4619      	mov	r1, r3
 8000dea:	480d      	ldr	r0, [pc, #52]	; (8000e20 <MX_GPIO_Init+0x15c>)
 8000dec:	f001 fd02 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000df0:	2380      	movs	r3, #128	; 0x80
 8000df2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df4:	2301      	movs	r3, #1
 8000df6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	4619      	mov	r1, r3
 8000e06:	4807      	ldr	r0, [pc, #28]	; (8000e24 <MX_GPIO_Init+0x160>)
 8000e08:	f001 fcf4 	bl	80027f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e0c:	bf00      	nop
 8000e0e:	3728      	adds	r7, #40	; 0x28
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	46020c00 	.word	0x46020c00
 8000e18:	42020000 	.word	0x42020000
 8000e1c:	42021800 	.word	0x42021800
 8000e20:	42020800 	.word	0x42020800
 8000e24:	42020400 	.word	0x42020400

08000e28 <_init_LCD>:

/* USER CODE BEGIN 4 */

static void _init_LCD( void )
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
	uint8_t tempVar = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin( GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000e32:	2200      	movs	r2, #0
 8000e34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e38:	4833      	ldr	r0, [pc, #204]	; (8000f08 <_init_LCD+0xe0>)
 8000e3a:	f001 feb3 	bl	8002ba4 <HAL_GPIO_WritePin>
	for(uint32_t cnt = 0; cnt < 2000000; ++cnt);
 8000e3e:	2300      	movs	r3, #0
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	e002      	b.n	8000e4a <_init_LCD+0x22>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	3301      	adds	r3, #1
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a2f      	ldr	r2, [pc, #188]	; (8000f0c <_init_LCD+0xe4>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d9f8      	bls.n	8000e44 <_init_LCD+0x1c>
	HAL_GPIO_WritePin( GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000e52:	2201      	movs	r2, #1
 8000e54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e58:	482b      	ldr	r0, [pc, #172]	; (8000f08 <_init_LCD+0xe0>)
 8000e5a:	f001 fea3 	bl	8002ba4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin( GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2140      	movs	r1, #64	; 0x40
 8000e62:	4829      	ldr	r0, [pc, #164]	; (8000f08 <_init_LCD+0xe0>)
 8000e64:	f001 fe9e 	bl	8002ba4 <HAL_GPIO_WritePin>
	tempVar = 0x21;
 8000e68:	2321      	movs	r3, #33	; 0x21
 8000e6a:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(&hspi1, &tempVar, 1, 10);
 8000e6c:	1cf9      	adds	r1, r7, #3
 8000e6e:	230a      	movs	r3, #10
 8000e70:	2201      	movs	r2, #1
 8000e72:	4827      	ldr	r0, [pc, #156]	; (8000f10 <_init_LCD+0xe8>)
 8000e74:	f006 fd4e 	bl	8007914 <HAL_SPI_Transmit>
	tempVar = 0x90;
 8000e78:	2390      	movs	r3, #144	; 0x90
 8000e7a:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(&hspi1, &tempVar, 1, 10);
 8000e7c:	1cf9      	adds	r1, r7, #3
 8000e7e:	230a      	movs	r3, #10
 8000e80:	2201      	movs	r2, #1
 8000e82:	4823      	ldr	r0, [pc, #140]	; (8000f10 <_init_LCD+0xe8>)
 8000e84:	f006 fd46 	bl	8007914 <HAL_SPI_Transmit>
	tempVar = 0x20;
 8000e88:	2320      	movs	r3, #32
 8000e8a:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(&hspi1, &tempVar, 1, 10);
 8000e8c:	1cf9      	adds	r1, r7, #3
 8000e8e:	230a      	movs	r3, #10
 8000e90:	2201      	movs	r2, #1
 8000e92:	481f      	ldr	r0, [pc, #124]	; (8000f10 <_init_LCD+0xe8>)
 8000e94:	f006 fd3e 	bl	8007914 <HAL_SPI_Transmit>
	tempVar = 0x0C;
 8000e98:	230c      	movs	r3, #12
 8000e9a:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(&hspi1, &tempVar, 1, 10);
 8000e9c:	1cf9      	adds	r1, r7, #3
 8000e9e:	230a      	movs	r3, #10
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	481b      	ldr	r0, [pc, #108]	; (8000f10 <_init_LCD+0xe8>)
 8000ea4:	f006 fd36 	bl	8007914 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin( GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	2140      	movs	r1, #64	; 0x40
 8000eac:	4816      	ldr	r0, [pc, #88]	; (8000f08 <_init_LCD+0xe0>)
 8000eae:	f001 fe79 	bl	8002ba4 <HAL_GPIO_WritePin>

	tempVar = 0x0F;
 8000eb2:	230f      	movs	r3, #15
 8000eb4:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(&hspi1, &tempVar, 1, 10);
 8000eb6:	1cf9      	adds	r1, r7, #3
 8000eb8:	230a      	movs	r3, #10
 8000eba:	2201      	movs	r2, #1
 8000ebc:	4814      	ldr	r0, [pc, #80]	; (8000f10 <_init_LCD+0xe8>)
 8000ebe:	f006 fd29 	bl	8007914 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &tempVar, 1, 10);
 8000ec2:	1cf9      	adds	r1, r7, #3
 8000ec4:	230a      	movs	r3, #10
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	4811      	ldr	r0, [pc, #68]	; (8000f10 <_init_LCD+0xe8>)
 8000eca:	f006 fd23 	bl	8007914 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &tempVar, 1, 10);
 8000ece:	1cf9      	adds	r1, r7, #3
 8000ed0:	230a      	movs	r3, #10
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	480e      	ldr	r0, [pc, #56]	; (8000f10 <_init_LCD+0xe8>)
 8000ed6:	f006 fd1d 	bl	8007914 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &tempVar, 1, 10);
 8000eda:	1cf9      	adds	r1, r7, #3
 8000edc:	230a      	movs	r3, #10
 8000ede:	2201      	movs	r2, #1
 8000ee0:	480b      	ldr	r0, [pc, #44]	; (8000f10 <_init_LCD+0xe8>)
 8000ee2:	f006 fd17 	bl	8007914 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &tempVar, 1, 10);
 8000ee6:	1cf9      	adds	r1, r7, #3
 8000ee8:	230a      	movs	r3, #10
 8000eea:	2201      	movs	r2, #1
 8000eec:	4808      	ldr	r0, [pc, #32]	; (8000f10 <_init_LCD+0xe8>)
 8000eee:	f006 fd11 	bl	8007914 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &tempVar, 1, 10);
 8000ef2:	1cf9      	adds	r1, r7, #3
 8000ef4:	230a      	movs	r3, #10
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	4805      	ldr	r0, [pc, #20]	; (8000f10 <_init_LCD+0xe8>)
 8000efa:	f006 fd0b 	bl	8007914 <HAL_SPI_Transmit>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	42020000 	.word	0x42020000
 8000f0c:	001e847f 	.word	0x001e847f
 8000f10:	20000204 	.word	0x20000204

08000f14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f18:	b672      	cpsid	i
}
 8000f1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <Error_Handler+0x8>
	...

08000f20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <HAL_MspInit+0x30>)
 8000f28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f2c:	4a08      	ldr	r2, [pc, #32]	; (8000f50 <HAL_MspInit+0x30>)
 8000f2e:	f043 0304 	orr.w	r3, r3, #4
 8000f32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000f36:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <HAL_MspInit+0x30>)
 8000f38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f3c:	f003 0304 	and.w	r3, r3, #4
 8000f40:	607b      	str	r3, [r7, #4]
 8000f42:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8000f44:	f002 fc7c 	bl	8003840 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f48:	bf00      	nop
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	46020c00 	.word	0x46020c00

08000f54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08a      	sub	sp, #40	; 0x28
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a18      	ldr	r2, [pc, #96]	; (8000fd4 <HAL_ADC_MspInit+0x80>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d129      	bne.n	8000fca <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f76:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <HAL_ADC_MspInit+0x84>)
 8000f78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f7c:	4a16      	ldr	r2, [pc, #88]	; (8000fd8 <HAL_ADC_MspInit+0x84>)
 8000f7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f82:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000f86:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <HAL_ADC_MspInit+0x84>)
 8000f88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f90:	613b      	str	r3, [r7, #16]
 8000f92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f94:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <HAL_ADC_MspInit+0x84>)
 8000f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f9a:	4a0f      	ldr	r2, [pc, #60]	; (8000fd8 <HAL_ADC_MspInit+0x84>)
 8000f9c:	f043 0304 	orr.w	r3, r3, #4
 8000fa0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <HAL_ADC_MspInit+0x84>)
 8000fa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000faa:	f003 0304 	and.w	r3, r3, #4
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4805      	ldr	r0, [pc, #20]	; (8000fdc <HAL_ADC_MspInit+0x88>)
 8000fc6:	f001 fc15 	bl	80027f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fca:	bf00      	nop
 8000fcc:	3728      	adds	r7, #40	; 0x28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	42028000 	.word	0x42028000
 8000fd8:	46020c00 	.word	0x46020c00
 8000fdc:	42020800 	.word	0x42020800

08000fe0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b0ba      	sub	sp, #232	; 0xe8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ff8:	f107 0310 	add.w	r3, r7, #16
 8000ffc:	22c0      	movs	r2, #192	; 0xc0
 8000ffe:	2100      	movs	r1, #0
 8001000:	4618      	mov	r0, r3
 8001002:	f009 fd3b 	bl	800aa7c <memset>
  if(hdac->Instance==DAC1)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a24      	ldr	r2, [pc, #144]	; (800109c <HAL_DAC_MspInit+0xbc>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d140      	bne.n	8001092 <HAL_DAC_MspInit+0xb2>

  /* USER CODE END DAC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DAC1;
 8001010:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001014:	f04f 0300 	mov.w	r3, #0
 8001018:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Dac1ClockSelection = RCC_DAC1CLKSOURCE_LSI;
 800101c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001020:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001024:	f107 0310 	add.w	r3, r7, #16
 8001028:	4618      	mov	r0, r3
 800102a:	f003 fec5 	bl	8004db8 <HAL_RCCEx_PeriphCLKConfig>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <HAL_DAC_MspInit+0x58>
    {
      Error_Handler();
 8001034:	f7ff ff6e 	bl	8000f14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001038:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <HAL_DAC_MspInit+0xc0>)
 800103a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800103e:	4a18      	ldr	r2, [pc, #96]	; (80010a0 <HAL_DAC_MspInit+0xc0>)
 8001040:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001044:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001048:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <HAL_DAC_MspInit+0xc0>)
 800104a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800104e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001056:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <HAL_DAC_MspInit+0xc0>)
 8001058:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800105c:	4a10      	ldr	r2, [pc, #64]	; (80010a0 <HAL_DAC_MspInit+0xc0>)
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001066:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <HAL_DAC_MspInit+0xc0>)
 8001068:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	68bb      	ldr	r3, [r7, #8]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001074:	2320      	movs	r3, #32
 8001076:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800107a:	2303      	movs	r3, #3
 800107c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001086:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800108a:	4619      	mov	r1, r3
 800108c:	4805      	ldr	r0, [pc, #20]	; (80010a4 <HAL_DAC_MspInit+0xc4>)
 800108e:	f001 fbb1 	bl	80027f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001092:	bf00      	nop
 8001094:	37e8      	adds	r7, #232	; 0xe8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	46021800 	.word	0x46021800
 80010a0:	46020c00 	.word	0x46020c00
 80010a4:	42020000 	.word	0x42020000

080010a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b0ba      	sub	sp, #232	; 0xe8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010c0:	f107 0310 	add.w	r3, r7, #16
 80010c4:	22c0      	movs	r2, #192	; 0xc0
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f009 fcd7 	bl	800aa7c <memset>
  if(hi2c->Instance==I2C1)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a2b      	ldr	r2, [pc, #172]	; (8001180 <HAL_I2C_MspInit+0xd8>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d14e      	bne.n	8001176 <HAL_I2C_MspInit+0xce>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010d8:	f04f 0240 	mov.w	r2, #64	; 0x40
 80010dc:	f04f 0300 	mov.w	r3, #0
 80010e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80010e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010e8:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010ea:	f107 0310 	add.w	r3, r7, #16
 80010ee:	4618      	mov	r0, r3
 80010f0:	f003 fe62 	bl	8004db8 <HAL_RCCEx_PeriphCLKConfig>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80010fa:	f7ff ff0b 	bl	8000f14 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80010fe:	4b21      	ldr	r3, [pc, #132]	; (8001184 <HAL_I2C_MspInit+0xdc>)
 8001100:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001104:	4a1f      	ldr	r2, [pc, #124]	; (8001184 <HAL_I2C_MspInit+0xdc>)
 8001106:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800110a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800110e:	4b1d      	ldr	r3, [pc, #116]	; (8001184 <HAL_I2C_MspInit+0xdc>)
 8001110:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800111c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001120:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001124:	2312      	movs	r3, #18
 8001126:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001136:	2304      	movs	r3, #4
 8001138:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800113c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001140:	4619      	mov	r1, r3
 8001142:	4811      	ldr	r0, [pc, #68]	; (8001188 <HAL_I2C_MspInit+0xe0>)
 8001144:	f001 fb56 	bl	80027f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001148:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <HAL_I2C_MspInit+0xdc>)
 800114a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800114e:	4a0d      	ldr	r2, [pc, #52]	; (8001184 <HAL_I2C_MspInit+0xdc>)
 8001150:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001154:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001158:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <HAL_I2C_MspInit+0xdc>)
 800115a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800115e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2100      	movs	r1, #0
 800116a:	2037      	movs	r0, #55	; 0x37
 800116c:	f001 f86f 	bl	800224e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001170:	2037      	movs	r0, #55	; 0x37
 8001172:	f001 f886 	bl	8002282 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001176:	bf00      	nop
 8001178:	37e8      	adds	r7, #232	; 0xe8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40005400 	.word	0x40005400
 8001184:	46020c00 	.word	0x46020c00
 8001188:	42021800 	.word	0x42021800

0800118c <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b0b4      	sub	sp, #208	; 0xd0
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001194:	f107 0310 	add.w	r3, r7, #16
 8001198:	22c0      	movs	r2, #192	; 0xc0
 800119a:	2100      	movs	r1, #0
 800119c:	4618      	mov	r0, r3
 800119e:	f009 fc6d 	bl	800aa7c <memset>
  if(hlptim->Instance==LPTIM1)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a18      	ldr	r2, [pc, #96]	; (8001208 <HAL_LPTIM_MspInit+0x7c>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d129      	bne.n	8001200 <HAL_LPTIM_MspInit+0x74>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 80011ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011b0:	f04f 0300 	mov.w	r3, #0
 80011b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_MSIK;
 80011b8:	2300      	movs	r3, #0
 80011ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011be:	f107 0310 	add.w	r3, r7, #16
 80011c2:	4618      	mov	r0, r3
 80011c4:	f003 fdf8 	bl	8004db8 <HAL_RCCEx_PeriphCLKConfig>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_LPTIM_MspInit+0x46>
    {
      Error_Handler();
 80011ce:	f7ff fea1 	bl	8000f14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <HAL_LPTIM_MspInit+0x80>)
 80011d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80011d8:	4a0c      	ldr	r2, [pc, #48]	; (800120c <HAL_LPTIM_MspInit+0x80>)
 80011da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011de:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 80011e2:	4b0a      	ldr	r3, [pc, #40]	; (800120c <HAL_LPTIM_MspInit+0x80>)
 80011e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80011e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 80011f0:	2200      	movs	r2, #0
 80011f2:	2100      	movs	r1, #0
 80011f4:	2043      	movs	r0, #67	; 0x43
 80011f6:	f001 f82a 	bl	800224e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80011fa:	2043      	movs	r0, #67	; 0x43
 80011fc:	f001 f841 	bl	8002282 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8001200:	bf00      	nop
 8001202:	37d0      	adds	r7, #208	; 0xd0
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	46004400 	.word	0x46004400
 800120c:	46020c00 	.word	0x46020c00

08001210 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b0bc      	sub	sp, #240	; 0xf0
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001228:	f107 0318 	add.w	r3, r7, #24
 800122c:	22c0      	movs	r2, #192	; 0xc0
 800122e:	2100      	movs	r1, #0
 8001230:	4618      	mov	r0, r3
 8001232:	f009 fc23 	bl	800aa7c <memset>
  if(huart->Instance==LPUART1)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a3c      	ldr	r2, [pc, #240]	; (800132c <HAL_UART_MspInit+0x11c>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d171      	bne.n	8001324 <HAL_UART_MspInit+0x114>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001240:	f04f 0220 	mov.w	r2, #32
 8001244:	f04f 0300 	mov.w	r3, #0
 8001248:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 800124c:	2302      	movs	r3, #2
 800124e:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001250:	f107 0318 	add.w	r3, r7, #24
 8001254:	4618      	mov	r0, r3
 8001256:	f003 fdaf 	bl	8004db8 <HAL_RCCEx_PeriphCLKConfig>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001260:	f7ff fe58 	bl	8000f14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001264:	4b32      	ldr	r3, [pc, #200]	; (8001330 <HAL_UART_MspInit+0x120>)
 8001266:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800126a:	4a31      	ldr	r2, [pc, #196]	; (8001330 <HAL_UART_MspInit+0x120>)
 800126c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001270:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8001274:	4b2e      	ldr	r3, [pc, #184]	; (8001330 <HAL_UART_MspInit+0x120>)
 8001276:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800127a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800127e:	617b      	str	r3, [r7, #20]
 8001280:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001282:	4b2b      	ldr	r3, [pc, #172]	; (8001330 <HAL_UART_MspInit+0x120>)
 8001284:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001288:	4a29      	ldr	r2, [pc, #164]	; (8001330 <HAL_UART_MspInit+0x120>)
 800128a:	f043 0304 	orr.w	r3, r3, #4
 800128e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001292:	4b27      	ldr	r3, [pc, #156]	; (8001330 <HAL_UART_MspInit+0x120>)
 8001294:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001298:	f003 0304 	and.w	r3, r3, #4
 800129c:	613b      	str	r3, [r7, #16]
 800129e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a0:	4b23      	ldr	r3, [pc, #140]	; (8001330 <HAL_UART_MspInit+0x120>)
 80012a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012a6:	4a22      	ldr	r2, [pc, #136]	; (8001330 <HAL_UART_MspInit+0x120>)
 80012a8:	f043 0302 	orr.w	r3, r3, #2
 80012ac:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80012b0:	4b1f      	ldr	r3, [pc, #124]	; (8001330 <HAL_UART_MspInit+0x120>)
 80012b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    PB10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012be:	2302      	movs	r3, #2
 80012c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c4:	2302      	movs	r3, #2
 80012c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d0:	2300      	movs	r3, #0
 80012d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80012d6:	2308      	movs	r3, #8
 80012d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012dc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012e0:	4619      	mov	r1, r3
 80012e2:	4814      	ldr	r0, [pc, #80]	; (8001334 <HAL_UART_MspInit+0x124>)
 80012e4:	f001 fa86 	bl	80027f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f0:	2302      	movs	r3, #2
 80012f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fc:	2300      	movs	r3, #0
 80012fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001302:	2308      	movs	r3, #8
 8001304:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001308:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800130c:	4619      	mov	r1, r3
 800130e:	480a      	ldr	r0, [pc, #40]	; (8001338 <HAL_UART_MspInit+0x128>)
 8001310:	f001 fa70 	bl	80027f4 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001314:	2200      	movs	r2, #0
 8001316:	2100      	movs	r1, #0
 8001318:	2042      	movs	r0, #66	; 0x42
 800131a:	f000 ff98 	bl	800224e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800131e:	2042      	movs	r0, #66	; 0x42
 8001320:	f000 ffaf 	bl	8002282 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001324:	bf00      	nop
 8001326:	37f0      	adds	r7, #240	; 0xf0
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	46002400 	.word	0x46002400
 8001330:	46020c00 	.word	0x46020c00
 8001334:	42020800 	.word	0x42020800
 8001338:	42020400 	.word	0x42020400

0800133c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b0bc      	sub	sp, #240	; 0xf0
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001354:	f107 0318 	add.w	r3, r7, #24
 8001358:	22c0      	movs	r2, #192	; 0xc0
 800135a:	2100      	movs	r1, #0
 800135c:	4618      	mov	r0, r3
 800135e:	f009 fb8d 	bl	800aa7c <memset>
  if(hspi->Instance==SPI1)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a39      	ldr	r2, [pc, #228]	; (800144c <HAL_SPI_MspInit+0x110>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d16b      	bne.n	8001444 <HAL_SPI_MspInit+0x108>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800136c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001370:	f04f 0300 	mov.w	r3, #0
 8001374:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8001378:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800137c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001380:	f107 0318 	add.w	r3, r7, #24
 8001384:	4618      	mov	r0, r3
 8001386:	f003 fd17 	bl	8004db8 <HAL_RCCEx_PeriphCLKConfig>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8001390:	f7ff fdc0 	bl	8000f14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001394:	4b2e      	ldr	r3, [pc, #184]	; (8001450 <HAL_SPI_MspInit+0x114>)
 8001396:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800139a:	4a2d      	ldr	r2, [pc, #180]	; (8001450 <HAL_SPI_MspInit+0x114>)
 800139c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013a0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80013a4:	4b2a      	ldr	r3, [pc, #168]	; (8001450 <HAL_SPI_MspInit+0x114>)
 80013a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80013aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013ae:	617b      	str	r3, [r7, #20]
 80013b0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b2:	4b27      	ldr	r3, [pc, #156]	; (8001450 <HAL_SPI_MspInit+0x114>)
 80013b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013b8:	4a25      	ldr	r2, [pc, #148]	; (8001450 <HAL_SPI_MspInit+0x114>)
 80013ba:	f043 0301 	orr.w	r3, r3, #1
 80013be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80013c2:	4b23      	ldr	r3, [pc, #140]	; (8001450 <HAL_SPI_MspInit+0x114>)
 80013c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80013d0:	4b1f      	ldr	r3, [pc, #124]	; (8001450 <HAL_SPI_MspInit+0x114>)
 80013d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013d6:	4a1e      	ldr	r2, [pc, #120]	; (8001450 <HAL_SPI_MspInit+0x114>)
 80013d8:	f043 0310 	orr.w	r3, r3, #16
 80013dc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80013e0:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <HAL_SPI_MspInit+0x114>)
 80013e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013e6:	f003 0310 	and.w	r3, r3, #16
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA7     ------> SPI1_MOSI
    PE13     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
 80013ee:	2390      	movs	r3, #144	; 0x90
 80013f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f4:	2302      	movs	r3, #2
 80013f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001400:	2300      	movs	r3, #0
 8001402:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001406:	2305      	movs	r3, #5
 8001408:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001410:	4619      	mov	r1, r3
 8001412:	4810      	ldr	r0, [pc, #64]	; (8001454 <HAL_SPI_MspInit+0x118>)
 8001414:	f001 f9ee 	bl	80027f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001418:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800141c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001420:	2302      	movs	r3, #2
 8001422:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142c:	2300      	movs	r3, #0
 800142e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001432:	2305      	movs	r3, #5
 8001434:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001438:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800143c:	4619      	mov	r1, r3
 800143e:	4806      	ldr	r0, [pc, #24]	; (8001458 <HAL_SPI_MspInit+0x11c>)
 8001440:	f001 f9d8 	bl	80027f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001444:	bf00      	nop
 8001446:	37f0      	adds	r7, #240	; 0xf0
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40013000 	.word	0x40013000
 8001450:	46020c00 	.word	0x46020c00
 8001454:	42020000 	.word	0x42020000
 8001458:	42021000 	.word	0x42021000

0800145c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800146c:	d116      	bne.n	800149c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800146e:	4b0d      	ldr	r3, [pc, #52]	; (80014a4 <HAL_TIM_Base_MspInit+0x48>)
 8001470:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001474:	4a0b      	ldr	r2, [pc, #44]	; (80014a4 <HAL_TIM_Base_MspInit+0x48>)
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <HAL_TIM_Base_MspInit+0x48>)
 8001480:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800148c:	2200      	movs	r2, #0
 800148e:	2100      	movs	r1, #0
 8001490:	202d      	movs	r0, #45	; 0x2d
 8001492:	f000 fedc 	bl	800224e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001496:	202d      	movs	r0, #45	; 0x2d
 8001498:	f000 fef3 	bl	8002282 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800149c:	bf00      	nop
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	46020c00 	.word	0x46020c00

080014a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 030c 	add.w	r3, r7, #12
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014c8:	d11e      	bne.n	8001508 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ca:	4b11      	ldr	r3, [pc, #68]	; (8001510 <HAL_TIM_MspPostInit+0x68>)
 80014cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014d0:	4a0f      	ldr	r2, [pc, #60]	; (8001510 <HAL_TIM_MspPostInit+0x68>)
 80014d2:	f043 0301 	orr.w	r3, r3, #1
 80014d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80014da:	4b0d      	ldr	r3, [pc, #52]	; (8001510 <HAL_TIM_MspPostInit+0x68>)
 80014dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80014e8:	230f      	movs	r3, #15
 80014ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ec:	2302      	movs	r3, #2
 80014ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014f8:	2301      	movs	r3, #1
 80014fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fc:	f107 030c 	add.w	r3, r7, #12
 8001500:	4619      	mov	r1, r3
 8001502:	4804      	ldr	r0, [pc, #16]	; (8001514 <HAL_TIM_MspPostInit+0x6c>)
 8001504:	f001 f976 	bl	80027f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001508:	bf00      	nop
 800150a:	3720      	adds	r7, #32
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	46020c00 	.word	0x46020c00
 8001514:	42020000 	.word	0x42020000

08001518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800151c:	e7fe      	b.n	800151c <NMI_Handler+0x4>

0800151e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001522:	e7fe      	b.n	8001522 <HardFault_Handler+0x4>

08001524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <MemManage_Handler+0x4>

0800152a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800152e:	e7fe      	b.n	800152e <BusFault_Handler+0x4>

08001530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <UsageFault_Handler+0x4>

08001536 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001564:	f000 f9b0 	bl	80018c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}

0800156c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(TIM2->SR & TIM_SR_CC1IF)
 8001570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00f      	beq.n	800159e <TIM2_IRQHandler+0x32>
	{
		TIM2->CCR1 += 25;
 800157e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001584:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001588:	3319      	adds	r3, #25
 800158a:	6353      	str	r3, [r2, #52]	; 0x34
		if(TIM2->CCR1 == 100)
 800158c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001592:	2b64      	cmp	r3, #100	; 0x64
 8001594:	d103      	bne.n	800159e <TIM2_IRQHandler+0x32>
		{
			TIM2->CCR1 = 25;
 8001596:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800159a:	2219      	movs	r2, #25
 800159c:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	if(TIM2->SR & TIM_SR_CC2IF)
 800159e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015a2:	691b      	ldr	r3, [r3, #16]
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d00f      	beq.n	80015cc <TIM2_IRQHandler+0x60>
	{
		TIM2->CCR2 += 10;
 80015ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015b6:	330a      	adds	r3, #10
 80015b8:	6393      	str	r3, [r2, #56]	; 0x38
		if(TIM2->CCR2 == 100)
 80015ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015c0:	2b64      	cmp	r3, #100	; 0x64
 80015c2:	d103      	bne.n	80015cc <TIM2_IRQHandler+0x60>
		{
			TIM2->CCR2 = 10;
 80015c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015c8:	220a      	movs	r2, #10
 80015ca:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	if(TIM2->SR & TIM_SR_CC3IF)
 80015cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	f003 0308 	and.w	r3, r3, #8
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d00f      	beq.n	80015fa <TIM2_IRQHandler+0x8e>
	{
		TIM2->CCR3 += 50;
 80015da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015e4:	3332      	adds	r3, #50	; 0x32
 80015e6:	63d3      	str	r3, [r2, #60]	; 0x3c
		if(TIM2->CCR3 == 100)
 80015e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ee:	2b64      	cmp	r3, #100	; 0x64
 80015f0:	d103      	bne.n	80015fa <TIM2_IRQHandler+0x8e>
		{
			TIM2->CCR3 = 50;
 80015f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015f6:	2232      	movs	r2, #50	; 0x32
 80015f8:	63da      	str	r2, [r3, #60]	; 0x3c
		}
	}
	if(TIM2->SR & TIM_SR_CC4IF)
 80015fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015fe:	691b      	ldr	r3, [r3, #16]
 8001600:	f003 0310 	and.w	r3, r3, #16
 8001604:	2b00      	cmp	r3, #0
 8001606:	d00f      	beq.n	8001628 <TIM2_IRQHandler+0xbc>
	{
		TIM2->CCR4 += 20;
 8001608:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001612:	3314      	adds	r3, #20
 8001614:	6413      	str	r3, [r2, #64]	; 0x40
		if(TIM2->CCR4 == 100)
 8001616:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161c:	2b64      	cmp	r3, #100	; 0x64
 800161e:	d103      	bne.n	8001628 <TIM2_IRQHandler+0xbc>
		{
			TIM2->CCR4 = 20;
 8001620:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001624:	2214      	movs	r2, #20
 8001626:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001628:	4802      	ldr	r0, [pc, #8]	; (8001634 <TIM2_IRQHandler+0xc8>)
 800162a:	f006 ff13 	bl	8008454 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  /* USER CODE END TIM2_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000294 	.word	0x20000294

08001638 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 Event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800163c:	4802      	ldr	r0, [pc, #8]	; (8001648 <I2C1_EV_IRQHandler+0x10>)
 800163e:	f001 fb64 	bl	8002d0a <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200000cc 	.word	0x200000cc

0800164c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001650:	4802      	ldr	r0, [pc, #8]	; (800165c <LPUART1_IRQHandler+0x10>)
 8001652:	f008 fa1f 	bl	8009a94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20000170 	.word	0x20000170

08001660 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8001660:	b5b0      	push	{r4, r5, r7, lr}
 8001662:	b08a      	sub	sp, #40	; 0x28
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */
	static uint8_t ledNo = 0;
	static uint8_t delay = 100;
  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8001666:	482d      	ldr	r0, [pc, #180]	; (800171c <LPTIM1_IRQHandler+0xbc>)
 8001668:	f001 fdcb 	bl	8003202 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */
	delay--;
 800166c:	4b2c      	ldr	r3, [pc, #176]	; (8001720 <LPTIM1_IRQHandler+0xc0>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	3b01      	subs	r3, #1
 8001672:	b2da      	uxtb	r2, r3
 8001674:	4b2a      	ldr	r3, [pc, #168]	; (8001720 <LPTIM1_IRQHandler+0xc0>)
 8001676:	701a      	strb	r2, [r3, #0]
	if(delay > 0)
 8001678:	4b29      	ldr	r3, [pc, #164]	; (8001720 <LPTIM1_IRQHandler+0xc0>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d149      	bne.n	8001714 <LPTIM1_IRQHandler+0xb4>
	{
		return;
	}
	delay = 100;
 8001680:	4b27      	ldr	r3, [pc, #156]	; (8001720 <LPTIM1_IRQHandler+0xc0>)
 8001682:	2264      	movs	r2, #100	; 0x64
 8001684:	701a      	strb	r2, [r3, #0]
	switch (ledNo)
 8001686:	4b27      	ldr	r3, [pc, #156]	; (8001724 <LPTIM1_IRQHandler+0xc4>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b02      	cmp	r3, #2
 800168c:	d020      	beq.n	80016d0 <LPTIM1_IRQHandler+0x70>
 800168e:	2b02      	cmp	r3, #2
 8001690:	dc2b      	bgt.n	80016ea <LPTIM1_IRQHandler+0x8a>
 8001692:	2b00      	cmp	r3, #0
 8001694:	d002      	beq.n	800169c <LPTIM1_IRQHandler+0x3c>
 8001696:	2b01      	cmp	r3, #1
 8001698:	d00d      	beq.n	80016b6 <LPTIM1_IRQHandler+0x56>
 800169a:	e026      	b.n	80016ea <LPTIM1_IRQHandler+0x8a>
	{
	case 0:
		GPIOG->ODR ^= GPIO_ODR_OD2;
 800169c:	4b22      	ldr	r3, [pc, #136]	; (8001728 <LPTIM1_IRQHandler+0xc8>)
 800169e:	695b      	ldr	r3, [r3, #20]
 80016a0:	4a21      	ldr	r2, [pc, #132]	; (8001728 <LPTIM1_IRQHandler+0xc8>)
 80016a2:	f083 0304 	eor.w	r3, r3, #4
 80016a6:	6153      	str	r3, [r2, #20]
		ledNo++;
 80016a8:	4b1e      	ldr	r3, [pc, #120]	; (8001724 <LPTIM1_IRQHandler+0xc4>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	3301      	adds	r3, #1
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	4b1c      	ldr	r3, [pc, #112]	; (8001724 <LPTIM1_IRQHandler+0xc4>)
 80016b2:	701a      	strb	r2, [r3, #0]
		break;
 80016b4:	e02f      	b.n	8001716 <LPTIM1_IRQHandler+0xb6>
	case 1:
		GPIOC->ODR ^= GPIO_ODR_OD7;
 80016b6:	4b1d      	ldr	r3, [pc, #116]	; (800172c <LPTIM1_IRQHandler+0xcc>)
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	4a1c      	ldr	r2, [pc, #112]	; (800172c <LPTIM1_IRQHandler+0xcc>)
 80016bc:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 80016c0:	6153      	str	r3, [r2, #20]
		ledNo++;
 80016c2:	4b18      	ldr	r3, [pc, #96]	; (8001724 <LPTIM1_IRQHandler+0xc4>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	3301      	adds	r3, #1
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	4b16      	ldr	r3, [pc, #88]	; (8001724 <LPTIM1_IRQHandler+0xc4>)
 80016cc:	701a      	strb	r2, [r3, #0]
		break;
 80016ce:	e022      	b.n	8001716 <LPTIM1_IRQHandler+0xb6>
	case 2:
		GPIOB->ODR ^= GPIO_ODR_OD7;
 80016d0:	4b17      	ldr	r3, [pc, #92]	; (8001730 <LPTIM1_IRQHandler+0xd0>)
 80016d2:	695b      	ldr	r3, [r3, #20]
 80016d4:	4a16      	ldr	r2, [pc, #88]	; (8001730 <LPTIM1_IRQHandler+0xd0>)
 80016d6:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 80016da:	6153      	str	r3, [r2, #20]
		ledNo++;
 80016dc:	4b11      	ldr	r3, [pc, #68]	; (8001724 <LPTIM1_IRQHandler+0xc4>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	3301      	adds	r3, #1
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <LPTIM1_IRQHandler+0xc4>)
 80016e6:	701a      	strb	r2, [r3, #0]
		break;
 80016e8:	e015      	b.n	8001716 <LPTIM1_IRQHandler+0xb6>
	default:
		ledNo = 0;
 80016ea:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <LPTIM1_IRQHandler+0xc4>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	701a      	strb	r2, [r3, #0]
		uint8_t data[] = "Hello World from STM32U575 bitches...\r\n";
 80016f0:	4b10      	ldr	r3, [pc, #64]	; (8001734 <LPTIM1_IRQHandler+0xd4>)
 80016f2:	463c      	mov	r4, r7
 80016f4:	461d      	mov	r5, r3
 80016f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016fe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001702:	e884 0003 	stmia.w	r4, {r0, r1}
		HAL_UART_Transmit(&hlpuart1, data, sizeof(data), 100);
 8001706:	4639      	mov	r1, r7
 8001708:	2364      	movs	r3, #100	; 0x64
 800170a:	2228      	movs	r2, #40	; 0x28
 800170c:	480a      	ldr	r0, [pc, #40]	; (8001738 <LPTIM1_IRQHandler+0xd8>)
 800170e:	f008 f923 	bl	8009958 <HAL_UART_Transmit>
		break;
 8001712:	e000      	b.n	8001716 <LPTIM1_IRQHandler+0xb6>
		return;
 8001714:	bf00      	nop
	}
  /* USER CODE END LPTIM1_IRQn 1 */
}
 8001716:	3728      	adds	r7, #40	; 0x28
 8001718:	46bd      	mov	sp, r7
 800171a:	bdb0      	pop	{r4, r5, r7, pc}
 800171c:	20000120 	.word	0x20000120
 8001720:	20000000 	.word	0x20000000
 8001724:	200002e0 	.word	0x200002e0
 8001728:	42021800 	.word	0x42021800
 800172c:	42020800 	.word	0x42020800
 8001730:	42020400 	.word	0x42020400
 8001734:	0800aaec 	.word	0x0800aaec
 8001738:	20000170 	.word	0x20000170

0800173c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001740:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <SystemInit+0x68>)
 8001742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001746:	4a17      	ldr	r2, [pc, #92]	; (80017a4 <SystemInit+0x68>)
 8001748:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800174c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001750:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <SystemInit+0x6c>)
 8001752:	2201      	movs	r2, #1
 8001754:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001756:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <SystemInit+0x6c>)
 8001758:	2200      	movs	r2, #0
 800175a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800175c:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <SystemInit+0x6c>)
 800175e:	2200      	movs	r2, #0
 8001760:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001762:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <SystemInit+0x6c>)
 8001764:	2200      	movs	r2, #0
 8001766:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001768:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <SystemInit+0x6c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a0e      	ldr	r2, [pc, #56]	; (80017a8 <SystemInit+0x6c>)
 800176e:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001772:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001776:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001778:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <SystemInit+0x6c>)
 800177a:	2200      	movs	r2, #0
 800177c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800177e:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <SystemInit+0x6c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a09      	ldr	r2, [pc, #36]	; (80017a8 <SystemInit+0x6c>)
 8001784:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001788:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800178a:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <SystemInit+0x6c>)
 800178c:	2200      	movs	r2, #0
 800178e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001790:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <SystemInit+0x68>)
 8001792:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001796:	609a      	str	r2, [r3, #8]
  #endif
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	e000ed00 	.word	0xe000ed00
 80017a8:	46020c00 	.word	0x46020c00

080017ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80017ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017e4 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80017b0:	f7ff ffc4 	bl	800173c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80017b4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80017b6:	e003      	b.n	80017c0 <LoopCopyDataInit>

080017b8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80017b8:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80017ba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80017bc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80017be:	3104      	adds	r1, #4

080017c0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80017c0:	480a      	ldr	r0, [pc, #40]	; (80017ec <LoopForever+0xa>)
	ldr	r3, =_edata
 80017c2:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80017c4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80017c6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80017c8:	d3f6      	bcc.n	80017b8 <CopyDataInit>
	ldr	r2, =_sbss
 80017ca:	4a0a      	ldr	r2, [pc, #40]	; (80017f4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80017cc:	e002      	b.n	80017d4 <LoopFillZerobss>

080017ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80017ce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80017d0:	f842 3b04 	str.w	r3, [r2], #4

080017d4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80017d4:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <LoopForever+0x16>)
	cmp	r2, r3
 80017d6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80017d8:	d3f9      	bcc.n	80017ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017da:	f009 f957 	bl	800aa8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017de:	f7fe fedb 	bl	8000598 <main>

080017e2 <LoopForever>:

LoopForever:
    b LoopForever
 80017e2:	e7fe      	b.n	80017e2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80017e4:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 80017e8:	0800ac24 	.word	0x0800ac24
	ldr	r0, =_sdata
 80017ec:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80017f0:	2000000d 	.word	0x2000000d
	ldr	r2, =_sbss
 80017f4:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 80017f8:	200002e8 	.word	0x200002e8

080017fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017fc:	e7fe      	b.n	80017fc <ADC1_IRQHandler>
	...

08001800 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001804:	4b11      	ldr	r3, [pc, #68]	; (800184c <HAL_Init+0x4c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a10      	ldr	r2, [pc, #64]	; (800184c <HAL_Init+0x4c>)
 800180a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800180e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001810:	2003      	movs	r0, #3
 8001812:	f000 fd11 	bl	8002238 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001816:	f003 f8f1 	bl	80049fc <HAL_RCC_GetSysClockFreq>
 800181a:	4602      	mov	r2, r0
 800181c:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <HAL_Init+0x50>)
 800181e:	6a1b      	ldr	r3, [r3, #32]
 8001820:	f003 030f 	and.w	r3, r3, #15
 8001824:	490b      	ldr	r1, [pc, #44]	; (8001854 <HAL_Init+0x54>)
 8001826:	5ccb      	ldrb	r3, [r1, r3]
 8001828:	fa22 f303 	lsr.w	r3, r2, r3
 800182c:	4a0a      	ldr	r2, [pc, #40]	; (8001858 <HAL_Init+0x58>)
 800182e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001830:	200f      	movs	r0, #15
 8001832:	f000 f813 	bl	800185c <HAL_InitTick>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e002      	b.n	8001846 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001840:	f7ff fb6e 	bl	8000f20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40022000 	.word	0x40022000
 8001850:	46020c00 	.word	0x46020c00
 8001854:	0800ab14 	.word	0x0800ab14
 8001858:	20000004 	.word	0x20000004

0800185c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001864:	4b15      	ldr	r3, [pc, #84]	; (80018bc <HAL_InitTick+0x60>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d101      	bne.n	8001870 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e021      	b.n	80018b4 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001870:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <HAL_InitTick+0x64>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4b11      	ldr	r3, [pc, #68]	; (80018bc <HAL_InitTick+0x60>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	4619      	mov	r1, r3
 800187a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800187e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001882:	fbb2 f3f3 	udiv	r3, r2, r3
 8001886:	4618      	mov	r0, r3
 8001888:	f000 fd09 	bl	800229e <HAL_SYSTICK_Config>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e00e      	b.n	80018b4 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b0f      	cmp	r3, #15
 800189a:	d80a      	bhi.n	80018b2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800189c:	2200      	movs	r2, #0
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	f04f 30ff 	mov.w	r0, #4294967295
 80018a4:	f000 fcd3 	bl	800224e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a8:	4a06      	ldr	r2, [pc, #24]	; (80018c4 <HAL_InitTick+0x68>)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
 80018b0:	e000      	b.n	80018b4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	2000000c 	.word	0x2000000c
 80018c0:	20000004 	.word	0x20000004
 80018c4:	20000008 	.word	0x20000008

080018c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <HAL_IncTick+0x20>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	461a      	mov	r2, r3
 80018d2:	4b06      	ldr	r3, [pc, #24]	; (80018ec <HAL_IncTick+0x24>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4413      	add	r3, r2
 80018d8:	4a04      	ldr	r2, [pc, #16]	; (80018ec <HAL_IncTick+0x24>)
 80018da:	6013      	str	r3, [r2, #0]
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	2000000c 	.word	0x2000000c
 80018ec:	200002e4 	.word	0x200002e4

080018f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return uwTick;
 80018f4:	4b03      	ldr	r3, [pc, #12]	; (8001904 <HAL_GetTick+0x14>)
 80018f6:	681b      	ldr	r3, [r3, #0]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	200002e4 	.word	0x200002e4

08001908 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	431a      	orrs	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	601a      	str	r2, [r3, #0]
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
	...

08001930 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a0a      	ldr	r2, [pc, #40]	; (800196c <LL_ADC_SetResolution+0x3c>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d104      	bne.n	8001950 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	3b01      	subs	r3, #1
 800194a:	f003 030c 	and.w	r3, r3, #12
 800194e:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	f023 020c 	bic.w	r2, r3, #12
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	431a      	orrs	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	60da      	str	r2, [r3, #12]
}
 8001960:	bf00      	nop
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	46021000 	.word	0x46021000

08001970 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800197e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001982:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	431a      	orrs	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001992:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	2a00      	cmp	r2, #0
 800199a:	d002      	beq.n	80019a2 <LL_ADC_SetGainCompensation+0x32>
 800199c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80019a0:	e000      	b.n	80019a4 <LL_ADC_SetGainCompensation+0x34>
 80019a2:	2200      	movs	r2, #0
 80019a4:	431a      	orrs	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	671a      	str	r2, [r3, #112]	; 0x70
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b085      	sub	sp, #20
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	60f8      	str	r0, [r7, #12]
 80019be:	60b9      	str	r1, [r7, #8]
 80019c0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	695a      	ldr	r2, [r3, #20]
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	f003 0304 	and.w	r3, r3, #4
 80019cc:	2107      	movs	r1, #7
 80019ce:	fa01 f303 	lsl.w	r3, r1, r3
 80019d2:	43db      	mvns	r3, r3
 80019d4:	401a      	ands	r2, r3
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	6879      	ldr	r1, [r7, #4]
 80019de:	fa01 f303 	lsl.w	r3, r1, r3
 80019e2:	431a      	orrs	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80019e8:	bf00      	nop
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001a04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	6093      	str	r3, [r2, #8]
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a2c:	d101      	bne.n	8001a32 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e000      	b.n	8001a34 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001a50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a54:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a7c:	d101      	bne.n	8001a82 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e000      	b.n	8001a84 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d101      	bne.n	8001aa8 <LL_ADC_IsEnabled+0x18>
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e000      	b.n	8001aaa <LL_ADC_IsEnabled+0x1a>
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f003 0304 	and.w	r3, r3, #4
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	d101      	bne.n	8001ace <LL_ADC_REG_IsConversionOngoing+0x18>
 8001aca:	2301      	movs	r3, #1
 8001acc:	e000      	b.n	8001ad0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 0308 	and.w	r3, r3, #8
 8001aec:	2b08      	cmp	r3, #8
 8001aee:	d101      	bne.n	8001af4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001af0:	2301      	movs	r3, #1
 8001af2:	e000      	b.n	8001af6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
	...

08001b04 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08a      	sub	sp, #40	; 0x28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d101      	bne.n	8001b24 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e2b3      	b.n	800208c <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d003      	beq.n	8001b34 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a8b      	ldr	r2, [pc, #556]	; (8001d60 <HAL_ADC_Init+0x25c>)
 8001b32:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d109      	bne.n	8001b50 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f7ff fa09 	bl	8000f54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ff5f 	bl	8001a18 <LL_ADC_IsDeepPowerDownEnabled>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d004      	beq.n	8001b6a <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff ff45 	bl	80019f4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff ff7a 	bl	8001a68 <LL_ADC_IsInternalRegulatorEnabled>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d115      	bne.n	8001ba6 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff ff5e 	bl	8001a40 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b84:	4b77      	ldr	r3, [pc, #476]	; (8001d64 <HAL_ADC_Init+0x260>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	099b      	lsrs	r3, r3, #6
 8001b8a:	4a77      	ldr	r2, [pc, #476]	; (8001d68 <HAL_ADC_Init+0x264>)
 8001b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b90:	099b      	lsrs	r3, r3, #6
 8001b92:	3301      	adds	r3, #1
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b98:	e002      	b.n	8001ba0 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f9      	bne.n	8001b9a <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff ff5c 	bl	8001a68 <LL_ADC_IsInternalRegulatorEnabled>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10e      	bne.n	8001bd4 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001bba:	f043 0210 	orr.w	r2, r3, #16
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001bc6:	f043 0201 	orr.w	r2, r3, #1
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff ff6c 	bl	8001ab6 <LL_ADC_REG_IsConversionOngoing>
 8001bde:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001be4:	f003 0310 	and.w	r3, r3, #16
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f040 8244 	bne.w	8002076 <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f040 8240 	bne.w	8002076 <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001bfa:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001bfe:	f043 0202 	orr.w	r2, r3, #2
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff ff40 	bl	8001a90 <LL_ADC_IsEnabled>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d140      	bne.n	8001c98 <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a51      	ldr	r2, [pc, #324]	; (8001d60 <HAL_ADC_Init+0x25c>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d028      	beq.n	8001c72 <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a51      	ldr	r2, [pc, #324]	; (8001d6c <HAL_ADC_Init+0x268>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d109      	bne.n	8001c3e <HAL_ADC_Init+0x13a>
 8001c2a:	4850      	ldr	r0, [pc, #320]	; (8001d6c <HAL_ADC_Init+0x268>)
 8001c2c:	f7ff ff30 	bl	8001a90 <LL_ADC_IsEnabled>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	bf0c      	ite	eq
 8001c36:	2301      	moveq	r3, #1
 8001c38:	2300      	movne	r3, #0
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	e008      	b.n	8001c50 <HAL_ADC_Init+0x14c>
 8001c3e:	4848      	ldr	r0, [pc, #288]	; (8001d60 <HAL_ADC_Init+0x25c>)
 8001c40:	f7ff ff26 	bl	8001a90 <LL_ADC_IsEnabled>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	bf0c      	ite	eq
 8001c4a:	2301      	moveq	r3, #1
 8001c4c:	2300      	movne	r3, #0
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d021      	beq.n	8001c98 <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a44      	ldr	r2, [pc, #272]	; (8001d6c <HAL_ADC_Init+0x268>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d101      	bne.n	8001c62 <HAL_ADC_Init+0x15e>
 8001c5e:	4a44      	ldr	r2, [pc, #272]	; (8001d70 <HAL_ADC_Init+0x26c>)
 8001c60:	e000      	b.n	8001c64 <HAL_ADC_Init+0x160>
 8001c62:	4a44      	ldr	r2, [pc, #272]	; (8001d74 <HAL_ADC_Init+0x270>)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4610      	mov	r0, r2
 8001c6c:	f7ff fe4c 	bl	8001908 <LL_ADC_SetCommonClock>
 8001c70:	e012      	b.n	8001c98 <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	f7ff fe57 	bl	8001930 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8001c82:	4b3c      	ldr	r3, [pc, #240]	; (8001d74 <HAL_ADC_Init+0x270>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001c92:	4938      	ldr	r1, [pc, #224]	; (8001d74 <HAL_ADC_Init+0x270>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a30      	ldr	r2, [pc, #192]	; (8001d60 <HAL_ADC_Init+0x25c>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d010      	beq.n	8001cc4 <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ca8:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001cae:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8001cb4:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001cbc:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	623b      	str	r3, [r7, #32]
 8001cc2:	e030      	b.n	8001d26 <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	7f1b      	ldrb	r3, [r3, #28]
 8001cc8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cd0:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cd2:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001cd8:	2a00      	cmp	r2, #0
 8001cda:	d002      	beq.n	8001ce2 <HAL_ADC_Init+0x1de>
 8001cdc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ce0:	e000      	b.n	8001ce4 <HAL_ADC_Init+0x1e0>
 8001ce2:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001ce4:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001cea:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	da04      	bge.n	8001cfe <HAL_ADC_Init+0x1fa>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001cfc:	e001      	b.n	8001d02 <HAL_ADC_Init+0x1fe>
 8001cfe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 8001d02:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4918      	ldr	r1, [pc, #96]	; (8001d6c <HAL_ADC_Init+0x268>)
 8001d0a:	428b      	cmp	r3, r1
 8001d0c:	d103      	bne.n	8001d16 <HAL_ADC_Init+0x212>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d14:	e003      	b.n	8001d1e <HAL_ADC_Init+0x21a>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d1c:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001d1e:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d20:	6a3a      	ldr	r2, [r7, #32]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d12f      	bne.n	8001d90 <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a0a      	ldr	r2, [pc, #40]	; (8001d60 <HAL_ADC_Init+0x25c>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d007      	beq.n	8001d4a <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	045b      	lsls	r3, r3, #17
 8001d42:	6a3a      	ldr	r2, [r7, #32]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	623b      	str	r3, [r7, #32]
 8001d48:	e022      	b.n	8001d90 <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d111      	bne.n	8001d78 <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001d54:	6a3b      	ldr	r3, [r7, #32]
 8001d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d5a:	623b      	str	r3, [r7, #32]
 8001d5c:	e018      	b.n	8001d90 <HAL_ADC_Init+0x28c>
 8001d5e:	bf00      	nop
 8001d60:	46021000 	.word	0x46021000
 8001d64:	20000004 	.word	0x20000004
 8001d68:	053e2d63 	.word	0x053e2d63
 8001d6c:	42028000 	.word	0x42028000
 8001d70:	42028308 	.word	0x42028308
 8001d74:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d7c:	f043 0220 	orr.w	r2, r3, #32
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d88:	f043 0201 	orr.w	r2, r3, #1
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a92      	ldr	r2, [pc, #584]	; (8001fe0 <HAL_ADC_Init+0x4dc>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d018      	beq.n	8001dcc <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d009      	beq.n	8001db6 <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dae:	4313      	orrs	r3, r2
 8001db0:	6a3a      	ldr	r2, [r7, #32]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68da      	ldr	r2, [r3, #12]
 8001dbc:	4b89      	ldr	r3, [pc, #548]	; (8001fe4 <HAL_ADC_Init+0x4e0>)
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	6812      	ldr	r2, [r2, #0]
 8001dc4:	6a39      	ldr	r1, [r7, #32]
 8001dc6:	430b      	orrs	r3, r1
 8001dc8:	60d3      	str	r3, [r2, #12]
 8001dca:	e031      	b.n	8001e30 <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d009      	beq.n	8001de8 <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dd8:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de0:	4313      	orrs	r3, r2
 8001de2:	6a3a      	ldr	r2, [r7, #32]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68da      	ldr	r2, [r3, #12]
 8001dee:	4b7e      	ldr	r3, [pc, #504]	; (8001fe8 <HAL_ADC_Init+0x4e4>)
 8001df0:	4013      	ands	r3, r2
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	6812      	ldr	r2, [r2, #0]
 8001df6:	6a39      	ldr	r1, [r7, #32]
 8001df8:	430b      	orrs	r3, r1
 8001dfa:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d008      	beq.n	8001e16 <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a1a      	ldr	r2, [r3, #32]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	430a      	orrs	r2, r1
 8001e14:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d008      	beq.n	8001e30 <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a6a      	ldr	r2, [pc, #424]	; (8001fe0 <HAL_ADC_Init+0x4dc>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	f000 8093 	beq.w	8001f62 <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff fe38 	bl	8001ab6 <LL_ADC_REG_IsConversionOngoing>
 8001e46:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff fe45 	bl	8001adc <LL_ADC_INJ_IsConversionOngoing>
 8001e52:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d161      	bne.n	8001f1e <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d15e      	bne.n	8001f1e <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	7f1b      	ldrb	r3, [r3, #28]
 8001e64:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4960      	ldr	r1, [pc, #384]	; (8001fec <HAL_ADC_Init+0x4e8>)
 8001e6c:	428b      	cmp	r3, r1
 8001e6e:	d102      	bne.n	8001e76 <HAL_ADC_Init+0x372>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e74:	e002      	b.n	8001e7c <HAL_ADC_Init+0x378>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e7a:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e8a:	f023 0303 	bic.w	r3, r3, #3
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	6812      	ldr	r2, [r2, #0]
 8001e92:	6a39      	ldr	r1, [r7, #32]
 8001e94:	430b      	orrs	r3, r1
 8001e96:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d007      	beq.n	8001eb0 <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4610      	mov	r0, r2
 8001eac:	f7ff fd60 	bl	8001970 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d11e      	bne.n	8001ef8 <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ebe:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	691a      	ldr	r2, [r3, #16]
 8001ec6:	4b4a      	ldr	r3, [pc, #296]	; (8001ff0 <HAL_ADC_Init+0x4ec>)
 8001ec8:	4013      	ands	r3, r2
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001ece:	0411      	lsls	r1, r2, #16
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001ed4:	4311      	orrs	r1, r2
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8001eda:	4311      	orrs	r1, r2
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8001ee0:	4311      	orrs	r1, r2
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001ee6:	0892      	lsrs	r2, r2, #2
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	431a      	orrs	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f042 0201 	orr.w	r2, r2, #1
 8001ef4:	611a      	str	r2, [r3, #16]
 8001ef6:	e007      	b.n	8001f08 <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	691a      	ldr	r2, [r3, #16]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 0201 	bic.w	r2, r2, #1
 8001f06:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d10c      	bne.n	8001f40 <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2c:	f023 010f 	bic.w	r1, r3, #15
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f34:	1e5a      	subs	r2, r3, #1
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	631a      	str	r2, [r3, #48]	; 0x30
 8001f3e:	e007      	b.n	8001f50 <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 020f 	bic.w	r2, r2, #15
 8001f4e:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f54:	f023 0303 	bic.w	r3, r3, #3
 8001f58:	f043 0201 	orr.w	r2, r3, #1
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001f60:	e092      	b.n	8002088 <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d111      	bne.n	8001f90 <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001f74:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8001f7a:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8001f80:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001f82:	69fa      	ldr	r2, [r7, #28]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f043 0301 	orr.w	r3, r3, #1
 8001f8e:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	691a      	ldr	r2, [r3, #16]
 8001f96:	4b17      	ldr	r3, [pc, #92]	; (8001ff4 <HAL_ADC_Init+0x4f0>)
 8001f98:	4013      	ands	r3, r2
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	6812      	ldr	r2, [r2, #0]
 8001f9e:	69f9      	ldr	r1, [r7, #28]
 8001fa0:	430b      	orrs	r3, r1
 8001fa2:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6818      	ldr	r0, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fac:	461a      	mov	r2, r3
 8001fae:	2100      	movs	r1, #0
 8001fb0:	f7ff fd01 	bl	80019b6 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6818      	ldr	r0, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 8001fc2:	f7ff fcf8 	bl	80019b6 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d114      	bne.n	8001ff8 <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f062 020f 	orn	r2, r2, #15
 8001fdc:	629a      	str	r2, [r3, #40]	; 0x28
 8001fde:	e024      	b.n	800202a <HAL_ADC_Init+0x526>
 8001fe0:	46021000 	.word	0x46021000
 8001fe4:	fff0c013 	.word	0xfff0c013
 8001fe8:	ffde800d 	.word	0xffde800d
 8001fec:	42028000 	.word	0x42028000
 8001ff0:	fc00f81e 	.word	0xfc00f81e
 8001ff4:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002000:	d113      	bne.n	800202a <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200c:	3b01      	subs	r3, #1
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	f003 031c 	and.w	r3, r3, #28
 8002014:	f06f 020f 	mvn.w	r2, #15
 8002018:	fa02 f103 	lsl.w	r1, r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	430a      	orrs	r2, r1
 8002028:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68da      	ldr	r2, [r3, #12]
 8002030:	4b18      	ldr	r3, [pc, #96]	; (8002094 <HAL_ADC_Init+0x590>)
 8002032:	4013      	ands	r3, r2
 8002034:	6a3a      	ldr	r2, [r7, #32]
 8002036:	429a      	cmp	r2, r3
 8002038:	d10b      	bne.n	8002052 <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002044:	f023 0303 	bic.w	r3, r3, #3
 8002048:	f043 0201 	orr.w	r2, r3, #1
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002050:	e01a      	b.n	8002088 <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002056:	f023 0312 	bic.w	r3, r3, #18
 800205a:	f043 0210 	orr.w	r2, r3, #16
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002066:	f043 0201 	orr.w	r2, r3, #1
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002074:	e008      	b.n	8002088 <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800207a:	f043 0210 	orr.w	r2, r3, #16
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 8002088:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800208c:	4618      	mov	r0, r3
 800208e:	3728      	adds	r7, #40	; 0x28
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	833ffff3 	.word	0x833ffff3

08002098 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020a8:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <__NVIC_SetPriorityGrouping+0x44>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020b4:	4013      	ands	r3, r2
 80020b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ca:	4a04      	ldr	r2, [pc, #16]	; (80020dc <__NVIC_SetPriorityGrouping+0x44>)
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	60d3      	str	r3, [r2, #12]
}
 80020d0:	bf00      	nop
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	e000ed00 	.word	0xe000ed00

080020e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020e4:	4b04      	ldr	r3, [pc, #16]	; (80020f8 <__NVIC_GetPriorityGrouping+0x18>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	0a1b      	lsrs	r3, r3, #8
 80020ea:	f003 0307 	and.w	r3, r3, #7
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210a:	2b00      	cmp	r3, #0
 800210c:	db0b      	blt.n	8002126 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800210e:	79fb      	ldrb	r3, [r7, #7]
 8002110:	f003 021f 	and.w	r2, r3, #31
 8002114:	4907      	ldr	r1, [pc, #28]	; (8002134 <__NVIC_EnableIRQ+0x38>)
 8002116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211a:	095b      	lsrs	r3, r3, #5
 800211c:	2001      	movs	r0, #1
 800211e:	fa00 f202 	lsl.w	r2, r0, r2
 8002122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	e000e100 	.word	0xe000e100

08002138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	6039      	str	r1, [r7, #0]
 8002142:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002148:	2b00      	cmp	r3, #0
 800214a:	db0a      	blt.n	8002162 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	b2da      	uxtb	r2, r3
 8002150:	490c      	ldr	r1, [pc, #48]	; (8002184 <__NVIC_SetPriority+0x4c>)
 8002152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002156:	0112      	lsls	r2, r2, #4
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	440b      	add	r3, r1
 800215c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002160:	e00a      	b.n	8002178 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	b2da      	uxtb	r2, r3
 8002166:	4908      	ldr	r1, [pc, #32]	; (8002188 <__NVIC_SetPriority+0x50>)
 8002168:	79fb      	ldrb	r3, [r7, #7]
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	3b04      	subs	r3, #4
 8002170:	0112      	lsls	r2, r2, #4
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	440b      	add	r3, r1
 8002176:	761a      	strb	r2, [r3, #24]
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e000e100 	.word	0xe000e100
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800218c:	b480      	push	{r7}
 800218e:	b089      	sub	sp, #36	; 0x24
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	f1c3 0307 	rsb	r3, r3, #7
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	bf28      	it	cs
 80021aa:	2304      	movcs	r3, #4
 80021ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	3304      	adds	r3, #4
 80021b2:	2b06      	cmp	r3, #6
 80021b4:	d902      	bls.n	80021bc <NVIC_EncodePriority+0x30>
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	3b03      	subs	r3, #3
 80021ba:	e000      	b.n	80021be <NVIC_EncodePriority+0x32>
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c0:	f04f 32ff 	mov.w	r2, #4294967295
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43da      	mvns	r2, r3
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	401a      	ands	r2, r3
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021d4:	f04f 31ff 	mov.w	r1, #4294967295
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	fa01 f303 	lsl.w	r3, r1, r3
 80021de:	43d9      	mvns	r1, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e4:	4313      	orrs	r3, r2
         );
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3724      	adds	r7, #36	; 0x24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
	...

080021f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3b01      	subs	r3, #1
 8002200:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002204:	d301      	bcc.n	800220a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002206:	2301      	movs	r3, #1
 8002208:	e00f      	b.n	800222a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800220a:	4a0a      	ldr	r2, [pc, #40]	; (8002234 <SysTick_Config+0x40>)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3b01      	subs	r3, #1
 8002210:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002212:	210f      	movs	r1, #15
 8002214:	f04f 30ff 	mov.w	r0, #4294967295
 8002218:	f7ff ff8e 	bl	8002138 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800221c:	4b05      	ldr	r3, [pc, #20]	; (8002234 <SysTick_Config+0x40>)
 800221e:	2200      	movs	r2, #0
 8002220:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002222:	4b04      	ldr	r3, [pc, #16]	; (8002234 <SysTick_Config+0x40>)
 8002224:	2207      	movs	r2, #7
 8002226:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	e000e010 	.word	0xe000e010

08002238 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7ff ff29 	bl	8002098 <__NVIC_SetPriorityGrouping>
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b086      	sub	sp, #24
 8002252:	af00      	add	r7, sp, #0
 8002254:	4603      	mov	r3, r0
 8002256:	60b9      	str	r1, [r7, #8]
 8002258:	607a      	str	r2, [r7, #4]
 800225a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800225c:	f7ff ff40 	bl	80020e0 <__NVIC_GetPriorityGrouping>
 8002260:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	68b9      	ldr	r1, [r7, #8]
 8002266:	6978      	ldr	r0, [r7, #20]
 8002268:	f7ff ff90 	bl	800218c <NVIC_EncodePriority>
 800226c:	4602      	mov	r2, r0
 800226e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002272:	4611      	mov	r1, r2
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff ff5f 	bl	8002138 <__NVIC_SetPriority>
}
 800227a:	bf00      	nop
 800227c:	3718      	adds	r7, #24
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b082      	sub	sp, #8
 8002286:	af00      	add	r7, sp, #0
 8002288:	4603      	mov	r3, r0
 800228a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800228c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff ff33 	bl	80020fc <__NVIC_EnableIRQ>
}
 8002296:	bf00      	nop
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b082      	sub	sp, #8
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7ff ffa4 	bl	80021f4 <SysTick_Config>
 80022ac:	4603      	mov	r3, r0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b082      	sub	sp, #8
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e014      	b.n	80022f2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	791b      	ldrb	r3, [r3, #4]
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d105      	bne.n	80022de <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f7fe fe81 	bl	8000fe0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2202      	movs	r2, #2
 80022e2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2201      	movs	r2, #1
 80022ee:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
	...

080022fc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b08a      	sub	sp, #40	; 0x28
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002308:	2300      	movs	r3, #0
 800230a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d002      	beq.n	8002318 <HAL_DAC_ConfigChannel+0x1c>
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e184      	b.n	8002626 <HAL_DAC_ConfigChannel+0x32a>
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	795b      	ldrb	r3, [r3, #5]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d101      	bne.n	8002328 <HAL_DAC_ConfigChannel+0x2c>
 8002324:	2302      	movs	r3, #2
 8002326:	e17e      	b.n	8002626 <HAL_DAC_ConfigChannel+0x32a>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2201      	movs	r2, #1
 800232c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2202      	movs	r2, #2
 8002332:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	2b04      	cmp	r3, #4
 800233a:	d17a      	bne.n	8002432 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800233c:	f7ff fad8 	bl	80018f0 <HAL_GetTick>
 8002340:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d13d      	bne.n	80023c4 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002348:	e018      	b.n	800237c <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800234a:	f7ff fad1 	bl	80018f0 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b01      	cmp	r3, #1
 8002356:	d911      	bls.n	800237c <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800235e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00a      	beq.n	800237c <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	f043 0208 	orr.w	r2, r3, #8
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2203      	movs	r2, #3
 8002376:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e154      	b.n	8002626 <HAL_DAC_ConfigChannel+0x32a>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002382:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1df      	bne.n	800234a <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002392:	641a      	str	r2, [r3, #64]	; 0x40
 8002394:	e020      	b.n	80023d8 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002396:	f7ff faab 	bl	80018f0 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d90f      	bls.n	80023c4 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	da0a      	bge.n	80023c4 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	f043 0208 	orr.w	r2, r3, #8
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2203      	movs	r2, #3
 80023be:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e130      	b.n	8002626 <HAL_DAC_ConfigChannel+0x32a>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	dbe3      	blt.n	8002396 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68ba      	ldr	r2, [r7, #8]
 80023d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023d6:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f003 0310 	and.w	r3, r3, #16
 80023e4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80023e8:	fa01 f303 	lsl.w	r3, r1, r3
 80023ec:	43db      	mvns	r3, r3
 80023ee:	ea02 0103 	and.w	r1, r2, r3
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f003 0310 	and.w	r3, r3, #16
 80023fc:	409a      	lsls	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	430a      	orrs	r2, r1
 8002404:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f003 0310 	and.w	r3, r3, #16
 8002412:	21ff      	movs	r1, #255	; 0xff
 8002414:	fa01 f303 	lsl.w	r3, r1, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	ea02 0103 	and.w	r1, r2, r3
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f003 0310 	and.w	r3, r3, #16
 8002428:	409a      	lsls	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	430a      	orrs	r2, r1
 8002430:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  /* Autonomous mode configuration */
  MODIFY_REG(hdac->Instance->AUTOCR, DAC_AUTOCR_AUTOMODE, sConfig->DAC_AutonomousMode);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002438:	f423 0180 	bic.w	r1, r3, #4194304	; 0x400000
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	430a      	orrs	r2, r1
 8002446:	655a      	str	r2, [r3, #84]	; 0x54

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	69db      	ldr	r3, [r3, #28]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d11d      	bne.n	800248c <HAL_DAC_ConfigChannel+0x190>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002456:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f003 0310 	and.w	r3, r3, #16
 800245e:	221f      	movs	r2, #31
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	43db      	mvns	r3, r3
 8002466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002468:	4013      	ands	r3, r2
 800246a:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f003 0310 	and.w	r3, r3, #16
 8002478:	697a      	ldr	r2, [r7, #20]
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002480:	4313      	orrs	r3, r2
 8002482:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800248a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002492:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f003 0310 	and.w	r3, r3, #16
 800249a:	2207      	movs	r2, #7
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	43db      	mvns	r3, r3
 80024a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024a4:	4013      	ands	r3, r2
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d102      	bne.n	80024b6 <HAL_DAC_ConfigChannel+0x1ba>
  {
    connectOnChip = 0x00000000UL;
 80024b0:	2300      	movs	r3, #0
 80024b2:	623b      	str	r3, [r7, #32]
 80024b4:	e00f      	b.n	80024d6 <HAL_DAC_ConfigChannel+0x1da>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d102      	bne.n	80024c4 <HAL_DAC_ConfigChannel+0x1c8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80024be:	2301      	movs	r3, #1
 80024c0:	623b      	str	r3, [r7, #32]
 80024c2:	e008      	b.n	80024d6 <HAL_DAC_ConfigChannel+0x1da>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d102      	bne.n	80024d2 <HAL_DAC_ConfigChannel+0x1d6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80024cc:	2301      	movs	r3, #1
 80024ce:	623b      	str	r3, [r7, #32]
 80024d0:	e001      	b.n	80024d6 <HAL_DAC_ConfigChannel+0x1da>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80024d2:	2300      	movs	r3, #0
 80024d4:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	68da      	ldr	r2, [r3, #12]
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	4313      	orrs	r3, r2
 80024e0:	6a3a      	ldr	r2, [r7, #32]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f003 0310 	and.w	r3, r3, #16
 80024ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	43db      	mvns	r3, r3
 80024f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024f8:	4013      	ands	r3, r2
 80024fa:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	7a1b      	ldrb	r3, [r3, #8]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d102      	bne.n	800250a <HAL_DAC_ConfigChannel+0x20e>
 8002504:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002508:	e000      	b.n	800250c <HAL_DAC_ConfigChannel+0x210>
 800250a:	2300      	movs	r3, #0
 800250c:	697a      	ldr	r2, [r7, #20]
 800250e:	4313      	orrs	r3, r2
 8002510:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f003 0310 	and.w	r3, r3, #16
 8002518:	f44f 7200 	mov.w	r2, #512	; 0x200
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	43db      	mvns	r3, r3
 8002522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002524:	4013      	ands	r3, r2
 8002526:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	7a5b      	ldrb	r3, [r3, #9]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d102      	bne.n	8002536 <HAL_DAC_ConfigChannel+0x23a>
 8002530:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002534:	e000      	b.n	8002538 <HAL_DAC_ConfigChannel+0x23c>
 8002536:	2300      	movs	r3, #0
 8002538:	697a      	ldr	r2, [r7, #20]
 800253a:	4313      	orrs	r3, r2
 800253c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2b02      	cmp	r3, #2
 800254c:	d114      	bne.n	8002578 <HAL_DAC_ConfigChannel+0x27c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800254e:	f002 fb57 	bl	8004c00 <HAL_RCC_GetHCLKFreq>
 8002552:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	4a36      	ldr	r2, [pc, #216]	; (8002630 <HAL_DAC_ConfigChannel+0x334>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d904      	bls.n	8002566 <HAL_DAC_ConfigChannel+0x26a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002562:	627b      	str	r3, [r7, #36]	; 0x24
 8002564:	e00f      	b.n	8002586 <HAL_DAC_ConfigChannel+0x28a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	4a32      	ldr	r2, [pc, #200]	; (8002634 <HAL_DAC_ConfigChannel+0x338>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d90a      	bls.n	8002584 <HAL_DAC_ConfigChannel+0x288>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002574:	627b      	str	r3, [r7, #36]	; 0x24
 8002576:	e006      	b.n	8002586 <HAL_DAC_ConfigChannel+0x28a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800257e:	4313      	orrs	r3, r2
 8002580:	627b      	str	r3, [r7, #36]	; 0x24
 8002582:	e000      	b.n	8002586 <HAL_DAC_ConfigChannel+0x28a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8002584:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f003 0310 	and.w	r3, r3, #16
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002594:	4313      	orrs	r3, r2
 8002596:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800259e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6819      	ldr	r1, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f003 0310 	and.w	r3, r3, #16
 80025ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43da      	mvns	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	400a      	ands	r2, r1
 80025bc:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f003 0310 	and.w	r3, r3, #16
 80025cc:	f640 72fe 	movw	r2, #4094	; 0xffe
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	43db      	mvns	r3, r3
 80025d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025d8:	4013      	ands	r3, r2
 80025da:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f003 0310 	and.w	r3, r3, #16
 80025e8:	697a      	ldr	r2, [r7, #20]
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f0:	4313      	orrs	r3, r2
 80025f2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025fa:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6819      	ldr	r1, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f003 0310 	and.w	r3, r3, #16
 8002608:	22c0      	movs	r2, #192	; 0xc0
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	43da      	mvns	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	400a      	ands	r2, r1
 8002616:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2201      	movs	r2, #1
 800261c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002624:	7ffb      	ldrb	r3, [r7, #31]
}
 8002626:	4618      	mov	r0, r3
 8002628:	3728      	adds	r7, #40	; 0x28
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	09896800 	.word	0x09896800
 8002634:	04c4b400 	.word	0x04c4b400

08002638 <HAL_DACEx_SetConfigAutonomousMode>:
  * @param sConfig pointer to Autonomous mode structure parameters.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_SetConfigAutonomousMode(DAC_HandleTypeDef *hdac,
                                                    const DAC_AutonomousModeConfTypeDef *sConfig)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle and autonomous mode configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d002      	beq.n	800264e <HAL_DACEx_SetConfigAutonomousMode+0x16>
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_DACEx_SetConfigAutonomousMode+0x1a>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e024      	b.n	800269c <HAL_DACEx_SetConfigAutonomousMode+0x64>
  }

  assert_param(IS_DAC_AUTONOMOUS(sConfig->AutonomousModeState));

  if (hdac->State == HAL_DAC_STATE_READY)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	791b      	ldrb	r3, [r3, #4]
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b01      	cmp	r3, #1
 800265a:	d11e      	bne.n	800269a <HAL_DACEx_SetConfigAutonomousMode+0x62>
  {
    /* Process Locked */
    __HAL_LOCK(hdac);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	795b      	ldrb	r3, [r3, #5]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d101      	bne.n	8002668 <HAL_DACEx_SetConfigAutonomousMode+0x30>
 8002664:	2302      	movs	r3, #2
 8002666:	e019      	b.n	800269c <HAL_DACEx_SetConfigAutonomousMode+0x64>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	715a      	strb	r2, [r3, #5]

    hdac->State = HAL_DAC_STATE_BUSY;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2202      	movs	r2, #2
 8002672:	711a      	strb	r2, [r3, #4]

    /* NOTE: The set/reset of the bit automode in the AUTOCR
             register is for both dac_channel1 and dac_channel2 */

    /* Update the AUTOCR register */
    MODIFY_REG(hdac->Instance->AUTOCR, DAC_AUTOCR_AUTOMODE, sConfig->AutonomousModeState);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267a:	f423 0180 	bic.w	r1, r3, #4194304	; 0x400000
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	430a      	orrs	r2, r1
 8002688:	655a      	str	r2, [r3, #84]	; 0x54

    /* Update the DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	711a      	strb	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdac);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	715a      	strb	r2, [r3, #5]

    return HAL_OK;
 8002696:	2300      	movs	r3, #0
 8002698:	e000      	b.n	800269c <HAL_DACEx_SetConfigAutonomousMode+0x64>
  }
  else
  {
    return HAL_BUSY;
 800269a:	2302      	movs	r3, #2
  }
}
 800269c:	4618      	mov	r0, r3
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80026b0:	f7ff f91e 	bl	80018f0 <HAL_GetTick>
 80026b4:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e06b      	b.n	8002798 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d008      	beq.n	80026de <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2220      	movs	r2, #32
 80026d0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e05c      	b.n	8002798 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	695a      	ldr	r2, [r3, #20]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f042 0204 	orr.w	r2, r2, #4
 80026ec:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2205      	movs	r2, #5
 80026f2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80026f6:	e020      	b.n	800273a <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80026f8:	f7ff f8fa 	bl	80018f0 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b05      	cmp	r3, #5
 8002704:	d919      	bls.n	800273a <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800270a:	f043 0210 	orr.w	r2, r3, #16
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2203      	movs	r2, #3
 8002716:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800271e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800272a:	2201      	movs	r2, #1
 800272c:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e02e      	b.n	8002798 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0d7      	beq.n	80026f8 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	695a      	ldr	r2, [r3, #20]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f042 0202 	orr.w	r2, r2, #2
 8002756:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2204      	movs	r2, #4
 800275c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8002768:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800277a:	2b00      	cmp	r3, #0
 800277c:	d007      	beq.n	800278e <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002782:	2201      	movs	r2, #1
 8002784:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2200      	movs	r2, #0
 800278c:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e019      	b.n	80027e6 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d004      	beq.n	80027c8 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2220      	movs	r2, #32
 80027c2:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e00e      	b.n	80027e6 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2204      	movs	r2, #4
 80027cc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6812      	ldr	r2, [r2, #0]
 80027da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027de:	f043 0304 	orr.w	r3, r3, #4
 80027e2:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
	...

080027f4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b089      	sub	sp, #36	; 0x24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002806:	e1ba      	b.n	8002b7e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	2101      	movs	r1, #1
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	fa01 f303 	lsl.w	r3, r1, r3
 8002814:	4013      	ands	r3, r2
 8002816:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2b00      	cmp	r3, #0
 8002820:	f000 81aa 	beq.w	8002b78 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a55      	ldr	r2, [pc, #340]	; (800297c <HAL_GPIO_Init+0x188>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d15d      	bne.n	80028e8 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8002832:	2201      	movs	r2, #1
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43db      	mvns	r3, r3
 800283c:	69fa      	ldr	r2, [r7, #28]
 800283e:	4013      	ands	r3, r2
 8002840:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f003 0201 	and.w	r2, r3, #1
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	69fa      	ldr	r2, [r7, #28]
 8002852:	4313      	orrs	r3, r2
 8002854:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69fa      	ldr	r2, [r7, #28]
 800285a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800285c:	4a48      	ldr	r2, [pc, #288]	; (8002980 <HAL_GPIO_Init+0x18c>)
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002864:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8002866:	4a46      	ldr	r2, [pc, #280]	; (8002980 <HAL_GPIO_Init+0x18c>)
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	4413      	add	r3, r2
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	08da      	lsrs	r2, r3, #3
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	3208      	adds	r2, #8
 800287a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800287e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	220f      	movs	r2, #15
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43db      	mvns	r3, r3
 8002890:	69fa      	ldr	r2, [r7, #28]
 8002892:	4013      	ands	r3, r2
 8002894:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	220b      	movs	r2, #11
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	69fa      	ldr	r2, [r7, #28]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	08da      	lsrs	r2, r3, #3
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	3208      	adds	r2, #8
 80028b2:	69f9      	ldr	r1, [r7, #28]
 80028b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	2203      	movs	r2, #3
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	43db      	mvns	r3, r3
 80028ca:	69fa      	ldr	r2, [r7, #28]
 80028cc:	4013      	ands	r3, r2
 80028ce:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	2202      	movs	r2, #2
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	69fa      	ldr	r2, [r7, #28]
 80028dc:	4313      	orrs	r3, r2
 80028de:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	69fa      	ldr	r2, [r7, #28]
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	e067      	b.n	80029b8 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d003      	beq.n	80028f8 <HAL_GPIO_Init+0x104>
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	2b12      	cmp	r3, #18
 80028f6:	d145      	bne.n	8002984 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	08da      	lsrs	r2, r3, #3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3208      	adds	r2, #8
 8002900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002904:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	220f      	movs	r2, #15
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	43db      	mvns	r3, r3
 8002916:	69fa      	ldr	r2, [r7, #28]
 8002918:	4013      	ands	r3, r2
 800291a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	f003 020f 	and.w	r2, r3, #15
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	69fa      	ldr	r2, [r7, #28]
 8002932:	4313      	orrs	r3, r2
 8002934:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	08da      	lsrs	r2, r3, #3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	3208      	adds	r2, #8
 800293e:	69f9      	ldr	r1, [r7, #28]
 8002940:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	2203      	movs	r2, #3
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	43db      	mvns	r3, r3
 8002956:	69fa      	ldr	r2, [r7, #28]
 8002958:	4013      	ands	r3, r2
 800295a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f003 0203 	and.w	r2, r3, #3
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	69fa      	ldr	r2, [r7, #28]
 800296e:	4313      	orrs	r3, r2
 8002970:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	69fa      	ldr	r2, [r7, #28]
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	e01e      	b.n	80029b8 <HAL_GPIO_Init+0x1c4>
 800297a:	bf00      	nop
 800297c:	46020000 	.word	0x46020000
 8002980:	0800ab6c 	.word	0x0800ab6c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	2203      	movs	r2, #3
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	43db      	mvns	r3, r3
 8002996:	69fa      	ldr	r2, [r7, #28]
 8002998:	4013      	ands	r3, r2
 800299a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f003 0203 	and.w	r2, r3, #3
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	69fa      	ldr	r2, [r7, #28]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	69fa      	ldr	r2, [r7, #28]
 80029b6:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d00b      	beq.n	80029d8 <HAL_GPIO_Init+0x1e4>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d007      	beq.n	80029d8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029cc:	2b11      	cmp	r3, #17
 80029ce:	d003      	beq.n	80029d8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	2b12      	cmp	r3, #18
 80029d6:	d130      	bne.n	8002a3a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	2203      	movs	r2, #3
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	43db      	mvns	r3, r3
 80029ea:	69fa      	ldr	r2, [r7, #28]
 80029ec:	4013      	ands	r3, r2
 80029ee:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	68da      	ldr	r2, [r3, #12]
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	69fa      	ldr	r2, [r7, #28]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	69fa      	ldr	r2, [r7, #28]
 8002a06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8002a0e:	2201      	movs	r2, #1
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	43db      	mvns	r3, r3
 8002a18:	69fa      	ldr	r2, [r7, #28]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	091b      	lsrs	r3, r3, #4
 8002a24:	f003 0201 	and.w	r2, r3, #1
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	69fa      	ldr	r2, [r7, #28]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	69fa      	ldr	r2, [r7, #28]
 8002a38:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b03      	cmp	r3, #3
 8002a40:	d017      	beq.n	8002a72 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	2203      	movs	r2, #3
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a52:	43db      	mvns	r3, r3
 8002a54:	69fa      	ldr	r2, [r7, #28]
 8002a56:	4013      	ands	r3, r2
 8002a58:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	689a      	ldr	r2, [r3, #8]
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	69fa      	ldr	r2, [r7, #28]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	69fa      	ldr	r2, [r7, #28]
 8002a70:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d07c      	beq.n	8002b78 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002a7e:	4a47      	ldr	r2, [pc, #284]	; (8002b9c <HAL_GPIO_Init+0x3a8>)
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	089b      	lsrs	r3, r3, #2
 8002a84:	3318      	adds	r3, #24
 8002a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a8a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	220f      	movs	r2, #15
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	69fa      	ldr	r2, [r7, #28]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	0a9a      	lsrs	r2, r3, #10
 8002aa6:	4b3e      	ldr	r3, [pc, #248]	; (8002ba0 <HAL_GPIO_Init+0x3ac>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	f002 0203 	and.w	r2, r2, #3
 8002ab0:	00d2      	lsls	r2, r2, #3
 8002ab2:	4093      	lsls	r3, r2
 8002ab4:	69fa      	ldr	r2, [r7, #28]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002aba:	4938      	ldr	r1, [pc, #224]	; (8002b9c <HAL_GPIO_Init+0x3a8>)
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	089b      	lsrs	r3, r3, #2
 8002ac0:	3318      	adds	r3, #24
 8002ac2:	69fa      	ldr	r2, [r7, #28]
 8002ac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002ac8:	4b34      	ldr	r3, [pc, #208]	; (8002b9c <HAL_GPIO_Init+0x3a8>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	69fa      	ldr	r2, [r7, #28]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8002ae4:	69fa      	ldr	r2, [r7, #28]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8002aec:	4a2b      	ldr	r2, [pc, #172]	; (8002b9c <HAL_GPIO_Init+0x3a8>)
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002af2:	4b2a      	ldr	r3, [pc, #168]	; (8002b9c <HAL_GPIO_Init+0x3a8>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	43db      	mvns	r3, r3
 8002afc:	69fa      	ldr	r2, [r7, #28]
 8002afe:	4013      	ands	r3, r2
 8002b00:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8002b0e:	69fa      	ldr	r2, [r7, #28]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8002b16:	4a21      	ldr	r2, [pc, #132]	; (8002b9c <HAL_GPIO_Init+0x3a8>)
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002b1c:	4b1f      	ldr	r3, [pc, #124]	; (8002b9c <HAL_GPIO_Init+0x3a8>)
 8002b1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b22:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	43db      	mvns	r3, r3
 8002b28:	69fa      	ldr	r2, [r7, #28]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8002b3a:	69fa      	ldr	r2, [r7, #28]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8002b42:	4a16      	ldr	r2, [pc, #88]	; (8002b9c <HAL_GPIO_Init+0x3a8>)
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8002b4a:	4b14      	ldr	r3, [pc, #80]	; (8002b9c <HAL_GPIO_Init+0x3a8>)
 8002b4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b50:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	43db      	mvns	r3, r3
 8002b56:	69fa      	ldr	r2, [r7, #28]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8002b68:	69fa      	ldr	r2, [r7, #28]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002b70:	4a0a      	ldr	r2, [pc, #40]	; (8002b9c <HAL_GPIO_Init+0x3a8>)
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	fa22 f303 	lsr.w	r3, r2, r3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f47f ae3d 	bne.w	8002808 <HAL_GPIO_Init+0x14>
  }
}
 8002b8e:	bf00      	nop
 8002b90:	bf00      	nop
 8002b92:	3724      	adds	r7, #36	; 0x24
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	46022000 	.word	0x46022000
 8002ba0:	002f7f7f 	.word	0x002f7f7f

08002ba4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	460b      	mov	r3, r1
 8002bae:	807b      	strh	r3, [r7, #2]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bb4:	787b      	ldrb	r3, [r7, #1]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bba:	887a      	ldrh	r2, [r7, #2]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8002bc0:	e002      	b.n	8002bc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8002bc2:	887a      	ldrh	r2, [r7, #2]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e08d      	b.n	8002d02 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d106      	bne.n	8002c00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7fe fa54 	bl	80010a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2224      	movs	r2, #36	; 0x24
 8002c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0201 	bic.w	r2, r2, #1
 8002c16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c24:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c34:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d107      	bne.n	8002c4e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c4a:	609a      	str	r2, [r3, #8]
 8002c4c:	e006      	b.n	8002c5c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002c5a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d108      	bne.n	8002c76 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c72:	605a      	str	r2, [r3, #4]
 8002c74:	e007      	b.n	8002c86 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c84:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	6812      	ldr	r2, [r2, #0]
 8002c90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c98:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68da      	ldr	r2, [r3, #12]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ca8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	691a      	ldr	r2, [r3, #16]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	69d9      	ldr	r1, [r3, #28]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a1a      	ldr	r2, [r3, #32]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 0201 	orr.w	r2, r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2220      	movs	r2, #32
 8002cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b084      	sub	sp, #16
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d005      	beq.n	8002d36 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	68f9      	ldr	r1, [r7, #12]
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	4798      	blx	r3
  }
}
 8002d36:	bf00      	nop
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
 8002d46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	2b20      	cmp	r3, #32
 8002d52:	d138      	bne.n	8002dc6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d101      	bne.n	8002d62 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d5e:	2302      	movs	r3, #2
 8002d60:	e032      	b.n	8002dc8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2224      	movs	r2, #36	; 0x24
 8002d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 0201 	bic.w	r2, r2, #1
 8002d80:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d90:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6819      	ldr	r1, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f042 0201 	orr.w	r2, r2, #1
 8002db0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2220      	movs	r2, #32
 8002db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	e000      	b.n	8002dc8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002dc6:	2302      	movs	r3, #2
  }
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b20      	cmp	r3, #32
 8002de8:	d139      	bne.n	8002e5e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d101      	bne.n	8002df8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002df4:	2302      	movs	r3, #2
 8002df6:	e033      	b.n	8002e60 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2224      	movs	r2, #36	; 0x24
 8002e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0201 	bic.w	r2, r2, #1
 8002e16:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e26:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	021b      	lsls	r3, r3, #8
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f042 0201 	orr.w	r2, r2, #1
 8002e48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	e000      	b.n	8002e60 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e5e:	2302      	movs	r3, #2
  }
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3714      	adds	r7, #20
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <HAL_ICACHE_Disable>:
  * @note   This function waits for the cache being disabled but
  *         not for the end of the automatic cache invalidation procedure.
  * @retval HAL status (HAL_OK/HAL_TIMEOUT)
  */
HAL_StatusTypeDef HAL_ICACHE_Disable(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002e72:	2300      	movs	r3, #0
 8002e74:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Make sure BSYENDF is reset before to disable the instruction cache */
  /* as it automatically starts a cache invalidation procedure */
  WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 8002e76:	4b14      	ldr	r3, [pc, #80]	; (8002ec8 <HAL_ICACHE_Disable+0x5c>)
 8002e78:	2202      	movs	r2, #2
 8002e7a:	60da      	str	r2, [r3, #12]

  CLEAR_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002e7c:	4b12      	ldr	r3, [pc, #72]	; (8002ec8 <HAL_ICACHE_Disable+0x5c>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a11      	ldr	r2, [pc, #68]	; (8002ec8 <HAL_ICACHE_Disable+0x5c>)
 8002e82:	f023 0301 	bic.w	r3, r3, #1
 8002e86:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e88:	f7fe fd32 	bl	80018f0 <HAL_GetTick>
 8002e8c:	6038      	str	r0, [r7, #0]

  /* Wait for instruction cache being disabled */
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002e8e:	e00f      	b.n	8002eb0 <HAL_ICACHE_Disable+0x44>
  {
    if ((HAL_GetTick() - tickstart) > ICACHE_DISABLE_TIMEOUT_VALUE)
 8002e90:	f7fe fd2e 	bl	80018f0 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d908      	bls.n	8002eb0 <HAL_ICACHE_Disable+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002e9e:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <HAL_ICACHE_Disable+0x5c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d002      	beq.n	8002eb0 <HAL_ICACHE_Disable+0x44>
      {
        status = HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	71fb      	strb	r3, [r7, #7]
        break;
 8002eae:	e005      	b.n	8002ebc <HAL_ICACHE_Disable+0x50>
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002eb0:	4b05      	ldr	r3, [pc, #20]	; (8002ec8 <HAL_ICACHE_Disable+0x5c>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1e9      	bne.n	8002e90 <HAL_ICACHE_Disable+0x24>
      }
    }
  }

  return status;
 8002ebc:	79fb      	ldrb	r3, [r7, #7]
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40030400 	.word	0x40030400

08002ecc <HAL_ICACHE_EnableRemapRegion>:
                     This parameter can be a value of @arg @ref ICACHE_Region
  * @param  pRegionConfig  Pointer to structure of ICACHE region configuration parameters
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef  HAL_ICACHE_EnableRemapRegion(uint32_t Region, const ICACHE_RegionConfigTypeDef *const pRegionConfig)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b087      	sub	sp, #28
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ICACHE_REGION_SIZE(pRegionConfig->Size));
  assert_param(IS_ICACHE_REGION_TRAFFIC_ROUTE(pRegionConfig->TrafficRoute));
  assert_param(IS_ICACHE_REGION_OUTPUT_BURST_TYPE(pRegionConfig->OutputBurstType));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002eda:	4b22      	ldr	r3, [pc, #136]	; (8002f64 <HAL_ICACHE_EnableRemapRegion+0x98>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d002      	beq.n	8002eec <HAL_ICACHE_EnableRemapRegion+0x20>
  {
    status = HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	75fb      	strb	r3, [r7, #23]
 8002eea:	e034      	b.n	8002f56 <HAL_ICACHE_EnableRemapRegion+0x8a>
  }
  else
  {
    /* Get region control register address */
    p_reg = &(ICACHE->CRR0) + (1U * Region);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	009a      	lsls	r2, r3, #2
 8002ef0:	4b1d      	ldr	r3, [pc, #116]	; (8002f68 <HAL_ICACHE_EnableRemapRegion+0x9c>)
 8002ef2:	4413      	add	r3, r2
 8002ef4:	613b      	str	r3, [r7, #16]

    /* Check region is not already enabled */
    if ((*p_reg & ICACHE_CRRx_REN) != 0U)
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d002      	beq.n	8002f08 <HAL_ICACHE_EnableRemapRegion+0x3c>
    {
      status = HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	75fb      	strb	r3, [r7, #23]
 8002f06:	e026      	b.n	8002f56 <HAL_ICACHE_EnableRemapRegion+0x8a>
      /* Region 8MB:   BaseAddress size 6 bits, RemapAddress size 9 bits  */
      /* Region 16MB:  BaseAddress size 5 bits, RemapAddress size 8 bits  */
      /* Region 32MB:  BaseAddress size 4 bits, RemapAddress size 7 bits  */
      /* Region 64MB:  BaseAddress size 3 bits, RemapAddress size 6 bits  */
      /* Region 128MB: BaseAddress size 2 bits, RemapAddress size 5 bits  */
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	0d5a      	lsrs	r2, r3, #21
               (0xFFU & ~(pRegionConfig->Size - 1U));
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	425b      	negs	r3, r3
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 8002f14:	4013      	ands	r3, r2
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	60fb      	str	r3, [r7, #12]
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	095a      	lsrs	r2, r3, #5
                ((uint32_t)(0x7FFU & ~(pRegionConfig->Size - 1U)) << ICACHE_CRRx_REMAPADDR_Pos));
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	425b      	negs	r3, r3
 8002f26:	041b      	lsls	r3, r3, #16
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 8002f28:	401a      	ands	r2, r3
 8002f2a:	4b10      	ldr	r3, [pc, #64]	; (8002f6c <HAL_ICACHE_EnableRemapRegion+0xa0>)
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	60fb      	str	r3, [r7, #12]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	025a      	lsls	r2, r3, #9
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	431a      	orrs	r2, r3
               pRegionConfig->OutputBurstType;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	691b      	ldr	r3, [r3, #16]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 8002f44:	4313      	orrs	r3, r2
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	60fb      	str	r3, [r7, #12]
      *p_reg = (value | ICACHE_CRRx_REN);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
 8002f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	371c      	adds	r7, #28
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	40030400 	.word	0x40030400
 8002f68:	40030420 	.word	0x40030420
 8002f6c:	07ff0000 	.word	0x07ff0000

08002f70 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e0e7      	b.n	8003152 <HAL_LPTIM_Init+0x1e2>
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(hlptim->Init.Period));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d106      	bne.n	8002fa2 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f7fe f8f5 	bl	800118c <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2202      	movs	r2, #2
 8002fa6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	691a      	ldr	r2, [r3, #16]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f042 0201 	orr.w	r2, r2, #1
 8002fb8:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fc2:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002fcc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8002fce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 faea 	bl	80035ac <LPTIM_WaitForFlag>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b03      	cmp	r3, #3
 8002fdc:	d101      	bne.n	8002fe2 <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e0b7      	b.n	8003152 <HAL_LPTIM_Init+0x1e2>
  }


  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2210      	movs	r2, #16
 8002fe8:	605a      	str	r2, [r3, #4]

  /* Set LPTIM Period */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, hlptim->Init.Period);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	6a12      	ldr	r2, [r2, #32]
 8002ff2:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8002ff4:	2110      	movs	r1, #16
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 fad8 	bl	80035ac <LPTIM_WaitForFlag>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b03      	cmp	r3, #3
 8003000:	d101      	bne.n	8003006 <HAL_LPTIM_Init+0x96>
  {
    return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e0a5      	b.n	8003152 <HAL_LPTIM_Init+0x1e2>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10e      	bne.n	8003032 <HAL_LPTIM_Init+0xc2>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d107      	bne.n	8003032 <HAL_LPTIM_Init+0xc2>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	691a      	ldr	r2, [r3, #16]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 0201 	bic.w	r2, r2, #1
 8003030:	611a      	str	r2, [r3, #16]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d004      	beq.n	800304c <HAL_LPTIM_Init+0xdc>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003046:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800304a:	d103      	bne.n	8003054 <HAL_LPTIM_Init+0xe4>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f023 031e 	bic.w	r3, r3, #30
 8003052:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800305c:	4293      	cmp	r3, r2
 800305e:	d005      	beq.n	800306c <HAL_LPTIM_Init+0xfc>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003066:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800306a:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	4b3b      	ldr	r3, [pc, #236]	; (800315c <HAL_LPTIM_Init+0x1ec>)
 8003070:	4013      	ands	r3, r2
 8003072:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800307c:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.Clock.Prescaler |
 8003082:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8003088:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	4313      	orrs	r3, r2
 800308e:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d107      	bne.n	80030a8 <HAL_LPTIM_Init+0x138>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80030a0:	4313      	orrs	r3, r2
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d004      	beq.n	80030ba <HAL_LPTIM_Init+0x14a>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030b8:	d107      	bne.n	80030ca <HAL_LPTIM_Init+0x15a>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80030c2:	4313      	orrs	r3, r2
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d00a      	beq.n	80030ec <HAL_LPTIM_Init+0x17c>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80030de:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80030e4:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a19      	ldr	r2, [pc, #100]	; (8003160 <HAL_LPTIM_Init+0x1f0>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d004      	beq.n	8003108 <HAL_LPTIM_Init+0x198>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a18      	ldr	r2, [pc, #96]	; (8003164 <HAL_LPTIM_Init+0x1f4>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d108      	bne.n	800311a <HAL_LPTIM_Init+0x1aa>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	430a      	orrs	r2, r1
 8003116:	625a      	str	r2, [r3, #36]	; 0x24
 8003118:	e00e      	b.n	8003138 <HAL_LPTIM_Init+0x1c8>
  }
  else
  {
    if ((hlptim->Instance == LPTIM3) || (hlptim->Instance == LPTIM4))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a12      	ldr	r2, [pc, #72]	; (8003168 <HAL_LPTIM_Init+0x1f8>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d004      	beq.n	800312e <HAL_LPTIM_Init+0x1be>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a10      	ldr	r2, [pc, #64]	; (800316c <HAL_LPTIM_Init+0x1fc>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d104      	bne.n	8003138 <HAL_LPTIM_Init+0x1c8>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003136:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Initialize the LPTIM channels state */
  LPTIM_CHANNEL_STATE_SET_ALL(hlptim, HAL_LPTIM_CHANNEL_STATE_READY);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Return function status */
  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	ff39f1fe 	.word	0xff39f1fe
 8003160:	46004400 	.word	0x46004400
 8003164:	40009400 	.word	0x40009400
 8003168:	46004800 	.word	0x46004800
 800316c:	46004c00 	.word	0x46004c00

08003170 <HAL_LPTIM_Counter_Start_IT>:
  * @brief  Start the Counter mode in interrupt mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2202      	movs	r2, #2
 800317c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d00c      	beq.n	80031a2 <HAL_LPTIM_Counter_Start_IT+0x32>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003190:	d107      	bne.n	80031a2 <HAL_LPTIM_Counter_Start_IT+0x32>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68da      	ldr	r2, [r3, #12]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 80031a0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	691a      	ldr	r2, [r3, #16]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f042 0201 	orr.w	r2, r2, #1
 80031b0:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DIEROK);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031ba:	605a      	str	r2, [r3, #4]

  /* Enable interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK | LPTIM_IT_ARRM | LPTIM_IT_REPOK | LPTIM_IT_UPDATE);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689a      	ldr	r2, [r3, #8]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f442 72c9 	orr.w	r2, r2, #402	; 0x192
 80031ca:	609a      	str	r2, [r3, #8]

  /* Wait for the completion of the write operation to the LPTIM_DIER register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_DIEROK) == HAL_TIMEOUT)
 80031cc:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 f9eb 	bl	80035ac <LPTIM_WaitForFlag>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b03      	cmp	r3, #3
 80031da:	d101      	bne.n	80031e0 <HAL_LPTIM_Counter_Start_IT+0x70>
  {
    return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e00c      	b.n	80031fa <HAL_LPTIM_Counter_Start_IT+0x8a>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	691a      	ldr	r2, [r3, #16]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0204 	orr.w	r2, r2, #4
 80031ee:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Return function status */
  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b082      	sub	sp, #8
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  /* Capture Compare 1 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1) != RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b01      	cmp	r3, #1
 8003216:	d120      	bne.n	800325a <HAL_LPTIM_IRQHandler+0x58>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1) != RESET)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b01      	cmp	r3, #1
 8003224:	d119      	bne.n	800325a <HAL_LPTIM_IRQHandler+0x58>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2201      	movs	r2, #1
 800322c:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Input capture event */
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC1SEL) != 0x00U)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	2b00      	cmp	r3, #0
 8003242:	d003      	beq.n	800324c <HAL_LPTIM_IRQHandler+0x4a>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
#else
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 f99c 	bl	8003582 <HAL_LPTIM_IC_CaptureCallback>
 800324a:	e002      	b.n	8003252 <HAL_LPTIM_IRQHandler+0x50>
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 f93e 	bl	80034ce <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Capture Compare 2 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2) != RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003268:	d122      	bne.n	80032b0 <HAL_LPTIM_IRQHandler+0xae>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003274:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003278:	d11a      	bne.n	80032b0 <HAL_LPTIM_IRQHandler+0xae>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003282:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2202      	movs	r2, #2
 8003288:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Input capture event */
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC2SEL) != 0x00U)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003292:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_LPTIM_IRQHandler+0xa0>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
#else
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f971 	bl	8003582 <HAL_LPTIM_IC_CaptureCallback>
 80032a0:	e002      	b.n	80032a8 <HAL_LPTIM_IRQHandler+0xa6>
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f913 	bl	80034ce <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Over Capture 1 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1O) != RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032be:	d117      	bne.n	80032f0 <HAL_LPTIM_IRQHandler+0xee>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1O) != RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ce:	d10f      	bne.n	80032f0 <HAL_LPTIM_IRQHandler+0xee>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1O);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032d8:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f957 	bl	8003596 <HAL_LPTIM_IC_OverCaptureCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Over Capture 2 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2O) != RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032fe:	d117      	bne.n	8003330 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2O) != RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800330a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800330e:	d10f      	bne.n	8003330 <HAL_LPTIM_IRQHandler+0x12e>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2O);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003318:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2202      	movs	r2, #2
 800331e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f937 	bl	8003596 <HAL_LPTIM_IC_OverCaptureCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b02      	cmp	r3, #2
 800333c:	d10d      	bne.n	800335a <HAL_LPTIM_IRQHandler+0x158>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b02      	cmp	r3, #2
 800334a:	d106      	bne.n	800335a <HAL_LPTIM_IRQHandler+0x158>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2202      	movs	r2, #2
 8003352:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 f8c4 	bl	80034e2 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b04      	cmp	r3, #4
 8003366:	d10d      	bne.n	8003384 <HAL_LPTIM_IRQHandler+0x182>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 0304 	and.w	r3, r3, #4
 8003372:	2b04      	cmp	r3, #4
 8003374:	d106      	bne.n	8003384 <HAL_LPTIM_IRQHandler+0x182>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2204      	movs	r2, #4
 800337c:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 f8b9 	bl	80034f6 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP1OK) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0308 	and.w	r3, r3, #8
 800338e:	2b08      	cmp	r3, #8
 8003390:	d111      	bne.n	80033b6 <HAL_LPTIM_IRQHandler+0x1b4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP1OK) != RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f003 0308 	and.w	r3, r3, #8
 800339c:	2b08      	cmp	r3, #8
 800339e:	d10a      	bne.n	80033b6 <HAL_LPTIM_IRQHandler+0x1b4>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP1OK);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2208      	movs	r2, #8
 80033a6:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 f8aa 	bl	800350a <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP2OK) != RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033c0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80033c4:	d113      	bne.n	80033ee <HAL_LPTIM_IRQHandler+0x1ec>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP2OK) != RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033d0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80033d4:	d10b      	bne.n	80033ee <HAL_LPTIM_IRQHandler+0x1ec>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP2OK);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80033de:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2202      	movs	r2, #2
 80033e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 f88e 	bl	800350a <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0310 	and.w	r3, r3, #16
 80033f8:	2b10      	cmp	r3, #16
 80033fa:	d10d      	bne.n	8003418 <HAL_LPTIM_IRQHandler+0x216>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 0310 	and.w	r3, r3, #16
 8003406:	2b10      	cmp	r3, #16
 8003408:	d106      	bne.n	8003418 <HAL_LPTIM_IRQHandler+0x216>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2210      	movs	r2, #16
 8003410:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f883 	bl	800351e <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0320 	and.w	r3, r3, #32
 8003422:	2b20      	cmp	r3, #32
 8003424:	d10d      	bne.n	8003442 <HAL_LPTIM_IRQHandler+0x240>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f003 0320 	and.w	r3, r3, #32
 8003430:	2b20      	cmp	r3, #32
 8003432:	d106      	bne.n	8003442 <HAL_LPTIM_IRQHandler+0x240>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2220      	movs	r2, #32
 800343a:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 f878 	bl	8003532 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344c:	2b40      	cmp	r3, #64	; 0x40
 800344e:	d10d      	bne.n	800346c <HAL_LPTIM_IRQHandler+0x26a>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345a:	2b40      	cmp	r3, #64	; 0x40
 800345c:	d106      	bne.n	800346c <HAL_LPTIM_IRQHandler+0x26a>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2240      	movs	r2, #64	; 0x40
 8003464:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f86d 	bl	8003546 <HAL_LPTIM_DirectionDownCallback>
    }
  }

  /* Repetition counter underflowed (or contains zero) and the LPTIM counter
     overflowed */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003476:	2b80      	cmp	r3, #128	; 0x80
 8003478:	d10d      	bne.n	8003496 <HAL_LPTIM_IRQHandler+0x294>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003484:	2b80      	cmp	r3, #128	; 0x80
 8003486:	d106      	bne.n	8003496 <HAL_LPTIM_IRQHandler+0x294>
    {
      /* Clear update event flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2280      	movs	r2, #128	; 0x80
 800348e:	605a      	str	r2, [r3, #4]

      /* Update event Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->UpdateEventCallback(hlptim);
#else
      HAL_LPTIM_UpdateEventCallback(hlptim);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 f862 	bl	800355a <HAL_LPTIM_UpdateEventCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Successful APB bus write to repetition counter register */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034a4:	d10f      	bne.n	80034c6 <HAL_LPTIM_IRQHandler+0x2c4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034b4:	d107      	bne.n	80034c6 <HAL_LPTIM_IRQHandler+0x2c4>
    {
      /* Clear successful APB bus write to repetition counter flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034be:	605a      	str	r2, [r3, #4]

      /* Successful APB bus write to repetition counter Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->RepCounterWriteCallback(hlptim);
#else
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 f854 	bl	800356e <HAL_LPTIM_RepCounterWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80034c6:	bf00      	nop
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80034ce:	b480      	push	{r7}
 80034d0:	b083      	sub	sp, #12
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 80034d6:	bf00      	nop
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b083      	sub	sp, #12
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 80034ea:	bf00      	nop
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr

080034f6 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80034f6:	b480      	push	{r7}
 80034f8:	b083      	sub	sp, #12
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80034fe:	bf00      	nop
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800350a:	b480      	push	{r7}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr

0800351e <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800351e:	b480      	push	{r7}
 8003520:	b083      	sub	sp, #12
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003532:	b480      	push	{r7}
 8003534:	b083      	sub	sp, #12
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 800353a:	bf00      	nop
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003546:	b480      	push	{r7}
 8003548:	b083      	sub	sp, #12
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 800354e:	bf00      	nop
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr

0800355a <HAL_LPTIM_UpdateEventCallback>:
  * @brief Repetition counter underflowed (or contains zero) and LPTIM counter overflowed callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 800355a:	b480      	push	{r7}
 800355c:	b083      	sub	sp, #12
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventCallback could be implemented in the user file
   */
}
 8003562:	bf00      	nop
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <HAL_LPTIM_RepCounterWriteCallback>:
  * @brief  Successful APB bus write to repetition counter register callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800356e:	b480      	push	{r7}
 8003570:	b083      	sub	sp, #12
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_RepCounterWriteCallback could be implemented in the user file
   */
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr

08003582 <HAL_LPTIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_CaptureCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003582:	b480      	push	{r7}
 8003584:	b083      	sub	sp, #12
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800358a:	bf00      	nop
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <HAL_LPTIM_IC_OverCaptureCallback>:
  * @brief  Over Capture callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_OverCaptureCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003596:	b480      	push	{r7}
 8003598:	b083      	sub	sp, #12
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_OverCaptureCallback could be implemented in the user file
   */
}
 800359e:	bf00      	nop
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
	...

080035ac <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 80035b6:	2300      	movs	r3, #0
 80035b8:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80035ba:	4b12      	ldr	r3, [pc, #72]	; (8003604 <LPTIM_WaitForFlag+0x58>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a12      	ldr	r2, [pc, #72]	; (8003608 <LPTIM_WaitForFlag+0x5c>)
 80035c0:	fba2 2303 	umull	r2, r3, r2, r3
 80035c4:	0b9b      	lsrs	r3, r3, #14
 80035c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80035ca:	fb02 f303 	mul.w	r3, r2, r3
 80035ce:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	3b01      	subs	r3, #1
 80035d4:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	4013      	ands	r3, r2
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d002      	beq.n	80035f6 <LPTIM_WaitForFlag+0x4a>
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1ec      	bne.n	80035d0 <LPTIM_WaitForFlag+0x24>

  return result;
 80035f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3714      	adds	r7, #20
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr
 8003604:	20000004 	.word	0x20000004
 8003608:	d1b71759 	.word	0xd1b71759

0800360c <HAL_PWR_ConfigPVD>:
  * @param  pConfigPVD : Pointer to a PWR_PVDTypeDef structure that contains the
  *                      PVD configuration information (PVDLevel and EventMode).
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *pConfigPVD)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  /* Check the PVD parameter */
  if (pConfigPVD == NULL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_PWR_ConfigPVD+0x12>
  {
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e059      	b.n	80036d2 <HAL_PWR_ConfigPVD+0xc6>
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(pConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(pConfigPVD->Mode));

  /* Set PVDLS[2:0] bits according to PVDLevel value */
  MODIFY_REG(PWR->SVMCR, PWR_SVMCR_PVDLS, pConfigPVD->PVDLevel);
 800361e:	4b30      	ldr	r3, [pc, #192]	; (80036e0 <HAL_PWR_ConfigPVD+0xd4>)
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	492d      	ldr	r1, [pc, #180]	; (80036e0 <HAL_PWR_ConfigPVD+0xd4>)
 800362c:	4313      	orrs	r3, r2
 800362e:	610b      	str	r3, [r1, #16]

  /* Disable PVD Event/Interrupt */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8003630:	4b2c      	ldr	r3, [pc, #176]	; (80036e4 <HAL_PWR_ConfigPVD+0xd8>)
 8003632:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003636:	4a2b      	ldr	r2, [pc, #172]	; (80036e4 <HAL_PWR_ConfigPVD+0xd8>)
 8003638:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800363c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8003640:	4b28      	ldr	r3, [pc, #160]	; (80036e4 <HAL_PWR_ConfigPVD+0xd8>)
 8003642:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003646:	4a27      	ldr	r2, [pc, #156]	; (80036e4 <HAL_PWR_ConfigPVD+0xd8>)
 8003648:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800364c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8003650:	4b24      	ldr	r3, [pc, #144]	; (80036e4 <HAL_PWR_ConfigPVD+0xd8>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a23      	ldr	r2, [pc, #140]	; (80036e4 <HAL_PWR_ConfigPVD+0xd8>)
 8003656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800365a:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 800365c:	4b21      	ldr	r3, [pc, #132]	; (80036e4 <HAL_PWR_ConfigPVD+0xd8>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	4a20      	ldr	r2, [pc, #128]	; (80036e4 <HAL_PWR_ConfigPVD+0xd8>)
 8003662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003666:	6053      	str	r3, [r2, #4]

  /* Configure the PVD in interrupt mode */
  if ((pConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	2b00      	cmp	r3, #0
 8003672:	d007      	beq.n	8003684 <HAL_PWR_ConfigPVD+0x78>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8003674:	4b1b      	ldr	r3, [pc, #108]	; (80036e4 <HAL_PWR_ConfigPVD+0xd8>)
 8003676:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800367a:	4a1a      	ldr	r2, [pc, #104]	; (80036e4 <HAL_PWR_ConfigPVD+0xd8>)
 800367c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003680:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }

  /* Configure the PVD in event mode */
  if ((pConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f003 0308 	and.w	r3, r3, #8
 800368c:	2b00      	cmp	r3, #0
 800368e:	d007      	beq.n	80036a0 <HAL_PWR_ConfigPVD+0x94>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8003690:	4b14      	ldr	r3, [pc, #80]	; (80036e4 <HAL_PWR_ConfigPVD+0xd8>)
 8003692:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003696:	4a13      	ldr	r2, [pc, #76]	; (80036e4 <HAL_PWR_ConfigPVD+0xd8>)
 8003698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800369c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  }

  /* Configure the PVD in rising edge */
  if ((pConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d005      	beq.n	80036b8 <HAL_PWR_ConfigPVD+0xac>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 80036ac:	4b0d      	ldr	r3, [pc, #52]	; (80036e4 <HAL_PWR_ConfigPVD+0xd8>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a0c      	ldr	r2, [pc, #48]	; (80036e4 <HAL_PWR_ConfigPVD+0xd8>)
 80036b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b6:	6013      	str	r3, [r2, #0]
  }

  /* Configure the PVD in falling edge */
  if ((pConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d005      	beq.n	80036d0 <HAL_PWR_ConfigPVD+0xc4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 80036c4:	4b07      	ldr	r3, [pc, #28]	; (80036e4 <HAL_PWR_ConfigPVD+0xd8>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	4a06      	ldr	r2, [pc, #24]	; (80036e4 <HAL_PWR_ConfigPVD+0xd8>)
 80036ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ce:	6053      	str	r3, [r2, #4]
  }

  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	46020800 	.word	0x46020800
 80036e4:	46022000 	.word	0x46022000

080036e8 <HAL_PWR_EnablePVD>:
/**
  * @brief  Enable the programmable voltage detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_PVDE);
 80036ec:	4b05      	ldr	r3, [pc, #20]	; (8003704 <HAL_PWR_EnablePVD+0x1c>)
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	4a04      	ldr	r2, [pc, #16]	; (8003704 <HAL_PWR_EnablePVD+0x1c>)
 80036f2:	f043 0310 	orr.w	r3, r3, #16
 80036f6:	6113      	str	r3, [r2, #16]
}
 80036f8:	bf00      	nop
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	46020800 	.word	0x46020800

08003708 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003710:	4b39      	ldr	r3, [pc, #228]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003714:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003718:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800371a:	68ba      	ldr	r2, [r7, #8]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	429a      	cmp	r2, r3
 8003720:	d10b      	bne.n	800373a <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003728:	d905      	bls.n	8003736 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800372a:	4b33      	ldr	r3, [pc, #204]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	4a32      	ldr	r2, [pc, #200]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003730:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003734:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8003736:	2300      	movs	r3, #0
 8003738:	e057      	b.n	80037ea <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003740:	d90a      	bls.n	8003758 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003742:	4b2d      	ldr	r3, [pc, #180]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4313      	orrs	r3, r2
 800374e:	4a2a      	ldr	r2, [pc, #168]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003750:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003754:	60d3      	str	r3, [r2, #12]
 8003756:	e007      	b.n	8003768 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003758:	4b27      	ldr	r3, [pc, #156]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003760:	4925      	ldr	r1, [pc, #148]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4313      	orrs	r3, r2
 8003766:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003768:	4b24      	ldr	r3, [pc, #144]	; (80037fc <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a24      	ldr	r2, [pc, #144]	; (8003800 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800376e:	fba2 2303 	umull	r2, r3, r2, r3
 8003772:	099b      	lsrs	r3, r3, #6
 8003774:	2232      	movs	r2, #50	; 0x32
 8003776:	fb02 f303 	mul.w	r3, r2, r3
 800377a:	4a21      	ldr	r2, [pc, #132]	; (8003800 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800377c:	fba2 2303 	umull	r2, r3, r2, r3
 8003780:	099b      	lsrs	r3, r3, #6
 8003782:	3301      	adds	r3, #1
 8003784:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003786:	e002      	b.n	800378e <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	3b01      	subs	r3, #1
 800378c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800378e:	4b1a      	ldr	r3, [pc, #104]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d102      	bne.n	80037a0 <HAL_PWREx_ControlVoltageScaling+0x98>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1f3      	bne.n	8003788 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d01b      	beq.n	80037de <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80037a6:	4b15      	ldr	r3, [pc, #84]	; (80037fc <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a15      	ldr	r2, [pc, #84]	; (8003800 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80037ac:	fba2 2303 	umull	r2, r3, r2, r3
 80037b0:	099b      	lsrs	r3, r3, #6
 80037b2:	2232      	movs	r2, #50	; 0x32
 80037b4:	fb02 f303 	mul.w	r3, r2, r3
 80037b8:	4a11      	ldr	r2, [pc, #68]	; (8003800 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80037ba:	fba2 2303 	umull	r2, r3, r2, r3
 80037be:	099b      	lsrs	r3, r3, #6
 80037c0:	3301      	adds	r3, #1
 80037c2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80037c4:	e002      	b.n	80037cc <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	3b01      	subs	r3, #1
 80037ca:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80037cc:	4b0a      	ldr	r3, [pc, #40]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80037ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d102      	bne.n	80037de <HAL_PWREx_ControlVoltageScaling+0xd6>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1f3      	bne.n	80037c6 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e000      	b.n	80037ea <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3714      	adds	r7, #20
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	46020800 	.word	0x46020800
 80037fc:	20000004 	.word	0x20000004
 8003800:	10624dd3 	.word	0x10624dd3

08003804 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8003808:	4b04      	ldr	r3, [pc, #16]	; (800381c <HAL_PWREx_GetVoltageRange+0x18>)
 800380a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800380c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003810:	4618      	mov	r0, r3
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	46020800 	.word	0x46020800

08003820 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8003824:	4b05      	ldr	r3, [pc, #20]	; (800383c <HAL_PWREx_EnableVddIO2+0x1c>)
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	4a04      	ldr	r2, [pc, #16]	; (800383c <HAL_PWREx_EnableVddIO2+0x1c>)
 800382a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800382e:	6113      	str	r3, [r2, #16]
}
 8003830:	bf00      	nop
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	46020800 	.word	0x46020800

08003840 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8003844:	4b05      	ldr	r3, [pc, #20]	; (800385c <HAL_PWREx_EnableVddA+0x1c>)
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	4a04      	ldr	r2, [pc, #16]	; (800385c <HAL_PWREx_EnableVddA+0x1c>)
 800384a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800384e:	6113      	str	r3, [r2, #16]
}
 8003850:	bf00      	nop
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	46020800 	.word	0x46020800

08003860 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b08e      	sub	sp, #56	; 0x38
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8003868:	2300      	movs	r3, #0
 800386a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d102      	bne.n	800387a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	f000 bec8 	b.w	800460a <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800387a:	4b99      	ldr	r3, [pc, #612]	; (8003ae0 <HAL_RCC_OscConfig+0x280>)
 800387c:	69db      	ldr	r3, [r3, #28]
 800387e:	f003 030c 	and.w	r3, r3, #12
 8003882:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003884:	4b96      	ldr	r3, [pc, #600]	; (8003ae0 <HAL_RCC_OscConfig+0x280>)
 8003886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003888:	f003 0303 	and.w	r3, r3, #3
 800388c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0310 	and.w	r3, r3, #16
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 816c 	beq.w	8003b74 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800389c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d007      	beq.n	80038b2 <HAL_RCC_OscConfig+0x52>
 80038a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a4:	2b0c      	cmp	r3, #12
 80038a6:	f040 80de 	bne.w	8003a66 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80038aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	f040 80da 	bne.w	8003a66 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d102      	bne.n	80038c0 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	f000 bea5 	b.w	800460a <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038c4:	4b86      	ldr	r3, [pc, #536]	; (8003ae0 <HAL_RCC_OscConfig+0x280>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d004      	beq.n	80038da <HAL_RCC_OscConfig+0x7a>
 80038d0:	4b83      	ldr	r3, [pc, #524]	; (8003ae0 <HAL_RCC_OscConfig+0x280>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80038d8:	e005      	b.n	80038e6 <HAL_RCC_OscConfig+0x86>
 80038da:	4b81      	ldr	r3, [pc, #516]	; (8003ae0 <HAL_RCC_OscConfig+0x280>)
 80038dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80038e0:	041b      	lsls	r3, r3, #16
 80038e2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d255      	bcs.n	8003996 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80038ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10a      	bne.n	8003906 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	4618      	mov	r0, r3
 80038f6:	f001 f9d9 	bl	8004cac <RCC_SetFlashLatencyFromMSIRange>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d002      	beq.n	8003906 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	f000 be82 	b.w	800460a <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003906:	4b76      	ldr	r3, [pc, #472]	; (8003ae0 <HAL_RCC_OscConfig+0x280>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	4a75      	ldr	r2, [pc, #468]	; (8003ae0 <HAL_RCC_OscConfig+0x280>)
 800390c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003910:	6093      	str	r3, [r2, #8]
 8003912:	4b73      	ldr	r3, [pc, #460]	; (8003ae0 <HAL_RCC_OscConfig+0x280>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391e:	4970      	ldr	r1, [pc, #448]	; (8003ae0 <HAL_RCC_OscConfig+0x280>)
 8003920:	4313      	orrs	r3, r2
 8003922:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800392c:	d309      	bcc.n	8003942 <HAL_RCC_OscConfig+0xe2>
 800392e:	4b6c      	ldr	r3, [pc, #432]	; (8003ae0 <HAL_RCC_OscConfig+0x280>)
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	f023 021f 	bic.w	r2, r3, #31
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	4969      	ldr	r1, [pc, #420]	; (8003ae0 <HAL_RCC_OscConfig+0x280>)
 800393c:	4313      	orrs	r3, r2
 800393e:	60cb      	str	r3, [r1, #12]
 8003940:	e07e      	b.n	8003a40 <HAL_RCC_OscConfig+0x1e0>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003946:	2b00      	cmp	r3, #0
 8003948:	da0a      	bge.n	8003960 <HAL_RCC_OscConfig+0x100>
 800394a:	4b65      	ldr	r3, [pc, #404]	; (8003ae0 <HAL_RCC_OscConfig+0x280>)
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	015b      	lsls	r3, r3, #5
 8003958:	4961      	ldr	r1, [pc, #388]	; (8003ae0 <HAL_RCC_OscConfig+0x280>)
 800395a:	4313      	orrs	r3, r2
 800395c:	60cb      	str	r3, [r1, #12]
 800395e:	e06f      	b.n	8003a40 <HAL_RCC_OscConfig+0x1e0>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003968:	d30a      	bcc.n	8003980 <HAL_RCC_OscConfig+0x120>
 800396a:	4b5d      	ldr	r3, [pc, #372]	; (8003ae0 <HAL_RCC_OscConfig+0x280>)
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	029b      	lsls	r3, r3, #10
 8003978:	4959      	ldr	r1, [pc, #356]	; (8003ae0 <HAL_RCC_OscConfig+0x280>)
 800397a:	4313      	orrs	r3, r2
 800397c:	60cb      	str	r3, [r1, #12]
 800397e:	e05f      	b.n	8003a40 <HAL_RCC_OscConfig+0x1e0>
 8003980:	4b57      	ldr	r3, [pc, #348]	; (8003ae0 <HAL_RCC_OscConfig+0x280>)
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	03db      	lsls	r3, r3, #15
 800398e:	4954      	ldr	r1, [pc, #336]	; (8003ae0 <HAL_RCC_OscConfig+0x280>)
 8003990:	4313      	orrs	r3, r2
 8003992:	60cb      	str	r3, [r1, #12]
 8003994:	e054      	b.n	8003a40 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003996:	4b52      	ldr	r3, [pc, #328]	; (8003ae0 <HAL_RCC_OscConfig+0x280>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	4a51      	ldr	r2, [pc, #324]	; (8003ae0 <HAL_RCC_OscConfig+0x280>)
 800399c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039a0:	6093      	str	r3, [r2, #8]
 80039a2:	4b4f      	ldr	r3, [pc, #316]	; (8003ae0 <HAL_RCC_OscConfig+0x280>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ae:	494c      	ldr	r1, [pc, #304]	; (8003ae0 <HAL_RCC_OscConfig+0x280>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80039bc:	d309      	bcc.n	80039d2 <HAL_RCC_OscConfig+0x172>
 80039be:	4b48      	ldr	r3, [pc, #288]	; (8003ae0 <HAL_RCC_OscConfig+0x280>)
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	f023 021f 	bic.w	r2, r3, #31
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	4945      	ldr	r1, [pc, #276]	; (8003ae0 <HAL_RCC_OscConfig+0x280>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	60cb      	str	r3, [r1, #12]
 80039d0:	e028      	b.n	8003a24 <HAL_RCC_OscConfig+0x1c4>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	da0a      	bge.n	80039f0 <HAL_RCC_OscConfig+0x190>
 80039da:	4b41      	ldr	r3, [pc, #260]	; (8003ae0 <HAL_RCC_OscConfig+0x280>)
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	015b      	lsls	r3, r3, #5
 80039e8:	493d      	ldr	r1, [pc, #244]	; (8003ae0 <HAL_RCC_OscConfig+0x280>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	60cb      	str	r3, [r1, #12]
 80039ee:	e019      	b.n	8003a24 <HAL_RCC_OscConfig+0x1c4>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039f8:	d30a      	bcc.n	8003a10 <HAL_RCC_OscConfig+0x1b0>
 80039fa:	4b39      	ldr	r3, [pc, #228]	; (8003ae0 <HAL_RCC_OscConfig+0x280>)
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	029b      	lsls	r3, r3, #10
 8003a08:	4935      	ldr	r1, [pc, #212]	; (8003ae0 <HAL_RCC_OscConfig+0x280>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	60cb      	str	r3, [r1, #12]
 8003a0e:	e009      	b.n	8003a24 <HAL_RCC_OscConfig+0x1c4>
 8003a10:	4b33      	ldr	r3, [pc, #204]	; (8003ae0 <HAL_RCC_OscConfig+0x280>)
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	03db      	lsls	r3, r3, #15
 8003a1e:	4930      	ldr	r1, [pc, #192]	; (8003ae0 <HAL_RCC_OscConfig+0x280>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10a      	bne.n	8003a40 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f001 f93c 	bl	8004cac <RCC_SetFlashLatencyFromMSIRange>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d002      	beq.n	8003a40 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	f000 bde5 	b.w	800460a <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003a40:	f001 f8de 	bl	8004c00 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a44:	4b27      	ldr	r3, [pc, #156]	; (8003ae4 <HAL_RCC_OscConfig+0x284>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7fd ff07 	bl	800185c <HAL_InitTick>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8003a54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 808a 	beq.w	8003b72 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8003a5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a62:	f000 bdd2 	b.w	800460a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d066      	beq.n	8003b3c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8003a6e:	4b1c      	ldr	r3, [pc, #112]	; (8003ae0 <HAL_RCC_OscConfig+0x280>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a1b      	ldr	r2, [pc, #108]	; (8003ae0 <HAL_RCC_OscConfig+0x280>)
 8003a74:	f043 0301 	orr.w	r3, r3, #1
 8003a78:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003a7a:	f7fd ff39 	bl	80018f0 <HAL_GetTick>
 8003a7e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003a80:	e009      	b.n	8003a96 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a82:	f7fd ff35 	bl	80018f0 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d902      	bls.n	8003a96 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	f000 bdba 	b.w	800460a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003a96:	4b12      	ldr	r3, [pc, #72]	; (8003ae0 <HAL_RCC_OscConfig+0x280>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0304 	and.w	r3, r3, #4
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d0ef      	beq.n	8003a82 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003aa2:	4b0f      	ldr	r3, [pc, #60]	; (8003ae0 <HAL_RCC_OscConfig+0x280>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	4a0e      	ldr	r2, [pc, #56]	; (8003ae0 <HAL_RCC_OscConfig+0x280>)
 8003aa8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003aac:	6093      	str	r3, [r2, #8]
 8003aae:	4b0c      	ldr	r3, [pc, #48]	; (8003ae0 <HAL_RCC_OscConfig+0x280>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aba:	4909      	ldr	r1, [pc, #36]	; (8003ae0 <HAL_RCC_OscConfig+0x280>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003ac8:	d30e      	bcc.n	8003ae8 <HAL_RCC_OscConfig+0x288>
 8003aca:	4b05      	ldr	r3, [pc, #20]	; (8003ae0 <HAL_RCC_OscConfig+0x280>)
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	f023 021f 	bic.w	r2, r3, #31
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	4902      	ldr	r1, [pc, #8]	; (8003ae0 <HAL_RCC_OscConfig+0x280>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	60cb      	str	r3, [r1, #12]
 8003adc:	e04a      	b.n	8003b74 <HAL_RCC_OscConfig+0x314>
 8003ade:	bf00      	nop
 8003ae0:	46020c00 	.word	0x46020c00
 8003ae4:	20000008 	.word	0x20000008
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	da0a      	bge.n	8003b06 <HAL_RCC_OscConfig+0x2a6>
 8003af0:	4b98      	ldr	r3, [pc, #608]	; (8003d54 <HAL_RCC_OscConfig+0x4f4>)
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	015b      	lsls	r3, r3, #5
 8003afe:	4995      	ldr	r1, [pc, #596]	; (8003d54 <HAL_RCC_OscConfig+0x4f4>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	60cb      	str	r3, [r1, #12]
 8003b04:	e036      	b.n	8003b74 <HAL_RCC_OscConfig+0x314>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b0e:	d30a      	bcc.n	8003b26 <HAL_RCC_OscConfig+0x2c6>
 8003b10:	4b90      	ldr	r3, [pc, #576]	; (8003d54 <HAL_RCC_OscConfig+0x4f4>)
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	029b      	lsls	r3, r3, #10
 8003b1e:	498d      	ldr	r1, [pc, #564]	; (8003d54 <HAL_RCC_OscConfig+0x4f4>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	60cb      	str	r3, [r1, #12]
 8003b24:	e026      	b.n	8003b74 <HAL_RCC_OscConfig+0x314>
 8003b26:	4b8b      	ldr	r3, [pc, #556]	; (8003d54 <HAL_RCC_OscConfig+0x4f4>)
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	03db      	lsls	r3, r3, #15
 8003b34:	4987      	ldr	r1, [pc, #540]	; (8003d54 <HAL_RCC_OscConfig+0x4f4>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	60cb      	str	r3, [r1, #12]
 8003b3a:	e01b      	b.n	8003b74 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003b3c:	4b85      	ldr	r3, [pc, #532]	; (8003d54 <HAL_RCC_OscConfig+0x4f4>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a84      	ldr	r2, [pc, #528]	; (8003d54 <HAL_RCC_OscConfig+0x4f4>)
 8003b42:	f023 0301 	bic.w	r3, r3, #1
 8003b46:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003b48:	f7fd fed2 	bl	80018f0 <HAL_GetTick>
 8003b4c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003b4e:	e009      	b.n	8003b64 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b50:	f7fd fece 	bl	80018f0 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d902      	bls.n	8003b64 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	f000 bd53 	b.w	800460a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003b64:	4b7b      	ldr	r3, [pc, #492]	; (8003d54 <HAL_RCC_OscConfig+0x4f4>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1ef      	bne.n	8003b50 <HAL_RCC_OscConfig+0x2f0>
 8003b70:	e000      	b.n	8003b74 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003b72:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f000 808b 	beq.w	8003c98 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b84:	2b08      	cmp	r3, #8
 8003b86:	d005      	beq.n	8003b94 <HAL_RCC_OscConfig+0x334>
 8003b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8a:	2b0c      	cmp	r3, #12
 8003b8c:	d109      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b90:	2b03      	cmp	r3, #3
 8003b92:	d106      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d17d      	bne.n	8003c98 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	f000 bd34 	b.w	800460a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003baa:	d106      	bne.n	8003bba <HAL_RCC_OscConfig+0x35a>
 8003bac:	4b69      	ldr	r3, [pc, #420]	; (8003d54 <HAL_RCC_OscConfig+0x4f4>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a68      	ldr	r2, [pc, #416]	; (8003d54 <HAL_RCC_OscConfig+0x4f4>)
 8003bb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bb6:	6013      	str	r3, [r2, #0]
 8003bb8:	e041      	b.n	8003c3e <HAL_RCC_OscConfig+0x3de>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bc2:	d112      	bne.n	8003bea <HAL_RCC_OscConfig+0x38a>
 8003bc4:	4b63      	ldr	r3, [pc, #396]	; (8003d54 <HAL_RCC_OscConfig+0x4f4>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a62      	ldr	r2, [pc, #392]	; (8003d54 <HAL_RCC_OscConfig+0x4f4>)
 8003bca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bce:	6013      	str	r3, [r2, #0]
 8003bd0:	4b60      	ldr	r3, [pc, #384]	; (8003d54 <HAL_RCC_OscConfig+0x4f4>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a5f      	ldr	r2, [pc, #380]	; (8003d54 <HAL_RCC_OscConfig+0x4f4>)
 8003bd6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003bda:	6013      	str	r3, [r2, #0]
 8003bdc:	4b5d      	ldr	r3, [pc, #372]	; (8003d54 <HAL_RCC_OscConfig+0x4f4>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a5c      	ldr	r2, [pc, #368]	; (8003d54 <HAL_RCC_OscConfig+0x4f4>)
 8003be2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003be6:	6013      	str	r3, [r2, #0]
 8003be8:	e029      	b.n	8003c3e <HAL_RCC_OscConfig+0x3de>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003bf2:	d112      	bne.n	8003c1a <HAL_RCC_OscConfig+0x3ba>
 8003bf4:	4b57      	ldr	r3, [pc, #348]	; (8003d54 <HAL_RCC_OscConfig+0x4f4>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a56      	ldr	r2, [pc, #344]	; (8003d54 <HAL_RCC_OscConfig+0x4f4>)
 8003bfa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bfe:	6013      	str	r3, [r2, #0]
 8003c00:	4b54      	ldr	r3, [pc, #336]	; (8003d54 <HAL_RCC_OscConfig+0x4f4>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a53      	ldr	r2, [pc, #332]	; (8003d54 <HAL_RCC_OscConfig+0x4f4>)
 8003c06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c0a:	6013      	str	r3, [r2, #0]
 8003c0c:	4b51      	ldr	r3, [pc, #324]	; (8003d54 <HAL_RCC_OscConfig+0x4f4>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a50      	ldr	r2, [pc, #320]	; (8003d54 <HAL_RCC_OscConfig+0x4f4>)
 8003c12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c16:	6013      	str	r3, [r2, #0]
 8003c18:	e011      	b.n	8003c3e <HAL_RCC_OscConfig+0x3de>
 8003c1a:	4b4e      	ldr	r3, [pc, #312]	; (8003d54 <HAL_RCC_OscConfig+0x4f4>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a4d      	ldr	r2, [pc, #308]	; (8003d54 <HAL_RCC_OscConfig+0x4f4>)
 8003c20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c24:	6013      	str	r3, [r2, #0]
 8003c26:	4b4b      	ldr	r3, [pc, #300]	; (8003d54 <HAL_RCC_OscConfig+0x4f4>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a4a      	ldr	r2, [pc, #296]	; (8003d54 <HAL_RCC_OscConfig+0x4f4>)
 8003c2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c30:	6013      	str	r3, [r2, #0]
 8003c32:	4b48      	ldr	r3, [pc, #288]	; (8003d54 <HAL_RCC_OscConfig+0x4f4>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a47      	ldr	r2, [pc, #284]	; (8003d54 <HAL_RCC_OscConfig+0x4f4>)
 8003c38:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003c3c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d014      	beq.n	8003c70 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8003c46:	f7fd fe53 	bl	80018f0 <HAL_GetTick>
 8003c4a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c4c:	e009      	b.n	8003c62 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c4e:	f7fd fe4f 	bl	80018f0 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b64      	cmp	r3, #100	; 0x64
 8003c5a:	d902      	bls.n	8003c62 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	f000 bcd4 	b.w	800460a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c62:	4b3c      	ldr	r3, [pc, #240]	; (8003d54 <HAL_RCC_OscConfig+0x4f4>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0ef      	beq.n	8003c4e <HAL_RCC_OscConfig+0x3ee>
 8003c6e:	e013      	b.n	8003c98 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8003c70:	f7fd fe3e 	bl	80018f0 <HAL_GetTick>
 8003c74:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c76:	e009      	b.n	8003c8c <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c78:	f7fd fe3a 	bl	80018f0 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b64      	cmp	r3, #100	; 0x64
 8003c84:	d902      	bls.n	8003c8c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	f000 bcbf 	b.w	800460a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c8c:	4b31      	ldr	r3, [pc, #196]	; (8003d54 <HAL_RCC_OscConfig+0x4f4>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1ef      	bne.n	8003c78 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d05f      	beq.n	8003d64 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	d005      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x456>
 8003caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cac:	2b0c      	cmp	r3, #12
 8003cae:	d114      	bne.n	8003cda <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d111      	bne.n	8003cda <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d102      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	f000 bca3 	b.w	800460a <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003cc4:	4b23      	ldr	r3, [pc, #140]	; (8003d54 <HAL_RCC_OscConfig+0x4f4>)
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	041b      	lsls	r3, r3, #16
 8003cd2:	4920      	ldr	r1, [pc, #128]	; (8003d54 <HAL_RCC_OscConfig+0x4f4>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003cd8:	e044      	b.n	8003d64 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d024      	beq.n	8003d2c <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8003ce2:	4b1c      	ldr	r3, [pc, #112]	; (8003d54 <HAL_RCC_OscConfig+0x4f4>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a1b      	ldr	r2, [pc, #108]	; (8003d54 <HAL_RCC_OscConfig+0x4f4>)
 8003ce8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cec:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003cee:	f7fd fdff 	bl	80018f0 <HAL_GetTick>
 8003cf2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cf4:	e009      	b.n	8003d0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cf6:	f7fd fdfb 	bl	80018f0 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d902      	bls.n	8003d0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	f000 bc80 	b.w	800460a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d0a:	4b12      	ldr	r3, [pc, #72]	; (8003d54 <HAL_RCC_OscConfig+0x4f4>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d0ef      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003d16:	4b0f      	ldr	r3, [pc, #60]	; (8003d54 <HAL_RCC_OscConfig+0x4f4>)
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	041b      	lsls	r3, r3, #16
 8003d24:	490b      	ldr	r1, [pc, #44]	; (8003d54 <HAL_RCC_OscConfig+0x4f4>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	610b      	str	r3, [r1, #16]
 8003d2a:	e01b      	b.n	8003d64 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003d2c:	4b09      	ldr	r3, [pc, #36]	; (8003d54 <HAL_RCC_OscConfig+0x4f4>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a08      	ldr	r2, [pc, #32]	; (8003d54 <HAL_RCC_OscConfig+0x4f4>)
 8003d32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d36:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003d38:	f7fd fdda 	bl	80018f0 <HAL_GetTick>
 8003d3c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d3e:	e00b      	b.n	8003d58 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d40:	f7fd fdd6 	bl	80018f0 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d904      	bls.n	8003d58 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	f000 bc5b 	b.w	800460a <HAL_RCC_OscConfig+0xdaa>
 8003d54:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d58:	4baf      	ldr	r3, [pc, #700]	; (8004018 <HAL_RCC_OscConfig+0x7b8>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1ed      	bne.n	8003d40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0308 	and.w	r3, r3, #8
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 80c8 	beq.w	8003f02 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8003d72:	2300      	movs	r3, #0
 8003d74:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d78:	4ba7      	ldr	r3, [pc, #668]	; (8004018 <HAL_RCC_OscConfig+0x7b8>)
 8003d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d7e:	f003 0304 	and.w	r3, r3, #4
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d111      	bne.n	8003daa <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d86:	4ba4      	ldr	r3, [pc, #656]	; (8004018 <HAL_RCC_OscConfig+0x7b8>)
 8003d88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d8c:	4aa2      	ldr	r2, [pc, #648]	; (8004018 <HAL_RCC_OscConfig+0x7b8>)
 8003d8e:	f043 0304 	orr.w	r3, r3, #4
 8003d92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003d96:	4ba0      	ldr	r3, [pc, #640]	; (8004018 <HAL_RCC_OscConfig+0x7b8>)
 8003d98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d9c:	f003 0304 	and.w	r3, r3, #4
 8003da0:	617b      	str	r3, [r7, #20]
 8003da2:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8003da4:	2301      	movs	r3, #1
 8003da6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003daa:	4b9c      	ldr	r3, [pc, #624]	; (800401c <HAL_RCC_OscConfig+0x7bc>)
 8003dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d119      	bne.n	8003dea <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003db6:	4b99      	ldr	r3, [pc, #612]	; (800401c <HAL_RCC_OscConfig+0x7bc>)
 8003db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dba:	4a98      	ldr	r2, [pc, #608]	; (800401c <HAL_RCC_OscConfig+0x7bc>)
 8003dbc:	f043 0301 	orr.w	r3, r3, #1
 8003dc0:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dc2:	f7fd fd95 	bl	80018f0 <HAL_GetTick>
 8003dc6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003dc8:	e009      	b.n	8003dde <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dca:	f7fd fd91 	bl	80018f0 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d902      	bls.n	8003dde <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	f000 bc16 	b.w	800460a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003dde:	4b8f      	ldr	r3, [pc, #572]	; (800401c <HAL_RCC_OscConfig+0x7bc>)
 8003de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0ef      	beq.n	8003dca <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d05f      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8003df2:	4b89      	ldr	r3, [pc, #548]	; (8004018 <HAL_RCC_OscConfig+0x7b8>)
 8003df4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003df8:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	699a      	ldr	r2, [r3, #24]
 8003dfe:	6a3b      	ldr	r3, [r7, #32]
 8003e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d037      	beq.n	8003e78 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003e08:	6a3b      	ldr	r3, [r7, #32]
 8003e0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d006      	beq.n	8003e20 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8003e12:	6a3b      	ldr	r3, [r7, #32]
 8003e14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d101      	bne.n	8003e20 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e3f4      	b.n	800460a <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8003e20:	6a3b      	ldr	r3, [r7, #32]
 8003e22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d01b      	beq.n	8003e62 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8003e2a:	4b7b      	ldr	r3, [pc, #492]	; (8004018 <HAL_RCC_OscConfig+0x7b8>)
 8003e2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e30:	4a79      	ldr	r2, [pc, #484]	; (8004018 <HAL_RCC_OscConfig+0x7b8>)
 8003e32:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8003e36:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8003e3a:	f7fd fd59 	bl	80018f0 <HAL_GetTick>
 8003e3e:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003e40:	e008      	b.n	8003e54 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e42:	f7fd fd55 	bl	80018f0 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b05      	cmp	r3, #5
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e3da      	b.n	800460a <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003e54:	4b70      	ldr	r3, [pc, #448]	; (8004018 <HAL_RCC_OscConfig+0x7b8>)
 8003e56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1ef      	bne.n	8003e42 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8003e62:	4b6d      	ldr	r3, [pc, #436]	; (8004018 <HAL_RCC_OscConfig+0x7b8>)
 8003e64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e68:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	4969      	ldr	r1, [pc, #420]	; (8004018 <HAL_RCC_OscConfig+0x7b8>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8003e78:	4b67      	ldr	r3, [pc, #412]	; (8004018 <HAL_RCC_OscConfig+0x7b8>)
 8003e7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e7e:	4a66      	ldr	r2, [pc, #408]	; (8004018 <HAL_RCC_OscConfig+0x7b8>)
 8003e80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e84:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8003e88:	f7fd fd32 	bl	80018f0 <HAL_GetTick>
 8003e8c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e90:	f7fd fd2e 	bl	80018f0 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b05      	cmp	r3, #5
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e3b3      	b.n	800460a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003ea2:	4b5d      	ldr	r3, [pc, #372]	; (8004018 <HAL_RCC_OscConfig+0x7b8>)
 8003ea4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ea8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0ef      	beq.n	8003e90 <HAL_RCC_OscConfig+0x630>
 8003eb0:	e01b      	b.n	8003eea <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8003eb2:	4b59      	ldr	r3, [pc, #356]	; (8004018 <HAL_RCC_OscConfig+0x7b8>)
 8003eb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003eb8:	4a57      	ldr	r2, [pc, #348]	; (8004018 <HAL_RCC_OscConfig+0x7b8>)
 8003eba:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8003ebe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8003ec2:	f7fd fd15 	bl	80018f0 <HAL_GetTick>
 8003ec6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003ec8:	e008      	b.n	8003edc <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eca:	f7fd fd11 	bl	80018f0 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b05      	cmp	r3, #5
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e396      	b.n	800460a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003edc:	4b4e      	ldr	r3, [pc, #312]	; (8004018 <HAL_RCC_OscConfig+0x7b8>)
 8003ede:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ee2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1ef      	bne.n	8003eca <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003eea:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d107      	bne.n	8003f02 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ef2:	4b49      	ldr	r3, [pc, #292]	; (8004018 <HAL_RCC_OscConfig+0x7b8>)
 8003ef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ef8:	4a47      	ldr	r2, [pc, #284]	; (8004018 <HAL_RCC_OscConfig+0x7b8>)
 8003efa:	f023 0304 	bic.w	r3, r3, #4
 8003efe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0304 	and.w	r3, r3, #4
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f000 8111 	beq.w	8004132 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8003f10:	2300      	movs	r3, #0
 8003f12:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f16:	4b40      	ldr	r3, [pc, #256]	; (8004018 <HAL_RCC_OscConfig+0x7b8>)
 8003f18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f1c:	f003 0304 	and.w	r3, r3, #4
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d111      	bne.n	8003f48 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f24:	4b3c      	ldr	r3, [pc, #240]	; (8004018 <HAL_RCC_OscConfig+0x7b8>)
 8003f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f2a:	4a3b      	ldr	r2, [pc, #236]	; (8004018 <HAL_RCC_OscConfig+0x7b8>)
 8003f2c:	f043 0304 	orr.w	r3, r3, #4
 8003f30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003f34:	4b38      	ldr	r3, [pc, #224]	; (8004018 <HAL_RCC_OscConfig+0x7b8>)
 8003f36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f3a:	f003 0304 	and.w	r3, r3, #4
 8003f3e:	613b      	str	r3, [r7, #16]
 8003f40:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8003f42:	2301      	movs	r3, #1
 8003f44:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003f48:	4b34      	ldr	r3, [pc, #208]	; (800401c <HAL_RCC_OscConfig+0x7bc>)
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d118      	bne.n	8003f86 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003f54:	4b31      	ldr	r3, [pc, #196]	; (800401c <HAL_RCC_OscConfig+0x7bc>)
 8003f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f58:	4a30      	ldr	r2, [pc, #192]	; (800401c <HAL_RCC_OscConfig+0x7bc>)
 8003f5a:	f043 0301 	orr.w	r3, r3, #1
 8003f5e:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f60:	f7fd fcc6 	bl	80018f0 <HAL_GetTick>
 8003f64:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f68:	f7fd fcc2 	bl	80018f0 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e347      	b.n	800460a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003f7a:	4b28      	ldr	r3, [pc, #160]	; (800401c <HAL_RCC_OscConfig+0x7bc>)
 8003f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0f0      	beq.n	8003f68 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d01f      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 0304 	and.w	r3, r3, #4
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d010      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003f9e:	4b1e      	ldr	r3, [pc, #120]	; (8004018 <HAL_RCC_OscConfig+0x7b8>)
 8003fa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003fa4:	4a1c      	ldr	r2, [pc, #112]	; (8004018 <HAL_RCC_OscConfig+0x7b8>)
 8003fa6:	f043 0304 	orr.w	r3, r3, #4
 8003faa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003fae:	4b1a      	ldr	r3, [pc, #104]	; (8004018 <HAL_RCC_OscConfig+0x7b8>)
 8003fb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003fb4:	4a18      	ldr	r2, [pc, #96]	; (8004018 <HAL_RCC_OscConfig+0x7b8>)
 8003fb6:	f043 0301 	orr.w	r3, r3, #1
 8003fba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003fbe:	e018      	b.n	8003ff2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003fc0:	4b15      	ldr	r3, [pc, #84]	; (8004018 <HAL_RCC_OscConfig+0x7b8>)
 8003fc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003fc6:	4a14      	ldr	r2, [pc, #80]	; (8004018 <HAL_RCC_OscConfig+0x7b8>)
 8003fc8:	f043 0301 	orr.w	r3, r3, #1
 8003fcc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003fd0:	e00f      	b.n	8003ff2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003fd2:	4b11      	ldr	r3, [pc, #68]	; (8004018 <HAL_RCC_OscConfig+0x7b8>)
 8003fd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003fd8:	4a0f      	ldr	r2, [pc, #60]	; (8004018 <HAL_RCC_OscConfig+0x7b8>)
 8003fda:	f023 0301 	bic.w	r3, r3, #1
 8003fde:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003fe2:	4b0d      	ldr	r3, [pc, #52]	; (8004018 <HAL_RCC_OscConfig+0x7b8>)
 8003fe4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003fe8:	4a0b      	ldr	r2, [pc, #44]	; (8004018 <HAL_RCC_OscConfig+0x7b8>)
 8003fea:	f023 0304 	bic.w	r3, r3, #4
 8003fee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d057      	beq.n	80040aa <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8003ffa:	f7fd fc79 	bl	80018f0 <HAL_GetTick>
 8003ffe:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004000:	e00e      	b.n	8004020 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004002:	f7fd fc75 	bl	80018f0 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004010:	4293      	cmp	r3, r2
 8004012:	d905      	bls.n	8004020 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e2f8      	b.n	800460a <HAL_RCC_OscConfig+0xdaa>
 8004018:	46020c00 	.word	0x46020c00
 800401c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004020:	4b9c      	ldr	r3, [pc, #624]	; (8004294 <HAL_RCC_OscConfig+0xa34>)
 8004022:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d0e9      	beq.n	8004002 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004036:	2b00      	cmp	r3, #0
 8004038:	d01b      	beq.n	8004072 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800403a:	4b96      	ldr	r3, [pc, #600]	; (8004294 <HAL_RCC_OscConfig+0xa34>)
 800403c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004040:	4a94      	ldr	r2, [pc, #592]	; (8004294 <HAL_RCC_OscConfig+0xa34>)
 8004042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004046:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800404a:	e00a      	b.n	8004062 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800404c:	f7fd fc50 	bl	80018f0 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	f241 3288 	movw	r2, #5000	; 0x1388
 800405a:	4293      	cmp	r3, r2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e2d3      	b.n	800460a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004062:	4b8c      	ldr	r3, [pc, #560]	; (8004294 <HAL_RCC_OscConfig+0xa34>)
 8004064:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004068:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800406c:	2b00      	cmp	r3, #0
 800406e:	d0ed      	beq.n	800404c <HAL_RCC_OscConfig+0x7ec>
 8004070:	e053      	b.n	800411a <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004072:	4b88      	ldr	r3, [pc, #544]	; (8004294 <HAL_RCC_OscConfig+0xa34>)
 8004074:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004078:	4a86      	ldr	r2, [pc, #536]	; (8004294 <HAL_RCC_OscConfig+0xa34>)
 800407a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800407e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004082:	e00a      	b.n	800409a <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004084:	f7fd fc34 	bl	80018f0 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004092:	4293      	cmp	r3, r2
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e2b7      	b.n	800460a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800409a:	4b7e      	ldr	r3, [pc, #504]	; (8004294 <HAL_RCC_OscConfig+0xa34>)
 800409c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1ed      	bne.n	8004084 <HAL_RCC_OscConfig+0x824>
 80040a8:	e037      	b.n	800411a <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80040aa:	f7fd fc21 	bl	80018f0 <HAL_GetTick>
 80040ae:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040b0:	e00a      	b.n	80040c8 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040b2:	f7fd fc1d 	bl	80018f0 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d901      	bls.n	80040c8 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e2a0      	b.n	800460a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040c8:	4b72      	ldr	r3, [pc, #456]	; (8004294 <HAL_RCC_OscConfig+0xa34>)
 80040ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1ed      	bne.n	80040b2 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80040d6:	4b6f      	ldr	r3, [pc, #444]	; (8004294 <HAL_RCC_OscConfig+0xa34>)
 80040d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d01a      	beq.n	800411a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80040e4:	4b6b      	ldr	r3, [pc, #428]	; (8004294 <HAL_RCC_OscConfig+0xa34>)
 80040e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040ea:	4a6a      	ldr	r2, [pc, #424]	; (8004294 <HAL_RCC_OscConfig+0xa34>)
 80040ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040f0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80040f4:	e00a      	b.n	800410c <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040f6:	f7fd fbfb 	bl	80018f0 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	f241 3288 	movw	r2, #5000	; 0x1388
 8004104:	4293      	cmp	r3, r2
 8004106:	d901      	bls.n	800410c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e27e      	b.n	800460a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800410c:	4b61      	ldr	r3, [pc, #388]	; (8004294 <HAL_RCC_OscConfig+0xa34>)
 800410e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004112:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1ed      	bne.n	80040f6 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800411a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800411e:	2b01      	cmp	r3, #1
 8004120:	d107      	bne.n	8004132 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004122:	4b5c      	ldr	r3, [pc, #368]	; (8004294 <HAL_RCC_OscConfig+0xa34>)
 8004124:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004128:	4a5a      	ldr	r2, [pc, #360]	; (8004294 <HAL_RCC_OscConfig+0xa34>)
 800412a:	f023 0304 	bic.w	r3, r3, #4
 800412e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0320 	and.w	r3, r3, #32
 800413a:	2b00      	cmp	r3, #0
 800413c:	d036      	beq.n	80041ac <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004142:	2b00      	cmp	r3, #0
 8004144:	d019      	beq.n	800417a <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8004146:	4b53      	ldr	r3, [pc, #332]	; (8004294 <HAL_RCC_OscConfig+0xa34>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a52      	ldr	r2, [pc, #328]	; (8004294 <HAL_RCC_OscConfig+0xa34>)
 800414c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004150:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004152:	f7fd fbcd 	bl	80018f0 <HAL_GetTick>
 8004156:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004158:	e008      	b.n	800416c <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800415a:	f7fd fbc9 	bl	80018f0 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d901      	bls.n	800416c <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e24e      	b.n	800460a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800416c:	4b49      	ldr	r3, [pc, #292]	; (8004294 <HAL_RCC_OscConfig+0xa34>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d0f0      	beq.n	800415a <HAL_RCC_OscConfig+0x8fa>
 8004178:	e018      	b.n	80041ac <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800417a:	4b46      	ldr	r3, [pc, #280]	; (8004294 <HAL_RCC_OscConfig+0xa34>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a45      	ldr	r2, [pc, #276]	; (8004294 <HAL_RCC_OscConfig+0xa34>)
 8004180:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004184:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004186:	f7fd fbb3 	bl	80018f0 <HAL_GetTick>
 800418a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800418c:	e008      	b.n	80041a0 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800418e:	f7fd fbaf 	bl	80018f0 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e234      	b.n	800460a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80041a0:	4b3c      	ldr	r3, [pc, #240]	; (8004294 <HAL_RCC_OscConfig+0xa34>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1f0      	bne.n	800418e <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d036      	beq.n	8004226 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d019      	beq.n	80041f4 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80041c0:	4b34      	ldr	r3, [pc, #208]	; (8004294 <HAL_RCC_OscConfig+0xa34>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a33      	ldr	r2, [pc, #204]	; (8004294 <HAL_RCC_OscConfig+0xa34>)
 80041c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041ca:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80041cc:	f7fd fb90 	bl	80018f0 <HAL_GetTick>
 80041d0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80041d4:	f7fd fb8c 	bl	80018f0 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e211      	b.n	800460a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80041e6:	4b2b      	ldr	r3, [pc, #172]	; (8004294 <HAL_RCC_OscConfig+0xa34>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0f0      	beq.n	80041d4 <HAL_RCC_OscConfig+0x974>
 80041f2:	e018      	b.n	8004226 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80041f4:	4b27      	ldr	r3, [pc, #156]	; (8004294 <HAL_RCC_OscConfig+0xa34>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a26      	ldr	r2, [pc, #152]	; (8004294 <HAL_RCC_OscConfig+0xa34>)
 80041fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041fe:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004200:	f7fd fb76 	bl	80018f0 <HAL_GetTick>
 8004204:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004206:	e008      	b.n	800421a <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004208:	f7fd fb72 	bl	80018f0 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b02      	cmp	r3, #2
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e1f7      	b.n	800460a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800421a:	4b1e      	ldr	r3, [pc, #120]	; (8004294 <HAL_RCC_OscConfig+0xa34>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1f0      	bne.n	8004208 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422e:	2b00      	cmp	r3, #0
 8004230:	d07f      	beq.n	8004332 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004236:	2b00      	cmp	r3, #0
 8004238:	d062      	beq.n	8004300 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800423a:	4b16      	ldr	r3, [pc, #88]	; (8004294 <HAL_RCC_OscConfig+0xa34>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	4a15      	ldr	r2, [pc, #84]	; (8004294 <HAL_RCC_OscConfig+0xa34>)
 8004240:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004244:	6093      	str	r3, [r2, #8]
 8004246:	4b13      	ldr	r3, [pc, #76]	; (8004294 <HAL_RCC_OscConfig+0xa34>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004252:	4910      	ldr	r1, [pc, #64]	; (8004294 <HAL_RCC_OscConfig+0xa34>)
 8004254:	4313      	orrs	r3, r2
 8004256:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004260:	d309      	bcc.n	8004276 <HAL_RCC_OscConfig+0xa16>
 8004262:	4b0c      	ldr	r3, [pc, #48]	; (8004294 <HAL_RCC_OscConfig+0xa34>)
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	f023 021f 	bic.w	r2, r3, #31
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	4909      	ldr	r1, [pc, #36]	; (8004294 <HAL_RCC_OscConfig+0xa34>)
 8004270:	4313      	orrs	r3, r2
 8004272:	60cb      	str	r3, [r1, #12]
 8004274:	e02a      	b.n	80042cc <HAL_RCC_OscConfig+0xa6c>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427a:	2b00      	cmp	r3, #0
 800427c:	da0c      	bge.n	8004298 <HAL_RCC_OscConfig+0xa38>
 800427e:	4b05      	ldr	r3, [pc, #20]	; (8004294 <HAL_RCC_OscConfig+0xa34>)
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	015b      	lsls	r3, r3, #5
 800428c:	4901      	ldr	r1, [pc, #4]	; (8004294 <HAL_RCC_OscConfig+0xa34>)
 800428e:	4313      	orrs	r3, r2
 8004290:	60cb      	str	r3, [r1, #12]
 8004292:	e01b      	b.n	80042cc <HAL_RCC_OscConfig+0xa6c>
 8004294:	46020c00 	.word	0x46020c00
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042a0:	d30a      	bcc.n	80042b8 <HAL_RCC_OscConfig+0xa58>
 80042a2:	4ba1      	ldr	r3, [pc, #644]	; (8004528 <HAL_RCC_OscConfig+0xcc8>)
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	029b      	lsls	r3, r3, #10
 80042b0:	499d      	ldr	r1, [pc, #628]	; (8004528 <HAL_RCC_OscConfig+0xcc8>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	60cb      	str	r3, [r1, #12]
 80042b6:	e009      	b.n	80042cc <HAL_RCC_OscConfig+0xa6c>
 80042b8:	4b9b      	ldr	r3, [pc, #620]	; (8004528 <HAL_RCC_OscConfig+0xcc8>)
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a1b      	ldr	r3, [r3, #32]
 80042c4:	03db      	lsls	r3, r3, #15
 80042c6:	4998      	ldr	r1, [pc, #608]	; (8004528 <HAL_RCC_OscConfig+0xcc8>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80042cc:	4b96      	ldr	r3, [pc, #600]	; (8004528 <HAL_RCC_OscConfig+0xcc8>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a95      	ldr	r2, [pc, #596]	; (8004528 <HAL_RCC_OscConfig+0xcc8>)
 80042d2:	f043 0310 	orr.w	r3, r3, #16
 80042d6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80042d8:	f7fd fb0a 	bl	80018f0 <HAL_GetTick>
 80042dc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80042de:	e008      	b.n	80042f2 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80042e0:	f7fd fb06 	bl	80018f0 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e18b      	b.n	800460a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80042f2:	4b8d      	ldr	r3, [pc, #564]	; (8004528 <HAL_RCC_OscConfig+0xcc8>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0320 	and.w	r3, r3, #32
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d0f0      	beq.n	80042e0 <HAL_RCC_OscConfig+0xa80>
 80042fe:	e018      	b.n	8004332 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8004300:	4b89      	ldr	r3, [pc, #548]	; (8004528 <HAL_RCC_OscConfig+0xcc8>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a88      	ldr	r2, [pc, #544]	; (8004528 <HAL_RCC_OscConfig+0xcc8>)
 8004306:	f023 0310 	bic.w	r3, r3, #16
 800430a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800430c:	f7fd faf0 	bl	80018f0 <HAL_GetTick>
 8004310:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004312:	e008      	b.n	8004326 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004314:	f7fd faec 	bl	80018f0 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b02      	cmp	r3, #2
 8004320:	d901      	bls.n	8004326 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e171      	b.n	800460a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004326:	4b80      	ldr	r3, [pc, #512]	; (8004528 <HAL_RCC_OscConfig+0xcc8>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0320 	and.w	r3, r3, #32
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1f0      	bne.n	8004314 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004336:	2b00      	cmp	r3, #0
 8004338:	f000 8166 	beq.w	8004608 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800433c:	2300      	movs	r3, #0
 800433e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004342:	4b79      	ldr	r3, [pc, #484]	; (8004528 <HAL_RCC_OscConfig+0xcc8>)
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	f003 030c 	and.w	r3, r3, #12
 800434a:	2b0c      	cmp	r3, #12
 800434c:	f000 80f2 	beq.w	8004534 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004354:	2b02      	cmp	r3, #2
 8004356:	f040 80c5 	bne.w	80044e4 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800435a:	4b73      	ldr	r3, [pc, #460]	; (8004528 <HAL_RCC_OscConfig+0xcc8>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a72      	ldr	r2, [pc, #456]	; (8004528 <HAL_RCC_OscConfig+0xcc8>)
 8004360:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004364:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004366:	f7fd fac3 	bl	80018f0 <HAL_GetTick>
 800436a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800436c:	e008      	b.n	8004380 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800436e:	f7fd fabf 	bl	80018f0 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d901      	bls.n	8004380 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e144      	b.n	800460a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004380:	4b69      	ldr	r3, [pc, #420]	; (8004528 <HAL_RCC_OscConfig+0xcc8>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1f0      	bne.n	800436e <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800438c:	4b66      	ldr	r3, [pc, #408]	; (8004528 <HAL_RCC_OscConfig+0xcc8>)
 800438e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004392:	f003 0304 	and.w	r3, r3, #4
 8004396:	2b00      	cmp	r3, #0
 8004398:	d111      	bne.n	80043be <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800439a:	4b63      	ldr	r3, [pc, #396]	; (8004528 <HAL_RCC_OscConfig+0xcc8>)
 800439c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043a0:	4a61      	ldr	r2, [pc, #388]	; (8004528 <HAL_RCC_OscConfig+0xcc8>)
 80043a2:	f043 0304 	orr.w	r3, r3, #4
 80043a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80043aa:	4b5f      	ldr	r3, [pc, #380]	; (8004528 <HAL_RCC_OscConfig+0xcc8>)
 80043ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043b0:	f003 0304 	and.w	r3, r3, #4
 80043b4:	60fb      	str	r3, [r7, #12]
 80043b6:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80043b8:	2301      	movs	r3, #1
 80043ba:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80043be:	4b5b      	ldr	r3, [pc, #364]	; (800452c <HAL_RCC_OscConfig+0xccc>)
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80043ca:	d102      	bne.n	80043d2 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80043cc:	2301      	movs	r3, #1
 80043ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80043d2:	4b56      	ldr	r3, [pc, #344]	; (800452c <HAL_RCC_OscConfig+0xccc>)
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	4a55      	ldr	r2, [pc, #340]	; (800452c <HAL_RCC_OscConfig+0xccc>)
 80043d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043dc:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80043de:	4b52      	ldr	r3, [pc, #328]	; (8004528 <HAL_RCC_OscConfig+0xcc8>)
 80043e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043e6:	f023 0303 	bic.w	r3, r3, #3
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80043f2:	3a01      	subs	r2, #1
 80043f4:	0212      	lsls	r2, r2, #8
 80043f6:	4311      	orrs	r1, r2
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80043fc:	430a      	orrs	r2, r1
 80043fe:	494a      	ldr	r1, [pc, #296]	; (8004528 <HAL_RCC_OscConfig+0xcc8>)
 8004400:	4313      	orrs	r3, r2
 8004402:	628b      	str	r3, [r1, #40]	; 0x28
 8004404:	4b48      	ldr	r3, [pc, #288]	; (8004528 <HAL_RCC_OscConfig+0xcc8>)
 8004406:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004408:	4b49      	ldr	r3, [pc, #292]	; (8004530 <HAL_RCC_OscConfig+0xcd0>)
 800440a:	4013      	ands	r3, r2
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004410:	3a01      	subs	r2, #1
 8004412:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800441a:	3a01      	subs	r2, #1
 800441c:	0252      	lsls	r2, r2, #9
 800441e:	b292      	uxth	r2, r2
 8004420:	4311      	orrs	r1, r2
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004426:	3a01      	subs	r2, #1
 8004428:	0412      	lsls	r2, r2, #16
 800442a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800442e:	4311      	orrs	r1, r2
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004434:	3a01      	subs	r2, #1
 8004436:	0612      	lsls	r2, r2, #24
 8004438:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800443c:	430a      	orrs	r2, r1
 800443e:	493a      	ldr	r1, [pc, #232]	; (8004528 <HAL_RCC_OscConfig+0xcc8>)
 8004440:	4313      	orrs	r3, r2
 8004442:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004444:	4b38      	ldr	r3, [pc, #224]	; (8004528 <HAL_RCC_OscConfig+0xcc8>)
 8004446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004448:	4a37      	ldr	r2, [pc, #220]	; (8004528 <HAL_RCC_OscConfig+0xcc8>)
 800444a:	f023 0310 	bic.w	r3, r3, #16
 800444e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004454:	4a34      	ldr	r2, [pc, #208]	; (8004528 <HAL_RCC_OscConfig+0xcc8>)
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800445a:	4b33      	ldr	r3, [pc, #204]	; (8004528 <HAL_RCC_OscConfig+0xcc8>)
 800445c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445e:	4a32      	ldr	r2, [pc, #200]	; (8004528 <HAL_RCC_OscConfig+0xcc8>)
 8004460:	f043 0310 	orr.w	r3, r3, #16
 8004464:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8004466:	4b30      	ldr	r3, [pc, #192]	; (8004528 <HAL_RCC_OscConfig+0xcc8>)
 8004468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446a:	f023 020c 	bic.w	r2, r3, #12
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004472:	492d      	ldr	r1, [pc, #180]	; (8004528 <HAL_RCC_OscConfig+0xcc8>)
 8004474:	4313      	orrs	r3, r2
 8004476:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8004478:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800447c:	2b01      	cmp	r3, #1
 800447e:	d105      	bne.n	800448c <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004480:	4b2a      	ldr	r3, [pc, #168]	; (800452c <HAL_RCC_OscConfig+0xccc>)
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	4a29      	ldr	r2, [pc, #164]	; (800452c <HAL_RCC_OscConfig+0xccc>)
 8004486:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800448a:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800448c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004490:	2b01      	cmp	r3, #1
 8004492:	d107      	bne.n	80044a4 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8004494:	4b24      	ldr	r3, [pc, #144]	; (8004528 <HAL_RCC_OscConfig+0xcc8>)
 8004496:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800449a:	4a23      	ldr	r2, [pc, #140]	; (8004528 <HAL_RCC_OscConfig+0xcc8>)
 800449c:	f023 0304 	bic.w	r3, r3, #4
 80044a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80044a4:	4b20      	ldr	r3, [pc, #128]	; (8004528 <HAL_RCC_OscConfig+0xcc8>)
 80044a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a8:	4a1f      	ldr	r2, [pc, #124]	; (8004528 <HAL_RCC_OscConfig+0xcc8>)
 80044aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044ae:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80044b0:	4b1d      	ldr	r3, [pc, #116]	; (8004528 <HAL_RCC_OscConfig+0xcc8>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a1c      	ldr	r2, [pc, #112]	; (8004528 <HAL_RCC_OscConfig+0xcc8>)
 80044b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044ba:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80044bc:	f7fd fa18 	bl	80018f0 <HAL_GetTick>
 80044c0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80044c2:	e008      	b.n	80044d6 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044c4:	f7fd fa14 	bl	80018f0 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e099      	b.n	800460a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80044d6:	4b14      	ldr	r3, [pc, #80]	; (8004528 <HAL_RCC_OscConfig+0xcc8>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d0f0      	beq.n	80044c4 <HAL_RCC_OscConfig+0xc64>
 80044e2:	e091      	b.n	8004608 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80044e4:	4b10      	ldr	r3, [pc, #64]	; (8004528 <HAL_RCC_OscConfig+0xcc8>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a0f      	ldr	r2, [pc, #60]	; (8004528 <HAL_RCC_OscConfig+0xcc8>)
 80044ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044ee:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80044f0:	f7fd f9fe 	bl	80018f0 <HAL_GetTick>
 80044f4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80044f6:	e008      	b.n	800450a <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044f8:	f7fd f9fa 	bl	80018f0 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b02      	cmp	r3, #2
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e07f      	b.n	800460a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800450a:	4b07      	ldr	r3, [pc, #28]	; (8004528 <HAL_RCC_OscConfig+0xcc8>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1f0      	bne.n	80044f8 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004516:	4b04      	ldr	r3, [pc, #16]	; (8004528 <HAL_RCC_OscConfig+0xcc8>)
 8004518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451a:	4a03      	ldr	r2, [pc, #12]	; (8004528 <HAL_RCC_OscConfig+0xcc8>)
 800451c:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8004520:	f023 0303 	bic.w	r3, r3, #3
 8004524:	6293      	str	r3, [r2, #40]	; 0x28
 8004526:	e06f      	b.n	8004608 <HAL_RCC_OscConfig+0xda8>
 8004528:	46020c00 	.word	0x46020c00
 800452c:	46020800 	.word	0x46020800
 8004530:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004534:	4b37      	ldr	r3, [pc, #220]	; (8004614 <HAL_RCC_OscConfig+0xdb4>)
 8004536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004538:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800453a:	4b36      	ldr	r3, [pc, #216]	; (8004614 <HAL_RCC_OscConfig+0xdb4>)
 800453c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800453e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004544:	2b01      	cmp	r3, #1
 8004546:	d039      	beq.n	80045bc <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	f003 0203 	and.w	r2, r3, #3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004552:	429a      	cmp	r2, r3
 8004554:	d132      	bne.n	80045bc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	0a1b      	lsrs	r3, r3, #8
 800455a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004562:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004564:	429a      	cmp	r2, r3
 8004566:	d129      	bne.n	80045bc <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004572:	429a      	cmp	r2, r3
 8004574:	d122      	bne.n	80045bc <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004580:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004582:	429a      	cmp	r2, r3
 8004584:	d11a      	bne.n	80045bc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	0a5b      	lsrs	r3, r3, #9
 800458a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004592:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004594:	429a      	cmp	r2, r3
 8004596:	d111      	bne.n	80045bc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	0c1b      	lsrs	r3, r3, #16
 800459c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045a4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d108      	bne.n	80045bc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	0e1b      	lsrs	r3, r3, #24
 80045ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d001      	beq.n	80045c0 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e024      	b.n	800460a <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80045c0:	4b14      	ldr	r3, [pc, #80]	; (8004614 <HAL_RCC_OscConfig+0xdb4>)
 80045c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c4:	08db      	lsrs	r3, r3, #3
 80045c6:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d01a      	beq.n	8004608 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80045d2:	4b10      	ldr	r3, [pc, #64]	; (8004614 <HAL_RCC_OscConfig+0xdb4>)
 80045d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d6:	4a0f      	ldr	r2, [pc, #60]	; (8004614 <HAL_RCC_OscConfig+0xdb4>)
 80045d8:	f023 0310 	bic.w	r3, r3, #16
 80045dc:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045de:	f7fd f987 	bl	80018f0 <HAL_GetTick>
 80045e2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80045e4:	bf00      	nop
 80045e6:	f7fd f983 	bl	80018f0 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d0f9      	beq.n	80045e6 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f6:	4a07      	ldr	r2, [pc, #28]	; (8004614 <HAL_RCC_OscConfig+0xdb4>)
 80045f8:	00db      	lsls	r3, r3, #3
 80045fa:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80045fc:	4b05      	ldr	r3, [pc, #20]	; (8004614 <HAL_RCC_OscConfig+0xdb4>)
 80045fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004600:	4a04      	ldr	r2, [pc, #16]	; (8004614 <HAL_RCC_OscConfig+0xdb4>)
 8004602:	f043 0310 	orr.w	r3, r3, #16
 8004606:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3738      	adds	r7, #56	; 0x38
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	46020c00 	.word	0x46020c00

08004618 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d101      	bne.n	800462c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e1d9      	b.n	80049e0 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800462c:	4b9b      	ldr	r3, [pc, #620]	; (800489c <HAL_RCC_ClockConfig+0x284>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 030f 	and.w	r3, r3, #15
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	429a      	cmp	r2, r3
 8004638:	d910      	bls.n	800465c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800463a:	4b98      	ldr	r3, [pc, #608]	; (800489c <HAL_RCC_ClockConfig+0x284>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f023 020f 	bic.w	r2, r3, #15
 8004642:	4996      	ldr	r1, [pc, #600]	; (800489c <HAL_RCC_ClockConfig+0x284>)
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	4313      	orrs	r3, r2
 8004648:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800464a:	4b94      	ldr	r3, [pc, #592]	; (800489c <HAL_RCC_ClockConfig+0x284>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 030f 	and.w	r3, r3, #15
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	429a      	cmp	r2, r3
 8004656:	d001      	beq.n	800465c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e1c1      	b.n	80049e0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0310 	and.w	r3, r3, #16
 8004664:	2b00      	cmp	r3, #0
 8004666:	d010      	beq.n	800468a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	695a      	ldr	r2, [r3, #20]
 800466c:	4b8c      	ldr	r3, [pc, #560]	; (80048a0 <HAL_RCC_ClockConfig+0x288>)
 800466e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004670:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004674:	429a      	cmp	r2, r3
 8004676:	d908      	bls.n	800468a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8004678:	4b89      	ldr	r3, [pc, #548]	; (80048a0 <HAL_RCC_ClockConfig+0x288>)
 800467a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	4986      	ldr	r1, [pc, #536]	; (80048a0 <HAL_RCC_ClockConfig+0x288>)
 8004686:	4313      	orrs	r3, r2
 8004688:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0308 	and.w	r3, r3, #8
 8004692:	2b00      	cmp	r3, #0
 8004694:	d012      	beq.n	80046bc <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	691a      	ldr	r2, [r3, #16]
 800469a:	4b81      	ldr	r3, [pc, #516]	; (80048a0 <HAL_RCC_ClockConfig+0x288>)
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	091b      	lsrs	r3, r3, #4
 80046a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d909      	bls.n	80046bc <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80046a8:	4b7d      	ldr	r3, [pc, #500]	; (80048a0 <HAL_RCC_ClockConfig+0x288>)
 80046aa:	6a1b      	ldr	r3, [r3, #32]
 80046ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	011b      	lsls	r3, r3, #4
 80046b6:	497a      	ldr	r1, [pc, #488]	; (80048a0 <HAL_RCC_ClockConfig+0x288>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0304 	and.w	r3, r3, #4
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d010      	beq.n	80046ea <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68da      	ldr	r2, [r3, #12]
 80046cc:	4b74      	ldr	r3, [pc, #464]	; (80048a0 <HAL_RCC_ClockConfig+0x288>)
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d908      	bls.n	80046ea <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80046d8:	4b71      	ldr	r3, [pc, #452]	; (80048a0 <HAL_RCC_ClockConfig+0x288>)
 80046da:	6a1b      	ldr	r3, [r3, #32]
 80046dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	496e      	ldr	r1, [pc, #440]	; (80048a0 <HAL_RCC_ClockConfig+0x288>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d010      	beq.n	8004718 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	689a      	ldr	r2, [r3, #8]
 80046fa:	4b69      	ldr	r3, [pc, #420]	; (80048a0 <HAL_RCC_ClockConfig+0x288>)
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	f003 030f 	and.w	r3, r3, #15
 8004702:	429a      	cmp	r2, r3
 8004704:	d908      	bls.n	8004718 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004706:	4b66      	ldr	r3, [pc, #408]	; (80048a0 <HAL_RCC_ClockConfig+0x288>)
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	f023 020f 	bic.w	r2, r3, #15
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	4963      	ldr	r1, [pc, #396]	; (80048a0 <HAL_RCC_ClockConfig+0x288>)
 8004714:	4313      	orrs	r3, r2
 8004716:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	2b00      	cmp	r3, #0
 8004722:	f000 80d2 	beq.w	80048ca <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8004726:	2300      	movs	r3, #0
 8004728:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	2b03      	cmp	r3, #3
 8004730:	d143      	bne.n	80047ba <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004732:	4b5b      	ldr	r3, [pc, #364]	; (80048a0 <HAL_RCC_ClockConfig+0x288>)
 8004734:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b00      	cmp	r3, #0
 800473e:	d110      	bne.n	8004762 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004740:	4b57      	ldr	r3, [pc, #348]	; (80048a0 <HAL_RCC_ClockConfig+0x288>)
 8004742:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004746:	4a56      	ldr	r2, [pc, #344]	; (80048a0 <HAL_RCC_ClockConfig+0x288>)
 8004748:	f043 0304 	orr.w	r3, r3, #4
 800474c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004750:	4b53      	ldr	r3, [pc, #332]	; (80048a0 <HAL_RCC_ClockConfig+0x288>)
 8004752:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004756:	f003 0304 	and.w	r3, r3, #4
 800475a:	60bb      	str	r3, [r7, #8]
 800475c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800475e:	2301      	movs	r3, #1
 8004760:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8004762:	f7fd f8c5 	bl	80018f0 <HAL_GetTick>
 8004766:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8004768:	4b4e      	ldr	r3, [pc, #312]	; (80048a4 <HAL_RCC_ClockConfig+0x28c>)
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00f      	beq.n	8004794 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004774:	e008      	b.n	8004788 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8004776:	f7fd f8bb 	bl	80018f0 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d901      	bls.n	8004788 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e12b      	b.n	80049e0 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004788:	4b46      	ldr	r3, [pc, #280]	; (80048a4 <HAL_RCC_ClockConfig+0x28c>)
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d0f0      	beq.n	8004776 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004794:	7dfb      	ldrb	r3, [r7, #23]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d107      	bne.n	80047aa <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800479a:	4b41      	ldr	r3, [pc, #260]	; (80048a0 <HAL_RCC_ClockConfig+0x288>)
 800479c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047a0:	4a3f      	ldr	r2, [pc, #252]	; (80048a0 <HAL_RCC_ClockConfig+0x288>)
 80047a2:	f023 0304 	bic.w	r3, r3, #4
 80047a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80047aa:	4b3d      	ldr	r3, [pc, #244]	; (80048a0 <HAL_RCC_ClockConfig+0x288>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d121      	bne.n	80047fa <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e112      	b.n	80049e0 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d107      	bne.n	80047d2 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047c2:	4b37      	ldr	r3, [pc, #220]	; (80048a0 <HAL_RCC_ClockConfig+0x288>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d115      	bne.n	80047fa <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e106      	b.n	80049e0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d107      	bne.n	80047ea <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80047da:	4b31      	ldr	r3, [pc, #196]	; (80048a0 <HAL_RCC_ClockConfig+0x288>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0304 	and.w	r3, r3, #4
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d109      	bne.n	80047fa <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e0fa      	b.n	80049e0 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047ea:	4b2d      	ldr	r3, [pc, #180]	; (80048a0 <HAL_RCC_ClockConfig+0x288>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e0f2      	b.n	80049e0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80047fa:	4b29      	ldr	r3, [pc, #164]	; (80048a0 <HAL_RCC_ClockConfig+0x288>)
 80047fc:	69db      	ldr	r3, [r3, #28]
 80047fe:	f023 0203 	bic.w	r2, r3, #3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	4926      	ldr	r1, [pc, #152]	; (80048a0 <HAL_RCC_ClockConfig+0x288>)
 8004808:	4313      	orrs	r3, r2
 800480a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800480c:	f7fd f870 	bl	80018f0 <HAL_GetTick>
 8004810:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	2b03      	cmp	r3, #3
 8004818:	d112      	bne.n	8004840 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800481a:	e00a      	b.n	8004832 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800481c:	f7fd f868 	bl	80018f0 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	f241 3288 	movw	r2, #5000	; 0x1388
 800482a:	4293      	cmp	r3, r2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e0d6      	b.n	80049e0 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004832:	4b1b      	ldr	r3, [pc, #108]	; (80048a0 <HAL_RCC_ClockConfig+0x288>)
 8004834:	69db      	ldr	r3, [r3, #28]
 8004836:	f003 030c 	and.w	r3, r3, #12
 800483a:	2b0c      	cmp	r3, #12
 800483c:	d1ee      	bne.n	800481c <HAL_RCC_ClockConfig+0x204>
 800483e:	e044      	b.n	80048ca <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	2b02      	cmp	r3, #2
 8004846:	d112      	bne.n	800486e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004848:	e00a      	b.n	8004860 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800484a:	f7fd f851 	bl	80018f0 <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	f241 3288 	movw	r2, #5000	; 0x1388
 8004858:	4293      	cmp	r3, r2
 800485a:	d901      	bls.n	8004860 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e0bf      	b.n	80049e0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004860:	4b0f      	ldr	r3, [pc, #60]	; (80048a0 <HAL_RCC_ClockConfig+0x288>)
 8004862:	69db      	ldr	r3, [r3, #28]
 8004864:	f003 030c 	and.w	r3, r3, #12
 8004868:	2b08      	cmp	r3, #8
 800486a:	d1ee      	bne.n	800484a <HAL_RCC_ClockConfig+0x232>
 800486c:	e02d      	b.n	80048ca <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d123      	bne.n	80048be <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004876:	e00a      	b.n	800488e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004878:	f7fd f83a 	bl	80018f0 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	f241 3288 	movw	r2, #5000	; 0x1388
 8004886:	4293      	cmp	r3, r2
 8004888:	d901      	bls.n	800488e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e0a8      	b.n	80049e0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800488e:	4b04      	ldr	r3, [pc, #16]	; (80048a0 <HAL_RCC_ClockConfig+0x288>)
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	f003 030c 	and.w	r3, r3, #12
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1ee      	bne.n	8004878 <HAL_RCC_ClockConfig+0x260>
 800489a:	e016      	b.n	80048ca <HAL_RCC_ClockConfig+0x2b2>
 800489c:	40022000 	.word	0x40022000
 80048a0:	46020c00 	.word	0x46020c00
 80048a4:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048a8:	f7fd f822 	bl	80018f0 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e090      	b.n	80049e0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80048be:	4b4a      	ldr	r3, [pc, #296]	; (80049e8 <HAL_RCC_ClockConfig+0x3d0>)
 80048c0:	69db      	ldr	r3, [r3, #28]
 80048c2:	f003 030c 	and.w	r3, r3, #12
 80048c6:	2b04      	cmp	r3, #4
 80048c8:	d1ee      	bne.n	80048a8 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d010      	beq.n	80048f8 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	689a      	ldr	r2, [r3, #8]
 80048da:	4b43      	ldr	r3, [pc, #268]	; (80049e8 <HAL_RCC_ClockConfig+0x3d0>)
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	f003 030f 	and.w	r3, r3, #15
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d208      	bcs.n	80048f8 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80048e6:	4b40      	ldr	r3, [pc, #256]	; (80049e8 <HAL_RCC_ClockConfig+0x3d0>)
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	f023 020f 	bic.w	r2, r3, #15
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	493d      	ldr	r1, [pc, #244]	; (80049e8 <HAL_RCC_ClockConfig+0x3d0>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048f8:	4b3c      	ldr	r3, [pc, #240]	; (80049ec <HAL_RCC_ClockConfig+0x3d4>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 030f 	and.w	r3, r3, #15
 8004900:	683a      	ldr	r2, [r7, #0]
 8004902:	429a      	cmp	r2, r3
 8004904:	d210      	bcs.n	8004928 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004906:	4b39      	ldr	r3, [pc, #228]	; (80049ec <HAL_RCC_ClockConfig+0x3d4>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f023 020f 	bic.w	r2, r3, #15
 800490e:	4937      	ldr	r1, [pc, #220]	; (80049ec <HAL_RCC_ClockConfig+0x3d4>)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	4313      	orrs	r3, r2
 8004914:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004916:	4b35      	ldr	r3, [pc, #212]	; (80049ec <HAL_RCC_ClockConfig+0x3d4>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 030f 	and.w	r3, r3, #15
 800491e:	683a      	ldr	r2, [r7, #0]
 8004920:	429a      	cmp	r2, r3
 8004922:	d001      	beq.n	8004928 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e05b      	b.n	80049e0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0304 	and.w	r3, r3, #4
 8004930:	2b00      	cmp	r3, #0
 8004932:	d010      	beq.n	8004956 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	68da      	ldr	r2, [r3, #12]
 8004938:	4b2b      	ldr	r3, [pc, #172]	; (80049e8 <HAL_RCC_ClockConfig+0x3d0>)
 800493a:	6a1b      	ldr	r3, [r3, #32]
 800493c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004940:	429a      	cmp	r2, r3
 8004942:	d208      	bcs.n	8004956 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004944:	4b28      	ldr	r3, [pc, #160]	; (80049e8 <HAL_RCC_ClockConfig+0x3d0>)
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	4925      	ldr	r1, [pc, #148]	; (80049e8 <HAL_RCC_ClockConfig+0x3d0>)
 8004952:	4313      	orrs	r3, r2
 8004954:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0308 	and.w	r3, r3, #8
 800495e:	2b00      	cmp	r3, #0
 8004960:	d012      	beq.n	8004988 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	691a      	ldr	r2, [r3, #16]
 8004966:	4b20      	ldr	r3, [pc, #128]	; (80049e8 <HAL_RCC_ClockConfig+0x3d0>)
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	091b      	lsrs	r3, r3, #4
 800496c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004970:	429a      	cmp	r2, r3
 8004972:	d209      	bcs.n	8004988 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004974:	4b1c      	ldr	r3, [pc, #112]	; (80049e8 <HAL_RCC_ClockConfig+0x3d0>)
 8004976:	6a1b      	ldr	r3, [r3, #32]
 8004978:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	011b      	lsls	r3, r3, #4
 8004982:	4919      	ldr	r1, [pc, #100]	; (80049e8 <HAL_RCC_ClockConfig+0x3d0>)
 8004984:	4313      	orrs	r3, r2
 8004986:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0310 	and.w	r3, r3, #16
 8004990:	2b00      	cmp	r3, #0
 8004992:	d010      	beq.n	80049b6 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	695a      	ldr	r2, [r3, #20]
 8004998:	4b13      	ldr	r3, [pc, #76]	; (80049e8 <HAL_RCC_ClockConfig+0x3d0>)
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d208      	bcs.n	80049b6 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80049a4:	4b10      	ldr	r3, [pc, #64]	; (80049e8 <HAL_RCC_ClockConfig+0x3d0>)
 80049a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	490d      	ldr	r1, [pc, #52]	; (80049e8 <HAL_RCC_ClockConfig+0x3d0>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80049b6:	f000 f821 	bl	80049fc <HAL_RCC_GetSysClockFreq>
 80049ba:	4602      	mov	r2, r0
 80049bc:	4b0a      	ldr	r3, [pc, #40]	; (80049e8 <HAL_RCC_ClockConfig+0x3d0>)
 80049be:	6a1b      	ldr	r3, [r3, #32]
 80049c0:	f003 030f 	and.w	r3, r3, #15
 80049c4:	490a      	ldr	r1, [pc, #40]	; (80049f0 <HAL_RCC_ClockConfig+0x3d8>)
 80049c6:	5ccb      	ldrb	r3, [r1, r3]
 80049c8:	fa22 f303 	lsr.w	r3, r2, r3
 80049cc:	4a09      	ldr	r2, [pc, #36]	; (80049f4 <HAL_RCC_ClockConfig+0x3dc>)
 80049ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80049d0:	4b09      	ldr	r3, [pc, #36]	; (80049f8 <HAL_RCC_ClockConfig+0x3e0>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7fc ff41 	bl	800185c <HAL_InitTick>
 80049da:	4603      	mov	r3, r0
 80049dc:	73fb      	strb	r3, [r7, #15]

  return status;
 80049de:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3718      	adds	r7, #24
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	46020c00 	.word	0x46020c00
 80049ec:	40022000 	.word	0x40022000
 80049f0:	0800ab14 	.word	0x0800ab14
 80049f4:	20000004 	.word	0x20000004
 80049f8:	20000008 	.word	0x20000008

080049fc <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b08b      	sub	sp, #44	; 0x2c
 8004a00:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004a02:	2300      	movs	r3, #0
 8004a04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8004a06:	2300      	movs	r3, #0
 8004a08:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a0a:	4b78      	ldr	r3, [pc, #480]	; (8004bec <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	f003 030c 	and.w	r3, r3, #12
 8004a12:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a14:	4b75      	ldr	r3, [pc, #468]	; (8004bec <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a18:	f003 0303 	and.w	r3, r3, #3
 8004a1c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d005      	beq.n	8004a30 <HAL_RCC_GetSysClockFreq+0x34>
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	2b0c      	cmp	r3, #12
 8004a28:	d121      	bne.n	8004a6e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d11e      	bne.n	8004a6e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004a30:	4b6e      	ldr	r3, [pc, #440]	; (8004bec <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d107      	bne.n	8004a4c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004a3c:	4b6b      	ldr	r3, [pc, #428]	; (8004bec <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004a3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004a42:	0b1b      	lsrs	r3, r3, #12
 8004a44:	f003 030f 	and.w	r3, r3, #15
 8004a48:	627b      	str	r3, [r7, #36]	; 0x24
 8004a4a:	e005      	b.n	8004a58 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8004a4c:	4b67      	ldr	r3, [pc, #412]	; (8004bec <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	0f1b      	lsrs	r3, r3, #28
 8004a52:	f003 030f 	and.w	r3, r3, #15
 8004a56:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004a58:	4a65      	ldr	r2, [pc, #404]	; (8004bf0 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a60:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d110      	bne.n	8004a8a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a6c:	e00d      	b.n	8004a8a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a6e:	4b5f      	ldr	r3, [pc, #380]	; (8004bec <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004a70:	69db      	ldr	r3, [r3, #28]
 8004a72:	f003 030c 	and.w	r3, r3, #12
 8004a76:	2b04      	cmp	r3, #4
 8004a78:	d102      	bne.n	8004a80 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a7a:	4b5e      	ldr	r3, [pc, #376]	; (8004bf4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004a7c:	623b      	str	r3, [r7, #32]
 8004a7e:	e004      	b.n	8004a8a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	2b08      	cmp	r3, #8
 8004a84:	d101      	bne.n	8004a8a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a86:	4b5b      	ldr	r3, [pc, #364]	; (8004bf4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004a88:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	2b0c      	cmp	r3, #12
 8004a8e:	f040 80a5 	bne.w	8004bdc <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004a92:	4b56      	ldr	r3, [pc, #344]	; (8004bec <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a96:	f003 0303 	and.w	r3, r3, #3
 8004a9a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004a9c:	4b53      	ldr	r3, [pc, #332]	; (8004bec <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa0:	0a1b      	lsrs	r3, r3, #8
 8004aa2:	f003 030f 	and.w	r3, r3, #15
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004aaa:	4b50      	ldr	r3, [pc, #320]	; (8004bec <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aae:	091b      	lsrs	r3, r3, #4
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004ab6:	4b4d      	ldr	r3, [pc, #308]	; (8004bec <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aba:	08db      	lsrs	r3, r3, #3
 8004abc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	fb02 f303 	mul.w	r3, r2, r3
 8004ac6:	ee07 3a90 	vmov	s15, r3
 8004aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ace:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d003      	beq.n	8004ae0 <HAL_RCC_GetSysClockFreq+0xe4>
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	2b03      	cmp	r3, #3
 8004adc:	d022      	beq.n	8004b24 <HAL_RCC_GetSysClockFreq+0x128>
 8004ade:	e043      	b.n	8004b68 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	ee07 3a90 	vmov	s15, r3
 8004ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aea:	eddf 6a43 	vldr	s13, [pc, #268]	; 8004bf8 <HAL_RCC_GetSysClockFreq+0x1fc>
 8004aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004af2:	4b3e      	ldr	r3, [pc, #248]	; (8004bec <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004afa:	ee07 3a90 	vmov	s15, r3
 8004afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004b02:	ed97 6a01 	vldr	s12, [r7, #4]
 8004b06:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8004bfc <HAL_RCC_GetSysClockFreq+0x200>
 8004b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004b12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b22:	e046      	b.n	8004bb2 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	ee07 3a90 	vmov	s15, r3
 8004b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b2e:	eddf 6a32 	vldr	s13, [pc, #200]	; 8004bf8 <HAL_RCC_GetSysClockFreq+0x1fc>
 8004b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b36:	4b2d      	ldr	r3, [pc, #180]	; (8004bec <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b3e:	ee07 3a90 	vmov	s15, r3
 8004b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004b46:	ed97 6a01 	vldr	s12, [r7, #4]
 8004b4a:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8004bfc <HAL_RCC_GetSysClockFreq+0x200>
 8004b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004b56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b66:	e024      	b.n	8004bb2 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6a:	ee07 3a90 	vmov	s15, r3
 8004b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	ee07 3a90 	vmov	s15, r3
 8004b78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b80:	4b1a      	ldr	r3, [pc, #104]	; (8004bec <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b88:	ee07 3a90 	vmov	s15, r3
 8004b8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004b90:	ed97 6a01 	vldr	s12, [r7, #4]
 8004b94:	eddf 5a19 	vldr	s11, [pc, #100]	; 8004bfc <HAL_RCC_GetSysClockFreq+0x200>
 8004b98:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004b9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004ba0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ba4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bb0:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8004bb2:	4b0e      	ldr	r3, [pc, #56]	; (8004bec <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb6:	0e1b      	lsrs	r3, r3, #24
 8004bb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	ee07 3a90 	vmov	s15, r3
 8004bc6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004bca:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bd6:	ee17 3a90 	vmov	r3, s15
 8004bda:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8004bdc:	6a3b      	ldr	r3, [r7, #32]
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	372c      	adds	r7, #44	; 0x2c
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	46020c00 	.word	0x46020c00
 8004bf0:	0800ab2c 	.word	0x0800ab2c
 8004bf4:	00f42400 	.word	0x00f42400
 8004bf8:	4b742400 	.word	0x4b742400
 8004bfc:	46000000 	.word	0x46000000

08004c00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004c04:	f7ff fefa 	bl	80049fc <HAL_RCC_GetSysClockFreq>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	4b07      	ldr	r3, [pc, #28]	; (8004c28 <HAL_RCC_GetHCLKFreq+0x28>)
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	f003 030f 	and.w	r3, r3, #15
 8004c12:	4906      	ldr	r1, [pc, #24]	; (8004c2c <HAL_RCC_GetHCLKFreq+0x2c>)
 8004c14:	5ccb      	ldrb	r3, [r1, r3]
 8004c16:	fa22 f303 	lsr.w	r3, r2, r3
 8004c1a:	4a05      	ldr	r2, [pc, #20]	; (8004c30 <HAL_RCC_GetHCLKFreq+0x30>)
 8004c1c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004c1e:	4b04      	ldr	r3, [pc, #16]	; (8004c30 <HAL_RCC_GetHCLKFreq+0x30>)
 8004c20:	681b      	ldr	r3, [r3, #0]
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	46020c00 	.word	0x46020c00
 8004c2c:	0800ab14 	.word	0x0800ab14
 8004c30:	20000004 	.word	0x20000004

08004c34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8004c38:	f7ff ffe2 	bl	8004c00 <HAL_RCC_GetHCLKFreq>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	4b05      	ldr	r3, [pc, #20]	; (8004c54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	091b      	lsrs	r3, r3, #4
 8004c44:	f003 0307 	and.w	r3, r3, #7
 8004c48:	4903      	ldr	r1, [pc, #12]	; (8004c58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c4a:	5ccb      	ldrb	r3, [r1, r3]
 8004c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	46020c00 	.word	0x46020c00
 8004c58:	0800ab24 	.word	0x0800ab24

08004c5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8004c60:	f7ff ffce 	bl	8004c00 <HAL_RCC_GetHCLKFreq>
 8004c64:	4602      	mov	r2, r0
 8004c66:	4b05      	ldr	r3, [pc, #20]	; (8004c7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	0a1b      	lsrs	r3, r3, #8
 8004c6c:	f003 0307 	and.w	r3, r3, #7
 8004c70:	4903      	ldr	r1, [pc, #12]	; (8004c80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c72:	5ccb      	ldrb	r3, [r1, r3]
 8004c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	46020c00 	.word	0x46020c00
 8004c80:	0800ab24 	.word	0x0800ab24

08004c84 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8004c88:	f7ff ffba 	bl	8004c00 <HAL_RCC_GetHCLKFreq>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	4b05      	ldr	r3, [pc, #20]	; (8004ca4 <HAL_RCC_GetPCLK3Freq+0x20>)
 8004c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c92:	091b      	lsrs	r3, r3, #4
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	4903      	ldr	r1, [pc, #12]	; (8004ca8 <HAL_RCC_GetPCLK3Freq+0x24>)
 8004c9a:	5ccb      	ldrb	r3, [r1, r3]
 8004c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	46020c00 	.word	0x46020c00
 8004ca8:	0800ab24 	.word	0x0800ab24

08004cac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004cb4:	4b3e      	ldr	r3, [pc, #248]	; (8004db0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004cb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cba:	f003 0304 	and.w	r3, r3, #4
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d003      	beq.n	8004cca <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004cc2:	f7fe fd9f 	bl	8003804 <HAL_PWREx_GetVoltageRange>
 8004cc6:	6178      	str	r0, [r7, #20]
 8004cc8:	e019      	b.n	8004cfe <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cca:	4b39      	ldr	r3, [pc, #228]	; (8004db0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cd0:	4a37      	ldr	r2, [pc, #220]	; (8004db0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004cd2:	f043 0304 	orr.w	r3, r3, #4
 8004cd6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004cda:	4b35      	ldr	r3, [pc, #212]	; (8004db0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004cdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	60fb      	str	r3, [r7, #12]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ce8:	f7fe fd8c 	bl	8003804 <HAL_PWREx_GetVoltageRange>
 8004cec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004cee:	4b30      	ldr	r3, [pc, #192]	; (8004db0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004cf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cf4:	4a2e      	ldr	r2, [pc, #184]	; (8004db0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004cf6:	f023 0304 	bic.w	r3, r3, #4
 8004cfa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d04:	d003      	beq.n	8004d0e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d0c:	d109      	bne.n	8004d22 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d14:	d202      	bcs.n	8004d1c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8004d16:	2301      	movs	r3, #1
 8004d18:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004d1a:	e033      	b.n	8004d84 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004d20:	e030      	b.n	8004d84 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d28:	d208      	bcs.n	8004d3c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d30:	d102      	bne.n	8004d38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8004d32:	2303      	movs	r3, #3
 8004d34:	613b      	str	r3, [r7, #16]
 8004d36:	e025      	b.n	8004d84 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e035      	b.n	8004da8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d42:	d90f      	bls.n	8004d64 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d109      	bne.n	8004d5e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d50:	d902      	bls.n	8004d58 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8004d52:	2300      	movs	r3, #0
 8004d54:	613b      	str	r3, [r7, #16]
 8004d56:	e015      	b.n	8004d84 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8004d58:	2301      	movs	r3, #1
 8004d5a:	613b      	str	r3, [r7, #16]
 8004d5c:	e012      	b.n	8004d84 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8004d5e:	2300      	movs	r3, #0
 8004d60:	613b      	str	r3, [r7, #16]
 8004d62:	e00f      	b.n	8004d84 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d6a:	d109      	bne.n	8004d80 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d72:	d102      	bne.n	8004d7a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8004d74:	2301      	movs	r3, #1
 8004d76:	613b      	str	r3, [r7, #16]
 8004d78:	e004      	b.n	8004d84 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8004d7a:	2302      	movs	r3, #2
 8004d7c:	613b      	str	r3, [r7, #16]
 8004d7e:	e001      	b.n	8004d84 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8004d80:	2301      	movs	r3, #1
 8004d82:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004d84:	4b0b      	ldr	r3, [pc, #44]	; (8004db4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f023 020f 	bic.w	r2, r3, #15
 8004d8c:	4909      	ldr	r1, [pc, #36]	; (8004db4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004d94:	4b07      	ldr	r3, [pc, #28]	; (8004db4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 030f 	and.w	r3, r3, #15
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d001      	beq.n	8004da6 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e000      	b.n	8004da8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3718      	adds	r7, #24
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	46020c00 	.word	0x46020c00
 8004db4:	40022000 	.word	0x40022000

08004db8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004db8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dbc:	b0b8      	sub	sp, #224	; 0xe0
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004dca:	2300      	movs	r3, #0
 8004dcc:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004dd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd8:	f002 0401 	and.w	r4, r2, #1
 8004ddc:	2500      	movs	r5, #0
 8004dde:	ea54 0305 	orrs.w	r3, r4, r5
 8004de2:	d00b      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004de4:	4bca      	ldr	r3, [pc, #808]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004dea:	f023 0103 	bic.w	r1, r3, #3
 8004dee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004df4:	4ac6      	ldr	r2, [pc, #792]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004df6:	430b      	orrs	r3, r1
 8004df8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004dfc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e04:	f002 0802 	and.w	r8, r2, #2
 8004e08:	f04f 0900 	mov.w	r9, #0
 8004e0c:	ea58 0309 	orrs.w	r3, r8, r9
 8004e10:	d00b      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004e12:	4bbf      	ldr	r3, [pc, #764]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e18:	f023 010c 	bic.w	r1, r3, #12
 8004e1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e22:	4abb      	ldr	r2, [pc, #748]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e24:	430b      	orrs	r3, r1
 8004e26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e32:	f002 0a04 	and.w	sl, r2, #4
 8004e36:	f04f 0b00 	mov.w	fp, #0
 8004e3a:	ea5a 030b 	orrs.w	r3, sl, fp
 8004e3e:	d00b      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004e40:	4bb3      	ldr	r3, [pc, #716]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e46:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004e4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e50:	4aaf      	ldr	r2, [pc, #700]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e52:	430b      	orrs	r3, r1
 8004e54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e60:	f002 0308 	and.w	r3, r2, #8
 8004e64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e68:	2300      	movs	r3, #0
 8004e6a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e6e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004e72:	460b      	mov	r3, r1
 8004e74:	4313      	orrs	r3, r2
 8004e76:	d00b      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004e78:	4ba5      	ldr	r3, [pc, #660]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004e82:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e88:	4aa1      	ldr	r2, [pc, #644]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e8a:	430b      	orrs	r3, r1
 8004e8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e98:	f002 0310 	and.w	r3, r2, #16
 8004e9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004ea6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004eaa:	460b      	mov	r3, r1
 8004eac:	4313      	orrs	r3, r2
 8004eae:	d00b      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004eb0:	4b97      	ldr	r3, [pc, #604]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004eb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004eb6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004eba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ebe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ec0:	4a93      	ldr	r2, [pc, #588]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ec2:	430b      	orrs	r3, r1
 8004ec4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ec8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed0:	f002 0320 	and.w	r3, r2, #32
 8004ed4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ed8:	2300      	movs	r3, #0
 8004eda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ede:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	d00b      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004ee8:	4b89      	ldr	r3, [pc, #548]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004eea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004eee:	f023 0107 	bic.w	r1, r3, #7
 8004ef2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ef6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ef8:	4a85      	ldr	r2, [pc, #532]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004efa:	430b      	orrs	r3, r1
 8004efc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f08:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004f0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f10:	2300      	movs	r3, #0
 8004f12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f16:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	d00b      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004f20:	4b7b      	ldr	r3, [pc, #492]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f26:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8004f2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f30:	4a77      	ldr	r2, [pc, #476]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004f32:	430b      	orrs	r3, r1
 8004f34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f40:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004f44:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f48:	2300      	movs	r3, #0
 8004f4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004f4e:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004f52:	460b      	mov	r3, r1
 8004f54:	4313      	orrs	r3, r2
 8004f56:	d00b      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004f58:	4b6d      	ldr	r3, [pc, #436]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f68:	4a69      	ldr	r2, [pc, #420]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004f6a:	430b      	orrs	r3, r1
 8004f6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f78:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8004f7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f80:	2300      	movs	r3, #0
 8004f82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f86:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	d00b      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004f90:	4b5f      	ldr	r3, [pc, #380]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004f92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004f9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa0:	4a5b      	ldr	r2, [pc, #364]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004fa2:	430b      	orrs	r3, r1
 8004fa4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004fa8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004fb4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004fb8:	2300      	movs	r3, #0
 8004fba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004fbe:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	d00b      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004fc8:	4b51      	ldr	r3, [pc, #324]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004fce:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8004fd2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004fd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fd8:	4a4d      	ldr	r2, [pc, #308]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004fda:	430b      	orrs	r3, r1
 8004fdc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004fe0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe8:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8004fec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004ff6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	d00b      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005000:	4b43      	ldr	r3, [pc, #268]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005002:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005006:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800500a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800500e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005010:	4a3f      	ldr	r2, [pc, #252]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005012:	430b      	orrs	r3, r1
 8005014:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005018:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800501c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005020:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005024:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005028:	2300      	movs	r3, #0
 800502a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800502e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005032:	460b      	mov	r3, r1
 8005034:	4313      	orrs	r3, r2
 8005036:	d00b      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005038:	4b35      	ldr	r3, [pc, #212]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800503a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800503e:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8005042:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005046:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005048:	4a31      	ldr	r2, [pc, #196]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800504a:	430b      	orrs	r3, r1
 800504c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8005050:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005058:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800505c:	67bb      	str	r3, [r7, #120]	; 0x78
 800505e:	2300      	movs	r3, #0
 8005060:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005062:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005066:	460b      	mov	r3, r1
 8005068:	4313      	orrs	r3, r2
 800506a:	d00c      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800506c:	4b28      	ldr	r3, [pc, #160]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800506e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005072:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005076:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800507a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800507e:	4a24      	ldr	r2, [pc, #144]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005080:	430b      	orrs	r3, r1
 8005082:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005086:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800508a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005092:	673b      	str	r3, [r7, #112]	; 0x70
 8005094:	2300      	movs	r3, #0
 8005096:	677b      	str	r3, [r7, #116]	; 0x74
 8005098:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800509c:	460b      	mov	r3, r1
 800509e:	4313      	orrs	r3, r2
 80050a0:	d04f      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80050a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80050a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050aa:	2b80      	cmp	r3, #128	; 0x80
 80050ac:	d02d      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x352>
 80050ae:	2b80      	cmp	r3, #128	; 0x80
 80050b0:	d827      	bhi.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80050b2:	2b60      	cmp	r3, #96	; 0x60
 80050b4:	d02e      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80050b6:	2b60      	cmp	r3, #96	; 0x60
 80050b8:	d823      	bhi.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80050ba:	2b40      	cmp	r3, #64	; 0x40
 80050bc:	d006      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x314>
 80050be:	2b40      	cmp	r3, #64	; 0x40
 80050c0:	d81f      	bhi.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d009      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x322>
 80050c6:	2b20      	cmp	r3, #32
 80050c8:	d011      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x336>
 80050ca:	e01a      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80050cc:	4b10      	ldr	r3, [pc, #64]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80050ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d0:	4a0f      	ldr	r2, [pc, #60]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80050d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050d6:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80050d8:	e01d      	b.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80050da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80050de:	3308      	adds	r3, #8
 80050e0:	4618      	mov	r0, r3
 80050e2:	f002 f9d1 	bl	8007488 <RCCEx_PLL2_Config>
 80050e6:	4603      	mov	r3, r0
 80050e8:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 80050ec:	e013      	b.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80050ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80050f2:	332c      	adds	r3, #44	; 0x2c
 80050f4:	4618      	mov	r0, r3
 80050f6:	f002 fa5f 	bl	80075b8 <RCCEx_PLL3_Config>
 80050fa:	4603      	mov	r3, r0
 80050fc:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005100:	e009      	b.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8005108:	e005      	b.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 800510a:	bf00      	nop
 800510c:	e003      	b.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800510e:	bf00      	nop
 8005110:	46020c00 	.word	0x46020c00
        break;
 8005114:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005116:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800511a:	2b00      	cmp	r3, #0
 800511c:	d10d      	bne.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800511e:	4bb6      	ldr	r3, [pc, #728]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005120:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005124:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8005128:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800512c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005130:	4ab1      	ldr	r2, [pc, #708]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005132:	430b      	orrs	r3, r1
 8005134:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005138:	e003      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800513a:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800513e:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005142:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800514e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005150:	2300      	movs	r3, #0
 8005152:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005154:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005158:	460b      	mov	r3, r1
 800515a:	4313      	orrs	r3, r2
 800515c:	d053      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800515e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005162:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800516a:	d033      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800516c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005170:	d82c      	bhi.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005172:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005176:	d02f      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005178:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800517c:	d826      	bhi.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x414>
 800517e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005182:	d008      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005188:	d820      	bhi.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x414>
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00a      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800518e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005192:	d011      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8005194:	e01a      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005196:	4b98      	ldr	r3, [pc, #608]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519a:	4a97      	ldr	r2, [pc, #604]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800519c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051a0:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80051a2:	e01a      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80051a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80051a8:	3308      	adds	r3, #8
 80051aa:	4618      	mov	r0, r3
 80051ac:	f002 f96c 	bl	8007488 <RCCEx_PLL2_Config>
 80051b0:	4603      	mov	r3, r0
 80051b2:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 80051b6:	e010      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80051b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80051bc:	332c      	adds	r3, #44	; 0x2c
 80051be:	4618      	mov	r0, r3
 80051c0:	f002 f9fa 	bl	80075b8 <RCCEx_PLL3_Config>
 80051c4:	4603      	mov	r3, r0
 80051c6:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 80051ca:	e006      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 80051d2:	e002      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 80051d4:	bf00      	nop
 80051d6:	e000      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 80051d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051da:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d10d      	bne.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80051e2:	4b85      	ldr	r3, [pc, #532]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80051e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80051e8:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80051ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80051f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051f4:	4a80      	ldr	r2, [pc, #512]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80051f6:	430b      	orrs	r3, r1
 80051f8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80051fc:	e003      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051fe:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005202:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005206:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800520a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800520e:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005212:	663b      	str	r3, [r7, #96]	; 0x60
 8005214:	2300      	movs	r3, #0
 8005216:	667b      	str	r3, [r7, #100]	; 0x64
 8005218:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800521c:	460b      	mov	r3, r1
 800521e:	4313      	orrs	r3, r2
 8005220:	d046      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005222:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005226:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800522a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800522e:	d028      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005230:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005234:	d821      	bhi.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005236:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800523a:	d022      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800523c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005240:	d81b      	bhi.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005242:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005246:	d01c      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005248:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800524c:	d815      	bhi.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800524e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005252:	d008      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8005254:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005258:	d80f      	bhi.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800525a:	2b00      	cmp	r3, #0
 800525c:	d011      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800525e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005262:	d00e      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005264:	e009      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005266:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800526a:	3308      	adds	r3, #8
 800526c:	4618      	mov	r0, r3
 800526e:	f002 f90b 	bl	8007488 <RCCEx_PLL2_Config>
 8005272:	4603      	mov	r3, r0
 8005274:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8005278:	e004      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8005280:	e000      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 8005282:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005284:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10d      	bne.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800528c:	4b5a      	ldr	r3, [pc, #360]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800528e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005292:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005296:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800529a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800529e:	4a56      	ldr	r2, [pc, #344]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80052a0:	430b      	orrs	r3, r1
 80052a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80052a6:	e003      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a8:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80052ac:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80052b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80052b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b8:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80052bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80052be:	2300      	movs	r3, #0
 80052c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052c2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80052c6:	460b      	mov	r3, r1
 80052c8:	4313      	orrs	r3, r2
 80052ca:	d03f      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80052cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80052d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d4:	2b04      	cmp	r3, #4
 80052d6:	d81e      	bhi.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 80052d8:	a201      	add	r2, pc, #4	; (adr r2, 80052e0 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 80052da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052de:	bf00      	nop
 80052e0:	0800531f 	.word	0x0800531f
 80052e4:	080052f5 	.word	0x080052f5
 80052e8:	08005303 	.word	0x08005303
 80052ec:	0800531f 	.word	0x0800531f
 80052f0:	0800531f 	.word	0x0800531f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80052f4:	4b40      	ldr	r3, [pc, #256]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80052f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f8:	4a3f      	ldr	r2, [pc, #252]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80052fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052fe:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005300:	e00e      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005302:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005306:	332c      	adds	r3, #44	; 0x2c
 8005308:	4618      	mov	r0, r3
 800530a:	f002 f955 	bl	80075b8 <RCCEx_PLL3_Config>
 800530e:	4603      	mov	r3, r0
 8005310:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8005314:	e004      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 800531c:	e000      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 800531e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005320:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005324:	2b00      	cmp	r3, #0
 8005326:	d10d      	bne.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8005328:	4b33      	ldr	r3, [pc, #204]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800532a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800532e:	f023 0107 	bic.w	r1, r3, #7
 8005332:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800533a:	4a2f      	ldr	r2, [pc, #188]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800533c:	430b      	orrs	r3, r1
 800533e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005342:	e003      	b.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005344:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005348:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800534c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005354:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005358:	653b      	str	r3, [r7, #80]	; 0x50
 800535a:	2300      	movs	r3, #0
 800535c:	657b      	str	r3, [r7, #84]	; 0x54
 800535e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005362:	460b      	mov	r3, r1
 8005364:	4313      	orrs	r3, r2
 8005366:	d04d      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8005368:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800536c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005370:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005374:	d028      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x610>
 8005376:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800537a:	d821      	bhi.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800537c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005380:	d024      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x614>
 8005382:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005386:	d81b      	bhi.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005388:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800538c:	d00e      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 800538e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005392:	d815      	bhi.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005394:	2b00      	cmp	r3, #0
 8005396:	d01b      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8005398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800539c:	d110      	bne.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800539e:	4b16      	ldr	r3, [pc, #88]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80053a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a2:	4a15      	ldr	r2, [pc, #84]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80053a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053a8:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80053aa:	e012      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80053ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80053b0:	332c      	adds	r3, #44	; 0x2c
 80053b2:	4618      	mov	r0, r3
 80053b4:	f002 f900 	bl	80075b8 <RCCEx_PLL3_Config>
 80053b8:	4603      	mov	r3, r0
 80053ba:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 80053be:	e008      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 80053c6:	e004      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80053c8:	bf00      	nop
 80053ca:	e002      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80053cc:	bf00      	nop
 80053ce:	e000      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80053d0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80053d2:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d110      	bne.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80053da:	4b07      	ldr	r3, [pc, #28]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80053dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80053e0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80053e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80053e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053ec:	4a02      	ldr	r2, [pc, #8]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80053ee:	430b      	orrs	r3, r1
 80053f0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80053f4:	e006      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80053f6:	bf00      	nop
 80053f8:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053fc:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005400:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005404:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540c:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005410:	64bb      	str	r3, [r7, #72]	; 0x48
 8005412:	2300      	movs	r3, #0
 8005414:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005416:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800541a:	460b      	mov	r3, r1
 800541c:	4313      	orrs	r3, r2
 800541e:	f000 80b5 	beq.w	800558c <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005422:	2300      	movs	r3, #0
 8005424:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005428:	4b9d      	ldr	r3, [pc, #628]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800542a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800542e:	f003 0304 	and.w	r3, r3, #4
 8005432:	2b00      	cmp	r3, #0
 8005434:	d113      	bne.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005436:	4b9a      	ldr	r3, [pc, #616]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005438:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800543c:	4a98      	ldr	r2, [pc, #608]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800543e:	f043 0304 	orr.w	r3, r3, #4
 8005442:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005446:	4b96      	ldr	r3, [pc, #600]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005448:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800544c:	f003 0304 	and.w	r3, r3, #4
 8005450:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005454:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
      pwrclkchanged = SET;
 8005458:	2301      	movs	r3, #1
 800545a:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800545e:	4b91      	ldr	r3, [pc, #580]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005462:	4a90      	ldr	r2, [pc, #576]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005464:	f043 0301 	orr.w	r3, r3, #1
 8005468:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800546a:	f7fc fa41 	bl	80018f0 <HAL_GetTick>
 800546e:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005472:	e00b      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005474:	f7fc fa3c 	bl	80018f0 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	2b02      	cmp	r3, #2
 8005482:	d903      	bls.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 800548a:	e005      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800548c:	4b85      	ldr	r3, [pc, #532]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800548e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005490:	f003 0301 	and.w	r3, r3, #1
 8005494:	2b00      	cmp	r3, #0
 8005496:	d0ed      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8005498:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800549c:	2b00      	cmp	r3, #0
 800549e:	d165      	bne.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80054a0:	4b7f      	ldr	r3, [pc, #508]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80054a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80054ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d023      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x746>
 80054b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80054ba:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80054be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d01b      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80054c6:	4b76      	ldr	r3, [pc, #472]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80054c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80054d4:	4b72      	ldr	r3, [pc, #456]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80054d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054da:	4a71      	ldr	r2, [pc, #452]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80054dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054e0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054e4:	4b6e      	ldr	r3, [pc, #440]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80054e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054ea:	4a6d      	ldr	r2, [pc, #436]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80054ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054f0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80054f4:	4a6a      	ldr	r2, [pc, #424]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80054f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054fa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80054fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	2b00      	cmp	r3, #0
 8005508:	d019      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800550a:	f7fc f9f1 	bl	80018f0 <HAL_GetTick>
 800550e:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005512:	e00d      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005514:	f7fc f9ec 	bl	80018f0 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800551e:	1ad2      	subs	r2, r2, r3
 8005520:	f241 3388 	movw	r3, #5000	; 0x1388
 8005524:	429a      	cmp	r2, r3
 8005526:	d903      	bls.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
            break;
 800552e:	e006      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005530:	4b5b      	ldr	r3, [pc, #364]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005532:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005536:	f003 0302 	and.w	r3, r3, #2
 800553a:	2b00      	cmp	r3, #0
 800553c:	d0ea      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 800553e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10d      	bne.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005546:	4b56      	ldr	r3, [pc, #344]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005548:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800554c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005550:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005554:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005558:	4a51      	ldr	r2, [pc, #324]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800555a:	430b      	orrs	r3, r1
 800555c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005560:	e008      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005562:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005566:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 800556a:	e003      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800556c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005570:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005574:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 8005578:	2b01      	cmp	r3, #1
 800557a:	d107      	bne.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800557c:	4b48      	ldr	r3, [pc, #288]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800557e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005582:	4a47      	ldr	r2, [pc, #284]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005584:	f023 0304 	bic.w	r3, r3, #4
 8005588:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800558c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005594:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005598:	643b      	str	r3, [r7, #64]	; 0x40
 800559a:	2300      	movs	r3, #0
 800559c:	647b      	str	r3, [r7, #68]	; 0x44
 800559e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80055a2:	460b      	mov	r3, r1
 80055a4:	4313      	orrs	r3, r2
 80055a6:	d042      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80055a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80055ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055b0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80055b4:	d022      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x844>
 80055b6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80055ba:	d81b      	bhi.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80055bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055c0:	d011      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 80055c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055c6:	d815      	bhi.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d019      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x848>
 80055cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055d0:	d110      	bne.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80055d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80055d6:	3308      	adds	r3, #8
 80055d8:	4618      	mov	r0, r3
 80055da:	f001 ff55 	bl	8007488 <RCCEx_PLL2_Config>
 80055de:	4603      	mov	r3, r0
 80055e0:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 80055e4:	e00d      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055e6:	4b2e      	ldr	r3, [pc, #184]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80055e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ea:	4a2d      	ldr	r2, [pc, #180]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80055ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055f0:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80055f2:	e006      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 80055fa:	e002      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 80055fc:	bf00      	nop
 80055fe:	e000      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8005600:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005602:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005606:	2b00      	cmp	r3, #0
 8005608:	d10d      	bne.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800560a:	4b25      	ldr	r3, [pc, #148]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800560c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005610:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005614:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005618:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800561c:	4a20      	ldr	r2, [pc, #128]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800561e:	430b      	orrs	r3, r1
 8005620:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005624:	e003      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005626:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800562a:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800562e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005636:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800563a:	63bb      	str	r3, [r7, #56]	; 0x38
 800563c:	2300      	movs	r3, #0
 800563e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005640:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005644:	460b      	mov	r3, r1
 8005646:	4313      	orrs	r3, r2
 8005648:	d032      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800564a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800564e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005652:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005656:	d00b      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8005658:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800565c:	d804      	bhi.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 800565e:	2b00      	cmp	r3, #0
 8005660:	d008      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8005662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005666:	d007      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 800566e:	e004      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8005670:	bf00      	nop
 8005672:	e002      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8005674:	bf00      	nop
 8005676:	e000      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8005678:	bf00      	nop
    }
    if (ret == HAL_OK)
 800567a:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800567e:	2b00      	cmp	r3, #0
 8005680:	d112      	bne.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005682:	4b07      	ldr	r3, [pc, #28]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005684:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005688:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800568c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005690:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005694:	4a02      	ldr	r2, [pc, #8]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005696:	430b      	orrs	r3, r1
 8005698:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800569c:	e008      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 800569e:	bf00      	nop
 80056a0:	46020c00 	.word	0x46020c00
 80056a4:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056a8:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80056ac:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80056b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80056b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b8:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80056bc:	633b      	str	r3, [r7, #48]	; 0x30
 80056be:	2300      	movs	r3, #0
 80056c0:	637b      	str	r3, [r7, #52]	; 0x34
 80056c2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80056c6:	460b      	mov	r3, r1
 80056c8:	4313      	orrs	r3, r2
 80056ca:	d019      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80056cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80056d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80056d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056d8:	d105      	bne.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80056da:	4b88      	ldr	r3, [pc, #544]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80056dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056de:	4a87      	ldr	r2, [pc, #540]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80056e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056e4:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80056e6:	4b85      	ldr	r3, [pc, #532]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80056e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80056ec:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80056f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80056f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80056f8:	4a80      	ldr	r2, [pc, #512]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80056fa:	430b      	orrs	r3, r1
 80056fc:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005700:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005708:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800570c:	62bb      	str	r3, [r7, #40]	; 0x28
 800570e:	2300      	movs	r3, #0
 8005710:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005712:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005716:	460b      	mov	r3, r1
 8005718:	4313      	orrs	r3, r2
 800571a:	d00c      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800571c:	4b77      	ldr	r3, [pc, #476]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800571e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005722:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005726:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800572a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800572e:	4973      	ldr	r1, [pc, #460]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005730:	4313      	orrs	r3, r2
 8005732:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005736:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800573a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573e:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005742:	623b      	str	r3, [r7, #32]
 8005744:	2300      	movs	r3, #0
 8005746:	627b      	str	r3, [r7, #36]	; 0x24
 8005748:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800574c:	460b      	mov	r3, r1
 800574e:	4313      	orrs	r3, r2
 8005750:	d00c      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005752:	4b6a      	ldr	r3, [pc, #424]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005758:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800575c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005760:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005764:	4965      	ldr	r1, [pc, #404]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005766:	4313      	orrs	r3, r2
 8005768:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800576c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005774:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005778:	61bb      	str	r3, [r7, #24]
 800577a:	2300      	movs	r3, #0
 800577c:	61fb      	str	r3, [r7, #28]
 800577e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005782:	460b      	mov	r3, r1
 8005784:	4313      	orrs	r3, r2
 8005786:	d00c      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005788:	4b5c      	ldr	r3, [pc, #368]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800578a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800578e:	f023 0218 	bic.w	r2, r3, #24
 8005792:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005796:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800579a:	4958      	ldr	r1, [pc, #352]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800579c:	4313      	orrs	r3, r2
 800579e:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80057a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80057a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057aa:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 80057ae:	613b      	str	r3, [r7, #16]
 80057b0:	2300      	movs	r3, #0
 80057b2:	617b      	str	r3, [r7, #20]
 80057b4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80057b8:	460b      	mov	r3, r1
 80057ba:	4313      	orrs	r3, r2
 80057bc:	d032      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80057be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80057c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80057c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057ca:	d105      	bne.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057cc:	4b4b      	ldr	r3, [pc, #300]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80057ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d0:	4a4a      	ldr	r2, [pc, #296]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80057d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057d6:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80057d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80057dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80057e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80057e4:	d108      	bne.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80057e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80057ea:	3308      	adds	r3, #8
 80057ec:	4618      	mov	r0, r3
 80057ee:	f001 fe4b 	bl	8007488 <RCCEx_PLL2_Config>
 80057f2:	4603      	mov	r3, r0
 80057f4:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
    }
    if (ret == HAL_OK)
 80057f8:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10d      	bne.n	800581c <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005800:	4b3e      	ldr	r3, [pc, #248]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005802:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005806:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800580a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800580e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005812:	493a      	ldr	r1, [pc, #232]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005814:	4313      	orrs	r3, r2
 8005816:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800581a:	e003      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800581c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005820:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8005824:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800582c:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8005830:	60bb      	str	r3, [r7, #8]
 8005832:	2300      	movs	r3, #0
 8005834:	60fb      	str	r3, [r7, #12]
 8005836:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800583a:	460b      	mov	r3, r1
 800583c:	4313      	orrs	r3, r2
 800583e:	d03a      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8005840:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005844:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005848:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800584c:	d00e      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800584e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005852:	d815      	bhi.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8005854:	2b00      	cmp	r3, #0
 8005856:	d017      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8005858:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800585c:	d110      	bne.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800585e:	4b27      	ldr	r3, [pc, #156]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005862:	4a26      	ldr	r2, [pc, #152]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005868:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800586a:	e00e      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800586c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005870:	3308      	adds	r3, #8
 8005872:	4618      	mov	r0, r3
 8005874:	f001 fe08 	bl	8007488 <RCCEx_PLL2_Config>
 8005878:	4603      	mov	r3, r0
 800587a:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800587e:	e004      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8005886:	e000      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 8005888:	bf00      	nop
    }
    if (ret == HAL_OK)
 800588a:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800588e:	2b00      	cmp	r3, #0
 8005890:	d10d      	bne.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8005892:	4b1a      	ldr	r3, [pc, #104]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005898:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800589c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80058a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058a4:	4915      	ldr	r1, [pc, #84]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80058ac:	e003      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ae:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80058b2:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80058b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80058ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058be:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80058c2:	603b      	str	r3, [r7, #0]
 80058c4:	2300      	movs	r3, #0
 80058c6:	607b      	str	r3, [r7, #4]
 80058c8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80058cc:	460b      	mov	r3, r1
 80058ce:	4313      	orrs	r3, r2
 80058d0:	d00c      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80058d2:	4b0a      	ldr	r3, [pc, #40]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80058d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80058d8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80058dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80058e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80058e4:	4905      	ldr	r1, [pc, #20]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80058ec:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	37e0      	adds	r7, #224	; 0xe0
 80058f4:	46bd      	mov	sp, r7
 80058f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058fa:	bf00      	nop
 80058fc:	46020c00 	.word	0x46020c00

08005900 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005900:	b480      	push	{r7}
 8005902:	b089      	sub	sp, #36	; 0x24
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005908:	4ba6      	ldr	r3, [pc, #664]	; (8005ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800590a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800590c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005910:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005912:	4ba4      	ldr	r3, [pc, #656]	; (8005ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005916:	f003 0303 	and.w	r3, r3, #3
 800591a:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800591c:	4ba1      	ldr	r3, [pc, #644]	; (8005ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800591e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005920:	0a1b      	lsrs	r3, r3, #8
 8005922:	f003 030f 	and.w	r3, r3, #15
 8005926:	3301      	adds	r3, #1
 8005928:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800592a:	4b9e      	ldr	r3, [pc, #632]	; (8005ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800592c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800592e:	091b      	lsrs	r3, r3, #4
 8005930:	f003 0301 	and.w	r3, r3, #1
 8005934:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005936:	4b9b      	ldr	r3, [pc, #620]	; (8005ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593a:	08db      	lsrs	r3, r3, #3
 800593c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	fb02 f303 	mul.w	r3, r2, r3
 8005946:	ee07 3a90 	vmov	s15, r3
 800594a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800594e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	2b03      	cmp	r3, #3
 8005956:	d062      	beq.n	8005a1e <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	2b03      	cmp	r3, #3
 800595c:	f200 8081 	bhi.w	8005a62 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d024      	beq.n	80059b0 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	2b02      	cmp	r3, #2
 800596a:	d17a      	bne.n	8005a62 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	ee07 3a90 	vmov	s15, r3
 8005972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005976:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8005ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800597a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800597e:	4b89      	ldr	r3, [pc, #548]	; (8005ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005986:	ee07 3a90 	vmov	s15, r3
 800598a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800598e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005992:	eddf 5a86 	vldr	s11, [pc, #536]	; 8005bac <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005996:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800599a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800599e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80059a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059ae:	e08f      	b.n	8005ad0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80059b0:	4b7c      	ldr	r3, [pc, #496]	; (8005ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d005      	beq.n	80059c8 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80059bc:	4b79      	ldr	r3, [pc, #484]	; (8005ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	0f1b      	lsrs	r3, r3, #28
 80059c2:	f003 030f 	and.w	r3, r3, #15
 80059c6:	e006      	b.n	80059d6 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 80059c8:	4b76      	ldr	r3, [pc, #472]	; (8005ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80059ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80059ce:	041b      	lsls	r3, r3, #16
 80059d0:	0f1b      	lsrs	r3, r3, #28
 80059d2:	f003 030f 	and.w	r3, r3, #15
 80059d6:	4a76      	ldr	r2, [pc, #472]	; (8005bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80059d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059dc:	ee07 3a90 	vmov	s15, r3
 80059e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	ee07 3a90 	vmov	s15, r3
 80059ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	ee07 3a90 	vmov	s15, r3
 80059f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a00:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8005bac <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005a04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a10:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005a14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a18:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a1c:	e058      	b.n	8005ad0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	ee07 3a90 	vmov	s15, r3
 8005a24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a28:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8005a2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a30:	4b5c      	ldr	r3, [pc, #368]	; (8005ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a38:	ee07 3a90 	vmov	s15, r3
 8005a3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a40:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a44:	eddf 5a59 	vldr	s11, [pc, #356]	; 8005bac <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005a48:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005a4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a54:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005a58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a5c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a60:	e036      	b.n	8005ad0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005a62:	4b50      	ldr	r3, [pc, #320]	; (8005ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d005      	beq.n	8005a7a <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8005a6e:	4b4d      	ldr	r3, [pc, #308]	; (8005ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	0f1b      	lsrs	r3, r3, #28
 8005a74:	f003 030f 	and.w	r3, r3, #15
 8005a78:	e006      	b.n	8005a88 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8005a7a:	4b4a      	ldr	r3, [pc, #296]	; (8005ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005a7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a80:	041b      	lsls	r3, r3, #16
 8005a82:	0f1b      	lsrs	r3, r3, #28
 8005a84:	f003 030f 	and.w	r3, r3, #15
 8005a88:	4a49      	ldr	r2, [pc, #292]	; (8005bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8005a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a8e:	ee07 3a90 	vmov	s15, r3
 8005a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	ee07 3a90 	vmov	s15, r3
 8005a9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aa0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	ee07 3a90 	vmov	s15, r3
 8005aaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aae:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ab2:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005bac <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005ab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005abe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ace:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005ad0:	4b34      	ldr	r3, [pc, #208]	; (8005ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d017      	beq.n	8005b0c <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005adc:	4b31      	ldr	r3, [pc, #196]	; (8005ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae0:	0a5b      	lsrs	r3, r3, #9
 8005ae2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ae6:	ee07 3a90 	vmov	s15, r3
 8005aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8005aee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005af2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005af6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005afa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005afe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b02:	ee17 2a90 	vmov	r2, s15
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	601a      	str	r2, [r3, #0]
 8005b0a:	e002      	b.n	8005b12 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005b12:	4b24      	ldr	r3, [pc, #144]	; (8005ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d017      	beq.n	8005b4e <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005b1e:	4b21      	ldr	r3, [pc, #132]	; (8005ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b22:	0c1b      	lsrs	r3, r3, #16
 8005b24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b28:	ee07 3a90 	vmov	s15, r3
 8005b2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005b30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b34:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005b38:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b44:	ee17 2a90 	vmov	r2, s15
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	605a      	str	r2, [r3, #4]
 8005b4c:	e002      	b.n	8005b54 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005b54:	4b13      	ldr	r3, [pc, #76]	; (8005ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d017      	beq.n	8005b90 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005b60:	4b10      	ldr	r3, [pc, #64]	; (8005ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b64:	0e1b      	lsrs	r3, r3, #24
 8005b66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b6a:	ee07 3a90 	vmov	s15, r3
 8005b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8005b72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b76:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005b7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b86:	ee17 2a90 	vmov	r2, s15
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005b8e:	e002      	b.n	8005b96 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	609a      	str	r2, [r3, #8]
}
 8005b96:	bf00      	nop
 8005b98:	3724      	adds	r7, #36	; 0x24
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	46020c00 	.word	0x46020c00
 8005ba8:	4b742400 	.word	0x4b742400
 8005bac:	46000000 	.word	0x46000000
 8005bb0:	0800ab2c 	.word	0x0800ab2c

08005bb4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b089      	sub	sp, #36	; 0x24
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005bbc:	4ba6      	ldr	r3, [pc, #664]	; (8005e58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bc4:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005bc6:	4ba4      	ldr	r3, [pc, #656]	; (8005e58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bca:	f003 0303 	and.w	r3, r3, #3
 8005bce:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8005bd0:	4ba1      	ldr	r3, [pc, #644]	; (8005e58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd4:	0a1b      	lsrs	r3, r3, #8
 8005bd6:	f003 030f 	and.w	r3, r3, #15
 8005bda:	3301      	adds	r3, #1
 8005bdc:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8005bde:	4b9e      	ldr	r3, [pc, #632]	; (8005e58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be2:	091b      	lsrs	r3, r3, #4
 8005be4:	f003 0301 	and.w	r3, r3, #1
 8005be8:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005bea:	4b9b      	ldr	r3, [pc, #620]	; (8005e58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bee:	08db      	lsrs	r3, r3, #3
 8005bf0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	fb02 f303 	mul.w	r3, r2, r3
 8005bfa:	ee07 3a90 	vmov	s15, r3
 8005bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c02:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	2b03      	cmp	r3, #3
 8005c0a:	d062      	beq.n	8005cd2 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	2b03      	cmp	r3, #3
 8005c10:	f200 8081 	bhi.w	8005d16 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d024      	beq.n	8005c64 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d17a      	bne.n	8005d16 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	ee07 3a90 	vmov	s15, r3
 8005c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c2a:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8005e5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005c2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c32:	4b89      	ldr	r3, [pc, #548]	; (8005e58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c3a:	ee07 3a90 	vmov	s15, r3
 8005c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c42:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c46:	eddf 5a86 	vldr	s11, [pc, #536]	; 8005e60 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005c4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005c4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c56:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c62:	e08f      	b.n	8005d84 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005c64:	4b7c      	ldr	r3, [pc, #496]	; (8005e58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d005      	beq.n	8005c7c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8005c70:	4b79      	ldr	r3, [pc, #484]	; (8005e58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	0f1b      	lsrs	r3, r3, #28
 8005c76:	f003 030f 	and.w	r3, r3, #15
 8005c7a:	e006      	b.n	8005c8a <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8005c7c:	4b76      	ldr	r3, [pc, #472]	; (8005e58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005c7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005c82:	041b      	lsls	r3, r3, #16
 8005c84:	0f1b      	lsrs	r3, r3, #28
 8005c86:	f003 030f 	and.w	r3, r3, #15
 8005c8a:	4a76      	ldr	r2, [pc, #472]	; (8005e64 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c90:	ee07 3a90 	vmov	s15, r3
 8005c94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	ee07 3a90 	vmov	s15, r3
 8005c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	ee07 3a90 	vmov	s15, r3
 8005cac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cb0:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cb4:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8005e60 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005cb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005cc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ccc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cd0:	e058      	b.n	8005d84 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	ee07 3a90 	vmov	s15, r3
 8005cd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cdc:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005e5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005ce0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ce4:	4b5c      	ldr	r3, [pc, #368]	; (8005e58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cec:	ee07 3a90 	vmov	s15, r3
 8005cf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005cf4:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cf8:	eddf 5a59 	vldr	s11, [pc, #356]	; 8005e60 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005cfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005d00:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d08:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d10:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d14:	e036      	b.n	8005d84 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005d16:	4b50      	ldr	r3, [pc, #320]	; (8005e58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d005      	beq.n	8005d2e <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8005d22:	4b4d      	ldr	r3, [pc, #308]	; (8005e58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	0f1b      	lsrs	r3, r3, #28
 8005d28:	f003 030f 	and.w	r3, r3, #15
 8005d2c:	e006      	b.n	8005d3c <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8005d2e:	4b4a      	ldr	r3, [pc, #296]	; (8005e58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005d30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d34:	041b      	lsls	r3, r3, #16
 8005d36:	0f1b      	lsrs	r3, r3, #28
 8005d38:	f003 030f 	and.w	r3, r3, #15
 8005d3c:	4a49      	ldr	r2, [pc, #292]	; (8005e64 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d42:	ee07 3a90 	vmov	s15, r3
 8005d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	ee07 3a90 	vmov	s15, r3
 8005d50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	ee07 3a90 	vmov	s15, r3
 8005d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d62:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d66:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005e60 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d82:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005d84:	4b34      	ldr	r3, [pc, #208]	; (8005e58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d017      	beq.n	8005dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005d90:	4b31      	ldr	r3, [pc, #196]	; (8005e58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d94:	0a5b      	lsrs	r3, r3, #9
 8005d96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d9a:	ee07 3a90 	vmov	s15, r3
 8005d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8005da2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005da6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005daa:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005db2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005db6:	ee17 2a90 	vmov	r2, s15
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	601a      	str	r2, [r3, #0]
 8005dbe:	e002      	b.n	8005dc6 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005dc6:	4b24      	ldr	r3, [pc, #144]	; (8005e58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d017      	beq.n	8005e02 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005dd2:	4b21      	ldr	r3, [pc, #132]	; (8005e58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd6:	0c1b      	lsrs	r3, r3, #16
 8005dd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ddc:	ee07 3a90 	vmov	s15, r3
 8005de0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005de4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005de8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005dec:	edd7 6a07 	vldr	s13, [r7, #28]
 8005df0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005df4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005df8:	ee17 2a90 	vmov	r2, s15
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	605a      	str	r2, [r3, #4]
 8005e00:	e002      	b.n	8005e08 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005e08:	4b13      	ldr	r3, [pc, #76]	; (8005e58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d017      	beq.n	8005e44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005e14:	4b10      	ldr	r3, [pc, #64]	; (8005e58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e18:	0e1b      	lsrs	r3, r3, #24
 8005e1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e1e:	ee07 3a90 	vmov	s15, r3
 8005e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8005e26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e2a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005e2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e3a:	ee17 2a90 	vmov	r2, s15
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005e42:	e002      	b.n	8005e4a <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	609a      	str	r2, [r3, #8]
}
 8005e4a:	bf00      	nop
 8005e4c:	3724      	adds	r7, #36	; 0x24
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	46020c00 	.word	0x46020c00
 8005e5c:	4b742400 	.word	0x4b742400
 8005e60:	46000000 	.word	0x46000000
 8005e64:	0800ab2c 	.word	0x0800ab2c

08005e68 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b089      	sub	sp, #36	; 0x24
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005e70:	4ba6      	ldr	r3, [pc, #664]	; (800610c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e78:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005e7a:	4ba4      	ldr	r3, [pc, #656]	; (800610c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7e:	f003 0303 	and.w	r3, r3, #3
 8005e82:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8005e84:	4ba1      	ldr	r3, [pc, #644]	; (800610c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e88:	0a1b      	lsrs	r3, r3, #8
 8005e8a:	f003 030f 	and.w	r3, r3, #15
 8005e8e:	3301      	adds	r3, #1
 8005e90:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8005e92:	4b9e      	ldr	r3, [pc, #632]	; (800610c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e96:	091b      	lsrs	r3, r3, #4
 8005e98:	f003 0301 	and.w	r3, r3, #1
 8005e9c:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005e9e:	4b9b      	ldr	r3, [pc, #620]	; (800610c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ea2:	08db      	lsrs	r3, r3, #3
 8005ea4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	fb02 f303 	mul.w	r3, r2, r3
 8005eae:	ee07 3a90 	vmov	s15, r3
 8005eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eb6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	2b03      	cmp	r3, #3
 8005ebe:	d062      	beq.n	8005f86 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	2b03      	cmp	r3, #3
 8005ec4:	f200 8081 	bhi.w	8005fca <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d024      	beq.n	8005f18 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d17a      	bne.n	8005fca <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	ee07 3a90 	vmov	s15, r3
 8005eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ede:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8006110 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ee6:	4b89      	ldr	r3, [pc, #548]	; (800610c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eee:	ee07 3a90 	vmov	s15, r3
 8005ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ef6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005efa:	eddf 5a86 	vldr	s11, [pc, #536]	; 8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f12:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8005f16:	e08f      	b.n	8006038 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005f18:	4b7c      	ldr	r3, [pc, #496]	; (800610c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d005      	beq.n	8005f30 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8005f24:	4b79      	ldr	r3, [pc, #484]	; (800610c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	0f1b      	lsrs	r3, r3, #28
 8005f2a:	f003 030f 	and.w	r3, r3, #15
 8005f2e:	e006      	b.n	8005f3e <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8005f30:	4b76      	ldr	r3, [pc, #472]	; (800610c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005f32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f36:	041b      	lsls	r3, r3, #16
 8005f38:	0f1b      	lsrs	r3, r3, #28
 8005f3a:	f003 030f 	and.w	r3, r3, #15
 8005f3e:	4a76      	ldr	r2, [pc, #472]	; (8006118 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f44:	ee07 3a90 	vmov	s15, r3
 8005f48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	ee07 3a90 	vmov	s15, r3
 8005f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	ee07 3a90 	vmov	s15, r3
 8005f60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f64:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f68:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005f6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f78:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005f7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f80:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f84:	e058      	b.n	8006038 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	ee07 3a90 	vmov	s15, r3
 8005f8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f90:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006110 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005f94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f98:	4b5c      	ldr	r3, [pc, #368]	; (800610c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fa0:	ee07 3a90 	vmov	s15, r3
 8005fa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005fa8:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fac:	eddf 5a59 	vldr	s11, [pc, #356]	; 8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005fb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005fb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005fb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fc4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005fc8:	e036      	b.n	8006038 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005fca:	4b50      	ldr	r3, [pc, #320]	; (800610c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d005      	beq.n	8005fe2 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8005fd6:	4b4d      	ldr	r3, [pc, #308]	; (800610c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	0f1b      	lsrs	r3, r3, #28
 8005fdc:	f003 030f 	and.w	r3, r3, #15
 8005fe0:	e006      	b.n	8005ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8005fe2:	4b4a      	ldr	r3, [pc, #296]	; (800610c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005fe4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005fe8:	041b      	lsls	r3, r3, #16
 8005fea:	0f1b      	lsrs	r3, r3, #28
 8005fec:	f003 030f 	and.w	r3, r3, #15
 8005ff0:	4a49      	ldr	r2, [pc, #292]	; (8006118 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ff6:	ee07 3a90 	vmov	s15, r3
 8005ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	ee07 3a90 	vmov	s15, r3
 8006004:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006008:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	ee07 3a90 	vmov	s15, r3
 8006012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006016:	ed97 6a02 	vldr	s12, [r7, #8]
 800601a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800601e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006026:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800602a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800602e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006032:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006036:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8006038:	4b34      	ldr	r3, [pc, #208]	; (800610c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800603a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800603c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d017      	beq.n	8006074 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006044:	4b31      	ldr	r3, [pc, #196]	; (800610c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006048:	0a5b      	lsrs	r3, r3, #9
 800604a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800604e:	ee07 3a90 	vmov	s15, r3
 8006052:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8006056:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800605a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800605e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006062:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006066:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800606a:	ee17 2a90 	vmov	r2, s15
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	601a      	str	r2, [r3, #0]
 8006072:	e002      	b.n	800607a <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800607a:	4b24      	ldr	r3, [pc, #144]	; (800610c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800607c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006082:	2b00      	cmp	r3, #0
 8006084:	d017      	beq.n	80060b6 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006086:	4b21      	ldr	r3, [pc, #132]	; (800610c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800608a:	0c1b      	lsrs	r3, r3, #16
 800608c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006090:	ee07 3a90 	vmov	s15, r3
 8006094:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8006098:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800609c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80060a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80060a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060ac:	ee17 2a90 	vmov	r2, s15
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	605a      	str	r2, [r3, #4]
 80060b4:	e002      	b.n	80060bc <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80060bc:	4b13      	ldr	r3, [pc, #76]	; (800610c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80060be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d017      	beq.n	80060f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80060c8:	4b10      	ldr	r3, [pc, #64]	; (800610c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80060ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060cc:	0e1b      	lsrs	r3, r3, #24
 80060ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060d2:	ee07 3a90 	vmov	s15, r3
 80060d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80060da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060de:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80060e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80060e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060ee:	ee17 2a90 	vmov	r2, s15
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80060f6:	e002      	b.n	80060fe <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	609a      	str	r2, [r3, #8]
}
 80060fe:	bf00      	nop
 8006100:	3724      	adds	r7, #36	; 0x24
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	46020c00 	.word	0x46020c00
 8006110:	4b742400 	.word	0x4b742400
 8006114:	46000000 	.word	0x46000000
 8006118:	0800ab2c 	.word	0x0800ab2c

0800611c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b08e      	sub	sp, #56	; 0x38
 8006120:	af00      	add	r7, sp, #0
 8006122:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006126:	e9d7 2300 	ldrd	r2, r3, [r7]
 800612a:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 800612e:	430b      	orrs	r3, r1
 8006130:	d145      	bne.n	80061be <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006132:	4baa      	ldr	r3, [pc, #680]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006134:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006138:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800613c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800613e:	4ba7      	ldr	r3, [pc, #668]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006140:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006144:	f003 0302 	and.w	r3, r3, #2
 8006148:	2b02      	cmp	r3, #2
 800614a:	d108      	bne.n	800615e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800614c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006152:	d104      	bne.n	800615e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006154:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006158:	637b      	str	r3, [r7, #52]	; 0x34
 800615a:	f001 b987 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800615e:	4b9f      	ldr	r3, [pc, #636]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006160:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006164:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006168:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800616c:	d114      	bne.n	8006198 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800616e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006174:	d110      	bne.n	8006198 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006176:	4b99      	ldr	r3, [pc, #612]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006178:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800617c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006180:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006184:	d103      	bne.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8006186:	23fa      	movs	r3, #250	; 0xfa
 8006188:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800618a:	f001 b96f 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800618e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006192:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006194:	f001 b96a 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8006198:	4b90      	ldr	r3, [pc, #576]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061a4:	d107      	bne.n	80061b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80061a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061ac:	d103      	bne.n	80061b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80061ae:	4b8c      	ldr	r3, [pc, #560]	; (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80061b0:	637b      	str	r3, [r7, #52]	; 0x34
 80061b2:	f001 b95b 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80061b6:	2300      	movs	r3, #0
 80061b8:	637b      	str	r3, [r7, #52]	; 0x34
 80061ba:	f001 b957 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80061be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061c2:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80061c6:	430b      	orrs	r3, r1
 80061c8:	d151      	bne.n	800626e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80061ca:	4b84      	ldr	r3, [pc, #528]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80061cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80061d0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80061d4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80061d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d8:	2b80      	cmp	r3, #128	; 0x80
 80061da:	d035      	beq.n	8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80061dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061de:	2b80      	cmp	r3, #128	; 0x80
 80061e0:	d841      	bhi.n	8006266 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80061e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e4:	2b60      	cmp	r3, #96	; 0x60
 80061e6:	d02a      	beq.n	800623e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80061e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ea:	2b60      	cmp	r3, #96	; 0x60
 80061ec:	d83b      	bhi.n	8006266 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80061ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f0:	2b40      	cmp	r3, #64	; 0x40
 80061f2:	d009      	beq.n	8006208 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80061f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f6:	2b40      	cmp	r3, #64	; 0x40
 80061f8:	d835      	bhi.n	8006266 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80061fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00c      	beq.n	800621a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8006200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006202:	2b20      	cmp	r3, #32
 8006204:	d012      	beq.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006206:	e02e      	b.n	8006266 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006208:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800620c:	4618      	mov	r0, r3
 800620e:	f7ff fb77 	bl	8005900 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006214:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006216:	f001 b929 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800621a:	f107 0318 	add.w	r3, r7, #24
 800621e:	4618      	mov	r0, r3
 8006220:	f7ff fcc8 	bl	8005bb4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006228:	f001 b920 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800622c:	f107 030c 	add.w	r3, r7, #12
 8006230:	4618      	mov	r0, r3
 8006232:	f7ff fe19 	bl	8005e68 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800623a:	f001 b917 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800623e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006242:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006244:	f001 b912 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006248:	4b64      	ldr	r3, [pc, #400]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006254:	d103      	bne.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8006256:	4b63      	ldr	r3, [pc, #396]	; (80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8006258:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800625a:	f001 b907 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800625e:	2300      	movs	r3, #0
 8006260:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006262:	f001 b903 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 8006266:	2300      	movs	r3, #0
 8006268:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800626a:	f001 b8ff 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800626e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006272:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8006276:	430b      	orrs	r3, r1
 8006278:	d158      	bne.n	800632c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800627a:	4b58      	ldr	r3, [pc, #352]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800627c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006280:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006284:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800628c:	d03b      	beq.n	8006306 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800628e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006294:	d846      	bhi.n	8006324 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006298:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800629c:	d02e      	beq.n	80062fc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800629e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062a4:	d83e      	bhi.n	8006324 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80062a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062ac:	d00b      	beq.n	80062c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80062ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062b4:	d836      	bhi.n	8006324 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80062b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00d      	beq.n	80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80062bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062c2:	d012      	beq.n	80062ea <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80062c4:	e02e      	b.n	8006324 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80062c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7ff fb18 	bl	8005900 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80062d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80062d4:	f001 b8ca 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062d8:	f107 0318 	add.w	r3, r7, #24
 80062dc:	4618      	mov	r0, r3
 80062de:	f7ff fc69 	bl	8005bb4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80062e6:	f001 b8c1 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062ea:	f107 030c 	add.w	r3, r7, #12
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7ff fdba 	bl	8005e68 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80062f8:	f001 b8b8 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80062fc:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006300:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006302:	f001 b8b3 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006306:	4b35      	ldr	r3, [pc, #212]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800630e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006312:	d103      	bne.n	800631c <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8006314:	4b33      	ldr	r3, [pc, #204]	; (80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8006316:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006318:	f001 b8a8 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800631c:	2300      	movs	r3, #0
 800631e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006320:	f001 b8a4 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8006324:	2300      	movs	r3, #0
 8006326:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006328:	f001 b8a0 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800632c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006330:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8006334:	430b      	orrs	r3, r1
 8006336:	d16e      	bne.n	8006416 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006338:	4b28      	ldr	r3, [pc, #160]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800633a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800633e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006342:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006346:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800634a:	d034      	beq.n	80063b6 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 800634c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006352:	d85c      	bhi.n	800640e <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8006354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006356:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800635a:	d00b      	beq.n	8006374 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800635c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006362:	d854      	bhi.n	800640e <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8006364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006366:	2b00      	cmp	r3, #0
 8006368:	d016      	beq.n	8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 800636a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006370:	d009      	beq.n	8006386 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006372:	e04c      	b.n	800640e <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006378:	4618      	mov	r0, r3
 800637a:	f7ff fac1 	bl	8005900 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800637e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006380:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006382:	f001 b873 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006386:	f107 0318 	add.w	r3, r7, #24
 800638a:	4618      	mov	r0, r3
 800638c:	f7ff fc12 	bl	8005bb4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006394:	f001 b86a 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006398:	4b10      	ldr	r3, [pc, #64]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063a4:	d103      	bne.n	80063ae <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 80063a6:	4b10      	ldr	r3, [pc, #64]	; (80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80063a8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80063aa:	f001 b85f 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80063ae:	2300      	movs	r3, #0
 80063b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80063b2:	f001 b85b 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80063b6:	4b09      	ldr	r3, [pc, #36]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0320 	and.w	r3, r3, #32
 80063be:	2b20      	cmp	r3, #32
 80063c0:	d121      	bne.n	8006406 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80063c2:	4b06      	ldr	r3, [pc, #24]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00e      	beq.n	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 80063ce:	4b03      	ldr	r3, [pc, #12]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	0e1b      	lsrs	r3, r3, #24
 80063d4:	f003 030f 	and.w	r3, r3, #15
 80063d8:	e00f      	b.n	80063fa <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 80063da:	bf00      	nop
 80063dc:	46020c00 	.word	0x46020c00
 80063e0:	0007a120 	.word	0x0007a120
 80063e4:	00f42400 	.word	0x00f42400
 80063e8:	02dc6c00 	.word	0x02dc6c00
 80063ec:	4ba7      	ldr	r3, [pc, #668]	; (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80063ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80063f2:	041b      	lsls	r3, r3, #16
 80063f4:	0e1b      	lsrs	r3, r3, #24
 80063f6:	f003 030f 	and.w	r3, r3, #15
 80063fa:	4aa5      	ldr	r2, [pc, #660]	; (8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80063fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006400:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006402:	f001 b833 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006406:	2300      	movs	r3, #0
 8006408:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800640a:	f001 b82f 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 800640e:	2300      	movs	r3, #0
 8006410:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006412:	f001 b82b 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006416:	e9d7 2300 	ldrd	r2, r3, [r7]
 800641a:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 800641e:	430b      	orrs	r3, r1
 8006420:	d17f      	bne.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006422:	4b9a      	ldr	r3, [pc, #616]	; (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006424:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006428:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800642c:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800642e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006430:	2b00      	cmp	r3, #0
 8006432:	d165      	bne.n	8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006434:	4b95      	ldr	r3, [pc, #596]	; (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006436:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800643a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800643e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8006440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006442:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006446:	d034      	beq.n	80064b2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8006448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800644e:	d853      	bhi.n	80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006452:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006456:	d00b      	beq.n	8006470 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8006458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800645e:	d84b      	bhi.n	80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006462:	2b00      	cmp	r3, #0
 8006464:	d016      	beq.n	8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8006466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006468:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800646c:	d009      	beq.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800646e:	e043      	b.n	80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006470:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006474:	4618      	mov	r0, r3
 8006476:	f7ff fa43 	bl	8005900 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800647a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800647e:	f000 bff5 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006482:	f107 0318 	add.w	r3, r7, #24
 8006486:	4618      	mov	r0, r3
 8006488:	f7ff fb94 	bl	8005bb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006490:	f000 bfec 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006494:	4b7d      	ldr	r3, [pc, #500]	; (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800649c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064a0:	d103      	bne.n	80064aa <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 80064a2:	4b7c      	ldr	r3, [pc, #496]	; (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80064a4:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80064a6:	f000 bfe1 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 80064aa:	2300      	movs	r3, #0
 80064ac:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80064ae:	f000 bfdd 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80064b2:	4b76      	ldr	r3, [pc, #472]	; (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 0320 	and.w	r3, r3, #32
 80064ba:	2b20      	cmp	r3, #32
 80064bc:	d118      	bne.n	80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80064be:	4b73      	ldr	r3, [pc, #460]	; (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d005      	beq.n	80064d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 80064ca:	4b70      	ldr	r3, [pc, #448]	; (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	0e1b      	lsrs	r3, r3, #24
 80064d0:	f003 030f 	and.w	r3, r3, #15
 80064d4:	e006      	b.n	80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 80064d6:	4b6d      	ldr	r3, [pc, #436]	; (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80064d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80064dc:	041b      	lsls	r3, r3, #16
 80064de:	0e1b      	lsrs	r3, r3, #24
 80064e0:	f003 030f 	and.w	r3, r3, #15
 80064e4:	4a6a      	ldr	r2, [pc, #424]	; (8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80064e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064ea:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80064ec:	f000 bfbe 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 80064f0:	2300      	movs	r3, #0
 80064f2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80064f4:	f000 bfba 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 80064f8:	2300      	movs	r3, #0
 80064fa:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80064fc:	f000 bfb6 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8006500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006502:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006506:	d108      	bne.n	800651a <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006508:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800650c:	4618      	mov	r0, r3
 800650e:	f7ff f9f7 	bl	8005900 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006514:	637b      	str	r3, [r7, #52]	; 0x34
 8006516:	f000 bfa9 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 800651a:	2300      	movs	r3, #0
 800651c:	637b      	str	r3, [r7, #52]	; 0x34
 800651e:	f000 bfa5 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8006522:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006526:	1e51      	subs	r1, r2, #1
 8006528:	430b      	orrs	r3, r1
 800652a:	d136      	bne.n	800659a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800652c:	4b57      	ldr	r3, [pc, #348]	; (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800652e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006532:	f003 0303 	and.w	r3, r3, #3
 8006536:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653a:	2b00      	cmp	r3, #0
 800653c:	d104      	bne.n	8006548 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800653e:	f7fe fb8d 	bl	8004c5c <HAL_RCC_GetPCLK2Freq>
 8006542:	6378      	str	r0, [r7, #52]	; 0x34
 8006544:	f000 bf92 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8006548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654a:	2b01      	cmp	r3, #1
 800654c:	d104      	bne.n	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800654e:	f7fe fa55 	bl	80049fc <HAL_RCC_GetSysClockFreq>
 8006552:	6378      	str	r0, [r7, #52]	; 0x34
 8006554:	f000 bf8a 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006558:	4b4c      	ldr	r3, [pc, #304]	; (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006564:	d106      	bne.n	8006574 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 8006566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006568:	2b02      	cmp	r3, #2
 800656a:	d103      	bne.n	8006574 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 800656c:	4b4a      	ldr	r3, [pc, #296]	; (8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800656e:	637b      	str	r3, [r7, #52]	; 0x34
 8006570:	f000 bf7c 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006574:	4b45      	ldr	r3, [pc, #276]	; (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006576:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800657a:	f003 0302 	and.w	r3, r3, #2
 800657e:	2b02      	cmp	r3, #2
 8006580:	d107      	bne.n	8006592 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8006582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006584:	2b03      	cmp	r3, #3
 8006586:	d104      	bne.n	8006592 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 8006588:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800658c:	637b      	str	r3, [r7, #52]	; 0x34
 800658e:	f000 bf6d 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8006592:	2300      	movs	r3, #0
 8006594:	637b      	str	r3, [r7, #52]	; 0x34
 8006596:	f000 bf69 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800659a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800659e:	1e91      	subs	r1, r2, #2
 80065a0:	430b      	orrs	r3, r1
 80065a2:	d136      	bne.n	8006612 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80065a4:	4b39      	ldr	r3, [pc, #228]	; (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80065a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065aa:	f003 030c 	and.w	r3, r3, #12
 80065ae:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80065b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d104      	bne.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80065b6:	f7fe fb3d 	bl	8004c34 <HAL_RCC_GetPCLK1Freq>
 80065ba:	6378      	str	r0, [r7, #52]	; 0x34
 80065bc:	f000 bf56 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80065c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c2:	2b04      	cmp	r3, #4
 80065c4:	d104      	bne.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80065c6:	f7fe fa19 	bl	80049fc <HAL_RCC_GetSysClockFreq>
 80065ca:	6378      	str	r0, [r7, #52]	; 0x34
 80065cc:	f000 bf4e 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80065d0:	4b2e      	ldr	r3, [pc, #184]	; (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065dc:	d106      	bne.n	80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80065de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e0:	2b08      	cmp	r3, #8
 80065e2:	d103      	bne.n	80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 80065e4:	4b2c      	ldr	r3, [pc, #176]	; (8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80065e6:	637b      	str	r3, [r7, #52]	; 0x34
 80065e8:	f000 bf40 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80065ec:	4b27      	ldr	r3, [pc, #156]	; (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80065ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80065f2:	f003 0302 	and.w	r3, r3, #2
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d107      	bne.n	800660a <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 80065fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fc:	2b0c      	cmp	r3, #12
 80065fe:	d104      	bne.n	800660a <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 8006600:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006604:	637b      	str	r3, [r7, #52]	; 0x34
 8006606:	f000 bf31 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800660a:	2300      	movs	r3, #0
 800660c:	637b      	str	r3, [r7, #52]	; 0x34
 800660e:	f000 bf2d 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006612:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006616:	1f11      	subs	r1, r2, #4
 8006618:	430b      	orrs	r3, r1
 800661a:	d13f      	bne.n	800669c <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800661c:	4b1b      	ldr	r3, [pc, #108]	; (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800661e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006622:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006626:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662a:	2b00      	cmp	r3, #0
 800662c:	d104      	bne.n	8006638 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800662e:	f7fe fb01 	bl	8004c34 <HAL_RCC_GetPCLK1Freq>
 8006632:	6378      	str	r0, [r7, #52]	; 0x34
 8006634:	f000 bf1a 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8006638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663a:	2b10      	cmp	r3, #16
 800663c:	d104      	bne.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800663e:	f7fe f9dd 	bl	80049fc <HAL_RCC_GetSysClockFreq>
 8006642:	6378      	str	r0, [r7, #52]	; 0x34
 8006644:	f000 bf12 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006648:	4b10      	ldr	r3, [pc, #64]	; (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006650:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006654:	d106      	bne.n	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8006656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006658:	2b20      	cmp	r3, #32
 800665a:	d103      	bne.n	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 800665c:	4b0e      	ldr	r3, [pc, #56]	; (8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800665e:	637b      	str	r3, [r7, #52]	; 0x34
 8006660:	f000 bf04 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006664:	4b09      	ldr	r3, [pc, #36]	; (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006666:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800666a:	f003 0302 	and.w	r3, r3, #2
 800666e:	2b02      	cmp	r3, #2
 8006670:	d107      	bne.n	8006682 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8006672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006674:	2b30      	cmp	r3, #48	; 0x30
 8006676:	d104      	bne.n	8006682 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 8006678:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800667c:	637b      	str	r3, [r7, #52]	; 0x34
 800667e:	f000 bef5 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8006682:	2300      	movs	r3, #0
 8006684:	637b      	str	r3, [r7, #52]	; 0x34
 8006686:	f000 bef1 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800668a:	bf00      	nop
 800668c:	46020c00 	.word	0x46020c00
 8006690:	0800ab2c 	.word	0x0800ab2c
 8006694:	02dc6c00 	.word	0x02dc6c00
 8006698:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800669c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066a0:	f1a2 0108 	sub.w	r1, r2, #8
 80066a4:	430b      	orrs	r3, r1
 80066a6:	d136      	bne.n	8006716 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80066a8:	4ba4      	ldr	r3, [pc, #656]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80066aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80066ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80066b2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80066b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d104      	bne.n	80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80066ba:	f7fe fabb 	bl	8004c34 <HAL_RCC_GetPCLK1Freq>
 80066be:	6378      	str	r0, [r7, #52]	; 0x34
 80066c0:	f000 bed4 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80066c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c6:	2b40      	cmp	r3, #64	; 0x40
 80066c8:	d104      	bne.n	80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80066ca:	f7fe f997 	bl	80049fc <HAL_RCC_GetSysClockFreq>
 80066ce:	6378      	str	r0, [r7, #52]	; 0x34
 80066d0:	f000 becc 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80066d4:	4b99      	ldr	r3, [pc, #612]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066e0:	d106      	bne.n	80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 80066e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e4:	2b80      	cmp	r3, #128	; 0x80
 80066e6:	d103      	bne.n	80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 80066e8:	4b95      	ldr	r3, [pc, #596]	; (8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80066ea:	637b      	str	r3, [r7, #52]	; 0x34
 80066ec:	f000 bebe 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80066f0:	4b92      	ldr	r3, [pc, #584]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80066f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80066f6:	f003 0302 	and.w	r3, r3, #2
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d107      	bne.n	800670e <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 80066fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006700:	2bc0      	cmp	r3, #192	; 0xc0
 8006702:	d104      	bne.n	800670e <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 8006704:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006708:	637b      	str	r3, [r7, #52]	; 0x34
 800670a:	f000 beaf 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800670e:	2300      	movs	r3, #0
 8006710:	637b      	str	r3, [r7, #52]	; 0x34
 8006712:	f000 beab 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8006716:	e9d7 2300 	ldrd	r2, r3, [r7]
 800671a:	f1a2 0110 	sub.w	r1, r2, #16
 800671e:	430b      	orrs	r3, r1
 8006720:	d139      	bne.n	8006796 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006722:	4b86      	ldr	r3, [pc, #536]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006728:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800672c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800672e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006730:	2b00      	cmp	r3, #0
 8006732:	d104      	bne.n	800673e <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006734:	f7fe fa7e 	bl	8004c34 <HAL_RCC_GetPCLK1Freq>
 8006738:	6378      	str	r0, [r7, #52]	; 0x34
 800673a:	f000 be97 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800673e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006740:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006744:	d104      	bne.n	8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006746:	f7fe f959 	bl	80049fc <HAL_RCC_GetSysClockFreq>
 800674a:	6378      	str	r0, [r7, #52]	; 0x34
 800674c:	f000 be8e 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006750:	4b7a      	ldr	r3, [pc, #488]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006758:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800675c:	d107      	bne.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 800675e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006764:	d103      	bne.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 8006766:	4b76      	ldr	r3, [pc, #472]	; (8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006768:	637b      	str	r3, [r7, #52]	; 0x34
 800676a:	f000 be7f 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800676e:	4b73      	ldr	r3, [pc, #460]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006770:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006774:	f003 0302 	and.w	r3, r3, #2
 8006778:	2b02      	cmp	r3, #2
 800677a:	d108      	bne.n	800678e <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 800677c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006782:	d104      	bne.n	800678e <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 8006784:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006788:	637b      	str	r3, [r7, #52]	; 0x34
 800678a:	f000 be6f 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800678e:	2300      	movs	r3, #0
 8006790:	637b      	str	r3, [r7, #52]	; 0x34
 8006792:	f000 be6b 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8006796:	e9d7 2300 	ldrd	r2, r3, [r7]
 800679a:	f1a2 0120 	sub.w	r1, r2, #32
 800679e:	430b      	orrs	r3, r1
 80067a0:	d158      	bne.n	8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80067a2:	4b66      	ldr	r3, [pc, #408]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80067a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80067a8:	f003 0307 	and.w	r3, r3, #7
 80067ac:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80067ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d104      	bne.n	80067be <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80067b4:	f7fe fa66 	bl	8004c84 <HAL_RCC_GetPCLK3Freq>
 80067b8:	6378      	str	r0, [r7, #52]	; 0x34
 80067ba:	f000 be57 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80067be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d104      	bne.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80067c4:	f7fe f91a 	bl	80049fc <HAL_RCC_GetSysClockFreq>
 80067c8:	6378      	str	r0, [r7, #52]	; 0x34
 80067ca:	f000 be4f 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80067ce:	4b5b      	ldr	r3, [pc, #364]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067da:	d106      	bne.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 80067dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d103      	bne.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 80067e2:	4b57      	ldr	r3, [pc, #348]	; (8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80067e4:	637b      	str	r3, [r7, #52]	; 0x34
 80067e6:	f000 be41 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80067ea:	4b54      	ldr	r3, [pc, #336]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80067ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80067f0:	f003 0302 	and.w	r3, r3, #2
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d107      	bne.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 80067f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fa:	2b03      	cmp	r3, #3
 80067fc:	d104      	bne.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 80067fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006802:	637b      	str	r3, [r7, #52]	; 0x34
 8006804:	f000 be32 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8006808:	4b4c      	ldr	r3, [pc, #304]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0320 	and.w	r3, r3, #32
 8006810:	2b20      	cmp	r3, #32
 8006812:	d11b      	bne.n	800684c <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8006814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006816:	2b04      	cmp	r3, #4
 8006818:	d118      	bne.n	800684c <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800681a:	4b48      	ldr	r3, [pc, #288]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d005      	beq.n	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 8006826:	4b45      	ldr	r3, [pc, #276]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	0e1b      	lsrs	r3, r3, #24
 800682c:	f003 030f 	and.w	r3, r3, #15
 8006830:	e006      	b.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006832:	4b42      	ldr	r3, [pc, #264]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006834:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006838:	041b      	lsls	r3, r3, #16
 800683a:	0e1b      	lsrs	r3, r3, #24
 800683c:	f003 030f 	and.w	r3, r3, #15
 8006840:	4a40      	ldr	r2, [pc, #256]	; (8006944 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8006842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006846:	637b      	str	r3, [r7, #52]	; 0x34
 8006848:	f000 be10 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800684c:	2300      	movs	r3, #0
 800684e:	637b      	str	r3, [r7, #52]	; 0x34
 8006850:	f000 be0c 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8006854:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006858:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800685c:	430b      	orrs	r3, r1
 800685e:	d173      	bne.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006860:	4b36      	ldr	r3, [pc, #216]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006862:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006866:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800686a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800686c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006872:	d104      	bne.n	800687e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006874:	f7fe f8c2 	bl	80049fc <HAL_RCC_GetSysClockFreq>
 8006878:	6378      	str	r0, [r7, #52]	; 0x34
 800687a:	f000 bdf7 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800687e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006880:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006884:	d108      	bne.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006886:	f107 0318 	add.w	r3, r7, #24
 800688a:	4618      	mov	r0, r3
 800688c:	f7ff f992 	bl	8005bb4 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8006890:	6a3b      	ldr	r3, [r7, #32]
 8006892:	637b      	str	r3, [r7, #52]	; 0x34
 8006894:	f000 bdea 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689a:	2b00      	cmp	r3, #0
 800689c:	d104      	bne.n	80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800689e:	f7fe f9af 	bl	8004c00 <HAL_RCC_GetHCLKFreq>
 80068a2:	6378      	str	r0, [r7, #52]	; 0x34
 80068a4:	f000 bde2 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80068a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068aa:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80068ae:	d122      	bne.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80068b0:	4b22      	ldr	r3, [pc, #136]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0320 	and.w	r3, r3, #32
 80068b8:	2b20      	cmp	r3, #32
 80068ba:	d118      	bne.n	80068ee <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80068bc:	4b1f      	ldr	r3, [pc, #124]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d005      	beq.n	80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 80068c8:	4b1c      	ldr	r3, [pc, #112]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	0e1b      	lsrs	r3, r3, #24
 80068ce:	f003 030f 	and.w	r3, r3, #15
 80068d2:	e006      	b.n	80068e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 80068d4:	4b19      	ldr	r3, [pc, #100]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80068d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80068da:	041b      	lsls	r3, r3, #16
 80068dc:	0e1b      	lsrs	r3, r3, #24
 80068de:	f003 030f 	and.w	r3, r3, #15
 80068e2:	4a18      	ldr	r2, [pc, #96]	; (8006944 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 80068e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068e8:	637b      	str	r3, [r7, #52]	; 0x34
 80068ea:	f000 bdbf 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 80068ee:	2300      	movs	r3, #0
 80068f0:	637b      	str	r3, [r7, #52]	; 0x34
 80068f2:	f000 bdbb 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80068f6:	4b11      	ldr	r3, [pc, #68]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006902:	d107      	bne.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 8006904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006906:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800690a:	d103      	bne.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 800690c:	4b0c      	ldr	r3, [pc, #48]	; (8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800690e:	637b      	str	r3, [r7, #52]	; 0x34
 8006910:	f000 bdac 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006914:	4b09      	ldr	r3, [pc, #36]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800691c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006920:	d107      	bne.n	8006932 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006924:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006928:	d103      	bne.n	8006932 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 800692a:	4b05      	ldr	r3, [pc, #20]	; (8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800692c:	637b      	str	r3, [r7, #52]	; 0x34
 800692e:	f000 bd9d 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8006932:	2300      	movs	r3, #0
 8006934:	637b      	str	r3, [r7, #52]	; 0x34
 8006936:	f000 bd99 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800693a:	bf00      	nop
 800693c:	46020c00 	.word	0x46020c00
 8006940:	00f42400 	.word	0x00f42400
 8006944:	0800ab2c 	.word	0x0800ab2c
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8006948:	e9d7 2300 	ldrd	r2, r3, [r7]
 800694c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8006950:	430b      	orrs	r3, r1
 8006952:	d158      	bne.n	8006a06 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8006954:	4bad      	ldr	r3, [pc, #692]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006956:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800695a:	f003 0307 	and.w	r3, r3, #7
 800695e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006962:	2b04      	cmp	r3, #4
 8006964:	d84b      	bhi.n	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006966:	a201      	add	r2, pc, #4	; (adr r2, 800696c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8006968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800696c:	080069a5 	.word	0x080069a5
 8006970:	08006981 	.word	0x08006981
 8006974:	08006993 	.word	0x08006993
 8006978:	080069af 	.word	0x080069af
 800697c:	080069b9 	.word	0x080069b9
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006984:	4618      	mov	r0, r3
 8006986:	f7fe ffbb 	bl	8005900 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800698a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800698e:	f000 bd6d 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006992:	f107 030c 	add.w	r3, r7, #12
 8006996:	4618      	mov	r0, r3
 8006998:	f7ff fa66 	bl	8005e68 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80069a0:	f000 bd64 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80069a4:	f7fe f92c 	bl	8004c00 <HAL_RCC_GetHCLKFreq>
 80069a8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80069aa:	f000 bd5f 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80069ae:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80069b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80069b4:	f000 bd5a 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80069b8:	4b94      	ldr	r3, [pc, #592]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 0320 	and.w	r3, r3, #32
 80069c0:	2b20      	cmp	r3, #32
 80069c2:	d118      	bne.n	80069f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80069c4:	4b91      	ldr	r3, [pc, #580]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d005      	beq.n	80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 80069d0:	4b8e      	ldr	r3, [pc, #568]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	0e1b      	lsrs	r3, r3, #24
 80069d6:	f003 030f 	and.w	r3, r3, #15
 80069da:	e006      	b.n	80069ea <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 80069dc:	4b8b      	ldr	r3, [pc, #556]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80069de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80069e2:	041b      	lsls	r3, r3, #16
 80069e4:	0e1b      	lsrs	r3, r3, #24
 80069e6:	f003 030f 	and.w	r3, r3, #15
 80069ea:	4a89      	ldr	r2, [pc, #548]	; (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80069ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069f0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80069f2:	f000 bd3b 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80069f6:	2300      	movs	r3, #0
 80069f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80069fa:	f000 bd37 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80069fe:	2300      	movs	r3, #0
 8006a00:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a02:	f000 bd33 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8006a06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a0a:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8006a0e:	430b      	orrs	r3, r1
 8006a10:	d167      	bne.n	8006ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8006a12:	4b7e      	ldr	r3, [pc, #504]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006a14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006a18:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006a1c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a24:	d036      	beq.n	8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 8006a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a2c:	d855      	bhi.n	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8006a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a34:	d029      	beq.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8006a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a38:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a3c:	d84d      	bhi.n	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a44:	d013      	beq.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 8006a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a4c:	d845      	bhi.n	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8006a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d015      	beq.n	8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8006a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a5a:	d13e      	bne.n	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a60:	4618      	mov	r0, r3
 8006a62:	f7fe ff4d 	bl	8005900 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a68:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a6a:	f000 bcff 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a6e:	f107 030c 	add.w	r3, r7, #12
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7ff f9f8 	bl	8005e68 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a7c:	f000 bcf6 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006a80:	f7fe f8be 	bl	8004c00 <HAL_RCC_GetHCLKFreq>
 8006a84:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006a86:	f000 bcf1 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006a8a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006a8e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a90:	f000 bcec 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006a94:	4b5d      	ldr	r3, [pc, #372]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 0320 	and.w	r3, r3, #32
 8006a9c:	2b20      	cmp	r3, #32
 8006a9e:	d118      	bne.n	8006ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006aa0:	4b5a      	ldr	r3, [pc, #360]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d005      	beq.n	8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8006aac:	4b57      	ldr	r3, [pc, #348]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	0e1b      	lsrs	r3, r3, #24
 8006ab2:	f003 030f 	and.w	r3, r3, #15
 8006ab6:	e006      	b.n	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8006ab8:	4b54      	ldr	r3, [pc, #336]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006aba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006abe:	041b      	lsls	r3, r3, #16
 8006ac0:	0e1b      	lsrs	r3, r3, #24
 8006ac2:	f003 030f 	and.w	r3, r3, #15
 8006ac6:	4a52      	ldr	r2, [pc, #328]	; (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8006ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006acc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006ace:	f000 bccd 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ad6:	f000 bcc9 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006ada:	2300      	movs	r3, #0
 8006adc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ade:	f000 bcc5 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8006ae2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ae6:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8006aea:	430b      	orrs	r3, r1
 8006aec:	d14c      	bne.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006aee:	4b47      	ldr	r3, [pc, #284]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006af4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006af8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d104      	bne.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006b00:	f7fe f898 	bl	8004c34 <HAL_RCC_GetPCLK1Freq>
 8006b04:	6378      	str	r0, [r7, #52]	; 0x34
 8006b06:	f000 bcb1 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8006b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b10:	d104      	bne.n	8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006b12:	f7fd ff73 	bl	80049fc <HAL_RCC_GetSysClockFreq>
 8006b16:	6378      	str	r0, [r7, #52]	; 0x34
 8006b18:	f000 bca8 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006b1c:	4b3b      	ldr	r3, [pc, #236]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b28:	d107      	bne.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 8006b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b30:	d103      	bne.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 8006b32:	4b38      	ldr	r3, [pc, #224]	; (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006b34:	637b      	str	r3, [r7, #52]	; 0x34
 8006b36:	f000 bc99 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8006b3a:	4b34      	ldr	r3, [pc, #208]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 0320 	and.w	r3, r3, #32
 8006b42:	2b20      	cmp	r3, #32
 8006b44:	d11c      	bne.n	8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8006b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b4c:	d118      	bne.n	8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006b4e:	4b2f      	ldr	r3, [pc, #188]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d005      	beq.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8006b5a:	4b2c      	ldr	r3, [pc, #176]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	0e1b      	lsrs	r3, r3, #24
 8006b60:	f003 030f 	and.w	r3, r3, #15
 8006b64:	e006      	b.n	8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 8006b66:	4b29      	ldr	r3, [pc, #164]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006b68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006b6c:	041b      	lsls	r3, r3, #16
 8006b6e:	0e1b      	lsrs	r3, r3, #24
 8006b70:	f003 030f 	and.w	r3, r3, #15
 8006b74:	4a26      	ldr	r2, [pc, #152]	; (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8006b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b7a:	637b      	str	r3, [r7, #52]	; 0x34
 8006b7c:	f000 bc76 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8006b80:	2300      	movs	r3, #0
 8006b82:	637b      	str	r3, [r7, #52]	; 0x34
 8006b84:	f000 bc72 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8006b88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b8c:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8006b90:	430b      	orrs	r3, r1
 8006b92:	d152      	bne.n	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006b94:	4b1d      	ldr	r3, [pc, #116]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b9a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006b9e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d104      	bne.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006ba6:	f7fe f845 	bl	8004c34 <HAL_RCC_GetPCLK1Freq>
 8006baa:	6378      	str	r0, [r7, #52]	; 0x34
 8006bac:	f000 bc5e 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8006bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bb6:	d104      	bne.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006bb8:	f7fd ff20 	bl	80049fc <HAL_RCC_GetSysClockFreq>
 8006bbc:	6378      	str	r0, [r7, #52]	; 0x34
 8006bbe:	f000 bc55 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006bc2:	4b12      	ldr	r3, [pc, #72]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bce:	d107      	bne.n	8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 8006bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bd6:	d103      	bne.n	8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 8006bd8:	4b0e      	ldr	r3, [pc, #56]	; (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006bda:	637b      	str	r3, [r7, #52]	; 0x34
 8006bdc:	f000 bc46 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8006be0:	4b0a      	ldr	r3, [pc, #40]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 0320 	and.w	r3, r3, #32
 8006be8:	2b20      	cmp	r3, #32
 8006bea:	d122      	bne.n	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 8006bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006bf2:	d11e      	bne.n	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006bf4:	4b05      	ldr	r3, [pc, #20]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00b      	beq.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 8006c00:	4b02      	ldr	r3, [pc, #8]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	0e1b      	lsrs	r3, r3, #24
 8006c06:	f003 030f 	and.w	r3, r3, #15
 8006c0a:	e00c      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8006c0c:	46020c00 	.word	0x46020c00
 8006c10:	0800ab2c 	.word	0x0800ab2c
 8006c14:	00f42400 	.word	0x00f42400
 8006c18:	4ba1      	ldr	r3, [pc, #644]	; (8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006c1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006c1e:	041b      	lsls	r3, r3, #16
 8006c20:	0e1b      	lsrs	r3, r3, #24
 8006c22:	f003 030f 	and.w	r3, r3, #15
 8006c26:	4a9f      	ldr	r2, [pc, #636]	; (8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c2c:	637b      	str	r3, [r7, #52]	; 0x34
 8006c2e:	f000 bc1d 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8006c32:	2300      	movs	r3, #0
 8006c34:	637b      	str	r3, [r7, #52]	; 0x34
 8006c36:	f000 bc19 	b.w	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8006c3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c3e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006c42:	430b      	orrs	r3, r1
 8006c44:	d151      	bne.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006c46:	4b96      	ldr	r3, [pc, #600]	; (8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006c48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006c4c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006c50:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c54:	2bc0      	cmp	r3, #192	; 0xc0
 8006c56:	d024      	beq.n	8006ca2 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8006c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5a:	2bc0      	cmp	r3, #192	; 0xc0
 8006c5c:	d842      	bhi.n	8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8006c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c60:	2b80      	cmp	r3, #128	; 0x80
 8006c62:	d00d      	beq.n	8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8006c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c66:	2b80      	cmp	r3, #128	; 0x80
 8006c68:	d83c      	bhi.n	8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8006c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d003      	beq.n	8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8006c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c72:	2b40      	cmp	r3, #64	; 0x40
 8006c74:	d011      	beq.n	8006c9a <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 8006c76:	e035      	b.n	8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8006c78:	f7fe f804 	bl	8004c84 <HAL_RCC_GetPCLK3Freq>
 8006c7c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006c7e:	e3f5      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006c80:	4b87      	ldr	r3, [pc, #540]	; (8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c8c:	d102      	bne.n	8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 8006c8e:	4b86      	ldr	r3, [pc, #536]	; (8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006c90:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006c92:	e3eb      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006c94:	2300      	movs	r3, #0
 8006c96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c98:	e3e8      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8006c9a:	f7fd feaf 	bl	80049fc <HAL_RCC_GetSysClockFreq>
 8006c9e:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006ca0:	e3e4      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006ca2:	4b7f      	ldr	r3, [pc, #508]	; (8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0320 	and.w	r3, r3, #32
 8006caa:	2b20      	cmp	r3, #32
 8006cac:	d117      	bne.n	8006cde <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006cae:	4b7c      	ldr	r3, [pc, #496]	; (8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d005      	beq.n	8006cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 8006cba:	4b79      	ldr	r3, [pc, #484]	; (8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	0e1b      	lsrs	r3, r3, #24
 8006cc0:	f003 030f 	and.w	r3, r3, #15
 8006cc4:	e006      	b.n	8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8006cc6:	4b76      	ldr	r3, [pc, #472]	; (8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006cc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006ccc:	041b      	lsls	r3, r3, #16
 8006cce:	0e1b      	lsrs	r3, r3, #24
 8006cd0:	f003 030f 	and.w	r3, r3, #15
 8006cd4:	4a73      	ldr	r2, [pc, #460]	; (8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cda:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006cdc:	e3c6      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ce2:	e3c3      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ce8:	e3c0      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8006cea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cee:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8006cf2:	430b      	orrs	r3, r1
 8006cf4:	d147      	bne.n	8006d86 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006cf6:	4b6a      	ldr	r3, [pc, #424]	; (8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006cfc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006d00:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8006d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d103      	bne.n	8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006d08:	f7fd ff94 	bl	8004c34 <HAL_RCC_GetPCLK1Freq>
 8006d0c:	6378      	str	r0, [r7, #52]	; 0x34
 8006d0e:	e3ad      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8006d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d16:	d103      	bne.n	8006d20 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006d18:	f7fd fe70 	bl	80049fc <HAL_RCC_GetSysClockFreq>
 8006d1c:	6378      	str	r0, [r7, #52]	; 0x34
 8006d1e:	e3a5      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006d20:	4b5f      	ldr	r3, [pc, #380]	; (8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d2c:	d106      	bne.n	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8006d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d34:	d102      	bne.n	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 8006d36:	4b5c      	ldr	r3, [pc, #368]	; (8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006d38:	637b      	str	r3, [r7, #52]	; 0x34
 8006d3a:	e397      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8006d3c:	4b58      	ldr	r3, [pc, #352]	; (8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 0320 	and.w	r3, r3, #32
 8006d44:	2b20      	cmp	r3, #32
 8006d46:	d11b      	bne.n	8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8006d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006d4e:	d117      	bne.n	8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006d50:	4b53      	ldr	r3, [pc, #332]	; (8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d005      	beq.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 8006d5c:	4b50      	ldr	r3, [pc, #320]	; (8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	0e1b      	lsrs	r3, r3, #24
 8006d62:	f003 030f 	and.w	r3, r3, #15
 8006d66:	e006      	b.n	8006d76 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8006d68:	4b4d      	ldr	r3, [pc, #308]	; (8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006d6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006d6e:	041b      	lsls	r3, r3, #16
 8006d70:	0e1b      	lsrs	r3, r3, #24
 8006d72:	f003 030f 	and.w	r3, r3, #15
 8006d76:	4a4b      	ldr	r2, [pc, #300]	; (8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d7c:	637b      	str	r3, [r7, #52]	; 0x34
 8006d7e:	e375      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8006d80:	2300      	movs	r3, #0
 8006d82:	637b      	str	r3, [r7, #52]	; 0x34
 8006d84:	e372      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8006d86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d8a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8006d8e:	430b      	orrs	r3, r1
 8006d90:	d164      	bne.n	8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8006d92:	4b43      	ldr	r3, [pc, #268]	; (8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006d94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006d98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d9c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8006d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d120      	bne.n	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006da4:	4b3e      	ldr	r3, [pc, #248]	; (8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 0320 	and.w	r3, r3, #32
 8006dac:	2b20      	cmp	r3, #32
 8006dae:	d117      	bne.n	8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006db0:	4b3b      	ldr	r3, [pc, #236]	; (8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d005      	beq.n	8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8006dbc:	4b38      	ldr	r3, [pc, #224]	; (8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	0e1b      	lsrs	r3, r3, #24
 8006dc2:	f003 030f 	and.w	r3, r3, #15
 8006dc6:	e006      	b.n	8006dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8006dc8:	4b35      	ldr	r3, [pc, #212]	; (8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006dca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006dce:	041b      	lsls	r3, r3, #16
 8006dd0:	0e1b      	lsrs	r3, r3, #24
 8006dd2:	f003 030f 	and.w	r3, r3, #15
 8006dd6:	4a33      	ldr	r2, [pc, #204]	; (8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ddc:	637b      	str	r3, [r7, #52]	; 0x34
 8006dde:	e345      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8006de0:	2300      	movs	r3, #0
 8006de2:	637b      	str	r3, [r7, #52]	; 0x34
 8006de4:	e342      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8006de6:	4b2e      	ldr	r3, [pc, #184]	; (8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006de8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006dec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006df0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006df4:	d112      	bne.n	8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8006df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dfc:	d10e      	bne.n	8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006dfe:	4b28      	ldr	r3, [pc, #160]	; (8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006e00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e0c:	d102      	bne.n	8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8006e0e:	23fa      	movs	r3, #250	; 0xfa
 8006e10:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006e12:	e32b      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006e14:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006e18:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006e1a:	e327      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8006e1c:	4b20      	ldr	r3, [pc, #128]	; (8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e28:	d106      	bne.n	8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8006e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e30:	d102      	bne.n	8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8006e32:	4b1d      	ldr	r3, [pc, #116]	; (8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006e34:	637b      	str	r3, [r7, #52]	; 0x34
 8006e36:	e319      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8006e38:	4b19      	ldr	r3, [pc, #100]	; (8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006e3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e3e:	f003 0302 	and.w	r3, r3, #2
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d107      	bne.n	8006e56 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8006e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e4c:	d103      	bne.n	8006e56 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8006e4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e52:	637b      	str	r3, [r7, #52]	; 0x34
 8006e54:	e30a      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8006e56:	2300      	movs	r3, #0
 8006e58:	637b      	str	r3, [r7, #52]	; 0x34
 8006e5a:	e307      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8006e5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e60:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8006e64:	430b      	orrs	r3, r1
 8006e66:	d16b      	bne.n	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006e68:	4b0d      	ldr	r3, [pc, #52]	; (8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006e6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006e6e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e72:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8006e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d127      	bne.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006e7a:	4b09      	ldr	r3, [pc, #36]	; (8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 0320 	and.w	r3, r3, #32
 8006e82:	2b20      	cmp	r3, #32
 8006e84:	d11e      	bne.n	8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006e86:	4b06      	ldr	r3, [pc, #24]	; (8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00c      	beq.n	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 8006e92:	4b03      	ldr	r3, [pc, #12]	; (8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	0e1b      	lsrs	r3, r3, #24
 8006e98:	f003 030f 	and.w	r3, r3, #15
 8006e9c:	e00d      	b.n	8006eba <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8006e9e:	bf00      	nop
 8006ea0:	46020c00 	.word	0x46020c00
 8006ea4:	0800ab2c 	.word	0x0800ab2c
 8006ea8:	00f42400 	.word	0x00f42400
 8006eac:	4b94      	ldr	r3, [pc, #592]	; (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006eae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006eb2:	041b      	lsls	r3, r3, #16
 8006eb4:	0e1b      	lsrs	r3, r3, #24
 8006eb6:	f003 030f 	and.w	r3, r3, #15
 8006eba:	4a92      	ldr	r2, [pc, #584]	; (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8006ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ec0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ec2:	e2d3      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	637b      	str	r3, [r7, #52]	; 0x34
 8006ec8:	e2d0      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8006eca:	4b8d      	ldr	r3, [pc, #564]	; (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006ecc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ed0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ed4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ed8:	d112      	bne.n	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 8006eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006edc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ee0:	d10e      	bne.n	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006ee2:	4b87      	ldr	r3, [pc, #540]	; (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006ee4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006eec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ef0:	d102      	bne.n	8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 8006ef2:	23fa      	movs	r3, #250	; 0xfa
 8006ef4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006ef6:	e2b9      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006ef8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006efc:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006efe:	e2b5      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006f00:	4b7f      	ldr	r3, [pc, #508]	; (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f0c:	d106      	bne.n	8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 8006f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f14:	d102      	bne.n	8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 8006f16:	4b7c      	ldr	r3, [pc, #496]	; (8007108 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006f18:	637b      	str	r3, [r7, #52]	; 0x34
 8006f1a:	e2a7      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006f1c:	4b78      	ldr	r3, [pc, #480]	; (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006f1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006f22:	f003 0302 	and.w	r3, r3, #2
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	d107      	bne.n	8006f3a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 8006f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f30:	d103      	bne.n	8006f3a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 8006f32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f36:	637b      	str	r3, [r7, #52]	; 0x34
 8006f38:	e298      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	637b      	str	r3, [r7, #52]	; 0x34
 8006f3e:	e295      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8006f40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f44:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006f48:	430b      	orrs	r3, r1
 8006f4a:	d147      	bne.n	8006fdc <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006f4c:	4b6c      	ldr	r3, [pc, #432]	; (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f52:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006f56:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d103      	bne.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006f5e:	f7fd fe69 	bl	8004c34 <HAL_RCC_GetPCLK1Freq>
 8006f62:	6378      	str	r0, [r7, #52]	; 0x34
 8006f64:	e282      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8006f66:	4b66      	ldr	r3, [pc, #408]	; (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006f68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006f6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f74:	d112      	bne.n	8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 8006f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f78:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f7c:	d10e      	bne.n	8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006f7e:	4b60      	ldr	r3, [pc, #384]	; (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006f80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f8c:	d102      	bne.n	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 8006f8e:	23fa      	movs	r3, #250	; 0xfa
 8006f90:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006f92:	e26b      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006f94:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006f98:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006f9a:	e267      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8006f9c:	4b58      	ldr	r3, [pc, #352]	; (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fa8:	d106      	bne.n	8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 8006faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006fb0:	d102      	bne.n	8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 8006fb2:	4b55      	ldr	r3, [pc, #340]	; (8007108 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006fb4:	637b      	str	r3, [r7, #52]	; 0x34
 8006fb6:	e259      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8006fb8:	4b51      	ldr	r3, [pc, #324]	; (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006fba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006fbe:	f003 0302 	and.w	r3, r3, #2
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	d107      	bne.n	8006fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 8006fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006fcc:	d103      	bne.n	8006fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 8006fce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fd2:	637b      	str	r3, [r7, #52]	; 0x34
 8006fd4:	e24a      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	637b      	str	r3, [r7, #52]	; 0x34
 8006fda:	e247      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8006fdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fe0:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8006fe4:	430b      	orrs	r3, r1
 8006fe6:	d12d      	bne.n	8007044 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8006fe8:	4b45      	ldr	r3, [pc, #276]	; (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fee:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8006ff2:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8006ff4:	4b42      	ldr	r3, [pc, #264]	; (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ffc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007000:	d105      	bne.n	800700e <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 8007002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007004:	2b00      	cmp	r3, #0
 8007006:	d102      	bne.n	800700e <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 8007008:	4b3f      	ldr	r3, [pc, #252]	; (8007108 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800700a:	637b      	str	r3, [r7, #52]	; 0x34
 800700c:	e22e      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800700e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007010:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007014:	d107      	bne.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007016:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800701a:	4618      	mov	r0, r3
 800701c:	f7fe fc70 	bl	8005900 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8007020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007022:	637b      	str	r3, [r7, #52]	; 0x34
 8007024:	e222      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8007026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007028:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800702c:	d107      	bne.n	800703e <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800702e:	f107 0318 	add.w	r3, r7, #24
 8007032:	4618      	mov	r0, r3
 8007034:	f7fe fdbe 	bl	8005bb4 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	637b      	str	r3, [r7, #52]	; 0x34
 800703c:	e216      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800703e:	2300      	movs	r3, #0
 8007040:	637b      	str	r3, [r7, #52]	; 0x34
 8007042:	e213      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8007044:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007048:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 800704c:	430b      	orrs	r3, r1
 800704e:	d15d      	bne.n	800710c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007050:	4b2b      	ldr	r3, [pc, #172]	; (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007056:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800705a:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800705c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007062:	d028      	beq.n	80070b6 <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 8007064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007066:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800706a:	d845      	bhi.n	80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 800706c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007072:	d013      	beq.n	800709c <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 8007074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007076:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800707a:	d83d      	bhi.n	80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 800707c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707e:	2b00      	cmp	r3, #0
 8007080:	d004      	beq.n	800708c <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8007082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007084:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007088:	d004      	beq.n	8007094 <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 800708a:	e035      	b.n	80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800708c:	f7fd fde6 	bl	8004c5c <HAL_RCC_GetPCLK2Freq>
 8007090:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007092:	e1eb      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007094:	f7fd fcb2 	bl	80049fc <HAL_RCC_GetSysClockFreq>
 8007098:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800709a:	e1e7      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800709c:	4b18      	ldr	r3, [pc, #96]	; (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070a8:	d102      	bne.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 80070aa:	4b17      	ldr	r3, [pc, #92]	; (8007108 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80070ac:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80070ae:	e1dd      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80070b0:	2300      	movs	r3, #0
 80070b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80070b4:	e1da      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80070b6:	4b12      	ldr	r3, [pc, #72]	; (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 0320 	and.w	r3, r3, #32
 80070be:	2b20      	cmp	r3, #32
 80070c0:	d117      	bne.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80070c2:	4b0f      	ldr	r3, [pc, #60]	; (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d005      	beq.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 80070ce:	4b0c      	ldr	r3, [pc, #48]	; (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	0e1b      	lsrs	r3, r3, #24
 80070d4:	f003 030f 	and.w	r3, r3, #15
 80070d8:	e006      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 80070da:	4b09      	ldr	r3, [pc, #36]	; (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80070dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80070e0:	041b      	lsls	r3, r3, #16
 80070e2:	0e1b      	lsrs	r3, r3, #24
 80070e4:	f003 030f 	and.w	r3, r3, #15
 80070e8:	4a06      	ldr	r2, [pc, #24]	; (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 80070ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070ee:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80070f0:	e1bc      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80070f2:	2300      	movs	r3, #0
 80070f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80070f6:	e1b9      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80070f8:	2300      	movs	r3, #0
 80070fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80070fc:	e1b6      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80070fe:	bf00      	nop
 8007100:	46020c00 	.word	0x46020c00
 8007104:	0800ab2c 	.word	0x0800ab2c
 8007108:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800710c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007110:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8007114:	430b      	orrs	r3, r1
 8007116:	d156      	bne.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007118:	4ba5      	ldr	r3, [pc, #660]	; (80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800711a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800711e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007122:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8007124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007126:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800712a:	d028      	beq.n	800717e <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 800712c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800712e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007132:	d845      	bhi.n	80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8007134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007136:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800713a:	d013      	beq.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 800713c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800713e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007142:	d83d      	bhi.n	80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8007144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007146:	2b00      	cmp	r3, #0
 8007148:	d004      	beq.n	8007154 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 800714a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007150:	d004      	beq.n	800715c <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8007152:	e035      	b.n	80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8007154:	f7fd fd6e 	bl	8004c34 <HAL_RCC_GetPCLK1Freq>
 8007158:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800715a:	e187      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800715c:	f7fd fc4e 	bl	80049fc <HAL_RCC_GetSysClockFreq>
 8007160:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007162:	e183      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007164:	4b92      	ldr	r3, [pc, #584]	; (80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800716c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007170:	d102      	bne.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 8007172:	4b90      	ldr	r3, [pc, #576]	; (80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8007174:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007176:	e179      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007178:	2300      	movs	r3, #0
 800717a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800717c:	e176      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800717e:	4b8c      	ldr	r3, [pc, #560]	; (80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 0320 	and.w	r3, r3, #32
 8007186:	2b20      	cmp	r3, #32
 8007188:	d117      	bne.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800718a:	4b89      	ldr	r3, [pc, #548]	; (80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007192:	2b00      	cmp	r3, #0
 8007194:	d005      	beq.n	80071a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 8007196:	4b86      	ldr	r3, [pc, #536]	; (80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	0e1b      	lsrs	r3, r3, #24
 800719c:	f003 030f 	and.w	r3, r3, #15
 80071a0:	e006      	b.n	80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 80071a2:	4b83      	ldr	r3, [pc, #524]	; (80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80071a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80071a8:	041b      	lsls	r3, r3, #16
 80071aa:	0e1b      	lsrs	r3, r3, #24
 80071ac:	f003 030f 	and.w	r3, r3, #15
 80071b0:	4a81      	ldr	r2, [pc, #516]	; (80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 80071b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071b6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80071b8:	e158      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80071ba:	2300      	movs	r3, #0
 80071bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80071be:	e155      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80071c0:	2300      	movs	r3, #0
 80071c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80071c4:	e152      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80071c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071ca:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 80071ce:	430b      	orrs	r3, r1
 80071d0:	d177      	bne.n	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80071d2:	4b77      	ldr	r3, [pc, #476]	; (80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80071d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80071d8:	f003 0318 	and.w	r3, r3, #24
 80071dc:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80071de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e0:	2b18      	cmp	r3, #24
 80071e2:	d86b      	bhi.n	80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 80071e4:	a201      	add	r2, pc, #4	; (adr r2, 80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 80071e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ea:	bf00      	nop
 80071ec:	08007251 	.word	0x08007251
 80071f0:	080072bd 	.word	0x080072bd
 80071f4:	080072bd 	.word	0x080072bd
 80071f8:	080072bd 	.word	0x080072bd
 80071fc:	080072bd 	.word	0x080072bd
 8007200:	080072bd 	.word	0x080072bd
 8007204:	080072bd 	.word	0x080072bd
 8007208:	080072bd 	.word	0x080072bd
 800720c:	08007259 	.word	0x08007259
 8007210:	080072bd 	.word	0x080072bd
 8007214:	080072bd 	.word	0x080072bd
 8007218:	080072bd 	.word	0x080072bd
 800721c:	080072bd 	.word	0x080072bd
 8007220:	080072bd 	.word	0x080072bd
 8007224:	080072bd 	.word	0x080072bd
 8007228:	080072bd 	.word	0x080072bd
 800722c:	08007261 	.word	0x08007261
 8007230:	080072bd 	.word	0x080072bd
 8007234:	080072bd 	.word	0x080072bd
 8007238:	080072bd 	.word	0x080072bd
 800723c:	080072bd 	.word	0x080072bd
 8007240:	080072bd 	.word	0x080072bd
 8007244:	080072bd 	.word	0x080072bd
 8007248:	080072bd 	.word	0x080072bd
 800724c:	0800727b 	.word	0x0800727b
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8007250:	f7fd fd18 	bl	8004c84 <HAL_RCC_GetPCLK3Freq>
 8007254:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007256:	e109      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007258:	f7fd fbd0 	bl	80049fc <HAL_RCC_GetSysClockFreq>
 800725c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800725e:	e105      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007260:	4b53      	ldr	r3, [pc, #332]	; (80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007268:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800726c:	d102      	bne.n	8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 800726e:	4b51      	ldr	r3, [pc, #324]	; (80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8007270:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007272:	e0fb      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007274:	2300      	movs	r3, #0
 8007276:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007278:	e0f8      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800727a:	4b4d      	ldr	r3, [pc, #308]	; (80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 0320 	and.w	r3, r3, #32
 8007282:	2b20      	cmp	r3, #32
 8007284:	d117      	bne.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007286:	4b4a      	ldr	r3, [pc, #296]	; (80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800728e:	2b00      	cmp	r3, #0
 8007290:	d005      	beq.n	800729e <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 8007292:	4b47      	ldr	r3, [pc, #284]	; (80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	0e1b      	lsrs	r3, r3, #24
 8007298:	f003 030f 	and.w	r3, r3, #15
 800729c:	e006      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 800729e:	4b44      	ldr	r3, [pc, #272]	; (80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80072a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80072a4:	041b      	lsls	r3, r3, #16
 80072a6:	0e1b      	lsrs	r3, r3, #24
 80072a8:	f003 030f 	and.w	r3, r3, #15
 80072ac:	4a42      	ldr	r2, [pc, #264]	; (80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 80072ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072b2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80072b4:	e0da      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80072b6:	2300      	movs	r3, #0
 80072b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072ba:	e0d7      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80072bc:	2300      	movs	r3, #0
 80072be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072c0:	e0d4      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80072c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072c6:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 80072ca:	430b      	orrs	r3, r1
 80072cc:	d155      	bne.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80072ce:	4b38      	ldr	r3, [pc, #224]	; (80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80072d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80072d4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80072d8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80072da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80072e0:	d013      	beq.n	800730a <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 80072e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80072e8:	d844      	bhi.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 80072ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072f0:	d013      	beq.n	800731a <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 80072f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072f8:	d83c      	bhi.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 80072fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d014      	beq.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 8007300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007302:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007306:	d014      	beq.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 8007308:	e034      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800730a:	f107 0318 	add.w	r3, r7, #24
 800730e:	4618      	mov	r0, r3
 8007310:	f7fe fc50 	bl	8005bb4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007318:	e0a8      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800731a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800731e:	4618      	mov	r0, r3
 8007320:	f7fe faee 	bl	8005900 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007326:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007328:	e0a0      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800732a:	f7fd fb67 	bl	80049fc <HAL_RCC_GetSysClockFreq>
 800732e:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007330:	e09c      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007332:	4b1f      	ldr	r3, [pc, #124]	; (80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 0320 	and.w	r3, r3, #32
 800733a:	2b20      	cmp	r3, #32
 800733c:	d117      	bne.n	800736e <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800733e:	4b1c      	ldr	r3, [pc, #112]	; (80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007346:	2b00      	cmp	r3, #0
 8007348:	d005      	beq.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800734a:	4b19      	ldr	r3, [pc, #100]	; (80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	0e1b      	lsrs	r3, r3, #24
 8007350:	f003 030f 	and.w	r3, r3, #15
 8007354:	e006      	b.n	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 8007356:	4b16      	ldr	r3, [pc, #88]	; (80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007358:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800735c:	041b      	lsls	r3, r3, #16
 800735e:	0e1b      	lsrs	r3, r3, #24
 8007360:	f003 030f 	and.w	r3, r3, #15
 8007364:	4a14      	ldr	r2, [pc, #80]	; (80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8007366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800736a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800736c:	e07e      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800736e:	2300      	movs	r3, #0
 8007370:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007372:	e07b      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8007374:	2300      	movs	r3, #0
 8007376:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007378:	e078      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800737a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800737e:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8007382:	430b      	orrs	r3, r1
 8007384:	d138      	bne.n	80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8007386:	4b0a      	ldr	r3, [pc, #40]	; (80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007388:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800738c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007390:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8007392:	4b07      	ldr	r3, [pc, #28]	; (80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007394:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007398:	f003 0302 	and.w	r3, r3, #2
 800739c:	2b02      	cmp	r3, #2
 800739e:	d10d      	bne.n	80073bc <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 80073a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d10a      	bne.n	80073bc <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 80073a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073aa:	637b      	str	r3, [r7, #52]	; 0x34
 80073ac:	e05e      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80073ae:	bf00      	nop
 80073b0:	46020c00 	.word	0x46020c00
 80073b4:	00f42400 	.word	0x00f42400
 80073b8:	0800ab2c 	.word	0x0800ab2c
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80073bc:	4b2e      	ldr	r3, [pc, #184]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80073be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80073c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073ca:	d112      	bne.n	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 80073cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073d2:	d10e      	bne.n	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80073d4:	4b28      	ldr	r3, [pc, #160]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80073d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80073da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073e2:	d102      	bne.n	80073ea <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 80073e4:	23fa      	movs	r3, #250	; 0xfa
 80073e6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80073e8:	e040      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80073ea:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80073ee:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80073f0:	e03c      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80073f2:	2300      	movs	r3, #0
 80073f4:	637b      	str	r3, [r7, #52]	; 0x34
 80073f6:	e039      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 80073f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073fc:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8007400:	430b      	orrs	r3, r1
 8007402:	d131      	bne.n	8007468 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007404:	4b1c      	ldr	r3, [pc, #112]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007406:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800740a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800740e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007410:	4b19      	ldr	r3, [pc, #100]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007418:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800741c:	d105      	bne.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 800741e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007420:	2b00      	cmp	r3, #0
 8007422:	d102      	bne.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 8007424:	4b15      	ldr	r3, [pc, #84]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 8007426:	637b      	str	r3, [r7, #52]	; 0x34
 8007428:	e020      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800742a:	4b13      	ldr	r3, [pc, #76]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007436:	d106      	bne.n	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8007438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800743e:	d102      	bne.n	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 8007440:	4b0f      	ldr	r3, [pc, #60]	; (8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 8007442:	637b      	str	r3, [r7, #52]	; 0x34
 8007444:	e012      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8007446:	4b0c      	ldr	r3, [pc, #48]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800744e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007452:	d106      	bne.n	8007462 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8007454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007456:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800745a:	d102      	bne.n	8007462 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 800745c:	4b09      	ldr	r3, [pc, #36]	; (8007484 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800745e:	637b      	str	r3, [r7, #52]	; 0x34
 8007460:	e004      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8007462:	2300      	movs	r3, #0
 8007464:	637b      	str	r3, [r7, #52]	; 0x34
 8007466:	e001      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8007468:	2300      	movs	r3, #0
 800746a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 800746c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800746e:	4618      	mov	r0, r3
 8007470:	3738      	adds	r7, #56	; 0x38
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	46020c00 	.word	0x46020c00
 800747c:	02dc6c00 	.word	0x02dc6c00
 8007480:	016e3600 	.word	0x016e3600
 8007484:	00f42400 	.word	0x00f42400

08007488 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8007490:	4b47      	ldr	r3, [pc, #284]	; (80075b0 <RCCEx_PLL2_Config+0x128>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a46      	ldr	r2, [pc, #280]	; (80075b0 <RCCEx_PLL2_Config+0x128>)
 8007496:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800749a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800749c:	f7fa fa28 	bl	80018f0 <HAL_GetTick>
 80074a0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80074a2:	e008      	b.n	80074b6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80074a4:	f7fa fa24 	bl	80018f0 <HAL_GetTick>
 80074a8:	4602      	mov	r2, r0
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	1ad3      	subs	r3, r2, r3
 80074ae:	2b02      	cmp	r3, #2
 80074b0:	d901      	bls.n	80074b6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80074b2:	2303      	movs	r3, #3
 80074b4:	e077      	b.n	80075a6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80074b6:	4b3e      	ldr	r3, [pc, #248]	; (80075b0 <RCCEx_PLL2_Config+0x128>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1f0      	bne.n	80074a4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80074c2:	4b3b      	ldr	r3, [pc, #236]	; (80075b0 <RCCEx_PLL2_Config+0x128>)
 80074c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80074ca:	f023 0303 	bic.w	r3, r3, #3
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	6811      	ldr	r1, [r2, #0]
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	6852      	ldr	r2, [r2, #4]
 80074d6:	3a01      	subs	r2, #1
 80074d8:	0212      	lsls	r2, r2, #8
 80074da:	430a      	orrs	r2, r1
 80074dc:	4934      	ldr	r1, [pc, #208]	; (80075b0 <RCCEx_PLL2_Config+0x128>)
 80074de:	4313      	orrs	r3, r2
 80074e0:	62cb      	str	r3, [r1, #44]	; 0x2c
 80074e2:	4b33      	ldr	r3, [pc, #204]	; (80075b0 <RCCEx_PLL2_Config+0x128>)
 80074e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074e6:	4b33      	ldr	r3, [pc, #204]	; (80075b4 <RCCEx_PLL2_Config+0x12c>)
 80074e8:	4013      	ands	r3, r2
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	6892      	ldr	r2, [r2, #8]
 80074ee:	3a01      	subs	r2, #1
 80074f0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	68d2      	ldr	r2, [r2, #12]
 80074f8:	3a01      	subs	r2, #1
 80074fa:	0252      	lsls	r2, r2, #9
 80074fc:	b292      	uxth	r2, r2
 80074fe:	4311      	orrs	r1, r2
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	6912      	ldr	r2, [r2, #16]
 8007504:	3a01      	subs	r2, #1
 8007506:	0412      	lsls	r2, r2, #16
 8007508:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800750c:	4311      	orrs	r1, r2
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	6952      	ldr	r2, [r2, #20]
 8007512:	3a01      	subs	r2, #1
 8007514:	0612      	lsls	r2, r2, #24
 8007516:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800751a:	430a      	orrs	r2, r1
 800751c:	4924      	ldr	r1, [pc, #144]	; (80075b0 <RCCEx_PLL2_Config+0x128>)
 800751e:	4313      	orrs	r3, r2
 8007520:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007522:	4b23      	ldr	r3, [pc, #140]	; (80075b0 <RCCEx_PLL2_Config+0x128>)
 8007524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007526:	f023 020c 	bic.w	r2, r3, #12
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	699b      	ldr	r3, [r3, #24]
 800752e:	4920      	ldr	r1, [pc, #128]	; (80075b0 <RCCEx_PLL2_Config+0x128>)
 8007530:	4313      	orrs	r3, r2
 8007532:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007534:	4b1e      	ldr	r3, [pc, #120]	; (80075b0 <RCCEx_PLL2_Config+0x128>)
 8007536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6a1b      	ldr	r3, [r3, #32]
 800753c:	491c      	ldr	r1, [pc, #112]	; (80075b0 <RCCEx_PLL2_Config+0x128>)
 800753e:	4313      	orrs	r3, r2
 8007540:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8007542:	4b1b      	ldr	r3, [pc, #108]	; (80075b0 <RCCEx_PLL2_Config+0x128>)
 8007544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007546:	4a1a      	ldr	r2, [pc, #104]	; (80075b0 <RCCEx_PLL2_Config+0x128>)
 8007548:	f023 0310 	bic.w	r3, r3, #16
 800754c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800754e:	4b18      	ldr	r3, [pc, #96]	; (80075b0 <RCCEx_PLL2_Config+0x128>)
 8007550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007552:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007556:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	69d2      	ldr	r2, [r2, #28]
 800755e:	00d2      	lsls	r2, r2, #3
 8007560:	4913      	ldr	r1, [pc, #76]	; (80075b0 <RCCEx_PLL2_Config+0x128>)
 8007562:	4313      	orrs	r3, r2
 8007564:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8007566:	4b12      	ldr	r3, [pc, #72]	; (80075b0 <RCCEx_PLL2_Config+0x128>)
 8007568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756a:	4a11      	ldr	r2, [pc, #68]	; (80075b0 <RCCEx_PLL2_Config+0x128>)
 800756c:	f043 0310 	orr.w	r3, r3, #16
 8007570:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8007572:	4b0f      	ldr	r3, [pc, #60]	; (80075b0 <RCCEx_PLL2_Config+0x128>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a0e      	ldr	r2, [pc, #56]	; (80075b0 <RCCEx_PLL2_Config+0x128>)
 8007578:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800757c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800757e:	f7fa f9b7 	bl	80018f0 <HAL_GetTick>
 8007582:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007584:	e008      	b.n	8007598 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007586:	f7fa f9b3 	bl	80018f0 <HAL_GetTick>
 800758a:	4602      	mov	r2, r0
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	1ad3      	subs	r3, r2, r3
 8007590:	2b02      	cmp	r3, #2
 8007592:	d901      	bls.n	8007598 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007594:	2303      	movs	r3, #3
 8007596:	e006      	b.n	80075a6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007598:	4b05      	ldr	r3, [pc, #20]	; (80075b0 <RCCEx_PLL2_Config+0x128>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d0f0      	beq.n	8007586 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80075a4:	2300      	movs	r3, #0

}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3710      	adds	r7, #16
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	46020c00 	.word	0x46020c00
 80075b4:	80800000 	.word	0x80800000

080075b8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b084      	sub	sp, #16
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 80075c0:	4b47      	ldr	r3, [pc, #284]	; (80076e0 <RCCEx_PLL3_Config+0x128>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a46      	ldr	r2, [pc, #280]	; (80076e0 <RCCEx_PLL3_Config+0x128>)
 80075c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075ca:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80075cc:	f7fa f990 	bl	80018f0 <HAL_GetTick>
 80075d0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80075d2:	e008      	b.n	80075e6 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80075d4:	f7fa f98c 	bl	80018f0 <HAL_GetTick>
 80075d8:	4602      	mov	r2, r0
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	1ad3      	subs	r3, r2, r3
 80075de:	2b02      	cmp	r3, #2
 80075e0:	d901      	bls.n	80075e6 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80075e2:	2303      	movs	r3, #3
 80075e4:	e077      	b.n	80076d6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80075e6:	4b3e      	ldr	r3, [pc, #248]	; (80076e0 <RCCEx_PLL3_Config+0x128>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1f0      	bne.n	80075d4 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80075f2:	4b3b      	ldr	r3, [pc, #236]	; (80076e0 <RCCEx_PLL3_Config+0x128>)
 80075f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80075fa:	f023 0303 	bic.w	r3, r3, #3
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	6811      	ldr	r1, [r2, #0]
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	6852      	ldr	r2, [r2, #4]
 8007606:	3a01      	subs	r2, #1
 8007608:	0212      	lsls	r2, r2, #8
 800760a:	430a      	orrs	r2, r1
 800760c:	4934      	ldr	r1, [pc, #208]	; (80076e0 <RCCEx_PLL3_Config+0x128>)
 800760e:	4313      	orrs	r3, r2
 8007610:	630b      	str	r3, [r1, #48]	; 0x30
 8007612:	4b33      	ldr	r3, [pc, #204]	; (80076e0 <RCCEx_PLL3_Config+0x128>)
 8007614:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007616:	4b33      	ldr	r3, [pc, #204]	; (80076e4 <RCCEx_PLL3_Config+0x12c>)
 8007618:	4013      	ands	r3, r2
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	6892      	ldr	r2, [r2, #8]
 800761e:	3a01      	subs	r2, #1
 8007620:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	68d2      	ldr	r2, [r2, #12]
 8007628:	3a01      	subs	r2, #1
 800762a:	0252      	lsls	r2, r2, #9
 800762c:	b292      	uxth	r2, r2
 800762e:	4311      	orrs	r1, r2
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	6912      	ldr	r2, [r2, #16]
 8007634:	3a01      	subs	r2, #1
 8007636:	0412      	lsls	r2, r2, #16
 8007638:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800763c:	4311      	orrs	r1, r2
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	6952      	ldr	r2, [r2, #20]
 8007642:	3a01      	subs	r2, #1
 8007644:	0612      	lsls	r2, r2, #24
 8007646:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800764a:	430a      	orrs	r2, r1
 800764c:	4924      	ldr	r1, [pc, #144]	; (80076e0 <RCCEx_PLL3_Config+0x128>)
 800764e:	4313      	orrs	r3, r2
 8007650:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8007652:	4b23      	ldr	r3, [pc, #140]	; (80076e0 <RCCEx_PLL3_Config+0x128>)
 8007654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007656:	f023 020c 	bic.w	r2, r3, #12
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	699b      	ldr	r3, [r3, #24]
 800765e:	4920      	ldr	r1, [pc, #128]	; (80076e0 <RCCEx_PLL3_Config+0x128>)
 8007660:	4313      	orrs	r3, r2
 8007662:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007664:	4b1e      	ldr	r3, [pc, #120]	; (80076e0 <RCCEx_PLL3_Config+0x128>)
 8007666:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6a1b      	ldr	r3, [r3, #32]
 800766c:	491c      	ldr	r1, [pc, #112]	; (80076e0 <RCCEx_PLL3_Config+0x128>)
 800766e:	4313      	orrs	r3, r2
 8007670:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8007672:	4b1b      	ldr	r3, [pc, #108]	; (80076e0 <RCCEx_PLL3_Config+0x128>)
 8007674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007676:	4a1a      	ldr	r2, [pc, #104]	; (80076e0 <RCCEx_PLL3_Config+0x128>)
 8007678:	f023 0310 	bic.w	r3, r3, #16
 800767c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800767e:	4b18      	ldr	r3, [pc, #96]	; (80076e0 <RCCEx_PLL3_Config+0x128>)
 8007680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007682:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007686:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	69d2      	ldr	r2, [r2, #28]
 800768e:	00d2      	lsls	r2, r2, #3
 8007690:	4913      	ldr	r1, [pc, #76]	; (80076e0 <RCCEx_PLL3_Config+0x128>)
 8007692:	4313      	orrs	r3, r2
 8007694:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8007696:	4b12      	ldr	r3, [pc, #72]	; (80076e0 <RCCEx_PLL3_Config+0x128>)
 8007698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800769a:	4a11      	ldr	r2, [pc, #68]	; (80076e0 <RCCEx_PLL3_Config+0x128>)
 800769c:	f043 0310 	orr.w	r3, r3, #16
 80076a0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 80076a2:	4b0f      	ldr	r3, [pc, #60]	; (80076e0 <RCCEx_PLL3_Config+0x128>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a0e      	ldr	r2, [pc, #56]	; (80076e0 <RCCEx_PLL3_Config+0x128>)
 80076a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076ac:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80076ae:	f7fa f91f 	bl	80018f0 <HAL_GetTick>
 80076b2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80076b4:	e008      	b.n	80076c8 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80076b6:	f7fa f91b 	bl	80018f0 <HAL_GetTick>
 80076ba:	4602      	mov	r2, r0
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	1ad3      	subs	r3, r2, r3
 80076c0:	2b02      	cmp	r3, #2
 80076c2:	d901      	bls.n	80076c8 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 80076c4:	2303      	movs	r3, #3
 80076c6:	e006      	b.n	80076d6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80076c8:	4b05      	ldr	r3, [pc, #20]	; (80076e0 <RCCEx_PLL3_Config+0x128>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d0f0      	beq.n	80076b6 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	46020c00 	.word	0x46020c00
 80076e4:	80800000 	.word	0x80800000

080076e8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d101      	bne.n	80076fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	e0fb      	b.n	80078f2 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a7f      	ldr	r2, [pc, #508]	; (80078fc <HAL_SPI_Init+0x214>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d004      	beq.n	800770e <HAL_SPI_Init+0x26>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a7d      	ldr	r2, [pc, #500]	; (8007900 <HAL_SPI_Init+0x218>)
 800770a:	4293      	cmp	r3, r2
 800770c:	e000      	b.n	8007710 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800770e:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a78      	ldr	r2, [pc, #480]	; (80078fc <HAL_SPI_Init+0x214>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d004      	beq.n	800772a <HAL_SPI_Init+0x42>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a76      	ldr	r2, [pc, #472]	; (8007900 <HAL_SPI_Init+0x218>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d105      	bne.n	8007736 <HAL_SPI_Init+0x4e>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	2b0f      	cmp	r3, #15
 8007730:	d901      	bls.n	8007736 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	e0dd      	b.n	80078f2 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 fbd8 	bl	8007eec <SPI_GetPacketSize>
 800773c:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a6e      	ldr	r2, [pc, #440]	; (80078fc <HAL_SPI_Init+0x214>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d004      	beq.n	8007752 <HAL_SPI_Init+0x6a>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a6c      	ldr	r2, [pc, #432]	; (8007900 <HAL_SPI_Init+0x218>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d102      	bne.n	8007758 <HAL_SPI_Init+0x70>
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2b08      	cmp	r3, #8
 8007756:	d816      	bhi.n	8007786 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800775c:	4a69      	ldr	r2, [pc, #420]	; (8007904 <HAL_SPI_Init+0x21c>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d00e      	beq.n	8007780 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a68      	ldr	r2, [pc, #416]	; (8007908 <HAL_SPI_Init+0x220>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d009      	beq.n	8007780 <HAL_SPI_Init+0x98>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a66      	ldr	r2, [pc, #408]	; (800790c <HAL_SPI_Init+0x224>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d004      	beq.n	8007780 <HAL_SPI_Init+0x98>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a65      	ldr	r2, [pc, #404]	; (8007910 <HAL_SPI_Init+0x228>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d104      	bne.n	800778a <HAL_SPI_Init+0xa2>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2b10      	cmp	r3, #16
 8007784:	d901      	bls.n	800778a <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	e0b3      	b.n	80078f2 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8007790:	b2db      	uxtb	r3, r3
 8007792:	2b00      	cmp	r3, #0
 8007794:	d106      	bne.n	80077a4 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f7f9 fdcc 	bl	800133c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2202      	movs	r2, #2
 80077a8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f022 0201 	bic.w	r2, r2, #1
 80077ba:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80077c6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	699b      	ldr	r3, [r3, #24]
 80077cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80077d0:	d119      	bne.n	8007806 <HAL_SPI_Init+0x11e>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077da:	d103      	bne.n	80077e4 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d008      	beq.n	80077f6 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d10c      	bne.n	8007806 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80077f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077f4:	d107      	bne.n	8007806 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007804:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800780e:	2b00      	cmp	r3, #0
 8007810:	d00f      	beq.n	8007832 <HAL_SPI_Init+0x14a>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	2b06      	cmp	r3, #6
 8007818:	d90b      	bls.n	8007832 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	430a      	orrs	r2, r1
 800782e:	601a      	str	r2, [r3, #0]
 8007830:	e007      	b.n	8007842 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007840:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	69da      	ldr	r2, [r3, #28]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800784a:	431a      	orrs	r2, r3
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	431a      	orrs	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007854:	ea42 0103 	orr.w	r1, r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	68da      	ldr	r2, [r3, #12]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	430a      	orrs	r2, r1
 8007862:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786c:	431a      	orrs	r2, r3
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007872:	431a      	orrs	r2, r3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	699b      	ldr	r3, [r3, #24]
 8007878:	431a      	orrs	r2, r3
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	431a      	orrs	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	695b      	ldr	r3, [r3, #20]
 8007884:	431a      	orrs	r2, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a1b      	ldr	r3, [r3, #32]
 800788a:	431a      	orrs	r2, r3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	431a      	orrs	r2, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007896:	431a      	orrs	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	431a      	orrs	r2, r3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078a2:	431a      	orrs	r2, r3
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078a8:	431a      	orrs	r2, r3
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078ae:	ea42 0103 	orr.w	r1, r2, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	430a      	orrs	r2, r1
 80078bc:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00a      	beq.n	80078e0 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	430a      	orrs	r2, r1
 80078de:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2201      	movs	r2, #1
 80078ec:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	46002000 	.word	0x46002000
 8007900:	56002000 	.word	0x56002000
 8007904:	40013000 	.word	0x40013000
 8007908:	50013000 	.word	0x50013000
 800790c:	40003800 	.word	0x40003800
 8007910:	50003800 	.word	0x50003800

08007914 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b08a      	sub	sp, #40	; 0x28
 8007918:	af02      	add	r7, sp, #8
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	60b9      	str	r1, [r7, #8]
 800791e:	603b      	str	r3, [r7, #0]
 8007920:	4613      	mov	r3, r2
 8007922:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	3320      	adds	r3, #32
 800792a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800792c:	2300      	movs	r3, #0
 800792e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8007936:	2b01      	cmp	r3, #1
 8007938:	d101      	bne.n	800793e <HAL_SPI_Transmit+0x2a>
 800793a:	2302      	movs	r3, #2
 800793c:	e203      	b.n	8007d46 <HAL_SPI_Transmit+0x432>
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2201      	movs	r2, #1
 8007942:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007946:	f7f9 ffd3 	bl	80018f0 <HAL_GetTick>
 800794a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8007952:	b2db      	uxtb	r3, r3
 8007954:	2b01      	cmp	r3, #1
 8007956:	d007      	beq.n	8007968 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8007958:	2302      	movs	r3, #2
 800795a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2200      	movs	r2, #0
 8007960:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8007964:	7efb      	ldrb	r3, [r7, #27]
 8007966:	e1ee      	b.n	8007d46 <HAL_SPI_Transmit+0x432>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d002      	beq.n	8007974 <HAL_SPI_Transmit+0x60>
 800796e:	88fb      	ldrh	r3, [r7, #6]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d107      	bne.n	8007984 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2200      	movs	r2, #0
 800797c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8007980:	7efb      	ldrb	r3, [r7, #27]
 8007982:	e1e0      	b.n	8007d46 <HAL_SPI_Transmit+0x432>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2203      	movs	r2, #3
 8007988:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2200      	movs	r2, #0
 8007990:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	68ba      	ldr	r2, [r7, #8]
 8007998:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	88fa      	ldrh	r2, [r7, #6]
 800799e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	88fa      	ldrh	r2, [r7, #6]
 80079a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2200      	movs	r2, #0
 80079ae:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2200      	movs	r2, #0
 80079b4:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2200      	movs	r2, #0
 80079bc:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2200      	movs	r2, #0
 80079c4:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2200      	movs	r2, #0
 80079ca:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80079d4:	d108      	bne.n	80079e8 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079e4:	601a      	str	r2, [r3, #0]
 80079e6:	e009      	b.n	80079fc <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80079fa:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	0c1b      	lsrs	r3, r3, #16
 8007a04:	041b      	lsls	r3, r3, #16
 8007a06:	88f9      	ldrh	r1, [r7, #6]
 8007a08:	68fa      	ldr	r2, [r7, #12]
 8007a0a:	6812      	ldr	r2, [r2, #0]
 8007a0c:	430b      	orrs	r3, r1
 8007a0e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f042 0201 	orr.w	r2, r2, #1
 8007a1e:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	69db      	ldr	r3, [r3, #28]
 8007a26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d10c      	bne.n	8007a48 <HAL_SPI_Transmit+0x134>
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a36:	d107      	bne.n	8007a48 <HAL_SPI_Transmit+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	2b0f      	cmp	r3, #15
 8007a4e:	d95b      	bls.n	8007b08 <HAL_SPI_Transmit+0x1f4>
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a8f      	ldr	r2, [pc, #572]	; (8007c94 <HAL_SPI_Transmit+0x380>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d04f      	beq.n	8007afa <HAL_SPI_Transmit+0x1e6>
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a8e      	ldr	r2, [pc, #568]	; (8007c98 <HAL_SPI_Transmit+0x384>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d04a      	beq.n	8007afa <HAL_SPI_Transmit+0x1e6>
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a8c      	ldr	r2, [pc, #560]	; (8007c9c <HAL_SPI_Transmit+0x388>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d045      	beq.n	8007afa <HAL_SPI_Transmit+0x1e6>
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a8b      	ldr	r2, [pc, #556]	; (8007ca0 <HAL_SPI_Transmit+0x38c>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d147      	bne.n	8007b08 <HAL_SPI_Transmit+0x1f4>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007a78:	e03f      	b.n	8007afa <HAL_SPI_Transmit+0x1e6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	695b      	ldr	r3, [r3, #20]
 8007a80:	f003 0302 	and.w	r3, r3, #2
 8007a84:	2b02      	cmp	r3, #2
 8007a86:	d114      	bne.n	8007ab2 <HAL_SPI_Transmit+0x19e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	6812      	ldr	r2, [r2, #0]
 8007a92:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a98:	1d1a      	adds	r2, r3, #4
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	3b01      	subs	r3, #1
 8007aa8:	b29a      	uxth	r2, r3
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007ab0:	e023      	b.n	8007afa <HAL_SPI_Transmit+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ab2:	f7f9 ff1d 	bl	80018f0 <HAL_GetTick>
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	1ad3      	subs	r3, r2, r3
 8007abc:	683a      	ldr	r2, [r7, #0]
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d803      	bhi.n	8007aca <HAL_SPI_Transmit+0x1b6>
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ac8:	d102      	bne.n	8007ad0 <HAL_SPI_Transmit+0x1bc>
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d114      	bne.n	8007afa <HAL_SPI_Transmit+0x1e6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007ad0:	68f8      	ldr	r0, [r7, #12]
 8007ad2:	f000 f93d 	bl	8007d50 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ae4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2201      	movs	r2, #1
 8007af2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8007af6:	2303      	movs	r3, #3
 8007af8:	e125      	b.n	8007d46 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d1b9      	bne.n	8007a7a <HAL_SPI_Transmit+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8007b06:	e0f8      	b.n	8007cfa <HAL_SPI_Transmit+0x3e6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	2b07      	cmp	r3, #7
 8007b0e:	f240 80ed 	bls.w	8007cec <HAL_SPI_Transmit+0x3d8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007b12:	e05d      	b.n	8007bd0 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	695b      	ldr	r3, [r3, #20]
 8007b1a:	f003 0302 	and.w	r3, r3, #2
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	d132      	bne.n	8007b88 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d918      	bls.n	8007b60 <HAL_SPI_Transmit+0x24c>
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d014      	beq.n	8007b60 <HAL_SPI_Transmit+0x24c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	6812      	ldr	r2, [r2, #0]
 8007b40:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b46:	1d1a      	adds	r2, r3, #4
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	3b02      	subs	r3, #2
 8007b56:	b29a      	uxth	r2, r3
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007b5e:	e037      	b.n	8007bd0 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b64:	881a      	ldrh	r2, [r3, #0]
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b6e:	1c9a      	adds	r2, r3, #2
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007b86:	e023      	b.n	8007bd0 <HAL_SPI_Transmit+0x2bc>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b88:	f7f9 feb2 	bl	80018f0 <HAL_GetTick>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	1ad3      	subs	r3, r2, r3
 8007b92:	683a      	ldr	r2, [r7, #0]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d803      	bhi.n	8007ba0 <HAL_SPI_Transmit+0x28c>
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b9e:	d102      	bne.n	8007ba6 <HAL_SPI_Transmit+0x292>
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d114      	bne.n	8007bd0 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007ba6:	68f8      	ldr	r0, [r7, #12]
 8007ba8:	f000 f8d2 	bl	8007d50 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8007bcc:	2303      	movs	r3, #3
 8007bce:	e0ba      	b.n	8007d46 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d19b      	bne.n	8007b14 <HAL_SPI_Transmit+0x200>
 8007bdc:	e08d      	b.n	8007cfa <HAL_SPI_Transmit+0x3e6>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	695b      	ldr	r3, [r3, #20]
 8007be4:	f003 0302 	and.w	r3, r3, #2
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	d15b      	bne.n	8007ca4 <HAL_SPI_Transmit+0x390>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	2b03      	cmp	r3, #3
 8007bf6:	d918      	bls.n	8007c2a <HAL_SPI_Transmit+0x316>
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bfc:	2b40      	cmp	r3, #64	; 0x40
 8007bfe:	d914      	bls.n	8007c2a <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	6812      	ldr	r2, [r2, #0]
 8007c0a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c10:	1d1a      	adds	r2, r3, #4
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	3b04      	subs	r3, #4
 8007c20:	b29a      	uxth	r2, r3
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007c28:	e060      	b.n	8007cec <HAL_SPI_Transmit+0x3d8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d917      	bls.n	8007c66 <HAL_SPI_Transmit+0x352>
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d013      	beq.n	8007c66 <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c42:	881a      	ldrh	r2, [r3, #0]
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c4c:	1c9a      	adds	r2, r3, #2
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	3b02      	subs	r3, #2
 8007c5c:	b29a      	uxth	r2, r3
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007c64:	e042      	b.n	8007cec <HAL_SPI_Transmit+0x3d8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	3320      	adds	r3, #32
 8007c70:	7812      	ldrb	r2, [r2, #0]
 8007c72:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c78:	1c5a      	adds	r2, r3, #1
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	3b01      	subs	r3, #1
 8007c88:	b29a      	uxth	r2, r3
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007c90:	e02c      	b.n	8007cec <HAL_SPI_Transmit+0x3d8>
 8007c92:	bf00      	nop
 8007c94:	40013000 	.word	0x40013000
 8007c98:	50013000 	.word	0x50013000
 8007c9c:	40003800 	.word	0x40003800
 8007ca0:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ca4:	f7f9 fe24 	bl	80018f0 <HAL_GetTick>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	1ad3      	subs	r3, r2, r3
 8007cae:	683a      	ldr	r2, [r7, #0]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d803      	bhi.n	8007cbc <HAL_SPI_Transmit+0x3a8>
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cba:	d102      	bne.n	8007cc2 <HAL_SPI_Transmit+0x3ae>
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d114      	bne.n	8007cec <HAL_SPI_Transmit+0x3d8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007cc2:	68f8      	ldr	r0, [r7, #12]
 8007cc4:	f000 f844 	bl	8007d50 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cd6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8007ce8:	2303      	movs	r3, #3
 8007cea:	e02c      	b.n	8007d46 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	f47f af72 	bne.w	8007bde <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	9300      	str	r3, [sp, #0]
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	2200      	movs	r2, #0
 8007d02:	2108      	movs	r1, #8
 8007d04:	68f8      	ldr	r0, [r7, #12]
 8007d06:	f000 f8c3 	bl	8007e90 <SPI_WaitOnFlagUntilTimeout>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d007      	beq.n	8007d20 <HAL_SPI_Transmit+0x40c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d16:	f043 0220 	orr.w	r2, r3, #32
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007d20:	68f8      	ldr	r0, [r7, #12]
 8007d22:	f000 f815 	bl	8007d50 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2201      	movs	r2, #1
 8007d32:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d001      	beq.n	8007d44 <HAL_SPI_Transmit+0x430>
  {
    return HAL_ERROR;
 8007d40:	2301      	movs	r3, #1
 8007d42:	e000      	b.n	8007d46 <HAL_SPI_Transmit+0x432>
  }
  return errorcode;
 8007d44:	7efb      	ldrb	r3, [r7, #27]
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3720      	adds	r7, #32
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop

08007d50 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b085      	sub	sp, #20
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	695b      	ldr	r3, [r3, #20]
 8007d5e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	699a      	ldr	r2, [r3, #24]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f042 0208 	orr.w	r2, r2, #8
 8007d6e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	699a      	ldr	r2, [r3, #24]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f042 0210 	orr.w	r2, r2, #16
 8007d7e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f022 0201 	bic.w	r2, r2, #1
 8007d8e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	691b      	ldr	r3, [r3, #16]
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	6812      	ldr	r2, [r2, #0]
 8007d9a:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8007d9e:	f023 0303 	bic.w	r3, r3, #3
 8007da2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	689a      	ldr	r2, [r3, #8]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007db2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	2b04      	cmp	r3, #4
 8007dbe:	d014      	beq.n	8007dea <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f003 0320 	and.w	r3, r3, #32
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d00f      	beq.n	8007dea <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007dd0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	699a      	ldr	r2, [r3, #24]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f042 0220 	orr.w	r2, r2, #32
 8007de8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	2b03      	cmp	r3, #3
 8007df4:	d014      	beq.n	8007e20 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d00f      	beq.n	8007e20 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e06:	f043 0204 	orr.w	r2, r3, #4
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	699a      	ldr	r2, [r3, #24]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e1e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d00f      	beq.n	8007e4a <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e30:	f043 0201 	orr.w	r2, r3, #1
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	699a      	ldr	r2, [r3, #24]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e48:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d00f      	beq.n	8007e74 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e5a:	f043 0208 	orr.w	r2, r3, #8
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	699a      	ldr	r2, [r3, #24]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e72:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 8007e84:	bf00      	nop
 8007e86:	3714      	adds	r7, #20
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr

08007e90 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	603b      	str	r3, [r7, #0]
 8007e9c:	4613      	mov	r3, r2
 8007e9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007ea0:	e010      	b.n	8007ec4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ea2:	f7f9 fd25 	bl	80018f0 <HAL_GetTick>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	69bb      	ldr	r3, [r7, #24]
 8007eaa:	1ad3      	subs	r3, r2, r3
 8007eac:	683a      	ldr	r2, [r7, #0]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d803      	bhi.n	8007eba <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eb8:	d102      	bne.n	8007ec0 <SPI_WaitOnFlagUntilTimeout+0x30>
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d101      	bne.n	8007ec4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007ec0:	2303      	movs	r3, #3
 8007ec2:	e00f      	b.n	8007ee4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	695a      	ldr	r2, [r3, #20]
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	4013      	ands	r3, r2
 8007ece:	68ba      	ldr	r2, [r7, #8]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	bf0c      	ite	eq
 8007ed4:	2301      	moveq	r3, #1
 8007ed6:	2300      	movne	r3, #0
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	461a      	mov	r2, r3
 8007edc:	79fb      	ldrb	r3, [r7, #7]
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d0df      	beq.n	8007ea2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3710      	adds	r7, #16
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b085      	sub	sp, #20
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ef8:	095b      	lsrs	r3, r3, #5
 8007efa:	3301      	adds	r3, #1
 8007efc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	3301      	adds	r3, #1
 8007f04:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	3307      	adds	r3, #7
 8007f0a:	08db      	lsrs	r3, r3, #3
 8007f0c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	68fa      	ldr	r2, [r7, #12]
 8007f12:	fb02 f303 	mul.w	r3, r2, r3
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3714      	adds	r7, #20
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr

08007f22 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8007f22:	b480      	push	{r7}
 8007f24:	b083      	sub	sp, #12
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
 8007f2a:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d12e      	bne.n	8007f96 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d101      	bne.n	8007f46 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8007f42:	2302      	movs	r3, #2
 8007f44:	e028      	b.n	8007f98 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2202      	movs	r2, #2
 8007f52:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f022 0201 	bic.w	r2, r2, #1
 8007f64:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8007f72:	ea42 0103 	orr.w	r1, r2, r3
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	689a      	ldr	r2, [r3, #8]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	430a      	orrs	r2, r1
 8007f80:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2201      	movs	r2, #1
 8007f86:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007f92:	2300      	movs	r3, #0
 8007f94:	e000      	b.n	8007f98 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
  }
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	370c      	adds	r7, #12
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr

08007fa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d101      	bne.n	8007fb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e049      	b.n	800804a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d106      	bne.n	8007fd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f7f9 fa46 	bl	800145c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2202      	movs	r2, #2
 8007fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	3304      	adds	r3, #4
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	4610      	mov	r0, r2
 8007fe4:	f000 fdce 	bl	8008b84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2201      	movs	r2, #1
 8007fec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2201      	movs	r2, #1
 8008004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2201      	movs	r2, #1
 800800c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2201      	movs	r2, #1
 8008014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2201      	movs	r2, #1
 800801c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2201      	movs	r2, #1
 8008024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2201      	movs	r2, #1
 800802c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2201      	movs	r2, #1
 8008034:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2201      	movs	r2, #1
 8008044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3708      	adds	r7, #8
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b082      	sub	sp, #8
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d101      	bne.n	8008064 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008060:	2301      	movs	r3, #1
 8008062:	e049      	b.n	80080f8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800806a:	b2db      	uxtb	r3, r3
 800806c:	2b00      	cmp	r3, #0
 800806e:	d106      	bne.n	800807e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 f841 	bl	8008100 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2202      	movs	r2, #2
 8008082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	3304      	adds	r3, #4
 800808e:	4619      	mov	r1, r3
 8008090:	4610      	mov	r0, r2
 8008092:	f000 fd77 	bl	8008b84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2201      	movs	r2, #1
 800809a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2201      	movs	r2, #1
 80080a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2201      	movs	r2, #1
 80080aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2201      	movs	r2, #1
 80080b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2201      	movs	r2, #1
 80080ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2201      	movs	r2, #1
 80080c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2201      	movs	r2, #1
 80080ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2201      	movs	r2, #1
 80080d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2201      	movs	r2, #1
 80080da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2201      	movs	r2, #1
 80080e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2201      	movs	r2, #1
 80080ea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2201      	movs	r2, #1
 80080f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80080f6:	2300      	movs	r3, #0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3708      	adds	r7, #8
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008108:	bf00      	nop
 800810a:	370c      	adds	r7, #12
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr

08008114 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b084      	sub	sp, #16
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800811e:	2300      	movs	r3, #0
 8008120:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d109      	bne.n	800813c <HAL_TIM_PWM_Start_IT+0x28>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800812e:	b2db      	uxtb	r3, r3
 8008130:	2b01      	cmp	r3, #1
 8008132:	bf14      	ite	ne
 8008134:	2301      	movne	r3, #1
 8008136:	2300      	moveq	r3, #0
 8008138:	b2db      	uxtb	r3, r3
 800813a:	e03c      	b.n	80081b6 <HAL_TIM_PWM_Start_IT+0xa2>
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	2b04      	cmp	r3, #4
 8008140:	d109      	bne.n	8008156 <HAL_TIM_PWM_Start_IT+0x42>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008148:	b2db      	uxtb	r3, r3
 800814a:	2b01      	cmp	r3, #1
 800814c:	bf14      	ite	ne
 800814e:	2301      	movne	r3, #1
 8008150:	2300      	moveq	r3, #0
 8008152:	b2db      	uxtb	r3, r3
 8008154:	e02f      	b.n	80081b6 <HAL_TIM_PWM_Start_IT+0xa2>
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	2b08      	cmp	r3, #8
 800815a:	d109      	bne.n	8008170 <HAL_TIM_PWM_Start_IT+0x5c>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008162:	b2db      	uxtb	r3, r3
 8008164:	2b01      	cmp	r3, #1
 8008166:	bf14      	ite	ne
 8008168:	2301      	movne	r3, #1
 800816a:	2300      	moveq	r3, #0
 800816c:	b2db      	uxtb	r3, r3
 800816e:	e022      	b.n	80081b6 <HAL_TIM_PWM_Start_IT+0xa2>
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	2b0c      	cmp	r3, #12
 8008174:	d109      	bne.n	800818a <HAL_TIM_PWM_Start_IT+0x76>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800817c:	b2db      	uxtb	r3, r3
 800817e:	2b01      	cmp	r3, #1
 8008180:	bf14      	ite	ne
 8008182:	2301      	movne	r3, #1
 8008184:	2300      	moveq	r3, #0
 8008186:	b2db      	uxtb	r3, r3
 8008188:	e015      	b.n	80081b6 <HAL_TIM_PWM_Start_IT+0xa2>
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	2b10      	cmp	r3, #16
 800818e:	d109      	bne.n	80081a4 <HAL_TIM_PWM_Start_IT+0x90>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008196:	b2db      	uxtb	r3, r3
 8008198:	2b01      	cmp	r3, #1
 800819a:	bf14      	ite	ne
 800819c:	2301      	movne	r3, #1
 800819e:	2300      	moveq	r3, #0
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	e008      	b.n	80081b6 <HAL_TIM_PWM_Start_IT+0xa2>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	bf14      	ite	ne
 80081b0:	2301      	movne	r3, #1
 80081b2:	2300      	moveq	r3, #0
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d001      	beq.n	80081be <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	e124      	b.n	8008408 <HAL_TIM_PWM_Start_IT+0x2f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d104      	bne.n	80081ce <HAL_TIM_PWM_Start_IT+0xba>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2202      	movs	r2, #2
 80081c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081cc:	e023      	b.n	8008216 <HAL_TIM_PWM_Start_IT+0x102>
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	2b04      	cmp	r3, #4
 80081d2:	d104      	bne.n	80081de <HAL_TIM_PWM_Start_IT+0xca>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2202      	movs	r2, #2
 80081d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081dc:	e01b      	b.n	8008216 <HAL_TIM_PWM_Start_IT+0x102>
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	2b08      	cmp	r3, #8
 80081e2:	d104      	bne.n	80081ee <HAL_TIM_PWM_Start_IT+0xda>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2202      	movs	r2, #2
 80081e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081ec:	e013      	b.n	8008216 <HAL_TIM_PWM_Start_IT+0x102>
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	2b0c      	cmp	r3, #12
 80081f2:	d104      	bne.n	80081fe <HAL_TIM_PWM_Start_IT+0xea>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2202      	movs	r2, #2
 80081f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80081fc:	e00b      	b.n	8008216 <HAL_TIM_PWM_Start_IT+0x102>
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	2b10      	cmp	r3, #16
 8008202:	d104      	bne.n	800820e <HAL_TIM_PWM_Start_IT+0xfa>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2202      	movs	r2, #2
 8008208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800820c:	e003      	b.n	8008216 <HAL_TIM_PWM_Start_IT+0x102>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2202      	movs	r2, #2
 8008212:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	2b0c      	cmp	r3, #12
 800821a:	d841      	bhi.n	80082a0 <HAL_TIM_PWM_Start_IT+0x18c>
 800821c:	a201      	add	r2, pc, #4	; (adr r2, 8008224 <HAL_TIM_PWM_Start_IT+0x110>)
 800821e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008222:	bf00      	nop
 8008224:	08008259 	.word	0x08008259
 8008228:	080082a1 	.word	0x080082a1
 800822c:	080082a1 	.word	0x080082a1
 8008230:	080082a1 	.word	0x080082a1
 8008234:	0800826b 	.word	0x0800826b
 8008238:	080082a1 	.word	0x080082a1
 800823c:	080082a1 	.word	0x080082a1
 8008240:	080082a1 	.word	0x080082a1
 8008244:	0800827d 	.word	0x0800827d
 8008248:	080082a1 	.word	0x080082a1
 800824c:	080082a1 	.word	0x080082a1
 8008250:	080082a1 	.word	0x080082a1
 8008254:	0800828f 	.word	0x0800828f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	68da      	ldr	r2, [r3, #12]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f042 0202 	orr.w	r2, r2, #2
 8008266:	60da      	str	r2, [r3, #12]
      break;
 8008268:	e01d      	b.n	80082a6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	68da      	ldr	r2, [r3, #12]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f042 0204 	orr.w	r2, r2, #4
 8008278:	60da      	str	r2, [r3, #12]
      break;
 800827a:	e014      	b.n	80082a6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	68da      	ldr	r2, [r3, #12]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f042 0208 	orr.w	r2, r2, #8
 800828a:	60da      	str	r2, [r3, #12]
      break;
 800828c:	e00b      	b.n	80082a6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	68da      	ldr	r2, [r3, #12]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f042 0210 	orr.w	r2, r2, #16
 800829c:	60da      	str	r2, [r3, #12]
      break;
 800829e:	e002      	b.n	80082a6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80082a0:	2301      	movs	r3, #1
 80082a2:	73fb      	strb	r3, [r7, #15]
      break;
 80082a4:	bf00      	nop
  }

  if (status == HAL_OK)
 80082a6:	7bfb      	ldrb	r3, [r7, #15]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	f040 80ac 	bne.w	8008406 <HAL_TIM_PWM_Start_IT+0x2f2>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	2201      	movs	r2, #1
 80082b4:	6839      	ldr	r1, [r7, #0]
 80082b6:	4618      	mov	r0, r3
 80082b8:	f001 f9d0 	bl	800965c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a53      	ldr	r2, [pc, #332]	; (8008410 <HAL_TIM_PWM_Start_IT+0x2fc>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d02c      	beq.n	8008320 <HAL_TIM_PWM_Start_IT+0x20c>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a52      	ldr	r2, [pc, #328]	; (8008414 <HAL_TIM_PWM_Start_IT+0x300>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d027      	beq.n	8008320 <HAL_TIM_PWM_Start_IT+0x20c>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a50      	ldr	r2, [pc, #320]	; (8008418 <HAL_TIM_PWM_Start_IT+0x304>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d022      	beq.n	8008320 <HAL_TIM_PWM_Start_IT+0x20c>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a4f      	ldr	r2, [pc, #316]	; (800841c <HAL_TIM_PWM_Start_IT+0x308>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d01d      	beq.n	8008320 <HAL_TIM_PWM_Start_IT+0x20c>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a4d      	ldr	r2, [pc, #308]	; (8008420 <HAL_TIM_PWM_Start_IT+0x30c>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d018      	beq.n	8008320 <HAL_TIM_PWM_Start_IT+0x20c>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a4c      	ldr	r2, [pc, #304]	; (8008424 <HAL_TIM_PWM_Start_IT+0x310>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d013      	beq.n	8008320 <HAL_TIM_PWM_Start_IT+0x20c>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a4a      	ldr	r2, [pc, #296]	; (8008428 <HAL_TIM_PWM_Start_IT+0x314>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d00e      	beq.n	8008320 <HAL_TIM_PWM_Start_IT+0x20c>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a49      	ldr	r2, [pc, #292]	; (800842c <HAL_TIM_PWM_Start_IT+0x318>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d009      	beq.n	8008320 <HAL_TIM_PWM_Start_IT+0x20c>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a47      	ldr	r2, [pc, #284]	; (8008430 <HAL_TIM_PWM_Start_IT+0x31c>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d004      	beq.n	8008320 <HAL_TIM_PWM_Start_IT+0x20c>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a46      	ldr	r2, [pc, #280]	; (8008434 <HAL_TIM_PWM_Start_IT+0x320>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d101      	bne.n	8008324 <HAL_TIM_PWM_Start_IT+0x210>
 8008320:	2301      	movs	r3, #1
 8008322:	e000      	b.n	8008326 <HAL_TIM_PWM_Start_IT+0x212>
 8008324:	2300      	movs	r3, #0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d007      	beq.n	800833a <HAL_TIM_PWM_Start_IT+0x226>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008338:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a34      	ldr	r2, [pc, #208]	; (8008410 <HAL_TIM_PWM_Start_IT+0x2fc>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d040      	beq.n	80083c6 <HAL_TIM_PWM_Start_IT+0x2b2>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a32      	ldr	r2, [pc, #200]	; (8008414 <HAL_TIM_PWM_Start_IT+0x300>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d03b      	beq.n	80083c6 <HAL_TIM_PWM_Start_IT+0x2b2>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008356:	d036      	beq.n	80083c6 <HAL_TIM_PWM_Start_IT+0x2b2>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008360:	d031      	beq.n	80083c6 <HAL_TIM_PWM_Start_IT+0x2b2>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a34      	ldr	r2, [pc, #208]	; (8008438 <HAL_TIM_PWM_Start_IT+0x324>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d02c      	beq.n	80083c6 <HAL_TIM_PWM_Start_IT+0x2b2>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a32      	ldr	r2, [pc, #200]	; (800843c <HAL_TIM_PWM_Start_IT+0x328>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d027      	beq.n	80083c6 <HAL_TIM_PWM_Start_IT+0x2b2>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a31      	ldr	r2, [pc, #196]	; (8008440 <HAL_TIM_PWM_Start_IT+0x32c>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d022      	beq.n	80083c6 <HAL_TIM_PWM_Start_IT+0x2b2>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a2f      	ldr	r2, [pc, #188]	; (8008444 <HAL_TIM_PWM_Start_IT+0x330>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d01d      	beq.n	80083c6 <HAL_TIM_PWM_Start_IT+0x2b2>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a2e      	ldr	r2, [pc, #184]	; (8008448 <HAL_TIM_PWM_Start_IT+0x334>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d018      	beq.n	80083c6 <HAL_TIM_PWM_Start_IT+0x2b2>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a2c      	ldr	r2, [pc, #176]	; (800844c <HAL_TIM_PWM_Start_IT+0x338>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d013      	beq.n	80083c6 <HAL_TIM_PWM_Start_IT+0x2b2>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a1d      	ldr	r2, [pc, #116]	; (8008418 <HAL_TIM_PWM_Start_IT+0x304>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d00e      	beq.n	80083c6 <HAL_TIM_PWM_Start_IT+0x2b2>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a1b      	ldr	r2, [pc, #108]	; (800841c <HAL_TIM_PWM_Start_IT+0x308>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d009      	beq.n	80083c6 <HAL_TIM_PWM_Start_IT+0x2b2>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a1a      	ldr	r2, [pc, #104]	; (8008420 <HAL_TIM_PWM_Start_IT+0x30c>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d004      	beq.n	80083c6 <HAL_TIM_PWM_Start_IT+0x2b2>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a18      	ldr	r2, [pc, #96]	; (8008424 <HAL_TIM_PWM_Start_IT+0x310>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d115      	bne.n	80083f2 <HAL_TIM_PWM_Start_IT+0x2de>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	689a      	ldr	r2, [r3, #8]
 80083cc:	4b20      	ldr	r3, [pc, #128]	; (8008450 <HAL_TIM_PWM_Start_IT+0x33c>)
 80083ce:	4013      	ands	r3, r2
 80083d0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	2b06      	cmp	r3, #6
 80083d6:	d015      	beq.n	8008404 <HAL_TIM_PWM_Start_IT+0x2f0>
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083de:	d011      	beq.n	8008404 <HAL_TIM_PWM_Start_IT+0x2f0>
      {
        __HAL_TIM_ENABLE(htim);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f042 0201 	orr.w	r2, r2, #1
 80083ee:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083f0:	e008      	b.n	8008404 <HAL_TIM_PWM_Start_IT+0x2f0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f042 0201 	orr.w	r2, r2, #1
 8008400:	601a      	str	r2, [r3, #0]
 8008402:	e000      	b.n	8008406 <HAL_TIM_PWM_Start_IT+0x2f2>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008404:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008406:	7bfb      	ldrb	r3, [r7, #15]
}
 8008408:	4618      	mov	r0, r3
 800840a:	3710      	adds	r7, #16
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}
 8008410:	40012c00 	.word	0x40012c00
 8008414:	50012c00 	.word	0x50012c00
 8008418:	40013400 	.word	0x40013400
 800841c:	50013400 	.word	0x50013400
 8008420:	40014000 	.word	0x40014000
 8008424:	50014000 	.word	0x50014000
 8008428:	40014400 	.word	0x40014400
 800842c:	50014400 	.word	0x50014400
 8008430:	40014800 	.word	0x40014800
 8008434:	50014800 	.word	0x50014800
 8008438:	40000400 	.word	0x40000400
 800843c:	50000400 	.word	0x50000400
 8008440:	40000800 	.word	0x40000800
 8008444:	50000800 	.word	0x50000800
 8008448:	40000c00 	.word	0x40000c00
 800844c:	50000c00 	.word	0x50000c00
 8008450:	00010007 	.word	0x00010007

08008454 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	691b      	ldr	r3, [r3, #16]
 800846a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	f003 0302 	and.w	r3, r3, #2
 8008472:	2b00      	cmp	r3, #0
 8008474:	d020      	beq.n	80084b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f003 0302 	and.w	r3, r3, #2
 800847c:	2b00      	cmp	r3, #0
 800847e:	d01b      	beq.n	80084b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f06f 0202 	mvn.w	r2, #2
 8008488:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2201      	movs	r2, #1
 800848e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	699b      	ldr	r3, [r3, #24]
 8008496:	f003 0303 	and.w	r3, r3, #3
 800849a:	2b00      	cmp	r3, #0
 800849c:	d003      	beq.n	80084a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 fb52 	bl	8008b48 <HAL_TIM_IC_CaptureCallback>
 80084a4:	e005      	b.n	80084b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 fb44 	bl	8008b34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 fb55 	bl	8008b5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	f003 0304 	and.w	r3, r3, #4
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d020      	beq.n	8008504 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	f003 0304 	and.w	r3, r3, #4
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d01b      	beq.n	8008504 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f06f 0204 	mvn.w	r2, #4
 80084d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2202      	movs	r2, #2
 80084da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	699b      	ldr	r3, [r3, #24]
 80084e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d003      	beq.n	80084f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 fb2c 	bl	8008b48 <HAL_TIM_IC_CaptureCallback>
 80084f0:	e005      	b.n	80084fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 fb1e 	bl	8008b34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 fb2f 	bl	8008b5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	f003 0308 	and.w	r3, r3, #8
 800850a:	2b00      	cmp	r3, #0
 800850c:	d020      	beq.n	8008550 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f003 0308 	and.w	r3, r3, #8
 8008514:	2b00      	cmp	r3, #0
 8008516:	d01b      	beq.n	8008550 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f06f 0208 	mvn.w	r2, #8
 8008520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2204      	movs	r2, #4
 8008526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	69db      	ldr	r3, [r3, #28]
 800852e:	f003 0303 	and.w	r3, r3, #3
 8008532:	2b00      	cmp	r3, #0
 8008534:	d003      	beq.n	800853e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 fb06 	bl	8008b48 <HAL_TIM_IC_CaptureCallback>
 800853c:	e005      	b.n	800854a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 faf8 	bl	8008b34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 fb09 	bl	8008b5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	f003 0310 	and.w	r3, r3, #16
 8008556:	2b00      	cmp	r3, #0
 8008558:	d020      	beq.n	800859c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f003 0310 	and.w	r3, r3, #16
 8008560:	2b00      	cmp	r3, #0
 8008562:	d01b      	beq.n	800859c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f06f 0210 	mvn.w	r2, #16
 800856c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2208      	movs	r2, #8
 8008572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	69db      	ldr	r3, [r3, #28]
 800857a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800857e:	2b00      	cmp	r3, #0
 8008580:	d003      	beq.n	800858a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 fae0 	bl	8008b48 <HAL_TIM_IC_CaptureCallback>
 8008588:	e005      	b.n	8008596 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 fad2 	bl	8008b34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f000 fae3 	bl	8008b5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2200      	movs	r2, #0
 800859a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	f003 0301 	and.w	r3, r3, #1
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d00c      	beq.n	80085c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f003 0301 	and.w	r3, r3, #1
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d007      	beq.n	80085c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f06f 0201 	mvn.w	r2, #1
 80085b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 fab0 	bl	8008b20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d104      	bne.n	80085d4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d00c      	beq.n	80085ee <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d007      	beq.n	80085ee <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80085e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f001 f929 	bl	8009840 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d00c      	beq.n	8008612 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d007      	beq.n	8008612 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800860a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f001 f921 	bl	8009854 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008618:	2b00      	cmp	r3, #0
 800861a:	d00c      	beq.n	8008636 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008622:	2b00      	cmp	r3, #0
 8008624:	d007      	beq.n	8008636 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800862e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 fa9d 	bl	8008b70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	f003 0320 	and.w	r3, r3, #32
 800863c:	2b00      	cmp	r3, #0
 800863e:	d00c      	beq.n	800865a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f003 0320 	and.w	r3, r3, #32
 8008646:	2b00      	cmp	r3, #0
 8008648:	d007      	beq.n	800865a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f06f 0220 	mvn.w	r2, #32
 8008652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f001 f8e9 	bl	800982c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008660:	2b00      	cmp	r3, #0
 8008662:	d00c      	beq.n	800867e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800866a:	2b00      	cmp	r3, #0
 800866c:	d007      	beq.n	800867e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8008676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f001 f8f5 	bl	8009868 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008684:	2b00      	cmp	r3, #0
 8008686:	d00c      	beq.n	80086a2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800868e:	2b00      	cmp	r3, #0
 8008690:	d007      	beq.n	80086a2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800869a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f001 f8ed 	bl	800987c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d00c      	beq.n	80086c6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d007      	beq.n	80086c6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80086be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f001 f8e5 	bl	8009890 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d00c      	beq.n	80086ea <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d007      	beq.n	80086ea <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80086e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f001 f8dd 	bl	80098a4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80086ea:	bf00      	nop
 80086ec:	3710      	adds	r7, #16
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
	...

080086f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b086      	sub	sp, #24
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	60f8      	str	r0, [r7, #12]
 80086fc:	60b9      	str	r1, [r7, #8]
 80086fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008700:	2300      	movs	r3, #0
 8008702:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800870a:	2b01      	cmp	r3, #1
 800870c:	d101      	bne.n	8008712 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800870e:	2302      	movs	r3, #2
 8008710:	e0ff      	b.n	8008912 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2201      	movs	r2, #1
 8008716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2b14      	cmp	r3, #20
 800871e:	f200 80f0 	bhi.w	8008902 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008722:	a201      	add	r2, pc, #4	; (adr r2, 8008728 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008728:	0800877d 	.word	0x0800877d
 800872c:	08008903 	.word	0x08008903
 8008730:	08008903 	.word	0x08008903
 8008734:	08008903 	.word	0x08008903
 8008738:	080087bd 	.word	0x080087bd
 800873c:	08008903 	.word	0x08008903
 8008740:	08008903 	.word	0x08008903
 8008744:	08008903 	.word	0x08008903
 8008748:	080087ff 	.word	0x080087ff
 800874c:	08008903 	.word	0x08008903
 8008750:	08008903 	.word	0x08008903
 8008754:	08008903 	.word	0x08008903
 8008758:	0800883f 	.word	0x0800883f
 800875c:	08008903 	.word	0x08008903
 8008760:	08008903 	.word	0x08008903
 8008764:	08008903 	.word	0x08008903
 8008768:	08008881 	.word	0x08008881
 800876c:	08008903 	.word	0x08008903
 8008770:	08008903 	.word	0x08008903
 8008774:	08008903 	.word	0x08008903
 8008778:	080088c1 	.word	0x080088c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	68b9      	ldr	r1, [r7, #8]
 8008782:	4618      	mov	r0, r3
 8008784:	f000 faf8 	bl	8008d78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	699a      	ldr	r2, [r3, #24]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f042 0208 	orr.w	r2, r2, #8
 8008796:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	699a      	ldr	r2, [r3, #24]
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f022 0204 	bic.w	r2, r2, #4
 80087a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	6999      	ldr	r1, [r3, #24]
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	691a      	ldr	r2, [r3, #16]
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	430a      	orrs	r2, r1
 80087b8:	619a      	str	r2, [r3, #24]
      break;
 80087ba:	e0a5      	b.n	8008908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	68b9      	ldr	r1, [r7, #8]
 80087c2:	4618      	mov	r0, r3
 80087c4:	f000 fb9a 	bl	8008efc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	699a      	ldr	r2, [r3, #24]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	699a      	ldr	r2, [r3, #24]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	6999      	ldr	r1, [r3, #24]
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	021a      	lsls	r2, r3, #8
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	430a      	orrs	r2, r1
 80087fa:	619a      	str	r2, [r3, #24]
      break;
 80087fc:	e084      	b.n	8008908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	68b9      	ldr	r1, [r7, #8]
 8008804:	4618      	mov	r0, r3
 8008806:	f000 fc29 	bl	800905c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	69da      	ldr	r2, [r3, #28]
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f042 0208 	orr.w	r2, r2, #8
 8008818:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	69da      	ldr	r2, [r3, #28]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f022 0204 	bic.w	r2, r2, #4
 8008828:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	69d9      	ldr	r1, [r3, #28]
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	691a      	ldr	r2, [r3, #16]
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	430a      	orrs	r2, r1
 800883a:	61da      	str	r2, [r3, #28]
      break;
 800883c:	e064      	b.n	8008908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	68b9      	ldr	r1, [r7, #8]
 8008844:	4618      	mov	r0, r3
 8008846:	f000 fcb7 	bl	80091b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	69da      	ldr	r2, [r3, #28]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008858:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	69da      	ldr	r2, [r3, #28]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008868:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	69d9      	ldr	r1, [r3, #28]
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	691b      	ldr	r3, [r3, #16]
 8008874:	021a      	lsls	r2, r3, #8
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	430a      	orrs	r2, r1
 800887c:	61da      	str	r2, [r3, #28]
      break;
 800887e:	e043      	b.n	8008908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	68b9      	ldr	r1, [r7, #8]
 8008886:	4618      	mov	r0, r3
 8008888:	f000 fd46 	bl	8009318 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f042 0208 	orr.w	r2, r2, #8
 800889a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f022 0204 	bic.w	r2, r2, #4
 80088aa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	691a      	ldr	r2, [r3, #16]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	430a      	orrs	r2, r1
 80088bc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80088be:	e023      	b.n	8008908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	68b9      	ldr	r1, [r7, #8]
 80088c6:	4618      	mov	r0, r3
 80088c8:	f000 fda8 	bl	800941c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088da:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088ea:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	021a      	lsls	r2, r3, #8
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	430a      	orrs	r2, r1
 80088fe:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008900:	e002      	b.n	8008908 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	75fb      	strb	r3, [r7, #23]
      break;
 8008906:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2200      	movs	r2, #0
 800890c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008910:	7dfb      	ldrb	r3, [r7, #23]
}
 8008912:	4618      	mov	r0, r3
 8008914:	3718      	adds	r7, #24
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop

0800891c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008926:	2300      	movs	r3, #0
 8008928:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008930:	2b01      	cmp	r3, #1
 8008932:	d101      	bne.n	8008938 <HAL_TIM_ConfigClockSource+0x1c>
 8008934:	2302      	movs	r3, #2
 8008936:	e0e6      	b.n	8008b06 <HAL_TIM_ConfigClockSource+0x1ea>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2201      	movs	r2, #1
 800893c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2202      	movs	r2, #2
 8008944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	689b      	ldr	r3, [r3, #8]
 800894e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8008956:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800895a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008962:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	68ba      	ldr	r2, [r7, #8]
 800896a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a67      	ldr	r2, [pc, #412]	; (8008b10 <HAL_TIM_ConfigClockSource+0x1f4>)
 8008972:	4293      	cmp	r3, r2
 8008974:	f000 80b1 	beq.w	8008ada <HAL_TIM_ConfigClockSource+0x1be>
 8008978:	4a65      	ldr	r2, [pc, #404]	; (8008b10 <HAL_TIM_ConfigClockSource+0x1f4>)
 800897a:	4293      	cmp	r3, r2
 800897c:	f200 80b6 	bhi.w	8008aec <HAL_TIM_ConfigClockSource+0x1d0>
 8008980:	4a64      	ldr	r2, [pc, #400]	; (8008b14 <HAL_TIM_ConfigClockSource+0x1f8>)
 8008982:	4293      	cmp	r3, r2
 8008984:	f000 80a9 	beq.w	8008ada <HAL_TIM_ConfigClockSource+0x1be>
 8008988:	4a62      	ldr	r2, [pc, #392]	; (8008b14 <HAL_TIM_ConfigClockSource+0x1f8>)
 800898a:	4293      	cmp	r3, r2
 800898c:	f200 80ae 	bhi.w	8008aec <HAL_TIM_ConfigClockSource+0x1d0>
 8008990:	4a61      	ldr	r2, [pc, #388]	; (8008b18 <HAL_TIM_ConfigClockSource+0x1fc>)
 8008992:	4293      	cmp	r3, r2
 8008994:	f000 80a1 	beq.w	8008ada <HAL_TIM_ConfigClockSource+0x1be>
 8008998:	4a5f      	ldr	r2, [pc, #380]	; (8008b18 <HAL_TIM_ConfigClockSource+0x1fc>)
 800899a:	4293      	cmp	r3, r2
 800899c:	f200 80a6 	bhi.w	8008aec <HAL_TIM_ConfigClockSource+0x1d0>
 80089a0:	4a5e      	ldr	r2, [pc, #376]	; (8008b1c <HAL_TIM_ConfigClockSource+0x200>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	f000 8099 	beq.w	8008ada <HAL_TIM_ConfigClockSource+0x1be>
 80089a8:	4a5c      	ldr	r2, [pc, #368]	; (8008b1c <HAL_TIM_ConfigClockSource+0x200>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	f200 809e 	bhi.w	8008aec <HAL_TIM_ConfigClockSource+0x1d0>
 80089b0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80089b4:	f000 8091 	beq.w	8008ada <HAL_TIM_ConfigClockSource+0x1be>
 80089b8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80089bc:	f200 8096 	bhi.w	8008aec <HAL_TIM_ConfigClockSource+0x1d0>
 80089c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089c4:	f000 8089 	beq.w	8008ada <HAL_TIM_ConfigClockSource+0x1be>
 80089c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089cc:	f200 808e 	bhi.w	8008aec <HAL_TIM_ConfigClockSource+0x1d0>
 80089d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089d4:	d03e      	beq.n	8008a54 <HAL_TIM_ConfigClockSource+0x138>
 80089d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089da:	f200 8087 	bhi.w	8008aec <HAL_TIM_ConfigClockSource+0x1d0>
 80089de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089e2:	f000 8086 	beq.w	8008af2 <HAL_TIM_ConfigClockSource+0x1d6>
 80089e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089ea:	d87f      	bhi.n	8008aec <HAL_TIM_ConfigClockSource+0x1d0>
 80089ec:	2b70      	cmp	r3, #112	; 0x70
 80089ee:	d01a      	beq.n	8008a26 <HAL_TIM_ConfigClockSource+0x10a>
 80089f0:	2b70      	cmp	r3, #112	; 0x70
 80089f2:	d87b      	bhi.n	8008aec <HAL_TIM_ConfigClockSource+0x1d0>
 80089f4:	2b60      	cmp	r3, #96	; 0x60
 80089f6:	d050      	beq.n	8008a9a <HAL_TIM_ConfigClockSource+0x17e>
 80089f8:	2b60      	cmp	r3, #96	; 0x60
 80089fa:	d877      	bhi.n	8008aec <HAL_TIM_ConfigClockSource+0x1d0>
 80089fc:	2b50      	cmp	r3, #80	; 0x50
 80089fe:	d03c      	beq.n	8008a7a <HAL_TIM_ConfigClockSource+0x15e>
 8008a00:	2b50      	cmp	r3, #80	; 0x50
 8008a02:	d873      	bhi.n	8008aec <HAL_TIM_ConfigClockSource+0x1d0>
 8008a04:	2b40      	cmp	r3, #64	; 0x40
 8008a06:	d058      	beq.n	8008aba <HAL_TIM_ConfigClockSource+0x19e>
 8008a08:	2b40      	cmp	r3, #64	; 0x40
 8008a0a:	d86f      	bhi.n	8008aec <HAL_TIM_ConfigClockSource+0x1d0>
 8008a0c:	2b30      	cmp	r3, #48	; 0x30
 8008a0e:	d064      	beq.n	8008ada <HAL_TIM_ConfigClockSource+0x1be>
 8008a10:	2b30      	cmp	r3, #48	; 0x30
 8008a12:	d86b      	bhi.n	8008aec <HAL_TIM_ConfigClockSource+0x1d0>
 8008a14:	2b20      	cmp	r3, #32
 8008a16:	d060      	beq.n	8008ada <HAL_TIM_ConfigClockSource+0x1be>
 8008a18:	2b20      	cmp	r3, #32
 8008a1a:	d867      	bhi.n	8008aec <HAL_TIM_ConfigClockSource+0x1d0>
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d05c      	beq.n	8008ada <HAL_TIM_ConfigClockSource+0x1be>
 8008a20:	2b10      	cmp	r3, #16
 8008a22:	d05a      	beq.n	8008ada <HAL_TIM_ConfigClockSource+0x1be>
 8008a24:	e062      	b.n	8008aec <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008a36:	f000 fdf1 	bl	800961c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008a48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	68ba      	ldr	r2, [r7, #8]
 8008a50:	609a      	str	r2, [r3, #8]
      break;
 8008a52:	e04f      	b.n	8008af4 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008a64:	f000 fdda 	bl	800961c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	689a      	ldr	r2, [r3, #8]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a76:	609a      	str	r2, [r3, #8]
      break;
 8008a78:	e03c      	b.n	8008af4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a86:	461a      	mov	r2, r3
 8008a88:	f000 fd4c 	bl	8009524 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	2150      	movs	r1, #80	; 0x50
 8008a92:	4618      	mov	r0, r3
 8008a94:	f000 fda5 	bl	80095e2 <TIM_ITRx_SetConfig>
      break;
 8008a98:	e02c      	b.n	8008af4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	f000 fd6b 	bl	8009582 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	2160      	movs	r1, #96	; 0x60
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f000 fd95 	bl	80095e2 <TIM_ITRx_SetConfig>
      break;
 8008ab8:	e01c      	b.n	8008af4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	f000 fd2c 	bl	8009524 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2140      	movs	r1, #64	; 0x40
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f000 fd85 	bl	80095e2 <TIM_ITRx_SetConfig>
      break;
 8008ad8:	e00c      	b.n	8008af4 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	4610      	mov	r0, r2
 8008ae6:	f000 fd7c 	bl	80095e2 <TIM_ITRx_SetConfig>
      break;
 8008aea:	e003      	b.n	8008af4 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8008aec:	2301      	movs	r3, #1
 8008aee:	73fb      	strb	r3, [r7, #15]
      break;
 8008af0:	e000      	b.n	8008af4 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 8008af2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2201      	movs	r2, #1
 8008af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2200      	movs	r2, #0
 8008b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3710      	adds	r7, #16
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
 8008b0e:	bf00      	nop
 8008b10:	00100070 	.word	0x00100070
 8008b14:	00100040 	.word	0x00100040
 8008b18:	00100030 	.word	0x00100030
 8008b1c:	00100020 	.word	0x00100020

08008b20 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b083      	sub	sp, #12
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008b28:	bf00      	nop
 8008b2a:	370c      	adds	r7, #12
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr

08008b34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b3c:	bf00      	nop
 8008b3e:	370c      	adds	r7, #12
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr

08008b48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b50:	bf00      	nop
 8008b52:	370c      	adds	r7, #12
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008b64:	bf00      	nop
 8008b66:	370c      	adds	r7, #12
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr

08008b70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b083      	sub	sp, #12
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008b78:	bf00      	nop
 8008b7a:	370c      	adds	r7, #12
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b085      	sub	sp, #20
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	4a68      	ldr	r2, [pc, #416]	; (8008d38 <TIM_Base_SetConfig+0x1b4>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d02b      	beq.n	8008bf4 <TIM_Base_SetConfig+0x70>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	4a67      	ldr	r2, [pc, #412]	; (8008d3c <TIM_Base_SetConfig+0x1b8>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d027      	beq.n	8008bf4 <TIM_Base_SetConfig+0x70>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008baa:	d023      	beq.n	8008bf4 <TIM_Base_SetConfig+0x70>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008bb2:	d01f      	beq.n	8008bf4 <TIM_Base_SetConfig+0x70>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	4a62      	ldr	r2, [pc, #392]	; (8008d40 <TIM_Base_SetConfig+0x1bc>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d01b      	beq.n	8008bf4 <TIM_Base_SetConfig+0x70>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	4a61      	ldr	r2, [pc, #388]	; (8008d44 <TIM_Base_SetConfig+0x1c0>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d017      	beq.n	8008bf4 <TIM_Base_SetConfig+0x70>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	4a60      	ldr	r2, [pc, #384]	; (8008d48 <TIM_Base_SetConfig+0x1c4>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d013      	beq.n	8008bf4 <TIM_Base_SetConfig+0x70>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	4a5f      	ldr	r2, [pc, #380]	; (8008d4c <TIM_Base_SetConfig+0x1c8>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d00f      	beq.n	8008bf4 <TIM_Base_SetConfig+0x70>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	4a5e      	ldr	r2, [pc, #376]	; (8008d50 <TIM_Base_SetConfig+0x1cc>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d00b      	beq.n	8008bf4 <TIM_Base_SetConfig+0x70>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	4a5d      	ldr	r2, [pc, #372]	; (8008d54 <TIM_Base_SetConfig+0x1d0>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d007      	beq.n	8008bf4 <TIM_Base_SetConfig+0x70>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	4a5c      	ldr	r2, [pc, #368]	; (8008d58 <TIM_Base_SetConfig+0x1d4>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d003      	beq.n	8008bf4 <TIM_Base_SetConfig+0x70>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	4a5b      	ldr	r2, [pc, #364]	; (8008d5c <TIM_Base_SetConfig+0x1d8>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d108      	bne.n	8008c06 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	68fa      	ldr	r2, [r7, #12]
 8008c02:	4313      	orrs	r3, r2
 8008c04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4a4b      	ldr	r2, [pc, #300]	; (8008d38 <TIM_Base_SetConfig+0x1b4>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d043      	beq.n	8008c96 <TIM_Base_SetConfig+0x112>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	4a4a      	ldr	r2, [pc, #296]	; (8008d3c <TIM_Base_SetConfig+0x1b8>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d03f      	beq.n	8008c96 <TIM_Base_SetConfig+0x112>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c1c:	d03b      	beq.n	8008c96 <TIM_Base_SetConfig+0x112>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c24:	d037      	beq.n	8008c96 <TIM_Base_SetConfig+0x112>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4a45      	ldr	r2, [pc, #276]	; (8008d40 <TIM_Base_SetConfig+0x1bc>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d033      	beq.n	8008c96 <TIM_Base_SetConfig+0x112>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	4a44      	ldr	r2, [pc, #272]	; (8008d44 <TIM_Base_SetConfig+0x1c0>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d02f      	beq.n	8008c96 <TIM_Base_SetConfig+0x112>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4a43      	ldr	r2, [pc, #268]	; (8008d48 <TIM_Base_SetConfig+0x1c4>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d02b      	beq.n	8008c96 <TIM_Base_SetConfig+0x112>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	4a42      	ldr	r2, [pc, #264]	; (8008d4c <TIM_Base_SetConfig+0x1c8>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d027      	beq.n	8008c96 <TIM_Base_SetConfig+0x112>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	4a41      	ldr	r2, [pc, #260]	; (8008d50 <TIM_Base_SetConfig+0x1cc>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d023      	beq.n	8008c96 <TIM_Base_SetConfig+0x112>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	4a40      	ldr	r2, [pc, #256]	; (8008d54 <TIM_Base_SetConfig+0x1d0>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d01f      	beq.n	8008c96 <TIM_Base_SetConfig+0x112>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	4a3f      	ldr	r2, [pc, #252]	; (8008d58 <TIM_Base_SetConfig+0x1d4>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d01b      	beq.n	8008c96 <TIM_Base_SetConfig+0x112>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	4a3e      	ldr	r2, [pc, #248]	; (8008d5c <TIM_Base_SetConfig+0x1d8>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d017      	beq.n	8008c96 <TIM_Base_SetConfig+0x112>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	4a3d      	ldr	r2, [pc, #244]	; (8008d60 <TIM_Base_SetConfig+0x1dc>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d013      	beq.n	8008c96 <TIM_Base_SetConfig+0x112>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	4a3c      	ldr	r2, [pc, #240]	; (8008d64 <TIM_Base_SetConfig+0x1e0>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d00f      	beq.n	8008c96 <TIM_Base_SetConfig+0x112>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4a3b      	ldr	r2, [pc, #236]	; (8008d68 <TIM_Base_SetConfig+0x1e4>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d00b      	beq.n	8008c96 <TIM_Base_SetConfig+0x112>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4a3a      	ldr	r2, [pc, #232]	; (8008d6c <TIM_Base_SetConfig+0x1e8>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d007      	beq.n	8008c96 <TIM_Base_SetConfig+0x112>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4a39      	ldr	r2, [pc, #228]	; (8008d70 <TIM_Base_SetConfig+0x1ec>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d003      	beq.n	8008c96 <TIM_Base_SetConfig+0x112>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	4a38      	ldr	r2, [pc, #224]	; (8008d74 <TIM_Base_SetConfig+0x1f0>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d108      	bne.n	8008ca8 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	68db      	ldr	r3, [r3, #12]
 8008ca2:	68fa      	ldr	r2, [r7, #12]
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	695b      	ldr	r3, [r3, #20]
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	68fa      	ldr	r2, [r7, #12]
 8008cba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	689a      	ldr	r2, [r3, #8]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	4a1a      	ldr	r2, [pc, #104]	; (8008d38 <TIM_Base_SetConfig+0x1b4>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d023      	beq.n	8008d1c <TIM_Base_SetConfig+0x198>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	4a19      	ldr	r2, [pc, #100]	; (8008d3c <TIM_Base_SetConfig+0x1b8>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d01f      	beq.n	8008d1c <TIM_Base_SetConfig+0x198>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4a1e      	ldr	r2, [pc, #120]	; (8008d58 <TIM_Base_SetConfig+0x1d4>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d01b      	beq.n	8008d1c <TIM_Base_SetConfig+0x198>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a1d      	ldr	r2, [pc, #116]	; (8008d5c <TIM_Base_SetConfig+0x1d8>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d017      	beq.n	8008d1c <TIM_Base_SetConfig+0x198>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4a1c      	ldr	r2, [pc, #112]	; (8008d60 <TIM_Base_SetConfig+0x1dc>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d013      	beq.n	8008d1c <TIM_Base_SetConfig+0x198>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	4a1b      	ldr	r2, [pc, #108]	; (8008d64 <TIM_Base_SetConfig+0x1e0>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d00f      	beq.n	8008d1c <TIM_Base_SetConfig+0x198>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	4a1a      	ldr	r2, [pc, #104]	; (8008d68 <TIM_Base_SetConfig+0x1e4>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d00b      	beq.n	8008d1c <TIM_Base_SetConfig+0x198>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4a19      	ldr	r2, [pc, #100]	; (8008d6c <TIM_Base_SetConfig+0x1e8>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d007      	beq.n	8008d1c <TIM_Base_SetConfig+0x198>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	4a18      	ldr	r2, [pc, #96]	; (8008d70 <TIM_Base_SetConfig+0x1ec>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d003      	beq.n	8008d1c <TIM_Base_SetConfig+0x198>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4a17      	ldr	r2, [pc, #92]	; (8008d74 <TIM_Base_SetConfig+0x1f0>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d103      	bne.n	8008d24 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	691a      	ldr	r2, [r3, #16]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2201      	movs	r2, #1
 8008d28:	615a      	str	r2, [r3, #20]
}
 8008d2a:	bf00      	nop
 8008d2c:	3714      	adds	r7, #20
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d34:	4770      	bx	lr
 8008d36:	bf00      	nop
 8008d38:	40012c00 	.word	0x40012c00
 8008d3c:	50012c00 	.word	0x50012c00
 8008d40:	40000400 	.word	0x40000400
 8008d44:	50000400 	.word	0x50000400
 8008d48:	40000800 	.word	0x40000800
 8008d4c:	50000800 	.word	0x50000800
 8008d50:	40000c00 	.word	0x40000c00
 8008d54:	50000c00 	.word	0x50000c00
 8008d58:	40013400 	.word	0x40013400
 8008d5c:	50013400 	.word	0x50013400
 8008d60:	40014000 	.word	0x40014000
 8008d64:	50014000 	.word	0x50014000
 8008d68:	40014400 	.word	0x40014400
 8008d6c:	50014400 	.word	0x50014400
 8008d70:	40014800 	.word	0x40014800
 8008d74:	50014800 	.word	0x50014800

08008d78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b087      	sub	sp, #28
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6a1b      	ldr	r3, [r3, #32]
 8008d86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6a1b      	ldr	r3, [r3, #32]
 8008d8c:	f023 0201 	bic.w	r2, r3, #1
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	699b      	ldr	r3, [r3, #24]
 8008d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f023 0303 	bic.w	r3, r3, #3
 8008db2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	68fa      	ldr	r2, [r7, #12]
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	f023 0302 	bic.w	r3, r3, #2
 8008dc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	697a      	ldr	r2, [r7, #20]
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	4a40      	ldr	r2, [pc, #256]	; (8008ed4 <TIM_OC1_SetConfig+0x15c>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d023      	beq.n	8008e20 <TIM_OC1_SetConfig+0xa8>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	4a3f      	ldr	r2, [pc, #252]	; (8008ed8 <TIM_OC1_SetConfig+0x160>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d01f      	beq.n	8008e20 <TIM_OC1_SetConfig+0xa8>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	4a3e      	ldr	r2, [pc, #248]	; (8008edc <TIM_OC1_SetConfig+0x164>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d01b      	beq.n	8008e20 <TIM_OC1_SetConfig+0xa8>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	4a3d      	ldr	r2, [pc, #244]	; (8008ee0 <TIM_OC1_SetConfig+0x168>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d017      	beq.n	8008e20 <TIM_OC1_SetConfig+0xa8>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	4a3c      	ldr	r2, [pc, #240]	; (8008ee4 <TIM_OC1_SetConfig+0x16c>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d013      	beq.n	8008e20 <TIM_OC1_SetConfig+0xa8>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	4a3b      	ldr	r2, [pc, #236]	; (8008ee8 <TIM_OC1_SetConfig+0x170>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d00f      	beq.n	8008e20 <TIM_OC1_SetConfig+0xa8>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	4a3a      	ldr	r2, [pc, #232]	; (8008eec <TIM_OC1_SetConfig+0x174>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d00b      	beq.n	8008e20 <TIM_OC1_SetConfig+0xa8>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	4a39      	ldr	r2, [pc, #228]	; (8008ef0 <TIM_OC1_SetConfig+0x178>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d007      	beq.n	8008e20 <TIM_OC1_SetConfig+0xa8>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	4a38      	ldr	r2, [pc, #224]	; (8008ef4 <TIM_OC1_SetConfig+0x17c>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d003      	beq.n	8008e20 <TIM_OC1_SetConfig+0xa8>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	4a37      	ldr	r2, [pc, #220]	; (8008ef8 <TIM_OC1_SetConfig+0x180>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d10c      	bne.n	8008e3a <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	f023 0308 	bic.w	r3, r3, #8
 8008e26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	697a      	ldr	r2, [r7, #20]
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	f023 0304 	bic.w	r3, r3, #4
 8008e38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4a25      	ldr	r2, [pc, #148]	; (8008ed4 <TIM_OC1_SetConfig+0x15c>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d023      	beq.n	8008e8a <TIM_OC1_SetConfig+0x112>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	4a24      	ldr	r2, [pc, #144]	; (8008ed8 <TIM_OC1_SetConfig+0x160>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d01f      	beq.n	8008e8a <TIM_OC1_SetConfig+0x112>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	4a23      	ldr	r2, [pc, #140]	; (8008edc <TIM_OC1_SetConfig+0x164>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d01b      	beq.n	8008e8a <TIM_OC1_SetConfig+0x112>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	4a22      	ldr	r2, [pc, #136]	; (8008ee0 <TIM_OC1_SetConfig+0x168>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d017      	beq.n	8008e8a <TIM_OC1_SetConfig+0x112>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	4a21      	ldr	r2, [pc, #132]	; (8008ee4 <TIM_OC1_SetConfig+0x16c>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d013      	beq.n	8008e8a <TIM_OC1_SetConfig+0x112>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	4a20      	ldr	r2, [pc, #128]	; (8008ee8 <TIM_OC1_SetConfig+0x170>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d00f      	beq.n	8008e8a <TIM_OC1_SetConfig+0x112>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4a1f      	ldr	r2, [pc, #124]	; (8008eec <TIM_OC1_SetConfig+0x174>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d00b      	beq.n	8008e8a <TIM_OC1_SetConfig+0x112>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	4a1e      	ldr	r2, [pc, #120]	; (8008ef0 <TIM_OC1_SetConfig+0x178>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d007      	beq.n	8008e8a <TIM_OC1_SetConfig+0x112>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	4a1d      	ldr	r2, [pc, #116]	; (8008ef4 <TIM_OC1_SetConfig+0x17c>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d003      	beq.n	8008e8a <TIM_OC1_SetConfig+0x112>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	4a1c      	ldr	r2, [pc, #112]	; (8008ef8 <TIM_OC1_SetConfig+0x180>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d111      	bne.n	8008eae <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	695b      	ldr	r3, [r3, #20]
 8008e9e:	693a      	ldr	r2, [r7, #16]
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	699b      	ldr	r3, [r3, #24]
 8008ea8:	693a      	ldr	r2, [r7, #16]
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	693a      	ldr	r2, [r7, #16]
 8008eb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	68fa      	ldr	r2, [r7, #12]
 8008eb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	685a      	ldr	r2, [r3, #4]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	697a      	ldr	r2, [r7, #20]
 8008ec6:	621a      	str	r2, [r3, #32]
}
 8008ec8:	bf00      	nop
 8008eca:	371c      	adds	r7, #28
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr
 8008ed4:	40012c00 	.word	0x40012c00
 8008ed8:	50012c00 	.word	0x50012c00
 8008edc:	40013400 	.word	0x40013400
 8008ee0:	50013400 	.word	0x50013400
 8008ee4:	40014000 	.word	0x40014000
 8008ee8:	50014000 	.word	0x50014000
 8008eec:	40014400 	.word	0x40014400
 8008ef0:	50014400 	.word	0x50014400
 8008ef4:	40014800 	.word	0x40014800
 8008ef8:	50014800 	.word	0x50014800

08008efc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b087      	sub	sp, #28
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6a1b      	ldr	r3, [r3, #32]
 8008f0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6a1b      	ldr	r3, [r3, #32]
 8008f10:	f023 0210 	bic.w	r2, r3, #16
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	699b      	ldr	r3, [r3, #24]
 8008f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	021b      	lsls	r3, r3, #8
 8008f3e:	68fa      	ldr	r2, [r7, #12]
 8008f40:	4313      	orrs	r3, r2
 8008f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	f023 0320 	bic.w	r3, r3, #32
 8008f4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	689b      	ldr	r3, [r3, #8]
 8008f50:	011b      	lsls	r3, r3, #4
 8008f52:	697a      	ldr	r2, [r7, #20]
 8008f54:	4313      	orrs	r3, r2
 8008f56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	4a36      	ldr	r2, [pc, #216]	; (8009034 <TIM_OC2_SetConfig+0x138>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d00b      	beq.n	8008f78 <TIM_OC2_SetConfig+0x7c>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	4a35      	ldr	r2, [pc, #212]	; (8009038 <TIM_OC2_SetConfig+0x13c>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d007      	beq.n	8008f78 <TIM_OC2_SetConfig+0x7c>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	4a34      	ldr	r2, [pc, #208]	; (800903c <TIM_OC2_SetConfig+0x140>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d003      	beq.n	8008f78 <TIM_OC2_SetConfig+0x7c>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	4a33      	ldr	r2, [pc, #204]	; (8009040 <TIM_OC2_SetConfig+0x144>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d10d      	bne.n	8008f94 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	68db      	ldr	r3, [r3, #12]
 8008f84:	011b      	lsls	r3, r3, #4
 8008f86:	697a      	ldr	r2, [r7, #20]
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	4a27      	ldr	r2, [pc, #156]	; (8009034 <TIM_OC2_SetConfig+0x138>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d023      	beq.n	8008fe4 <TIM_OC2_SetConfig+0xe8>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	4a26      	ldr	r2, [pc, #152]	; (8009038 <TIM_OC2_SetConfig+0x13c>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d01f      	beq.n	8008fe4 <TIM_OC2_SetConfig+0xe8>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	4a25      	ldr	r2, [pc, #148]	; (800903c <TIM_OC2_SetConfig+0x140>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d01b      	beq.n	8008fe4 <TIM_OC2_SetConfig+0xe8>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	4a24      	ldr	r2, [pc, #144]	; (8009040 <TIM_OC2_SetConfig+0x144>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d017      	beq.n	8008fe4 <TIM_OC2_SetConfig+0xe8>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	4a23      	ldr	r2, [pc, #140]	; (8009044 <TIM_OC2_SetConfig+0x148>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d013      	beq.n	8008fe4 <TIM_OC2_SetConfig+0xe8>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	4a22      	ldr	r2, [pc, #136]	; (8009048 <TIM_OC2_SetConfig+0x14c>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d00f      	beq.n	8008fe4 <TIM_OC2_SetConfig+0xe8>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	4a21      	ldr	r2, [pc, #132]	; (800904c <TIM_OC2_SetConfig+0x150>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d00b      	beq.n	8008fe4 <TIM_OC2_SetConfig+0xe8>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	4a20      	ldr	r2, [pc, #128]	; (8009050 <TIM_OC2_SetConfig+0x154>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d007      	beq.n	8008fe4 <TIM_OC2_SetConfig+0xe8>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	4a1f      	ldr	r2, [pc, #124]	; (8009054 <TIM_OC2_SetConfig+0x158>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d003      	beq.n	8008fe4 <TIM_OC2_SetConfig+0xe8>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	4a1e      	ldr	r2, [pc, #120]	; (8009058 <TIM_OC2_SetConfig+0x15c>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d113      	bne.n	800900c <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008fea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ff2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	695b      	ldr	r3, [r3, #20]
 8008ff8:	009b      	lsls	r3, r3, #2
 8008ffa:	693a      	ldr	r2, [r7, #16]
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	699b      	ldr	r3, [r3, #24]
 8009004:	009b      	lsls	r3, r3, #2
 8009006:	693a      	ldr	r2, [r7, #16]
 8009008:	4313      	orrs	r3, r2
 800900a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	693a      	ldr	r2, [r7, #16]
 8009010:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	68fa      	ldr	r2, [r7, #12]
 8009016:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	685a      	ldr	r2, [r3, #4]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	697a      	ldr	r2, [r7, #20]
 8009024:	621a      	str	r2, [r3, #32]
}
 8009026:	bf00      	nop
 8009028:	371c      	adds	r7, #28
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	4770      	bx	lr
 8009032:	bf00      	nop
 8009034:	40012c00 	.word	0x40012c00
 8009038:	50012c00 	.word	0x50012c00
 800903c:	40013400 	.word	0x40013400
 8009040:	50013400 	.word	0x50013400
 8009044:	40014000 	.word	0x40014000
 8009048:	50014000 	.word	0x50014000
 800904c:	40014400 	.word	0x40014400
 8009050:	50014400 	.word	0x50014400
 8009054:	40014800 	.word	0x40014800
 8009058:	50014800 	.word	0x50014800

0800905c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800905c:	b480      	push	{r7}
 800905e:	b087      	sub	sp, #28
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6a1b      	ldr	r3, [r3, #32]
 800906a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6a1b      	ldr	r3, [r3, #32]
 8009070:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	69db      	ldr	r3, [r3, #28]
 8009082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800908a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800908e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f023 0303 	bic.w	r3, r3, #3
 8009096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	68fa      	ldr	r2, [r7, #12]
 800909e:	4313      	orrs	r3, r2
 80090a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80090a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	021b      	lsls	r3, r3, #8
 80090b0:	697a      	ldr	r2, [r7, #20]
 80090b2:	4313      	orrs	r3, r2
 80090b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	4a35      	ldr	r2, [pc, #212]	; (8009190 <TIM_OC3_SetConfig+0x134>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d00b      	beq.n	80090d6 <TIM_OC3_SetConfig+0x7a>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	4a34      	ldr	r2, [pc, #208]	; (8009194 <TIM_OC3_SetConfig+0x138>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d007      	beq.n	80090d6 <TIM_OC3_SetConfig+0x7a>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	4a33      	ldr	r2, [pc, #204]	; (8009198 <TIM_OC3_SetConfig+0x13c>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d003      	beq.n	80090d6 <TIM_OC3_SetConfig+0x7a>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	4a32      	ldr	r2, [pc, #200]	; (800919c <TIM_OC3_SetConfig+0x140>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d10d      	bne.n	80090f2 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80090dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	021b      	lsls	r3, r3, #8
 80090e4:	697a      	ldr	r2, [r7, #20]
 80090e6:	4313      	orrs	r3, r2
 80090e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80090f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	4a26      	ldr	r2, [pc, #152]	; (8009190 <TIM_OC3_SetConfig+0x134>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d023      	beq.n	8009142 <TIM_OC3_SetConfig+0xe6>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	4a25      	ldr	r2, [pc, #148]	; (8009194 <TIM_OC3_SetConfig+0x138>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d01f      	beq.n	8009142 <TIM_OC3_SetConfig+0xe6>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	4a24      	ldr	r2, [pc, #144]	; (8009198 <TIM_OC3_SetConfig+0x13c>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d01b      	beq.n	8009142 <TIM_OC3_SetConfig+0xe6>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	4a23      	ldr	r2, [pc, #140]	; (800919c <TIM_OC3_SetConfig+0x140>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d017      	beq.n	8009142 <TIM_OC3_SetConfig+0xe6>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	4a22      	ldr	r2, [pc, #136]	; (80091a0 <TIM_OC3_SetConfig+0x144>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d013      	beq.n	8009142 <TIM_OC3_SetConfig+0xe6>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	4a21      	ldr	r2, [pc, #132]	; (80091a4 <TIM_OC3_SetConfig+0x148>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d00f      	beq.n	8009142 <TIM_OC3_SetConfig+0xe6>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	4a20      	ldr	r2, [pc, #128]	; (80091a8 <TIM_OC3_SetConfig+0x14c>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d00b      	beq.n	8009142 <TIM_OC3_SetConfig+0xe6>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	4a1f      	ldr	r2, [pc, #124]	; (80091ac <TIM_OC3_SetConfig+0x150>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d007      	beq.n	8009142 <TIM_OC3_SetConfig+0xe6>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	4a1e      	ldr	r2, [pc, #120]	; (80091b0 <TIM_OC3_SetConfig+0x154>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d003      	beq.n	8009142 <TIM_OC3_SetConfig+0xe6>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	4a1d      	ldr	r2, [pc, #116]	; (80091b4 <TIM_OC3_SetConfig+0x158>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d113      	bne.n	800916a <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009148:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009150:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	695b      	ldr	r3, [r3, #20]
 8009156:	011b      	lsls	r3, r3, #4
 8009158:	693a      	ldr	r2, [r7, #16]
 800915a:	4313      	orrs	r3, r2
 800915c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	699b      	ldr	r3, [r3, #24]
 8009162:	011b      	lsls	r3, r3, #4
 8009164:	693a      	ldr	r2, [r7, #16]
 8009166:	4313      	orrs	r3, r2
 8009168:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	693a      	ldr	r2, [r7, #16]
 800916e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	68fa      	ldr	r2, [r7, #12]
 8009174:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	685a      	ldr	r2, [r3, #4]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	697a      	ldr	r2, [r7, #20]
 8009182:	621a      	str	r2, [r3, #32]
}
 8009184:	bf00      	nop
 8009186:	371c      	adds	r7, #28
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr
 8009190:	40012c00 	.word	0x40012c00
 8009194:	50012c00 	.word	0x50012c00
 8009198:	40013400 	.word	0x40013400
 800919c:	50013400 	.word	0x50013400
 80091a0:	40014000 	.word	0x40014000
 80091a4:	50014000 	.word	0x50014000
 80091a8:	40014400 	.word	0x40014400
 80091ac:	50014400 	.word	0x50014400
 80091b0:	40014800 	.word	0x40014800
 80091b4:	50014800 	.word	0x50014800

080091b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b087      	sub	sp, #28
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6a1b      	ldr	r3, [r3, #32]
 80091c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6a1b      	ldr	r3, [r3, #32]
 80091cc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	69db      	ldr	r3, [r3, #28]
 80091de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80091e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	021b      	lsls	r3, r3, #8
 80091fa:	68fa      	ldr	r2, [r7, #12]
 80091fc:	4313      	orrs	r3, r2
 80091fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009206:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	031b      	lsls	r3, r3, #12
 800920e:	697a      	ldr	r2, [r7, #20]
 8009210:	4313      	orrs	r3, r2
 8009212:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	4a36      	ldr	r2, [pc, #216]	; (80092f0 <TIM_OC4_SetConfig+0x138>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d00b      	beq.n	8009234 <TIM_OC4_SetConfig+0x7c>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	4a35      	ldr	r2, [pc, #212]	; (80092f4 <TIM_OC4_SetConfig+0x13c>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d007      	beq.n	8009234 <TIM_OC4_SetConfig+0x7c>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	4a34      	ldr	r2, [pc, #208]	; (80092f8 <TIM_OC4_SetConfig+0x140>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d003      	beq.n	8009234 <TIM_OC4_SetConfig+0x7c>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	4a33      	ldr	r2, [pc, #204]	; (80092fc <TIM_OC4_SetConfig+0x144>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d10d      	bne.n	8009250 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800923a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	68db      	ldr	r3, [r3, #12]
 8009240:	031b      	lsls	r3, r3, #12
 8009242:	697a      	ldr	r2, [r7, #20]
 8009244:	4313      	orrs	r3, r2
 8009246:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800924e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	4a27      	ldr	r2, [pc, #156]	; (80092f0 <TIM_OC4_SetConfig+0x138>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d023      	beq.n	80092a0 <TIM_OC4_SetConfig+0xe8>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	4a26      	ldr	r2, [pc, #152]	; (80092f4 <TIM_OC4_SetConfig+0x13c>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d01f      	beq.n	80092a0 <TIM_OC4_SetConfig+0xe8>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	4a25      	ldr	r2, [pc, #148]	; (80092f8 <TIM_OC4_SetConfig+0x140>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d01b      	beq.n	80092a0 <TIM_OC4_SetConfig+0xe8>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	4a24      	ldr	r2, [pc, #144]	; (80092fc <TIM_OC4_SetConfig+0x144>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d017      	beq.n	80092a0 <TIM_OC4_SetConfig+0xe8>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	4a23      	ldr	r2, [pc, #140]	; (8009300 <TIM_OC4_SetConfig+0x148>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d013      	beq.n	80092a0 <TIM_OC4_SetConfig+0xe8>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	4a22      	ldr	r2, [pc, #136]	; (8009304 <TIM_OC4_SetConfig+0x14c>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d00f      	beq.n	80092a0 <TIM_OC4_SetConfig+0xe8>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	4a21      	ldr	r2, [pc, #132]	; (8009308 <TIM_OC4_SetConfig+0x150>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d00b      	beq.n	80092a0 <TIM_OC4_SetConfig+0xe8>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	4a20      	ldr	r2, [pc, #128]	; (800930c <TIM_OC4_SetConfig+0x154>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d007      	beq.n	80092a0 <TIM_OC4_SetConfig+0xe8>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	4a1f      	ldr	r2, [pc, #124]	; (8009310 <TIM_OC4_SetConfig+0x158>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d003      	beq.n	80092a0 <TIM_OC4_SetConfig+0xe8>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	4a1e      	ldr	r2, [pc, #120]	; (8009314 <TIM_OC4_SetConfig+0x15c>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d113      	bne.n	80092c8 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80092a6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80092ae:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	695b      	ldr	r3, [r3, #20]
 80092b4:	019b      	lsls	r3, r3, #6
 80092b6:	693a      	ldr	r2, [r7, #16]
 80092b8:	4313      	orrs	r3, r2
 80092ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	699b      	ldr	r3, [r3, #24]
 80092c0:	019b      	lsls	r3, r3, #6
 80092c2:	693a      	ldr	r2, [r7, #16]
 80092c4:	4313      	orrs	r3, r2
 80092c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	693a      	ldr	r2, [r7, #16]
 80092cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	68fa      	ldr	r2, [r7, #12]
 80092d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	685a      	ldr	r2, [r3, #4]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	697a      	ldr	r2, [r7, #20]
 80092e0:	621a      	str	r2, [r3, #32]
}
 80092e2:	bf00      	nop
 80092e4:	371c      	adds	r7, #28
 80092e6:	46bd      	mov	sp, r7
 80092e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ec:	4770      	bx	lr
 80092ee:	bf00      	nop
 80092f0:	40012c00 	.word	0x40012c00
 80092f4:	50012c00 	.word	0x50012c00
 80092f8:	40013400 	.word	0x40013400
 80092fc:	50013400 	.word	0x50013400
 8009300:	40014000 	.word	0x40014000
 8009304:	50014000 	.word	0x50014000
 8009308:	40014400 	.word	0x40014400
 800930c:	50014400 	.word	0x50014400
 8009310:	40014800 	.word	0x40014800
 8009314:	50014800 	.word	0x50014800

08009318 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009318:	b480      	push	{r7}
 800931a:	b087      	sub	sp, #28
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6a1b      	ldr	r3, [r3, #32]
 8009326:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6a1b      	ldr	r3, [r3, #32]
 800932c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800933e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800934a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	68fa      	ldr	r2, [r7, #12]
 8009352:	4313      	orrs	r3, r2
 8009354:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800935c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	689b      	ldr	r3, [r3, #8]
 8009362:	041b      	lsls	r3, r3, #16
 8009364:	693a      	ldr	r2, [r7, #16]
 8009366:	4313      	orrs	r3, r2
 8009368:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	4a21      	ldr	r2, [pc, #132]	; (80093f4 <TIM_OC5_SetConfig+0xdc>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d023      	beq.n	80093ba <TIM_OC5_SetConfig+0xa2>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	4a20      	ldr	r2, [pc, #128]	; (80093f8 <TIM_OC5_SetConfig+0xe0>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d01f      	beq.n	80093ba <TIM_OC5_SetConfig+0xa2>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	4a1f      	ldr	r2, [pc, #124]	; (80093fc <TIM_OC5_SetConfig+0xe4>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d01b      	beq.n	80093ba <TIM_OC5_SetConfig+0xa2>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	4a1e      	ldr	r2, [pc, #120]	; (8009400 <TIM_OC5_SetConfig+0xe8>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d017      	beq.n	80093ba <TIM_OC5_SetConfig+0xa2>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	4a1d      	ldr	r2, [pc, #116]	; (8009404 <TIM_OC5_SetConfig+0xec>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d013      	beq.n	80093ba <TIM_OC5_SetConfig+0xa2>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	4a1c      	ldr	r2, [pc, #112]	; (8009408 <TIM_OC5_SetConfig+0xf0>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d00f      	beq.n	80093ba <TIM_OC5_SetConfig+0xa2>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	4a1b      	ldr	r2, [pc, #108]	; (800940c <TIM_OC5_SetConfig+0xf4>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d00b      	beq.n	80093ba <TIM_OC5_SetConfig+0xa2>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	4a1a      	ldr	r2, [pc, #104]	; (8009410 <TIM_OC5_SetConfig+0xf8>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d007      	beq.n	80093ba <TIM_OC5_SetConfig+0xa2>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	4a19      	ldr	r2, [pc, #100]	; (8009414 <TIM_OC5_SetConfig+0xfc>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d003      	beq.n	80093ba <TIM_OC5_SetConfig+0xa2>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	4a18      	ldr	r2, [pc, #96]	; (8009418 <TIM_OC5_SetConfig+0x100>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d109      	bne.n	80093ce <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	695b      	ldr	r3, [r3, #20]
 80093c6:	021b      	lsls	r3, r3, #8
 80093c8:	697a      	ldr	r2, [r7, #20]
 80093ca:	4313      	orrs	r3, r2
 80093cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	697a      	ldr	r2, [r7, #20]
 80093d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	68fa      	ldr	r2, [r7, #12]
 80093d8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	685a      	ldr	r2, [r3, #4]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	693a      	ldr	r2, [r7, #16]
 80093e6:	621a      	str	r2, [r3, #32]
}
 80093e8:	bf00      	nop
 80093ea:	371c      	adds	r7, #28
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr
 80093f4:	40012c00 	.word	0x40012c00
 80093f8:	50012c00 	.word	0x50012c00
 80093fc:	40013400 	.word	0x40013400
 8009400:	50013400 	.word	0x50013400
 8009404:	40014000 	.word	0x40014000
 8009408:	50014000 	.word	0x50014000
 800940c:	40014400 	.word	0x40014400
 8009410:	50014400 	.word	0x50014400
 8009414:	40014800 	.word	0x40014800
 8009418:	50014800 	.word	0x50014800

0800941c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800941c:	b480      	push	{r7}
 800941e:	b087      	sub	sp, #28
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6a1b      	ldr	r3, [r3, #32]
 800942a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6a1b      	ldr	r3, [r3, #32]
 8009430:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800944a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800944e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	021b      	lsls	r3, r3, #8
 8009456:	68fa      	ldr	r2, [r7, #12]
 8009458:	4313      	orrs	r3, r2
 800945a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009462:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	051b      	lsls	r3, r3, #20
 800946a:	693a      	ldr	r2, [r7, #16]
 800946c:	4313      	orrs	r3, r2
 800946e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	4a22      	ldr	r2, [pc, #136]	; (80094fc <TIM_OC6_SetConfig+0xe0>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d023      	beq.n	80094c0 <TIM_OC6_SetConfig+0xa4>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	4a21      	ldr	r2, [pc, #132]	; (8009500 <TIM_OC6_SetConfig+0xe4>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d01f      	beq.n	80094c0 <TIM_OC6_SetConfig+0xa4>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	4a20      	ldr	r2, [pc, #128]	; (8009504 <TIM_OC6_SetConfig+0xe8>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d01b      	beq.n	80094c0 <TIM_OC6_SetConfig+0xa4>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	4a1f      	ldr	r2, [pc, #124]	; (8009508 <TIM_OC6_SetConfig+0xec>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d017      	beq.n	80094c0 <TIM_OC6_SetConfig+0xa4>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	4a1e      	ldr	r2, [pc, #120]	; (800950c <TIM_OC6_SetConfig+0xf0>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d013      	beq.n	80094c0 <TIM_OC6_SetConfig+0xa4>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	4a1d      	ldr	r2, [pc, #116]	; (8009510 <TIM_OC6_SetConfig+0xf4>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d00f      	beq.n	80094c0 <TIM_OC6_SetConfig+0xa4>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	4a1c      	ldr	r2, [pc, #112]	; (8009514 <TIM_OC6_SetConfig+0xf8>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d00b      	beq.n	80094c0 <TIM_OC6_SetConfig+0xa4>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	4a1b      	ldr	r2, [pc, #108]	; (8009518 <TIM_OC6_SetConfig+0xfc>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d007      	beq.n	80094c0 <TIM_OC6_SetConfig+0xa4>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	4a1a      	ldr	r2, [pc, #104]	; (800951c <TIM_OC6_SetConfig+0x100>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d003      	beq.n	80094c0 <TIM_OC6_SetConfig+0xa4>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	4a19      	ldr	r2, [pc, #100]	; (8009520 <TIM_OC6_SetConfig+0x104>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d109      	bne.n	80094d4 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80094c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	695b      	ldr	r3, [r3, #20]
 80094cc:	029b      	lsls	r3, r3, #10
 80094ce:	697a      	ldr	r2, [r7, #20]
 80094d0:	4313      	orrs	r3, r2
 80094d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	697a      	ldr	r2, [r7, #20]
 80094d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	68fa      	ldr	r2, [r7, #12]
 80094de:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	685a      	ldr	r2, [r3, #4]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	693a      	ldr	r2, [r7, #16]
 80094ec:	621a      	str	r2, [r3, #32]
}
 80094ee:	bf00      	nop
 80094f0:	371c      	adds	r7, #28
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr
 80094fa:	bf00      	nop
 80094fc:	40012c00 	.word	0x40012c00
 8009500:	50012c00 	.word	0x50012c00
 8009504:	40013400 	.word	0x40013400
 8009508:	50013400 	.word	0x50013400
 800950c:	40014000 	.word	0x40014000
 8009510:	50014000 	.word	0x50014000
 8009514:	40014400 	.word	0x40014400
 8009518:	50014400 	.word	0x50014400
 800951c:	40014800 	.word	0x40014800
 8009520:	50014800 	.word	0x50014800

08009524 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009524:	b480      	push	{r7}
 8009526:	b087      	sub	sp, #28
 8009528:	af00      	add	r7, sp, #0
 800952a:	60f8      	str	r0, [r7, #12]
 800952c:	60b9      	str	r1, [r7, #8]
 800952e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	6a1b      	ldr	r3, [r3, #32]
 8009534:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	6a1b      	ldr	r3, [r3, #32]
 800953a:	f023 0201 	bic.w	r2, r3, #1
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	699b      	ldr	r3, [r3, #24]
 8009546:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800954e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	011b      	lsls	r3, r3, #4
 8009554:	693a      	ldr	r2, [r7, #16]
 8009556:	4313      	orrs	r3, r2
 8009558:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	f023 030a 	bic.w	r3, r3, #10
 8009560:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009562:	697a      	ldr	r2, [r7, #20]
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	4313      	orrs	r3, r2
 8009568:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	693a      	ldr	r2, [r7, #16]
 800956e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	697a      	ldr	r2, [r7, #20]
 8009574:	621a      	str	r2, [r3, #32]
}
 8009576:	bf00      	nop
 8009578:	371c      	adds	r7, #28
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr

08009582 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009582:	b480      	push	{r7}
 8009584:	b087      	sub	sp, #28
 8009586:	af00      	add	r7, sp, #0
 8009588:	60f8      	str	r0, [r7, #12]
 800958a:	60b9      	str	r1, [r7, #8]
 800958c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	6a1b      	ldr	r3, [r3, #32]
 8009592:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	6a1b      	ldr	r3, [r3, #32]
 8009598:	f023 0210 	bic.w	r2, r3, #16
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	699b      	ldr	r3, [r3, #24]
 80095a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80095ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	031b      	lsls	r3, r3, #12
 80095b2:	693a      	ldr	r2, [r7, #16]
 80095b4:	4313      	orrs	r3, r2
 80095b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80095be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	011b      	lsls	r3, r3, #4
 80095c4:	697a      	ldr	r2, [r7, #20]
 80095c6:	4313      	orrs	r3, r2
 80095c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	693a      	ldr	r2, [r7, #16]
 80095ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	697a      	ldr	r2, [r7, #20]
 80095d4:	621a      	str	r2, [r3, #32]
}
 80095d6:	bf00      	nop
 80095d8:	371c      	adds	r7, #28
 80095da:	46bd      	mov	sp, r7
 80095dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e0:	4770      	bx	lr

080095e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80095e2:	b480      	push	{r7}
 80095e4:	b085      	sub	sp, #20
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
 80095ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	689b      	ldr	r3, [r3, #8]
 80095f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80095f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80095fe:	683a      	ldr	r2, [r7, #0]
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	4313      	orrs	r3, r2
 8009604:	f043 0307 	orr.w	r3, r3, #7
 8009608:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	68fa      	ldr	r2, [r7, #12]
 800960e:	609a      	str	r2, [r3, #8]
}
 8009610:	bf00      	nop
 8009612:	3714      	adds	r7, #20
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800961c:	b480      	push	{r7}
 800961e:	b087      	sub	sp, #28
 8009620:	af00      	add	r7, sp, #0
 8009622:	60f8      	str	r0, [r7, #12]
 8009624:	60b9      	str	r1, [r7, #8]
 8009626:	607a      	str	r2, [r7, #4]
 8009628:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009636:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	021a      	lsls	r2, r3, #8
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	431a      	orrs	r2, r3
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	4313      	orrs	r3, r2
 8009644:	697a      	ldr	r2, [r7, #20]
 8009646:	4313      	orrs	r3, r2
 8009648:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	697a      	ldr	r2, [r7, #20]
 800964e:	609a      	str	r2, [r3, #8]
}
 8009650:	bf00      	nop
 8009652:	371c      	adds	r7, #28
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800965c:	b480      	push	{r7}
 800965e:	b087      	sub	sp, #28
 8009660:	af00      	add	r7, sp, #0
 8009662:	60f8      	str	r0, [r7, #12]
 8009664:	60b9      	str	r1, [r7, #8]
 8009666:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	f003 031f 	and.w	r3, r3, #31
 800966e:	2201      	movs	r2, #1
 8009670:	fa02 f303 	lsl.w	r3, r2, r3
 8009674:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	6a1a      	ldr	r2, [r3, #32]
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	43db      	mvns	r3, r3
 800967e:	401a      	ands	r2, r3
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	6a1a      	ldr	r2, [r3, #32]
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	f003 031f 	and.w	r3, r3, #31
 800968e:	6879      	ldr	r1, [r7, #4]
 8009690:	fa01 f303 	lsl.w	r3, r1, r3
 8009694:	431a      	orrs	r2, r3
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	621a      	str	r2, [r3, #32]
}
 800969a:	bf00      	nop
 800969c:	371c      	adds	r7, #28
 800969e:	46bd      	mov	sp, r7
 80096a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a4:	4770      	bx	lr
	...

080096a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b085      	sub	sp, #20
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	d101      	bne.n	80096c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80096bc:	2302      	movs	r3, #2
 80096be:	e097      	b.n	80097f0 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2201      	movs	r2, #1
 80096c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2202      	movs	r2, #2
 80096cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	689b      	ldr	r3, [r3, #8]
 80096de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a45      	ldr	r2, [pc, #276]	; (80097fc <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d00e      	beq.n	8009708 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a44      	ldr	r2, [pc, #272]	; (8009800 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d009      	beq.n	8009708 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a42      	ldr	r2, [pc, #264]	; (8009804 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d004      	beq.n	8009708 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4a41      	ldr	r2, [pc, #260]	; (8009808 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d108      	bne.n	800971a <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800970e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	68fa      	ldr	r2, [r7, #12]
 8009716:	4313      	orrs	r3, r2
 8009718:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009724:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	68fa      	ldr	r2, [r7, #12]
 800972c:	4313      	orrs	r3, r2
 800972e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	68fa      	ldr	r2, [r7, #12]
 8009736:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a2f      	ldr	r2, [pc, #188]	; (80097fc <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d040      	beq.n	80097c4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	4a2e      	ldr	r2, [pc, #184]	; (8009800 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d03b      	beq.n	80097c4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009754:	d036      	beq.n	80097c4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800975e:	d031      	beq.n	80097c4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a29      	ldr	r2, [pc, #164]	; (800980c <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d02c      	beq.n	80097c4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4a28      	ldr	r2, [pc, #160]	; (8009810 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d027      	beq.n	80097c4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a26      	ldr	r2, [pc, #152]	; (8009814 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d022      	beq.n	80097c4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4a25      	ldr	r2, [pc, #148]	; (8009818 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d01d      	beq.n	80097c4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4a23      	ldr	r2, [pc, #140]	; (800981c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d018      	beq.n	80097c4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4a22      	ldr	r2, [pc, #136]	; (8009820 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d013      	beq.n	80097c4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a18      	ldr	r2, [pc, #96]	; (8009804 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d00e      	beq.n	80097c4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4a17      	ldr	r2, [pc, #92]	; (8009808 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d009      	beq.n	80097c4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4a1b      	ldr	r2, [pc, #108]	; (8009824 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d004      	beq.n	80097c4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4a1a      	ldr	r2, [pc, #104]	; (8009828 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d10c      	bne.n	80097de <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	689b      	ldr	r3, [r3, #8]
 80097d0:	68ba      	ldr	r2, [r7, #8]
 80097d2:	4313      	orrs	r3, r2
 80097d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	68ba      	ldr	r2, [r7, #8]
 80097dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2201      	movs	r2, #1
 80097e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2200      	movs	r2, #0
 80097ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80097ee:	2300      	movs	r3, #0
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3714      	adds	r7, #20
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr
 80097fc:	40012c00 	.word	0x40012c00
 8009800:	50012c00 	.word	0x50012c00
 8009804:	40013400 	.word	0x40013400
 8009808:	50013400 	.word	0x50013400
 800980c:	40000400 	.word	0x40000400
 8009810:	50000400 	.word	0x50000400
 8009814:	40000800 	.word	0x40000800
 8009818:	50000800 	.word	0x50000800
 800981c:	40000c00 	.word	0x40000c00
 8009820:	50000c00 	.word	0x50000c00
 8009824:	40014000 	.word	0x40014000
 8009828:	50014000 	.word	0x50014000

0800982c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800982c:	b480      	push	{r7}
 800982e:	b083      	sub	sp, #12
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009834:	bf00      	nop
 8009836:	370c      	adds	r7, #12
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr

08009840 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009840:	b480      	push	{r7}
 8009842:	b083      	sub	sp, #12
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009848:	bf00      	nop
 800984a:	370c      	adds	r7, #12
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr

08009854 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800985c:	bf00      	nop
 800985e:	370c      	adds	r7, #12
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009870:	bf00      	nop
 8009872:	370c      	adds	r7, #12
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr

0800987c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009884:	bf00      	nop
 8009886:	370c      	adds	r7, #12
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009890:	b480      	push	{r7}
 8009892:	b083      	sub	sp, #12
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009898:	bf00      	nop
 800989a:	370c      	adds	r7, #12
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr

080098a4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80098ac:	bf00      	nop
 80098ae:	370c      	adds	r7, #12
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d101      	bne.n	80098ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80098c6:	2301      	movs	r3, #1
 80098c8:	e042      	b.n	8009950 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d106      	bne.n	80098e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2200      	movs	r2, #0
 80098d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f7f7 fc97 	bl	8001210 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2224      	movs	r2, #36	; 0x24
 80098e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f022 0201 	bic.w	r2, r2, #1
 80098f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d002      	beq.n	8009908 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f000 fd48 	bl	800a398 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f000 fba3 	bl	800a054 <UART_SetConfig>
 800990e:	4603      	mov	r3, r0
 8009910:	2b01      	cmp	r3, #1
 8009912:	d101      	bne.n	8009918 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009914:	2301      	movs	r3, #1
 8009916:	e01b      	b.n	8009950 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	685a      	ldr	r2, [r3, #4]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009926:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	689a      	ldr	r2, [r3, #8]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009936:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f042 0201 	orr.w	r2, r2, #1
 8009946:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f000 fdc7 	bl	800a4dc <UART_CheckIdleState>
 800994e:	4603      	mov	r3, r0
}
 8009950:	4618      	mov	r0, r3
 8009952:	3708      	adds	r7, #8
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b08a      	sub	sp, #40	; 0x28
 800995c:	af02      	add	r7, sp, #8
 800995e:	60f8      	str	r0, [r7, #12]
 8009960:	60b9      	str	r1, [r7, #8]
 8009962:	603b      	str	r3, [r7, #0]
 8009964:	4613      	mov	r3, r2
 8009966:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800996e:	2b20      	cmp	r3, #32
 8009970:	f040 808b 	bne.w	8009a8a <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d002      	beq.n	8009980 <HAL_UART_Transmit+0x28>
 800997a:	88fb      	ldrh	r3, [r7, #6]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d101      	bne.n	8009984 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009980:	2301      	movs	r3, #1
 8009982:	e083      	b.n	8009a8c <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	689b      	ldr	r3, [r3, #8]
 800998a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800998e:	2b80      	cmp	r3, #128	; 0x80
 8009990:	d107      	bne.n	80099a2 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	689a      	ldr	r2, [r3, #8]
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80099a0:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2200      	movs	r2, #0
 80099a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2221      	movs	r2, #33	; 0x21
 80099ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80099b2:	f7f7 ff9d 	bl	80018f0 <HAL_GetTick>
 80099b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	88fa      	ldrh	r2, [r7, #6]
 80099bc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	88fa      	ldrh	r2, [r7, #6]
 80099c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	689b      	ldr	r3, [r3, #8]
 80099cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099d0:	d108      	bne.n	80099e4 <HAL_UART_Transmit+0x8c>
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	691b      	ldr	r3, [r3, #16]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d104      	bne.n	80099e4 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 80099da:	2300      	movs	r3, #0
 80099dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	61bb      	str	r3, [r7, #24]
 80099e2:	e003      	b.n	80099ec <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80099e8:	2300      	movs	r3, #0
 80099ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80099ec:	e030      	b.n	8009a50 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	9300      	str	r3, [sp, #0]
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	2200      	movs	r2, #0
 80099f6:	2180      	movs	r1, #128	; 0x80
 80099f8:	68f8      	ldr	r0, [r7, #12]
 80099fa:	f000 fe19 	bl	800a630 <UART_WaitOnFlagUntilTimeout>
 80099fe:	4603      	mov	r3, r0
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d005      	beq.n	8009a10 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2220      	movs	r2, #32
 8009a08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8009a0c:	2303      	movs	r3, #3
 8009a0e:	e03d      	b.n	8009a8c <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8009a10:	69fb      	ldr	r3, [r7, #28]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d10b      	bne.n	8009a2e <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009a16:	69bb      	ldr	r3, [r7, #24]
 8009a18:	881b      	ldrh	r3, [r3, #0]
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a24:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009a26:	69bb      	ldr	r3, [r7, #24]
 8009a28:	3302      	adds	r3, #2
 8009a2a:	61bb      	str	r3, [r7, #24]
 8009a2c:	e007      	b.n	8009a3e <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009a2e:	69fb      	ldr	r3, [r7, #28]
 8009a30:	781a      	ldrb	r2, [r3, #0]
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009a38:	69fb      	ldr	r3, [r7, #28]
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009a44:	b29b      	uxth	r3, r3
 8009a46:	3b01      	subs	r3, #1
 8009a48:	b29a      	uxth	r2, r3
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d1c8      	bne.n	80099ee <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	9300      	str	r3, [sp, #0]
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	2200      	movs	r2, #0
 8009a64:	2140      	movs	r1, #64	; 0x40
 8009a66:	68f8      	ldr	r0, [r7, #12]
 8009a68:	f000 fde2 	bl	800a630 <UART_WaitOnFlagUntilTimeout>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d005      	beq.n	8009a7e <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2220      	movs	r2, #32
 8009a76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8009a7a:	2303      	movs	r3, #3
 8009a7c:	e006      	b.n	8009a8c <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2220      	movs	r2, #32
 8009a82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8009a86:	2300      	movs	r3, #0
 8009a88:	e000      	b.n	8009a8c <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8009a8a:	2302      	movs	r3, #2
  }
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3720      	adds	r7, #32
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b0ae      	sub	sp, #184	; 0xb8
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	69db      	ldr	r3, [r3, #28]
 8009aa2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009aba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009abe:	f640 030f 	movw	r3, #2063	; 0x80f
 8009ac2:	4013      	ands	r3, r2
 8009ac4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (errorflags == 0U)
 8009ac8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d11b      	bne.n	8009b08 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009ad0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009ad4:	f003 0320 	and.w	r3, r3, #32
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d015      	beq.n	8009b08 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009adc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009ae0:	f003 0320 	and.w	r3, r3, #32
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d105      	bne.n	8009af4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009ae8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d009      	beq.n	8009b08 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	f000 827e 	beq.w	8009ffa <HAL_UART_IRQHandler+0x566>
      {
        huart->RxISR(huart);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	4798      	blx	r3
      }
      return;
 8009b06:	e278      	b.n	8009ffa <HAL_UART_IRQHandler+0x566>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009b08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	f000 80fd 	beq.w	8009d0c <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009b12:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009b16:	4b7a      	ldr	r3, [pc, #488]	; (8009d00 <HAL_UART_IRQHandler+0x26c>)
 8009b18:	4013      	ands	r3, r2
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d106      	bne.n	8009b2c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009b1e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009b22:	4b78      	ldr	r3, [pc, #480]	; (8009d04 <HAL_UART_IRQHandler+0x270>)
 8009b24:	4013      	ands	r3, r2
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	f000 80f0 	beq.w	8009d0c <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009b2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009b30:	f003 0301 	and.w	r3, r3, #1
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d011      	beq.n	8009b5c <HAL_UART_IRQHandler+0xc8>
 8009b38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d00b      	beq.n	8009b5c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	2201      	movs	r2, #1
 8009b4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b52:	f043 0201 	orr.w	r2, r3, #1
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009b60:	f003 0302 	and.w	r3, r3, #2
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d011      	beq.n	8009b8c <HAL_UART_IRQHandler+0xf8>
 8009b68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b6c:	f003 0301 	and.w	r3, r3, #1
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d00b      	beq.n	8009b8c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	2202      	movs	r2, #2
 8009b7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b82:	f043 0204 	orr.w	r2, r3, #4
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009b90:	f003 0304 	and.w	r3, r3, #4
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d011      	beq.n	8009bbc <HAL_UART_IRQHandler+0x128>
 8009b98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b9c:	f003 0301 	and.w	r3, r3, #1
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d00b      	beq.n	8009bbc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	2204      	movs	r2, #4
 8009baa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bb2:	f043 0202 	orr.w	r2, r3, #2
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009bbc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009bc0:	f003 0308 	and.w	r3, r3, #8
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d017      	beq.n	8009bf8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009bc8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009bcc:	f003 0320 	and.w	r3, r3, #32
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d105      	bne.n	8009be0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009bd4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009bd8:	4b49      	ldr	r3, [pc, #292]	; (8009d00 <HAL_UART_IRQHandler+0x26c>)
 8009bda:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d00b      	beq.n	8009bf8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	2208      	movs	r2, #8
 8009be6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bee:	f043 0208 	orr.w	r2, r3, #8
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009bf8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009bfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d012      	beq.n	8009c2a <HAL_UART_IRQHandler+0x196>
 8009c04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009c08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d00c      	beq.n	8009c2a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009c18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c20:	f043 0220 	orr.w	r2, r3, #32
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	f000 81e4 	beq.w	8009ffe <HAL_UART_IRQHandler+0x56a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009c36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009c3a:	f003 0320 	and.w	r3, r3, #32
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d013      	beq.n	8009c6a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009c42:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009c46:	f003 0320 	and.w	r3, r3, #32
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d105      	bne.n	8009c5a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009c4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d007      	beq.n	8009c6a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d003      	beq.n	8009c6a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	689b      	ldr	r3, [r3, #8]
 8009c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c7e:	2b40      	cmp	r3, #64	; 0x40
 8009c80:	d005      	beq.n	8009c8e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009c82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009c86:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d02e      	beq.n	8009cec <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f000 fd35 	bl	800a6fe <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	689b      	ldr	r3, [r3, #8]
 8009c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c9e:	2b40      	cmp	r3, #64	; 0x40
 8009ca0:	d120      	bne.n	8009ce4 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d017      	beq.n	8009cdc <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009cb2:	4a15      	ldr	r2, [pc, #84]	; (8009d08 <HAL_UART_IRQHandler+0x274>)
 8009cb4:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f7f8 fd6f 	bl	80027a0 <HAL_DMA_Abort_IT>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d019      	beq.n	8009cfc <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009cce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cd0:	687a      	ldr	r2, [r7, #4]
 8009cd2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8009cd6:	4610      	mov	r0, r2
 8009cd8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cda:	e00f      	b.n	8009cfc <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 f9a3 	bl	800a028 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ce2:	e00b      	b.n	8009cfc <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f000 f99f 	bl	800a028 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cea:	e007      	b.n	8009cfc <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f000 f99b 	bl	800a028 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8009cfa:	e180      	b.n	8009ffe <HAL_UART_IRQHandler+0x56a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cfc:	bf00      	nop
    return;
 8009cfe:	e17e      	b.n	8009ffe <HAL_UART_IRQHandler+0x56a>
 8009d00:	10000001 	.word	0x10000001
 8009d04:	04000120 	.word	0x04000120
 8009d08:	0800a7cb 	.word	0x0800a7cb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d10:	2b01      	cmp	r3, #1
 8009d12:	f040 8129 	bne.w	8009f68 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009d16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009d1a:	f003 0310 	and.w	r3, r3, #16
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	f000 8122 	beq.w	8009f68 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009d24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009d28:	f003 0310 	and.w	r3, r3, #16
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	f000 811b 	beq.w	8009f68 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	2210      	movs	r2, #16
 8009d38:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	689b      	ldr	r3, [r3, #8]
 8009d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d44:	2b40      	cmp	r3, #64	; 0x40
 8009d46:	f040 8091 	bne.w	8009e6c <HAL_UART_IRQHandler+0x3d8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d54:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
      if ((nb_remaining_rx_data > 0U)
 8009d58:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	f000 8150 	beq.w	800a002 <HAL_UART_IRQHandler+0x56e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009d68:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8009d6c:	429a      	cmp	r2, r3
 8009d6e:	f080 8148 	bcs.w	800a002 <HAL_UART_IRQHandler+0x56e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8009d78:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d84:	2b81      	cmp	r3, #129	; 0x81
 8009d86:	d060      	beq.n	8009e4a <HAL_UART_IRQHandler+0x3b6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d90:	e853 3f00 	ldrex	r3, [r3]
 8009d94:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009d96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	461a      	mov	r2, r3
 8009da6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009daa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009dae:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009db0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009db2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009db6:	e841 2300 	strex	r3, r2, [r1]
 8009dba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009dbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d1e2      	bne.n	8009d88 <HAL_UART_IRQHandler+0x2f4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	3308      	adds	r3, #8
 8009dc8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009dcc:	e853 3f00 	ldrex	r3, [r3]
 8009dd0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009dd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009dd4:	f023 0301 	bic.w	r3, r3, #1
 8009dd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	3308      	adds	r3, #8
 8009de2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009de6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009de8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009dec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009dee:	e841 2300 	strex	r3, r2, [r1]
 8009df2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009df4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d1e3      	bne.n	8009dc2 <HAL_UART_IRQHandler+0x32e>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2220      	movs	r2, #32
 8009dfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2200      	movs	r2, #0
 8009e06:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e10:	e853 3f00 	ldrex	r3, [r3]
 8009e14:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009e16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e18:	f023 0310 	bic.w	r3, r3, #16
 8009e1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	461a      	mov	r2, r3
 8009e26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009e2a:	65bb      	str	r3, [r7, #88]	; 0x58
 8009e2c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e2e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009e30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009e32:	e841 2300 	strex	r3, r2, [r1]
 8009e36:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009e38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d1e4      	bne.n	8009e08 <HAL_UART_IRQHandler+0x374>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e44:	4618      	mov	r0, r3
 8009e46:	f7f8 fc2f 	bl	80026a8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2202      	movs	r2, #2
 8009e4e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e5c:	b29b      	uxth	r3, r3
 8009e5e:	1ad3      	subs	r3, r2, r3
 8009e60:	b29b      	uxth	r3, r3
 8009e62:	4619      	mov	r1, r3
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f000 f8e9 	bl	800a03c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009e6a:	e0ca      	b.n	800a002 <HAL_UART_IRQHandler+0x56e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e78:	b29b      	uxth	r3, r3
 8009e7a:	1ad3      	subs	r3, r2, r3
 8009e7c:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
      if ((huart->RxXferCount > 0U)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e86:	b29b      	uxth	r3, r3
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	f000 80bc 	beq.w	800a006 <HAL_UART_IRQHandler+0x572>
          && (nb_rx_data > 0U))
 8009e8e:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	f000 80b7 	beq.w	800a006 <HAL_UART_IRQHandler+0x572>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ea0:	e853 3f00 	ldrex	r3, [r3]
 8009ea4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ea8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009eac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009eba:	647b      	str	r3, [r7, #68]	; 0x44
 8009ebc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ebe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009ec0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ec2:	e841 2300 	strex	r3, r2, [r1]
 8009ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d1e4      	bne.n	8009e98 <HAL_UART_IRQHandler+0x404>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	3308      	adds	r3, #8
 8009ed4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed8:	e853 3f00 	ldrex	r3, [r3]
 8009edc:	623b      	str	r3, [r7, #32]
   return(result);
 8009ede:	6a3b      	ldr	r3, [r7, #32]
 8009ee0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ee4:	f023 0301 	bic.w	r3, r3, #1
 8009ee8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	3308      	adds	r3, #8
 8009ef2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009ef6:	633a      	str	r2, [r7, #48]	; 0x30
 8009ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009efa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009efc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009efe:	e841 2300 	strex	r3, r2, [r1]
 8009f02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d1e1      	bne.n	8009ece <HAL_UART_IRQHandler+0x43a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2220      	movs	r2, #32
 8009f0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2200      	movs	r2, #0
 8009f16:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	e853 3f00 	ldrex	r3, [r3]
 8009f2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f023 0310 	bic.w	r3, r3, #16
 8009f32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	461a      	mov	r2, r3
 8009f3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009f40:	61fb      	str	r3, [r7, #28]
 8009f42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f44:	69b9      	ldr	r1, [r7, #24]
 8009f46:	69fa      	ldr	r2, [r7, #28]
 8009f48:	e841 2300 	strex	r3, r2, [r1]
 8009f4c:	617b      	str	r3, [r7, #20]
   return(result);
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d1e4      	bne.n	8009f1e <HAL_UART_IRQHandler+0x48a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2202      	movs	r2, #2
 8009f58:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009f5a:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8009f5e:	4619      	mov	r1, r3
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f000 f86b 	bl	800a03c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009f66:	e04e      	b.n	800a006 <HAL_UART_IRQHandler+0x572>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009f68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d014      	beq.n	8009f9e <HAL_UART_IRQHandler+0x50a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009f74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d105      	bne.n	8009f8c <HAL_UART_IRQHandler+0x4f8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009f80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009f84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d008      	beq.n	8009f9e <HAL_UART_IRQHandler+0x50a>
  {
    if (huart->TxISR != NULL)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d03a      	beq.n	800a00a <HAL_UART_IRQHandler+0x576>
    {
      huart->TxISR(huart);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	4798      	blx	r3
    }
    return;
 8009f9c:	e035      	b.n	800a00a <HAL_UART_IRQHandler+0x576>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009f9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d009      	beq.n	8009fbe <HAL_UART_IRQHandler+0x52a>
 8009faa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d003      	beq.n	8009fbe <HAL_UART_IRQHandler+0x52a>
  {
    UART_EndTransmit_IT(huart);
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f000 fc1d 	bl	800a7f6 <UART_EndTransmit_IT>
    return;
 8009fbc:	e026      	b.n	800a00c <HAL_UART_IRQHandler+0x578>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009fbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009fc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d009      	beq.n	8009fde <HAL_UART_IRQHandler+0x54a>
 8009fca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009fce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d003      	beq.n	8009fde <HAL_UART_IRQHandler+0x54a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f000 fc42 	bl	800a860 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009fdc:	e016      	b.n	800a00c <HAL_UART_IRQHandler+0x578>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009fde:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009fe2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d010      	beq.n	800a00c <HAL_UART_IRQHandler+0x578>
 8009fea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	da0c      	bge.n	800a00c <HAL_UART_IRQHandler+0x578>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f000 fc2a 	bl	800a84c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009ff8:	e008      	b.n	800a00c <HAL_UART_IRQHandler+0x578>
      return;
 8009ffa:	bf00      	nop
 8009ffc:	e006      	b.n	800a00c <HAL_UART_IRQHandler+0x578>
    return;
 8009ffe:	bf00      	nop
 800a000:	e004      	b.n	800a00c <HAL_UART_IRQHandler+0x578>
      return;
 800a002:	bf00      	nop
 800a004:	e002      	b.n	800a00c <HAL_UART_IRQHandler+0x578>
      return;
 800a006:	bf00      	nop
 800a008:	e000      	b.n	800a00c <HAL_UART_IRQHandler+0x578>
    return;
 800a00a:	bf00      	nop
  }
}
 800a00c:	37b8      	adds	r7, #184	; 0xb8
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}
 800a012:	bf00      	nop

0800a014 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a014:	b480      	push	{r7}
 800a016:	b083      	sub	sp, #12
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a01c:	bf00      	nop
 800a01e:	370c      	adds	r7, #12
 800a020:	46bd      	mov	sp, r7
 800a022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a026:	4770      	bx	lr

0800a028 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a028:	b480      	push	{r7}
 800a02a:	b083      	sub	sp, #12
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a030:	bf00      	nop
 800a032:	370c      	adds	r7, #12
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr

0800a03c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b083      	sub	sp, #12
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	460b      	mov	r3, r1
 800a046:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a048:	bf00      	nop
 800a04a:	370c      	adds	r7, #12
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	4770      	bx	lr

0800a054 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a058:	b094      	sub	sp, #80	; 0x50
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a05e:	2300      	movs	r3, #0
 800a060:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800a064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a066:	681a      	ldr	r2, [r3, #0]
 800a068:	4b7e      	ldr	r3, [pc, #504]	; (800a264 <UART_SetConfig+0x210>)
 800a06a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a06e:	689a      	ldr	r2, [r3, #8]
 800a070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a072:	691b      	ldr	r3, [r3, #16]
 800a074:	431a      	orrs	r2, r3
 800a076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a078:	695b      	ldr	r3, [r3, #20]
 800a07a:	431a      	orrs	r2, r3
 800a07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a07e:	69db      	ldr	r3, [r3, #28]
 800a080:	4313      	orrs	r3, r2
 800a082:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4977      	ldr	r1, [pc, #476]	; (800a268 <UART_SetConfig+0x214>)
 800a08c:	4019      	ands	r1, r3
 800a08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a090:	681a      	ldr	r2, [r3, #0]
 800a092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a094:	430b      	orrs	r3, r1
 800a096:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	685b      	ldr	r3, [r3, #4]
 800a09e:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0a4:	68d9      	ldr	r1, [r3, #12]
 800a0a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0a8:	681a      	ldr	r2, [r3, #0]
 800a0aa:	ea40 0301 	orr.w	r3, r0, r1
 800a0ae:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b2:	699b      	ldr	r3, [r3, #24]
 800a0b4:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a0b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b8:	681a      	ldr	r2, [r3, #0]
 800a0ba:	4b6a      	ldr	r3, [pc, #424]	; (800a264 <UART_SetConfig+0x210>)
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	d009      	beq.n	800a0d4 <UART_SetConfig+0x80>
 800a0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c2:	681a      	ldr	r2, [r3, #0]
 800a0c4:	4b69      	ldr	r3, [pc, #420]	; (800a26c <UART_SetConfig+0x218>)
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d004      	beq.n	800a0d4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a0ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0cc:	6a1a      	ldr	r2, [r3, #32]
 800a0ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	689b      	ldr	r3, [r3, #8]
 800a0da:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800a0de:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800a0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0e4:	681a      	ldr	r2, [r3, #0]
 800a0e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0e8:	430b      	orrs	r3, r1
 800a0ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0f2:	f023 000f 	bic.w	r0, r3, #15
 800a0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a0fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0fc:	681a      	ldr	r2, [r3, #0]
 800a0fe:	ea40 0301 	orr.w	r3, r0, r1
 800a102:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	4b59      	ldr	r3, [pc, #356]	; (800a270 <UART_SetConfig+0x21c>)
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d102      	bne.n	800a114 <UART_SetConfig+0xc0>
 800a10e:	2301      	movs	r3, #1
 800a110:	64bb      	str	r3, [r7, #72]	; 0x48
 800a112:	e029      	b.n	800a168 <UART_SetConfig+0x114>
 800a114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a116:	681a      	ldr	r2, [r3, #0]
 800a118:	4b56      	ldr	r3, [pc, #344]	; (800a274 <UART_SetConfig+0x220>)
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d102      	bne.n	800a124 <UART_SetConfig+0xd0>
 800a11e:	2302      	movs	r3, #2
 800a120:	64bb      	str	r3, [r7, #72]	; 0x48
 800a122:	e021      	b.n	800a168 <UART_SetConfig+0x114>
 800a124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a126:	681a      	ldr	r2, [r3, #0]
 800a128:	4b53      	ldr	r3, [pc, #332]	; (800a278 <UART_SetConfig+0x224>)
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d102      	bne.n	800a134 <UART_SetConfig+0xe0>
 800a12e:	2304      	movs	r3, #4
 800a130:	64bb      	str	r3, [r7, #72]	; 0x48
 800a132:	e019      	b.n	800a168 <UART_SetConfig+0x114>
 800a134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a136:	681a      	ldr	r2, [r3, #0]
 800a138:	4b50      	ldr	r3, [pc, #320]	; (800a27c <UART_SetConfig+0x228>)
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d102      	bne.n	800a144 <UART_SetConfig+0xf0>
 800a13e:	2308      	movs	r3, #8
 800a140:	64bb      	str	r3, [r7, #72]	; 0x48
 800a142:	e011      	b.n	800a168 <UART_SetConfig+0x114>
 800a144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	4b4d      	ldr	r3, [pc, #308]	; (800a280 <UART_SetConfig+0x22c>)
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d102      	bne.n	800a154 <UART_SetConfig+0x100>
 800a14e:	2310      	movs	r3, #16
 800a150:	64bb      	str	r3, [r7, #72]	; 0x48
 800a152:	e009      	b.n	800a168 <UART_SetConfig+0x114>
 800a154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a156:	681a      	ldr	r2, [r3, #0]
 800a158:	4b42      	ldr	r3, [pc, #264]	; (800a264 <UART_SetConfig+0x210>)
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d102      	bne.n	800a164 <UART_SetConfig+0x110>
 800a15e:	2320      	movs	r3, #32
 800a160:	64bb      	str	r3, [r7, #72]	; 0x48
 800a162:	e001      	b.n	800a168 <UART_SetConfig+0x114>
 800a164:	2300      	movs	r3, #0
 800a166:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a16a:	681a      	ldr	r2, [r3, #0]
 800a16c:	4b3d      	ldr	r3, [pc, #244]	; (800a264 <UART_SetConfig+0x210>)
 800a16e:	429a      	cmp	r2, r3
 800a170:	d005      	beq.n	800a17e <UART_SetConfig+0x12a>
 800a172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a174:	681a      	ldr	r2, [r3, #0]
 800a176:	4b3d      	ldr	r3, [pc, #244]	; (800a26c <UART_SetConfig+0x218>)
 800a178:	429a      	cmp	r2, r3
 800a17a:	f040 8085 	bne.w	800a288 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a17e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a180:	2200      	movs	r2, #0
 800a182:	623b      	str	r3, [r7, #32]
 800a184:	627a      	str	r2, [r7, #36]	; 0x24
 800a186:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a18a:	f7fb ffc7 	bl	800611c <HAL_RCCEx_GetPeriphCLKFreq>
 800a18e:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800a190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a192:	2b00      	cmp	r3, #0
 800a194:	f000 80e8 	beq.w	800a368 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a19a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a19c:	4a39      	ldr	r2, [pc, #228]	; (800a284 <UART_SetConfig+0x230>)
 800a19e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1a6:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1aa:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ae:	685a      	ldr	r2, [r3, #4]
 800a1b0:	4613      	mov	r3, r2
 800a1b2:	005b      	lsls	r3, r3, #1
 800a1b4:	4413      	add	r3, r2
 800a1b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d305      	bcc.n	800a1c8 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a1c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1c4:	429a      	cmp	r2, r3
 800a1c6:	d903      	bls.n	800a1d0 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a1ce:	e048      	b.n	800a262 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	61bb      	str	r3, [r7, #24]
 800a1d6:	61fa      	str	r2, [r7, #28]
 800a1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1dc:	4a29      	ldr	r2, [pc, #164]	; (800a284 <UART_SetConfig+0x230>)
 800a1de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1e2:	b29b      	uxth	r3, r3
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	613b      	str	r3, [r7, #16]
 800a1e8:	617a      	str	r2, [r7, #20]
 800a1ea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a1ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a1f2:	f7f6 f841 	bl	8000278 <__aeabi_uldivmod>
 800a1f6:	4602      	mov	r2, r0
 800a1f8:	460b      	mov	r3, r1
 800a1fa:	4610      	mov	r0, r2
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	f04f 0200 	mov.w	r2, #0
 800a202:	f04f 0300 	mov.w	r3, #0
 800a206:	020b      	lsls	r3, r1, #8
 800a208:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a20c:	0202      	lsls	r2, r0, #8
 800a20e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a210:	6849      	ldr	r1, [r1, #4]
 800a212:	0849      	lsrs	r1, r1, #1
 800a214:	2000      	movs	r0, #0
 800a216:	460c      	mov	r4, r1
 800a218:	4605      	mov	r5, r0
 800a21a:	eb12 0804 	adds.w	r8, r2, r4
 800a21e:	eb43 0905 	adc.w	r9, r3, r5
 800a222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a224:	685b      	ldr	r3, [r3, #4]
 800a226:	2200      	movs	r2, #0
 800a228:	60bb      	str	r3, [r7, #8]
 800a22a:	60fa      	str	r2, [r7, #12]
 800a22c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a230:	4640      	mov	r0, r8
 800a232:	4649      	mov	r1, r9
 800a234:	f7f6 f820 	bl	8000278 <__aeabi_uldivmod>
 800a238:	4602      	mov	r2, r0
 800a23a:	460b      	mov	r3, r1
 800a23c:	4613      	mov	r3, r2
 800a23e:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a242:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a246:	d308      	bcc.n	800a25a <UART_SetConfig+0x206>
 800a248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a24a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a24e:	d204      	bcs.n	800a25a <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800a250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a256:	60da      	str	r2, [r3, #12]
 800a258:	e003      	b.n	800a262 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800a25a:	2301      	movs	r3, #1
 800a25c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800a260:	e082      	b.n	800a368 <UART_SetConfig+0x314>
 800a262:	e081      	b.n	800a368 <UART_SetConfig+0x314>
 800a264:	46002400 	.word	0x46002400
 800a268:	cfff69f3 	.word	0xcfff69f3
 800a26c:	56002400 	.word	0x56002400
 800a270:	40013800 	.word	0x40013800
 800a274:	40004400 	.word	0x40004400
 800a278:	40004800 	.word	0x40004800
 800a27c:	40004c00 	.word	0x40004c00
 800a280:	40005000 	.word	0x40005000
 800a284:	0800abec 	.word	0x0800abec
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a28a:	69db      	ldr	r3, [r3, #28]
 800a28c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a290:	d13c      	bne.n	800a30c <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a292:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a294:	2200      	movs	r2, #0
 800a296:	603b      	str	r3, [r7, #0]
 800a298:	607a      	str	r2, [r7, #4]
 800a29a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a29e:	f7fb ff3d 	bl	800611c <HAL_RCCEx_GetPeriphCLKFreq>
 800a2a2:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a2a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d05e      	beq.n	800a368 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ae:	4a39      	ldr	r2, [pc, #228]	; (800a394 <UART_SetConfig+0x340>)
 800a2b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2b4:	461a      	mov	r2, r3
 800a2b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2bc:	005a      	lsls	r2, r3, #1
 800a2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2c0:	685b      	ldr	r3, [r3, #4]
 800a2c2:	085b      	lsrs	r3, r3, #1
 800a2c4:	441a      	add	r2, r3
 800a2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2ce:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2d2:	2b0f      	cmp	r3, #15
 800a2d4:	d916      	bls.n	800a304 <UART_SetConfig+0x2b0>
 800a2d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2dc:	d212      	bcs.n	800a304 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a2de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2e0:	b29b      	uxth	r3, r3
 800a2e2:	f023 030f 	bic.w	r3, r3, #15
 800a2e6:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a2e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2ea:	085b      	lsrs	r3, r3, #1
 800a2ec:	b29b      	uxth	r3, r3
 800a2ee:	f003 0307 	and.w	r3, r3, #7
 800a2f2:	b29a      	uxth	r2, r3
 800a2f4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800a2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a300:	60da      	str	r2, [r3, #12]
 800a302:	e031      	b.n	800a368 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800a304:	2301      	movs	r3, #1
 800a306:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a30a:	e02d      	b.n	800a368 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a30c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a30e:	2200      	movs	r2, #0
 800a310:	469a      	mov	sl, r3
 800a312:	4693      	mov	fp, r2
 800a314:	4650      	mov	r0, sl
 800a316:	4659      	mov	r1, fp
 800a318:	f7fb ff00 	bl	800611c <HAL_RCCEx_GetPeriphCLKFreq>
 800a31c:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800a31e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a320:	2b00      	cmp	r3, #0
 800a322:	d021      	beq.n	800a368 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a328:	4a1a      	ldr	r2, [pc, #104]	; (800a394 <UART_SetConfig+0x340>)
 800a32a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a32e:	461a      	mov	r2, r3
 800a330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a332:	fbb3 f2f2 	udiv	r2, r3, r2
 800a336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a338:	685b      	ldr	r3, [r3, #4]
 800a33a:	085b      	lsrs	r3, r3, #1
 800a33c:	441a      	add	r2, r3
 800a33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a340:	685b      	ldr	r3, [r3, #4]
 800a342:	fbb2 f3f3 	udiv	r3, r2, r3
 800a346:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a34a:	2b0f      	cmp	r3, #15
 800a34c:	d909      	bls.n	800a362 <UART_SetConfig+0x30e>
 800a34e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a354:	d205      	bcs.n	800a362 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a358:	b29a      	uxth	r2, r3
 800a35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	60da      	str	r2, [r3, #12]
 800a360:	e002      	b.n	800a368 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800a362:	2301      	movs	r3, #1
 800a364:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a36a:	2201      	movs	r2, #1
 800a36c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a372:	2201      	movs	r2, #1
 800a374:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a37a:	2200      	movs	r2, #0
 800a37c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a380:	2200      	movs	r2, #0
 800a382:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a384:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a388:	4618      	mov	r0, r3
 800a38a:	3750      	adds	r7, #80	; 0x50
 800a38c:	46bd      	mov	sp, r7
 800a38e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a392:	bf00      	nop
 800a394:	0800abec 	.word	0x0800abec

0800a398 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a398:	b480      	push	{r7}
 800a39a:	b083      	sub	sp, #12
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3a4:	f003 0308 	and.w	r3, r3, #8
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d00a      	beq.n	800a3c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	685b      	ldr	r3, [r3, #4]
 800a3b2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	430a      	orrs	r2, r1
 800a3c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3c6:	f003 0301 	and.w	r3, r3, #1
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d00a      	beq.n	800a3e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	685b      	ldr	r3, [r3, #4]
 800a3d4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	430a      	orrs	r2, r1
 800a3e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3e8:	f003 0302 	and.w	r3, r3, #2
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d00a      	beq.n	800a406 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	685b      	ldr	r3, [r3, #4]
 800a3f6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	430a      	orrs	r2, r1
 800a404:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a40a:	f003 0304 	and.w	r3, r3, #4
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d00a      	beq.n	800a428 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	685b      	ldr	r3, [r3, #4]
 800a418:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	430a      	orrs	r2, r1
 800a426:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a42c:	f003 0310 	and.w	r3, r3, #16
 800a430:	2b00      	cmp	r3, #0
 800a432:	d00a      	beq.n	800a44a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	689b      	ldr	r3, [r3, #8]
 800a43a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	430a      	orrs	r2, r1
 800a448:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a44e:	f003 0320 	and.w	r3, r3, #32
 800a452:	2b00      	cmp	r3, #0
 800a454:	d00a      	beq.n	800a46c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	689b      	ldr	r3, [r3, #8]
 800a45c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	430a      	orrs	r2, r1
 800a46a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a474:	2b00      	cmp	r3, #0
 800a476:	d01a      	beq.n	800a4ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	430a      	orrs	r2, r1
 800a48c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a492:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a496:	d10a      	bne.n	800a4ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	430a      	orrs	r2, r1
 800a4ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d00a      	beq.n	800a4d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	430a      	orrs	r2, r1
 800a4ce:	605a      	str	r2, [r3, #4]
  }
}
 800a4d0:	bf00      	nop
 800a4d2:	370c      	adds	r7, #12
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr

0800a4dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b098      	sub	sp, #96	; 0x60
 800a4e0:	af02      	add	r7, sp, #8
 800a4e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a4ec:	f7f7 fa00 	bl	80018f0 <HAL_GetTick>
 800a4f0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f003 0308 	and.w	r3, r3, #8
 800a4fc:	2b08      	cmp	r3, #8
 800a4fe:	d12f      	bne.n	800a560 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a500:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a504:	9300      	str	r3, [sp, #0]
 800a506:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a508:	2200      	movs	r2, #0
 800a50a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 f88e 	bl	800a630 <UART_WaitOnFlagUntilTimeout>
 800a514:	4603      	mov	r3, r0
 800a516:	2b00      	cmp	r3, #0
 800a518:	d022      	beq.n	800a560 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a522:	e853 3f00 	ldrex	r3, [r3]
 800a526:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a52a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a52e:	653b      	str	r3, [r7, #80]	; 0x50
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	461a      	mov	r2, r3
 800a536:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a538:	647b      	str	r3, [r7, #68]	; 0x44
 800a53a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a53c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a53e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a540:	e841 2300 	strex	r3, r2, [r1]
 800a544:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d1e6      	bne.n	800a51a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2220      	movs	r2, #32
 800a550:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2200      	movs	r2, #0
 800a558:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a55c:	2303      	movs	r3, #3
 800a55e:	e063      	b.n	800a628 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f003 0304 	and.w	r3, r3, #4
 800a56a:	2b04      	cmp	r3, #4
 800a56c:	d149      	bne.n	800a602 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a56e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a572:	9300      	str	r3, [sp, #0]
 800a574:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a576:	2200      	movs	r2, #0
 800a578:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f000 f857 	bl	800a630 <UART_WaitOnFlagUntilTimeout>
 800a582:	4603      	mov	r3, r0
 800a584:	2b00      	cmp	r3, #0
 800a586:	d03c      	beq.n	800a602 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a590:	e853 3f00 	ldrex	r3, [r3]
 800a594:	623b      	str	r3, [r7, #32]
   return(result);
 800a596:	6a3b      	ldr	r3, [r7, #32]
 800a598:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a59c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5a6:	633b      	str	r3, [r7, #48]	; 0x30
 800a5a8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a5ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5ae:	e841 2300 	strex	r3, r2, [r1]
 800a5b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d1e6      	bne.n	800a588 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	3308      	adds	r3, #8
 800a5c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	e853 3f00 	ldrex	r3, [r3]
 800a5c8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f023 0301 	bic.w	r3, r3, #1
 800a5d0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	3308      	adds	r3, #8
 800a5d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a5da:	61fa      	str	r2, [r7, #28]
 800a5dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5de:	69b9      	ldr	r1, [r7, #24]
 800a5e0:	69fa      	ldr	r2, [r7, #28]
 800a5e2:	e841 2300 	strex	r3, r2, [r1]
 800a5e6:	617b      	str	r3, [r7, #20]
   return(result);
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d1e5      	bne.n	800a5ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2220      	movs	r2, #32
 800a5f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a5fe:	2303      	movs	r3, #3
 800a600:	e012      	b.n	800a628 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2220      	movs	r2, #32
 800a606:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2220      	movs	r2, #32
 800a60e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2200      	movs	r2, #0
 800a616:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2200      	movs	r2, #0
 800a61c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2200      	movs	r2, #0
 800a622:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a626:	2300      	movs	r3, #0
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3758      	adds	r7, #88	; 0x58
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b084      	sub	sp, #16
 800a634:	af00      	add	r7, sp, #0
 800a636:	60f8      	str	r0, [r7, #12]
 800a638:	60b9      	str	r1, [r7, #8]
 800a63a:	603b      	str	r3, [r7, #0]
 800a63c:	4613      	mov	r3, r2
 800a63e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a640:	e049      	b.n	800a6d6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a642:	69bb      	ldr	r3, [r7, #24]
 800a644:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a648:	d045      	beq.n	800a6d6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a64a:	f7f7 f951 	bl	80018f0 <HAL_GetTick>
 800a64e:	4602      	mov	r2, r0
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	1ad3      	subs	r3, r2, r3
 800a654:	69ba      	ldr	r2, [r7, #24]
 800a656:	429a      	cmp	r2, r3
 800a658:	d302      	bcc.n	800a660 <UART_WaitOnFlagUntilTimeout+0x30>
 800a65a:	69bb      	ldr	r3, [r7, #24]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d101      	bne.n	800a664 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a660:	2303      	movs	r3, #3
 800a662:	e048      	b.n	800a6f6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f003 0304 	and.w	r3, r3, #4
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d031      	beq.n	800a6d6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	69db      	ldr	r3, [r3, #28]
 800a678:	f003 0308 	and.w	r3, r3, #8
 800a67c:	2b08      	cmp	r3, #8
 800a67e:	d110      	bne.n	800a6a2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	2208      	movs	r2, #8
 800a686:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a688:	68f8      	ldr	r0, [r7, #12]
 800a68a:	f000 f838 	bl	800a6fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2208      	movs	r2, #8
 800a692:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	2200      	movs	r2, #0
 800a69a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800a69e:	2301      	movs	r3, #1
 800a6a0:	e029      	b.n	800a6f6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	69db      	ldr	r3, [r3, #28]
 800a6a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a6ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a6b0:	d111      	bne.n	800a6d6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a6ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a6bc:	68f8      	ldr	r0, [r7, #12]
 800a6be:	f000 f81e 	bl	800a6fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2220      	movs	r2, #32
 800a6c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a6d2:	2303      	movs	r3, #3
 800a6d4:	e00f      	b.n	800a6f6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	69da      	ldr	r2, [r3, #28]
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	4013      	ands	r3, r2
 800a6e0:	68ba      	ldr	r2, [r7, #8]
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	bf0c      	ite	eq
 800a6e6:	2301      	moveq	r3, #1
 800a6e8:	2300      	movne	r3, #0
 800a6ea:	b2db      	uxtb	r3, r3
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	79fb      	ldrb	r3, [r7, #7]
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d0a6      	beq.n	800a642 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a6f4:	2300      	movs	r3, #0
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3710      	adds	r7, #16
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}

0800a6fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a6fe:	b480      	push	{r7}
 800a700:	b095      	sub	sp, #84	; 0x54
 800a702:	af00      	add	r7, sp, #0
 800a704:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a70c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a70e:	e853 3f00 	ldrex	r3, [r3]
 800a712:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a716:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a71a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	461a      	mov	r2, r3
 800a722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a724:	643b      	str	r3, [r7, #64]	; 0x40
 800a726:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a728:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a72a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a72c:	e841 2300 	strex	r3, r2, [r1]
 800a730:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a734:	2b00      	cmp	r3, #0
 800a736:	d1e6      	bne.n	800a706 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	3308      	adds	r3, #8
 800a73e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a740:	6a3b      	ldr	r3, [r7, #32]
 800a742:	e853 3f00 	ldrex	r3, [r3]
 800a746:	61fb      	str	r3, [r7, #28]
   return(result);
 800a748:	69fb      	ldr	r3, [r7, #28]
 800a74a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a74e:	f023 0301 	bic.w	r3, r3, #1
 800a752:	64bb      	str	r3, [r7, #72]	; 0x48
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	3308      	adds	r3, #8
 800a75a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a75c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a75e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a760:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a764:	e841 2300 	strex	r3, r2, [r1]
 800a768:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d1e3      	bne.n	800a738 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a774:	2b01      	cmp	r3, #1
 800a776:	d118      	bne.n	800a7aa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	e853 3f00 	ldrex	r3, [r3]
 800a784:	60bb      	str	r3, [r7, #8]
   return(result);
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	f023 0310 	bic.w	r3, r3, #16
 800a78c:	647b      	str	r3, [r7, #68]	; 0x44
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	461a      	mov	r2, r3
 800a794:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a796:	61bb      	str	r3, [r7, #24]
 800a798:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a79a:	6979      	ldr	r1, [r7, #20]
 800a79c:	69ba      	ldr	r2, [r7, #24]
 800a79e:	e841 2300 	strex	r3, r2, [r1]
 800a7a2:	613b      	str	r3, [r7, #16]
   return(result);
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d1e6      	bne.n	800a778 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2220      	movs	r2, #32
 800a7ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a7be:	bf00      	nop
 800a7c0:	3754      	adds	r7, #84	; 0x54
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c8:	4770      	bx	lr

0800a7ca <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a7ca:	b580      	push	{r7, lr}
 800a7cc:	b084      	sub	sp, #16
 800a7ce:	af00      	add	r7, sp, #0
 800a7d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a7e8:	68f8      	ldr	r0, [r7, #12]
 800a7ea:	f7ff fc1d 	bl	800a028 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7ee:	bf00      	nop
 800a7f0:	3710      	adds	r7, #16
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}

0800a7f6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a7f6:	b580      	push	{r7, lr}
 800a7f8:	b088      	sub	sp, #32
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	e853 3f00 	ldrex	r3, [r3]
 800a80a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a812:	61fb      	str	r3, [r7, #28]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	461a      	mov	r2, r3
 800a81a:	69fb      	ldr	r3, [r7, #28]
 800a81c:	61bb      	str	r3, [r7, #24]
 800a81e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a820:	6979      	ldr	r1, [r7, #20]
 800a822:	69ba      	ldr	r2, [r7, #24]
 800a824:	e841 2300 	strex	r3, r2, [r1]
 800a828:	613b      	str	r3, [r7, #16]
   return(result);
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d1e6      	bne.n	800a7fe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2220      	movs	r2, #32
 800a834:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2200      	movs	r2, #0
 800a83c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f7ff fbe8 	bl	800a014 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a844:	bf00      	nop
 800a846:	3720      	adds	r7, #32
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}

0800a84c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a84c:	b480      	push	{r7}
 800a84e:	b083      	sub	sp, #12
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a854:	bf00      	nop
 800a856:	370c      	adds	r7, #12
 800a858:	46bd      	mov	sp, r7
 800a85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85e:	4770      	bx	lr

0800a860 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a860:	b480      	push	{r7}
 800a862:	b083      	sub	sp, #12
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a868:	bf00      	nop
 800a86a:	370c      	adds	r7, #12
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr

0800a874 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a874:	b480      	push	{r7}
 800a876:	b085      	sub	sp, #20
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a882:	2b01      	cmp	r3, #1
 800a884:	d101      	bne.n	800a88a <HAL_UARTEx_DisableFifoMode+0x16>
 800a886:	2302      	movs	r3, #2
 800a888:	e027      	b.n	800a8da <HAL_UARTEx_DisableFifoMode+0x66>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2201      	movs	r2, #1
 800a88e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2224      	movs	r2, #36	; 0x24
 800a896:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	681a      	ldr	r2, [r3, #0]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f022 0201 	bic.w	r2, r2, #1
 800a8b0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a8b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	68fa      	ldr	r2, [r7, #12]
 800a8c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2220      	movs	r2, #32
 800a8cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a8d8:	2300      	movs	r3, #0
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3714      	adds	r7, #20
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr

0800a8e6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a8e6:	b580      	push	{r7, lr}
 800a8e8:	b084      	sub	sp, #16
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	6078      	str	r0, [r7, #4]
 800a8ee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	d101      	bne.n	800a8fe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a8fa:	2302      	movs	r3, #2
 800a8fc:	e02d      	b.n	800a95a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2201      	movs	r2, #1
 800a902:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2224      	movs	r2, #36	; 0x24
 800a90a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	681a      	ldr	r2, [r3, #0]
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f022 0201 	bic.w	r2, r2, #1
 800a924:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	689b      	ldr	r3, [r3, #8]
 800a92c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	683a      	ldr	r2, [r7, #0]
 800a936:	430a      	orrs	r2, r1
 800a938:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f000 f850 	bl	800a9e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	68fa      	ldr	r2, [r7, #12]
 800a946:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2220      	movs	r2, #32
 800a94c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2200      	movs	r2, #0
 800a954:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a958:	2300      	movs	r3, #0
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3710      	adds	r7, #16
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}

0800a962 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a962:	b580      	push	{r7, lr}
 800a964:	b084      	sub	sp, #16
 800a966:	af00      	add	r7, sp, #0
 800a968:	6078      	str	r0, [r7, #4]
 800a96a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a972:	2b01      	cmp	r3, #1
 800a974:	d101      	bne.n	800a97a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a976:	2302      	movs	r3, #2
 800a978:	e02d      	b.n	800a9d6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2201      	movs	r2, #1
 800a97e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2224      	movs	r2, #36	; 0x24
 800a986:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	681a      	ldr	r2, [r3, #0]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f022 0201 	bic.w	r2, r2, #1
 800a9a0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	689b      	ldr	r3, [r3, #8]
 800a9a8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	683a      	ldr	r2, [r7, #0]
 800a9b2:	430a      	orrs	r2, r1
 800a9b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f000 f812 	bl	800a9e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	68fa      	ldr	r2, [r7, #12]
 800a9c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2220      	movs	r2, #32
 800a9c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a9d4:	2300      	movs	r3, #0
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3710      	adds	r7, #16
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}
	...

0800a9e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b085      	sub	sp, #20
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d108      	bne.n	800aa02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2201      	movs	r2, #1
 800a9fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aa00:	e031      	b.n	800aa66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aa02:	2308      	movs	r3, #8
 800aa04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aa06:	2308      	movs	r3, #8
 800aa08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	689b      	ldr	r3, [r3, #8]
 800aa10:	0e5b      	lsrs	r3, r3, #25
 800aa12:	b2db      	uxtb	r3, r3
 800aa14:	f003 0307 	and.w	r3, r3, #7
 800aa18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	689b      	ldr	r3, [r3, #8]
 800aa20:	0f5b      	lsrs	r3, r3, #29
 800aa22:	b2db      	uxtb	r3, r3
 800aa24:	f003 0307 	and.w	r3, r3, #7
 800aa28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa2a:	7bbb      	ldrb	r3, [r7, #14]
 800aa2c:	7b3a      	ldrb	r2, [r7, #12]
 800aa2e:	4911      	ldr	r1, [pc, #68]	; (800aa74 <UARTEx_SetNbDataToProcess+0x94>)
 800aa30:	5c8a      	ldrb	r2, [r1, r2]
 800aa32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aa36:	7b3a      	ldrb	r2, [r7, #12]
 800aa38:	490f      	ldr	r1, [pc, #60]	; (800aa78 <UARTEx_SetNbDataToProcess+0x98>)
 800aa3a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa3c:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa40:	b29a      	uxth	r2, r3
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa48:	7bfb      	ldrb	r3, [r7, #15]
 800aa4a:	7b7a      	ldrb	r2, [r7, #13]
 800aa4c:	4909      	ldr	r1, [pc, #36]	; (800aa74 <UARTEx_SetNbDataToProcess+0x94>)
 800aa4e:	5c8a      	ldrb	r2, [r1, r2]
 800aa50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aa54:	7b7a      	ldrb	r2, [r7, #13]
 800aa56:	4908      	ldr	r1, [pc, #32]	; (800aa78 <UARTEx_SetNbDataToProcess+0x98>)
 800aa58:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa5a:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa5e:	b29a      	uxth	r2, r3
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800aa66:	bf00      	nop
 800aa68:	3714      	adds	r7, #20
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa70:	4770      	bx	lr
 800aa72:	bf00      	nop
 800aa74:	0800ac04 	.word	0x0800ac04
 800aa78:	0800ac0c 	.word	0x0800ac0c

0800aa7c <memset>:
 800aa7c:	4402      	add	r2, r0
 800aa7e:	4603      	mov	r3, r0
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d100      	bne.n	800aa86 <memset+0xa>
 800aa84:	4770      	bx	lr
 800aa86:	f803 1b01 	strb.w	r1, [r3], #1
 800aa8a:	e7f9      	b.n	800aa80 <memset+0x4>

0800aa8c <__libc_init_array>:
 800aa8c:	b570      	push	{r4, r5, r6, lr}
 800aa8e:	4d0d      	ldr	r5, [pc, #52]	; (800aac4 <__libc_init_array+0x38>)
 800aa90:	2600      	movs	r6, #0
 800aa92:	4c0d      	ldr	r4, [pc, #52]	; (800aac8 <__libc_init_array+0x3c>)
 800aa94:	1b64      	subs	r4, r4, r5
 800aa96:	10a4      	asrs	r4, r4, #2
 800aa98:	42a6      	cmp	r6, r4
 800aa9a:	d109      	bne.n	800aab0 <__libc_init_array+0x24>
 800aa9c:	4d0b      	ldr	r5, [pc, #44]	; (800aacc <__libc_init_array+0x40>)
 800aa9e:	2600      	movs	r6, #0
 800aaa0:	4c0b      	ldr	r4, [pc, #44]	; (800aad0 <__libc_init_array+0x44>)
 800aaa2:	f000 f817 	bl	800aad4 <_init>
 800aaa6:	1b64      	subs	r4, r4, r5
 800aaa8:	10a4      	asrs	r4, r4, #2
 800aaaa:	42a6      	cmp	r6, r4
 800aaac:	d105      	bne.n	800aaba <__libc_init_array+0x2e>
 800aaae:	bd70      	pop	{r4, r5, r6, pc}
 800aab0:	f855 3b04 	ldr.w	r3, [r5], #4
 800aab4:	3601      	adds	r6, #1
 800aab6:	4798      	blx	r3
 800aab8:	e7ee      	b.n	800aa98 <__libc_init_array+0xc>
 800aaba:	f855 3b04 	ldr.w	r3, [r5], #4
 800aabe:	3601      	adds	r6, #1
 800aac0:	4798      	blx	r3
 800aac2:	e7f2      	b.n	800aaaa <__libc_init_array+0x1e>
 800aac4:	0800ac1c 	.word	0x0800ac1c
 800aac8:	0800ac1c 	.word	0x0800ac1c
 800aacc:	0800ac1c 	.word	0x0800ac1c
 800aad0:	0800ac20 	.word	0x0800ac20

0800aad4 <_init>:
 800aad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aad6:	bf00      	nop
 800aad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aada:	bc08      	pop	{r3}
 800aadc:	469e      	mov	lr, r3
 800aade:	4770      	bx	lr

0800aae0 <_fini>:
 800aae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aae2:	bf00      	nop
 800aae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aae6:	bc08      	pop	{r3}
 800aae8:	469e      	mov	lr, r3
 800aaea:	4770      	bx	lr
