
_TestCode_STM32U575.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b10  08000238  08000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08009d48  08009d48  00019d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009e48  08009e48  00019e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009e50  08009e50  00019e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009e54  08009e54  00019e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000d  20000000  08009e58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000248  20000010  08009e65  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000258  08009e65  00020258  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0002000d  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020043  2**0
                  CONTENTS, READONLY
 11 .debug_info   00022f1e  00000000  00000000  00020086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000393a  00000000  00000000  00042fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001d28  00000000  00000000  000468e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000016d6  00000000  00000000  00048608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000367b0  00000000  00000000  00049cde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00023f58  00000000  00000000  0008048e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016327d  00000000  00000000  000a43e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00007fa8  00000000  00000000  00207664  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000009a  00000000  00000000  0020f60c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000010 	.word	0x20000010
 8000254:	00000000 	.word	0x00000000
 8000258:	08009d30 	.word	0x08009d30

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000014 	.word	0x20000014
 8000274:	08009d30 	.word	0x08009d30

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295
 8000288:	f04f 30ff 	movne.w	r0, #4294967295
 800028c:	f000 b982 	b.w	8000594 <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002ae:	460d      	mov	r5, r1
 80002b0:	4604      	mov	r4, r0
 80002b2:	460f      	mov	r7, r1
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d146      	bne.n	8000346 <__udivmoddi4+0x9e>
 80002b8:	428a      	cmp	r2, r1
 80002ba:	4694      	mov	ip, r2
 80002bc:	d95e      	bls.n	800037c <__udivmoddi4+0xd4>
 80002be:	fab2 f382 	clz	r3, r2
 80002c2:	b143      	cbz	r3, 80002d6 <__udivmoddi4+0x2e>
 80002c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c8:	f1c3 0220 	rsb	r2, r3, #32
 80002cc:	409f      	lsls	r7, r3
 80002ce:	409c      	lsls	r4, r3
 80002d0:	fa20 f202 	lsr.w	r2, r0, r2
 80002d4:	4317      	orrs	r7, r2
 80002d6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002da:	fa1f f58c 	uxth.w	r5, ip
 80002de:	0c22      	lsrs	r2, r4, #16
 80002e0:	fbb7 f1fe 	udiv	r1, r7, lr
 80002e4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e8:	fb01 f005 	mul.w	r0, r1, r5
 80002ec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f0:	4290      	cmp	r0, r2
 80002f2:	d908      	bls.n	8000306 <__udivmoddi4+0x5e>
 80002f4:	eb1c 0202 	adds.w	r2, ip, r2
 80002f8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002fc:	d202      	bcs.n	8000304 <__udivmoddi4+0x5c>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f200 8134 	bhi.w	800056c <__udivmoddi4+0x2c4>
 8000304:	4639      	mov	r1, r7
 8000306:	1a12      	subs	r2, r2, r0
 8000308:	b2a4      	uxth	r4, r4
 800030a:	fbb2 f0fe 	udiv	r0, r2, lr
 800030e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800031a:	42a5      	cmp	r5, r4
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x88>
 800031e:	eb1c 0404 	adds.w	r4, ip, r4
 8000322:	f100 32ff 	add.w	r2, r0, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x86>
 8000328:	42a5      	cmp	r5, r4
 800032a:	f200 8119 	bhi.w	8000560 <__udivmoddi4+0x2b8>
 800032e:	4610      	mov	r0, r2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0x9a>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xb4>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80fc 	beq.w	8000548 <__udivmoddi4+0x2a0>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d14c      	bne.n	80003fe <__udivmoddi4+0x156>
 8000364:	42ab      	cmp	r3, r5
 8000366:	f0c0 80f2 	bcc.w	800054e <__udivmoddi4+0x2a6>
 800036a:	4282      	cmp	r2, r0
 800036c:	f240 80ef 	bls.w	800054e <__udivmoddi4+0x2a6>
 8000370:	4608      	mov	r0, r1
 8000372:	2e00      	cmp	r6, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0x9a>
 8000376:	e9c6 4700 	strd	r4, r7, [r6]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0x9a>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xd8>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f382 	clz	r3, r2
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 809f 	bne.w	80004c8 <__udivmoddi4+0x220>
 800038a:	1a8a      	subs	r2, r1, r2
 800038c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000390:	fa1f f78c 	uxth.w	r7, ip
 8000394:	2101      	movs	r1, #1
 8000396:	fbb2 f5fe 	udiv	r5, r2, lr
 800039a:	fb0e 2015 	mls	r0, lr, r5, r2
 800039e:	0c22      	lsrs	r2, r4, #16
 80003a0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003a4:	fb07 f005 	mul.w	r0, r7, r5
 80003a8:	4290      	cmp	r0, r2
 80003aa:	d90f      	bls.n	80003cc <__udivmoddi4+0x124>
 80003ac:	eb1c 0202 	adds.w	r2, ip, r2
 80003b0:	f105 38ff 	add.w	r8, r5, #4294967295
 80003b4:	bf2c      	ite	cs
 80003b6:	f04f 0901 	movcs.w	r9, #1
 80003ba:	f04f 0900 	movcc.w	r9, #0
 80003be:	4290      	cmp	r0, r2
 80003c0:	d903      	bls.n	80003ca <__udivmoddi4+0x122>
 80003c2:	f1b9 0f00 	cmp.w	r9, #0
 80003c6:	f000 80ce 	beq.w	8000566 <__udivmoddi4+0x2be>
 80003ca:	4645      	mov	r5, r8
 80003cc:	1a12      	subs	r2, r2, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb2 f0fe 	udiv	r0, r2, lr
 80003d4:	fb0e 2210 	mls	r2, lr, r0, r2
 80003d8:	fb00 f707 	mul.w	r7, r0, r7
 80003dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e0:	42a7      	cmp	r7, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x14e>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x14c>
 80003ee:	42a7      	cmp	r7, r4
 80003f0:	f200 80b3 	bhi.w	800055a <__udivmoddi4+0x2b2>
 80003f4:	4610      	mov	r0, r2
 80003f6:	1be4      	subs	r4, r4, r7
 80003f8:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003fc:	e79c      	b.n	8000338 <__udivmoddi4+0x90>
 80003fe:	f1c1 0420 	rsb	r4, r1, #32
 8000402:	408b      	lsls	r3, r1
 8000404:	fa05 fc01 	lsl.w	ip, r5, r1
 8000408:	fa22 f704 	lsr.w	r7, r2, r4
 800040c:	40e5      	lsrs	r5, r4
 800040e:	408a      	lsls	r2, r1
 8000410:	431f      	orrs	r7, r3
 8000412:	fa20 f304 	lsr.w	r3, r0, r4
 8000416:	4088      	lsls	r0, r1
 8000418:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800041c:	ea43 030c 	orr.w	r3, r3, ip
 8000420:	fa1f fc87 	uxth.w	ip, r7
 8000424:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000428:	fbb5 fef8 	udiv	lr, r5, r8
 800042c:	fb08 551e 	mls	r5, r8, lr, r5
 8000430:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a9      	cmp	r9, r5
 800043a:	d90e      	bls.n	800045a <__udivmoddi4+0x1b2>
 800043c:	197d      	adds	r5, r7, r5
 800043e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000442:	bf2c      	ite	cs
 8000444:	f04f 0b01 	movcs.w	fp, #1
 8000448:	f04f 0b00 	movcc.w	fp, #0
 800044c:	45a9      	cmp	r9, r5
 800044e:	d903      	bls.n	8000458 <__udivmoddi4+0x1b0>
 8000450:	f1bb 0f00 	cmp.w	fp, #0
 8000454:	f000 808d 	beq.w	8000572 <__udivmoddi4+0x2ca>
 8000458:	46d6      	mov	lr, sl
 800045a:	eba5 0509 	sub.w	r5, r5, r9
 800045e:	fa1f f983 	uxth.w	r9, r3
 8000462:	fbb5 f3f8 	udiv	r3, r5, r8
 8000466:	fb08 5513 	mls	r5, r8, r3, r5
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000472:	45ac      	cmp	ip, r5
 8000474:	d906      	bls.n	8000484 <__udivmoddi4+0x1dc>
 8000476:	197d      	adds	r5, r7, r5
 8000478:	f103 38ff 	add.w	r8, r3, #4294967295
 800047c:	d201      	bcs.n	8000482 <__udivmoddi4+0x1da>
 800047e:	45ac      	cmp	ip, r5
 8000480:	d87e      	bhi.n	8000580 <__udivmoddi4+0x2d8>
 8000482:	4643      	mov	r3, r8
 8000484:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000488:	eba5 050c 	sub.w	r5, r5, ip
 800048c:	fba3 9802 	umull	r9, r8, r3, r2
 8000490:	4545      	cmp	r5, r8
 8000492:	46ce      	mov	lr, r9
 8000494:	46c4      	mov	ip, r8
 8000496:	d302      	bcc.n	800049e <__udivmoddi4+0x1f6>
 8000498:	d106      	bne.n	80004a8 <__udivmoddi4+0x200>
 800049a:	4548      	cmp	r0, r9
 800049c:	d204      	bcs.n	80004a8 <__udivmoddi4+0x200>
 800049e:	3b01      	subs	r3, #1
 80004a0:	ebb9 0e02 	subs.w	lr, r9, r2
 80004a4:	eb68 0c07 	sbc.w	ip, r8, r7
 80004a8:	2e00      	cmp	r6, #0
 80004aa:	d06f      	beq.n	800058c <__udivmoddi4+0x2e4>
 80004ac:	ebb0 020e 	subs.w	r2, r0, lr
 80004b0:	eb65 050c 	sbc.w	r5, r5, ip
 80004b4:	40ca      	lsrs	r2, r1
 80004b6:	fa05 f404 	lsl.w	r4, r5, r4
 80004ba:	40cd      	lsrs	r5, r1
 80004bc:	4618      	mov	r0, r3
 80004be:	4314      	orrs	r4, r2
 80004c0:	2100      	movs	r1, #0
 80004c2:	e9c6 4500 	strd	r4, r5, [r6]
 80004c6:	e73c      	b.n	8000342 <__udivmoddi4+0x9a>
 80004c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004cc:	f1c3 0220 	rsb	r2, r3, #32
 80004d0:	4099      	lsls	r1, r3
 80004d2:	409c      	lsls	r4, r3
 80004d4:	40d5      	lsrs	r5, r2
 80004d6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004da:	fa20 f202 	lsr.w	r2, r0, r2
 80004de:	fa1f f78c 	uxth.w	r7, ip
 80004e2:	fbb5 f0fe 	udiv	r0, r5, lr
 80004e6:	430a      	orrs	r2, r1
 80004e8:	fb0e 5510 	mls	r5, lr, r0, r5
 80004ec:	0c11      	lsrs	r1, r2, #16
 80004ee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004f2:	fb00 f507 	mul.w	r5, r0, r7
 80004f6:	428d      	cmp	r5, r1
 80004f8:	d90e      	bls.n	8000518 <__udivmoddi4+0x270>
 80004fa:	eb1c 0101 	adds.w	r1, ip, r1
 80004fe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000502:	bf2c      	ite	cs
 8000504:	f04f 0901 	movcs.w	r9, #1
 8000508:	f04f 0900 	movcc.w	r9, #0
 800050c:	428d      	cmp	r5, r1
 800050e:	d902      	bls.n	8000516 <__udivmoddi4+0x26e>
 8000510:	f1b9 0f00 	cmp.w	r9, #0
 8000514:	d031      	beq.n	800057a <__udivmoddi4+0x2d2>
 8000516:	4640      	mov	r0, r8
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5fe 	udiv	r5, r1, lr
 8000520:	fb0e 1115 	mls	r1, lr, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f107 	mul.w	r1, r5, r7
 800052c:	4291      	cmp	r1, r2
 800052e:	d907      	bls.n	8000540 <__udivmoddi4+0x298>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d201      	bcs.n	800053e <__udivmoddi4+0x296>
 800053a:	4291      	cmp	r1, r2
 800053c:	d823      	bhi.n	8000586 <__udivmoddi4+0x2de>
 800053e:	4645      	mov	r5, r8
 8000540:	1a52      	subs	r2, r2, r1
 8000542:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000546:	e726      	b.n	8000396 <__udivmoddi4+0xee>
 8000548:	4631      	mov	r1, r6
 800054a:	4630      	mov	r0, r6
 800054c:	e6f9      	b.n	8000342 <__udivmoddi4+0x9a>
 800054e:	1a84      	subs	r4, r0, r2
 8000550:	eb65 0203 	sbc.w	r2, r5, r3
 8000554:	2001      	movs	r0, #1
 8000556:	4617      	mov	r7, r2
 8000558:	e70b      	b.n	8000372 <__udivmoddi4+0xca>
 800055a:	4464      	add	r4, ip
 800055c:	3802      	subs	r0, #2
 800055e:	e74a      	b.n	80003f6 <__udivmoddi4+0x14e>
 8000560:	4464      	add	r4, ip
 8000562:	3802      	subs	r0, #2
 8000564:	e6e4      	b.n	8000330 <__udivmoddi4+0x88>
 8000566:	3d02      	subs	r5, #2
 8000568:	4462      	add	r2, ip
 800056a:	e72f      	b.n	80003cc <__udivmoddi4+0x124>
 800056c:	3902      	subs	r1, #2
 800056e:	4462      	add	r2, ip
 8000570:	e6c9      	b.n	8000306 <__udivmoddi4+0x5e>
 8000572:	f1ae 0e02 	sub.w	lr, lr, #2
 8000576:	443d      	add	r5, r7
 8000578:	e76f      	b.n	800045a <__udivmoddi4+0x1b2>
 800057a:	3802      	subs	r0, #2
 800057c:	4461      	add	r1, ip
 800057e:	e7cb      	b.n	8000518 <__udivmoddi4+0x270>
 8000580:	3b02      	subs	r3, #2
 8000582:	443d      	add	r5, r7
 8000584:	e77e      	b.n	8000484 <__udivmoddi4+0x1dc>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	e7d9      	b.n	8000540 <__udivmoddi4+0x298>
 800058c:	4618      	mov	r0, r3
 800058e:	4631      	mov	r1, r6
 8000590:	e6d7      	b.n	8000342 <__udivmoddi4+0x9a>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059c:	f000 ff5a 	bl	8001454 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a0:	f000 f82c 	bl	80005fc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005a4:	f000 f89e 	bl	80006e4 <PeriphCommonClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80005a8:	f000 f8cf 	bl	800074a <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ac:	f000 faf8 	bl	8000ba0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005b0:	f000 f8e2 	bl	8000778 <MX_ADC1_Init>
  MX_DAC1_Init();
 80005b4:	f000 f924 	bl	8000800 <MX_DAC1_Init>
  MX_I2C1_Init();
 80005b8:	f000 f96a 	bl	8000890 <MX_I2C1_Init>
  MX_LPTIM1_Init();
 80005bc:	f000 f9d4 	bl	8000968 <MX_LPTIM1_Init>
  MX_LPUART1_UART_Init();
 80005c0:	f000 fa04 	bl	80009cc <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 80005c4:	f000 fa54 	bl	8000a70 <MX_TIM2_Init>
  MX_ICACHE_Init();
 80005c8:	f000 f9a2 	bl	8000910 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  HAL_LPTIM_Counter_Start_IT( &hlptim1);
 80005cc:	4809      	ldr	r0, [pc, #36]	; (80005f4 <main+0x5c>)
 80005ce:	f002 fbf9 	bl	8002dc4 <HAL_LPTIM_Counter_Start_IT>
  HAL_TIM_PWM_Start_IT( &htim2, TIM_CHANNEL_1);
 80005d2:	2100      	movs	r1, #0
 80005d4:	4808      	ldr	r0, [pc, #32]	; (80005f8 <main+0x60>)
 80005d6:	f006 ff69 	bl	80074ac <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT( &htim2, TIM_CHANNEL_2);
 80005da:	2104      	movs	r1, #4
 80005dc:	4806      	ldr	r0, [pc, #24]	; (80005f8 <main+0x60>)
 80005de:	f006 ff65 	bl	80074ac <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT( &htim2, TIM_CHANNEL_3);
 80005e2:	2108      	movs	r1, #8
 80005e4:	4804      	ldr	r0, [pc, #16]	; (80005f8 <main+0x60>)
 80005e6:	f006 ff61 	bl	80074ac <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT( &htim2, TIM_CHANNEL_4);
 80005ea:	210c      	movs	r1, #12
 80005ec:	4802      	ldr	r0, [pc, #8]	; (80005f8 <main+0x60>)
 80005ee:	f006 ff5d 	bl	80074ac <HAL_TIM_PWM_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f2:	e7fe      	b.n	80005f2 <main+0x5a>
 80005f4:	20000120 	.word	0x20000120
 80005f8:	20000204 	.word	0x20000204

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b09e      	sub	sp, #120	; 0x78
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0318 	add.w	r3, r7, #24
 8000606:	2260      	movs	r2, #96	; 0x60
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f009 fb64 	bl	8009cd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	463b      	mov	r3, r7
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]
 800061e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000620:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8000624:	f002 fe9a 	bl	800335c <HAL_PWREx_ControlVoltageScaling>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0x36>
  {
    Error_Handler();
 800062e:	f000 fb43 	bl	8000cb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000632:	235a      	movs	r3, #90	; 0x5a
 8000634:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI|RCC_OSCILLATORTYPE_MSIK;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000636:	f44f 7380 	mov.w	r3, #256	; 0x100
 800063a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800063c:	2310      	movs	r3, #16
 800063e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000640:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000644:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000646:	2301      	movs	r3, #1
 8000648:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800064a:	2310      	movs	r3, #16
 800064c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_2;
 800064e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000652:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIKClockRange = RCC_MSIKRANGE_4;
 8000658:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800065c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIKState = RCC_MSIK_ON;
 800065e:	2310      	movs	r3, #16
 8000660:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000662:	2302      	movs	r3, #2
 8000664:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000666:	2301      	movs	r3, #1
 8000668:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800066e:	2304      	movs	r3, #4
 8000670:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000672:	2378      	movs	r3, #120	; 0x78
 8000674:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000676:	2302      	movs	r3, #2
 8000678:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800067a:	2302      	movs	r3, #2
 800067c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 4;
 800067e:	2304      	movs	r3, #4
 8000680:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8000682:	2300      	movs	r3, #0
 8000684:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000686:	2300      	movs	r3, #0
 8000688:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068a:	f107 0318 	add.w	r3, r7, #24
 800068e:	4618      	mov	r0, r3
 8000690:	f002 ff10 	bl	80034b4 <HAL_RCC_OscConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800069a:	f000 fb0d 	bl	8000cb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069e:	231f      	movs	r3, #31
 80006a0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a2:	2303      	movs	r3, #3
 80006a4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006b6:	463b      	mov	r3, r7
 80006b8:	2103      	movs	r1, #3
 80006ba:	4618      	mov	r0, r3
 80006bc:	f003 fdd6 	bl	800426c <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xce>
  {
    Error_Handler();
 80006c6:	f000 faf7 	bl	8000cb8 <Error_Handler>
  }

  /** Enable the force of MSIK in stop mode
  */
  __HAL_RCC_MSIKSTOP_ENABLE();
 80006ca:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <SystemClock_Config+0xe4>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a04      	ldr	r2, [pc, #16]	; (80006e0 <SystemClock_Config+0xe4>)
 80006d0:	f043 0302 	orr.w	r3, r3, #2
 80006d4:	6013      	str	r3, [r2, #0]
}
 80006d6:	bf00      	nop
 80006d8:	3778      	adds	r7, #120	; 0x78
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	46020c00 	.word	0x46020c00

080006e4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b0b0      	sub	sp, #192	; 0xc0
 80006e8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006ea:	463b      	mov	r3, r7
 80006ec:	22c0      	movs	r2, #192	; 0xc0
 80006ee:	2100      	movs	r1, #0
 80006f0:	4618      	mov	r0, r3
 80006f2:	f009 faf1 	bl	8009cd8 <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80006f6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80006fa:	f04f 0300 	mov.w	r3, #0
 80006fe:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_PLL2;
 8000702:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000706:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_MSI;
 800070a:	2301      	movs	r3, #1
 800070c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLL2.PLL2M = 4;
 800070e:	2304      	movs	r3, #4
 8000710:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLL2.PLL2N = 120;
 8000712:	2378      	movs	r3, #120	; 0x78
 8000714:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLL2.PLL2P = 2;
 8000716:	2302      	movs	r3, #2
 8000718:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLL2.PLL2Q = 2;
 800071a:	2302      	movs	r3, #2
 800071c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLL2.PLL2R = 20;
 800071e:	2314      	movs	r3, #20
 8000720:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_0;
 8000722:	2300      	movs	r3, #0
 8000724:	623b      	str	r3, [r7, #32]
  PeriphClkInit.PLL2.PLL2FRACN = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVR;
 800072a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800072e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000730:	463b      	mov	r3, r7
 8000732:	4618      	mov	r0, r3
 8000734:	f004 f96a 	bl	8004a0c <HAL_RCCEx_PeriphCLKConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <PeriphCommonClock_Config+0x5e>
  {
    Error_Handler();
 800073e:	f000 fabb 	bl	8000cb8 <Error_Handler>
  }
}
 8000742:	bf00      	nop
 8000744:	37c0      	adds	r7, #192	; 0xc0
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}

0800074a <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800074a:	b580      	push	{r7, lr}
 800074c:	b082      	sub	sp, #8
 800074e:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000750:	f002 fe90 	bl	8003474 <HAL_PWREx_EnableVddIO2>

  PWR_PVDTypeDef sConfigPVD = {0};
 8000754:	463b      	mov	r3, r7
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]

  /*
   * PVD Configuration
   */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 800075c:	2300      	movs	r3, #0
 800075e:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8000760:	2300      	movs	r3, #0
 8000762:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8000764:	463b      	mov	r3, r7
 8000766:	4618      	mov	r0, r3
 8000768:	f002 fd7a 	bl	8003260 <HAL_PWR_ConfigPVD>

  /*
   * Enable the PVD Output
   */
  HAL_PWR_EnablePVD();
 800076c:	f002 fde6 	bl	800333c <HAL_PWR_EnablePVD>
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800077c:	4b1e      	ldr	r3, [pc, #120]	; (80007f8 <MX_ADC1_Init+0x80>)
 800077e:	4a1f      	ldr	r2, [pc, #124]	; (80007fc <MX_ADC1_Init+0x84>)
 8000780:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000782:	4b1d      	ldr	r3, [pc, #116]	; (80007f8 <MX_ADC1_Init+0x80>)
 8000784:	2200      	movs	r2, #0
 8000786:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8000788:	4b1b      	ldr	r3, [pc, #108]	; (80007f8 <MX_ADC1_Init+0x80>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 800078e:	4b1a      	ldr	r3, [pc, #104]	; (80007f8 <MX_ADC1_Init+0x80>)
 8000790:	2200      	movs	r2, #0
 8000792:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000794:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <MX_ADC1_Init+0x80>)
 8000796:	2200      	movs	r2, #0
 8000798:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800079a:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <MX_ADC1_Init+0x80>)
 800079c:	2204      	movs	r2, #4
 800079e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007a0:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <MX_ADC1_Init+0x80>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_ADC1_Init+0x80>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfConversion = 1;
 80007ae:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_ADC1_Init+0x80>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007b4:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <MX_ADC1_Init+0x80>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007bc:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_ADC1_Init+0x80>)
 80007be:	2200      	movs	r2, #0
 80007c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_ADC1_Init+0x80>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	669a      	str	r2, [r3, #104]	; 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <MX_ADC1_Init+0x80>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_ADC1_Init+0x80>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	651a      	str	r2, [r3, #80]	; 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <MX_ADC1_Init+0x80>)
 80007d8:	2200      	movs	r2, #0
 80007da:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_ADC1_Init+0x80>)
 80007de:	2200      	movs	r2, #0
 80007e0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007e4:	4804      	ldr	r0, [pc, #16]	; (80007f8 <MX_ADC1_Init+0x80>)
 80007e6:	f000 ffb7 	bl	8001758 <HAL_ADC_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 80007f0:	f000 fa62 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	2000002c 	.word	0x2000002c
 80007fc:	42028000 	.word	0x42028000

08000800 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08e      	sub	sp, #56	; 0x38
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000806:	f107 0308 	add.w	r3, r7, #8
 800080a:	2230      	movs	r2, #48	; 0x30
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f009 fa62 	bl	8009cd8 <memset>
  DAC_AutonomousModeConfTypeDef sAutonomousMode = {0};
 8000814:	2300      	movs	r3, #0
 8000816:	607b      	str	r3, [r7, #4]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000818:	4b1b      	ldr	r3, [pc, #108]	; (8000888 <MX_DAC1_Init+0x88>)
 800081a:	4a1c      	ldr	r2, [pc, #112]	; (800088c <MX_DAC1_Init+0x8c>)
 800081c:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800081e:	481a      	ldr	r0, [pc, #104]	; (8000888 <MX_DAC1_Init+0x88>)
 8000820:	f001 fb73 	bl	8001f0a <HAL_DAC_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_DAC1_Init+0x2e>
  {
    Error_Handler();
 800082a:	f000 fa45 	bl	8000cb8 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800082e:	2300      	movs	r3, #0
 8000830:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000832:	2300      	movs	r3, #0
 8000834:	743b      	strb	r3, [r7, #16]
  sConfig.DAC_SignedFormat = DISABLE;
 8000836:	2300      	movs	r3, #0
 8000838:	747b      	strb	r3, [r7, #17]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800083e:	2300      	movs	r3, #0
 8000840:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000842:	2302      	movs	r3, #2
 8000844:	61fb      	str	r3, [r7, #28]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000846:	2301      	movs	r3, #1
 8000848:	623b      	str	r3, [r7, #32]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800084e:	f107 0308 	add.w	r3, r7, #8
 8000852:	2210      	movs	r2, #16
 8000854:	4619      	mov	r1, r3
 8000856:	480c      	ldr	r0, [pc, #48]	; (8000888 <MX_DAC1_Init+0x88>)
 8000858:	f001 fb7a 	bl	8001f50 <HAL_DAC_ConfigChannel>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_DAC1_Init+0x66>
  {
    Error_Handler();
 8000862:	f000 fa29 	bl	8000cb8 <Error_Handler>
  }

  /** Configure Autonomous Mode
  */
  sAutonomousMode.AutonomousModeState = DAC_AUTONOMOUS_MODE_DISABLE;
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
  if (HAL_DACEx_SetConfigAutonomousMode(&hdac1, &sAutonomousMode) != HAL_OK)
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	4619      	mov	r1, r3
 800086e:	4806      	ldr	r0, [pc, #24]	; (8000888 <MX_DAC1_Init+0x88>)
 8000870:	f001 fd0c 	bl	800228c <HAL_DACEx_SetConfigAutonomousMode>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_DAC1_Init+0x7e>
  {
    Error_Handler();
 800087a:	f000 fa1d 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	3738      	adds	r7, #56	; 0x38
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	200000b8 	.word	0x200000b8
 800088c:	46021800 	.word	0x46021800

08000890 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000894:	4b1b      	ldr	r3, [pc, #108]	; (8000904 <MX_I2C1_Init+0x74>)
 8000896:	4a1c      	ldr	r2, [pc, #112]	; (8000908 <MX_I2C1_Init+0x78>)
 8000898:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10911E24;
 800089a:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <MX_I2C1_Init+0x74>)
 800089c:	4a1b      	ldr	r2, [pc, #108]	; (800090c <MX_I2C1_Init+0x7c>)
 800089e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008a0:	4b18      	ldr	r3, [pc, #96]	; (8000904 <MX_I2C1_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008a6:	4b17      	ldr	r3, [pc, #92]	; (8000904 <MX_I2C1_Init+0x74>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008ac:	4b15      	ldr	r3, [pc, #84]	; (8000904 <MX_I2C1_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008b2:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_I2C1_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <MX_I2C1_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_I2C1_Init+0x74>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_I2C1_Init+0x74>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008ca:	480e      	ldr	r0, [pc, #56]	; (8000904 <MX_I2C1_Init+0x74>)
 80008cc:	f001 ffac 	bl	8002828 <HAL_I2C_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008d6:	f000 f9ef 	bl	8000cb8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 80008da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008de:	4809      	ldr	r0, [pc, #36]	; (8000904 <MX_I2C1_Init+0x74>)
 80008e0:	f002 f857 	bl	8002992 <HAL_I2CEx_ConfigAnalogFilter>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80008ea:	f000 f9e5 	bl	8000cb8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008ee:	2100      	movs	r1, #0
 80008f0:	4804      	ldr	r0, [pc, #16]	; (8000904 <MX_I2C1_Init+0x74>)
 80008f2:	f002 f899 	bl	8002a28 <HAL_I2CEx_ConfigDigitalFilter>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80008fc:	f000 f9dc 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}
 8000904:	200000cc 	.word	0x200000cc
 8000908:	40005400 	.word	0x40005400
 800090c:	10911e24 	.word	0x10911e24

08000910 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ICACHE_Init 0 */

  /* USER CODE END ICACHE_Init 0 */

  ICACHE_RegionConfigTypeDef pRegionConfig = {0};
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]

  /* USER CODE END ICACHE_Init 1 */

  /** Configure and enable a region for memory remapping.
  */
  if (HAL_ICACHE_Disable() != HAL_OK)
 8000924:	f002 f8cc 	bl	8002ac0 <HAL_ICACHE_Disable>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800092e:	f000 f9c3 	bl	8000cb8 <Error_Handler>
  }
  pRegionConfig.BaseAddress = 0x10000000;
 8000932:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000936:	607b      	str	r3, [r7, #4]
  pRegionConfig.RemapAddress = 0x60000000;
 8000938:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800093c:	60bb      	str	r3, [r7, #8]
  pRegionConfig.Size = ICACHE_REGIONSIZE_2MB;
 800093e:	2301      	movs	r3, #1
 8000940:	60fb      	str	r3, [r7, #12]
  pRegionConfig.TrafficRoute = ICACHE_MASTER1_PORT;
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
  pRegionConfig.OutputBurstType = ICACHE_OUTPUT_BURST_WRAP;
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
  if (HAL_ICACHE_EnableRemapRegion(_NULL, &pRegionConfig) != HAL_OK)
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	4619      	mov	r1, r3
 800094e:	2000      	movs	r0, #0
 8000950:	f002 f8e6 	bl	8002b20 <HAL_ICACHE_EnableRemapRegion>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_ICACHE_Init+0x4e>
  {
    Error_Handler();
 800095a:	f000 f9ad 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	3718      	adds	r7, #24
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 800096c:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <MX_LPTIM1_Init+0x5c>)
 800096e:	4a16      	ldr	r2, [pc, #88]	; (80009c8 <MX_LPTIM1_Init+0x60>)
 8000970:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000972:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <MX_LPTIM1_Init+0x5c>)
 8000974:	2200      	movs	r2, #0
 8000976:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV2;
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <MX_LPTIM1_Init+0x5c>)
 800097a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800097e:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000980:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <MX_LPTIM1_Init+0x5c>)
 8000982:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000986:	615a      	str	r2, [r3, #20]
  hlptim1.Init.Period = 2000;
 8000988:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MX_LPTIM1_Init+0x5c>)
 800098a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800098e:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <MX_LPTIM1_Init+0x5c>)
 8000992:	2200      	movs	r2, #0
 8000994:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <MX_LPTIM1_Init+0x5c>)
 8000998:	2200      	movs	r2, #0
 800099a:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 800099c:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <MX_LPTIM1_Init+0x5c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <MX_LPTIM1_Init+0x5c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	631a      	str	r2, [r3, #48]	; 0x30
  hlptim1.Init.RepetitionCounter = 0;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <MX_LPTIM1_Init+0x5c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_LPTIM1_Init+0x5c>)
 80009b0:	f002 f908 	bl	8002bc4 <HAL_LPTIM_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_LPTIM1_Init+0x56>
  {
    Error_Handler();
 80009ba:	f000 f97d 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000120 	.word	0x20000120
 80009c8:	46004400 	.word	0x46004400

080009cc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80009d0:	4b25      	ldr	r3, [pc, #148]	; (8000a68 <MX_LPUART1_UART_Init+0x9c>)
 80009d2:	4a26      	ldr	r2, [pc, #152]	; (8000a6c <MX_LPUART1_UART_Init+0xa0>)
 80009d4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 80009d6:	4b24      	ldr	r3, [pc, #144]	; (8000a68 <MX_LPUART1_UART_Init+0x9c>)
 80009d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009dc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009de:	4b22      	ldr	r3, [pc, #136]	; (8000a68 <MX_LPUART1_UART_Init+0x9c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_2;
 80009e4:	4b20      	ldr	r3, [pc, #128]	; (8000a68 <MX_LPUART1_UART_Init+0x9c>)
 80009e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009ea:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80009ec:	4b1e      	ldr	r3, [pc, #120]	; (8000a68 <MX_LPUART1_UART_Init+0x9c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80009f2:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <MX_LPUART1_UART_Init+0x9c>)
 80009f4:	220c      	movs	r2, #12
 80009f6:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f8:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <MX_LPUART1_UART_Init+0x9c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009fe:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <MX_LPUART1_UART_Init+0x9c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000a04:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <MX_LPUART1_UART_Init+0x9c>)
 8000a06:	2230      	movs	r2, #48	; 0x30
 8000a08:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000a0a:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <MX_LPUART1_UART_Init+0x9c>)
 8000a0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a10:	63da      	str	r2, [r3, #60]	; 0x3c
  hlpuart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000a12:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <MX_LPUART1_UART_Init+0x9c>)
 8000a14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a18:	641a      	str	r2, [r3, #64]	; 0x40
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000a1a:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <MX_LPUART1_UART_Init+0x9c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000a20:	4811      	ldr	r0, [pc, #68]	; (8000a68 <MX_LPUART1_UART_Init+0x9c>)
 8000a22:	f008 f915 	bl	8008c50 <HAL_UART_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000a2c:	f000 f944 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a30:	2100      	movs	r1, #0
 8000a32:	480d      	ldr	r0, [pc, #52]	; (8000a68 <MX_LPUART1_UART_Init+0x9c>)
 8000a34:	f009 f885 	bl	8009b42 <HAL_UARTEx_SetTxFifoThreshold>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000a3e:	f000 f93b 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a42:	2100      	movs	r1, #0
 8000a44:	4808      	ldr	r0, [pc, #32]	; (8000a68 <MX_LPUART1_UART_Init+0x9c>)
 8000a46:	f009 f8ba 	bl	8009bbe <HAL_UARTEx_SetRxFifoThreshold>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_LPUART1_UART_Init+0x88>
  {
    Error_Handler();
 8000a50:	f000 f932 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000a54:	4804      	ldr	r0, [pc, #16]	; (8000a68 <MX_LPUART1_UART_Init+0x9c>)
 8000a56:	f009 f83b 	bl	8009ad0 <HAL_UARTEx_DisableFifoMode>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_LPUART1_UART_Init+0x98>
  {
    Error_Handler();
 8000a60:	f000 f92a 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000170 	.word	0x20000170
 8000a6c:	46002400 	.word	0x46002400

08000a70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08e      	sub	sp, #56	; 0x38
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a90:	463b      	mov	r3, r7
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
 8000a9c:	611a      	str	r2, [r3, #16]
 8000a9e:	615a      	str	r2, [r3, #20]
 8000aa0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000aa2:	4b3e      	ldr	r3, [pc, #248]	; (8000b9c <MX_TIM2_Init+0x12c>)
 8000aa4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aa8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 12000;
 8000aaa:	4b3c      	ldr	r3, [pc, #240]	; (8000b9c <MX_TIM2_Init+0x12c>)
 8000aac:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8000ab0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab2:	4b3a      	ldr	r3, [pc, #232]	; (8000b9c <MX_TIM2_Init+0x12c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8000ab8:	4b38      	ldr	r3, [pc, #224]	; (8000b9c <MX_TIM2_Init+0x12c>)
 8000aba:	2264      	movs	r2, #100	; 0x64
 8000abc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000abe:	4b37      	ldr	r3, [pc, #220]	; (8000b9c <MX_TIM2_Init+0x12c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac4:	4b35      	ldr	r3, [pc, #212]	; (8000b9c <MX_TIM2_Init+0x12c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000aca:	4834      	ldr	r0, [pc, #208]	; (8000b9c <MX_TIM2_Init+0x12c>)
 8000acc:	f006 fc36 	bl	800733c <HAL_TIM_Base_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000ad6:	f000 f8ef 	bl	8000cb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ada:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ae0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	482d      	ldr	r0, [pc, #180]	; (8000b9c <MX_TIM2_Init+0x12c>)
 8000ae8:	f007 f8e4 	bl	8007cb4 <HAL_TIM_ConfigClockSource>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000af2:	f000 f8e1 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000af6:	4829      	ldr	r0, [pc, #164]	; (8000b9c <MX_TIM2_Init+0x12c>)
 8000af8:	f006 fc77 	bl	80073ea <HAL_TIM_PWM_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000b02:	f000 f8d9 	bl	8000cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	4619      	mov	r1, r3
 8000b14:	4821      	ldr	r0, [pc, #132]	; (8000b9c <MX_TIM2_Init+0x12c>)
 8000b16:	f007 ff93 	bl	8008a40 <HAL_TIMEx_MasterConfigSynchronization>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000b20:	f000 f8ca 	bl	8000cb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b24:	2360      	movs	r3, #96	; 0x60
 8000b26:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 8000b28:	2332      	movs	r3, #50	; 0x32
 8000b2a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b34:	463b      	mov	r3, r7
 8000b36:	2200      	movs	r2, #0
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4818      	ldr	r0, [pc, #96]	; (8000b9c <MX_TIM2_Init+0x12c>)
 8000b3c:	f006 ffa6 	bl	8007a8c <HAL_TIM_PWM_ConfigChannel>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000b46:	f000 f8b7 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b4a:	463b      	mov	r3, r7
 8000b4c:	2204      	movs	r2, #4
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4812      	ldr	r0, [pc, #72]	; (8000b9c <MX_TIM2_Init+0x12c>)
 8000b52:	f006 ff9b 	bl	8007a8c <HAL_TIM_PWM_ConfigChannel>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000b5c:	f000 f8ac 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b60:	463b      	mov	r3, r7
 8000b62:	2208      	movs	r2, #8
 8000b64:	4619      	mov	r1, r3
 8000b66:	480d      	ldr	r0, [pc, #52]	; (8000b9c <MX_TIM2_Init+0x12c>)
 8000b68:	f006 ff90 	bl	8007a8c <HAL_TIM_PWM_ConfigChannel>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000b72:	f000 f8a1 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b76:	463b      	mov	r3, r7
 8000b78:	220c      	movs	r2, #12
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4807      	ldr	r0, [pc, #28]	; (8000b9c <MX_TIM2_Init+0x12c>)
 8000b7e:	f006 ff85 	bl	8007a8c <HAL_TIM_PWM_ConfigChannel>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8000b88:	f000 f896 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b8c:	4803      	ldr	r0, [pc, #12]	; (8000b9c <MX_TIM2_Init+0x12c>)
 8000b8e:	f000 facd 	bl	800112c <HAL_TIM_MspPostInit>

}
 8000b92:	bf00      	nop
 8000b94:	3738      	adds	r7, #56	; 0x38
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000204 	.word	0x20000204

08000ba0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	; 0x28
 8000ba4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb6:	4b3c      	ldr	r3, [pc, #240]	; (8000ca8 <MX_GPIO_Init+0x108>)
 8000bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bbc:	4a3a      	ldr	r2, [pc, #232]	; (8000ca8 <MX_GPIO_Init+0x108>)
 8000bbe:	f043 0304 	orr.w	r3, r3, #4
 8000bc2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000bc6:	4b38      	ldr	r3, [pc, #224]	; (8000ca8 <MX_GPIO_Init+0x108>)
 8000bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bcc:	f003 0304 	and.w	r3, r3, #4
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd4:	4b34      	ldr	r3, [pc, #208]	; (8000ca8 <MX_GPIO_Init+0x108>)
 8000bd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bda:	4a33      	ldr	r2, [pc, #204]	; (8000ca8 <MX_GPIO_Init+0x108>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000be4:	4b30      	ldr	r3, [pc, #192]	; (8000ca8 <MX_GPIO_Init+0x108>)
 8000be6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	4b2d      	ldr	r3, [pc, #180]	; (8000ca8 <MX_GPIO_Init+0x108>)
 8000bf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bf8:	4a2b      	ldr	r2, [pc, #172]	; (8000ca8 <MX_GPIO_Init+0x108>)
 8000bfa:	f043 0302 	orr.w	r3, r3, #2
 8000bfe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c02:	4b29      	ldr	r3, [pc, #164]	; (8000ca8 <MX_GPIO_Init+0x108>)
 8000c04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c08:	f003 0302 	and.w	r3, r3, #2
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c10:	4b25      	ldr	r3, [pc, #148]	; (8000ca8 <MX_GPIO_Init+0x108>)
 8000c12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c16:	4a24      	ldr	r2, [pc, #144]	; (8000ca8 <MX_GPIO_Init+0x108>)
 8000c18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c1c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c20:	4b21      	ldr	r3, [pc, #132]	; (8000ca8 <MX_GPIO_Init+0x108>)
 8000c22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2104      	movs	r1, #4
 8000c32:	481e      	ldr	r0, [pc, #120]	; (8000cac <MX_GPIO_Init+0x10c>)
 8000c34:	f001 fde0 	bl	80027f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2180      	movs	r1, #128	; 0x80
 8000c3c:	481c      	ldr	r0, [pc, #112]	; (8000cb0 <MX_GPIO_Init+0x110>)
 8000c3e:	f001 fddb 	bl	80027f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2180      	movs	r1, #128	; 0x80
 8000c46:	481b      	ldr	r0, [pc, #108]	; (8000cb4 <MX_GPIO_Init+0x114>)
 8000c48:	f001 fdd6 	bl	80027f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c4c:	2304      	movs	r3, #4
 8000c4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c50:	2301      	movs	r3, #1
 8000c52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	4619      	mov	r1, r3
 8000c62:	4812      	ldr	r0, [pc, #72]	; (8000cac <MX_GPIO_Init+0x10c>)
 8000c64:	f001 fbf0 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c68:	2380      	movs	r3, #128	; 0x80
 8000c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2300      	movs	r3, #0
 8000c76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	480c      	ldr	r0, [pc, #48]	; (8000cb0 <MX_GPIO_Init+0x110>)
 8000c80:	f001 fbe2 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c84:	2380      	movs	r3, #128	; 0x80
 8000c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2300      	movs	r3, #0
 8000c92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4806      	ldr	r0, [pc, #24]	; (8000cb4 <MX_GPIO_Init+0x114>)
 8000c9c:	f001 fbd4 	bl	8002448 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ca0:	bf00      	nop
 8000ca2:	3728      	adds	r7, #40	; 0x28
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	46020c00 	.word	0x46020c00
 8000cac:	42021800 	.word	0x42021800
 8000cb0:	42020800 	.word	0x42020800
 8000cb4:	42020400 	.word	0x42020400

08000cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cbc:	b672      	cpsid	i
}
 8000cbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <Error_Handler+0x8>
	...

08000cc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000cca:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <HAL_MspInit+0x30>)
 8000ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000cd0:	4a08      	ldr	r2, [pc, #32]	; (8000cf4 <HAL_MspInit+0x30>)
 8000cd2:	f043 0304 	orr.w	r3, r3, #4
 8000cd6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_MspInit+0x30>)
 8000cdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ce0:	f003 0304 	and.w	r3, r3, #4
 8000ce4:	607b      	str	r3, [r7, #4]
 8000ce6:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8000ce8:	f002 fbd4 	bl	8003494 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	46020c00 	.word	0x46020c00

08000cf8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	; 0x28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a18      	ldr	r2, [pc, #96]	; (8000d78 <HAL_ADC_MspInit+0x80>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d129      	bne.n	8000d6e <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d1a:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <HAL_ADC_MspInit+0x84>)
 8000d1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d20:	4a16      	ldr	r2, [pc, #88]	; (8000d7c <HAL_ADC_MspInit+0x84>)
 8000d22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d26:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d2a:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <HAL_ADC_MspInit+0x84>)
 8000d2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d34:	613b      	str	r3, [r7, #16]
 8000d36:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d38:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <HAL_ADC_MspInit+0x84>)
 8000d3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d3e:	4a0f      	ldr	r2, [pc, #60]	; (8000d7c <HAL_ADC_MspInit+0x84>)
 8000d40:	f043 0304 	orr.w	r3, r3, #4
 8000d44:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d48:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <HAL_ADC_MspInit+0x84>)
 8000d4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d4e:	f003 0304 	and.w	r3, r3, #4
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d56:	2301      	movs	r3, #1
 8000d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	4619      	mov	r1, r3
 8000d68:	4805      	ldr	r0, [pc, #20]	; (8000d80 <HAL_ADC_MspInit+0x88>)
 8000d6a:	f001 fb6d 	bl	8002448 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d6e:	bf00      	nop
 8000d70:	3728      	adds	r7, #40	; 0x28
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	42028000 	.word	0x42028000
 8000d7c:	46020c00 	.word	0x46020c00
 8000d80:	42020800 	.word	0x42020800

08000d84 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b0ba      	sub	sp, #232	; 0xe8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d9c:	f107 0310 	add.w	r3, r7, #16
 8000da0:	22c0      	movs	r2, #192	; 0xc0
 8000da2:	2100      	movs	r1, #0
 8000da4:	4618      	mov	r0, r3
 8000da6:	f008 ff97 	bl	8009cd8 <memset>
  if(hdac->Instance==DAC1)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a24      	ldr	r2, [pc, #144]	; (8000e40 <HAL_DAC_MspInit+0xbc>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d140      	bne.n	8000e36 <HAL_DAC_MspInit+0xb2>

  /* USER CODE END DAC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DAC1;
 8000db4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000db8:	f04f 0300 	mov.w	r3, #0
 8000dbc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Dac1ClockSelection = RCC_DAC1CLKSOURCE_LSI;
 8000dc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dc8:	f107 0310 	add.w	r3, r7, #16
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f003 fe1d 	bl	8004a0c <HAL_RCCEx_PeriphCLKConfig>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <HAL_DAC_MspInit+0x58>
    {
      Error_Handler();
 8000dd8:	f7ff ff6e 	bl	8000cb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000ddc:	4b19      	ldr	r3, [pc, #100]	; (8000e44 <HAL_DAC_MspInit+0xc0>)
 8000dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000de2:	4a18      	ldr	r2, [pc, #96]	; (8000e44 <HAL_DAC_MspInit+0xc0>)
 8000de4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000de8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000dec:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <HAL_DAC_MspInit+0xc0>)
 8000dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfa:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <HAL_DAC_MspInit+0xc0>)
 8000dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e00:	4a10      	ldr	r2, [pc, #64]	; (8000e44 <HAL_DAC_MspInit+0xc0>)
 8000e02:	f043 0301 	orr.w	r3, r3, #1
 8000e06:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <HAL_DAC_MspInit+0xc0>)
 8000e0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e18:	2320      	movs	r3, #32
 8000e1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4805      	ldr	r0, [pc, #20]	; (8000e48 <HAL_DAC_MspInit+0xc4>)
 8000e32:	f001 fb09 	bl	8002448 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000e36:	bf00      	nop
 8000e38:	37e8      	adds	r7, #232	; 0xe8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	46021800 	.word	0x46021800
 8000e44:	46020c00 	.word	0x46020c00
 8000e48:	42020000 	.word	0x42020000

08000e4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b0ba      	sub	sp, #232	; 0xe8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e64:	f107 0310 	add.w	r3, r7, #16
 8000e68:	22c0      	movs	r2, #192	; 0xc0
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f008 ff33 	bl	8009cd8 <memset>
  if(hi2c->Instance==I2C1)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a2b      	ldr	r2, [pc, #172]	; (8000f24 <HAL_I2C_MspInit+0xd8>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d14e      	bne.n	8000f1a <HAL_I2C_MspInit+0xce>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e7c:	f04f 0240 	mov.w	r2, #64	; 0x40
 8000e80:	f04f 0300 	mov.w	r3, #0
 8000e84:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000e88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e8c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e8e:	f107 0310 	add.w	r3, r7, #16
 8000e92:	4618      	mov	r0, r3
 8000e94:	f003 fdba 	bl	8004a0c <HAL_RCCEx_PeriphCLKConfig>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000e9e:	f7ff ff0b 	bl	8000cb8 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ea2:	4b21      	ldr	r3, [pc, #132]	; (8000f28 <HAL_I2C_MspInit+0xdc>)
 8000ea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ea8:	4a1f      	ldr	r2, [pc, #124]	; (8000f28 <HAL_I2C_MspInit+0xdc>)
 8000eaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000eb2:	4b1d      	ldr	r3, [pc, #116]	; (8000f28 <HAL_I2C_MspInit+0xdc>)
 8000eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000ec0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000ec4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ec8:	2312      	movs	r3, #18
 8000eca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000eda:	2304      	movs	r3, #4
 8000edc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ee0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4811      	ldr	r0, [pc, #68]	; (8000f2c <HAL_I2C_MspInit+0xe0>)
 8000ee8:	f001 faae 	bl	8002448 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000eec:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <HAL_I2C_MspInit+0xdc>)
 8000eee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000ef2:	4a0d      	ldr	r2, [pc, #52]	; (8000f28 <HAL_I2C_MspInit+0xdc>)
 8000ef4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ef8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000efc:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <HAL_I2C_MspInit+0xdc>)
 8000efe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000f02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	2037      	movs	r0, #55	; 0x37
 8000f10:	f000 ffc7 	bl	8001ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000f14:	2037      	movs	r0, #55	; 0x37
 8000f16:	f000 ffde 	bl	8001ed6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f1a:	bf00      	nop
 8000f1c:	37e8      	adds	r7, #232	; 0xe8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40005400 	.word	0x40005400
 8000f28:	46020c00 	.word	0x46020c00
 8000f2c:	42021800 	.word	0x42021800

08000f30 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b0b4      	sub	sp, #208	; 0xd0
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f38:	f107 0310 	add.w	r3, r7, #16
 8000f3c:	22c0      	movs	r2, #192	; 0xc0
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4618      	mov	r0, r3
 8000f42:	f008 fec9 	bl	8009cd8 <memset>
  if(hlptim->Instance==LPTIM1)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a18      	ldr	r2, [pc, #96]	; (8000fac <HAL_LPTIM_MspInit+0x7c>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d129      	bne.n	8000fa4 <HAL_LPTIM_MspInit+0x74>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8000f50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f54:	f04f 0300 	mov.w	r3, #0
 8000f58:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_MSIK;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f62:	f107 0310 	add.w	r3, r7, #16
 8000f66:	4618      	mov	r0, r3
 8000f68:	f003 fd50 	bl	8004a0c <HAL_RCCEx_PeriphCLKConfig>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <HAL_LPTIM_MspInit+0x46>
    {
      Error_Handler();
 8000f72:	f7ff fea1 	bl	8000cb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <HAL_LPTIM_MspInit+0x80>)
 8000f78:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000f7c:	4a0c      	ldr	r2, [pc, #48]	; (8000fb0 <HAL_LPTIM_MspInit+0x80>)
 8000f7e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f82:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8000f86:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <HAL_LPTIM_MspInit+0x80>)
 8000f88:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000f8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8000f94:	2200      	movs	r2, #0
 8000f96:	2100      	movs	r1, #0
 8000f98:	2043      	movs	r0, #67	; 0x43
 8000f9a:	f000 ff82 	bl	8001ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8000f9e:	2043      	movs	r0, #67	; 0x43
 8000fa0:	f000 ff99 	bl	8001ed6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8000fa4:	bf00      	nop
 8000fa6:	37d0      	adds	r7, #208	; 0xd0
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	46004400 	.word	0x46004400
 8000fb0:	46020c00 	.word	0x46020c00

08000fb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b0bc      	sub	sp, #240	; 0xf0
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fcc:	f107 0318 	add.w	r3, r7, #24
 8000fd0:	22c0      	movs	r2, #192	; 0xc0
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f008 fe7f 	bl	8009cd8 <memset>
  if(huart->Instance==LPUART1)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a3c      	ldr	r2, [pc, #240]	; (80010d0 <HAL_UART_MspInit+0x11c>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d171      	bne.n	80010c8 <HAL_UART_MspInit+0x114>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000fe4:	f04f 0220 	mov.w	r2, #32
 8000fe8:	f04f 0300 	mov.w	r3, #0
 8000fec:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff4:	f107 0318 	add.w	r3, r7, #24
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f003 fd07 	bl	8004a0c <HAL_RCCEx_PeriphCLKConfig>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001004:	f7ff fe58 	bl	8000cb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001008:	4b32      	ldr	r3, [pc, #200]	; (80010d4 <HAL_UART_MspInit+0x120>)
 800100a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800100e:	4a31      	ldr	r2, [pc, #196]	; (80010d4 <HAL_UART_MspInit+0x120>)
 8001010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001014:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8001018:	4b2e      	ldr	r3, [pc, #184]	; (80010d4 <HAL_UART_MspInit+0x120>)
 800101a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800101e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001022:	617b      	str	r3, [r7, #20]
 8001024:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001026:	4b2b      	ldr	r3, [pc, #172]	; (80010d4 <HAL_UART_MspInit+0x120>)
 8001028:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800102c:	4a29      	ldr	r2, [pc, #164]	; (80010d4 <HAL_UART_MspInit+0x120>)
 800102e:	f043 0304 	orr.w	r3, r3, #4
 8001032:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001036:	4b27      	ldr	r3, [pc, #156]	; (80010d4 <HAL_UART_MspInit+0x120>)
 8001038:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800103c:	f003 0304 	and.w	r3, r3, #4
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001044:	4b23      	ldr	r3, [pc, #140]	; (80010d4 <HAL_UART_MspInit+0x120>)
 8001046:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800104a:	4a22      	ldr	r2, [pc, #136]	; (80010d4 <HAL_UART_MspInit+0x120>)
 800104c:	f043 0302 	orr.w	r3, r3, #2
 8001050:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001054:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <HAL_UART_MspInit+0x120>)
 8001056:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    PB10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001062:	2302      	movs	r3, #2
 8001064:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001068:	2302      	movs	r3, #2
 800106a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800107a:	2308      	movs	r3, #8
 800107c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001080:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001084:	4619      	mov	r1, r3
 8001086:	4814      	ldr	r0, [pc, #80]	; (80010d8 <HAL_UART_MspInit+0x124>)
 8001088:	f001 f9de 	bl	8002448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800108c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001090:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	2302      	movs	r3, #2
 8001096:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80010a6:	2308      	movs	r3, #8
 80010a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80010b0:	4619      	mov	r1, r3
 80010b2:	480a      	ldr	r0, [pc, #40]	; (80010dc <HAL_UART_MspInit+0x128>)
 80010b4:	f001 f9c8 	bl	8002448 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80010b8:	2200      	movs	r2, #0
 80010ba:	2100      	movs	r1, #0
 80010bc:	2042      	movs	r0, #66	; 0x42
 80010be:	f000 fef0 	bl	8001ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80010c2:	2042      	movs	r0, #66	; 0x42
 80010c4:	f000 ff07 	bl	8001ed6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80010c8:	bf00      	nop
 80010ca:	37f0      	adds	r7, #240	; 0xf0
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	46002400 	.word	0x46002400
 80010d4:	46020c00 	.word	0x46020c00
 80010d8:	42020800 	.word	0x42020800
 80010dc:	42020400 	.word	0x42020400

080010e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010f0:	d116      	bne.n	8001120 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010f2:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <HAL_TIM_Base_MspInit+0x48>)
 80010f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80010f8:	4a0b      	ldr	r2, [pc, #44]	; (8001128 <HAL_TIM_Base_MspInit+0x48>)
 80010fa:	f043 0301 	orr.w	r3, r3, #1
 80010fe:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001102:	4b09      	ldr	r3, [pc, #36]	; (8001128 <HAL_TIM_Base_MspInit+0x48>)
 8001104:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001110:	2200      	movs	r2, #0
 8001112:	2100      	movs	r1, #0
 8001114:	202d      	movs	r0, #45	; 0x2d
 8001116:	f000 fec4 	bl	8001ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800111a:	202d      	movs	r0, #45	; 0x2d
 800111c:	f000 fedb 	bl	8001ed6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001120:	bf00      	nop
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	46020c00 	.word	0x46020c00

0800112c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800114c:	d11e      	bne.n	800118c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114e:	4b11      	ldr	r3, [pc, #68]	; (8001194 <HAL_TIM_MspPostInit+0x68>)
 8001150:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001154:	4a0f      	ldr	r2, [pc, #60]	; (8001194 <HAL_TIM_MspPostInit+0x68>)
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800115e:	4b0d      	ldr	r3, [pc, #52]	; (8001194 <HAL_TIM_MspPostInit+0x68>)
 8001160:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800116c:	230f      	movs	r3, #15
 800116e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001170:	2302      	movs	r3, #2
 8001172:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001178:	2300      	movs	r3, #0
 800117a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800117c:	2301      	movs	r3, #1
 800117e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001180:	f107 030c 	add.w	r3, r7, #12
 8001184:	4619      	mov	r1, r3
 8001186:	4804      	ldr	r0, [pc, #16]	; (8001198 <HAL_TIM_MspPostInit+0x6c>)
 8001188:	f001 f95e 	bl	8002448 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800118c:	bf00      	nop
 800118e:	3720      	adds	r7, #32
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	46020c00 	.word	0x46020c00
 8001198:	42020000 	.word	0x42020000

0800119c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011a0:	e7fe      	b.n	80011a0 <NMI_Handler+0x4>

080011a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a6:	e7fe      	b.n	80011a6 <HardFault_Handler+0x4>

080011a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011ac:	e7fe      	b.n	80011ac <MemManage_Handler+0x4>

080011ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011b2:	e7fe      	b.n	80011b2 <BusFault_Handler+0x4>

080011b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <UsageFault_Handler+0x4>

080011ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011e8:	f000 f998 	bl	800151c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(TIM2->SR & TIM_SR_CC1IF)
 80011f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011f8:	691b      	ldr	r3, [r3, #16]
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d00f      	beq.n	8001222 <TIM2_IRQHandler+0x32>
	{
		TIM2->CCR1 += 5;
 8001202:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001208:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800120c:	3305      	adds	r3, #5
 800120e:	6353      	str	r3, [r2, #52]	; 0x34
		if(TIM2->CCR1 == 100)
 8001210:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001216:	2b64      	cmp	r3, #100	; 0x64
 8001218:	d103      	bne.n	8001222 <TIM2_IRQHandler+0x32>
		{
			TIM2->CCR1 = 5;
 800121a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800121e:	2205      	movs	r2, #5
 8001220:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	if(TIM2->SR & TIM_SR_CC2IF)
 8001222:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	f003 0304 	and.w	r3, r3, #4
 800122c:	2b00      	cmp	r3, #0
 800122e:	d00f      	beq.n	8001250 <TIM2_IRQHandler+0x60>
	{
		TIM2->CCR2 += 5;
 8001230:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001236:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800123a:	3305      	adds	r3, #5
 800123c:	6393      	str	r3, [r2, #56]	; 0x38
		if(TIM2->CCR2 == 100)
 800123e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001244:	2b64      	cmp	r3, #100	; 0x64
 8001246:	d103      	bne.n	8001250 <TIM2_IRQHandler+0x60>
		{
			TIM2->CCR2 = 5;
 8001248:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800124c:	2205      	movs	r2, #5
 800124e:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	if(TIM2->SR & TIM_SR_CC3IF)
 8001250:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001254:	691b      	ldr	r3, [r3, #16]
 8001256:	f003 0308 	and.w	r3, r3, #8
 800125a:	2b00      	cmp	r3, #0
 800125c:	d00f      	beq.n	800127e <TIM2_IRQHandler+0x8e>
	{
		TIM2->CCR3 += 5;
 800125e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001264:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001268:	3305      	adds	r3, #5
 800126a:	63d3      	str	r3, [r2, #60]	; 0x3c
		if(TIM2->CCR3 == 100)
 800126c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001272:	2b64      	cmp	r3, #100	; 0x64
 8001274:	d103      	bne.n	800127e <TIM2_IRQHandler+0x8e>
		{
			TIM2->CCR3 = 5;
 8001276:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800127a:	2205      	movs	r2, #5
 800127c:	63da      	str	r2, [r3, #60]	; 0x3c
		}
	}
	if(TIM2->SR & TIM_SR_CC4IF)
 800127e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001282:	691b      	ldr	r3, [r3, #16]
 8001284:	f003 0310 	and.w	r3, r3, #16
 8001288:	2b00      	cmp	r3, #0
 800128a:	d00f      	beq.n	80012ac <TIM2_IRQHandler+0xbc>
	{
		TIM2->CCR4 += 5;
 800128c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001296:	3305      	adds	r3, #5
 8001298:	6413      	str	r3, [r2, #64]	; 0x40
		if(TIM2->CCR4 == 100)
 800129a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	2b64      	cmp	r3, #100	; 0x64
 80012a2:	d103      	bne.n	80012ac <TIM2_IRQHandler+0xbc>
		{
			TIM2->CCR4 = 5;
 80012a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012a8:	2205      	movs	r2, #5
 80012aa:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012ac:	4802      	ldr	r0, [pc, #8]	; (80012b8 <TIM2_IRQHandler+0xc8>)
 80012ae:	f006 fa9d 	bl	80077ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000204 	.word	0x20000204

080012bc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 Event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80012c0:	4802      	ldr	r0, [pc, #8]	; (80012cc <I2C1_EV_IRQHandler+0x10>)
 80012c2:	f001 fb4c 	bl	800295e <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200000cc 	.word	0x200000cc

080012d0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80012d4:	4802      	ldr	r0, [pc, #8]	; (80012e0 <LPUART1_IRQHandler+0x10>)
 80012d6:	f007 fd0b 	bl	8008cf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000170 	.word	0x20000170

080012e4 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */
	static uint8_t ledNo = 0;
	static uint8_t delay = 100;
  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 80012e8:	4823      	ldr	r0, [pc, #140]	; (8001378 <LPTIM1_IRQHandler+0x94>)
 80012ea:	f001 fdb4 	bl	8002e56 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */
	delay--;
 80012ee:	4b23      	ldr	r3, [pc, #140]	; (800137c <LPTIM1_IRQHandler+0x98>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	4b21      	ldr	r3, [pc, #132]	; (800137c <LPTIM1_IRQHandler+0x98>)
 80012f8:	701a      	strb	r2, [r3, #0]
	if(delay > 0)
 80012fa:	4b20      	ldr	r3, [pc, #128]	; (800137c <LPTIM1_IRQHandler+0x98>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d138      	bne.n	8001374 <LPTIM1_IRQHandler+0x90>
	{
		return;
	}
	delay = 100;
 8001302:	4b1e      	ldr	r3, [pc, #120]	; (800137c <LPTIM1_IRQHandler+0x98>)
 8001304:	2264      	movs	r2, #100	; 0x64
 8001306:	701a      	strb	r2, [r3, #0]
	switch (ledNo)
 8001308:	4b1d      	ldr	r3, [pc, #116]	; (8001380 <LPTIM1_IRQHandler+0x9c>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b02      	cmp	r3, #2
 800130e:	d020      	beq.n	8001352 <LPTIM1_IRQHandler+0x6e>
 8001310:	2b02      	cmp	r3, #2
 8001312:	dc2b      	bgt.n	800136c <LPTIM1_IRQHandler+0x88>
 8001314:	2b00      	cmp	r3, #0
 8001316:	d002      	beq.n	800131e <LPTIM1_IRQHandler+0x3a>
 8001318:	2b01      	cmp	r3, #1
 800131a:	d00d      	beq.n	8001338 <LPTIM1_IRQHandler+0x54>
 800131c:	e026      	b.n	800136c <LPTIM1_IRQHandler+0x88>
	{
	case 0:
		GPIOG->ODR ^= GPIO_ODR_OD2;
 800131e:	4b19      	ldr	r3, [pc, #100]	; (8001384 <LPTIM1_IRQHandler+0xa0>)
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	4a18      	ldr	r2, [pc, #96]	; (8001384 <LPTIM1_IRQHandler+0xa0>)
 8001324:	f083 0304 	eor.w	r3, r3, #4
 8001328:	6153      	str	r3, [r2, #20]
		ledNo++;
 800132a:	4b15      	ldr	r3, [pc, #84]	; (8001380 <LPTIM1_IRQHandler+0x9c>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	3301      	adds	r3, #1
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4b13      	ldr	r3, [pc, #76]	; (8001380 <LPTIM1_IRQHandler+0x9c>)
 8001334:	701a      	strb	r2, [r3, #0]
		break;
 8001336:	e01e      	b.n	8001376 <LPTIM1_IRQHandler+0x92>
	case 1:
		GPIOC->ODR ^= GPIO_ODR_OD7;
 8001338:	4b13      	ldr	r3, [pc, #76]	; (8001388 <LPTIM1_IRQHandler+0xa4>)
 800133a:	695b      	ldr	r3, [r3, #20]
 800133c:	4a12      	ldr	r2, [pc, #72]	; (8001388 <LPTIM1_IRQHandler+0xa4>)
 800133e:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 8001342:	6153      	str	r3, [r2, #20]
		ledNo++;
 8001344:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <LPTIM1_IRQHandler+0x9c>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	3301      	adds	r3, #1
 800134a:	b2da      	uxtb	r2, r3
 800134c:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <LPTIM1_IRQHandler+0x9c>)
 800134e:	701a      	strb	r2, [r3, #0]
		break;
 8001350:	e011      	b.n	8001376 <LPTIM1_IRQHandler+0x92>
	case 2:
		GPIOB->ODR ^= GPIO_ODR_OD7;
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <LPTIM1_IRQHandler+0xa8>)
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	4a0d      	ldr	r2, [pc, #52]	; (800138c <LPTIM1_IRQHandler+0xa8>)
 8001358:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 800135c:	6153      	str	r3, [r2, #20]
		ledNo++;
 800135e:	4b08      	ldr	r3, [pc, #32]	; (8001380 <LPTIM1_IRQHandler+0x9c>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	3301      	adds	r3, #1
 8001364:	b2da      	uxtb	r2, r3
 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <LPTIM1_IRQHandler+0x9c>)
 8001368:	701a      	strb	r2, [r3, #0]
		break;
 800136a:	e004      	b.n	8001376 <LPTIM1_IRQHandler+0x92>
	default:
		ledNo = 0;
 800136c:	4b04      	ldr	r3, [pc, #16]	; (8001380 <LPTIM1_IRQHandler+0x9c>)
 800136e:	2200      	movs	r2, #0
 8001370:	701a      	strb	r2, [r3, #0]
		break;
 8001372:	e000      	b.n	8001376 <LPTIM1_IRQHandler+0x92>
		return;
 8001374:	bf00      	nop
	}
  /* USER CODE END LPTIM1_IRQn 1 */
}
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000120 	.word	0x20000120
 800137c:	20000000 	.word	0x20000000
 8001380:	20000250 	.word	0x20000250
 8001384:	42021800 	.word	0x42021800
 8001388:	42020800 	.word	0x42020800
 800138c:	42020400 	.word	0x42020400

08001390 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001394:	4b18      	ldr	r3, [pc, #96]	; (80013f8 <SystemInit+0x68>)
 8001396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800139a:	4a17      	ldr	r2, [pc, #92]	; (80013f8 <SystemInit+0x68>)
 800139c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80013a4:	4b15      	ldr	r3, [pc, #84]	; (80013fc <SystemInit+0x6c>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80013aa:	4b14      	ldr	r3, [pc, #80]	; (80013fc <SystemInit+0x6c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80013b0:	4b12      	ldr	r3, [pc, #72]	; (80013fc <SystemInit+0x6c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80013b6:	4b11      	ldr	r3, [pc, #68]	; (80013fc <SystemInit+0x6c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80013bc:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <SystemInit+0x6c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a0e      	ldr	r2, [pc, #56]	; (80013fc <SystemInit+0x6c>)
 80013c2:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80013c6:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80013ca:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80013cc:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <SystemInit+0x6c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80013d2:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <SystemInit+0x6c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a09      	ldr	r2, [pc, #36]	; (80013fc <SystemInit+0x6c>)
 80013d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013dc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80013de:	4b07      	ldr	r3, [pc, #28]	; (80013fc <SystemInit+0x6c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013e4:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <SystemInit+0x68>)
 80013e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013ea:	609a      	str	r2, [r3, #8]
  #endif
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	e000ed00 	.word	0xe000ed00
 80013fc:	46020c00 	.word	0x46020c00

08001400 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001400:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001438 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001404:	f7ff ffc4 	bl	8001390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001408:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800140a:	e003      	b.n	8001414 <LoopCopyDataInit>

0800140c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800140c:	4b0b      	ldr	r3, [pc, #44]	; (800143c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800140e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001410:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001412:	3104      	adds	r1, #4

08001414 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001414:	480a      	ldr	r0, [pc, #40]	; (8001440 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001416:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001418:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800141a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800141c:	d3f6      	bcc.n	800140c <CopyDataInit>
	ldr	r2, =_sbss
 800141e:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001420:	e002      	b.n	8001428 <LoopFillZerobss>

08001422 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001422:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001424:	f842 3b04 	str.w	r3, [r2], #4

08001428 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001428:	4b08      	ldr	r3, [pc, #32]	; (800144c <LoopForever+0x16>)
	cmp	r2, r3
 800142a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800142c:	d3f9      	bcc.n	8001422 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800142e:	f008 fc5b 	bl	8009ce8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001432:	f7ff f8b1 	bl	8000598 <main>

08001436 <LoopForever>:

LoopForever:
    b LoopForever
 8001436:	e7fe      	b.n	8001436 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001438:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 800143c:	08009e58 	.word	0x08009e58
	ldr	r0, =_sdata
 8001440:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001444:	2000000d 	.word	0x2000000d
	ldr	r2, =_sbss
 8001448:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 800144c:	20000258 	.word	0x20000258

08001450 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001450:	e7fe      	b.n	8001450 <ADC1_IRQHandler>
	...

08001454 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001458:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <HAL_Init+0x4c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a10      	ldr	r2, [pc, #64]	; (80014a0 <HAL_Init+0x4c>)
 800145e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001462:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001464:	2003      	movs	r0, #3
 8001466:	f000 fd11 	bl	8001e8c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800146a:	f003 f8f1 	bl	8004650 <HAL_RCC_GetSysClockFreq>
 800146e:	4602      	mov	r2, r0
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <HAL_Init+0x50>)
 8001472:	6a1b      	ldr	r3, [r3, #32]
 8001474:	f003 030f 	and.w	r3, r3, #15
 8001478:	490b      	ldr	r1, [pc, #44]	; (80014a8 <HAL_Init+0x54>)
 800147a:	5ccb      	ldrb	r3, [r1, r3]
 800147c:	fa22 f303 	lsr.w	r3, r2, r3
 8001480:	4a0a      	ldr	r2, [pc, #40]	; (80014ac <HAL_Init+0x58>)
 8001482:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001484:	200f      	movs	r0, #15
 8001486:	f000 f813 	bl	80014b0 <HAL_InitTick>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e002      	b.n	800149a <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001494:	f7ff fc16 	bl	8000cc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40022000 	.word	0x40022000
 80014a4:	46020c00 	.word	0x46020c00
 80014a8:	08009d48 	.word	0x08009d48
 80014ac:	20000004 	.word	0x20000004

080014b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80014b8:	4b15      	ldr	r3, [pc, #84]	; (8001510 <HAL_InitTick+0x60>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d101      	bne.n	80014c4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e021      	b.n	8001508 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80014c4:	4b13      	ldr	r3, [pc, #76]	; (8001514 <HAL_InitTick+0x64>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	4b11      	ldr	r3, [pc, #68]	; (8001510 <HAL_InitTick+0x60>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	4619      	mov	r1, r3
 80014ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014da:	4618      	mov	r0, r3
 80014dc:	f000 fd09 	bl	8001ef2 <HAL_SYSTICK_Config>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e00e      	b.n	8001508 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2b0f      	cmp	r3, #15
 80014ee:	d80a      	bhi.n	8001506 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f0:	2200      	movs	r2, #0
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	f04f 30ff 	mov.w	r0, #4294967295
 80014f8:	f000 fcd3 	bl	8001ea2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014fc:	4a06      	ldr	r2, [pc, #24]	; (8001518 <HAL_InitTick+0x68>)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001502:	2300      	movs	r3, #0
 8001504:	e000      	b.n	8001508 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
}
 8001508:	4618      	mov	r0, r3
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	2000000c 	.word	0x2000000c
 8001514:	20000004 	.word	0x20000004
 8001518:	20000008 	.word	0x20000008

0800151c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <HAL_IncTick+0x20>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	461a      	mov	r2, r3
 8001526:	4b06      	ldr	r3, [pc, #24]	; (8001540 <HAL_IncTick+0x24>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4413      	add	r3, r2
 800152c:	4a04      	ldr	r2, [pc, #16]	; (8001540 <HAL_IncTick+0x24>)
 800152e:	6013      	str	r3, [r2, #0]
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	2000000c 	.word	0x2000000c
 8001540:	20000254 	.word	0x20000254

08001544 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  return uwTick;
 8001548:	4b03      	ldr	r3, [pc, #12]	; (8001558 <HAL_GetTick+0x14>)
 800154a:	681b      	ldr	r3, [r3, #0]
}
 800154c:	4618      	mov	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	20000254 	.word	0x20000254

0800155c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	431a      	orrs	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	601a      	str	r2, [r3, #0]
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <LL_ADC_SetResolution+0x3c>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d104      	bne.n	80015a4 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	3b01      	subs	r3, #1
 800159e:	f003 030c 	and.w	r3, r3, #12
 80015a2:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	f023 020c 	bic.w	r2, r3, #12
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	431a      	orrs	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	60da      	str	r2, [r3, #12]
}
 80015b4:	bf00      	nop
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	46021000 	.word	0x46021000

080015c4 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80015d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015da:	683a      	ldr	r2, [r7, #0]
 80015dc:	431a      	orrs	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	2a00      	cmp	r2, #0
 80015ee:	d002      	beq.n	80015f6 <LL_ADC_SetGainCompensation+0x32>
 80015f0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80015f4:	e000      	b.n	80015f8 <LL_ADC_SetGainCompensation+0x34>
 80015f6:	2200      	movs	r2, #0
 80015f8:	431a      	orrs	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	671a      	str	r2, [r3, #112]	; 0x70
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800160a:	b480      	push	{r7}
 800160c:	b085      	sub	sp, #20
 800160e:	af00      	add	r7, sp, #0
 8001610:	60f8      	str	r0, [r7, #12]
 8001612:	60b9      	str	r1, [r7, #8]
 8001614:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	695a      	ldr	r2, [r3, #20]
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	2107      	movs	r1, #7
 8001622:	fa01 f303 	lsl.w	r3, r1, r3
 8001626:	43db      	mvns	r3, r3
 8001628:	401a      	ands	r2, r3
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	f003 0304 	and.w	r3, r3, #4
 8001630:	6879      	ldr	r1, [r7, #4]
 8001632:	fa01 f303 	lsl.w	r3, r1, r3
 8001636:	431a      	orrs	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800163c:	bf00      	nop
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001658:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	6093      	str	r3, [r2, #8]
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800167c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001680:	d101      	bne.n	8001686 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001682:	2301      	movs	r3, #1
 8001684:	e000      	b.n	8001688 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001686:	2300      	movs	r3, #0
}
 8001688:	4618      	mov	r0, r3
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80016a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	609a      	str	r2, [r3, #8]
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80016d0:	d101      	bne.n	80016d6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80016d2:	2301      	movs	r3, #1
 80016d4:	e000      	b.n	80016d8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d101      	bne.n	80016fc <LL_ADC_IsEnabled+0x18>
 80016f8:	2301      	movs	r3, #1
 80016fa:	e000      	b.n	80016fe <LL_ADC_IsEnabled+0x1a>
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 0304 	and.w	r3, r3, #4
 800171a:	2b04      	cmp	r3, #4
 800171c:	d101      	bne.n	8001722 <LL_ADC_REG_IsConversionOngoing+0x18>
 800171e:	2301      	movs	r3, #1
 8001720:	e000      	b.n	8001724 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f003 0308 	and.w	r3, r3, #8
 8001740:	2b08      	cmp	r3, #8
 8001742:	d101      	bne.n	8001748 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001744:	2301      	movs	r3, #1
 8001746:	e000      	b.n	800174a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08a      	sub	sp, #40	; 0x28
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001760:	2300      	movs	r3, #0
 8001762:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 8001766:	2300      	movs	r3, #0
 8001768:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 800176a:	2300      	movs	r3, #0
 800176c:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d101      	bne.n	8001778 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e2b3      	b.n	8001ce0 <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d003      	beq.n	8001788 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a8b      	ldr	r2, [pc, #556]	; (80019b4 <HAL_ADC_Init+0x25c>)
 8001786:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800178c:	2b00      	cmp	r3, #0
 800178e:	d109      	bne.n	80017a4 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff fab1 	bl	8000cf8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff ff5f 	bl	800166c <LL_ADC_IsDeepPowerDownEnabled>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d004      	beq.n	80017be <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff ff45 	bl	8001648 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff ff7a 	bl	80016bc <LL_ADC_IsInternalRegulatorEnabled>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d115      	bne.n	80017fa <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff ff5e 	bl	8001694 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80017d8:	4b77      	ldr	r3, [pc, #476]	; (80019b8 <HAL_ADC_Init+0x260>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	099b      	lsrs	r3, r3, #6
 80017de:	4a77      	ldr	r2, [pc, #476]	; (80019bc <HAL_ADC_Init+0x264>)
 80017e0:	fba2 2303 	umull	r2, r3, r2, r3
 80017e4:	099b      	lsrs	r3, r3, #6
 80017e6:	3301      	adds	r3, #1
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80017ec:	e002      	b.n	80017f4 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	3b01      	subs	r3, #1
 80017f2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1f9      	bne.n	80017ee <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff ff5c 	bl	80016bc <LL_ADC_IsInternalRegulatorEnabled>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10e      	bne.n	8001828 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800180e:	f043 0210 	orr.w	r2, r3, #16
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800181a:	f043 0201 	orr.w	r2, r3, #1
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff6c 	bl	800170a <LL_ADC_REG_IsConversionOngoing>
 8001832:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001838:	f003 0310 	and.w	r3, r3, #16
 800183c:	2b00      	cmp	r3, #0
 800183e:	f040 8244 	bne.w	8001cca <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	2b00      	cmp	r3, #0
 8001846:	f040 8240 	bne.w	8001cca <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800184e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001852:	f043 0202 	orr.w	r2, r3, #2
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff ff40 	bl	80016e4 <LL_ADC_IsEnabled>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d140      	bne.n	80018ec <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a51      	ldr	r2, [pc, #324]	; (80019b4 <HAL_ADC_Init+0x25c>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d028      	beq.n	80018c6 <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a51      	ldr	r2, [pc, #324]	; (80019c0 <HAL_ADC_Init+0x268>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d109      	bne.n	8001892 <HAL_ADC_Init+0x13a>
 800187e:	4850      	ldr	r0, [pc, #320]	; (80019c0 <HAL_ADC_Init+0x268>)
 8001880:	f7ff ff30 	bl	80016e4 <LL_ADC_IsEnabled>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	bf0c      	ite	eq
 800188a:	2301      	moveq	r3, #1
 800188c:	2300      	movne	r3, #0
 800188e:	b2db      	uxtb	r3, r3
 8001890:	e008      	b.n	80018a4 <HAL_ADC_Init+0x14c>
 8001892:	4848      	ldr	r0, [pc, #288]	; (80019b4 <HAL_ADC_Init+0x25c>)
 8001894:	f7ff ff26 	bl	80016e4 <LL_ADC_IsEnabled>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	bf0c      	ite	eq
 800189e:	2301      	moveq	r3, #1
 80018a0:	2300      	movne	r3, #0
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d021      	beq.n	80018ec <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a44      	ldr	r2, [pc, #272]	; (80019c0 <HAL_ADC_Init+0x268>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d101      	bne.n	80018b6 <HAL_ADC_Init+0x15e>
 80018b2:	4a44      	ldr	r2, [pc, #272]	; (80019c4 <HAL_ADC_Init+0x26c>)
 80018b4:	e000      	b.n	80018b8 <HAL_ADC_Init+0x160>
 80018b6:	4a44      	ldr	r2, [pc, #272]	; (80019c8 <HAL_ADC_Init+0x270>)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	4619      	mov	r1, r3
 80018be:	4610      	mov	r0, r2
 80018c0:	f7ff fe4c 	bl	800155c <LL_ADC_SetCommonClock>
 80018c4:	e012      	b.n	80018ec <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	4619      	mov	r1, r3
 80018d0:	4610      	mov	r0, r2
 80018d2:	f7ff fe57 	bl	8001584 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 80018d6:	4b3c      	ldr	r3, [pc, #240]	; (80019c8 <HAL_ADC_Init+0x270>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80018e6:	4938      	ldr	r1, [pc, #224]	; (80019c8 <HAL_ADC_Init+0x270>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a30      	ldr	r2, [pc, #192]	; (80019b4 <HAL_ADC_Init+0x25c>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d010      	beq.n	8001918 <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018fc:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001902:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8001908:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001910:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8001912:	4313      	orrs	r3, r2
 8001914:	623b      	str	r3, [r7, #32]
 8001916:	e030      	b.n	800197a <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	7f1b      	ldrb	r3, [r3, #28]
 800191c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001924:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001926:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800192c:	2a00      	cmp	r2, #0
 800192e:	d002      	beq.n	8001936 <HAL_ADC_Init+0x1de>
 8001930:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001934:	e000      	b.n	8001938 <HAL_ADC_Init+0x1e0>
 8001936:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001938:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 800193e:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	2b00      	cmp	r3, #0
 8001946:	da04      	bge.n	8001952 <HAL_ADC_Init+0x1fa>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001950:	e001      	b.n	8001956 <HAL_ADC_Init+0x1fe>
 8001952:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 8001956:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4918      	ldr	r1, [pc, #96]	; (80019c0 <HAL_ADC_Init+0x268>)
 800195e:	428b      	cmp	r3, r1
 8001960:	d103      	bne.n	800196a <HAL_ADC_Init+0x212>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001968:	e003      	b.n	8001972 <HAL_ADC_Init+0x21a>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001970:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001972:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001974:	6a3a      	ldr	r2, [r7, #32]
 8001976:	4313      	orrs	r3, r2
 8001978:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001980:	2b01      	cmp	r3, #1
 8001982:	d12f      	bne.n	80019e4 <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a0a      	ldr	r2, [pc, #40]	; (80019b4 <HAL_ADC_Init+0x25c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d007      	beq.n	800199e <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	3b01      	subs	r3, #1
 8001994:	045b      	lsls	r3, r3, #17
 8001996:	6a3a      	ldr	r2, [r7, #32]
 8001998:	4313      	orrs	r3, r2
 800199a:	623b      	str	r3, [r7, #32]
 800199c:	e022      	b.n	80019e4 <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d111      	bne.n	80019cc <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80019a8:	6a3b      	ldr	r3, [r7, #32]
 80019aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ae:	623b      	str	r3, [r7, #32]
 80019b0:	e018      	b.n	80019e4 <HAL_ADC_Init+0x28c>
 80019b2:	bf00      	nop
 80019b4:	46021000 	.word	0x46021000
 80019b8:	20000004 	.word	0x20000004
 80019bc:	053e2d63 	.word	0x053e2d63
 80019c0:	42028000 	.word	0x42028000
 80019c4:	42028308 	.word	0x42028308
 80019c8:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80019d0:	f043 0220 	orr.w	r2, r3, #32
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80019dc:	f043 0201 	orr.w	r2, r3, #1
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a92      	ldr	r2, [pc, #584]	; (8001c34 <HAL_ADC_Init+0x4dc>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d018      	beq.n	8001a20 <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d009      	beq.n	8001a0a <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019fa:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a02:	4313      	orrs	r3, r2
 8001a04:	6a3a      	ldr	r2, [r7, #32]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	68da      	ldr	r2, [r3, #12]
 8001a10:	4b89      	ldr	r3, [pc, #548]	; (8001c38 <HAL_ADC_Init+0x4e0>)
 8001a12:	4013      	ands	r3, r2
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	6a39      	ldr	r1, [r7, #32]
 8001a1a:	430b      	orrs	r3, r1
 8001a1c:	60d3      	str	r3, [r2, #12]
 8001a1e:	e031      	b.n	8001a84 <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d009      	beq.n	8001a3c <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a2c:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a34:	4313      	orrs	r3, r2
 8001a36:	6a3a      	ldr	r2, [r7, #32]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68da      	ldr	r2, [r3, #12]
 8001a42:	4b7e      	ldr	r3, [pc, #504]	; (8001c3c <HAL_ADC_Init+0x4e4>)
 8001a44:	4013      	ands	r3, r2
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	6812      	ldr	r2, [r2, #0]
 8001a4a:	6a39      	ldr	r1, [r7, #32]
 8001a4c:	430b      	orrs	r3, r1
 8001a4e:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d008      	beq.n	8001a6a <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a1a      	ldr	r2, [r3, #32]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	430a      	orrs	r2, r1
 8001a68:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d008      	beq.n	8001a84 <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	430a      	orrs	r2, r1
 8001a82:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a6a      	ldr	r2, [pc, #424]	; (8001c34 <HAL_ADC_Init+0x4dc>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	f000 8093 	beq.w	8001bb6 <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff fe38 	bl	800170a <LL_ADC_REG_IsConversionOngoing>
 8001a9a:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff fe45 	bl	8001730 <LL_ADC_INJ_IsConversionOngoing>
 8001aa6:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d161      	bne.n	8001b72 <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d15e      	bne.n	8001b72 <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	7f1b      	ldrb	r3, [r3, #28]
 8001ab8:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4960      	ldr	r1, [pc, #384]	; (8001c40 <HAL_ADC_Init+0x4e8>)
 8001ac0:	428b      	cmp	r3, r1
 8001ac2:	d102      	bne.n	8001aca <HAL_ADC_Init+0x372>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ac8:	e002      	b.n	8001ad0 <HAL_ADC_Init+0x378>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ace:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ade:	f023 0303 	bic.w	r3, r3, #3
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	6812      	ldr	r2, [r2, #0]
 8001ae6:	6a39      	ldr	r1, [r7, #32]
 8001ae8:	430b      	orrs	r3, r1
 8001aea:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d007      	beq.n	8001b04 <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	4619      	mov	r1, r3
 8001afe:	4610      	mov	r0, r2
 8001b00:	f7ff fd60 	bl	80015c4 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d11e      	bne.n	8001b4c <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b12:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	691a      	ldr	r2, [r3, #16]
 8001b1a:	4b4a      	ldr	r3, [pc, #296]	; (8001c44 <HAL_ADC_Init+0x4ec>)
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001b22:	0411      	lsls	r1, r2, #16
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b28:	4311      	orrs	r1, r2
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8001b2e:	4311      	orrs	r1, r2
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8001b34:	4311      	orrs	r1, r2
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001b3a:	0892      	lsrs	r2, r2, #2
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f042 0201 	orr.w	r2, r2, #1
 8001b48:	611a      	str	r2, [r3, #16]
 8001b4a:	e007      	b.n	8001b5c <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	691a      	ldr	r2, [r3, #16]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 0201 	bic.w	r2, r2, #1
 8001b5a:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d10c      	bne.n	8001b94 <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b80:	f023 010f 	bic.w	r1, r3, #15
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b88:	1e5a      	subs	r2, r3, #1
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	631a      	str	r2, [r3, #48]	; 0x30
 8001b92:	e007      	b.n	8001ba4 <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f022 020f 	bic.w	r2, r2, #15
 8001ba2:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001ba8:	f023 0303 	bic.w	r3, r3, #3
 8001bac:	f043 0201 	orr.w	r2, r3, #1
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001bb4:	e092      	b.n	8001cdc <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d111      	bne.n	8001be4 <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001bc8:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8001bce:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8001bd4:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001bd6:	69fa      	ldr	r2, [r7, #28]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	f043 0301 	orr.w	r3, r3, #1
 8001be2:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	691a      	ldr	r2, [r3, #16]
 8001bea:	4b17      	ldr	r3, [pc, #92]	; (8001c48 <HAL_ADC_Init+0x4f0>)
 8001bec:	4013      	ands	r3, r2
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	6812      	ldr	r2, [r2, #0]
 8001bf2:	69f9      	ldr	r1, [r7, #28]
 8001bf4:	430b      	orrs	r3, r1
 8001bf6:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6818      	ldr	r0, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c00:	461a      	mov	r2, r3
 8001c02:	2100      	movs	r1, #0
 8001c04:	f7ff fd01 	bl	800160a <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6818      	ldr	r0, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c10:	461a      	mov	r2, r3
 8001c12:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 8001c16:	f7ff fcf8 	bl	800160a <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d114      	bne.n	8001c4c <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f062 020f 	orn	r2, r2, #15
 8001c30:	629a      	str	r2, [r3, #40]	; 0x28
 8001c32:	e024      	b.n	8001c7e <HAL_ADC_Init+0x526>
 8001c34:	46021000 	.word	0x46021000
 8001c38:	fff0c013 	.word	0xfff0c013
 8001c3c:	ffde800d 	.word	0xffde800d
 8001c40:	42028000 	.word	0x42028000
 8001c44:	fc00f81e 	.word	0xfc00f81e
 8001c48:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c54:	d113      	bne.n	8001c7e <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c60:	3b01      	subs	r3, #1
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	f003 031c 	and.w	r3, r3, #28
 8001c68:	f06f 020f 	mvn.w	r2, #15
 8001c6c:	fa02 f103 	lsl.w	r1, r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68da      	ldr	r2, [r3, #12]
 8001c84:	4b18      	ldr	r3, [pc, #96]	; (8001ce8 <HAL_ADC_Init+0x590>)
 8001c86:	4013      	ands	r3, r2
 8001c88:	6a3a      	ldr	r2, [r7, #32]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d10b      	bne.n	8001ca6 <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001c98:	f023 0303 	bic.w	r3, r3, #3
 8001c9c:	f043 0201 	orr.w	r2, r3, #1
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001ca4:	e01a      	b.n	8001cdc <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001caa:	f023 0312 	bic.w	r3, r3, #18
 8001cae:	f043 0210 	orr.w	r2, r3, #16
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001cba:	f043 0201 	orr.w	r2, r3, #1
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001cc8:	e008      	b.n	8001cdc <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001cce:	f043 0210 	orr.w	r2, r3, #16
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 8001cdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3728      	adds	r7, #40	; 0x28
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	833ffff3 	.word	0x833ffff3

08001cec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <__NVIC_SetPriorityGrouping+0x44>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d08:	4013      	ands	r3, r2
 8001d0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d1e:	4a04      	ldr	r2, [pc, #16]	; (8001d30 <__NVIC_SetPriorityGrouping+0x44>)
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	60d3      	str	r3, [r2, #12]
}
 8001d24:	bf00      	nop
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d38:	4b04      	ldr	r3, [pc, #16]	; (8001d4c <__NVIC_GetPriorityGrouping+0x18>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	0a1b      	lsrs	r3, r3, #8
 8001d3e:	f003 0307 	and.w	r3, r3, #7
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	db0b      	blt.n	8001d7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	f003 021f 	and.w	r2, r3, #31
 8001d68:	4907      	ldr	r1, [pc, #28]	; (8001d88 <__NVIC_EnableIRQ+0x38>)
 8001d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6e:	095b      	lsrs	r3, r3, #5
 8001d70:	2001      	movs	r0, #1
 8001d72:	fa00 f202 	lsl.w	r2, r0, r2
 8001d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	e000e100 	.word	0xe000e100

08001d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	6039      	str	r1, [r7, #0]
 8001d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	db0a      	blt.n	8001db6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	490c      	ldr	r1, [pc, #48]	; (8001dd8 <__NVIC_SetPriority+0x4c>)
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	0112      	lsls	r2, r2, #4
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	440b      	add	r3, r1
 8001db0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db4:	e00a      	b.n	8001dcc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	4908      	ldr	r1, [pc, #32]	; (8001ddc <__NVIC_SetPriority+0x50>)
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	3b04      	subs	r3, #4
 8001dc4:	0112      	lsls	r2, r2, #4
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	440b      	add	r3, r1
 8001dca:	761a      	strb	r2, [r3, #24]
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	e000e100 	.word	0xe000e100
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b089      	sub	sp, #36	; 0x24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f1c3 0307 	rsb	r3, r3, #7
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	bf28      	it	cs
 8001dfe:	2304      	movcs	r3, #4
 8001e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3304      	adds	r3, #4
 8001e06:	2b06      	cmp	r3, #6
 8001e08:	d902      	bls.n	8001e10 <NVIC_EncodePriority+0x30>
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	3b03      	subs	r3, #3
 8001e0e:	e000      	b.n	8001e12 <NVIC_EncodePriority+0x32>
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e14:	f04f 32ff 	mov.w	r2, #4294967295
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43da      	mvns	r2, r3
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	401a      	ands	r2, r3
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e28:	f04f 31ff 	mov.w	r1, #4294967295
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e32:	43d9      	mvns	r1, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e38:	4313      	orrs	r3, r2
         );
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3724      	adds	r7, #36	; 0x24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e58:	d301      	bcc.n	8001e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e00f      	b.n	8001e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e5e:	4a0a      	ldr	r2, [pc, #40]	; (8001e88 <SysTick_Config+0x40>)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e66:	210f      	movs	r1, #15
 8001e68:	f04f 30ff 	mov.w	r0, #4294967295
 8001e6c:	f7ff ff8e 	bl	8001d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e70:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <SysTick_Config+0x40>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e76:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <SysTick_Config+0x40>)
 8001e78:	2207      	movs	r2, #7
 8001e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	e000e010 	.word	0xe000e010

08001e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f7ff ff29 	bl	8001cec <__NVIC_SetPriorityGrouping>
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b086      	sub	sp, #24
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001eb0:	f7ff ff40 	bl	8001d34 <__NVIC_GetPriorityGrouping>
 8001eb4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	68b9      	ldr	r1, [r7, #8]
 8001eba:	6978      	ldr	r0, [r7, #20]
 8001ebc:	f7ff ff90 	bl	8001de0 <NVIC_EncodePriority>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ec6:	4611      	mov	r1, r2
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff ff5f 	bl	8001d8c <__NVIC_SetPriority>
}
 8001ece:	bf00      	nop
 8001ed0:	3718      	adds	r7, #24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	4603      	mov	r3, r0
 8001ede:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff ff33 	bl	8001d50 <__NVIC_EnableIRQ>
}
 8001eea:	bf00      	nop
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7ff ffa4 	bl	8001e48 <SysTick_Config>
 8001f00:	4603      	mov	r3, r0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d101      	bne.n	8001f1c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e014      	b.n	8001f46 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	791b      	ldrb	r3, [r3, #4]
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d105      	bne.n	8001f32 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f7fe ff29 	bl	8000d84 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2202      	movs	r2, #2
 8001f36:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
	...

08001f50 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08a      	sub	sp, #40	; 0x28
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d002      	beq.n	8001f6c <HAL_DAC_ConfigChannel+0x1c>
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d101      	bne.n	8001f70 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e184      	b.n	800227a <HAL_DAC_ConfigChannel+0x32a>
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	795b      	ldrb	r3, [r3, #5]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d101      	bne.n	8001f7c <HAL_DAC_ConfigChannel+0x2c>
 8001f78:	2302      	movs	r3, #2
 8001f7a:	e17e      	b.n	800227a <HAL_DAC_ConfigChannel+0x32a>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2202      	movs	r2, #2
 8001f86:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	2b04      	cmp	r3, #4
 8001f8e:	d17a      	bne.n	8002086 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001f90:	f7ff fad8 	bl	8001544 <HAL_GetTick>
 8001f94:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d13d      	bne.n	8002018 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001f9c:	e018      	b.n	8001fd0 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001f9e:	f7ff fad1 	bl	8001544 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d911      	bls.n	8001fd0 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00a      	beq.n	8001fd0 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	f043 0208 	orr.w	r2, r3, #8
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2203      	movs	r2, #3
 8001fca:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e154      	b.n	800227a <HAL_DAC_ConfigChannel+0x32a>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1df      	bne.n	8001f9e <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68ba      	ldr	r2, [r7, #8]
 8001fe4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fe6:	641a      	str	r2, [r3, #64]	; 0x40
 8001fe8:	e020      	b.n	800202c <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001fea:	f7ff faab 	bl	8001544 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d90f      	bls.n	8002018 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	da0a      	bge.n	8002018 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	f043 0208 	orr.w	r2, r3, #8
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2203      	movs	r2, #3
 8002012:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e130      	b.n	800227a <HAL_DAC_ConfigChannel+0x32a>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800201e:	2b00      	cmp	r3, #0
 8002020:	dbe3      	blt.n	8001fea <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800202a:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f003 0310 	and.w	r3, r3, #16
 8002038:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800203c:	fa01 f303 	lsl.w	r3, r1, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	ea02 0103 	and.w	r1, r2, r3
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f003 0310 	and.w	r3, r3, #16
 8002050:	409a      	lsls	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	430a      	orrs	r2, r1
 8002058:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f003 0310 	and.w	r3, r3, #16
 8002066:	21ff      	movs	r1, #255	; 0xff
 8002068:	fa01 f303 	lsl.w	r3, r1, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	ea02 0103 	and.w	r1, r2, r3
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f003 0310 	and.w	r3, r3, #16
 800207c:	409a      	lsls	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	430a      	orrs	r2, r1
 8002084:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  /* Autonomous mode configuration */
  MODIFY_REG(hdac->Instance->AUTOCR, DAC_AUTOCR_AUTOMODE, sConfig->DAC_AutonomousMode);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800208c:	f423 0180 	bic.w	r1, r3, #4194304	; 0x400000
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	430a      	orrs	r2, r1
 800209a:	655a      	str	r2, [r3, #84]	; 0x54

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	69db      	ldr	r3, [r3, #28]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d11d      	bne.n	80020e0 <HAL_DAC_ConfigChannel+0x190>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020aa:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f003 0310 	and.w	r3, r3, #16
 80020b2:	221f      	movs	r2, #31
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	43db      	mvns	r3, r3
 80020ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020bc:	4013      	ands	r3, r2
 80020be:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f003 0310 	and.w	r3, r3, #16
 80020cc:	697a      	ldr	r2, [r7, #20]
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020d4:	4313      	orrs	r3, r2
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020de:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f003 0310 	and.w	r3, r3, #16
 80020ee:	2207      	movs	r2, #7
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020f8:	4013      	ands	r3, r2
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d102      	bne.n	800210a <HAL_DAC_ConfigChannel+0x1ba>
  {
    connectOnChip = 0x00000000UL;
 8002104:	2300      	movs	r3, #0
 8002106:	623b      	str	r3, [r7, #32]
 8002108:	e00f      	b.n	800212a <HAL_DAC_ConfigChannel+0x1da>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	2b02      	cmp	r3, #2
 8002110:	d102      	bne.n	8002118 <HAL_DAC_ConfigChannel+0x1c8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002112:	2301      	movs	r3, #1
 8002114:	623b      	str	r3, [r7, #32]
 8002116:	e008      	b.n	800212a <HAL_DAC_ConfigChannel+0x1da>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	695b      	ldr	r3, [r3, #20]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d102      	bne.n	8002126 <HAL_DAC_ConfigChannel+0x1d6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002120:	2301      	movs	r3, #1
 8002122:	623b      	str	r3, [r7, #32]
 8002124:	e001      	b.n	800212a <HAL_DAC_ConfigChannel+0x1da>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002126:	2300      	movs	r3, #0
 8002128:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	4313      	orrs	r3, r2
 8002134:	6a3a      	ldr	r2, [r7, #32]
 8002136:	4313      	orrs	r3, r2
 8002138:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f003 0310 	and.w	r3, r3, #16
 8002140:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	43db      	mvns	r3, r3
 800214a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800214c:	4013      	ands	r3, r2
 800214e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	7a1b      	ldrb	r3, [r3, #8]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d102      	bne.n	800215e <HAL_DAC_ConfigChannel+0x20e>
 8002158:	f44f 7380 	mov.w	r3, #256	; 0x100
 800215c:	e000      	b.n	8002160 <HAL_DAC_ConfigChannel+0x210>
 800215e:	2300      	movs	r3, #0
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	4313      	orrs	r3, r2
 8002164:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f003 0310 	and.w	r3, r3, #16
 800216c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002178:	4013      	ands	r3, r2
 800217a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	7a5b      	ldrb	r3, [r3, #9]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d102      	bne.n	800218a <HAL_DAC_ConfigChannel+0x23a>
 8002184:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002188:	e000      	b.n	800218c <HAL_DAC_ConfigChannel+0x23c>
 800218a:	2300      	movs	r3, #0
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	4313      	orrs	r3, r2
 8002190:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8002192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002194:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d114      	bne.n	80021cc <HAL_DAC_ConfigChannel+0x27c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80021a2:	f002 fb57 	bl	8004854 <HAL_RCC_GetHCLKFreq>
 80021a6:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	4a36      	ldr	r2, [pc, #216]	; (8002284 <HAL_DAC_ConfigChannel+0x334>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d904      	bls.n	80021ba <HAL_DAC_ConfigChannel+0x26a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80021b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021b6:	627b      	str	r3, [r7, #36]	; 0x24
 80021b8:	e00f      	b.n	80021da <HAL_DAC_ConfigChannel+0x28a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	4a32      	ldr	r2, [pc, #200]	; (8002288 <HAL_DAC_ConfigChannel+0x338>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d90a      	bls.n	80021d8 <HAL_DAC_ConfigChannel+0x288>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ca:	e006      	b.n	80021da <HAL_DAC_ConfigChannel+0x28a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021d2:	4313      	orrs	r3, r2
 80021d4:	627b      	str	r3, [r7, #36]	; 0x24
 80021d6:	e000      	b.n	80021da <HAL_DAC_ConfigChannel+0x28a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80021d8:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f003 0310 	and.w	r3, r3, #16
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021e8:	4313      	orrs	r3, r2
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021f2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6819      	ldr	r1, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f003 0310 	and.w	r3, r3, #16
 8002200:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43da      	mvns	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	400a      	ands	r2, r1
 8002210:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f003 0310 	and.w	r3, r3, #16
 8002220:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800222c:	4013      	ands	r3, r2
 800222e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f003 0310 	and.w	r3, r3, #16
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002244:	4313      	orrs	r3, r2
 8002246:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800224e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6819      	ldr	r1, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f003 0310 	and.w	r3, r3, #16
 800225c:	22c0      	movs	r2, #192	; 0xc0
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	43da      	mvns	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	400a      	ands	r2, r1
 800226a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2201      	movs	r2, #1
 8002270:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002278:	7ffb      	ldrb	r3, [r7, #31]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3728      	adds	r7, #40	; 0x28
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	09896800 	.word	0x09896800
 8002288:	04c4b400 	.word	0x04c4b400

0800228c <HAL_DACEx_SetConfigAutonomousMode>:
  * @param sConfig pointer to Autonomous mode structure parameters.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_SetConfigAutonomousMode(DAC_HandleTypeDef *hdac,
                                                    const DAC_AutonomousModeConfTypeDef *sConfig)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle and autonomous mode configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d002      	beq.n	80022a2 <HAL_DACEx_SetConfigAutonomousMode+0x16>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_DACEx_SetConfigAutonomousMode+0x1a>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e024      	b.n	80022f0 <HAL_DACEx_SetConfigAutonomousMode+0x64>
  }

  assert_param(IS_DAC_AUTONOMOUS(sConfig->AutonomousModeState));

  if (hdac->State == HAL_DAC_STATE_READY)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	791b      	ldrb	r3, [r3, #4]
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d11e      	bne.n	80022ee <HAL_DACEx_SetConfigAutonomousMode+0x62>
  {
    /* Process Locked */
    __HAL_LOCK(hdac);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	795b      	ldrb	r3, [r3, #5]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d101      	bne.n	80022bc <HAL_DACEx_SetConfigAutonomousMode+0x30>
 80022b8:	2302      	movs	r3, #2
 80022ba:	e019      	b.n	80022f0 <HAL_DACEx_SetConfigAutonomousMode+0x64>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	715a      	strb	r2, [r3, #5]

    hdac->State = HAL_DAC_STATE_BUSY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2202      	movs	r2, #2
 80022c6:	711a      	strb	r2, [r3, #4]

    /* NOTE: The set/reset of the bit automode in the AUTOCR
             register is for both dac_channel1 and dac_channel2 */

    /* Update the AUTOCR register */
    MODIFY_REG(hdac->Instance->AUTOCR, DAC_AUTOCR_AUTOMODE, sConfig->AutonomousModeState);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ce:	f423 0180 	bic.w	r1, r3, #4194304	; 0x400000
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	430a      	orrs	r2, r1
 80022dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Update the DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	711a      	strb	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdac);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	715a      	strb	r2, [r3, #5]

    return HAL_OK;
 80022ea:	2300      	movs	r3, #0
 80022ec:	e000      	b.n	80022f0 <HAL_DACEx_SetConfigAutonomousMode+0x64>
  }
  else
  {
    return HAL_BUSY;
 80022ee:	2302      	movs	r3, #2
  }
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8002304:	f7ff f91e 	bl	8001544 <HAL_GetTick>
 8002308:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e06b      	b.n	80023ec <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d008      	beq.n	8002332 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2220      	movs	r2, #32
 8002324:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e05c      	b.n	80023ec <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	695a      	ldr	r2, [r3, #20]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f042 0204 	orr.w	r2, r2, #4
 8002340:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2205      	movs	r2, #5
 8002346:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800234a:	e020      	b.n	800238e <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800234c:	f7ff f8fa 	bl	8001544 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b05      	cmp	r3, #5
 8002358:	d919      	bls.n	800238e <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235e:	f043 0210 	orr.w	r2, r3, #16
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2203      	movs	r2, #3
 800236a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800237e:	2201      	movs	r2, #1
 8002380:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e02e      	b.n	80023ec <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d0d7      	beq.n	800234c <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	695a      	ldr	r2, [r3, #20]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 0202 	orr.w	r2, r2, #2
 80023aa:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2204      	movs	r2, #4
 80023b0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80023bc:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d007      	beq.n	80023e2 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023d6:	2201      	movs	r2, #1
 80023d8:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2200      	movs	r2, #0
 80023e0:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e019      	b.n	800243a <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d004      	beq.n	800241c <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2220      	movs	r2, #32
 8002416:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e00e      	b.n	800243a <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2204      	movs	r2, #4
 8002420:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	6812      	ldr	r2, [r2, #0]
 800242e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002432:	f043 0304 	orr.w	r3, r3, #4
 8002436:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
	...

08002448 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002448:	b480      	push	{r7}
 800244a:	b089      	sub	sp, #36	; 0x24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800245a:	e1ba      	b.n	80027d2 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	2101      	movs	r1, #1
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	fa01 f303 	lsl.w	r3, r1, r3
 8002468:	4013      	ands	r3, r2
 800246a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2b00      	cmp	r3, #0
 8002474:	f000 81aa 	beq.w	80027cc <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a55      	ldr	r2, [pc, #340]	; (80025d0 <HAL_GPIO_Init+0x188>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d15d      	bne.n	800253c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8002486:	2201      	movs	r2, #1
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43db      	mvns	r3, r3
 8002490:	69fa      	ldr	r2, [r7, #28]
 8002492:	4013      	ands	r3, r2
 8002494:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f003 0201 	and.w	r2, r3, #1
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	69fa      	ldr	r2, [r7, #28]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69fa      	ldr	r2, [r7, #28]
 80024ae:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80024b0:	4a48      	ldr	r2, [pc, #288]	; (80025d4 <HAL_GPIO_Init+0x18c>)
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80024b8:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80024ba:	4a46      	ldr	r2, [pc, #280]	; (80025d4 <HAL_GPIO_Init+0x18c>)
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	4413      	add	r3, r2
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	08da      	lsrs	r2, r3, #3
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	3208      	adds	r2, #8
 80024ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024d2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	220f      	movs	r2, #15
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43db      	mvns	r3, r3
 80024e4:	69fa      	ldr	r2, [r7, #28]
 80024e6:	4013      	ands	r3, r2
 80024e8:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	f003 0307 	and.w	r3, r3, #7
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	220b      	movs	r2, #11
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	69fa      	ldr	r2, [r7, #28]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	08da      	lsrs	r2, r3, #3
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	3208      	adds	r2, #8
 8002506:	69f9      	ldr	r1, [r7, #28]
 8002508:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	2203      	movs	r2, #3
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	69fa      	ldr	r2, [r7, #28]
 8002520:	4013      	ands	r3, r2
 8002522:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	2202      	movs	r2, #2
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	69fa      	ldr	r2, [r7, #28]
 8002530:	4313      	orrs	r3, r2
 8002532:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	69fa      	ldr	r2, [r7, #28]
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	e067      	b.n	800260c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2b02      	cmp	r3, #2
 8002542:	d003      	beq.n	800254c <HAL_GPIO_Init+0x104>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2b12      	cmp	r3, #18
 800254a:	d145      	bne.n	80025d8 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	08da      	lsrs	r2, r3, #3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3208      	adds	r2, #8
 8002554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002558:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	f003 0307 	and.w	r3, r3, #7
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	220f      	movs	r2, #15
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	69fa      	ldr	r2, [r7, #28]
 800256c:	4013      	ands	r3, r2
 800256e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	f003 020f 	and.w	r2, r3, #15
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	69fa      	ldr	r2, [r7, #28]
 8002586:	4313      	orrs	r3, r2
 8002588:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	08da      	lsrs	r2, r3, #3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3208      	adds	r2, #8
 8002592:	69f9      	ldr	r1, [r7, #28]
 8002594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	2203      	movs	r2, #3
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	69fa      	ldr	r2, [r7, #28]
 80025ac:	4013      	ands	r3, r2
 80025ae:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 0203 	and.w	r2, r3, #3
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	69fa      	ldr	r2, [r7, #28]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	69fa      	ldr	r2, [r7, #28]
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	e01e      	b.n	800260c <HAL_GPIO_Init+0x1c4>
 80025ce:	bf00      	nop
 80025d0:	46020000 	.word	0x46020000
 80025d4:	08009da0 	.word	0x08009da0
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	2203      	movs	r2, #3
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	69fa      	ldr	r2, [r7, #28]
 80025ec:	4013      	ands	r3, r2
 80025ee:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f003 0203 	and.w	r2, r3, #3
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	69fa      	ldr	r2, [r7, #28]
 8002602:	4313      	orrs	r3, r2
 8002604:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	69fa      	ldr	r2, [r7, #28]
 800260a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d00b      	beq.n	800262c <HAL_GPIO_Init+0x1e4>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b02      	cmp	r3, #2
 800261a:	d007      	beq.n	800262c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002620:	2b11      	cmp	r3, #17
 8002622:	d003      	beq.n	800262c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	2b12      	cmp	r3, #18
 800262a:	d130      	bne.n	800268e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	2203      	movs	r2, #3
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	43db      	mvns	r3, r3
 800263e:	69fa      	ldr	r2, [r7, #28]
 8002640:	4013      	ands	r3, r2
 8002642:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	68da      	ldr	r2, [r3, #12]
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	69fa      	ldr	r2, [r7, #28]
 8002652:	4313      	orrs	r3, r2
 8002654:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	69fa      	ldr	r2, [r7, #28]
 800265a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8002662:	2201      	movs	r2, #1
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43db      	mvns	r3, r3
 800266c:	69fa      	ldr	r2, [r7, #28]
 800266e:	4013      	ands	r3, r2
 8002670:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	091b      	lsrs	r3, r3, #4
 8002678:	f003 0201 	and.w	r2, r3, #1
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	69fa      	ldr	r2, [r7, #28]
 8002684:	4313      	orrs	r3, r2
 8002686:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	69fa      	ldr	r2, [r7, #28]
 800268c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b03      	cmp	r3, #3
 8002694:	d017      	beq.n	80026c6 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	2203      	movs	r2, #3
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43db      	mvns	r3, r3
 80026a8:	69fa      	ldr	r2, [r7, #28]
 80026aa:	4013      	ands	r3, r2
 80026ac:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	689a      	ldr	r2, [r3, #8]
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	69fa      	ldr	r2, [r7, #28]
 80026bc:	4313      	orrs	r3, r2
 80026be:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	69fa      	ldr	r2, [r7, #28]
 80026c4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d07c      	beq.n	80027cc <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80026d2:	4a47      	ldr	r2, [pc, #284]	; (80027f0 <HAL_GPIO_Init+0x3a8>)
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	089b      	lsrs	r3, r3, #2
 80026d8:	3318      	adds	r3, #24
 80026da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026de:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	f003 0303 	and.w	r3, r3, #3
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	220f      	movs	r2, #15
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43db      	mvns	r3, r3
 80026f0:	69fa      	ldr	r2, [r7, #28]
 80026f2:	4013      	ands	r3, r2
 80026f4:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	0a9a      	lsrs	r2, r3, #10
 80026fa:	4b3e      	ldr	r3, [pc, #248]	; (80027f4 <HAL_GPIO_Init+0x3ac>)
 80026fc:	4013      	ands	r3, r2
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	f002 0203 	and.w	r2, r2, #3
 8002704:	00d2      	lsls	r2, r2, #3
 8002706:	4093      	lsls	r3, r2
 8002708:	69fa      	ldr	r2, [r7, #28]
 800270a:	4313      	orrs	r3, r2
 800270c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800270e:	4938      	ldr	r1, [pc, #224]	; (80027f0 <HAL_GPIO_Init+0x3a8>)
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	089b      	lsrs	r3, r3, #2
 8002714:	3318      	adds	r3, #24
 8002716:	69fa      	ldr	r2, [r7, #28]
 8002718:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800271c:	4b34      	ldr	r3, [pc, #208]	; (80027f0 <HAL_GPIO_Init+0x3a8>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	43db      	mvns	r3, r3
 8002726:	69fa      	ldr	r2, [r7, #28]
 8002728:	4013      	ands	r3, r2
 800272a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d003      	beq.n	8002740 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8002738:	69fa      	ldr	r2, [r7, #28]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	4313      	orrs	r3, r2
 800273e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8002740:	4a2b      	ldr	r2, [pc, #172]	; (80027f0 <HAL_GPIO_Init+0x3a8>)
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002746:	4b2a      	ldr	r3, [pc, #168]	; (80027f0 <HAL_GPIO_Init+0x3a8>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	43db      	mvns	r3, r3
 8002750:	69fa      	ldr	r2, [r7, #28]
 8002752:	4013      	ands	r3, r2
 8002754:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8002762:	69fa      	ldr	r2, [r7, #28]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4313      	orrs	r3, r2
 8002768:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800276a:	4a21      	ldr	r2, [pc, #132]	; (80027f0 <HAL_GPIO_Init+0x3a8>)
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002770:	4b1f      	ldr	r3, [pc, #124]	; (80027f0 <HAL_GPIO_Init+0x3a8>)
 8002772:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002776:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	43db      	mvns	r3, r3
 800277c:	69fa      	ldr	r2, [r7, #28]
 800277e:	4013      	ands	r3, r2
 8002780:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800278e:	69fa      	ldr	r2, [r7, #28]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4313      	orrs	r3, r2
 8002794:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8002796:	4a16      	ldr	r2, [pc, #88]	; (80027f0 <HAL_GPIO_Init+0x3a8>)
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800279e:	4b14      	ldr	r3, [pc, #80]	; (80027f0 <HAL_GPIO_Init+0x3a8>)
 80027a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027a4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	43db      	mvns	r3, r3
 80027aa:	69fa      	ldr	r2, [r7, #28]
 80027ac:	4013      	ands	r3, r2
 80027ae:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80027bc:	69fa      	ldr	r2, [r7, #28]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80027c4:	4a0a      	ldr	r2, [pc, #40]	; (80027f0 <HAL_GPIO_Init+0x3a8>)
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	3301      	adds	r3, #1
 80027d0:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	fa22 f303 	lsr.w	r3, r2, r3
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f47f ae3d 	bne.w	800245c <HAL_GPIO_Init+0x14>
  }
}
 80027e2:	bf00      	nop
 80027e4:	bf00      	nop
 80027e6:	3724      	adds	r7, #36	; 0x24
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	46022000 	.word	0x46022000
 80027f4:	002f7f7f 	.word	0x002f7f7f

080027f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	460b      	mov	r3, r1
 8002802:	807b      	strh	r3, [r7, #2]
 8002804:	4613      	mov	r3, r2
 8002806:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002808:	787b      	ldrb	r3, [r7, #1]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800280e:	887a      	ldrh	r2, [r7, #2]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8002814:	e002      	b.n	800281c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8002816:	887a      	ldrh	r2, [r7, #2]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e08d      	b.n	8002956 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d106      	bne.n	8002854 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7fe fafc 	bl	8000e4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2224      	movs	r2, #36	; 0x24
 8002858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0201 	bic.w	r2, r2, #1
 800286a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002878:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002888:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d107      	bne.n	80028a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689a      	ldr	r2, [r3, #8]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800289e:	609a      	str	r2, [r3, #8]
 80028a0:	e006      	b.n	80028b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689a      	ldr	r2, [r3, #8]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80028ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d108      	bne.n	80028ca <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028c6:	605a      	str	r2, [r3, #4]
 80028c8:	e007      	b.n	80028da <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	6812      	ldr	r2, [r2, #0]
 80028e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68da      	ldr	r2, [r3, #12]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	691a      	ldr	r2, [r3, #16]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	430a      	orrs	r2, r1
 8002916:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	69d9      	ldr	r1, [r3, #28]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a1a      	ldr	r2, [r3, #32]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0201 	orr.w	r2, r2, #1
 8002936:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2220      	movs	r2, #32
 8002942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b084      	sub	sp, #16
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800297a:	2b00      	cmp	r3, #0
 800297c:	d005      	beq.n	800298a <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	68f9      	ldr	r1, [r7, #12]
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	4798      	blx	r3
  }
}
 800298a:	bf00      	nop
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
 800299a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b20      	cmp	r3, #32
 80029a6:	d138      	bne.n	8002a1a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d101      	bne.n	80029b6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80029b2:	2302      	movs	r3, #2
 80029b4:	e032      	b.n	8002a1c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2224      	movs	r2, #36	; 0x24
 80029c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 0201 	bic.w	r2, r2, #1
 80029d4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029e4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6819      	ldr	r1, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f042 0201 	orr.w	r2, r2, #1
 8002a04:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2220      	movs	r2, #32
 8002a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a16:	2300      	movs	r3, #0
 8002a18:	e000      	b.n	8002a1c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a1a:	2302      	movs	r3, #2
  }
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b20      	cmp	r3, #32
 8002a3c:	d139      	bne.n	8002ab2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d101      	bne.n	8002a4c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a48:	2302      	movs	r3, #2
 8002a4a:	e033      	b.n	8002ab4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2224      	movs	r2, #36	; 0x24
 8002a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f022 0201 	bic.w	r2, r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a7a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	021b      	lsls	r3, r3, #8
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f042 0201 	orr.w	r2, r2, #1
 8002a9c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2220      	movs	r2, #32
 8002aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	e000      	b.n	8002ab4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ab2:	2302      	movs	r3, #2
  }
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3714      	adds	r7, #20
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <HAL_ICACHE_Disable>:
  * @note   This function waits for the cache being disabled but
  *         not for the end of the automatic cache invalidation procedure.
  * @retval HAL status (HAL_OK/HAL_TIMEOUT)
  */
HAL_StatusTypeDef HAL_ICACHE_Disable(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Make sure BSYENDF is reset before to disable the instruction cache */
  /* as it automatically starts a cache invalidation procedure */
  WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 8002aca:	4b14      	ldr	r3, [pc, #80]	; (8002b1c <HAL_ICACHE_Disable+0x5c>)
 8002acc:	2202      	movs	r2, #2
 8002ace:	60da      	str	r2, [r3, #12]

  CLEAR_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002ad0:	4b12      	ldr	r3, [pc, #72]	; (8002b1c <HAL_ICACHE_Disable+0x5c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a11      	ldr	r2, [pc, #68]	; (8002b1c <HAL_ICACHE_Disable+0x5c>)
 8002ad6:	f023 0301 	bic.w	r3, r3, #1
 8002ada:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002adc:	f7fe fd32 	bl	8001544 <HAL_GetTick>
 8002ae0:	6038      	str	r0, [r7, #0]

  /* Wait for instruction cache being disabled */
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002ae2:	e00f      	b.n	8002b04 <HAL_ICACHE_Disable+0x44>
  {
    if ((HAL_GetTick() - tickstart) > ICACHE_DISABLE_TIMEOUT_VALUE)
 8002ae4:	f7fe fd2e 	bl	8001544 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d908      	bls.n	8002b04 <HAL_ICACHE_Disable+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002af2:	4b0a      	ldr	r3, [pc, #40]	; (8002b1c <HAL_ICACHE_Disable+0x5c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d002      	beq.n	8002b04 <HAL_ICACHE_Disable+0x44>
      {
        status = HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	71fb      	strb	r3, [r7, #7]
        break;
 8002b02:	e005      	b.n	8002b10 <HAL_ICACHE_Disable+0x50>
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002b04:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <HAL_ICACHE_Disable+0x5c>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1e9      	bne.n	8002ae4 <HAL_ICACHE_Disable+0x24>
      }
    }
  }

  return status;
 8002b10:	79fb      	ldrb	r3, [r7, #7]
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40030400 	.word	0x40030400

08002b20 <HAL_ICACHE_EnableRemapRegion>:
                     This parameter can be a value of @arg @ref ICACHE_Region
  * @param  pRegionConfig  Pointer to structure of ICACHE region configuration parameters
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef  HAL_ICACHE_EnableRemapRegion(uint32_t Region, const ICACHE_RegionConfigTypeDef *const pRegionConfig)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b087      	sub	sp, #28
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ICACHE_REGION_SIZE(pRegionConfig->Size));
  assert_param(IS_ICACHE_REGION_TRAFFIC_ROUTE(pRegionConfig->TrafficRoute));
  assert_param(IS_ICACHE_REGION_OUTPUT_BURST_TYPE(pRegionConfig->OutputBurstType));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002b2e:	4b22      	ldr	r3, [pc, #136]	; (8002bb8 <HAL_ICACHE_EnableRemapRegion+0x98>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d002      	beq.n	8002b40 <HAL_ICACHE_EnableRemapRegion+0x20>
  {
    status = HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	75fb      	strb	r3, [r7, #23]
 8002b3e:	e034      	b.n	8002baa <HAL_ICACHE_EnableRemapRegion+0x8a>
  }
  else
  {
    /* Get region control register address */
    p_reg = &(ICACHE->CRR0) + (1U * Region);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	009a      	lsls	r2, r3, #2
 8002b44:	4b1d      	ldr	r3, [pc, #116]	; (8002bbc <HAL_ICACHE_EnableRemapRegion+0x9c>)
 8002b46:	4413      	add	r3, r2
 8002b48:	613b      	str	r3, [r7, #16]

    /* Check region is not already enabled */
    if ((*p_reg & ICACHE_CRRx_REN) != 0U)
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d002      	beq.n	8002b5c <HAL_ICACHE_EnableRemapRegion+0x3c>
    {
      status = HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	75fb      	strb	r3, [r7, #23]
 8002b5a:	e026      	b.n	8002baa <HAL_ICACHE_EnableRemapRegion+0x8a>
      /* Region 8MB:   BaseAddress size 6 bits, RemapAddress size 9 bits  */
      /* Region 16MB:  BaseAddress size 5 bits, RemapAddress size 8 bits  */
      /* Region 32MB:  BaseAddress size 4 bits, RemapAddress size 7 bits  */
      /* Region 64MB:  BaseAddress size 3 bits, RemapAddress size 6 bits  */
      /* Region 128MB: BaseAddress size 2 bits, RemapAddress size 5 bits  */
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	0d5a      	lsrs	r2, r3, #21
               (0xFFU & ~(pRegionConfig->Size - 1U));
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	425b      	negs	r3, r3
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 8002b68:	4013      	ands	r3, r2
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	60fb      	str	r3, [r7, #12]
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	095a      	lsrs	r2, r3, #5
                ((uint32_t)(0x7FFU & ~(pRegionConfig->Size - 1U)) << ICACHE_CRRx_REMAPADDR_Pos));
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	425b      	negs	r3, r3
 8002b7a:	041b      	lsls	r3, r3, #16
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 8002b7c:	401a      	ands	r2, r3
 8002b7e:	4b10      	ldr	r3, [pc, #64]	; (8002bc0 <HAL_ICACHE_EnableRemapRegion+0xa0>)
 8002b80:	4013      	ands	r3, r2
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	60fb      	str	r3, [r7, #12]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	025a      	lsls	r2, r3, #9
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	431a      	orrs	r2, r3
               pRegionConfig->OutputBurstType;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	691b      	ldr	r3, [r3, #16]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	60fb      	str	r3, [r7, #12]
      *p_reg = (value | ICACHE_CRRx_REN);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
 8002baa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	371c      	adds	r7, #28
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	40030400 	.word	0x40030400
 8002bbc:	40030420 	.word	0x40030420
 8002bc0:	07ff0000 	.word	0x07ff0000

08002bc4 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e0e7      	b.n	8002da6 <HAL_LPTIM_Init+0x1e2>
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(hlptim->Init.Period));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d106      	bne.n	8002bf6 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7fe f99d 	bl	8000f30 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	691a      	ldr	r2, [r3, #16]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f042 0201 	orr.w	r2, r2, #1
 8002c0c:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c16:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c20:	629a      	str	r2, [r3, #40]	; 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8002c22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 faea 	bl	8003200 <LPTIM_WaitForFlag>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b03      	cmp	r3, #3
 8002c30:	d101      	bne.n	8002c36 <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e0b7      	b.n	8002da6 <HAL_LPTIM_Init+0x1e2>
  }


  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2210      	movs	r2, #16
 8002c3c:	605a      	str	r2, [r3, #4]

  /* Set LPTIM Period */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, hlptim->Init.Period);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	6a12      	ldr	r2, [r2, #32]
 8002c46:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8002c48:	2110      	movs	r1, #16
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 fad8 	bl	8003200 <LPTIM_WaitForFlag>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b03      	cmp	r3, #3
 8002c54:	d101      	bne.n	8002c5a <HAL_LPTIM_Init+0x96>
  {
    return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e0a5      	b.n	8002da6 <HAL_LPTIM_Init+0x1e2>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10e      	bne.n	8002c86 <HAL_LPTIM_Init+0xc2>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d107      	bne.n	8002c86 <HAL_LPTIM_Init+0xc2>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	691a      	ldr	r2, [r3, #16]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 0201 	bic.w	r2, r2, #1
 8002c84:	611a      	str	r2, [r3, #16]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d004      	beq.n	8002ca0 <HAL_LPTIM_Init+0xdc>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c9e:	d103      	bne.n	8002ca8 <HAL_LPTIM_Init+0xe4>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f023 031e 	bic.w	r3, r3, #30
 8002ca6:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d005      	beq.n	8002cc0 <HAL_LPTIM_Init+0xfc>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002cba:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002cbe:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	4b3b      	ldr	r3, [pc, #236]	; (8002db0 <HAL_LPTIM_Init+0x1ec>)
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002cd0:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.Clock.Prescaler |
 8002cd6:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8002cdc:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d107      	bne.n	8002cfc <HAL_LPTIM_Init+0x138>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d004      	beq.n	8002d0e <HAL_LPTIM_Init+0x14a>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d0c:	d107      	bne.n	8002d1e <HAL_LPTIM_Init+0x15a>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8002d16:	4313      	orrs	r3, r2
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d00a      	beq.n	8002d40 <HAL_LPTIM_Init+0x17c>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002d32:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8002d38:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a19      	ldr	r2, [pc, #100]	; (8002db4 <HAL_LPTIM_Init+0x1f0>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d004      	beq.n	8002d5c <HAL_LPTIM_Init+0x198>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a18      	ldr	r2, [pc, #96]	; (8002db8 <HAL_LPTIM_Init+0x1f4>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d108      	bne.n	8002d6e <HAL_LPTIM_Init+0x1aa>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	625a      	str	r2, [r3, #36]	; 0x24
 8002d6c:	e00e      	b.n	8002d8c <HAL_LPTIM_Init+0x1c8>
  }
  else
  {
    if ((hlptim->Instance == LPTIM3) || (hlptim->Instance == LPTIM4))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a12      	ldr	r2, [pc, #72]	; (8002dbc <HAL_LPTIM_Init+0x1f8>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d004      	beq.n	8002d82 <HAL_LPTIM_Init+0x1be>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a10      	ldr	r2, [pc, #64]	; (8002dc0 <HAL_LPTIM_Init+0x1fc>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d104      	bne.n	8002d8c <HAL_LPTIM_Init+0x1c8>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d8a:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Initialize the LPTIM channels state */
  LPTIM_CHANNEL_STATE_SET_ALL(hlptim, HAL_LPTIM_CHANNEL_STATE_READY);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Return function status */
  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	ff39f1fe 	.word	0xff39f1fe
 8002db4:	46004400 	.word	0x46004400
 8002db8:	40009400 	.word	0x40009400
 8002dbc:	46004800 	.word	0x46004800
 8002dc0:	46004c00 	.word	0x46004c00

08002dc4 <HAL_LPTIM_Counter_Start_IT>:
  * @brief  Start the Counter mode in interrupt mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d00c      	beq.n	8002df6 <HAL_LPTIM_Counter_Start_IT+0x32>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002de4:	d107      	bne.n	8002df6 <HAL_LPTIM_Counter_Start_IT+0x32>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68da      	ldr	r2, [r3, #12]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 8002df4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	691a      	ldr	r2, [r3, #16]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f042 0201 	orr.w	r2, r2, #1
 8002e04:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DIEROK);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e0e:	605a      	str	r2, [r3, #4]

  /* Enable interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK | LPTIM_IT_ARRM | LPTIM_IT_REPOK | LPTIM_IT_UPDATE);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689a      	ldr	r2, [r3, #8]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 72c9 	orr.w	r2, r2, #402	; 0x192
 8002e1e:	609a      	str	r2, [r3, #8]

  /* Wait for the completion of the write operation to the LPTIM_DIER register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_DIEROK) == HAL_TIMEOUT)
 8002e20:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 f9eb 	bl	8003200 <LPTIM_WaitForFlag>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b03      	cmp	r3, #3
 8002e2e:	d101      	bne.n	8002e34 <HAL_LPTIM_Counter_Start_IT+0x70>
  {
    return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e00c      	b.n	8002e4e <HAL_LPTIM_Counter_Start_IT+0x8a>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	691a      	ldr	r2, [r3, #16]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 0204 	orr.w	r2, r2, #4
 8002e42:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Return function status */
  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b082      	sub	sp, #8
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  /* Capture Compare 1 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1) != RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d120      	bne.n	8002eae <HAL_LPTIM_IRQHandler+0x58>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1) != RESET)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d119      	bne.n	8002eae <HAL_LPTIM_IRQHandler+0x58>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Input capture event */
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC1SEL) != 0x00U)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <HAL_LPTIM_IRQHandler+0x4a>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
#else
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 f99c 	bl	80031d6 <HAL_LPTIM_IC_CaptureCallback>
 8002e9e:	e002      	b.n	8002ea6 <HAL_LPTIM_IRQHandler+0x50>
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 f93e 	bl	8003122 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Capture Compare 2 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2) != RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ebc:	d122      	bne.n	8002f04 <HAL_LPTIM_IRQHandler+0xae>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2) != RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ecc:	d11a      	bne.n	8002f04 <HAL_LPTIM_IRQHandler+0xae>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ed6:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2202      	movs	r2, #2
 8002edc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Input capture event */
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC2SEL) != 0x00U)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_LPTIM_IRQHandler+0xa0>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
#else
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 f971 	bl	80031d6 <HAL_LPTIM_IC_CaptureCallback>
 8002ef4:	e002      	b.n	8002efc <HAL_LPTIM_IRQHandler+0xa6>
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f913 	bl	8003122 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Over Capture 1 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1O) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f12:	d117      	bne.n	8002f44 <HAL_LPTIM_IRQHandler+0xee>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1O) != RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f22:	d10f      	bne.n	8002f44 <HAL_LPTIM_IRQHandler+0xee>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1O);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f2c:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f957 	bl	80031ea <HAL_LPTIM_IC_OverCaptureCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Over Capture 2 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2O) != RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f52:	d117      	bne.n	8002f84 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2O) != RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f62:	d10f      	bne.n	8002f84 <HAL_LPTIM_IRQHandler+0x12e>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2O);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f6c:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2202      	movs	r2, #2
 8002f72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f937 	bl	80031ea <HAL_LPTIM_IC_OverCaptureCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d10d      	bne.n	8002fae <HAL_LPTIM_IRQHandler+0x158>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d106      	bne.n	8002fae <HAL_LPTIM_IRQHandler+0x158>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2202      	movs	r2, #2
 8002fa6:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 f8c4 	bl	8003136 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b04      	cmp	r3, #4
 8002fba:	d10d      	bne.n	8002fd8 <HAL_LPTIM_IRQHandler+0x182>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 0304 	and.w	r3, r3, #4
 8002fc6:	2b04      	cmp	r3, #4
 8002fc8:	d106      	bne.n	8002fd8 <HAL_LPTIM_IRQHandler+0x182>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2204      	movs	r2, #4
 8002fd0:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f8b9 	bl	800314a <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP1OK) != RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0308 	and.w	r3, r3, #8
 8002fe2:	2b08      	cmp	r3, #8
 8002fe4:	d111      	bne.n	800300a <HAL_LPTIM_IRQHandler+0x1b4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP1OK) != RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f003 0308 	and.w	r3, r3, #8
 8002ff0:	2b08      	cmp	r3, #8
 8002ff2:	d10a      	bne.n	800300a <HAL_LPTIM_IRQHandler+0x1b4>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP1OK);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2208      	movs	r2, #8
 8002ffa:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 f8aa 	bl	800315e <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP2OK) != RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003014:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003018:	d113      	bne.n	8003042 <HAL_LPTIM_IRQHandler+0x1ec>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP2OK) != RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003024:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003028:	d10b      	bne.n	8003042 <HAL_LPTIM_IRQHandler+0x1ec>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP2OK);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003032:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2202      	movs	r2, #2
 8003038:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 f88e 	bl	800315e <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0310 	and.w	r3, r3, #16
 800304c:	2b10      	cmp	r3, #16
 800304e:	d10d      	bne.n	800306c <HAL_LPTIM_IRQHandler+0x216>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f003 0310 	and.w	r3, r3, #16
 800305a:	2b10      	cmp	r3, #16
 800305c:	d106      	bne.n	800306c <HAL_LPTIM_IRQHandler+0x216>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2210      	movs	r2, #16
 8003064:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f883 	bl	8003172 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0320 	and.w	r3, r3, #32
 8003076:	2b20      	cmp	r3, #32
 8003078:	d10d      	bne.n	8003096 <HAL_LPTIM_IRQHandler+0x240>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f003 0320 	and.w	r3, r3, #32
 8003084:	2b20      	cmp	r3, #32
 8003086:	d106      	bne.n	8003096 <HAL_LPTIM_IRQHandler+0x240>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2220      	movs	r2, #32
 800308e:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f000 f878 	bl	8003186 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a0:	2b40      	cmp	r3, #64	; 0x40
 80030a2:	d10d      	bne.n	80030c0 <HAL_LPTIM_IRQHandler+0x26a>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ae:	2b40      	cmp	r3, #64	; 0x40
 80030b0:	d106      	bne.n	80030c0 <HAL_LPTIM_IRQHandler+0x26a>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2240      	movs	r2, #64	; 0x40
 80030b8:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f86d 	bl	800319a <HAL_LPTIM_DirectionDownCallback>
    }
  }

  /* Repetition counter underflowed (or contains zero) and the LPTIM counter
     overflowed */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ca:	2b80      	cmp	r3, #128	; 0x80
 80030cc:	d10d      	bne.n	80030ea <HAL_LPTIM_IRQHandler+0x294>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d8:	2b80      	cmp	r3, #128	; 0x80
 80030da:	d106      	bne.n	80030ea <HAL_LPTIM_IRQHandler+0x294>
    {
      /* Clear update event flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2280      	movs	r2, #128	; 0x80
 80030e2:	605a      	str	r2, [r3, #4]

      /* Update event Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->UpdateEventCallback(hlptim);
#else
      HAL_LPTIM_UpdateEventCallback(hlptim);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 f862 	bl	80031ae <HAL_LPTIM_UpdateEventCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Successful APB bus write to repetition counter register */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030f8:	d10f      	bne.n	800311a <HAL_LPTIM_IRQHandler+0x2c4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003104:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003108:	d107      	bne.n	800311a <HAL_LPTIM_IRQHandler+0x2c4>
    {
      /* Clear successful APB bus write to repetition counter flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003112:	605a      	str	r2, [r3, #4]

      /* Successful APB bus write to repetition counter Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->RepCounterWriteCallback(hlptim);
#else
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f854 	bl	80031c2 <HAL_LPTIM_RepCounterWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 800311a:	bf00      	nop
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003122:	b480      	push	{r7}
 8003124:	b083      	sub	sp, #12
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 800312a:	bf00      	nop
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003136:	b480      	push	{r7}
 8003138:	b083      	sub	sp, #12
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 800313e:	bf00      	nop
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8003152:	bf00      	nop
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800315e:	b480      	push	{r7}
 8003160:	b083      	sub	sp, #12
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <HAL_LPTIM_UpdateEventCallback>:
  * @brief Repetition counter underflowed (or contains zero) and LPTIM counter overflowed callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b083      	sub	sp, #12
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventCallback could be implemented in the user file
   */
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <HAL_LPTIM_RepCounterWriteCallback>:
  * @brief  Successful APB bus write to repetition counter register callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b083      	sub	sp, #12
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_RepCounterWriteCallback could be implemented in the user file
   */
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <HAL_LPTIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_CaptureCallback(LPTIM_HandleTypeDef *hlptim)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b083      	sub	sp, #12
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <HAL_LPTIM_IC_OverCaptureCallback>:
  * @brief  Over Capture callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_OverCaptureCallback(LPTIM_HandleTypeDef *hlptim)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_OverCaptureCallback could be implemented in the user file
   */
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
	...

08003200 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800320e:	4b12      	ldr	r3, [pc, #72]	; (8003258 <LPTIM_WaitForFlag+0x58>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a12      	ldr	r2, [pc, #72]	; (800325c <LPTIM_WaitForFlag+0x5c>)
 8003214:	fba2 2303 	umull	r2, r3, r2, r3
 8003218:	0b9b      	lsrs	r3, r3, #14
 800321a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800321e:	fb02 f303 	mul.w	r3, r2, r3
 8003222:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	3b01      	subs	r3, #1
 8003228:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	4013      	ands	r3, r2
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	429a      	cmp	r2, r3
 8003242:	d002      	beq.n	800324a <LPTIM_WaitForFlag+0x4a>
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1ec      	bne.n	8003224 <LPTIM_WaitForFlag+0x24>

  return result;
 800324a:	7bfb      	ldrb	r3, [r7, #15]
}
 800324c:	4618      	mov	r0, r3
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	20000004 	.word	0x20000004
 800325c:	d1b71759 	.word	0xd1b71759

08003260 <HAL_PWR_ConfigPVD>:
  * @param  pConfigPVD : Pointer to a PWR_PVDTypeDef structure that contains the
  *                      PVD configuration information (PVDLevel and EventMode).
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *pConfigPVD)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Check the PVD parameter */
  if (pConfigPVD == NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_PWR_ConfigPVD+0x12>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e059      	b.n	8003326 <HAL_PWR_ConfigPVD+0xc6>
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(pConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(pConfigPVD->Mode));

  /* Set PVDLS[2:0] bits according to PVDLevel value */
  MODIFY_REG(PWR->SVMCR, PWR_SVMCR_PVDLS, pConfigPVD->PVDLevel);
 8003272:	4b30      	ldr	r3, [pc, #192]	; (8003334 <HAL_PWR_ConfigPVD+0xd4>)
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	492d      	ldr	r1, [pc, #180]	; (8003334 <HAL_PWR_ConfigPVD+0xd4>)
 8003280:	4313      	orrs	r3, r2
 8003282:	610b      	str	r3, [r1, #16]

  /* Disable PVD Event/Interrupt */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8003284:	4b2c      	ldr	r3, [pc, #176]	; (8003338 <HAL_PWR_ConfigPVD+0xd8>)
 8003286:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800328a:	4a2b      	ldr	r2, [pc, #172]	; (8003338 <HAL_PWR_ConfigPVD+0xd8>)
 800328c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003290:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8003294:	4b28      	ldr	r3, [pc, #160]	; (8003338 <HAL_PWR_ConfigPVD+0xd8>)
 8003296:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800329a:	4a27      	ldr	r2, [pc, #156]	; (8003338 <HAL_PWR_ConfigPVD+0xd8>)
 800329c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 80032a4:	4b24      	ldr	r3, [pc, #144]	; (8003338 <HAL_PWR_ConfigPVD+0xd8>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a23      	ldr	r2, [pc, #140]	; (8003338 <HAL_PWR_ConfigPVD+0xd8>)
 80032aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ae:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 80032b0:	4b21      	ldr	r3, [pc, #132]	; (8003338 <HAL_PWR_ConfigPVD+0xd8>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	4a20      	ldr	r2, [pc, #128]	; (8003338 <HAL_PWR_ConfigPVD+0xd8>)
 80032b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ba:	6053      	str	r3, [r2, #4]

  /* Configure the PVD in interrupt mode */
  if ((pConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f003 0304 	and.w	r3, r3, #4
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d007      	beq.n	80032d8 <HAL_PWR_ConfigPVD+0x78>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 80032c8:	4b1b      	ldr	r3, [pc, #108]	; (8003338 <HAL_PWR_ConfigPVD+0xd8>)
 80032ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032ce:	4a1a      	ldr	r2, [pc, #104]	; (8003338 <HAL_PWR_ConfigPVD+0xd8>)
 80032d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }

  /* Configure the PVD in event mode */
  if ((pConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f003 0308 	and.w	r3, r3, #8
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d007      	beq.n	80032f4 <HAL_PWR_ConfigPVD+0x94>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 80032e4:	4b14      	ldr	r3, [pc, #80]	; (8003338 <HAL_PWR_ConfigPVD+0xd8>)
 80032e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ea:	4a13      	ldr	r2, [pc, #76]	; (8003338 <HAL_PWR_ConfigPVD+0xd8>)
 80032ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  }

  /* Configure the PVD in rising edge */
  if ((pConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d005      	beq.n	800330c <HAL_PWR_ConfigPVD+0xac>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8003300:	4b0d      	ldr	r3, [pc, #52]	; (8003338 <HAL_PWR_ConfigPVD+0xd8>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a0c      	ldr	r2, [pc, #48]	; (8003338 <HAL_PWR_ConfigPVD+0xd8>)
 8003306:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800330a:	6013      	str	r3, [r2, #0]
  }

  /* Configure the PVD in falling edge */
  if ((pConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d005      	beq.n	8003324 <HAL_PWR_ConfigPVD+0xc4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8003318:	4b07      	ldr	r3, [pc, #28]	; (8003338 <HAL_PWR_ConfigPVD+0xd8>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	4a06      	ldr	r2, [pc, #24]	; (8003338 <HAL_PWR_ConfigPVD+0xd8>)
 800331e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003322:	6053      	str	r3, [r2, #4]
  }

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	46020800 	.word	0x46020800
 8003338:	46022000 	.word	0x46022000

0800333c <HAL_PWR_EnablePVD>:
/**
  * @brief  Enable the programmable voltage detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_PVDE);
 8003340:	4b05      	ldr	r3, [pc, #20]	; (8003358 <HAL_PWR_EnablePVD+0x1c>)
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	4a04      	ldr	r2, [pc, #16]	; (8003358 <HAL_PWR_EnablePVD+0x1c>)
 8003346:	f043 0310 	orr.w	r3, r3, #16
 800334a:	6113      	str	r3, [r2, #16]
}
 800334c:	bf00      	nop
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	46020800 	.word	0x46020800

0800335c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003364:	4b39      	ldr	r3, [pc, #228]	; (800344c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003368:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800336c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	429a      	cmp	r2, r3
 8003374:	d10b      	bne.n	800338e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800337c:	d905      	bls.n	800338a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800337e:	4b33      	ldr	r3, [pc, #204]	; (800344c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	4a32      	ldr	r2, [pc, #200]	; (800344c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003384:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003388:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800338a:	2300      	movs	r3, #0
 800338c:	e057      	b.n	800343e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003394:	d90a      	bls.n	80033ac <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003396:	4b2d      	ldr	r3, [pc, #180]	; (800344c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	4a2a      	ldr	r2, [pc, #168]	; (800344c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80033a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033a8:	60d3      	str	r3, [r2, #12]
 80033aa:	e007      	b.n	80033bc <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80033ac:	4b27      	ldr	r3, [pc, #156]	; (800344c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80033b4:	4925      	ldr	r1, [pc, #148]	; (800344c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80033bc:	4b24      	ldr	r3, [pc, #144]	; (8003450 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a24      	ldr	r2, [pc, #144]	; (8003454 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80033c2:	fba2 2303 	umull	r2, r3, r2, r3
 80033c6:	099b      	lsrs	r3, r3, #6
 80033c8:	2232      	movs	r2, #50	; 0x32
 80033ca:	fb02 f303 	mul.w	r3, r2, r3
 80033ce:	4a21      	ldr	r2, [pc, #132]	; (8003454 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80033d0:	fba2 2303 	umull	r2, r3, r2, r3
 80033d4:	099b      	lsrs	r3, r3, #6
 80033d6:	3301      	adds	r3, #1
 80033d8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80033da:	e002      	b.n	80033e2 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	3b01      	subs	r3, #1
 80033e0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80033e2:	4b1a      	ldr	r3, [pc, #104]	; (800344c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d102      	bne.n	80033f4 <HAL_PWREx_ControlVoltageScaling+0x98>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1f3      	bne.n	80033dc <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d01b      	beq.n	8003432 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80033fa:	4b15      	ldr	r3, [pc, #84]	; (8003450 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a15      	ldr	r2, [pc, #84]	; (8003454 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003400:	fba2 2303 	umull	r2, r3, r2, r3
 8003404:	099b      	lsrs	r3, r3, #6
 8003406:	2232      	movs	r2, #50	; 0x32
 8003408:	fb02 f303 	mul.w	r3, r2, r3
 800340c:	4a11      	ldr	r2, [pc, #68]	; (8003454 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800340e:	fba2 2303 	umull	r2, r3, r2, r3
 8003412:	099b      	lsrs	r3, r3, #6
 8003414:	3301      	adds	r3, #1
 8003416:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003418:	e002      	b.n	8003420 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	3b01      	subs	r3, #1
 800341e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003420:	4b0a      	ldr	r3, [pc, #40]	; (800344c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003424:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d102      	bne.n	8003432 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1f3      	bne.n	800341a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e000      	b.n	800343e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3714      	adds	r7, #20
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	46020800 	.word	0x46020800
 8003450:	20000004 	.word	0x20000004
 8003454:	10624dd3 	.word	0x10624dd3

08003458 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800345c:	4b04      	ldr	r3, [pc, #16]	; (8003470 <HAL_PWREx_GetVoltageRange+0x18>)
 800345e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003460:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003464:	4618      	mov	r0, r3
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	46020800 	.word	0x46020800

08003474 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8003478:	4b05      	ldr	r3, [pc, #20]	; (8003490 <HAL_PWREx_EnableVddIO2+0x1c>)
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	4a04      	ldr	r2, [pc, #16]	; (8003490 <HAL_PWREx_EnableVddIO2+0x1c>)
 800347e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003482:	6113      	str	r3, [r2, #16]
}
 8003484:	bf00      	nop
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	46020800 	.word	0x46020800

08003494 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8003498:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <HAL_PWREx_EnableVddA+0x1c>)
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	4a04      	ldr	r2, [pc, #16]	; (80034b0 <HAL_PWREx_EnableVddA+0x1c>)
 800349e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80034a2:	6113      	str	r3, [r2, #16]
}
 80034a4:	bf00      	nop
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	46020800 	.word	0x46020800

080034b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b08e      	sub	sp, #56	; 0x38
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80034bc:	2300      	movs	r3, #0
 80034be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d102      	bne.n	80034ce <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	f000 bec8 	b.w	800425e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034ce:	4b99      	ldr	r3, [pc, #612]	; (8003734 <HAL_RCC_OscConfig+0x280>)
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	f003 030c 	and.w	r3, r3, #12
 80034d6:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034d8:	4b96      	ldr	r3, [pc, #600]	; (8003734 <HAL_RCC_OscConfig+0x280>)
 80034da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034dc:	f003 0303 	and.w	r3, r3, #3
 80034e0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0310 	and.w	r3, r3, #16
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 816c 	beq.w	80037c8 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80034f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d007      	beq.n	8003506 <HAL_RCC_OscConfig+0x52>
 80034f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f8:	2b0c      	cmp	r3, #12
 80034fa:	f040 80de 	bne.w	80036ba <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80034fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003500:	2b01      	cmp	r3, #1
 8003502:	f040 80da 	bne.w	80036ba <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d102      	bne.n	8003514 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	f000 bea5 	b.w	800425e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003518:	4b86      	ldr	r3, [pc, #536]	; (8003734 <HAL_RCC_OscConfig+0x280>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d004      	beq.n	800352e <HAL_RCC_OscConfig+0x7a>
 8003524:	4b83      	ldr	r3, [pc, #524]	; (8003734 <HAL_RCC_OscConfig+0x280>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800352c:	e005      	b.n	800353a <HAL_RCC_OscConfig+0x86>
 800352e:	4b81      	ldr	r3, [pc, #516]	; (8003734 <HAL_RCC_OscConfig+0x280>)
 8003530:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003534:	041b      	lsls	r3, r3, #16
 8003536:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800353a:	4293      	cmp	r3, r2
 800353c:	d255      	bcs.n	80035ea <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800353e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10a      	bne.n	800355a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003548:	4618      	mov	r0, r3
 800354a:	f001 f9d9 	bl	8004900 <RCC_SetFlashLatencyFromMSIRange>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d002      	beq.n	800355a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	f000 be82 	b.w	800425e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800355a:	4b76      	ldr	r3, [pc, #472]	; (8003734 <HAL_RCC_OscConfig+0x280>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	4a75      	ldr	r2, [pc, #468]	; (8003734 <HAL_RCC_OscConfig+0x280>)
 8003560:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003564:	6093      	str	r3, [r2, #8]
 8003566:	4b73      	ldr	r3, [pc, #460]	; (8003734 <HAL_RCC_OscConfig+0x280>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003572:	4970      	ldr	r1, [pc, #448]	; (8003734 <HAL_RCC_OscConfig+0x280>)
 8003574:	4313      	orrs	r3, r2
 8003576:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003580:	d309      	bcc.n	8003596 <HAL_RCC_OscConfig+0xe2>
 8003582:	4b6c      	ldr	r3, [pc, #432]	; (8003734 <HAL_RCC_OscConfig+0x280>)
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	f023 021f 	bic.w	r2, r3, #31
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	4969      	ldr	r1, [pc, #420]	; (8003734 <HAL_RCC_OscConfig+0x280>)
 8003590:	4313      	orrs	r3, r2
 8003592:	60cb      	str	r3, [r1, #12]
 8003594:	e07e      	b.n	8003694 <HAL_RCC_OscConfig+0x1e0>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359a:	2b00      	cmp	r3, #0
 800359c:	da0a      	bge.n	80035b4 <HAL_RCC_OscConfig+0x100>
 800359e:	4b65      	ldr	r3, [pc, #404]	; (8003734 <HAL_RCC_OscConfig+0x280>)
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	015b      	lsls	r3, r3, #5
 80035ac:	4961      	ldr	r1, [pc, #388]	; (8003734 <HAL_RCC_OscConfig+0x280>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	60cb      	str	r3, [r1, #12]
 80035b2:	e06f      	b.n	8003694 <HAL_RCC_OscConfig+0x1e0>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035bc:	d30a      	bcc.n	80035d4 <HAL_RCC_OscConfig+0x120>
 80035be:	4b5d      	ldr	r3, [pc, #372]	; (8003734 <HAL_RCC_OscConfig+0x280>)
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	029b      	lsls	r3, r3, #10
 80035cc:	4959      	ldr	r1, [pc, #356]	; (8003734 <HAL_RCC_OscConfig+0x280>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	60cb      	str	r3, [r1, #12]
 80035d2:	e05f      	b.n	8003694 <HAL_RCC_OscConfig+0x1e0>
 80035d4:	4b57      	ldr	r3, [pc, #348]	; (8003734 <HAL_RCC_OscConfig+0x280>)
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a1b      	ldr	r3, [r3, #32]
 80035e0:	03db      	lsls	r3, r3, #15
 80035e2:	4954      	ldr	r1, [pc, #336]	; (8003734 <HAL_RCC_OscConfig+0x280>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	60cb      	str	r3, [r1, #12]
 80035e8:	e054      	b.n	8003694 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80035ea:	4b52      	ldr	r3, [pc, #328]	; (8003734 <HAL_RCC_OscConfig+0x280>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	4a51      	ldr	r2, [pc, #324]	; (8003734 <HAL_RCC_OscConfig+0x280>)
 80035f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80035f4:	6093      	str	r3, [r2, #8]
 80035f6:	4b4f      	ldr	r3, [pc, #316]	; (8003734 <HAL_RCC_OscConfig+0x280>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003602:	494c      	ldr	r1, [pc, #304]	; (8003734 <HAL_RCC_OscConfig+0x280>)
 8003604:	4313      	orrs	r3, r2
 8003606:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003610:	d309      	bcc.n	8003626 <HAL_RCC_OscConfig+0x172>
 8003612:	4b48      	ldr	r3, [pc, #288]	; (8003734 <HAL_RCC_OscConfig+0x280>)
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	f023 021f 	bic.w	r2, r3, #31
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	4945      	ldr	r1, [pc, #276]	; (8003734 <HAL_RCC_OscConfig+0x280>)
 8003620:	4313      	orrs	r3, r2
 8003622:	60cb      	str	r3, [r1, #12]
 8003624:	e028      	b.n	8003678 <HAL_RCC_OscConfig+0x1c4>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362a:	2b00      	cmp	r3, #0
 800362c:	da0a      	bge.n	8003644 <HAL_RCC_OscConfig+0x190>
 800362e:	4b41      	ldr	r3, [pc, #260]	; (8003734 <HAL_RCC_OscConfig+0x280>)
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	015b      	lsls	r3, r3, #5
 800363c:	493d      	ldr	r1, [pc, #244]	; (8003734 <HAL_RCC_OscConfig+0x280>)
 800363e:	4313      	orrs	r3, r2
 8003640:	60cb      	str	r3, [r1, #12]
 8003642:	e019      	b.n	8003678 <HAL_RCC_OscConfig+0x1c4>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800364c:	d30a      	bcc.n	8003664 <HAL_RCC_OscConfig+0x1b0>
 800364e:	4b39      	ldr	r3, [pc, #228]	; (8003734 <HAL_RCC_OscConfig+0x280>)
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	029b      	lsls	r3, r3, #10
 800365c:	4935      	ldr	r1, [pc, #212]	; (8003734 <HAL_RCC_OscConfig+0x280>)
 800365e:	4313      	orrs	r3, r2
 8003660:	60cb      	str	r3, [r1, #12]
 8003662:	e009      	b.n	8003678 <HAL_RCC_OscConfig+0x1c4>
 8003664:	4b33      	ldr	r3, [pc, #204]	; (8003734 <HAL_RCC_OscConfig+0x280>)
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	03db      	lsls	r3, r3, #15
 8003672:	4930      	ldr	r1, [pc, #192]	; (8003734 <HAL_RCC_OscConfig+0x280>)
 8003674:	4313      	orrs	r3, r2
 8003676:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10a      	bne.n	8003694 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	4618      	mov	r0, r3
 8003684:	f001 f93c 	bl	8004900 <RCC_SetFlashLatencyFromMSIRange>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d002      	beq.n	8003694 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	f000 bde5 	b.w	800425e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003694:	f001 f8de 	bl	8004854 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003698:	4b27      	ldr	r3, [pc, #156]	; (8003738 <HAL_RCC_OscConfig+0x284>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	f7fd ff07 	bl	80014b0 <HAL_InitTick>
 80036a2:	4603      	mov	r3, r0
 80036a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 80036a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 808a 	beq.w	80037c6 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80036b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036b6:	f000 bdd2 	b.w	800425e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d066      	beq.n	8003790 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80036c2:	4b1c      	ldr	r3, [pc, #112]	; (8003734 <HAL_RCC_OscConfig+0x280>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a1b      	ldr	r2, [pc, #108]	; (8003734 <HAL_RCC_OscConfig+0x280>)
 80036c8:	f043 0301 	orr.w	r3, r3, #1
 80036cc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80036ce:	f7fd ff39 	bl	8001544 <HAL_GetTick>
 80036d2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80036d4:	e009      	b.n	80036ea <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036d6:	f7fd ff35 	bl	8001544 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d902      	bls.n	80036ea <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	f000 bdba 	b.w	800425e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80036ea:	4b12      	ldr	r3, [pc, #72]	; (8003734 <HAL_RCC_OscConfig+0x280>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0304 	and.w	r3, r3, #4
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d0ef      	beq.n	80036d6 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80036f6:	4b0f      	ldr	r3, [pc, #60]	; (8003734 <HAL_RCC_OscConfig+0x280>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	4a0e      	ldr	r2, [pc, #56]	; (8003734 <HAL_RCC_OscConfig+0x280>)
 80036fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003700:	6093      	str	r3, [r2, #8]
 8003702:	4b0c      	ldr	r3, [pc, #48]	; (8003734 <HAL_RCC_OscConfig+0x280>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370e:	4909      	ldr	r1, [pc, #36]	; (8003734 <HAL_RCC_OscConfig+0x280>)
 8003710:	4313      	orrs	r3, r2
 8003712:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800371c:	d30e      	bcc.n	800373c <HAL_RCC_OscConfig+0x288>
 800371e:	4b05      	ldr	r3, [pc, #20]	; (8003734 <HAL_RCC_OscConfig+0x280>)
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	f023 021f 	bic.w	r2, r3, #31
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	4902      	ldr	r1, [pc, #8]	; (8003734 <HAL_RCC_OscConfig+0x280>)
 800372c:	4313      	orrs	r3, r2
 800372e:	60cb      	str	r3, [r1, #12]
 8003730:	e04a      	b.n	80037c8 <HAL_RCC_OscConfig+0x314>
 8003732:	bf00      	nop
 8003734:	46020c00 	.word	0x46020c00
 8003738:	20000008 	.word	0x20000008
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003740:	2b00      	cmp	r3, #0
 8003742:	da0a      	bge.n	800375a <HAL_RCC_OscConfig+0x2a6>
 8003744:	4b98      	ldr	r3, [pc, #608]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	015b      	lsls	r3, r3, #5
 8003752:	4995      	ldr	r1, [pc, #596]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 8003754:	4313      	orrs	r3, r2
 8003756:	60cb      	str	r3, [r1, #12]
 8003758:	e036      	b.n	80037c8 <HAL_RCC_OscConfig+0x314>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003762:	d30a      	bcc.n	800377a <HAL_RCC_OscConfig+0x2c6>
 8003764:	4b90      	ldr	r3, [pc, #576]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	029b      	lsls	r3, r3, #10
 8003772:	498d      	ldr	r1, [pc, #564]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 8003774:	4313      	orrs	r3, r2
 8003776:	60cb      	str	r3, [r1, #12]
 8003778:	e026      	b.n	80037c8 <HAL_RCC_OscConfig+0x314>
 800377a:	4b8b      	ldr	r3, [pc, #556]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	03db      	lsls	r3, r3, #15
 8003788:	4987      	ldr	r1, [pc, #540]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 800378a:	4313      	orrs	r3, r2
 800378c:	60cb      	str	r3, [r1, #12]
 800378e:	e01b      	b.n	80037c8 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003790:	4b85      	ldr	r3, [pc, #532]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a84      	ldr	r2, [pc, #528]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 8003796:	f023 0301 	bic.w	r3, r3, #1
 800379a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800379c:	f7fd fed2 	bl	8001544 <HAL_GetTick>
 80037a0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80037a2:	e009      	b.n	80037b8 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037a4:	f7fd fece 	bl	8001544 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d902      	bls.n	80037b8 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	f000 bd53 	b.w	800425e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80037b8:	4b7b      	ldr	r3, [pc, #492]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1ef      	bne.n	80037a4 <HAL_RCC_OscConfig+0x2f0>
 80037c4:	e000      	b.n	80037c8 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80037c6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 808b 	beq.w	80038ec <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80037d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d8:	2b08      	cmp	r3, #8
 80037da:	d005      	beq.n	80037e8 <HAL_RCC_OscConfig+0x334>
 80037dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037de:	2b0c      	cmp	r3, #12
 80037e0:	d109      	bne.n	80037f6 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80037e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e4:	2b03      	cmp	r3, #3
 80037e6:	d106      	bne.n	80037f6 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d17d      	bne.n	80038ec <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	f000 bd34 	b.w	800425e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037fe:	d106      	bne.n	800380e <HAL_RCC_OscConfig+0x35a>
 8003800:	4b69      	ldr	r3, [pc, #420]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a68      	ldr	r2, [pc, #416]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 8003806:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800380a:	6013      	str	r3, [r2, #0]
 800380c:	e041      	b.n	8003892 <HAL_RCC_OscConfig+0x3de>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003816:	d112      	bne.n	800383e <HAL_RCC_OscConfig+0x38a>
 8003818:	4b63      	ldr	r3, [pc, #396]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a62      	ldr	r2, [pc, #392]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 800381e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003822:	6013      	str	r3, [r2, #0]
 8003824:	4b60      	ldr	r3, [pc, #384]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a5f      	ldr	r2, [pc, #380]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 800382a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800382e:	6013      	str	r3, [r2, #0]
 8003830:	4b5d      	ldr	r3, [pc, #372]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a5c      	ldr	r2, [pc, #368]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 8003836:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800383a:	6013      	str	r3, [r2, #0]
 800383c:	e029      	b.n	8003892 <HAL_RCC_OscConfig+0x3de>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003846:	d112      	bne.n	800386e <HAL_RCC_OscConfig+0x3ba>
 8003848:	4b57      	ldr	r3, [pc, #348]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a56      	ldr	r2, [pc, #344]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 800384e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003852:	6013      	str	r3, [r2, #0]
 8003854:	4b54      	ldr	r3, [pc, #336]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a53      	ldr	r2, [pc, #332]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 800385a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800385e:	6013      	str	r3, [r2, #0]
 8003860:	4b51      	ldr	r3, [pc, #324]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a50      	ldr	r2, [pc, #320]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 8003866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800386a:	6013      	str	r3, [r2, #0]
 800386c:	e011      	b.n	8003892 <HAL_RCC_OscConfig+0x3de>
 800386e:	4b4e      	ldr	r3, [pc, #312]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a4d      	ldr	r2, [pc, #308]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 8003874:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003878:	6013      	str	r3, [r2, #0]
 800387a:	4b4b      	ldr	r3, [pc, #300]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a4a      	ldr	r2, [pc, #296]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 8003880:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003884:	6013      	str	r3, [r2, #0]
 8003886:	4b48      	ldr	r3, [pc, #288]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a47      	ldr	r2, [pc, #284]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 800388c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003890:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d014      	beq.n	80038c4 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800389a:	f7fd fe53 	bl	8001544 <HAL_GetTick>
 800389e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038a0:	e009      	b.n	80038b6 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038a2:	f7fd fe4f 	bl	8001544 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b64      	cmp	r3, #100	; 0x64
 80038ae:	d902      	bls.n	80038b6 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	f000 bcd4 	b.w	800425e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038b6:	4b3c      	ldr	r3, [pc, #240]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d0ef      	beq.n	80038a2 <HAL_RCC_OscConfig+0x3ee>
 80038c2:	e013      	b.n	80038ec <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80038c4:	f7fd fe3e 	bl	8001544 <HAL_GetTick>
 80038c8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038ca:	e009      	b.n	80038e0 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038cc:	f7fd fe3a 	bl	8001544 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b64      	cmp	r3, #100	; 0x64
 80038d8:	d902      	bls.n	80038e0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	f000 bcbf 	b.w	800425e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038e0:	4b31      	ldr	r3, [pc, #196]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1ef      	bne.n	80038cc <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0302 	and.w	r3, r3, #2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d05f      	beq.n	80039b8 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80038f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fa:	2b04      	cmp	r3, #4
 80038fc:	d005      	beq.n	800390a <HAL_RCC_OscConfig+0x456>
 80038fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003900:	2b0c      	cmp	r3, #12
 8003902:	d114      	bne.n	800392e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003906:	2b02      	cmp	r3, #2
 8003908:	d111      	bne.n	800392e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d102      	bne.n	8003918 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	f000 bca3 	b.w	800425e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003918:	4b23      	ldr	r3, [pc, #140]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	041b      	lsls	r3, r3, #16
 8003926:	4920      	ldr	r1, [pc, #128]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 8003928:	4313      	orrs	r3, r2
 800392a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800392c:	e044      	b.n	80039b8 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d024      	beq.n	8003980 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8003936:	4b1c      	ldr	r3, [pc, #112]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a1b      	ldr	r2, [pc, #108]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 800393c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003940:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003942:	f7fd fdff 	bl	8001544 <HAL_GetTick>
 8003946:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003948:	e009      	b.n	800395e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800394a:	f7fd fdfb 	bl	8001544 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d902      	bls.n	800395e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	f000 bc80 	b.w	800425e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800395e:	4b12      	ldr	r3, [pc, #72]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003966:	2b00      	cmp	r3, #0
 8003968:	d0ef      	beq.n	800394a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800396a:	4b0f      	ldr	r3, [pc, #60]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	041b      	lsls	r3, r3, #16
 8003978:	490b      	ldr	r1, [pc, #44]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 800397a:	4313      	orrs	r3, r2
 800397c:	610b      	str	r3, [r1, #16]
 800397e:	e01b      	b.n	80039b8 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003980:	4b09      	ldr	r3, [pc, #36]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a08      	ldr	r2, [pc, #32]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 8003986:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800398a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800398c:	f7fd fdda 	bl	8001544 <HAL_GetTick>
 8003990:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003992:	e00b      	b.n	80039ac <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003994:	f7fd fdd6 	bl	8001544 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d904      	bls.n	80039ac <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	f000 bc5b 	b.w	800425e <HAL_RCC_OscConfig+0xdaa>
 80039a8:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039ac:	4baf      	ldr	r3, [pc, #700]	; (8003c6c <HAL_RCC_OscConfig+0x7b8>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1ed      	bne.n	8003994 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0308 	and.w	r3, r3, #8
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 80c8 	beq.w	8003b56 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80039c6:	2300      	movs	r3, #0
 80039c8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039cc:	4ba7      	ldr	r3, [pc, #668]	; (8003c6c <HAL_RCC_OscConfig+0x7b8>)
 80039ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039d2:	f003 0304 	and.w	r3, r3, #4
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d111      	bne.n	80039fe <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039da:	4ba4      	ldr	r3, [pc, #656]	; (8003c6c <HAL_RCC_OscConfig+0x7b8>)
 80039dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039e0:	4aa2      	ldr	r2, [pc, #648]	; (8003c6c <HAL_RCC_OscConfig+0x7b8>)
 80039e2:	f043 0304 	orr.w	r3, r3, #4
 80039e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80039ea:	4ba0      	ldr	r3, [pc, #640]	; (8003c6c <HAL_RCC_OscConfig+0x7b8>)
 80039ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	617b      	str	r3, [r7, #20]
 80039f6:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80039f8:	2301      	movs	r3, #1
 80039fa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80039fe:	4b9c      	ldr	r3, [pc, #624]	; (8003c70 <HAL_RCC_OscConfig+0x7bc>)
 8003a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d119      	bne.n	8003a3e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003a0a:	4b99      	ldr	r3, [pc, #612]	; (8003c70 <HAL_RCC_OscConfig+0x7bc>)
 8003a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0e:	4a98      	ldr	r2, [pc, #608]	; (8003c70 <HAL_RCC_OscConfig+0x7bc>)
 8003a10:	f043 0301 	orr.w	r3, r3, #1
 8003a14:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a16:	f7fd fd95 	bl	8001544 <HAL_GetTick>
 8003a1a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003a1c:	e009      	b.n	8003a32 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a1e:	f7fd fd91 	bl	8001544 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d902      	bls.n	8003a32 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	f000 bc16 	b.w	800425e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003a32:	4b8f      	ldr	r3, [pc, #572]	; (8003c70 <HAL_RCC_OscConfig+0x7bc>)
 8003a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d0ef      	beq.n	8003a1e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d05f      	beq.n	8003b06 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8003a46:	4b89      	ldr	r3, [pc, #548]	; (8003c6c <HAL_RCC_OscConfig+0x7b8>)
 8003a48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a4c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699a      	ldr	r2, [r3, #24]
 8003a52:	6a3b      	ldr	r3, [r7, #32]
 8003a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d037      	beq.n	8003acc <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003a5c:	6a3b      	ldr	r3, [r7, #32]
 8003a5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d006      	beq.n	8003a74 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8003a66:	6a3b      	ldr	r3, [r7, #32]
 8003a68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e3f4      	b.n	800425e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8003a74:	6a3b      	ldr	r3, [r7, #32]
 8003a76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d01b      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8003a7e:	4b7b      	ldr	r3, [pc, #492]	; (8003c6c <HAL_RCC_OscConfig+0x7b8>)
 8003a80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a84:	4a79      	ldr	r2, [pc, #484]	; (8003c6c <HAL_RCC_OscConfig+0x7b8>)
 8003a86:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8003a8a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8003a8e:	f7fd fd59 	bl	8001544 <HAL_GetTick>
 8003a92:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003a94:	e008      	b.n	8003aa8 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a96:	f7fd fd55 	bl	8001544 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b05      	cmp	r3, #5
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e3da      	b.n	800425e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003aa8:	4b70      	ldr	r3, [pc, #448]	; (8003c6c <HAL_RCC_OscConfig+0x7b8>)
 8003aaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003aae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1ef      	bne.n	8003a96 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8003ab6:	4b6d      	ldr	r3, [pc, #436]	; (8003c6c <HAL_RCC_OscConfig+0x7b8>)
 8003ab8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003abc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	4969      	ldr	r1, [pc, #420]	; (8003c6c <HAL_RCC_OscConfig+0x7b8>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8003acc:	4b67      	ldr	r3, [pc, #412]	; (8003c6c <HAL_RCC_OscConfig+0x7b8>)
 8003ace:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ad2:	4a66      	ldr	r2, [pc, #408]	; (8003c6c <HAL_RCC_OscConfig+0x7b8>)
 8003ad4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ad8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8003adc:	f7fd fd32 	bl	8001544 <HAL_GetTick>
 8003ae0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ae4:	f7fd fd2e 	bl	8001544 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b05      	cmp	r3, #5
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e3b3      	b.n	800425e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003af6:	4b5d      	ldr	r3, [pc, #372]	; (8003c6c <HAL_RCC_OscConfig+0x7b8>)
 8003af8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003afc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0ef      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x630>
 8003b04:	e01b      	b.n	8003b3e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8003b06:	4b59      	ldr	r3, [pc, #356]	; (8003c6c <HAL_RCC_OscConfig+0x7b8>)
 8003b08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b0c:	4a57      	ldr	r2, [pc, #348]	; (8003c6c <HAL_RCC_OscConfig+0x7b8>)
 8003b0e:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8003b12:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8003b16:	f7fd fd15 	bl	8001544 <HAL_GetTick>
 8003b1a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b1e:	f7fd fd11 	bl	8001544 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b05      	cmp	r3, #5
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e396      	b.n	800425e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003b30:	4b4e      	ldr	r3, [pc, #312]	; (8003c6c <HAL_RCC_OscConfig+0x7b8>)
 8003b32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1ef      	bne.n	8003b1e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b3e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d107      	bne.n	8003b56 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b46:	4b49      	ldr	r3, [pc, #292]	; (8003c6c <HAL_RCC_OscConfig+0x7b8>)
 8003b48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b4c:	4a47      	ldr	r2, [pc, #284]	; (8003c6c <HAL_RCC_OscConfig+0x7b8>)
 8003b4e:	f023 0304 	bic.w	r3, r3, #4
 8003b52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0304 	and.w	r3, r3, #4
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f000 8111 	beq.w	8003d86 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8003b64:	2300      	movs	r3, #0
 8003b66:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b6a:	4b40      	ldr	r3, [pc, #256]	; (8003c6c <HAL_RCC_OscConfig+0x7b8>)
 8003b6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b70:	f003 0304 	and.w	r3, r3, #4
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d111      	bne.n	8003b9c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b78:	4b3c      	ldr	r3, [pc, #240]	; (8003c6c <HAL_RCC_OscConfig+0x7b8>)
 8003b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b7e:	4a3b      	ldr	r2, [pc, #236]	; (8003c6c <HAL_RCC_OscConfig+0x7b8>)
 8003b80:	f043 0304 	orr.w	r3, r3, #4
 8003b84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003b88:	4b38      	ldr	r3, [pc, #224]	; (8003c6c <HAL_RCC_OscConfig+0x7b8>)
 8003b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b8e:	f003 0304 	and.w	r3, r3, #4
 8003b92:	613b      	str	r3, [r7, #16]
 8003b94:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8003b96:	2301      	movs	r3, #1
 8003b98:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003b9c:	4b34      	ldr	r3, [pc, #208]	; (8003c70 <HAL_RCC_OscConfig+0x7bc>)
 8003b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d118      	bne.n	8003bda <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003ba8:	4b31      	ldr	r3, [pc, #196]	; (8003c70 <HAL_RCC_OscConfig+0x7bc>)
 8003baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bac:	4a30      	ldr	r2, [pc, #192]	; (8003c70 <HAL_RCC_OscConfig+0x7bc>)
 8003bae:	f043 0301 	orr.w	r3, r3, #1
 8003bb2:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bb4:	f7fd fcc6 	bl	8001544 <HAL_GetTick>
 8003bb8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bbc:	f7fd fcc2 	bl	8001544 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e347      	b.n	800425e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003bce:	4b28      	ldr	r3, [pc, #160]	; (8003c70 <HAL_RCC_OscConfig+0x7bc>)
 8003bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d0f0      	beq.n	8003bbc <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d01f      	beq.n	8003c26 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 0304 	and.w	r3, r3, #4
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d010      	beq.n	8003c14 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003bf2:	4b1e      	ldr	r3, [pc, #120]	; (8003c6c <HAL_RCC_OscConfig+0x7b8>)
 8003bf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003bf8:	4a1c      	ldr	r2, [pc, #112]	; (8003c6c <HAL_RCC_OscConfig+0x7b8>)
 8003bfa:	f043 0304 	orr.w	r3, r3, #4
 8003bfe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003c02:	4b1a      	ldr	r3, [pc, #104]	; (8003c6c <HAL_RCC_OscConfig+0x7b8>)
 8003c04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c08:	4a18      	ldr	r2, [pc, #96]	; (8003c6c <HAL_RCC_OscConfig+0x7b8>)
 8003c0a:	f043 0301 	orr.w	r3, r3, #1
 8003c0e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003c12:	e018      	b.n	8003c46 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003c14:	4b15      	ldr	r3, [pc, #84]	; (8003c6c <HAL_RCC_OscConfig+0x7b8>)
 8003c16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c1a:	4a14      	ldr	r2, [pc, #80]	; (8003c6c <HAL_RCC_OscConfig+0x7b8>)
 8003c1c:	f043 0301 	orr.w	r3, r3, #1
 8003c20:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003c24:	e00f      	b.n	8003c46 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003c26:	4b11      	ldr	r3, [pc, #68]	; (8003c6c <HAL_RCC_OscConfig+0x7b8>)
 8003c28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c2c:	4a0f      	ldr	r2, [pc, #60]	; (8003c6c <HAL_RCC_OscConfig+0x7b8>)
 8003c2e:	f023 0301 	bic.w	r3, r3, #1
 8003c32:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003c36:	4b0d      	ldr	r3, [pc, #52]	; (8003c6c <HAL_RCC_OscConfig+0x7b8>)
 8003c38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c3c:	4a0b      	ldr	r2, [pc, #44]	; (8003c6c <HAL_RCC_OscConfig+0x7b8>)
 8003c3e:	f023 0304 	bic.w	r3, r3, #4
 8003c42:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d057      	beq.n	8003cfe <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8003c4e:	f7fd fc79 	bl	8001544 <HAL_GetTick>
 8003c52:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c54:	e00e      	b.n	8003c74 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c56:	f7fd fc75 	bl	8001544 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d905      	bls.n	8003c74 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e2f8      	b.n	800425e <HAL_RCC_OscConfig+0xdaa>
 8003c6c:	46020c00 	.word	0x46020c00
 8003c70:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c74:	4b9c      	ldr	r3, [pc, #624]	; (8003ee8 <HAL_RCC_OscConfig+0xa34>)
 8003c76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d0e9      	beq.n	8003c56 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d01b      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003c8e:	4b96      	ldr	r3, [pc, #600]	; (8003ee8 <HAL_RCC_OscConfig+0xa34>)
 8003c90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c94:	4a94      	ldr	r2, [pc, #592]	; (8003ee8 <HAL_RCC_OscConfig+0xa34>)
 8003c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c9a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003c9e:	e00a      	b.n	8003cb6 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ca0:	f7fd fc50 	bl	8001544 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e2d3      	b.n	800425e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003cb6:	4b8c      	ldr	r3, [pc, #560]	; (8003ee8 <HAL_RCC_OscConfig+0xa34>)
 8003cb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003cbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d0ed      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x7ec>
 8003cc4:	e053      	b.n	8003d6e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003cc6:	4b88      	ldr	r3, [pc, #544]	; (8003ee8 <HAL_RCC_OscConfig+0xa34>)
 8003cc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ccc:	4a86      	ldr	r2, [pc, #536]	; (8003ee8 <HAL_RCC_OscConfig+0xa34>)
 8003cce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cd2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003cd6:	e00a      	b.n	8003cee <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cd8:	f7fd fc34 	bl	8001544 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e2b7      	b.n	800425e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003cee:	4b7e      	ldr	r3, [pc, #504]	; (8003ee8 <HAL_RCC_OscConfig+0xa34>)
 8003cf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003cf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1ed      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x824>
 8003cfc:	e037      	b.n	8003d6e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8003cfe:	f7fd fc21 	bl	8001544 <HAL_GetTick>
 8003d02:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d04:	e00a      	b.n	8003d1c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d06:	f7fd fc1d 	bl	8001544 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d901      	bls.n	8003d1c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e2a0      	b.n	800425e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d1c:	4b72      	ldr	r3, [pc, #456]	; (8003ee8 <HAL_RCC_OscConfig+0xa34>)
 8003d1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1ed      	bne.n	8003d06 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003d2a:	4b6f      	ldr	r3, [pc, #444]	; (8003ee8 <HAL_RCC_OscConfig+0xa34>)
 8003d2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d01a      	beq.n	8003d6e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003d38:	4b6b      	ldr	r3, [pc, #428]	; (8003ee8 <HAL_RCC_OscConfig+0xa34>)
 8003d3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d3e:	4a6a      	ldr	r2, [pc, #424]	; (8003ee8 <HAL_RCC_OscConfig+0xa34>)
 8003d40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d44:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003d48:	e00a      	b.n	8003d60 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d4a:	f7fd fbfb 	bl	8001544 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e27e      	b.n	800425e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003d60:	4b61      	ldr	r3, [pc, #388]	; (8003ee8 <HAL_RCC_OscConfig+0xa34>)
 8003d62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1ed      	bne.n	8003d4a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d6e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d107      	bne.n	8003d86 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d76:	4b5c      	ldr	r3, [pc, #368]	; (8003ee8 <HAL_RCC_OscConfig+0xa34>)
 8003d78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d7c:	4a5a      	ldr	r2, [pc, #360]	; (8003ee8 <HAL_RCC_OscConfig+0xa34>)
 8003d7e:	f023 0304 	bic.w	r3, r3, #4
 8003d82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0320 	and.w	r3, r3, #32
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d036      	beq.n	8003e00 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d019      	beq.n	8003dce <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8003d9a:	4b53      	ldr	r3, [pc, #332]	; (8003ee8 <HAL_RCC_OscConfig+0xa34>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a52      	ldr	r2, [pc, #328]	; (8003ee8 <HAL_RCC_OscConfig+0xa34>)
 8003da0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003da4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003da6:	f7fd fbcd 	bl	8001544 <HAL_GetTick>
 8003daa:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003dac:	e008      	b.n	8003dc0 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003dae:	f7fd fbc9 	bl	8001544 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e24e      	b.n	800425e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003dc0:	4b49      	ldr	r3, [pc, #292]	; (8003ee8 <HAL_RCC_OscConfig+0xa34>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0f0      	beq.n	8003dae <HAL_RCC_OscConfig+0x8fa>
 8003dcc:	e018      	b.n	8003e00 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8003dce:	4b46      	ldr	r3, [pc, #280]	; (8003ee8 <HAL_RCC_OscConfig+0xa34>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a45      	ldr	r2, [pc, #276]	; (8003ee8 <HAL_RCC_OscConfig+0xa34>)
 8003dd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dd8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003dda:	f7fd fbb3 	bl	8001544 <HAL_GetTick>
 8003dde:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003de0:	e008      	b.n	8003df4 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003de2:	f7fd fbaf 	bl	8001544 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e234      	b.n	800425e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003df4:	4b3c      	ldr	r3, [pc, #240]	; (8003ee8 <HAL_RCC_OscConfig+0xa34>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1f0      	bne.n	8003de2 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d036      	beq.n	8003e7a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d019      	beq.n	8003e48 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8003e14:	4b34      	ldr	r3, [pc, #208]	; (8003ee8 <HAL_RCC_OscConfig+0xa34>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a33      	ldr	r2, [pc, #204]	; (8003ee8 <HAL_RCC_OscConfig+0xa34>)
 8003e1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e1e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003e20:	f7fd fb90 	bl	8001544 <HAL_GetTick>
 8003e24:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003e28:	f7fd fb8c 	bl	8001544 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e211      	b.n	800425e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003e3a:	4b2b      	ldr	r3, [pc, #172]	; (8003ee8 <HAL_RCC_OscConfig+0xa34>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d0f0      	beq.n	8003e28 <HAL_RCC_OscConfig+0x974>
 8003e46:	e018      	b.n	8003e7a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8003e48:	4b27      	ldr	r3, [pc, #156]	; (8003ee8 <HAL_RCC_OscConfig+0xa34>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a26      	ldr	r2, [pc, #152]	; (8003ee8 <HAL_RCC_OscConfig+0xa34>)
 8003e4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e52:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003e54:	f7fd fb76 	bl	8001544 <HAL_GetTick>
 8003e58:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003e5c:	f7fd fb72 	bl	8001544 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e1f7      	b.n	800425e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003e6e:	4b1e      	ldr	r3, [pc, #120]	; (8003ee8 <HAL_RCC_OscConfig+0xa34>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1f0      	bne.n	8003e5c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d07f      	beq.n	8003f86 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d062      	beq.n	8003f54 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8003e8e:	4b16      	ldr	r3, [pc, #88]	; (8003ee8 <HAL_RCC_OscConfig+0xa34>)
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	4a15      	ldr	r2, [pc, #84]	; (8003ee8 <HAL_RCC_OscConfig+0xa34>)
 8003e94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e98:	6093      	str	r3, [r2, #8]
 8003e9a:	4b13      	ldr	r3, [pc, #76]	; (8003ee8 <HAL_RCC_OscConfig+0xa34>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea6:	4910      	ldr	r1, [pc, #64]	; (8003ee8 <HAL_RCC_OscConfig+0xa34>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003eb4:	d309      	bcc.n	8003eca <HAL_RCC_OscConfig+0xa16>
 8003eb6:	4b0c      	ldr	r3, [pc, #48]	; (8003ee8 <HAL_RCC_OscConfig+0xa34>)
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	f023 021f 	bic.w	r2, r3, #31
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	4909      	ldr	r1, [pc, #36]	; (8003ee8 <HAL_RCC_OscConfig+0xa34>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	60cb      	str	r3, [r1, #12]
 8003ec8:	e02a      	b.n	8003f20 <HAL_RCC_OscConfig+0xa6c>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	da0c      	bge.n	8003eec <HAL_RCC_OscConfig+0xa38>
 8003ed2:	4b05      	ldr	r3, [pc, #20]	; (8003ee8 <HAL_RCC_OscConfig+0xa34>)
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	015b      	lsls	r3, r3, #5
 8003ee0:	4901      	ldr	r1, [pc, #4]	; (8003ee8 <HAL_RCC_OscConfig+0xa34>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	60cb      	str	r3, [r1, #12]
 8003ee6:	e01b      	b.n	8003f20 <HAL_RCC_OscConfig+0xa6c>
 8003ee8:	46020c00 	.word	0x46020c00
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef4:	d30a      	bcc.n	8003f0c <HAL_RCC_OscConfig+0xa58>
 8003ef6:	4ba1      	ldr	r3, [pc, #644]	; (800417c <HAL_RCC_OscConfig+0xcc8>)
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	029b      	lsls	r3, r3, #10
 8003f04:	499d      	ldr	r1, [pc, #628]	; (800417c <HAL_RCC_OscConfig+0xcc8>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	60cb      	str	r3, [r1, #12]
 8003f0a:	e009      	b.n	8003f20 <HAL_RCC_OscConfig+0xa6c>
 8003f0c:	4b9b      	ldr	r3, [pc, #620]	; (800417c <HAL_RCC_OscConfig+0xcc8>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	03db      	lsls	r3, r3, #15
 8003f1a:	4998      	ldr	r1, [pc, #608]	; (800417c <HAL_RCC_OscConfig+0xcc8>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8003f20:	4b96      	ldr	r3, [pc, #600]	; (800417c <HAL_RCC_OscConfig+0xcc8>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a95      	ldr	r2, [pc, #596]	; (800417c <HAL_RCC_OscConfig+0xcc8>)
 8003f26:	f043 0310 	orr.w	r3, r3, #16
 8003f2a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003f2c:	f7fd fb0a 	bl	8001544 <HAL_GetTick>
 8003f30:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003f34:	f7fd fb06 	bl	8001544 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e18b      	b.n	800425e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003f46:	4b8d      	ldr	r3, [pc, #564]	; (800417c <HAL_RCC_OscConfig+0xcc8>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0320 	and.w	r3, r3, #32
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d0f0      	beq.n	8003f34 <HAL_RCC_OscConfig+0xa80>
 8003f52:	e018      	b.n	8003f86 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8003f54:	4b89      	ldr	r3, [pc, #548]	; (800417c <HAL_RCC_OscConfig+0xcc8>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a88      	ldr	r2, [pc, #544]	; (800417c <HAL_RCC_OscConfig+0xcc8>)
 8003f5a:	f023 0310 	bic.w	r3, r3, #16
 8003f5e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003f60:	f7fd faf0 	bl	8001544 <HAL_GetTick>
 8003f64:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003f68:	f7fd faec 	bl	8001544 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e171      	b.n	800425e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003f7a:	4b80      	ldr	r3, [pc, #512]	; (800417c <HAL_RCC_OscConfig+0xcc8>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0320 	and.w	r3, r3, #32
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1f0      	bne.n	8003f68 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f000 8166 	beq.w	800425c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8003f90:	2300      	movs	r3, #0
 8003f92:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f96:	4b79      	ldr	r3, [pc, #484]	; (800417c <HAL_RCC_OscConfig+0xcc8>)
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	f003 030c 	and.w	r3, r3, #12
 8003f9e:	2b0c      	cmp	r3, #12
 8003fa0:	f000 80f2 	beq.w	8004188 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	f040 80c5 	bne.w	8004138 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003fae:	4b73      	ldr	r3, [pc, #460]	; (800417c <HAL_RCC_OscConfig+0xcc8>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a72      	ldr	r2, [pc, #456]	; (800417c <HAL_RCC_OscConfig+0xcc8>)
 8003fb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fb8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003fba:	f7fd fac3 	bl	8001544 <HAL_GetTick>
 8003fbe:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003fc0:	e008      	b.n	8003fd4 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fc2:	f7fd fabf 	bl	8001544 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e144      	b.n	800425e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003fd4:	4b69      	ldr	r3, [pc, #420]	; (800417c <HAL_RCC_OscConfig+0xcc8>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d1f0      	bne.n	8003fc2 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fe0:	4b66      	ldr	r3, [pc, #408]	; (800417c <HAL_RCC_OscConfig+0xcc8>)
 8003fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fe6:	f003 0304 	and.w	r3, r3, #4
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d111      	bne.n	8004012 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8003fee:	4b63      	ldr	r3, [pc, #396]	; (800417c <HAL_RCC_OscConfig+0xcc8>)
 8003ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ff4:	4a61      	ldr	r2, [pc, #388]	; (800417c <HAL_RCC_OscConfig+0xcc8>)
 8003ff6:	f043 0304 	orr.w	r3, r3, #4
 8003ffa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003ffe:	4b5f      	ldr	r3, [pc, #380]	; (800417c <HAL_RCC_OscConfig+0xcc8>)
 8004000:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004004:	f003 0304 	and.w	r3, r3, #4
 8004008:	60fb      	str	r3, [r7, #12]
 800400a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800400c:	2301      	movs	r3, #1
 800400e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8004012:	4b5b      	ldr	r3, [pc, #364]	; (8004180 <HAL_RCC_OscConfig+0xccc>)
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800401a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800401e:	d102      	bne.n	8004026 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8004020:	2301      	movs	r3, #1
 8004022:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004026:	4b56      	ldr	r3, [pc, #344]	; (8004180 <HAL_RCC_OscConfig+0xccc>)
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	4a55      	ldr	r2, [pc, #340]	; (8004180 <HAL_RCC_OscConfig+0xccc>)
 800402c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004030:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8004032:	4b52      	ldr	r3, [pc, #328]	; (800417c <HAL_RCC_OscConfig+0xcc8>)
 8004034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004036:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800403a:	f023 0303 	bic.w	r3, r3, #3
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004046:	3a01      	subs	r2, #1
 8004048:	0212      	lsls	r2, r2, #8
 800404a:	4311      	orrs	r1, r2
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004050:	430a      	orrs	r2, r1
 8004052:	494a      	ldr	r1, [pc, #296]	; (800417c <HAL_RCC_OscConfig+0xcc8>)
 8004054:	4313      	orrs	r3, r2
 8004056:	628b      	str	r3, [r1, #40]	; 0x28
 8004058:	4b48      	ldr	r3, [pc, #288]	; (800417c <HAL_RCC_OscConfig+0xcc8>)
 800405a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800405c:	4b49      	ldr	r3, [pc, #292]	; (8004184 <HAL_RCC_OscConfig+0xcd0>)
 800405e:	4013      	ands	r3, r2
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004064:	3a01      	subs	r2, #1
 8004066:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800406e:	3a01      	subs	r2, #1
 8004070:	0252      	lsls	r2, r2, #9
 8004072:	b292      	uxth	r2, r2
 8004074:	4311      	orrs	r1, r2
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800407a:	3a01      	subs	r2, #1
 800407c:	0412      	lsls	r2, r2, #16
 800407e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004082:	4311      	orrs	r1, r2
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004088:	3a01      	subs	r2, #1
 800408a:	0612      	lsls	r2, r2, #24
 800408c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004090:	430a      	orrs	r2, r1
 8004092:	493a      	ldr	r1, [pc, #232]	; (800417c <HAL_RCC_OscConfig+0xcc8>)
 8004094:	4313      	orrs	r3, r2
 8004096:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004098:	4b38      	ldr	r3, [pc, #224]	; (800417c <HAL_RCC_OscConfig+0xcc8>)
 800409a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409c:	4a37      	ldr	r2, [pc, #220]	; (800417c <HAL_RCC_OscConfig+0xcc8>)
 800409e:	f023 0310 	bic.w	r3, r3, #16
 80040a2:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a8:	4a34      	ldr	r2, [pc, #208]	; (800417c <HAL_RCC_OscConfig+0xcc8>)
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80040ae:	4b33      	ldr	r3, [pc, #204]	; (800417c <HAL_RCC_OscConfig+0xcc8>)
 80040b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b2:	4a32      	ldr	r2, [pc, #200]	; (800417c <HAL_RCC_OscConfig+0xcc8>)
 80040b4:	f043 0310 	orr.w	r3, r3, #16
 80040b8:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80040ba:	4b30      	ldr	r3, [pc, #192]	; (800417c <HAL_RCC_OscConfig+0xcc8>)
 80040bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040be:	f023 020c 	bic.w	r2, r3, #12
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c6:	492d      	ldr	r1, [pc, #180]	; (800417c <HAL_RCC_OscConfig+0xcc8>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 80040cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d105      	bne.n	80040e0 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80040d4:	4b2a      	ldr	r3, [pc, #168]	; (8004180 <HAL_RCC_OscConfig+0xccc>)
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	4a29      	ldr	r2, [pc, #164]	; (8004180 <HAL_RCC_OscConfig+0xccc>)
 80040da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040de:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80040e0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d107      	bne.n	80040f8 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80040e8:	4b24      	ldr	r3, [pc, #144]	; (800417c <HAL_RCC_OscConfig+0xcc8>)
 80040ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ee:	4a23      	ldr	r2, [pc, #140]	; (800417c <HAL_RCC_OscConfig+0xcc8>)
 80040f0:	f023 0304 	bic.w	r3, r3, #4
 80040f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80040f8:	4b20      	ldr	r3, [pc, #128]	; (800417c <HAL_RCC_OscConfig+0xcc8>)
 80040fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fc:	4a1f      	ldr	r2, [pc, #124]	; (800417c <HAL_RCC_OscConfig+0xcc8>)
 80040fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004102:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8004104:	4b1d      	ldr	r3, [pc, #116]	; (800417c <HAL_RCC_OscConfig+0xcc8>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a1c      	ldr	r2, [pc, #112]	; (800417c <HAL_RCC_OscConfig+0xcc8>)
 800410a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800410e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004110:	f7fd fa18 	bl	8001544 <HAL_GetTick>
 8004114:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004116:	e008      	b.n	800412a <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004118:	f7fd fa14 	bl	8001544 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e099      	b.n	800425e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800412a:	4b14      	ldr	r3, [pc, #80]	; (800417c <HAL_RCC_OscConfig+0xcc8>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d0f0      	beq.n	8004118 <HAL_RCC_OscConfig+0xc64>
 8004136:	e091      	b.n	800425c <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004138:	4b10      	ldr	r3, [pc, #64]	; (800417c <HAL_RCC_OscConfig+0xcc8>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a0f      	ldr	r2, [pc, #60]	; (800417c <HAL_RCC_OscConfig+0xcc8>)
 800413e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004142:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004144:	f7fd f9fe 	bl	8001544 <HAL_GetTick>
 8004148:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800414c:	f7fd f9fa 	bl	8001544 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e07f      	b.n	800425e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800415e:	4b07      	ldr	r3, [pc, #28]	; (800417c <HAL_RCC_OscConfig+0xcc8>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1f0      	bne.n	800414c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800416a:	4b04      	ldr	r3, [pc, #16]	; (800417c <HAL_RCC_OscConfig+0xcc8>)
 800416c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416e:	4a03      	ldr	r2, [pc, #12]	; (800417c <HAL_RCC_OscConfig+0xcc8>)
 8004170:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8004174:	f023 0303 	bic.w	r3, r3, #3
 8004178:	6293      	str	r3, [r2, #40]	; 0x28
 800417a:	e06f      	b.n	800425c <HAL_RCC_OscConfig+0xda8>
 800417c:	46020c00 	.word	0x46020c00
 8004180:	46020800 	.word	0x46020800
 8004184:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004188:	4b37      	ldr	r3, [pc, #220]	; (8004268 <HAL_RCC_OscConfig+0xdb4>)
 800418a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800418e:	4b36      	ldr	r3, [pc, #216]	; (8004268 <HAL_RCC_OscConfig+0xdb4>)
 8004190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004192:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004198:	2b01      	cmp	r3, #1
 800419a:	d039      	beq.n	8004210 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	f003 0203 	and.w	r2, r3, #3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d132      	bne.n	8004210 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	0a1b      	lsrs	r3, r3, #8
 80041ae:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d129      	bne.n	8004210 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d122      	bne.n	8004210 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041d4:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d11a      	bne.n	8004210 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	0a5b      	lsrs	r3, r3, #9
 80041de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041e6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d111      	bne.n	8004210 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	0c1b      	lsrs	r3, r3, #16
 80041f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041f8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d108      	bne.n	8004210 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	0e1b      	lsrs	r3, r3, #24
 8004202:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800420c:	429a      	cmp	r2, r3
 800420e:	d001      	beq.n	8004214 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e024      	b.n	800425e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004214:	4b14      	ldr	r3, [pc, #80]	; (8004268 <HAL_RCC_OscConfig+0xdb4>)
 8004216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004218:	08db      	lsrs	r3, r3, #3
 800421a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004222:	429a      	cmp	r2, r3
 8004224:	d01a      	beq.n	800425c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004226:	4b10      	ldr	r3, [pc, #64]	; (8004268 <HAL_RCC_OscConfig+0xdb4>)
 8004228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422a:	4a0f      	ldr	r2, [pc, #60]	; (8004268 <HAL_RCC_OscConfig+0xdb4>)
 800422c:	f023 0310 	bic.w	r3, r3, #16
 8004230:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004232:	f7fd f987 	bl	8001544 <HAL_GetTick>
 8004236:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8004238:	bf00      	nop
 800423a:	f7fd f983 	bl	8001544 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004242:	4293      	cmp	r3, r2
 8004244:	d0f9      	beq.n	800423a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800424a:	4a07      	ldr	r2, [pc, #28]	; (8004268 <HAL_RCC_OscConfig+0xdb4>)
 800424c:	00db      	lsls	r3, r3, #3
 800424e:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004250:	4b05      	ldr	r3, [pc, #20]	; (8004268 <HAL_RCC_OscConfig+0xdb4>)
 8004252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004254:	4a04      	ldr	r2, [pc, #16]	; (8004268 <HAL_RCC_OscConfig+0xdb4>)
 8004256:	f043 0310 	orr.w	r3, r3, #16
 800425a:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3738      	adds	r7, #56	; 0x38
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	46020c00 	.word	0x46020c00

0800426c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d101      	bne.n	8004280 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e1d9      	b.n	8004634 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004280:	4b9b      	ldr	r3, [pc, #620]	; (80044f0 <HAL_RCC_ClockConfig+0x284>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 030f 	and.w	r3, r3, #15
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	429a      	cmp	r2, r3
 800428c:	d910      	bls.n	80042b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800428e:	4b98      	ldr	r3, [pc, #608]	; (80044f0 <HAL_RCC_ClockConfig+0x284>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f023 020f 	bic.w	r2, r3, #15
 8004296:	4996      	ldr	r1, [pc, #600]	; (80044f0 <HAL_RCC_ClockConfig+0x284>)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	4313      	orrs	r3, r2
 800429c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800429e:	4b94      	ldr	r3, [pc, #592]	; (80044f0 <HAL_RCC_ClockConfig+0x284>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 030f 	and.w	r3, r3, #15
 80042a6:	683a      	ldr	r2, [r7, #0]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d001      	beq.n	80042b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e1c1      	b.n	8004634 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0310 	and.w	r3, r3, #16
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d010      	beq.n	80042de <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	695a      	ldr	r2, [r3, #20]
 80042c0:	4b8c      	ldr	r3, [pc, #560]	; (80044f4 <HAL_RCC_ClockConfig+0x288>)
 80042c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d908      	bls.n	80042de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80042cc:	4b89      	ldr	r3, [pc, #548]	; (80044f4 <HAL_RCC_ClockConfig+0x288>)
 80042ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	4986      	ldr	r1, [pc, #536]	; (80044f4 <HAL_RCC_ClockConfig+0x288>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0308 	and.w	r3, r3, #8
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d012      	beq.n	8004310 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	691a      	ldr	r2, [r3, #16]
 80042ee:	4b81      	ldr	r3, [pc, #516]	; (80044f4 <HAL_RCC_ClockConfig+0x288>)
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	091b      	lsrs	r3, r3, #4
 80042f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d909      	bls.n	8004310 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80042fc:	4b7d      	ldr	r3, [pc, #500]	; (80044f4 <HAL_RCC_ClockConfig+0x288>)
 80042fe:	6a1b      	ldr	r3, [r3, #32]
 8004300:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	011b      	lsls	r3, r3, #4
 800430a:	497a      	ldr	r1, [pc, #488]	; (80044f4 <HAL_RCC_ClockConfig+0x288>)
 800430c:	4313      	orrs	r3, r2
 800430e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0304 	and.w	r3, r3, #4
 8004318:	2b00      	cmp	r3, #0
 800431a:	d010      	beq.n	800433e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68da      	ldr	r2, [r3, #12]
 8004320:	4b74      	ldr	r3, [pc, #464]	; (80044f4 <HAL_RCC_ClockConfig+0x288>)
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004328:	429a      	cmp	r2, r3
 800432a:	d908      	bls.n	800433e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800432c:	4b71      	ldr	r3, [pc, #452]	; (80044f4 <HAL_RCC_ClockConfig+0x288>)
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	496e      	ldr	r1, [pc, #440]	; (80044f4 <HAL_RCC_ClockConfig+0x288>)
 800433a:	4313      	orrs	r3, r2
 800433c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d010      	beq.n	800436c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689a      	ldr	r2, [r3, #8]
 800434e:	4b69      	ldr	r3, [pc, #420]	; (80044f4 <HAL_RCC_ClockConfig+0x288>)
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	f003 030f 	and.w	r3, r3, #15
 8004356:	429a      	cmp	r2, r3
 8004358:	d908      	bls.n	800436c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800435a:	4b66      	ldr	r3, [pc, #408]	; (80044f4 <HAL_RCC_ClockConfig+0x288>)
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	f023 020f 	bic.w	r2, r3, #15
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	4963      	ldr	r1, [pc, #396]	; (80044f4 <HAL_RCC_ClockConfig+0x288>)
 8004368:	4313      	orrs	r3, r2
 800436a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 80d2 	beq.w	800451e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800437a:	2300      	movs	r3, #0
 800437c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	2b03      	cmp	r3, #3
 8004384:	d143      	bne.n	800440e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004386:	4b5b      	ldr	r3, [pc, #364]	; (80044f4 <HAL_RCC_ClockConfig+0x288>)
 8004388:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	2b00      	cmp	r3, #0
 8004392:	d110      	bne.n	80043b6 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004394:	4b57      	ldr	r3, [pc, #348]	; (80044f4 <HAL_RCC_ClockConfig+0x288>)
 8004396:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800439a:	4a56      	ldr	r2, [pc, #344]	; (80044f4 <HAL_RCC_ClockConfig+0x288>)
 800439c:	f043 0304 	orr.w	r3, r3, #4
 80043a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80043a4:	4b53      	ldr	r3, [pc, #332]	; (80044f4 <HAL_RCC_ClockConfig+0x288>)
 80043a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043aa:	f003 0304 	and.w	r3, r3, #4
 80043ae:	60bb      	str	r3, [r7, #8]
 80043b0:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80043b2:	2301      	movs	r3, #1
 80043b4:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80043b6:	f7fd f8c5 	bl	8001544 <HAL_GetTick>
 80043ba:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80043bc:	4b4e      	ldr	r3, [pc, #312]	; (80044f8 <HAL_RCC_ClockConfig+0x28c>)
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00f      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80043c8:	e008      	b.n	80043dc <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80043ca:	f7fd f8bb 	bl	8001544 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d901      	bls.n	80043dc <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e12b      	b.n	8004634 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80043dc:	4b46      	ldr	r3, [pc, #280]	; (80044f8 <HAL_RCC_ClockConfig+0x28c>)
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d0f0      	beq.n	80043ca <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80043e8:	7dfb      	ldrb	r3, [r7, #23]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d107      	bne.n	80043fe <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80043ee:	4b41      	ldr	r3, [pc, #260]	; (80044f4 <HAL_RCC_ClockConfig+0x288>)
 80043f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043f4:	4a3f      	ldr	r2, [pc, #252]	; (80044f4 <HAL_RCC_ClockConfig+0x288>)
 80043f6:	f023 0304 	bic.w	r3, r3, #4
 80043fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80043fe:	4b3d      	ldr	r3, [pc, #244]	; (80044f4 <HAL_RCC_ClockConfig+0x288>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d121      	bne.n	800444e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e112      	b.n	8004634 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	2b02      	cmp	r3, #2
 8004414:	d107      	bne.n	8004426 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004416:	4b37      	ldr	r3, [pc, #220]	; (80044f4 <HAL_RCC_ClockConfig+0x288>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d115      	bne.n	800444e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e106      	b.n	8004634 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d107      	bne.n	800443e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800442e:	4b31      	ldr	r3, [pc, #196]	; (80044f4 <HAL_RCC_ClockConfig+0x288>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0304 	and.w	r3, r3, #4
 8004436:	2b00      	cmp	r3, #0
 8004438:	d109      	bne.n	800444e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e0fa      	b.n	8004634 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800443e:	4b2d      	ldr	r3, [pc, #180]	; (80044f4 <HAL_RCC_ClockConfig+0x288>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e0f2      	b.n	8004634 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800444e:	4b29      	ldr	r3, [pc, #164]	; (80044f4 <HAL_RCC_ClockConfig+0x288>)
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	f023 0203 	bic.w	r2, r3, #3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	4926      	ldr	r1, [pc, #152]	; (80044f4 <HAL_RCC_ClockConfig+0x288>)
 800445c:	4313      	orrs	r3, r2
 800445e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004460:	f7fd f870 	bl	8001544 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2b03      	cmp	r3, #3
 800446c:	d112      	bne.n	8004494 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800446e:	e00a      	b.n	8004486 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004470:	f7fd f868 	bl	8001544 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	f241 3288 	movw	r2, #5000	; 0x1388
 800447e:	4293      	cmp	r3, r2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e0d6      	b.n	8004634 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004486:	4b1b      	ldr	r3, [pc, #108]	; (80044f4 <HAL_RCC_ClockConfig+0x288>)
 8004488:	69db      	ldr	r3, [r3, #28]
 800448a:	f003 030c 	and.w	r3, r3, #12
 800448e:	2b0c      	cmp	r3, #12
 8004490:	d1ee      	bne.n	8004470 <HAL_RCC_ClockConfig+0x204>
 8004492:	e044      	b.n	800451e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	2b02      	cmp	r3, #2
 800449a:	d112      	bne.n	80044c2 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800449c:	e00a      	b.n	80044b4 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800449e:	f7fd f851 	bl	8001544 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d901      	bls.n	80044b4 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e0bf      	b.n	8004634 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80044b4:	4b0f      	ldr	r3, [pc, #60]	; (80044f4 <HAL_RCC_ClockConfig+0x288>)
 80044b6:	69db      	ldr	r3, [r3, #28]
 80044b8:	f003 030c 	and.w	r3, r3, #12
 80044bc:	2b08      	cmp	r3, #8
 80044be:	d1ee      	bne.n	800449e <HAL_RCC_ClockConfig+0x232>
 80044c0:	e02d      	b.n	800451e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d123      	bne.n	8004512 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80044ca:	e00a      	b.n	80044e2 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044cc:	f7fd f83a 	bl	8001544 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044da:	4293      	cmp	r3, r2
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e0a8      	b.n	8004634 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80044e2:	4b04      	ldr	r3, [pc, #16]	; (80044f4 <HAL_RCC_ClockConfig+0x288>)
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	f003 030c 	and.w	r3, r3, #12
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1ee      	bne.n	80044cc <HAL_RCC_ClockConfig+0x260>
 80044ee:	e016      	b.n	800451e <HAL_RCC_ClockConfig+0x2b2>
 80044f0:	40022000 	.word	0x40022000
 80044f4:	46020c00 	.word	0x46020c00
 80044f8:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044fc:	f7fd f822 	bl	8001544 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	f241 3288 	movw	r2, #5000	; 0x1388
 800450a:	4293      	cmp	r3, r2
 800450c:	d901      	bls.n	8004512 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e090      	b.n	8004634 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004512:	4b4a      	ldr	r3, [pc, #296]	; (800463c <HAL_RCC_ClockConfig+0x3d0>)
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	f003 030c 	and.w	r3, r3, #12
 800451a:	2b04      	cmp	r3, #4
 800451c:	d1ee      	bne.n	80044fc <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d010      	beq.n	800454c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	689a      	ldr	r2, [r3, #8]
 800452e:	4b43      	ldr	r3, [pc, #268]	; (800463c <HAL_RCC_ClockConfig+0x3d0>)
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	f003 030f 	and.w	r3, r3, #15
 8004536:	429a      	cmp	r2, r3
 8004538:	d208      	bcs.n	800454c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800453a:	4b40      	ldr	r3, [pc, #256]	; (800463c <HAL_RCC_ClockConfig+0x3d0>)
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	f023 020f 	bic.w	r2, r3, #15
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	493d      	ldr	r1, [pc, #244]	; (800463c <HAL_RCC_ClockConfig+0x3d0>)
 8004548:	4313      	orrs	r3, r2
 800454a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800454c:	4b3c      	ldr	r3, [pc, #240]	; (8004640 <HAL_RCC_ClockConfig+0x3d4>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 030f 	and.w	r3, r3, #15
 8004554:	683a      	ldr	r2, [r7, #0]
 8004556:	429a      	cmp	r2, r3
 8004558:	d210      	bcs.n	800457c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800455a:	4b39      	ldr	r3, [pc, #228]	; (8004640 <HAL_RCC_ClockConfig+0x3d4>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f023 020f 	bic.w	r2, r3, #15
 8004562:	4937      	ldr	r1, [pc, #220]	; (8004640 <HAL_RCC_ClockConfig+0x3d4>)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	4313      	orrs	r3, r2
 8004568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800456a:	4b35      	ldr	r3, [pc, #212]	; (8004640 <HAL_RCC_ClockConfig+0x3d4>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 030f 	and.w	r3, r3, #15
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	429a      	cmp	r2, r3
 8004576:	d001      	beq.n	800457c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e05b      	b.n	8004634 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	2b00      	cmp	r3, #0
 8004586:	d010      	beq.n	80045aa <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68da      	ldr	r2, [r3, #12]
 800458c:	4b2b      	ldr	r3, [pc, #172]	; (800463c <HAL_RCC_ClockConfig+0x3d0>)
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004594:	429a      	cmp	r2, r3
 8004596:	d208      	bcs.n	80045aa <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004598:	4b28      	ldr	r3, [pc, #160]	; (800463c <HAL_RCC_ClockConfig+0x3d0>)
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	4925      	ldr	r1, [pc, #148]	; (800463c <HAL_RCC_ClockConfig+0x3d0>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0308 	and.w	r3, r3, #8
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d012      	beq.n	80045dc <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	691a      	ldr	r2, [r3, #16]
 80045ba:	4b20      	ldr	r3, [pc, #128]	; (800463c <HAL_RCC_ClockConfig+0x3d0>)
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	091b      	lsrs	r3, r3, #4
 80045c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d209      	bcs.n	80045dc <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80045c8:	4b1c      	ldr	r3, [pc, #112]	; (800463c <HAL_RCC_ClockConfig+0x3d0>)
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	011b      	lsls	r3, r3, #4
 80045d6:	4919      	ldr	r1, [pc, #100]	; (800463c <HAL_RCC_ClockConfig+0x3d0>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0310 	and.w	r3, r3, #16
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d010      	beq.n	800460a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	695a      	ldr	r2, [r3, #20]
 80045ec:	4b13      	ldr	r3, [pc, #76]	; (800463c <HAL_RCC_ClockConfig+0x3d0>)
 80045ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d208      	bcs.n	800460a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80045f8:	4b10      	ldr	r3, [pc, #64]	; (800463c <HAL_RCC_ClockConfig+0x3d0>)
 80045fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	490d      	ldr	r1, [pc, #52]	; (800463c <HAL_RCC_ClockConfig+0x3d0>)
 8004606:	4313      	orrs	r3, r2
 8004608:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800460a:	f000 f821 	bl	8004650 <HAL_RCC_GetSysClockFreq>
 800460e:	4602      	mov	r2, r0
 8004610:	4b0a      	ldr	r3, [pc, #40]	; (800463c <HAL_RCC_ClockConfig+0x3d0>)
 8004612:	6a1b      	ldr	r3, [r3, #32]
 8004614:	f003 030f 	and.w	r3, r3, #15
 8004618:	490a      	ldr	r1, [pc, #40]	; (8004644 <HAL_RCC_ClockConfig+0x3d8>)
 800461a:	5ccb      	ldrb	r3, [r1, r3]
 800461c:	fa22 f303 	lsr.w	r3, r2, r3
 8004620:	4a09      	ldr	r2, [pc, #36]	; (8004648 <HAL_RCC_ClockConfig+0x3dc>)
 8004622:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004624:	4b09      	ldr	r3, [pc, #36]	; (800464c <HAL_RCC_ClockConfig+0x3e0>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4618      	mov	r0, r3
 800462a:	f7fc ff41 	bl	80014b0 <HAL_InitTick>
 800462e:	4603      	mov	r3, r0
 8004630:	73fb      	strb	r3, [r7, #15]

  return status;
 8004632:	7bfb      	ldrb	r3, [r7, #15]
}
 8004634:	4618      	mov	r0, r3
 8004636:	3718      	adds	r7, #24
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	46020c00 	.word	0x46020c00
 8004640:	40022000 	.word	0x40022000
 8004644:	08009d48 	.word	0x08009d48
 8004648:	20000004 	.word	0x20000004
 800464c:	20000008 	.word	0x20000008

08004650 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004650:	b480      	push	{r7}
 8004652:	b08b      	sub	sp, #44	; 0x2c
 8004654:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004656:	2300      	movs	r3, #0
 8004658:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800465a:	2300      	movs	r3, #0
 800465c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800465e:	4b78      	ldr	r3, [pc, #480]	; (8004840 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	f003 030c 	and.w	r3, r3, #12
 8004666:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004668:	4b75      	ldr	r3, [pc, #468]	; (8004840 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800466a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466c:	f003 0303 	and.w	r3, r3, #3
 8004670:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d005      	beq.n	8004684 <HAL_RCC_GetSysClockFreq+0x34>
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	2b0c      	cmp	r3, #12
 800467c:	d121      	bne.n	80046c2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d11e      	bne.n	80046c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004684:	4b6e      	ldr	r3, [pc, #440]	; (8004840 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d107      	bne.n	80046a0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004690:	4b6b      	ldr	r3, [pc, #428]	; (8004840 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004692:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004696:	0b1b      	lsrs	r3, r3, #12
 8004698:	f003 030f 	and.w	r3, r3, #15
 800469c:	627b      	str	r3, [r7, #36]	; 0x24
 800469e:	e005      	b.n	80046ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80046a0:	4b67      	ldr	r3, [pc, #412]	; (8004840 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	0f1b      	lsrs	r3, r3, #28
 80046a6:	f003 030f 	and.w	r3, r3, #15
 80046aa:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80046ac:	4a65      	ldr	r2, [pc, #404]	; (8004844 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80046ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046b4:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d110      	bne.n	80046de <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80046c0:	e00d      	b.n	80046de <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046c2:	4b5f      	ldr	r3, [pc, #380]	; (8004840 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	f003 030c 	and.w	r3, r3, #12
 80046ca:	2b04      	cmp	r3, #4
 80046cc:	d102      	bne.n	80046d4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046ce:	4b5e      	ldr	r3, [pc, #376]	; (8004848 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80046d0:	623b      	str	r3, [r7, #32]
 80046d2:	e004      	b.n	80046de <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	2b08      	cmp	r3, #8
 80046d8:	d101      	bne.n	80046de <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046da:	4b5b      	ldr	r3, [pc, #364]	; (8004848 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80046dc:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	2b0c      	cmp	r3, #12
 80046e2:	f040 80a5 	bne.w	8004830 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80046e6:	4b56      	ldr	r3, [pc, #344]	; (8004840 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80046e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ea:	f003 0303 	and.w	r3, r3, #3
 80046ee:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80046f0:	4b53      	ldr	r3, [pc, #332]	; (8004840 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80046f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f4:	0a1b      	lsrs	r3, r3, #8
 80046f6:	f003 030f 	and.w	r3, r3, #15
 80046fa:	3301      	adds	r3, #1
 80046fc:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80046fe:	4b50      	ldr	r3, [pc, #320]	; (8004840 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004702:	091b      	lsrs	r3, r3, #4
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800470a:	4b4d      	ldr	r3, [pc, #308]	; (8004840 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800470c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470e:	08db      	lsrs	r3, r3, #3
 8004710:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004714:	68ba      	ldr	r2, [r7, #8]
 8004716:	fb02 f303 	mul.w	r3, r2, r3
 800471a:	ee07 3a90 	vmov	s15, r3
 800471e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004722:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	2b02      	cmp	r3, #2
 800472a:	d003      	beq.n	8004734 <HAL_RCC_GetSysClockFreq+0xe4>
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	2b03      	cmp	r3, #3
 8004730:	d022      	beq.n	8004778 <HAL_RCC_GetSysClockFreq+0x128>
 8004732:	e043      	b.n	80047bc <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	ee07 3a90 	vmov	s15, r3
 800473a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800473e:	eddf 6a43 	vldr	s13, [pc, #268]	; 800484c <HAL_RCC_GetSysClockFreq+0x1fc>
 8004742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004746:	4b3e      	ldr	r3, [pc, #248]	; (8004840 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800474a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800474e:	ee07 3a90 	vmov	s15, r3
 8004752:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004756:	ed97 6a01 	vldr	s12, [r7, #4]
 800475a:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8004850 <HAL_RCC_GetSysClockFreq+0x200>
 800475e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004762:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004766:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800476a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800476e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004772:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004776:	e046      	b.n	8004806 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	ee07 3a90 	vmov	s15, r3
 800477e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004782:	eddf 6a32 	vldr	s13, [pc, #200]	; 800484c <HAL_RCC_GetSysClockFreq+0x1fc>
 8004786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800478a:	4b2d      	ldr	r3, [pc, #180]	; (8004840 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800478c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800478e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004792:	ee07 3a90 	vmov	s15, r3
 8004796:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800479a:	ed97 6a01 	vldr	s12, [r7, #4]
 800479e:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8004850 <HAL_RCC_GetSysClockFreq+0x200>
 80047a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80047aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047ba:	e024      	b.n	8004806 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047be:	ee07 3a90 	vmov	s15, r3
 80047c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	ee07 3a90 	vmov	s15, r3
 80047cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047d4:	4b1a      	ldr	r3, [pc, #104]	; (8004840 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80047d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047dc:	ee07 3a90 	vmov	s15, r3
 80047e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80047e4:	ed97 6a01 	vldr	s12, [r7, #4]
 80047e8:	eddf 5a19 	vldr	s11, [pc, #100]	; 8004850 <HAL_RCC_GetSysClockFreq+0x200>
 80047ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80047f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004800:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004804:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8004806:	4b0e      	ldr	r3, [pc, #56]	; (8004840 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800480a:	0e1b      	lsrs	r3, r3, #24
 800480c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004810:	3301      	adds	r3, #1
 8004812:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	ee07 3a90 	vmov	s15, r3
 800481a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800481e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004822:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004826:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800482a:	ee17 3a90 	vmov	r3, s15
 800482e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8004830:	6a3b      	ldr	r3, [r7, #32]
}
 8004832:	4618      	mov	r0, r3
 8004834:	372c      	adds	r7, #44	; 0x2c
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	46020c00 	.word	0x46020c00
 8004844:	08009d60 	.word	0x08009d60
 8004848:	00f42400 	.word	0x00f42400
 800484c:	4b742400 	.word	0x4b742400
 8004850:	46000000 	.word	0x46000000

08004854 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004858:	f7ff fefa 	bl	8004650 <HAL_RCC_GetSysClockFreq>
 800485c:	4602      	mov	r2, r0
 800485e:	4b07      	ldr	r3, [pc, #28]	; (800487c <HAL_RCC_GetHCLKFreq+0x28>)
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	f003 030f 	and.w	r3, r3, #15
 8004866:	4906      	ldr	r1, [pc, #24]	; (8004880 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004868:	5ccb      	ldrb	r3, [r1, r3]
 800486a:	fa22 f303 	lsr.w	r3, r2, r3
 800486e:	4a05      	ldr	r2, [pc, #20]	; (8004884 <HAL_RCC_GetHCLKFreq+0x30>)
 8004870:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004872:	4b04      	ldr	r3, [pc, #16]	; (8004884 <HAL_RCC_GetHCLKFreq+0x30>)
 8004874:	681b      	ldr	r3, [r3, #0]
}
 8004876:	4618      	mov	r0, r3
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	46020c00 	.word	0x46020c00
 8004880:	08009d48 	.word	0x08009d48
 8004884:	20000004 	.word	0x20000004

08004888 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800488c:	f7ff ffe2 	bl	8004854 <HAL_RCC_GetHCLKFreq>
 8004890:	4602      	mov	r2, r0
 8004892:	4b05      	ldr	r3, [pc, #20]	; (80048a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	091b      	lsrs	r3, r3, #4
 8004898:	f003 0307 	and.w	r3, r3, #7
 800489c:	4903      	ldr	r1, [pc, #12]	; (80048ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800489e:	5ccb      	ldrb	r3, [r1, r3]
 80048a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	46020c00 	.word	0x46020c00
 80048ac:	08009d58 	.word	0x08009d58

080048b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80048b4:	f7ff ffce 	bl	8004854 <HAL_RCC_GetHCLKFreq>
 80048b8:	4602      	mov	r2, r0
 80048ba:	4b05      	ldr	r3, [pc, #20]	; (80048d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	0a1b      	lsrs	r3, r3, #8
 80048c0:	f003 0307 	and.w	r3, r3, #7
 80048c4:	4903      	ldr	r1, [pc, #12]	; (80048d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048c6:	5ccb      	ldrb	r3, [r1, r3]
 80048c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	46020c00 	.word	0x46020c00
 80048d4:	08009d58 	.word	0x08009d58

080048d8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80048dc:	f7ff ffba 	bl	8004854 <HAL_RCC_GetHCLKFreq>
 80048e0:	4602      	mov	r2, r0
 80048e2:	4b05      	ldr	r3, [pc, #20]	; (80048f8 <HAL_RCC_GetPCLK3Freq+0x20>)
 80048e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e6:	091b      	lsrs	r3, r3, #4
 80048e8:	f003 0307 	and.w	r3, r3, #7
 80048ec:	4903      	ldr	r1, [pc, #12]	; (80048fc <HAL_RCC_GetPCLK3Freq+0x24>)
 80048ee:	5ccb      	ldrb	r3, [r1, r3]
 80048f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	46020c00 	.word	0x46020c00
 80048fc:	08009d58 	.word	0x08009d58

08004900 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b086      	sub	sp, #24
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004908:	4b3e      	ldr	r3, [pc, #248]	; (8004a04 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800490a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800490e:	f003 0304 	and.w	r3, r3, #4
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004916:	f7fe fd9f 	bl	8003458 <HAL_PWREx_GetVoltageRange>
 800491a:	6178      	str	r0, [r7, #20]
 800491c:	e019      	b.n	8004952 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800491e:	4b39      	ldr	r3, [pc, #228]	; (8004a04 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004920:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004924:	4a37      	ldr	r2, [pc, #220]	; (8004a04 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004926:	f043 0304 	orr.w	r3, r3, #4
 800492a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800492e:	4b35      	ldr	r3, [pc, #212]	; (8004a04 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004930:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004934:	f003 0304 	and.w	r3, r3, #4
 8004938:	60fb      	str	r3, [r7, #12]
 800493a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800493c:	f7fe fd8c 	bl	8003458 <HAL_PWREx_GetVoltageRange>
 8004940:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004942:	4b30      	ldr	r3, [pc, #192]	; (8004a04 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004944:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004948:	4a2e      	ldr	r2, [pc, #184]	; (8004a04 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800494a:	f023 0304 	bic.w	r3, r3, #4
 800494e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004958:	d003      	beq.n	8004962 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004960:	d109      	bne.n	8004976 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004968:	d202      	bcs.n	8004970 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800496a:	2301      	movs	r3, #1
 800496c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800496e:	e033      	b.n	80049d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004970:	2300      	movs	r3, #0
 8004972:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004974:	e030      	b.n	80049d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800497c:	d208      	bcs.n	8004990 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004984:	d102      	bne.n	800498c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8004986:	2303      	movs	r3, #3
 8004988:	613b      	str	r3, [r7, #16]
 800498a:	e025      	b.n	80049d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e035      	b.n	80049fc <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004996:	d90f      	bls.n	80049b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d109      	bne.n	80049b2 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80049a4:	d902      	bls.n	80049ac <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80049a6:	2300      	movs	r3, #0
 80049a8:	613b      	str	r3, [r7, #16]
 80049aa:	e015      	b.n	80049d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80049ac:	2301      	movs	r3, #1
 80049ae:	613b      	str	r3, [r7, #16]
 80049b0:	e012      	b.n	80049d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80049b2:	2300      	movs	r3, #0
 80049b4:	613b      	str	r3, [r7, #16]
 80049b6:	e00f      	b.n	80049d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049be:	d109      	bne.n	80049d4 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049c6:	d102      	bne.n	80049ce <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80049c8:	2301      	movs	r3, #1
 80049ca:	613b      	str	r3, [r7, #16]
 80049cc:	e004      	b.n	80049d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80049ce:	2302      	movs	r3, #2
 80049d0:	613b      	str	r3, [r7, #16]
 80049d2:	e001      	b.n	80049d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80049d4:	2301      	movs	r3, #1
 80049d6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80049d8:	4b0b      	ldr	r3, [pc, #44]	; (8004a08 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f023 020f 	bic.w	r2, r3, #15
 80049e0:	4909      	ldr	r1, [pc, #36]	; (8004a08 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80049e8:	4b07      	ldr	r3, [pc, #28]	; (8004a08 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 030f 	and.w	r3, r3, #15
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d001      	beq.n	80049fa <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e000      	b.n	80049fc <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3718      	adds	r7, #24
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	46020c00 	.word	0x46020c00
 8004a08:	40022000 	.word	0x40022000

08004a0c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004a0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a10:	b0b8      	sub	sp, #224	; 0xe0
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a18:	2300      	movs	r3, #0
 8004a1a:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a1e:	2300      	movs	r3, #0
 8004a20:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2c:	f002 0401 	and.w	r4, r2, #1
 8004a30:	2500      	movs	r5, #0
 8004a32:	ea54 0305 	orrs.w	r3, r4, r5
 8004a36:	d00b      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004a38:	4bca      	ldr	r3, [pc, #808]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a3e:	f023 0103 	bic.w	r1, r3, #3
 8004a42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a48:	4ac6      	ldr	r2, [pc, #792]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a4a:	430b      	orrs	r3, r1
 8004a4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a58:	f002 0802 	and.w	r8, r2, #2
 8004a5c:	f04f 0900 	mov.w	r9, #0
 8004a60:	ea58 0309 	orrs.w	r3, r8, r9
 8004a64:	d00b      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004a66:	4bbf      	ldr	r3, [pc, #764]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a6c:	f023 010c 	bic.w	r1, r3, #12
 8004a70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a76:	4abb      	ldr	r2, [pc, #748]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a78:	430b      	orrs	r3, r1
 8004a7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a86:	f002 0a04 	and.w	sl, r2, #4
 8004a8a:	f04f 0b00 	mov.w	fp, #0
 8004a8e:	ea5a 030b 	orrs.w	r3, sl, fp
 8004a92:	d00b      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004a94:	4bb3      	ldr	r3, [pc, #716]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a9a:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004a9e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa4:	4aaf      	ldr	r2, [pc, #700]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004aa6:	430b      	orrs	r3, r1
 8004aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004aac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab4:	f002 0308 	and.w	r3, r2, #8
 8004ab8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004abc:	2300      	movs	r3, #0
 8004abe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ac2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	d00b      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004acc:	4ba5      	ldr	r3, [pc, #660]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ad2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004ad6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004adc:	4aa1      	ldr	r2, [pc, #644]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ade:	430b      	orrs	r3, r1
 8004ae0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ae4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aec:	f002 0310 	and.w	r3, r2, #16
 8004af0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004af4:	2300      	movs	r3, #0
 8004af6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004afa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004afe:	460b      	mov	r3, r1
 8004b00:	4313      	orrs	r3, r2
 8004b02:	d00b      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004b04:	4b97      	ldr	r3, [pc, #604]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b0a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004b0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b14:	4a93      	ldr	r2, [pc, #588]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b16:	430b      	orrs	r3, r1
 8004b18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b24:	f002 0320 	and.w	r3, r2, #32
 8004b28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b32:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004b36:	460b      	mov	r3, r1
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	d00b      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004b3c:	4b89      	ldr	r3, [pc, #548]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b42:	f023 0107 	bic.w	r1, r3, #7
 8004b46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b4c:	4a85      	ldr	r2, [pc, #532]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b4e:	430b      	orrs	r3, r1
 8004b50:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5c:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004b60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b64:	2300      	movs	r3, #0
 8004b66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b6a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b6e:	460b      	mov	r3, r1
 8004b70:	4313      	orrs	r3, r2
 8004b72:	d00b      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004b74:	4b7b      	ldr	r3, [pc, #492]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b7a:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8004b7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b84:	4a77      	ldr	r2, [pc, #476]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b86:	430b      	orrs	r3, r1
 8004b88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b94:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004b98:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004ba2:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	d00b      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004bac:	4b6d      	ldr	r3, [pc, #436]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004bb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bb6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004bba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bbc:	4a69      	ldr	r2, [pc, #420]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004bbe:	430b      	orrs	r3, r1
 8004bc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bc4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bcc:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8004bd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004bda:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004bde:	460b      	mov	r3, r1
 8004be0:	4313      	orrs	r3, r2
 8004be2:	d00b      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004be4:	4b5f      	ldr	r3, [pc, #380]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004be6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004bea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004bee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf4:	4a5b      	ldr	r2, [pc, #364]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004bf6:	430b      	orrs	r3, r1
 8004bf8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004bfc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c04:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004c08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004c12:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004c16:	460b      	mov	r3, r1
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	d00b      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004c1c:	4b51      	ldr	r3, [pc, #324]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c22:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8004c26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c2c:	4a4d      	ldr	r2, [pc, #308]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c2e:	430b      	orrs	r3, r1
 8004c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3c:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8004c40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c44:	2300      	movs	r3, #0
 8004c46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004c4a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004c4e:	460b      	mov	r3, r1
 8004c50:	4313      	orrs	r3, r2
 8004c52:	d00b      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004c54:	4b43      	ldr	r3, [pc, #268]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c5a:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8004c5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c64:	4a3f      	ldr	r2, [pc, #252]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c66:	430b      	orrs	r3, r1
 8004c68:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004c6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c74:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004c78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c82:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004c86:	460b      	mov	r3, r1
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	d00b      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004c8c:	4b35      	ldr	r3, [pc, #212]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c92:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8004c96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c9c:	4a31      	ldr	r2, [pc, #196]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c9e:	430b      	orrs	r3, r1
 8004ca0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8004ca4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cac:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004cb0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004cb6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004cba:	460b      	mov	r3, r1
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	d00c      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8004cc0:	4b28      	ldr	r3, [pc, #160]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004cc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004cc6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004cca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004cce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cd2:	4a24      	ldr	r2, [pc, #144]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004cd4:	430b      	orrs	r3, r1
 8004cd6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004cda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004ce6:	673b      	str	r3, [r7, #112]	; 0x70
 8004ce8:	2300      	movs	r3, #0
 8004cea:	677b      	str	r3, [r7, #116]	; 0x74
 8004cec:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	d04f      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004cf6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cfe:	2b80      	cmp	r3, #128	; 0x80
 8004d00:	d02d      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x352>
 8004d02:	2b80      	cmp	r3, #128	; 0x80
 8004d04:	d827      	bhi.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004d06:	2b60      	cmp	r3, #96	; 0x60
 8004d08:	d02e      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004d0a:	2b60      	cmp	r3, #96	; 0x60
 8004d0c:	d823      	bhi.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004d0e:	2b40      	cmp	r3, #64	; 0x40
 8004d10:	d006      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004d12:	2b40      	cmp	r3, #64	; 0x40
 8004d14:	d81f      	bhi.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d009      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x322>
 8004d1a:	2b20      	cmp	r3, #32
 8004d1c:	d011      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004d1e:	e01a      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004d20:	4b10      	ldr	r3, [pc, #64]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d24:	4a0f      	ldr	r2, [pc, #60]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d2a:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004d2c:	e01d      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d32:	3308      	adds	r3, #8
 8004d34:	4618      	mov	r0, r3
 8004d36:	f002 f9d1 	bl	80070dc <RCCEx_PLL2_Config>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004d40:	e013      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d46:	332c      	adds	r3, #44	; 0x2c
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f002 fa5f 	bl	800720c <RCCEx_PLL3_Config>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004d54:	e009      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8004d5c:	e005      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 8004d5e:	bf00      	nop
 8004d60:	e003      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8004d62:	bf00      	nop
 8004d64:	46020c00 	.word	0x46020c00
        break;
 8004d68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d6a:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10d      	bne.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004d72:	4bb6      	ldr	r3, [pc, #728]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004d74:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004d78:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8004d7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d84:	4ab1      	ldr	r2, [pc, #708]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004d86:	430b      	orrs	r3, r1
 8004d88:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004d8c:	e003      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d8e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004d92:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004d96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004da2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004da4:	2300      	movs	r3, #0
 8004da6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004da8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004dac:	460b      	mov	r3, r1
 8004dae:	4313      	orrs	r3, r2
 8004db0:	d053      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8004db2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dbe:	d033      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004dc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dc4:	d82c      	bhi.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004dc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dca:	d02f      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004dcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dd0:	d826      	bhi.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004dd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dd6:	d008      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ddc:	d820      	bhi.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00a      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004de2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004de6:	d011      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004de8:	e01a      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004dea:	4b98      	ldr	r3, [pc, #608]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dee:	4a97      	ldr	r2, [pc, #604]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004df4:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004df6:	e01a      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004df8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004dfc:	3308      	adds	r3, #8
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f002 f96c 	bl	80070dc <RCCEx_PLL2_Config>
 8004e04:	4603      	mov	r3, r0
 8004e06:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004e0a:	e010      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e10:	332c      	adds	r3, #44	; 0x2c
 8004e12:	4618      	mov	r0, r3
 8004e14:	f002 f9fa 	bl	800720c <RCCEx_PLL3_Config>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004e1e:	e006      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8004e26:	e002      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8004e28:	bf00      	nop
 8004e2a:	e000      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8004e2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e2e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10d      	bne.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8004e36:	4b85      	ldr	r3, [pc, #532]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004e38:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004e3c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004e40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e48:	4a80      	ldr	r2, [pc, #512]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004e4a:	430b      	orrs	r3, r1
 8004e4c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004e50:	e003      	b.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e52:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004e56:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004e5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e62:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004e66:	663b      	str	r3, [r7, #96]	; 0x60
 8004e68:	2300      	movs	r3, #0
 8004e6a:	667b      	str	r3, [r7, #100]	; 0x64
 8004e6c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004e70:	460b      	mov	r3, r1
 8004e72:	4313      	orrs	r3, r2
 8004e74:	d046      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004e76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004e7e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004e82:	d028      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004e84:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004e88:	d821      	bhi.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004e8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e8e:	d022      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004e90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e94:	d81b      	bhi.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004e96:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e9a:	d01c      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004e9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ea0:	d815      	bhi.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ea6:	d008      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8004ea8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eac:	d80f      	bhi.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d011      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eb6:	d00e      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004eb8:	e009      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004eba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ebe:	3308      	adds	r3, #8
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f002 f90b 	bl	80070dc <RCCEx_PLL2_Config>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8004ecc:	e004      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8004ed4:	e000      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 8004ed6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ed8:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d10d      	bne.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004ee0:	4b5a      	ldr	r3, [pc, #360]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004ee2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ee6:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004eea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004eee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004ef2:	4a56      	ldr	r2, [pc, #344]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004ef4:	430b      	orrs	r3, r1
 8004ef6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004efa:	e003      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004efc:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004f00:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8004f04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0c:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004f10:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f12:	2300      	movs	r3, #0
 8004f14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f16:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	d03f      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8004f20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f28:	2b04      	cmp	r3, #4
 8004f2a:	d81e      	bhi.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8004f2c:	a201      	add	r2, pc, #4	; (adr r2, 8004f34 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8004f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f32:	bf00      	nop
 8004f34:	08004f73 	.word	0x08004f73
 8004f38:	08004f49 	.word	0x08004f49
 8004f3c:	08004f57 	.word	0x08004f57
 8004f40:	08004f73 	.word	0x08004f73
 8004f44:	08004f73 	.word	0x08004f73
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004f48:	4b40      	ldr	r3, [pc, #256]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4c:	4a3f      	ldr	r2, [pc, #252]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004f4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f52:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8004f54:	e00e      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f5a:	332c      	adds	r3, #44	; 0x2c
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f002 f955 	bl	800720c <RCCEx_PLL3_Config>
 8004f62:	4603      	mov	r3, r0
 8004f64:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8004f68:	e004      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8004f70:	e000      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 8004f72:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004f74:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d10d      	bne.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8004f7c:	4b33      	ldr	r3, [pc, #204]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004f7e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004f82:	f023 0107 	bic.w	r1, r3, #7
 8004f86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f8e:	4a2f      	ldr	r2, [pc, #188]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004f90:	430b      	orrs	r3, r1
 8004f92:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004f96:	e003      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f98:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004f9c:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8004fa0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa8:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004fac:	653b      	str	r3, [r7, #80]	; 0x50
 8004fae:	2300      	movs	r3, #0
 8004fb0:	657b      	str	r3, [r7, #84]	; 0x54
 8004fb2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	d04d      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8004fbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004fc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fc4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004fc8:	d028      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x610>
 8004fca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004fce:	d821      	bhi.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004fd0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004fd4:	d024      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8004fd6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004fda:	d81b      	bhi.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004fdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fe0:	d00e      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8004fe2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fe6:	d815      	bhi.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d01b      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8004fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ff0:	d110      	bne.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004ff2:	4b16      	ldr	r3, [pc, #88]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff6:	4a15      	ldr	r2, [pc, #84]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ffc:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8004ffe:	e012      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005000:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005004:	332c      	adds	r3, #44	; 0x2c
 8005006:	4618      	mov	r0, r3
 8005008:	f002 f900 	bl	800720c <RCCEx_PLL3_Config>
 800500c:	4603      	mov	r3, r0
 800500e:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8005012:	e008      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 800501a:	e004      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 800501c:	bf00      	nop
 800501e:	e002      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8005020:	bf00      	nop
 8005022:	e000      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8005024:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005026:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800502a:	2b00      	cmp	r3, #0
 800502c:	d110      	bne.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800502e:	4b07      	ldr	r3, [pc, #28]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005030:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005034:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005038:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800503c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005040:	4a02      	ldr	r2, [pc, #8]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005042:	430b      	orrs	r3, r1
 8005044:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005048:	e006      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800504a:	bf00      	nop
 800504c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005050:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005054:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005058:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800505c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005060:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005064:	64bb      	str	r3, [r7, #72]	; 0x48
 8005066:	2300      	movs	r3, #0
 8005068:	64fb      	str	r3, [r7, #76]	; 0x4c
 800506a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800506e:	460b      	mov	r3, r1
 8005070:	4313      	orrs	r3, r2
 8005072:	f000 80b5 	beq.w	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005076:	2300      	movs	r3, #0
 8005078:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800507c:	4b9d      	ldr	r3, [pc, #628]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800507e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005082:	f003 0304 	and.w	r3, r3, #4
 8005086:	2b00      	cmp	r3, #0
 8005088:	d113      	bne.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800508a:	4b9a      	ldr	r3, [pc, #616]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800508c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005090:	4a98      	ldr	r2, [pc, #608]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005092:	f043 0304 	orr.w	r3, r3, #4
 8005096:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800509a:	4b96      	ldr	r3, [pc, #600]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800509c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050a0:	f003 0304 	and.w	r3, r3, #4
 80050a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050a8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
      pwrclkchanged = SET;
 80050ac:	2301      	movs	r3, #1
 80050ae:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80050b2:	4b91      	ldr	r3, [pc, #580]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80050b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b6:	4a90      	ldr	r2, [pc, #576]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80050b8:	f043 0301 	orr.w	r3, r3, #1
 80050bc:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050be:	f7fc fa41 	bl	8001544 <HAL_GetTick>
 80050c2:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80050c6:	e00b      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050c8:	f7fc fa3c 	bl	8001544 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d903      	bls.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 80050de:	e005      	b.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80050e0:	4b85      	ldr	r3, [pc, #532]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80050e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d0ed      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 80050ec:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d165      	bne.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80050f4:	4b7f      	ldr	r3, [pc, #508]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80050f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005102:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005106:	2b00      	cmp	r3, #0
 8005108:	d023      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x746>
 800510a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800510e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8005112:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005116:	4293      	cmp	r3, r2
 8005118:	d01b      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800511a:	4b76      	ldr	r3, [pc, #472]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800511c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005124:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005128:	4b72      	ldr	r3, [pc, #456]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800512a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800512e:	4a71      	ldr	r2, [pc, #452]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005134:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005138:	4b6e      	ldr	r3, [pc, #440]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800513a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800513e:	4a6d      	ldr	r2, [pc, #436]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005140:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005144:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005148:	4a6a      	ldr	r2, [pc, #424]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800514a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800514e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005152:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	2b00      	cmp	r3, #0
 800515c:	d019      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800515e:	f7fc f9f1 	bl	8001544 <HAL_GetTick>
 8005162:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005166:	e00d      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005168:	f7fc f9ec 	bl	8001544 <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005172:	1ad2      	subs	r2, r2, r3
 8005174:	f241 3388 	movw	r3, #5000	; 0x1388
 8005178:	429a      	cmp	r2, r3
 800517a:	d903      	bls.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
            break;
 8005182:	e006      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005184:	4b5b      	ldr	r3, [pc, #364]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005186:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	2b00      	cmp	r3, #0
 8005190:	d0ea      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 8005192:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005196:	2b00      	cmp	r3, #0
 8005198:	d10d      	bne.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800519a:	4b56      	ldr	r3, [pc, #344]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800519c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051a0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80051a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80051a8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80051ac:	4a51      	ldr	r2, [pc, #324]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80051ae:	430b      	orrs	r3, r1
 80051b0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80051b4:	e008      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80051b6:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80051ba:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 80051be:	e003      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051c0:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80051c4:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80051c8:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d107      	bne.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051d0:	4b48      	ldr	r3, [pc, #288]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80051d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051d6:	4a47      	ldr	r2, [pc, #284]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80051d8:	f023 0304 	bic.w	r3, r3, #4
 80051dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80051e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80051e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80051ec:	643b      	str	r3, [r7, #64]	; 0x40
 80051ee:	2300      	movs	r3, #0
 80051f0:	647b      	str	r3, [r7, #68]	; 0x44
 80051f2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80051f6:	460b      	mov	r3, r1
 80051f8:	4313      	orrs	r3, r2
 80051fa:	d042      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80051fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005200:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005204:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005208:	d022      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x844>
 800520a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800520e:	d81b      	bhi.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8005210:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005214:	d011      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8005216:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800521a:	d815      	bhi.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800521c:	2b00      	cmp	r3, #0
 800521e:	d019      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8005220:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005224:	d110      	bne.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005226:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800522a:	3308      	adds	r3, #8
 800522c:	4618      	mov	r0, r3
 800522e:	f001 ff55 	bl	80070dc <RCCEx_PLL2_Config>
 8005232:	4603      	mov	r3, r0
 8005234:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8005238:	e00d      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800523a:	4b2e      	ldr	r3, [pc, #184]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800523c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523e:	4a2d      	ldr	r2, [pc, #180]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005244:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005246:	e006      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 800524e:	e002      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8005250:	bf00      	nop
 8005252:	e000      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8005254:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005256:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800525a:	2b00      	cmp	r3, #0
 800525c:	d10d      	bne.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800525e:	4b25      	ldr	r3, [pc, #148]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005264:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005268:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800526c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005270:	4a20      	ldr	r2, [pc, #128]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005272:	430b      	orrs	r3, r1
 8005274:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005278:	e003      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800527a:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800527e:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005282:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800528a:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800528e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005290:	2300      	movs	r3, #0
 8005292:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005294:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005298:	460b      	mov	r3, r1
 800529a:	4313      	orrs	r3, r2
 800529c:	d032      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800529e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80052a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052aa:	d00b      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80052ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052b0:	d804      	bhi.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d008      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80052b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052ba:	d007      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 80052c2:	e004      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80052c4:	bf00      	nop
 80052c6:	e002      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80052c8:	bf00      	nop
 80052ca:	e000      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80052cc:	bf00      	nop
    }
    if (ret == HAL_OK)
 80052ce:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d112      	bne.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80052d6:	4b07      	ldr	r3, [pc, #28]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80052d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80052dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80052e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052e8:	4a02      	ldr	r2, [pc, #8]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80052ea:	430b      	orrs	r3, r1
 80052ec:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80052f0:	e008      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 80052f2:	bf00      	nop
 80052f4:	46020c00 	.word	0x46020c00
 80052f8:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052fc:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005300:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8005304:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005310:	633b      	str	r3, [r7, #48]	; 0x30
 8005312:	2300      	movs	r3, #0
 8005314:	637b      	str	r3, [r7, #52]	; 0x34
 8005316:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800531a:	460b      	mov	r3, r1
 800531c:	4313      	orrs	r3, r2
 800531e:	d019      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005320:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005324:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005328:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800532c:	d105      	bne.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800532e:	4b88      	ldr	r3, [pc, #544]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005332:	4a87      	ldr	r2, [pc, #540]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005338:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800533a:	4b85      	ldr	r3, [pc, #532]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800533c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005340:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005344:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005348:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800534c:	4a80      	ldr	r2, [pc, #512]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800534e:	430b      	orrs	r3, r1
 8005350:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005354:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005360:	62bb      	str	r3, [r7, #40]	; 0x28
 8005362:	2300      	movs	r3, #0
 8005364:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005366:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800536a:	460b      	mov	r3, r1
 800536c:	4313      	orrs	r3, r2
 800536e:	d00c      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005370:	4b77      	ldr	r3, [pc, #476]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005376:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800537a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800537e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005382:	4973      	ldr	r1, [pc, #460]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005384:	4313      	orrs	r3, r2
 8005386:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800538a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800538e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005392:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005396:	623b      	str	r3, [r7, #32]
 8005398:	2300      	movs	r3, #0
 800539a:	627b      	str	r3, [r7, #36]	; 0x24
 800539c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80053a0:	460b      	mov	r3, r1
 80053a2:	4313      	orrs	r3, r2
 80053a4:	d00c      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80053a6:	4b6a      	ldr	r3, [pc, #424]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80053a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80053b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80053b8:	4965      	ldr	r1, [pc, #404]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80053c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80053c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80053cc:	61bb      	str	r3, [r7, #24]
 80053ce:	2300      	movs	r3, #0
 80053d0:	61fb      	str	r3, [r7, #28]
 80053d2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80053d6:	460b      	mov	r3, r1
 80053d8:	4313      	orrs	r3, r2
 80053da:	d00c      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80053dc:	4b5c      	ldr	r3, [pc, #368]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80053de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80053e2:	f023 0218 	bic.w	r2, r3, #24
 80053e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80053ea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80053ee:	4958      	ldr	r1, [pc, #352]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80053f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80053fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fe:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8005402:	613b      	str	r3, [r7, #16]
 8005404:	2300      	movs	r3, #0
 8005406:	617b      	str	r3, [r7, #20]
 8005408:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800540c:	460b      	mov	r3, r1
 800540e:	4313      	orrs	r3, r2
 8005410:	d032      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8005412:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005416:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800541a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800541e:	d105      	bne.n	800542c <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005420:	4b4b      	ldr	r3, [pc, #300]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005424:	4a4a      	ldr	r2, [pc, #296]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005426:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800542a:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800542c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005430:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005434:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005438:	d108      	bne.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800543a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800543e:	3308      	adds	r3, #8
 8005440:	4618      	mov	r0, r3
 8005442:	f001 fe4b 	bl	80070dc <RCCEx_PLL2_Config>
 8005446:	4603      	mov	r3, r0
 8005448:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
    }
    if (ret == HAL_OK)
 800544c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005450:	2b00      	cmp	r3, #0
 8005452:	d10d      	bne.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005454:	4b3e      	ldr	r3, [pc, #248]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005456:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800545a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800545e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005462:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005466:	493a      	ldr	r1, [pc, #232]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005468:	4313      	orrs	r3, r2
 800546a:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800546e:	e003      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005470:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005474:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8005478:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800547c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005480:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8005484:	60bb      	str	r3, [r7, #8]
 8005486:	2300      	movs	r3, #0
 8005488:	60fb      	str	r3, [r7, #12]
 800548a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800548e:	460b      	mov	r3, r1
 8005490:	4313      	orrs	r3, r2
 8005492:	d03a      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8005494:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005498:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800549c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054a0:	d00e      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80054a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054a6:	d815      	bhi.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d017      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0xad0>
 80054ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054b0:	d110      	bne.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054b2:	4b27      	ldr	r3, [pc, #156]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80054b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b6:	4a26      	ldr	r2, [pc, #152]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80054b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054bc:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80054be:	e00e      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80054c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80054c4:	3308      	adds	r3, #8
 80054c6:	4618      	mov	r0, r3
 80054c8:	f001 fe08 	bl	80070dc <RCCEx_PLL2_Config>
 80054cc:	4603      	mov	r3, r0
 80054ce:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80054d2:	e004      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 80054da:	e000      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 80054dc:	bf00      	nop
    }
    if (ret == HAL_OK)
 80054de:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10d      	bne.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80054e6:	4b1a      	ldr	r3, [pc, #104]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80054e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054ec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80054f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80054f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054f8:	4915      	ldr	r1, [pc, #84]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8005500:	e003      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005502:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005506:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800550a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800550e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005512:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005516:	603b      	str	r3, [r7, #0]
 8005518:	2300      	movs	r3, #0
 800551a:	607b      	str	r3, [r7, #4]
 800551c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005520:	460b      	mov	r3, r1
 8005522:	4313      	orrs	r3, r2
 8005524:	d00c      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8005526:	4b0a      	ldr	r3, [pc, #40]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005528:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800552c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005530:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005534:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005538:	4905      	ldr	r1, [pc, #20]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800553a:	4313      	orrs	r3, r2
 800553c:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8005540:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
}
 8005544:	4618      	mov	r0, r3
 8005546:	37e0      	adds	r7, #224	; 0xe0
 8005548:	46bd      	mov	sp, r7
 800554a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800554e:	bf00      	nop
 8005550:	46020c00 	.word	0x46020c00

08005554 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005554:	b480      	push	{r7}
 8005556:	b089      	sub	sp, #36	; 0x24
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800555c:	4ba6      	ldr	r3, [pc, #664]	; (80057f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800555e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005564:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005566:	4ba4      	ldr	r3, [pc, #656]	; (80057f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556a:	f003 0303 	and.w	r3, r3, #3
 800556e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005570:	4ba1      	ldr	r3, [pc, #644]	; (80057f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005574:	0a1b      	lsrs	r3, r3, #8
 8005576:	f003 030f 	and.w	r3, r3, #15
 800557a:	3301      	adds	r3, #1
 800557c:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800557e:	4b9e      	ldr	r3, [pc, #632]	; (80057f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005582:	091b      	lsrs	r3, r3, #4
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800558a:	4b9b      	ldr	r3, [pc, #620]	; (80057f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800558c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558e:	08db      	lsrs	r3, r3, #3
 8005590:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	fb02 f303 	mul.w	r3, r2, r3
 800559a:	ee07 3a90 	vmov	s15, r3
 800559e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055a2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	2b03      	cmp	r3, #3
 80055aa:	d062      	beq.n	8005672 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	2b03      	cmp	r3, #3
 80055b0:	f200 8081 	bhi.w	80056b6 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d024      	beq.n	8005604 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d17a      	bne.n	80056b6 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	ee07 3a90 	vmov	s15, r3
 80055c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ca:	eddf 6a8c 	vldr	s13, [pc, #560]	; 80057fc <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80055ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055d2:	4b89      	ldr	r3, [pc, #548]	; (80057f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80055d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055da:	ee07 3a90 	vmov	s15, r3
 80055de:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80055e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80055e6:	eddf 5a86 	vldr	s11, [pc, #536]	; 8005800 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80055ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80055ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80055f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80055fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005602:	e08f      	b.n	8005724 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005604:	4b7c      	ldr	r3, [pc, #496]	; (80057f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d005      	beq.n	800561c <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8005610:	4b79      	ldr	r3, [pc, #484]	; (80057f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	0f1b      	lsrs	r3, r3, #28
 8005616:	f003 030f 	and.w	r3, r3, #15
 800561a:	e006      	b.n	800562a <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800561c:	4b76      	ldr	r3, [pc, #472]	; (80057f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800561e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005622:	041b      	lsls	r3, r3, #16
 8005624:	0f1b      	lsrs	r3, r3, #28
 8005626:	f003 030f 	and.w	r3, r3, #15
 800562a:	4a76      	ldr	r2, [pc, #472]	; (8005804 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800562c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005630:	ee07 3a90 	vmov	s15, r3
 8005634:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	ee07 3a90 	vmov	s15, r3
 800563e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	ee07 3a90 	vmov	s15, r3
 800564c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005650:	ed97 6a02 	vldr	s12, [r7, #8]
 8005654:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8005800 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005658:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800565c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005660:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005664:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005668:	ee67 7a27 	vmul.f32	s15, s14, s15
 800566c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005670:	e058      	b.n	8005724 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	ee07 3a90 	vmov	s15, r3
 8005678:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800567c:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80057fc <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8005680:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005684:	4b5c      	ldr	r3, [pc, #368]	; (80057f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800568c:	ee07 3a90 	vmov	s15, r3
 8005690:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005694:	ed97 6a02 	vldr	s12, [r7, #8]
 8005698:	eddf 5a59 	vldr	s11, [pc, #356]	; 8005800 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800569c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80056a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80056a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80056ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056b4:	e036      	b.n	8005724 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80056b6:	4b50      	ldr	r3, [pc, #320]	; (80057f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d005      	beq.n	80056ce <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 80056c2:	4b4d      	ldr	r3, [pc, #308]	; (80057f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	0f1b      	lsrs	r3, r3, #28
 80056c8:	f003 030f 	and.w	r3, r3, #15
 80056cc:	e006      	b.n	80056dc <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 80056ce:	4b4a      	ldr	r3, [pc, #296]	; (80057f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80056d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80056d4:	041b      	lsls	r3, r3, #16
 80056d6:	0f1b      	lsrs	r3, r3, #28
 80056d8:	f003 030f 	and.w	r3, r3, #15
 80056dc:	4a49      	ldr	r2, [pc, #292]	; (8005804 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80056de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056e2:	ee07 3a90 	vmov	s15, r3
 80056e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	ee07 3a90 	vmov	s15, r3
 80056f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	ee07 3a90 	vmov	s15, r3
 80056fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005702:	ed97 6a02 	vldr	s12, [r7, #8]
 8005706:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005800 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800570a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800570e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005712:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005716:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800571a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800571e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005722:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005724:	4b34      	ldr	r3, [pc, #208]	; (80057f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005728:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d017      	beq.n	8005760 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005730:	4b31      	ldr	r3, [pc, #196]	; (80057f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005734:	0a5b      	lsrs	r3, r3, #9
 8005736:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800573a:	ee07 3a90 	vmov	s15, r3
 800573e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8005742:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005746:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800574a:	edd7 6a07 	vldr	s13, [r7, #28]
 800574e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005752:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005756:	ee17 2a90 	vmov	r2, s15
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	601a      	str	r2, [r3, #0]
 800575e:	e002      	b.n	8005766 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005766:	4b24      	ldr	r3, [pc, #144]	; (80057f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800576a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d017      	beq.n	80057a2 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005772:	4b21      	ldr	r3, [pc, #132]	; (80057f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005776:	0c1b      	lsrs	r3, r3, #16
 8005778:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800577c:	ee07 3a90 	vmov	s15, r3
 8005780:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005784:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005788:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800578c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005790:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005794:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005798:	ee17 2a90 	vmov	r2, s15
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	605a      	str	r2, [r3, #4]
 80057a0:	e002      	b.n	80057a8 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80057a8:	4b13      	ldr	r3, [pc, #76]	; (80057f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80057aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d017      	beq.n	80057e4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80057b4:	4b10      	ldr	r3, [pc, #64]	; (80057f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80057b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b8:	0e1b      	lsrs	r3, r3, #24
 80057ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057be:	ee07 3a90 	vmov	s15, r3
 80057c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80057c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057ca:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80057ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80057d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057da:	ee17 2a90 	vmov	r2, s15
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80057e2:	e002      	b.n	80057ea <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	609a      	str	r2, [r3, #8]
}
 80057ea:	bf00      	nop
 80057ec:	3724      	adds	r7, #36	; 0x24
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	46020c00 	.word	0x46020c00
 80057fc:	4b742400 	.word	0x4b742400
 8005800:	46000000 	.word	0x46000000
 8005804:	08009d60 	.word	0x08009d60

08005808 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005808:	b480      	push	{r7}
 800580a:	b089      	sub	sp, #36	; 0x24
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005810:	4ba6      	ldr	r3, [pc, #664]	; (8005aac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005818:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800581a:	4ba4      	ldr	r3, [pc, #656]	; (8005aac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800581c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581e:	f003 0303 	and.w	r3, r3, #3
 8005822:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8005824:	4ba1      	ldr	r3, [pc, #644]	; (8005aac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005828:	0a1b      	lsrs	r3, r3, #8
 800582a:	f003 030f 	and.w	r3, r3, #15
 800582e:	3301      	adds	r3, #1
 8005830:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8005832:	4b9e      	ldr	r3, [pc, #632]	; (8005aac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005836:	091b      	lsrs	r3, r3, #4
 8005838:	f003 0301 	and.w	r3, r3, #1
 800583c:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800583e:	4b9b      	ldr	r3, [pc, #620]	; (8005aac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005842:	08db      	lsrs	r3, r3, #3
 8005844:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	fb02 f303 	mul.w	r3, r2, r3
 800584e:	ee07 3a90 	vmov	s15, r3
 8005852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005856:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	2b03      	cmp	r3, #3
 800585e:	d062      	beq.n	8005926 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	2b03      	cmp	r3, #3
 8005864:	f200 8081 	bhi.w	800596a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	2b01      	cmp	r3, #1
 800586c:	d024      	beq.n	80058b8 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	2b02      	cmp	r3, #2
 8005872:	d17a      	bne.n	800596a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	ee07 3a90 	vmov	s15, r3
 800587a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800587e:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8005ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005886:	4b89      	ldr	r3, [pc, #548]	; (8005aac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800588a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800588e:	ee07 3a90 	vmov	s15, r3
 8005892:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005896:	ed97 6a02 	vldr	s12, [r7, #8]
 800589a:	eddf 5a86 	vldr	s11, [pc, #536]	; 8005ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800589e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80058a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80058a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80058ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058b6:	e08f      	b.n	80059d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80058b8:	4b7c      	ldr	r3, [pc, #496]	; (8005aac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d005      	beq.n	80058d0 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80058c4:	4b79      	ldr	r3, [pc, #484]	; (8005aac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	0f1b      	lsrs	r3, r3, #28
 80058ca:	f003 030f 	and.w	r3, r3, #15
 80058ce:	e006      	b.n	80058de <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 80058d0:	4b76      	ldr	r3, [pc, #472]	; (8005aac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80058d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80058d6:	041b      	lsls	r3, r3, #16
 80058d8:	0f1b      	lsrs	r3, r3, #28
 80058da:	f003 030f 	and.w	r3, r3, #15
 80058de:	4a76      	ldr	r2, [pc, #472]	; (8005ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80058e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058e4:	ee07 3a90 	vmov	s15, r3
 80058e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	ee07 3a90 	vmov	s15, r3
 80058f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	ee07 3a90 	vmov	s15, r3
 8005900:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005904:	ed97 6a02 	vldr	s12, [r7, #8]
 8005908:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8005ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800590c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005910:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005914:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005918:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800591c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005920:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005924:	e058      	b.n	80059d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	ee07 3a90 	vmov	s15, r3
 800592c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005930:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005934:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005938:	4b5c      	ldr	r3, [pc, #368]	; (8005aac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800593a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800593c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005940:	ee07 3a90 	vmov	s15, r3
 8005944:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005948:	ed97 6a02 	vldr	s12, [r7, #8]
 800594c:	eddf 5a59 	vldr	s11, [pc, #356]	; 8005ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005950:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005954:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005958:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800595c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005960:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005964:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005968:	e036      	b.n	80059d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800596a:	4b50      	ldr	r3, [pc, #320]	; (8005aac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d005      	beq.n	8005982 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8005976:	4b4d      	ldr	r3, [pc, #308]	; (8005aac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	0f1b      	lsrs	r3, r3, #28
 800597c:	f003 030f 	and.w	r3, r3, #15
 8005980:	e006      	b.n	8005990 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8005982:	4b4a      	ldr	r3, [pc, #296]	; (8005aac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005984:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005988:	041b      	lsls	r3, r3, #16
 800598a:	0f1b      	lsrs	r3, r3, #28
 800598c:	f003 030f 	and.w	r3, r3, #15
 8005990:	4a49      	ldr	r2, [pc, #292]	; (8005ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005996:	ee07 3a90 	vmov	s15, r3
 800599a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	ee07 3a90 	vmov	s15, r3
 80059a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	ee07 3a90 	vmov	s15, r3
 80059b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80059ba:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80059be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80059ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059d6:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80059d8:	4b34      	ldr	r3, [pc, #208]	; (8005aac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80059da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d017      	beq.n	8005a14 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80059e4:	4b31      	ldr	r3, [pc, #196]	; (8005aac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80059e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059e8:	0a5b      	lsrs	r3, r3, #9
 80059ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059ee:	ee07 3a90 	vmov	s15, r3
 80059f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80059f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059fa:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80059fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a0a:	ee17 2a90 	vmov	r2, s15
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	601a      	str	r2, [r3, #0]
 8005a12:	e002      	b.n	8005a1a <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005a1a:	4b24      	ldr	r3, [pc, #144]	; (8005aac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d017      	beq.n	8005a56 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005a26:	4b21      	ldr	r3, [pc, #132]	; (8005aac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a2a:	0c1b      	lsrs	r3, r3, #16
 8005a2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a30:	ee07 3a90 	vmov	s15, r3
 8005a34:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005a38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a3c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005a40:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a4c:	ee17 2a90 	vmov	r2, s15
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	605a      	str	r2, [r3, #4]
 8005a54:	e002      	b.n	8005a5c <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005a5c:	4b13      	ldr	r3, [pc, #76]	; (8005aac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d017      	beq.n	8005a98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005a68:	4b10      	ldr	r3, [pc, #64]	; (8005aac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a6c:	0e1b      	lsrs	r3, r3, #24
 8005a6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a72:	ee07 3a90 	vmov	s15, r3
 8005a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8005a7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a7e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005a82:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a8e:	ee17 2a90 	vmov	r2, s15
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005a96:	e002      	b.n	8005a9e <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	609a      	str	r2, [r3, #8]
}
 8005a9e:	bf00      	nop
 8005aa0:	3724      	adds	r7, #36	; 0x24
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	46020c00 	.word	0x46020c00
 8005ab0:	4b742400 	.word	0x4b742400
 8005ab4:	46000000 	.word	0x46000000
 8005ab8:	08009d60 	.word	0x08009d60

08005abc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b089      	sub	sp, #36	; 0x24
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005ac4:	4ba6      	ldr	r3, [pc, #664]	; (8005d60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005acc:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005ace:	4ba4      	ldr	r3, [pc, #656]	; (8005d60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad2:	f003 0303 	and.w	r3, r3, #3
 8005ad6:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8005ad8:	4ba1      	ldr	r3, [pc, #644]	; (8005d60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005adc:	0a1b      	lsrs	r3, r3, #8
 8005ade:	f003 030f 	and.w	r3, r3, #15
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8005ae6:	4b9e      	ldr	r3, [pc, #632]	; (8005d60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aea:	091b      	lsrs	r3, r3, #4
 8005aec:	f003 0301 	and.w	r3, r3, #1
 8005af0:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005af2:	4b9b      	ldr	r3, [pc, #620]	; (8005d60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005af6:	08db      	lsrs	r3, r3, #3
 8005af8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	fb02 f303 	mul.w	r3, r2, r3
 8005b02:	ee07 3a90 	vmov	s15, r3
 8005b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b0a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	2b03      	cmp	r3, #3
 8005b12:	d062      	beq.n	8005bda <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	2b03      	cmp	r3, #3
 8005b18:	f200 8081 	bhi.w	8005c1e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d024      	beq.n	8005b6c <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d17a      	bne.n	8005c1e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	ee07 3a90 	vmov	s15, r3
 8005b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b32:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8005d64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b3a:	4b89      	ldr	r3, [pc, #548]	; (8005d60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b42:	ee07 3a90 	vmov	s15, r3
 8005b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b4e:	eddf 5a86 	vldr	s11, [pc, #536]	; 8005d68 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b66:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8005b6a:	e08f      	b.n	8005c8c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005b6c:	4b7c      	ldr	r3, [pc, #496]	; (8005d60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d005      	beq.n	8005b84 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8005b78:	4b79      	ldr	r3, [pc, #484]	; (8005d60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	0f1b      	lsrs	r3, r3, #28
 8005b7e:	f003 030f 	and.w	r3, r3, #15
 8005b82:	e006      	b.n	8005b92 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8005b84:	4b76      	ldr	r3, [pc, #472]	; (8005d60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005b86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b8a:	041b      	lsls	r3, r3, #16
 8005b8c:	0f1b      	lsrs	r3, r3, #28
 8005b8e:	f003 030f 	and.w	r3, r3, #15
 8005b92:	4a76      	ldr	r2, [pc, #472]	; (8005d6c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b98:	ee07 3a90 	vmov	s15, r3
 8005b9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	ee07 3a90 	vmov	s15, r3
 8005ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	ee07 3a90 	vmov	s15, r3
 8005bb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bb8:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bbc:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8005d68 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005bc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005bd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bd4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005bd8:	e058      	b.n	8005c8c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	ee07 3a90 	vmov	s15, r3
 8005be0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005be4:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005d64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005be8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bec:	4b5c      	ldr	r3, [pc, #368]	; (8005d60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bf4:	ee07 3a90 	vmov	s15, r3
 8005bf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005bfc:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c00:	eddf 5a59 	vldr	s11, [pc, #356]	; 8005d68 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005c04:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005c08:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c10:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005c14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c18:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c1c:	e036      	b.n	8005c8c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005c1e:	4b50      	ldr	r3, [pc, #320]	; (8005d60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d005      	beq.n	8005c36 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8005c2a:	4b4d      	ldr	r3, [pc, #308]	; (8005d60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	0f1b      	lsrs	r3, r3, #28
 8005c30:	f003 030f 	and.w	r3, r3, #15
 8005c34:	e006      	b.n	8005c44 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8005c36:	4b4a      	ldr	r3, [pc, #296]	; (8005d60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005c3c:	041b      	lsls	r3, r3, #16
 8005c3e:	0f1b      	lsrs	r3, r3, #28
 8005c40:	f003 030f 	and.w	r3, r3, #15
 8005c44:	4a49      	ldr	r2, [pc, #292]	; (8005d6c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c4a:	ee07 3a90 	vmov	s15, r3
 8005c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	ee07 3a90 	vmov	s15, r3
 8005c58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	ee07 3a90 	vmov	s15, r3
 8005c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c6e:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005d68 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c8a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005c8c:	4b34      	ldr	r3, [pc, #208]	; (8005d60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d017      	beq.n	8005cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005c98:	4b31      	ldr	r3, [pc, #196]	; (8005d60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c9c:	0a5b      	lsrs	r3, r3, #9
 8005c9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ca2:	ee07 3a90 	vmov	s15, r3
 8005ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8005caa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005cae:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005cb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cbe:	ee17 2a90 	vmov	r2, s15
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	601a      	str	r2, [r3, #0]
 8005cc6:	e002      	b.n	8005cce <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005cce:	4b24      	ldr	r3, [pc, #144]	; (8005d60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d017      	beq.n	8005d0a <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005cda:	4b21      	ldr	r3, [pc, #132]	; (8005d60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cde:	0c1b      	lsrs	r3, r3, #16
 8005ce0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ce4:	ee07 3a90 	vmov	s15, r3
 8005ce8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005cec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005cf0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005cf4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d00:	ee17 2a90 	vmov	r2, s15
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	605a      	str	r2, [r3, #4]
 8005d08:	e002      	b.n	8005d10 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005d10:	4b13      	ldr	r3, [pc, #76]	; (8005d60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d017      	beq.n	8005d4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005d1c:	4b10      	ldr	r3, [pc, #64]	; (8005d60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d20:	0e1b      	lsrs	r3, r3, #24
 8005d22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d26:	ee07 3a90 	vmov	s15, r3
 8005d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8005d2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d32:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005d36:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d42:	ee17 2a90 	vmov	r2, s15
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005d4a:	e002      	b.n	8005d52 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	609a      	str	r2, [r3, #8]
}
 8005d52:	bf00      	nop
 8005d54:	3724      	adds	r7, #36	; 0x24
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	46020c00 	.word	0x46020c00
 8005d64:	4b742400 	.word	0x4b742400
 8005d68:	46000000 	.word	0x46000000
 8005d6c:	08009d60 	.word	0x08009d60

08005d70 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b08e      	sub	sp, #56	; 0x38
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005d7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d7e:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8005d82:	430b      	orrs	r3, r1
 8005d84:	d145      	bne.n	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005d86:	4baa      	ldr	r3, [pc, #680]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005d88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d90:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005d92:	4ba7      	ldr	r3, [pc, #668]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005d94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d98:	f003 0302 	and.w	r3, r3, #2
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d108      	bne.n	8005db2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005da6:	d104      	bne.n	8005db2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005da8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dac:	637b      	str	r3, [r7, #52]	; 0x34
 8005dae:	f001 b987 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005db2:	4b9f      	ldr	r3, [pc, #636]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005db4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005db8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005dc0:	d114      	bne.n	8005dec <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8005dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dc8:	d110      	bne.n	8005dec <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005dca:	4b99      	ldr	r3, [pc, #612]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005dcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dd8:	d103      	bne.n	8005de2 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8005dda:	23fa      	movs	r3, #250	; 0xfa
 8005ddc:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005dde:	f001 b96f 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8005de2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005de6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005de8:	f001 b96a 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8005dec:	4b90      	ldr	r3, [pc, #576]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005df4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005df8:	d107      	bne.n	8005e0a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8005dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e00:	d103      	bne.n	8005e0a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8005e02:	4b8c      	ldr	r3, [pc, #560]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005e04:	637b      	str	r3, [r7, #52]	; 0x34
 8005e06:	f001 b95b 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	637b      	str	r3, [r7, #52]	; 0x34
 8005e0e:	f001 b957 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005e12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e16:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8005e1a:	430b      	orrs	r3, r1
 8005e1c:	d151      	bne.n	8005ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005e1e:	4b84      	ldr	r3, [pc, #528]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005e20:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005e24:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8005e28:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2c:	2b80      	cmp	r3, #128	; 0x80
 8005e2e:	d035      	beq.n	8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8005e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e32:	2b80      	cmp	r3, #128	; 0x80
 8005e34:	d841      	bhi.n	8005eba <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e38:	2b60      	cmp	r3, #96	; 0x60
 8005e3a:	d02a      	beq.n	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8005e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3e:	2b60      	cmp	r3, #96	; 0x60
 8005e40:	d83b      	bhi.n	8005eba <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e44:	2b40      	cmp	r3, #64	; 0x40
 8005e46:	d009      	beq.n	8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4a:	2b40      	cmp	r3, #64	; 0x40
 8005e4c:	d835      	bhi.n	8005eba <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00c      	beq.n	8005e6e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8005e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e56:	2b20      	cmp	r3, #32
 8005e58:	d012      	beq.n	8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005e5a:	e02e      	b.n	8005eba <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e60:	4618      	mov	r0, r3
 8005e62:	f7ff fb77 	bl	8005554 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e68:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e6a:	f001 b929 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e6e:	f107 0318 	add.w	r3, r7, #24
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7ff fcc8 	bl	8005808 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e7c:	f001 b920 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e80:	f107 030c 	add.w	r3, r7, #12
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7ff fe19 	bl	8005abc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e8e:	f001 b917 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005e92:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005e96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e98:	f001 b912 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e9c:	4b64      	ldr	r3, [pc, #400]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ea4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ea8:	d103      	bne.n	8005eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8005eaa:	4b63      	ldr	r3, [pc, #396]	; (8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005eac:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005eae:	f001 b907 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005eb6:	f001 b903 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ebe:	f001 b8ff 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005ec2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ec6:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8005eca:	430b      	orrs	r3, r1
 8005ecc:	d158      	bne.n	8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005ece:	4b58      	ldr	r3, [pc, #352]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005ed0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005ed4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ed8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005edc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ee0:	d03b      	beq.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8005ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ee8:	d846      	bhi.n	8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ef0:	d02e      	beq.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8005ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ef8:	d83e      	bhi.n	8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f00:	d00b      	beq.n	8005f1a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8005f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f08:	d836      	bhi.n	8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00d      	beq.n	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8005f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f16:	d012      	beq.n	8005f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8005f18:	e02e      	b.n	8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f7ff fb18 	bl	8005554 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f26:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f28:	f001 b8ca 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f2c:	f107 0318 	add.w	r3, r7, #24
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7ff fc69 	bl	8005808 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f3a:	f001 b8c1 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f3e:	f107 030c 	add.w	r3, r7, #12
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7ff fdba 	bl	8005abc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f4c:	f001 b8b8 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005f50:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005f54:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f56:	f001 b8b3 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f5a:	4b35      	ldr	r3, [pc, #212]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f66:	d103      	bne.n	8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8005f68:	4b33      	ldr	r3, [pc, #204]	; (8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005f6a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005f6c:	f001 b8a8 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005f70:	2300      	movs	r3, #0
 8005f72:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f74:	f001 b8a4 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f7c:	f001 b8a0 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8005f80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f84:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8005f88:	430b      	orrs	r3, r1
 8005f8a:	d16e      	bne.n	800606a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8005f8c:	4b28      	ldr	r3, [pc, #160]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f92:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005f96:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005f9e:	d034      	beq.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 8005fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005fa6:	d85c      	bhi.n	8006062 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8005fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005faa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fae:	d00b      	beq.n	8005fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8005fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fb6:	d854      	bhi.n	8006062 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8005fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d016      	beq.n	8005fec <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8005fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005fc4:	d009      	beq.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005fc6:	e04c      	b.n	8006062 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005fc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f7ff fac1 	bl	8005554 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fd6:	f001 b873 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fda:	f107 0318 	add.w	r3, r7, #24
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7ff fc12 	bl	8005808 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fe8:	f001 b86a 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8005fec:	4b10      	ldr	r3, [pc, #64]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ff4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ff8:	d103      	bne.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 8005ffa:	4b10      	ldr	r3, [pc, #64]	; (800603c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005ffc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005ffe:	f001 b85f 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006002:	2300      	movs	r3, #0
 8006004:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006006:	f001 b85b 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800600a:	4b09      	ldr	r3, [pc, #36]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0320 	and.w	r3, r3, #32
 8006012:	2b20      	cmp	r3, #32
 8006014:	d121      	bne.n	800605a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006016:	4b06      	ldr	r3, [pc, #24]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00e      	beq.n	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8006022:	4b03      	ldr	r3, [pc, #12]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	0e1b      	lsrs	r3, r3, #24
 8006028:	f003 030f 	and.w	r3, r3, #15
 800602c:	e00f      	b.n	800604e <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800602e:	bf00      	nop
 8006030:	46020c00 	.word	0x46020c00
 8006034:	0007a120 	.word	0x0007a120
 8006038:	00f42400 	.word	0x00f42400
 800603c:	02dc6c00 	.word	0x02dc6c00
 8006040:	4ba7      	ldr	r3, [pc, #668]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006042:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006046:	041b      	lsls	r3, r3, #16
 8006048:	0e1b      	lsrs	r3, r3, #24
 800604a:	f003 030f 	and.w	r3, r3, #15
 800604e:	4aa5      	ldr	r2, [pc, #660]	; (80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8006050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006054:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006056:	f001 b833 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800605a:	2300      	movs	r3, #0
 800605c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800605e:	f001 b82f 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8006062:	2300      	movs	r3, #0
 8006064:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006066:	f001 b82b 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800606a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800606e:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8006072:	430b      	orrs	r3, r1
 8006074:	d17f      	bne.n	8006176 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006076:	4b9a      	ldr	r3, [pc, #616]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006078:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800607c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006080:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8006082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006084:	2b00      	cmp	r3, #0
 8006086:	d165      	bne.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006088:	4b95      	ldr	r3, [pc, #596]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800608a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800608e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006092:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8006094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006096:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800609a:	d034      	beq.n	8006106 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800609c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80060a2:	d853      	bhi.n	800614c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80060a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060aa:	d00b      	beq.n	80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80060ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060b2:	d84b      	bhi.n	800614c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80060b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d016      	beq.n	80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 80060ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80060c0:	d009      	beq.n	80060d6 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80060c2:	e043      	b.n	800614c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80060c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060c8:	4618      	mov	r0, r3
 80060ca:	f7ff fa43 	bl	8005554 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80060ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80060d2:	f000 bff5 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060d6:	f107 0318 	add.w	r3, r7, #24
 80060da:	4618      	mov	r0, r3
 80060dc:	f7ff fb94 	bl	8005808 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80060e4:	f000 bfec 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80060e8:	4b7d      	ldr	r3, [pc, #500]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060f4:	d103      	bne.n	80060fe <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 80060f6:	4b7c      	ldr	r3, [pc, #496]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80060f8:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80060fa:	f000 bfe1 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 80060fe:	2300      	movs	r3, #0
 8006100:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006102:	f000 bfdd 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006106:	4b76      	ldr	r3, [pc, #472]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0320 	and.w	r3, r3, #32
 800610e:	2b20      	cmp	r3, #32
 8006110:	d118      	bne.n	8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006112:	4b73      	ldr	r3, [pc, #460]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d005      	beq.n	800612a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800611e:	4b70      	ldr	r3, [pc, #448]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	0e1b      	lsrs	r3, r3, #24
 8006124:	f003 030f 	and.w	r3, r3, #15
 8006128:	e006      	b.n	8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 800612a:	4b6d      	ldr	r3, [pc, #436]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800612c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006130:	041b      	lsls	r3, r3, #16
 8006132:	0e1b      	lsrs	r3, r3, #24
 8006134:	f003 030f 	and.w	r3, r3, #15
 8006138:	4a6a      	ldr	r2, [pc, #424]	; (80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800613a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800613e:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006140:	f000 bfbe 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8006144:	2300      	movs	r3, #0
 8006146:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006148:	f000 bfba 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 800614c:	2300      	movs	r3, #0
 800614e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006150:	f000 bfb6 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8006154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006156:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800615a:	d108      	bne.n	800616e <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800615c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006160:	4618      	mov	r0, r3
 8006162:	f7ff f9f7 	bl	8005554 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006168:	637b      	str	r3, [r7, #52]	; 0x34
 800616a:	f000 bfa9 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 800616e:	2300      	movs	r3, #0
 8006170:	637b      	str	r3, [r7, #52]	; 0x34
 8006172:	f000 bfa5 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8006176:	e9d7 2300 	ldrd	r2, r3, [r7]
 800617a:	1e51      	subs	r1, r2, #1
 800617c:	430b      	orrs	r3, r1
 800617e:	d136      	bne.n	80061ee <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006180:	4b57      	ldr	r3, [pc, #348]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006186:	f003 0303 	and.w	r3, r3, #3
 800618a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800618c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618e:	2b00      	cmp	r3, #0
 8006190:	d104      	bne.n	800619c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8006192:	f7fe fb8d 	bl	80048b0 <HAL_RCC_GetPCLK2Freq>
 8006196:	6378      	str	r0, [r7, #52]	; 0x34
 8006198:	f000 bf92 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800619c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d104      	bne.n	80061ac <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80061a2:	f7fe fa55 	bl	8004650 <HAL_RCC_GetSysClockFreq>
 80061a6:	6378      	str	r0, [r7, #52]	; 0x34
 80061a8:	f000 bf8a 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80061ac:	4b4c      	ldr	r3, [pc, #304]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061b8:	d106      	bne.n	80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 80061ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d103      	bne.n	80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 80061c0:	4b4a      	ldr	r3, [pc, #296]	; (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80061c2:	637b      	str	r3, [r7, #52]	; 0x34
 80061c4:	f000 bf7c 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80061c8:	4b45      	ldr	r3, [pc, #276]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80061ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80061ce:	f003 0302 	and.w	r3, r3, #2
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d107      	bne.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80061d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d8:	2b03      	cmp	r3, #3
 80061da:	d104      	bne.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 80061dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061e0:	637b      	str	r3, [r7, #52]	; 0x34
 80061e2:	f000 bf6d 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80061e6:	2300      	movs	r3, #0
 80061e8:	637b      	str	r3, [r7, #52]	; 0x34
 80061ea:	f000 bf69 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 80061ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061f2:	1e91      	subs	r1, r2, #2
 80061f4:	430b      	orrs	r3, r1
 80061f6:	d136      	bne.n	8006266 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80061f8:	4b39      	ldr	r3, [pc, #228]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80061fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061fe:	f003 030c 	and.w	r3, r3, #12
 8006202:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006206:	2b00      	cmp	r3, #0
 8006208:	d104      	bne.n	8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800620a:	f7fe fb3d 	bl	8004888 <HAL_RCC_GetPCLK1Freq>
 800620e:	6378      	str	r0, [r7, #52]	; 0x34
 8006210:	f000 bf56 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8006214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006216:	2b04      	cmp	r3, #4
 8006218:	d104      	bne.n	8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800621a:	f7fe fa19 	bl	8004650 <HAL_RCC_GetSysClockFreq>
 800621e:	6378      	str	r0, [r7, #52]	; 0x34
 8006220:	f000 bf4e 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006224:	4b2e      	ldr	r3, [pc, #184]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800622c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006230:	d106      	bne.n	8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8006232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006234:	2b08      	cmp	r3, #8
 8006236:	d103      	bne.n	8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 8006238:	4b2c      	ldr	r3, [pc, #176]	; (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800623a:	637b      	str	r3, [r7, #52]	; 0x34
 800623c:	f000 bf40 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006240:	4b27      	ldr	r3, [pc, #156]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006242:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006246:	f003 0302 	and.w	r3, r3, #2
 800624a:	2b02      	cmp	r3, #2
 800624c:	d107      	bne.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 800624e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006250:	2b0c      	cmp	r3, #12
 8006252:	d104      	bne.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 8006254:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006258:	637b      	str	r3, [r7, #52]	; 0x34
 800625a:	f000 bf31 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800625e:	2300      	movs	r3, #0
 8006260:	637b      	str	r3, [r7, #52]	; 0x34
 8006262:	f000 bf2d 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006266:	e9d7 2300 	ldrd	r2, r3, [r7]
 800626a:	1f11      	subs	r1, r2, #4
 800626c:	430b      	orrs	r3, r1
 800626e:	d13f      	bne.n	80062f0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006270:	4b1b      	ldr	r3, [pc, #108]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006272:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006276:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800627a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800627c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627e:	2b00      	cmp	r3, #0
 8006280:	d104      	bne.n	800628c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006282:	f7fe fb01 	bl	8004888 <HAL_RCC_GetPCLK1Freq>
 8006286:	6378      	str	r0, [r7, #52]	; 0x34
 8006288:	f000 bf1a 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800628c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628e:	2b10      	cmp	r3, #16
 8006290:	d104      	bne.n	800629c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006292:	f7fe f9dd 	bl	8004650 <HAL_RCC_GetSysClockFreq>
 8006296:	6378      	str	r0, [r7, #52]	; 0x34
 8006298:	f000 bf12 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800629c:	4b10      	ldr	r3, [pc, #64]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062a8:	d106      	bne.n	80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 80062aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ac:	2b20      	cmp	r3, #32
 80062ae:	d103      	bne.n	80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 80062b0:	4b0e      	ldr	r3, [pc, #56]	; (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80062b2:	637b      	str	r3, [r7, #52]	; 0x34
 80062b4:	f000 bf04 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80062b8:	4b09      	ldr	r3, [pc, #36]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80062ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80062be:	f003 0302 	and.w	r3, r3, #2
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d107      	bne.n	80062d6 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 80062c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c8:	2b30      	cmp	r3, #48	; 0x30
 80062ca:	d104      	bne.n	80062d6 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 80062cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062d0:	637b      	str	r3, [r7, #52]	; 0x34
 80062d2:	f000 bef5 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80062d6:	2300      	movs	r3, #0
 80062d8:	637b      	str	r3, [r7, #52]	; 0x34
 80062da:	f000 bef1 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80062de:	bf00      	nop
 80062e0:	46020c00 	.word	0x46020c00
 80062e4:	08009d60 	.word	0x08009d60
 80062e8:	02dc6c00 	.word	0x02dc6c00
 80062ec:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 80062f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062f4:	f1a2 0108 	sub.w	r1, r2, #8
 80062f8:	430b      	orrs	r3, r1
 80062fa:	d136      	bne.n	800636a <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80062fc:	4ba4      	ldr	r3, [pc, #656]	; (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80062fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006302:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006306:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630a:	2b00      	cmp	r3, #0
 800630c:	d104      	bne.n	8006318 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800630e:	f7fe fabb 	bl	8004888 <HAL_RCC_GetPCLK1Freq>
 8006312:	6378      	str	r0, [r7, #52]	; 0x34
 8006314:	f000 bed4 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8006318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631a:	2b40      	cmp	r3, #64	; 0x40
 800631c:	d104      	bne.n	8006328 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800631e:	f7fe f997 	bl	8004650 <HAL_RCC_GetSysClockFreq>
 8006322:	6378      	str	r0, [r7, #52]	; 0x34
 8006324:	f000 becc 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006328:	4b99      	ldr	r3, [pc, #612]	; (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006334:	d106      	bne.n	8006344 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8006336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006338:	2b80      	cmp	r3, #128	; 0x80
 800633a:	d103      	bne.n	8006344 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 800633c:	4b95      	ldr	r3, [pc, #596]	; (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800633e:	637b      	str	r3, [r7, #52]	; 0x34
 8006340:	f000 bebe 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006344:	4b92      	ldr	r3, [pc, #584]	; (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006346:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800634a:	f003 0302 	and.w	r3, r3, #2
 800634e:	2b02      	cmp	r3, #2
 8006350:	d107      	bne.n	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 8006352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006354:	2bc0      	cmp	r3, #192	; 0xc0
 8006356:	d104      	bne.n	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 8006358:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800635c:	637b      	str	r3, [r7, #52]	; 0x34
 800635e:	f000 beaf 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8006362:	2300      	movs	r3, #0
 8006364:	637b      	str	r3, [r7, #52]	; 0x34
 8006366:	f000 beab 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800636a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800636e:	f1a2 0110 	sub.w	r1, r2, #16
 8006372:	430b      	orrs	r3, r1
 8006374:	d139      	bne.n	80063ea <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006376:	4b86      	ldr	r3, [pc, #536]	; (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800637c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006380:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006384:	2b00      	cmp	r3, #0
 8006386:	d104      	bne.n	8006392 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006388:	f7fe fa7e 	bl	8004888 <HAL_RCC_GetPCLK1Freq>
 800638c:	6378      	str	r0, [r7, #52]	; 0x34
 800638e:	f000 be97 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8006392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006394:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006398:	d104      	bne.n	80063a4 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800639a:	f7fe f959 	bl	8004650 <HAL_RCC_GetSysClockFreq>
 800639e:	6378      	str	r0, [r7, #52]	; 0x34
 80063a0:	f000 be8e 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80063a4:	4b7a      	ldr	r3, [pc, #488]	; (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063b0:	d107      	bne.n	80063c2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 80063b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063b8:	d103      	bne.n	80063c2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 80063ba:	4b76      	ldr	r3, [pc, #472]	; (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80063bc:	637b      	str	r3, [r7, #52]	; 0x34
 80063be:	f000 be7f 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80063c2:	4b73      	ldr	r3, [pc, #460]	; (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80063c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063c8:	f003 0302 	and.w	r3, r3, #2
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	d108      	bne.n	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 80063d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063d6:	d104      	bne.n	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 80063d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063dc:	637b      	str	r3, [r7, #52]	; 0x34
 80063de:	f000 be6f 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80063e2:	2300      	movs	r3, #0
 80063e4:	637b      	str	r3, [r7, #52]	; 0x34
 80063e6:	f000 be6b 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80063ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063ee:	f1a2 0120 	sub.w	r1, r2, #32
 80063f2:	430b      	orrs	r3, r1
 80063f4:	d158      	bne.n	80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80063f6:	4b66      	ldr	r3, [pc, #408]	; (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80063f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80063fc:	f003 0307 	and.w	r3, r3, #7
 8006400:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006404:	2b00      	cmp	r3, #0
 8006406:	d104      	bne.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8006408:	f7fe fa66 	bl	80048d8 <HAL_RCC_GetPCLK3Freq>
 800640c:	6378      	str	r0, [r7, #52]	; 0x34
 800640e:	f000 be57 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006414:	2b01      	cmp	r3, #1
 8006416:	d104      	bne.n	8006422 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006418:	f7fe f91a 	bl	8004650 <HAL_RCC_GetSysClockFreq>
 800641c:	6378      	str	r0, [r7, #52]	; 0x34
 800641e:	f000 be4f 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006422:	4b5b      	ldr	r3, [pc, #364]	; (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800642a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800642e:	d106      	bne.n	800643e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 8006430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006432:	2b02      	cmp	r3, #2
 8006434:	d103      	bne.n	800643e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 8006436:	4b57      	ldr	r3, [pc, #348]	; (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006438:	637b      	str	r3, [r7, #52]	; 0x34
 800643a:	f000 be41 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800643e:	4b54      	ldr	r3, [pc, #336]	; (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006440:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006444:	f003 0302 	and.w	r3, r3, #2
 8006448:	2b02      	cmp	r3, #2
 800644a:	d107      	bne.n	800645c <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 800644c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644e:	2b03      	cmp	r3, #3
 8006450:	d104      	bne.n	800645c <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 8006452:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006456:	637b      	str	r3, [r7, #52]	; 0x34
 8006458:	f000 be32 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800645c:	4b4c      	ldr	r3, [pc, #304]	; (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0320 	and.w	r3, r3, #32
 8006464:	2b20      	cmp	r3, #32
 8006466:	d11b      	bne.n	80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8006468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646a:	2b04      	cmp	r3, #4
 800646c:	d118      	bne.n	80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800646e:	4b48      	ldr	r3, [pc, #288]	; (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d005      	beq.n	8006486 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 800647a:	4b45      	ldr	r3, [pc, #276]	; (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	0e1b      	lsrs	r3, r3, #24
 8006480:	f003 030f 	and.w	r3, r3, #15
 8006484:	e006      	b.n	8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006486:	4b42      	ldr	r3, [pc, #264]	; (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006488:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800648c:	041b      	lsls	r3, r3, #16
 800648e:	0e1b      	lsrs	r3, r3, #24
 8006490:	f003 030f 	and.w	r3, r3, #15
 8006494:	4a40      	ldr	r2, [pc, #256]	; (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8006496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800649a:	637b      	str	r3, [r7, #52]	; 0x34
 800649c:	f000 be10 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80064a0:	2300      	movs	r3, #0
 80064a2:	637b      	str	r3, [r7, #52]	; 0x34
 80064a4:	f000 be0c 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80064a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064ac:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80064b0:	430b      	orrs	r3, r1
 80064b2:	d173      	bne.n	800659c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80064b4:	4b36      	ldr	r3, [pc, #216]	; (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80064b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80064ba:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80064be:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80064c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064c6:	d104      	bne.n	80064d2 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80064c8:	f7fe f8c2 	bl	8004650 <HAL_RCC_GetSysClockFreq>
 80064cc:	6378      	str	r0, [r7, #52]	; 0x34
 80064ce:	f000 bdf7 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80064d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064d8:	d108      	bne.n	80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064da:	f107 0318 	add.w	r3, r7, #24
 80064de:	4618      	mov	r0, r3
 80064e0:	f7ff f992 	bl	8005808 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80064e4:	6a3b      	ldr	r3, [r7, #32]
 80064e6:	637b      	str	r3, [r7, #52]	; 0x34
 80064e8:	f000 bdea 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80064ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d104      	bne.n	80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80064f2:	f7fe f9af 	bl	8004854 <HAL_RCC_GetHCLKFreq>
 80064f6:	6378      	str	r0, [r7, #52]	; 0x34
 80064f8:	f000 bde2 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80064fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fe:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006502:	d122      	bne.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006504:	4b22      	ldr	r3, [pc, #136]	; (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0320 	and.w	r3, r3, #32
 800650c:	2b20      	cmp	r3, #32
 800650e:	d118      	bne.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006510:	4b1f      	ldr	r3, [pc, #124]	; (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006518:	2b00      	cmp	r3, #0
 800651a:	d005      	beq.n	8006528 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 800651c:	4b1c      	ldr	r3, [pc, #112]	; (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	0e1b      	lsrs	r3, r3, #24
 8006522:	f003 030f 	and.w	r3, r3, #15
 8006526:	e006      	b.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8006528:	4b19      	ldr	r3, [pc, #100]	; (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800652a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800652e:	041b      	lsls	r3, r3, #16
 8006530:	0e1b      	lsrs	r3, r3, #24
 8006532:	f003 030f 	and.w	r3, r3, #15
 8006536:	4a18      	ldr	r2, [pc, #96]	; (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8006538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800653c:	637b      	str	r3, [r7, #52]	; 0x34
 800653e:	f000 bdbf 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8006542:	2300      	movs	r3, #0
 8006544:	637b      	str	r3, [r7, #52]	; 0x34
 8006546:	f000 bdbb 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800654a:	4b11      	ldr	r3, [pc, #68]	; (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006552:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006556:	d107      	bne.n	8006568 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 8006558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800655e:	d103      	bne.n	8006568 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 8006560:	4b0c      	ldr	r3, [pc, #48]	; (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006562:	637b      	str	r3, [r7, #52]	; 0x34
 8006564:	f000 bdac 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006568:	4b09      	ldr	r3, [pc, #36]	; (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006574:	d107      	bne.n	8006586 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006578:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800657c:	d103      	bne.n	8006586 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 800657e:	4b05      	ldr	r3, [pc, #20]	; (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006580:	637b      	str	r3, [r7, #52]	; 0x34
 8006582:	f000 bd9d 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8006586:	2300      	movs	r3, #0
 8006588:	637b      	str	r3, [r7, #52]	; 0x34
 800658a:	f000 bd99 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800658e:	bf00      	nop
 8006590:	46020c00 	.word	0x46020c00
 8006594:	00f42400 	.word	0x00f42400
 8006598:	08009d60 	.word	0x08009d60
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800659c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065a0:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80065a4:	430b      	orrs	r3, r1
 80065a6:	d158      	bne.n	800665a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80065a8:	4bad      	ldr	r3, [pc, #692]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80065aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80065ae:	f003 0307 	and.w	r3, r3, #7
 80065b2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80065b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b6:	2b04      	cmp	r3, #4
 80065b8:	d84b      	bhi.n	8006652 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80065ba:	a201      	add	r2, pc, #4	; (adr r2, 80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80065bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c0:	080065f9 	.word	0x080065f9
 80065c4:	080065d5 	.word	0x080065d5
 80065c8:	080065e7 	.word	0x080065e7
 80065cc:	08006603 	.word	0x08006603
 80065d0:	0800660d 	.word	0x0800660d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80065d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065d8:	4618      	mov	r0, r3
 80065da:	f7fe ffbb 	bl	8005554 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80065de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065e2:	f000 bd6d 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065e6:	f107 030c 	add.w	r3, r7, #12
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7ff fa66 	bl	8005abc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065f4:	f000 bd64 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80065f8:	f7fe f92c 	bl	8004854 <HAL_RCC_GetHCLKFreq>
 80065fc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80065fe:	f000 bd5f 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006602:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006606:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006608:	f000 bd5a 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800660c:	4b94      	ldr	r3, [pc, #592]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 0320 	and.w	r3, r3, #32
 8006614:	2b20      	cmp	r3, #32
 8006616:	d118      	bne.n	800664a <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006618:	4b91      	ldr	r3, [pc, #580]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006620:	2b00      	cmp	r3, #0
 8006622:	d005      	beq.n	8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 8006624:	4b8e      	ldr	r3, [pc, #568]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	0e1b      	lsrs	r3, r3, #24
 800662a:	f003 030f 	and.w	r3, r3, #15
 800662e:	e006      	b.n	800663e <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 8006630:	4b8b      	ldr	r3, [pc, #556]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006632:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006636:	041b      	lsls	r3, r3, #16
 8006638:	0e1b      	lsrs	r3, r3, #24
 800663a:	f003 030f 	and.w	r3, r3, #15
 800663e:	4a89      	ldr	r2, [pc, #548]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8006640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006644:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006646:	f000 bd3b 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800664a:	2300      	movs	r3, #0
 800664c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800664e:	f000 bd37 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006652:	2300      	movs	r3, #0
 8006654:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006656:	f000 bd33 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800665a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800665e:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8006662:	430b      	orrs	r3, r1
 8006664:	d167      	bne.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8006666:	4b7e      	ldr	r3, [pc, #504]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006668:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800666c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006670:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006674:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006678:	d036      	beq.n	80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 800667a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006680:	d855      	bhi.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8006682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006684:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006688:	d029      	beq.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800668a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006690:	d84d      	bhi.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8006692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006694:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006698:	d013      	beq.n	80066c2 <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 800669a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066a0:	d845      	bhi.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 80066a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d015      	beq.n	80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 80066a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066ae:	d13e      	bne.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80066b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066b4:	4618      	mov	r0, r3
 80066b6:	f7fe ff4d 	bl	8005554 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80066ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066be:	f000 bcff 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066c2:	f107 030c 	add.w	r3, r7, #12
 80066c6:	4618      	mov	r0, r3
 80066c8:	f7ff f9f8 	bl	8005abc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066d0:	f000 bcf6 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80066d4:	f7fe f8be 	bl	8004854 <HAL_RCC_GetHCLKFreq>
 80066d8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80066da:	f000 bcf1 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80066de:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80066e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066e4:	f000 bcec 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80066e8:	4b5d      	ldr	r3, [pc, #372]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 0320 	and.w	r3, r3, #32
 80066f0:	2b20      	cmp	r3, #32
 80066f2:	d118      	bne.n	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80066f4:	4b5a      	ldr	r3, [pc, #360]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d005      	beq.n	800670c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8006700:	4b57      	ldr	r3, [pc, #348]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	0e1b      	lsrs	r3, r3, #24
 8006706:	f003 030f 	and.w	r3, r3, #15
 800670a:	e006      	b.n	800671a <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 800670c:	4b54      	ldr	r3, [pc, #336]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800670e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006712:	041b      	lsls	r3, r3, #16
 8006714:	0e1b      	lsrs	r3, r3, #24
 8006716:	f003 030f 	and.w	r3, r3, #15
 800671a:	4a52      	ldr	r2, [pc, #328]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800671c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006720:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006722:	f000 bccd 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006726:	2300      	movs	r3, #0
 8006728:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800672a:	f000 bcc9 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800672e:	2300      	movs	r3, #0
 8006730:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006732:	f000 bcc5 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8006736:	e9d7 2300 	ldrd	r2, r3, [r7]
 800673a:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800673e:	430b      	orrs	r3, r1
 8006740:	d14c      	bne.n	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006742:	4b47      	ldr	r3, [pc, #284]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006748:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800674c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800674e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006750:	2b00      	cmp	r3, #0
 8006752:	d104      	bne.n	800675e <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006754:	f7fe f898 	bl	8004888 <HAL_RCC_GetPCLK1Freq>
 8006758:	6378      	str	r0, [r7, #52]	; 0x34
 800675a:	f000 bcb1 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800675e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006764:	d104      	bne.n	8006770 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006766:	f7fd ff73 	bl	8004650 <HAL_RCC_GetSysClockFreq>
 800676a:	6378      	str	r0, [r7, #52]	; 0x34
 800676c:	f000 bca8 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006770:	4b3b      	ldr	r3, [pc, #236]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800677c:	d107      	bne.n	800678e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 800677e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006780:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006784:	d103      	bne.n	800678e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 8006786:	4b38      	ldr	r3, [pc, #224]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006788:	637b      	str	r3, [r7, #52]	; 0x34
 800678a:	f000 bc99 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800678e:	4b34      	ldr	r3, [pc, #208]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0320 	and.w	r3, r3, #32
 8006796:	2b20      	cmp	r3, #32
 8006798:	d11c      	bne.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 800679a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067a0:	d118      	bne.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80067a2:	4b2f      	ldr	r3, [pc, #188]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d005      	beq.n	80067ba <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 80067ae:	4b2c      	ldr	r3, [pc, #176]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	0e1b      	lsrs	r3, r3, #24
 80067b4:	f003 030f 	and.w	r3, r3, #15
 80067b8:	e006      	b.n	80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 80067ba:	4b29      	ldr	r3, [pc, #164]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80067bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80067c0:	041b      	lsls	r3, r3, #16
 80067c2:	0e1b      	lsrs	r3, r3, #24
 80067c4:	f003 030f 	and.w	r3, r3, #15
 80067c8:	4a26      	ldr	r2, [pc, #152]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80067ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067ce:	637b      	str	r3, [r7, #52]	; 0x34
 80067d0:	f000 bc76 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80067d4:	2300      	movs	r3, #0
 80067d6:	637b      	str	r3, [r7, #52]	; 0x34
 80067d8:	f000 bc72 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80067dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067e0:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 80067e4:	430b      	orrs	r3, r1
 80067e6:	d152      	bne.n	800688e <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80067e8:	4b1d      	ldr	r3, [pc, #116]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80067ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80067ee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80067f2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80067f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d104      	bne.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80067fa:	f7fe f845 	bl	8004888 <HAL_RCC_GetPCLK1Freq>
 80067fe:	6378      	str	r0, [r7, #52]	; 0x34
 8006800:	f000 bc5e 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8006804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800680a:	d104      	bne.n	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800680c:	f7fd ff20 	bl	8004650 <HAL_RCC_GetSysClockFreq>
 8006810:	6378      	str	r0, [r7, #52]	; 0x34
 8006812:	f000 bc55 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006816:	4b12      	ldr	r3, [pc, #72]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800681e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006822:	d107      	bne.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 8006824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006826:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800682a:	d103      	bne.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 800682c:	4b0e      	ldr	r3, [pc, #56]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800682e:	637b      	str	r3, [r7, #52]	; 0x34
 8006830:	f000 bc46 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8006834:	4b0a      	ldr	r3, [pc, #40]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 0320 	and.w	r3, r3, #32
 800683c:	2b20      	cmp	r3, #32
 800683e:	d122      	bne.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 8006840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006842:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006846:	d11e      	bne.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006848:	4b05      	ldr	r3, [pc, #20]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006850:	2b00      	cmp	r3, #0
 8006852:	d00b      	beq.n	800686c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 8006854:	4b02      	ldr	r3, [pc, #8]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	0e1b      	lsrs	r3, r3, #24
 800685a:	f003 030f 	and.w	r3, r3, #15
 800685e:	e00c      	b.n	800687a <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8006860:	46020c00 	.word	0x46020c00
 8006864:	08009d60 	.word	0x08009d60
 8006868:	00f42400 	.word	0x00f42400
 800686c:	4ba1      	ldr	r3, [pc, #644]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800686e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006872:	041b      	lsls	r3, r3, #16
 8006874:	0e1b      	lsrs	r3, r3, #24
 8006876:	f003 030f 	and.w	r3, r3, #15
 800687a:	4a9f      	ldr	r2, [pc, #636]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800687c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006880:	637b      	str	r3, [r7, #52]	; 0x34
 8006882:	f000 bc1d 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8006886:	2300      	movs	r3, #0
 8006888:	637b      	str	r3, [r7, #52]	; 0x34
 800688a:	f000 bc19 	b.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800688e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006892:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006896:	430b      	orrs	r3, r1
 8006898:	d151      	bne.n	800693e <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800689a:	4b96      	ldr	r3, [pc, #600]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800689c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80068a0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80068a4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80068a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a8:	2bc0      	cmp	r3, #192	; 0xc0
 80068aa:	d024      	beq.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 80068ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ae:	2bc0      	cmp	r3, #192	; 0xc0
 80068b0:	d842      	bhi.n	8006938 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 80068b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b4:	2b80      	cmp	r3, #128	; 0x80
 80068b6:	d00d      	beq.n	80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80068b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ba:	2b80      	cmp	r3, #128	; 0x80
 80068bc:	d83c      	bhi.n	8006938 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 80068be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d003      	beq.n	80068cc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 80068c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c6:	2b40      	cmp	r3, #64	; 0x40
 80068c8:	d011      	beq.n	80068ee <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 80068ca:	e035      	b.n	8006938 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80068cc:	f7fe f804 	bl	80048d8 <HAL_RCC_GetPCLK3Freq>
 80068d0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80068d2:	e3f5      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80068d4:	4b87      	ldr	r3, [pc, #540]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068e0:	d102      	bne.n	80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 80068e2:	4b86      	ldr	r3, [pc, #536]	; (8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80068e4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80068e6:	e3eb      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80068e8:	2300      	movs	r3, #0
 80068ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068ec:	e3e8      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80068ee:	f7fd feaf 	bl	8004650 <HAL_RCC_GetSysClockFreq>
 80068f2:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80068f4:	e3e4      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80068f6:	4b7f      	ldr	r3, [pc, #508]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0320 	and.w	r3, r3, #32
 80068fe:	2b20      	cmp	r3, #32
 8006900:	d117      	bne.n	8006932 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006902:	4b7c      	ldr	r3, [pc, #496]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d005      	beq.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 800690e:	4b79      	ldr	r3, [pc, #484]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	0e1b      	lsrs	r3, r3, #24
 8006914:	f003 030f 	and.w	r3, r3, #15
 8006918:	e006      	b.n	8006928 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 800691a:	4b76      	ldr	r3, [pc, #472]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800691c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006920:	041b      	lsls	r3, r3, #16
 8006922:	0e1b      	lsrs	r3, r3, #24
 8006924:	f003 030f 	and.w	r3, r3, #15
 8006928:	4a73      	ldr	r2, [pc, #460]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800692a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800692e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006930:	e3c6      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006932:	2300      	movs	r3, #0
 8006934:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006936:	e3c3      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 8006938:	2300      	movs	r3, #0
 800693a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800693c:	e3c0      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800693e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006942:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8006946:	430b      	orrs	r3, r1
 8006948:	d147      	bne.n	80069da <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800694a:	4b6a      	ldr	r3, [pc, #424]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800694c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006950:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006954:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8006956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006958:	2b00      	cmp	r3, #0
 800695a:	d103      	bne.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800695c:	f7fd ff94 	bl	8004888 <HAL_RCC_GetPCLK1Freq>
 8006960:	6378      	str	r0, [r7, #52]	; 0x34
 8006962:	e3ad      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8006964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006966:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800696a:	d103      	bne.n	8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800696c:	f7fd fe70 	bl	8004650 <HAL_RCC_GetSysClockFreq>
 8006970:	6378      	str	r0, [r7, #52]	; 0x34
 8006972:	e3a5      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006974:	4b5f      	ldr	r3, [pc, #380]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800697c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006980:	d106      	bne.n	8006990 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8006982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006984:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006988:	d102      	bne.n	8006990 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 800698a:	4b5c      	ldr	r3, [pc, #368]	; (8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800698c:	637b      	str	r3, [r7, #52]	; 0x34
 800698e:	e397      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8006990:	4b58      	ldr	r3, [pc, #352]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0320 	and.w	r3, r3, #32
 8006998:	2b20      	cmp	r3, #32
 800699a:	d11b      	bne.n	80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 800699c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80069a2:	d117      	bne.n	80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80069a4:	4b53      	ldr	r3, [pc, #332]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d005      	beq.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 80069b0:	4b50      	ldr	r3, [pc, #320]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	0e1b      	lsrs	r3, r3, #24
 80069b6:	f003 030f 	and.w	r3, r3, #15
 80069ba:	e006      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 80069bc:	4b4d      	ldr	r3, [pc, #308]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80069be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80069c2:	041b      	lsls	r3, r3, #16
 80069c4:	0e1b      	lsrs	r3, r3, #24
 80069c6:	f003 030f 	and.w	r3, r3, #15
 80069ca:	4a4b      	ldr	r2, [pc, #300]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80069cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069d0:	637b      	str	r3, [r7, #52]	; 0x34
 80069d2:	e375      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80069d4:	2300      	movs	r3, #0
 80069d6:	637b      	str	r3, [r7, #52]	; 0x34
 80069d8:	e372      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80069da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069de:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80069e2:	430b      	orrs	r3, r1
 80069e4:	d164      	bne.n	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80069e6:	4b43      	ldr	r3, [pc, #268]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80069e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80069ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069f0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80069f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d120      	bne.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80069f8:	4b3e      	ldr	r3, [pc, #248]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0320 	and.w	r3, r3, #32
 8006a00:	2b20      	cmp	r3, #32
 8006a02:	d117      	bne.n	8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006a04:	4b3b      	ldr	r3, [pc, #236]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d005      	beq.n	8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8006a10:	4b38      	ldr	r3, [pc, #224]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	0e1b      	lsrs	r3, r3, #24
 8006a16:	f003 030f 	and.w	r3, r3, #15
 8006a1a:	e006      	b.n	8006a2a <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8006a1c:	4b35      	ldr	r3, [pc, #212]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006a1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006a22:	041b      	lsls	r3, r3, #16
 8006a24:	0e1b      	lsrs	r3, r3, #24
 8006a26:	f003 030f 	and.w	r3, r3, #15
 8006a2a:	4a33      	ldr	r2, [pc, #204]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a30:	637b      	str	r3, [r7, #52]	; 0x34
 8006a32:	e345      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8006a34:	2300      	movs	r3, #0
 8006a36:	637b      	str	r3, [r7, #52]	; 0x34
 8006a38:	e342      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8006a3a:	4b2e      	ldr	r3, [pc, #184]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006a3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a48:	d112      	bne.n	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8006a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a50:	d10e      	bne.n	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006a52:	4b28      	ldr	r3, [pc, #160]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006a54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a60:	d102      	bne.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8006a62:	23fa      	movs	r3, #250	; 0xfa
 8006a64:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006a66:	e32b      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006a68:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006a6c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006a6e:	e327      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8006a70:	4b20      	ldr	r3, [pc, #128]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a7c:	d106      	bne.n	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8006a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a84:	d102      	bne.n	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8006a86:	4b1d      	ldr	r3, [pc, #116]	; (8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006a88:	637b      	str	r3, [r7, #52]	; 0x34
 8006a8a:	e319      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8006a8c:	4b19      	ldr	r3, [pc, #100]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006a8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a92:	f003 0302 	and.w	r3, r3, #2
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d107      	bne.n	8006aaa <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8006a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006aa0:	d103      	bne.n	8006aaa <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8006aa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006aa6:	637b      	str	r3, [r7, #52]	; 0x34
 8006aa8:	e30a      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	637b      	str	r3, [r7, #52]	; 0x34
 8006aae:	e307      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8006ab0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ab4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8006ab8:	430b      	orrs	r3, r1
 8006aba:	d16b      	bne.n	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006abc:	4b0d      	ldr	r3, [pc, #52]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006abe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ac2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ac6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8006ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d127      	bne.n	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006ace:	4b09      	ldr	r3, [pc, #36]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0320 	and.w	r3, r3, #32
 8006ad6:	2b20      	cmp	r3, #32
 8006ad8:	d11e      	bne.n	8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006ada:	4b06      	ldr	r3, [pc, #24]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00c      	beq.n	8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 8006ae6:	4b03      	ldr	r3, [pc, #12]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	0e1b      	lsrs	r3, r3, #24
 8006aec:	f003 030f 	and.w	r3, r3, #15
 8006af0:	e00d      	b.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8006af2:	bf00      	nop
 8006af4:	46020c00 	.word	0x46020c00
 8006af8:	08009d60 	.word	0x08009d60
 8006afc:	00f42400 	.word	0x00f42400
 8006b00:	4b94      	ldr	r3, [pc, #592]	; (8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006b02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006b06:	041b      	lsls	r3, r3, #16
 8006b08:	0e1b      	lsrs	r3, r3, #24
 8006b0a:	f003 030f 	and.w	r3, r3, #15
 8006b0e:	4a92      	ldr	r2, [pc, #584]	; (8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8006b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b14:	637b      	str	r3, [r7, #52]	; 0x34
 8006b16:	e2d3      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	637b      	str	r3, [r7, #52]	; 0x34
 8006b1c:	e2d0      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8006b1e:	4b8d      	ldr	r3, [pc, #564]	; (8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006b20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b2c:	d112      	bne.n	8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 8006b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b34:	d10e      	bne.n	8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006b36:	4b87      	ldr	r3, [pc, #540]	; (8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006b38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b44:	d102      	bne.n	8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 8006b46:	23fa      	movs	r3, #250	; 0xfa
 8006b48:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006b4a:	e2b9      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006b4c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006b50:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006b52:	e2b5      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006b54:	4b7f      	ldr	r3, [pc, #508]	; (8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b60:	d106      	bne.n	8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 8006b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b68:	d102      	bne.n	8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 8006b6a:	4b7c      	ldr	r3, [pc, #496]	; (8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006b6c:	637b      	str	r3, [r7, #52]	; 0x34
 8006b6e:	e2a7      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006b70:	4b78      	ldr	r3, [pc, #480]	; (8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006b72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b76:	f003 0302 	and.w	r3, r3, #2
 8006b7a:	2b02      	cmp	r3, #2
 8006b7c:	d107      	bne.n	8006b8e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 8006b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b84:	d103      	bne.n	8006b8e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 8006b86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b8a:	637b      	str	r3, [r7, #52]	; 0x34
 8006b8c:	e298      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	637b      	str	r3, [r7, #52]	; 0x34
 8006b92:	e295      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8006b94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b98:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006b9c:	430b      	orrs	r3, r1
 8006b9e:	d147      	bne.n	8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006ba0:	4b6c      	ldr	r3, [pc, #432]	; (8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ba6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006baa:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d103      	bne.n	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006bb2:	f7fd fe69 	bl	8004888 <HAL_RCC_GetPCLK1Freq>
 8006bb6:	6378      	str	r0, [r7, #52]	; 0x34
 8006bb8:	e282      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8006bba:	4b66      	ldr	r3, [pc, #408]	; (8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006bbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006bc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bc8:	d112      	bne.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 8006bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bcc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006bd0:	d10e      	bne.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006bd2:	4b60      	ldr	r3, [pc, #384]	; (8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006bd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bdc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006be0:	d102      	bne.n	8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 8006be2:	23fa      	movs	r3, #250	; 0xfa
 8006be4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006be6:	e26b      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006be8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006bec:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006bee:	e267      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8006bf0:	4b58      	ldr	r3, [pc, #352]	; (8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bfc:	d106      	bne.n	8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 8006bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c00:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006c04:	d102      	bne.n	8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 8006c06:	4b55      	ldr	r3, [pc, #340]	; (8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006c08:	637b      	str	r3, [r7, #52]	; 0x34
 8006c0a:	e259      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8006c0c:	4b51      	ldr	r3, [pc, #324]	; (8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006c0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c12:	f003 0302 	and.w	r3, r3, #2
 8006c16:	2b02      	cmp	r3, #2
 8006c18:	d107      	bne.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 8006c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006c20:	d103      	bne.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 8006c22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c26:	637b      	str	r3, [r7, #52]	; 0x34
 8006c28:	e24a      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	637b      	str	r3, [r7, #52]	; 0x34
 8006c2e:	e247      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8006c30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c34:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8006c38:	430b      	orrs	r3, r1
 8006c3a:	d12d      	bne.n	8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8006c3c:	4b45      	ldr	r3, [pc, #276]	; (8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c42:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8006c46:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8006c48:	4b42      	ldr	r3, [pc, #264]	; (8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c54:	d105      	bne.n	8006c62 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 8006c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d102      	bne.n	8006c62 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 8006c5c:	4b3f      	ldr	r3, [pc, #252]	; (8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006c5e:	637b      	str	r3, [r7, #52]	; 0x34
 8006c60:	e22e      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8006c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c68:	d107      	bne.n	8006c7a <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f7fe fc70 	bl	8005554 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c76:	637b      	str	r3, [r7, #52]	; 0x34
 8006c78:	e222      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8006c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c80:	d107      	bne.n	8006c92 <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c82:	f107 0318 	add.w	r3, r7, #24
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7fe fdbe 	bl	8005808 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	637b      	str	r3, [r7, #52]	; 0x34
 8006c90:	e216      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8006c92:	2300      	movs	r3, #0
 8006c94:	637b      	str	r3, [r7, #52]	; 0x34
 8006c96:	e213      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8006c98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c9c:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8006ca0:	430b      	orrs	r3, r1
 8006ca2:	d15d      	bne.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006ca4:	4b2b      	ldr	r3, [pc, #172]	; (8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006caa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006cae:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8006cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006cb6:	d028      	beq.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 8006cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006cbe:	d845      	bhi.n	8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cc6:	d013      	beq.n	8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 8006cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cce:	d83d      	bhi.n	8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d004      	beq.n	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8006cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cdc:	d004      	beq.n	8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 8006cde:	e035      	b.n	8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8006ce0:	f7fd fde6 	bl	80048b0 <HAL_RCC_GetPCLK2Freq>
 8006ce4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006ce6:	e1eb      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006ce8:	f7fd fcb2 	bl	8004650 <HAL_RCC_GetSysClockFreq>
 8006cec:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006cee:	e1e7      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006cf0:	4b18      	ldr	r3, [pc, #96]	; (8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cfc:	d102      	bne.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 8006cfe:	4b17      	ldr	r3, [pc, #92]	; (8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006d00:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006d02:	e1dd      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006d04:	2300      	movs	r3, #0
 8006d06:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d08:	e1da      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006d0a:	4b12      	ldr	r3, [pc, #72]	; (8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 0320 	and.w	r3, r3, #32
 8006d12:	2b20      	cmp	r3, #32
 8006d14:	d117      	bne.n	8006d46 <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006d16:	4b0f      	ldr	r3, [pc, #60]	; (8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d005      	beq.n	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8006d22:	4b0c      	ldr	r3, [pc, #48]	; (8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	0e1b      	lsrs	r3, r3, #24
 8006d28:	f003 030f 	and.w	r3, r3, #15
 8006d2c:	e006      	b.n	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 8006d2e:	4b09      	ldr	r3, [pc, #36]	; (8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006d30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006d34:	041b      	lsls	r3, r3, #16
 8006d36:	0e1b      	lsrs	r3, r3, #24
 8006d38:	f003 030f 	and.w	r3, r3, #15
 8006d3c:	4a06      	ldr	r2, [pc, #24]	; (8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8006d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d42:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006d44:	e1bc      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006d46:	2300      	movs	r3, #0
 8006d48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d4a:	e1b9      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d50:	e1b6      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8006d52:	bf00      	nop
 8006d54:	46020c00 	.word	0x46020c00
 8006d58:	08009d60 	.word	0x08009d60
 8006d5c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8006d60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d64:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8006d68:	430b      	orrs	r3, r1
 8006d6a:	d156      	bne.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006d6c:	4ba5      	ldr	r3, [pc, #660]	; (8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006d76:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8006d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d7e:	d028      	beq.n	8006dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 8006d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d82:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d86:	d845      	bhi.n	8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8006d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d8e:	d013      	beq.n	8006db8 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 8006d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d96:	d83d      	bhi.n	8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8006d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d004      	beq.n	8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 8006d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006da4:	d004      	beq.n	8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8006da6:	e035      	b.n	8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8006da8:	f7fd fd6e 	bl	8004888 <HAL_RCC_GetPCLK1Freq>
 8006dac:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006dae:	e187      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006db0:	f7fd fc4e 	bl	8004650 <HAL_RCC_GetSysClockFreq>
 8006db4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006db6:	e183      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006db8:	4b92      	ldr	r3, [pc, #584]	; (8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dc4:	d102      	bne.n	8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 8006dc6:	4b90      	ldr	r3, [pc, #576]	; (8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8006dc8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006dca:	e179      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006dd0:	e176      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006dd2:	4b8c      	ldr	r3, [pc, #560]	; (8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f003 0320 	and.w	r3, r3, #32
 8006dda:	2b20      	cmp	r3, #32
 8006ddc:	d117      	bne.n	8006e0e <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006dde:	4b89      	ldr	r3, [pc, #548]	; (8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d005      	beq.n	8006df6 <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 8006dea:	4b86      	ldr	r3, [pc, #536]	; (8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	0e1b      	lsrs	r3, r3, #24
 8006df0:	f003 030f 	and.w	r3, r3, #15
 8006df4:	e006      	b.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 8006df6:	4b83      	ldr	r3, [pc, #524]	; (8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006df8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006dfc:	041b      	lsls	r3, r3, #16
 8006dfe:	0e1b      	lsrs	r3, r3, #24
 8006e00:	f003 030f 	and.w	r3, r3, #15
 8006e04:	4a81      	ldr	r2, [pc, #516]	; (800700c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8006e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e0a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006e0c:	e158      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e12:	e155      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006e14:	2300      	movs	r3, #0
 8006e16:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e18:	e152      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8006e1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e1e:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8006e22:	430b      	orrs	r3, r1
 8006e24:	d177      	bne.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006e26:	4b77      	ldr	r3, [pc, #476]	; (8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006e28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006e2c:	f003 0318 	and.w	r3, r3, #24
 8006e30:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8006e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e34:	2b18      	cmp	r3, #24
 8006e36:	d86b      	bhi.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 8006e38:	a201      	add	r2, pc, #4	; (adr r2, 8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 8006e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e3e:	bf00      	nop
 8006e40:	08006ea5 	.word	0x08006ea5
 8006e44:	08006f11 	.word	0x08006f11
 8006e48:	08006f11 	.word	0x08006f11
 8006e4c:	08006f11 	.word	0x08006f11
 8006e50:	08006f11 	.word	0x08006f11
 8006e54:	08006f11 	.word	0x08006f11
 8006e58:	08006f11 	.word	0x08006f11
 8006e5c:	08006f11 	.word	0x08006f11
 8006e60:	08006ead 	.word	0x08006ead
 8006e64:	08006f11 	.word	0x08006f11
 8006e68:	08006f11 	.word	0x08006f11
 8006e6c:	08006f11 	.word	0x08006f11
 8006e70:	08006f11 	.word	0x08006f11
 8006e74:	08006f11 	.word	0x08006f11
 8006e78:	08006f11 	.word	0x08006f11
 8006e7c:	08006f11 	.word	0x08006f11
 8006e80:	08006eb5 	.word	0x08006eb5
 8006e84:	08006f11 	.word	0x08006f11
 8006e88:	08006f11 	.word	0x08006f11
 8006e8c:	08006f11 	.word	0x08006f11
 8006e90:	08006f11 	.word	0x08006f11
 8006e94:	08006f11 	.word	0x08006f11
 8006e98:	08006f11 	.word	0x08006f11
 8006e9c:	08006f11 	.word	0x08006f11
 8006ea0:	08006ecf 	.word	0x08006ecf
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8006ea4:	f7fd fd18 	bl	80048d8 <HAL_RCC_GetPCLK3Freq>
 8006ea8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006eaa:	e109      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006eac:	f7fd fbd0 	bl	8004650 <HAL_RCC_GetSysClockFreq>
 8006eb0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006eb2:	e105      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006eb4:	4b53      	ldr	r3, [pc, #332]	; (8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ec0:	d102      	bne.n	8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 8006ec2:	4b51      	ldr	r3, [pc, #324]	; (8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8006ec4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006ec6:	e0fb      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ecc:	e0f8      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006ece:	4b4d      	ldr	r3, [pc, #308]	; (8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 0320 	and.w	r3, r3, #32
 8006ed6:	2b20      	cmp	r3, #32
 8006ed8:	d117      	bne.n	8006f0a <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006eda:	4b4a      	ldr	r3, [pc, #296]	; (8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d005      	beq.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 8006ee6:	4b47      	ldr	r3, [pc, #284]	; (8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	0e1b      	lsrs	r3, r3, #24
 8006eec:	f003 030f 	and.w	r3, r3, #15
 8006ef0:	e006      	b.n	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8006ef2:	4b44      	ldr	r3, [pc, #272]	; (8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006ef4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006ef8:	041b      	lsls	r3, r3, #16
 8006efa:	0e1b      	lsrs	r3, r3, #24
 8006efc:	f003 030f 	and.w	r3, r3, #15
 8006f00:	4a42      	ldr	r2, [pc, #264]	; (800700c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8006f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f06:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006f08:	e0da      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f0e:	e0d7      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006f10:	2300      	movs	r3, #0
 8006f12:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f14:	e0d4      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8006f16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f1a:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8006f1e:	430b      	orrs	r3, r1
 8006f20:	d155      	bne.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006f22:	4b38      	ldr	r3, [pc, #224]	; (8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006f24:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006f28:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006f2c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f30:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f34:	d013      	beq.n	8006f5e <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 8006f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f38:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f3c:	d844      	bhi.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8006f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f44:	d013      	beq.n	8006f6e <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 8006f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f4c:	d83c      	bhi.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8006f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d014      	beq.n	8006f7e <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 8006f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f5a:	d014      	beq.n	8006f86 <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 8006f5c:	e034      	b.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f5e:	f107 0318 	add.w	r3, r7, #24
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7fe fc50 	bl	8005808 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f6c:	e0a8      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7fe faee 	bl	8005554 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f7c:	e0a0      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006f7e:	f7fd fb67 	bl	8004650 <HAL_RCC_GetSysClockFreq>
 8006f82:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006f84:	e09c      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006f86:	4b1f      	ldr	r3, [pc, #124]	; (8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f003 0320 	and.w	r3, r3, #32
 8006f8e:	2b20      	cmp	r3, #32
 8006f90:	d117      	bne.n	8006fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006f92:	4b1c      	ldr	r3, [pc, #112]	; (8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d005      	beq.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8006f9e:	4b19      	ldr	r3, [pc, #100]	; (8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	0e1b      	lsrs	r3, r3, #24
 8006fa4:	f003 030f 	and.w	r3, r3, #15
 8006fa8:	e006      	b.n	8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 8006faa:	4b16      	ldr	r3, [pc, #88]	; (8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006fac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006fb0:	041b      	lsls	r3, r3, #16
 8006fb2:	0e1b      	lsrs	r3, r3, #24
 8006fb4:	f003 030f 	and.w	r3, r3, #15
 8006fb8:	4a14      	ldr	r2, [pc, #80]	; (800700c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8006fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fbe:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006fc0:	e07e      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006fc6:	e07b      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006fcc:	e078      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8006fce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fd2:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8006fd6:	430b      	orrs	r3, r1
 8006fd8:	d138      	bne.n	800704c <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8006fda:	4b0a      	ldr	r3, [pc, #40]	; (8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006fdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006fe0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fe4:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8006fe6:	4b07      	ldr	r3, [pc, #28]	; (8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006fe8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006fec:	f003 0302 	and.w	r3, r3, #2
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d10d      	bne.n	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8006ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10a      	bne.n	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 8006ffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ffe:	637b      	str	r3, [r7, #52]	; 0x34
 8007000:	e05e      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8007002:	bf00      	nop
 8007004:	46020c00 	.word	0x46020c00
 8007008:	00f42400 	.word	0x00f42400
 800700c:	08009d60 	.word	0x08009d60
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8007010:	4b2e      	ldr	r3, [pc, #184]	; (80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007012:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007016:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800701a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800701e:	d112      	bne.n	8007046 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 8007020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007022:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007026:	d10e      	bne.n	8007046 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007028:	4b28      	ldr	r3, [pc, #160]	; (80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800702a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800702e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007032:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007036:	d102      	bne.n	800703e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 8007038:	23fa      	movs	r3, #250	; 0xfa
 800703a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800703c:	e040      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800703e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007042:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007044:	e03c      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8007046:	2300      	movs	r3, #0
 8007048:	637b      	str	r3, [r7, #52]	; 0x34
 800704a:	e039      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800704c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007050:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8007054:	430b      	orrs	r3, r1
 8007056:	d131      	bne.n	80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007058:	4b1c      	ldr	r3, [pc, #112]	; (80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800705a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800705e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007062:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007064:	4b19      	ldr	r3, [pc, #100]	; (80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800706c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007070:	d105      	bne.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 8007072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007074:	2b00      	cmp	r3, #0
 8007076:	d102      	bne.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 8007078:	4b15      	ldr	r3, [pc, #84]	; (80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 800707a:	637b      	str	r3, [r7, #52]	; 0x34
 800707c:	e020      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800707e:	4b13      	ldr	r3, [pc, #76]	; (80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007086:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800708a:	d106      	bne.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 800708c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800708e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007092:	d102      	bne.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 8007094:	4b0f      	ldr	r3, [pc, #60]	; (80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 8007096:	637b      	str	r3, [r7, #52]	; 0x34
 8007098:	e012      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800709a:	4b0c      	ldr	r3, [pc, #48]	; (80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070a6:	d106      	bne.n	80070b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 80070a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070ae:	d102      	bne.n	80070b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 80070b0:	4b09      	ldr	r3, [pc, #36]	; (80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80070b2:	637b      	str	r3, [r7, #52]	; 0x34
 80070b4:	e004      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 80070b6:	2300      	movs	r3, #0
 80070b8:	637b      	str	r3, [r7, #52]	; 0x34
 80070ba:	e001      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 80070bc:	2300      	movs	r3, #0
 80070be:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 80070c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3738      	adds	r7, #56	; 0x38
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
 80070ca:	bf00      	nop
 80070cc:	46020c00 	.word	0x46020c00
 80070d0:	02dc6c00 	.word	0x02dc6c00
 80070d4:	016e3600 	.word	0x016e3600
 80070d8:	00f42400 	.word	0x00f42400

080070dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80070e4:	4b47      	ldr	r3, [pc, #284]	; (8007204 <RCCEx_PLL2_Config+0x128>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a46      	ldr	r2, [pc, #280]	; (8007204 <RCCEx_PLL2_Config+0x128>)
 80070ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80070ee:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80070f0:	f7fa fa28 	bl	8001544 <HAL_GetTick>
 80070f4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80070f6:	e008      	b.n	800710a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80070f8:	f7fa fa24 	bl	8001544 <HAL_GetTick>
 80070fc:	4602      	mov	r2, r0
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	2b02      	cmp	r3, #2
 8007104:	d901      	bls.n	800710a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007106:	2303      	movs	r3, #3
 8007108:	e077      	b.n	80071fa <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800710a:	4b3e      	ldr	r3, [pc, #248]	; (8007204 <RCCEx_PLL2_Config+0x128>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007112:	2b00      	cmp	r3, #0
 8007114:	d1f0      	bne.n	80070f8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007116:	4b3b      	ldr	r3, [pc, #236]	; (8007204 <RCCEx_PLL2_Config+0x128>)
 8007118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800711e:	f023 0303 	bic.w	r3, r3, #3
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	6811      	ldr	r1, [r2, #0]
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	6852      	ldr	r2, [r2, #4]
 800712a:	3a01      	subs	r2, #1
 800712c:	0212      	lsls	r2, r2, #8
 800712e:	430a      	orrs	r2, r1
 8007130:	4934      	ldr	r1, [pc, #208]	; (8007204 <RCCEx_PLL2_Config+0x128>)
 8007132:	4313      	orrs	r3, r2
 8007134:	62cb      	str	r3, [r1, #44]	; 0x2c
 8007136:	4b33      	ldr	r3, [pc, #204]	; (8007204 <RCCEx_PLL2_Config+0x128>)
 8007138:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800713a:	4b33      	ldr	r3, [pc, #204]	; (8007208 <RCCEx_PLL2_Config+0x12c>)
 800713c:	4013      	ands	r3, r2
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	6892      	ldr	r2, [r2, #8]
 8007142:	3a01      	subs	r2, #1
 8007144:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	68d2      	ldr	r2, [r2, #12]
 800714c:	3a01      	subs	r2, #1
 800714e:	0252      	lsls	r2, r2, #9
 8007150:	b292      	uxth	r2, r2
 8007152:	4311      	orrs	r1, r2
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	6912      	ldr	r2, [r2, #16]
 8007158:	3a01      	subs	r2, #1
 800715a:	0412      	lsls	r2, r2, #16
 800715c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007160:	4311      	orrs	r1, r2
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	6952      	ldr	r2, [r2, #20]
 8007166:	3a01      	subs	r2, #1
 8007168:	0612      	lsls	r2, r2, #24
 800716a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800716e:	430a      	orrs	r2, r1
 8007170:	4924      	ldr	r1, [pc, #144]	; (8007204 <RCCEx_PLL2_Config+0x128>)
 8007172:	4313      	orrs	r3, r2
 8007174:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007176:	4b23      	ldr	r3, [pc, #140]	; (8007204 <RCCEx_PLL2_Config+0x128>)
 8007178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800717a:	f023 020c 	bic.w	r2, r3, #12
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	699b      	ldr	r3, [r3, #24]
 8007182:	4920      	ldr	r1, [pc, #128]	; (8007204 <RCCEx_PLL2_Config+0x128>)
 8007184:	4313      	orrs	r3, r2
 8007186:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007188:	4b1e      	ldr	r3, [pc, #120]	; (8007204 <RCCEx_PLL2_Config+0x128>)
 800718a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6a1b      	ldr	r3, [r3, #32]
 8007190:	491c      	ldr	r1, [pc, #112]	; (8007204 <RCCEx_PLL2_Config+0x128>)
 8007192:	4313      	orrs	r3, r2
 8007194:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8007196:	4b1b      	ldr	r3, [pc, #108]	; (8007204 <RCCEx_PLL2_Config+0x128>)
 8007198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800719a:	4a1a      	ldr	r2, [pc, #104]	; (8007204 <RCCEx_PLL2_Config+0x128>)
 800719c:	f023 0310 	bic.w	r3, r3, #16
 80071a0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80071a2:	4b18      	ldr	r3, [pc, #96]	; (8007204 <RCCEx_PLL2_Config+0x128>)
 80071a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071aa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	69d2      	ldr	r2, [r2, #28]
 80071b2:	00d2      	lsls	r2, r2, #3
 80071b4:	4913      	ldr	r1, [pc, #76]	; (8007204 <RCCEx_PLL2_Config+0x128>)
 80071b6:	4313      	orrs	r3, r2
 80071b8:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80071ba:	4b12      	ldr	r3, [pc, #72]	; (8007204 <RCCEx_PLL2_Config+0x128>)
 80071bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071be:	4a11      	ldr	r2, [pc, #68]	; (8007204 <RCCEx_PLL2_Config+0x128>)
 80071c0:	f043 0310 	orr.w	r3, r3, #16
 80071c4:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80071c6:	4b0f      	ldr	r3, [pc, #60]	; (8007204 <RCCEx_PLL2_Config+0x128>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a0e      	ldr	r2, [pc, #56]	; (8007204 <RCCEx_PLL2_Config+0x128>)
 80071cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80071d0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80071d2:	f7fa f9b7 	bl	8001544 <HAL_GetTick>
 80071d6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80071d8:	e008      	b.n	80071ec <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80071da:	f7fa f9b3 	bl	8001544 <HAL_GetTick>
 80071de:	4602      	mov	r2, r0
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	1ad3      	subs	r3, r2, r3
 80071e4:	2b02      	cmp	r3, #2
 80071e6:	d901      	bls.n	80071ec <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80071e8:	2303      	movs	r3, #3
 80071ea:	e006      	b.n	80071fa <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80071ec:	4b05      	ldr	r3, [pc, #20]	; (8007204 <RCCEx_PLL2_Config+0x128>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d0f0      	beq.n	80071da <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80071f8:	2300      	movs	r3, #0

}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3710      	adds	r7, #16
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	46020c00 	.word	0x46020c00
 8007208:	80800000 	.word	0x80800000

0800720c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8007214:	4b47      	ldr	r3, [pc, #284]	; (8007334 <RCCEx_PLL3_Config+0x128>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a46      	ldr	r2, [pc, #280]	; (8007334 <RCCEx_PLL3_Config+0x128>)
 800721a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800721e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007220:	f7fa f990 	bl	8001544 <HAL_GetTick>
 8007224:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007226:	e008      	b.n	800723a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007228:	f7fa f98c 	bl	8001544 <HAL_GetTick>
 800722c:	4602      	mov	r2, r0
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	2b02      	cmp	r3, #2
 8007234:	d901      	bls.n	800723a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	e077      	b.n	800732a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800723a:	4b3e      	ldr	r3, [pc, #248]	; (8007334 <RCCEx_PLL3_Config+0x128>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007242:	2b00      	cmp	r3, #0
 8007244:	d1f0      	bne.n	8007228 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007246:	4b3b      	ldr	r3, [pc, #236]	; (8007334 <RCCEx_PLL3_Config+0x128>)
 8007248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800724a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800724e:	f023 0303 	bic.w	r3, r3, #3
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	6811      	ldr	r1, [r2, #0]
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	6852      	ldr	r2, [r2, #4]
 800725a:	3a01      	subs	r2, #1
 800725c:	0212      	lsls	r2, r2, #8
 800725e:	430a      	orrs	r2, r1
 8007260:	4934      	ldr	r1, [pc, #208]	; (8007334 <RCCEx_PLL3_Config+0x128>)
 8007262:	4313      	orrs	r3, r2
 8007264:	630b      	str	r3, [r1, #48]	; 0x30
 8007266:	4b33      	ldr	r3, [pc, #204]	; (8007334 <RCCEx_PLL3_Config+0x128>)
 8007268:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800726a:	4b33      	ldr	r3, [pc, #204]	; (8007338 <RCCEx_PLL3_Config+0x12c>)
 800726c:	4013      	ands	r3, r2
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	6892      	ldr	r2, [r2, #8]
 8007272:	3a01      	subs	r2, #1
 8007274:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	68d2      	ldr	r2, [r2, #12]
 800727c:	3a01      	subs	r2, #1
 800727e:	0252      	lsls	r2, r2, #9
 8007280:	b292      	uxth	r2, r2
 8007282:	4311      	orrs	r1, r2
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	6912      	ldr	r2, [r2, #16]
 8007288:	3a01      	subs	r2, #1
 800728a:	0412      	lsls	r2, r2, #16
 800728c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007290:	4311      	orrs	r1, r2
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	6952      	ldr	r2, [r2, #20]
 8007296:	3a01      	subs	r2, #1
 8007298:	0612      	lsls	r2, r2, #24
 800729a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800729e:	430a      	orrs	r2, r1
 80072a0:	4924      	ldr	r1, [pc, #144]	; (8007334 <RCCEx_PLL3_Config+0x128>)
 80072a2:	4313      	orrs	r3, r2
 80072a4:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80072a6:	4b23      	ldr	r3, [pc, #140]	; (8007334 <RCCEx_PLL3_Config+0x128>)
 80072a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072aa:	f023 020c 	bic.w	r2, r3, #12
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	699b      	ldr	r3, [r3, #24]
 80072b2:	4920      	ldr	r1, [pc, #128]	; (8007334 <RCCEx_PLL3_Config+0x128>)
 80072b4:	4313      	orrs	r3, r2
 80072b6:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80072b8:	4b1e      	ldr	r3, [pc, #120]	; (8007334 <RCCEx_PLL3_Config+0x128>)
 80072ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6a1b      	ldr	r3, [r3, #32]
 80072c0:	491c      	ldr	r1, [pc, #112]	; (8007334 <RCCEx_PLL3_Config+0x128>)
 80072c2:	4313      	orrs	r3, r2
 80072c4:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80072c6:	4b1b      	ldr	r3, [pc, #108]	; (8007334 <RCCEx_PLL3_Config+0x128>)
 80072c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ca:	4a1a      	ldr	r2, [pc, #104]	; (8007334 <RCCEx_PLL3_Config+0x128>)
 80072cc:	f023 0310 	bic.w	r3, r3, #16
 80072d0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80072d2:	4b18      	ldr	r3, [pc, #96]	; (8007334 <RCCEx_PLL3_Config+0x128>)
 80072d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072da:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	69d2      	ldr	r2, [r2, #28]
 80072e2:	00d2      	lsls	r2, r2, #3
 80072e4:	4913      	ldr	r1, [pc, #76]	; (8007334 <RCCEx_PLL3_Config+0x128>)
 80072e6:	4313      	orrs	r3, r2
 80072e8:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80072ea:	4b12      	ldr	r3, [pc, #72]	; (8007334 <RCCEx_PLL3_Config+0x128>)
 80072ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ee:	4a11      	ldr	r2, [pc, #68]	; (8007334 <RCCEx_PLL3_Config+0x128>)
 80072f0:	f043 0310 	orr.w	r3, r3, #16
 80072f4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 80072f6:	4b0f      	ldr	r3, [pc, #60]	; (8007334 <RCCEx_PLL3_Config+0x128>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a0e      	ldr	r2, [pc, #56]	; (8007334 <RCCEx_PLL3_Config+0x128>)
 80072fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007300:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007302:	f7fa f91f 	bl	8001544 <HAL_GetTick>
 8007306:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007308:	e008      	b.n	800731c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800730a:	f7fa f91b 	bl	8001544 <HAL_GetTick>
 800730e:	4602      	mov	r2, r0
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	1ad3      	subs	r3, r2, r3
 8007314:	2b02      	cmp	r3, #2
 8007316:	d901      	bls.n	800731c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007318:	2303      	movs	r3, #3
 800731a:	e006      	b.n	800732a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800731c:	4b05      	ldr	r3, [pc, #20]	; (8007334 <RCCEx_PLL3_Config+0x128>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007324:	2b00      	cmp	r3, #0
 8007326:	d0f0      	beq.n	800730a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	3710      	adds	r7, #16
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	46020c00 	.word	0x46020c00
 8007338:	80800000 	.word	0x80800000

0800733c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d101      	bne.n	800734e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	e049      	b.n	80073e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007354:	b2db      	uxtb	r3, r3
 8007356:	2b00      	cmp	r3, #0
 8007358:	d106      	bne.n	8007368 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f7f9 febc 	bl	80010e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2202      	movs	r2, #2
 800736c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	3304      	adds	r3, #4
 8007378:	4619      	mov	r1, r3
 800737a:	4610      	mov	r0, r2
 800737c:	f000 fdce 	bl	8007f1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3708      	adds	r7, #8
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}

080073ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80073ea:	b580      	push	{r7, lr}
 80073ec:	b082      	sub	sp, #8
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d101      	bne.n	80073fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	e049      	b.n	8007490 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007402:	b2db      	uxtb	r3, r3
 8007404:	2b00      	cmp	r3, #0
 8007406:	d106      	bne.n	8007416 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 f841 	bl	8007498 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2202      	movs	r2, #2
 800741a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	3304      	adds	r3, #4
 8007426:	4619      	mov	r1, r3
 8007428:	4610      	mov	r0, r2
 800742a:	f000 fd77 	bl	8007f1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2201      	movs	r2, #1
 8007432:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2201      	movs	r2, #1
 800743a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2201      	movs	r2, #1
 8007442:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2201      	movs	r2, #1
 800744a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2201      	movs	r2, #1
 8007452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2201      	movs	r2, #1
 800745a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2201      	movs	r2, #1
 8007462:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2201      	movs	r2, #1
 800746a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2201      	movs	r2, #1
 8007472:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2201      	movs	r2, #1
 800747a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2201      	movs	r2, #1
 8007482:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	3708      	adds	r7, #8
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80074a0:	bf00      	nop
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074b6:	2300      	movs	r3, #0
 80074b8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d109      	bne.n	80074d4 <HAL_TIM_PWM_Start_IT+0x28>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	bf14      	ite	ne
 80074cc:	2301      	movne	r3, #1
 80074ce:	2300      	moveq	r3, #0
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	e03c      	b.n	800754e <HAL_TIM_PWM_Start_IT+0xa2>
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	2b04      	cmp	r3, #4
 80074d8:	d109      	bne.n	80074ee <HAL_TIM_PWM_Start_IT+0x42>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	bf14      	ite	ne
 80074e6:	2301      	movne	r3, #1
 80074e8:	2300      	moveq	r3, #0
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	e02f      	b.n	800754e <HAL_TIM_PWM_Start_IT+0xa2>
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	2b08      	cmp	r3, #8
 80074f2:	d109      	bne.n	8007508 <HAL_TIM_PWM_Start_IT+0x5c>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	bf14      	ite	ne
 8007500:	2301      	movne	r3, #1
 8007502:	2300      	moveq	r3, #0
 8007504:	b2db      	uxtb	r3, r3
 8007506:	e022      	b.n	800754e <HAL_TIM_PWM_Start_IT+0xa2>
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	2b0c      	cmp	r3, #12
 800750c:	d109      	bne.n	8007522 <HAL_TIM_PWM_Start_IT+0x76>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007514:	b2db      	uxtb	r3, r3
 8007516:	2b01      	cmp	r3, #1
 8007518:	bf14      	ite	ne
 800751a:	2301      	movne	r3, #1
 800751c:	2300      	moveq	r3, #0
 800751e:	b2db      	uxtb	r3, r3
 8007520:	e015      	b.n	800754e <HAL_TIM_PWM_Start_IT+0xa2>
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	2b10      	cmp	r3, #16
 8007526:	d109      	bne.n	800753c <HAL_TIM_PWM_Start_IT+0x90>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800752e:	b2db      	uxtb	r3, r3
 8007530:	2b01      	cmp	r3, #1
 8007532:	bf14      	ite	ne
 8007534:	2301      	movne	r3, #1
 8007536:	2300      	moveq	r3, #0
 8007538:	b2db      	uxtb	r3, r3
 800753a:	e008      	b.n	800754e <HAL_TIM_PWM_Start_IT+0xa2>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007542:	b2db      	uxtb	r3, r3
 8007544:	2b01      	cmp	r3, #1
 8007546:	bf14      	ite	ne
 8007548:	2301      	movne	r3, #1
 800754a:	2300      	moveq	r3, #0
 800754c:	b2db      	uxtb	r3, r3
 800754e:	2b00      	cmp	r3, #0
 8007550:	d001      	beq.n	8007556 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	e124      	b.n	80077a0 <HAL_TIM_PWM_Start_IT+0x2f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d104      	bne.n	8007566 <HAL_TIM_PWM_Start_IT+0xba>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2202      	movs	r2, #2
 8007560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007564:	e023      	b.n	80075ae <HAL_TIM_PWM_Start_IT+0x102>
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	2b04      	cmp	r3, #4
 800756a:	d104      	bne.n	8007576 <HAL_TIM_PWM_Start_IT+0xca>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2202      	movs	r2, #2
 8007570:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007574:	e01b      	b.n	80075ae <HAL_TIM_PWM_Start_IT+0x102>
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	2b08      	cmp	r3, #8
 800757a:	d104      	bne.n	8007586 <HAL_TIM_PWM_Start_IT+0xda>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2202      	movs	r2, #2
 8007580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007584:	e013      	b.n	80075ae <HAL_TIM_PWM_Start_IT+0x102>
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	2b0c      	cmp	r3, #12
 800758a:	d104      	bne.n	8007596 <HAL_TIM_PWM_Start_IT+0xea>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2202      	movs	r2, #2
 8007590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007594:	e00b      	b.n	80075ae <HAL_TIM_PWM_Start_IT+0x102>
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	2b10      	cmp	r3, #16
 800759a:	d104      	bne.n	80075a6 <HAL_TIM_PWM_Start_IT+0xfa>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2202      	movs	r2, #2
 80075a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075a4:	e003      	b.n	80075ae <HAL_TIM_PWM_Start_IT+0x102>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2202      	movs	r2, #2
 80075aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	2b0c      	cmp	r3, #12
 80075b2:	d841      	bhi.n	8007638 <HAL_TIM_PWM_Start_IT+0x18c>
 80075b4:	a201      	add	r2, pc, #4	; (adr r2, 80075bc <HAL_TIM_PWM_Start_IT+0x110>)
 80075b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ba:	bf00      	nop
 80075bc:	080075f1 	.word	0x080075f1
 80075c0:	08007639 	.word	0x08007639
 80075c4:	08007639 	.word	0x08007639
 80075c8:	08007639 	.word	0x08007639
 80075cc:	08007603 	.word	0x08007603
 80075d0:	08007639 	.word	0x08007639
 80075d4:	08007639 	.word	0x08007639
 80075d8:	08007639 	.word	0x08007639
 80075dc:	08007615 	.word	0x08007615
 80075e0:	08007639 	.word	0x08007639
 80075e4:	08007639 	.word	0x08007639
 80075e8:	08007639 	.word	0x08007639
 80075ec:	08007627 	.word	0x08007627
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	68da      	ldr	r2, [r3, #12]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f042 0202 	orr.w	r2, r2, #2
 80075fe:	60da      	str	r2, [r3, #12]
      break;
 8007600:	e01d      	b.n	800763e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	68da      	ldr	r2, [r3, #12]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f042 0204 	orr.w	r2, r2, #4
 8007610:	60da      	str	r2, [r3, #12]
      break;
 8007612:	e014      	b.n	800763e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	68da      	ldr	r2, [r3, #12]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f042 0208 	orr.w	r2, r2, #8
 8007622:	60da      	str	r2, [r3, #12]
      break;
 8007624:	e00b      	b.n	800763e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68da      	ldr	r2, [r3, #12]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f042 0210 	orr.w	r2, r2, #16
 8007634:	60da      	str	r2, [r3, #12]
      break;
 8007636:	e002      	b.n	800763e <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007638:	2301      	movs	r3, #1
 800763a:	73fb      	strb	r3, [r7, #15]
      break;
 800763c:	bf00      	nop
  }

  if (status == HAL_OK)
 800763e:	7bfb      	ldrb	r3, [r7, #15]
 8007640:	2b00      	cmp	r3, #0
 8007642:	f040 80ac 	bne.w	800779e <HAL_TIM_PWM_Start_IT+0x2f2>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2201      	movs	r2, #1
 800764c:	6839      	ldr	r1, [r7, #0]
 800764e:	4618      	mov	r0, r3
 8007650:	f001 f9d0 	bl	80089f4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a53      	ldr	r2, [pc, #332]	; (80077a8 <HAL_TIM_PWM_Start_IT+0x2fc>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d02c      	beq.n	80076b8 <HAL_TIM_PWM_Start_IT+0x20c>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a52      	ldr	r2, [pc, #328]	; (80077ac <HAL_TIM_PWM_Start_IT+0x300>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d027      	beq.n	80076b8 <HAL_TIM_PWM_Start_IT+0x20c>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a50      	ldr	r2, [pc, #320]	; (80077b0 <HAL_TIM_PWM_Start_IT+0x304>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d022      	beq.n	80076b8 <HAL_TIM_PWM_Start_IT+0x20c>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a4f      	ldr	r2, [pc, #316]	; (80077b4 <HAL_TIM_PWM_Start_IT+0x308>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d01d      	beq.n	80076b8 <HAL_TIM_PWM_Start_IT+0x20c>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a4d      	ldr	r2, [pc, #308]	; (80077b8 <HAL_TIM_PWM_Start_IT+0x30c>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d018      	beq.n	80076b8 <HAL_TIM_PWM_Start_IT+0x20c>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a4c      	ldr	r2, [pc, #304]	; (80077bc <HAL_TIM_PWM_Start_IT+0x310>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d013      	beq.n	80076b8 <HAL_TIM_PWM_Start_IT+0x20c>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a4a      	ldr	r2, [pc, #296]	; (80077c0 <HAL_TIM_PWM_Start_IT+0x314>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d00e      	beq.n	80076b8 <HAL_TIM_PWM_Start_IT+0x20c>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a49      	ldr	r2, [pc, #292]	; (80077c4 <HAL_TIM_PWM_Start_IT+0x318>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d009      	beq.n	80076b8 <HAL_TIM_PWM_Start_IT+0x20c>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a47      	ldr	r2, [pc, #284]	; (80077c8 <HAL_TIM_PWM_Start_IT+0x31c>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d004      	beq.n	80076b8 <HAL_TIM_PWM_Start_IT+0x20c>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a46      	ldr	r2, [pc, #280]	; (80077cc <HAL_TIM_PWM_Start_IT+0x320>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d101      	bne.n	80076bc <HAL_TIM_PWM_Start_IT+0x210>
 80076b8:	2301      	movs	r3, #1
 80076ba:	e000      	b.n	80076be <HAL_TIM_PWM_Start_IT+0x212>
 80076bc:	2300      	movs	r3, #0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d007      	beq.n	80076d2 <HAL_TIM_PWM_Start_IT+0x226>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80076d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a34      	ldr	r2, [pc, #208]	; (80077a8 <HAL_TIM_PWM_Start_IT+0x2fc>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d040      	beq.n	800775e <HAL_TIM_PWM_Start_IT+0x2b2>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a32      	ldr	r2, [pc, #200]	; (80077ac <HAL_TIM_PWM_Start_IT+0x300>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d03b      	beq.n	800775e <HAL_TIM_PWM_Start_IT+0x2b2>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076ee:	d036      	beq.n	800775e <HAL_TIM_PWM_Start_IT+0x2b2>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80076f8:	d031      	beq.n	800775e <HAL_TIM_PWM_Start_IT+0x2b2>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a34      	ldr	r2, [pc, #208]	; (80077d0 <HAL_TIM_PWM_Start_IT+0x324>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d02c      	beq.n	800775e <HAL_TIM_PWM_Start_IT+0x2b2>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a32      	ldr	r2, [pc, #200]	; (80077d4 <HAL_TIM_PWM_Start_IT+0x328>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d027      	beq.n	800775e <HAL_TIM_PWM_Start_IT+0x2b2>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a31      	ldr	r2, [pc, #196]	; (80077d8 <HAL_TIM_PWM_Start_IT+0x32c>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d022      	beq.n	800775e <HAL_TIM_PWM_Start_IT+0x2b2>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a2f      	ldr	r2, [pc, #188]	; (80077dc <HAL_TIM_PWM_Start_IT+0x330>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d01d      	beq.n	800775e <HAL_TIM_PWM_Start_IT+0x2b2>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a2e      	ldr	r2, [pc, #184]	; (80077e0 <HAL_TIM_PWM_Start_IT+0x334>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d018      	beq.n	800775e <HAL_TIM_PWM_Start_IT+0x2b2>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a2c      	ldr	r2, [pc, #176]	; (80077e4 <HAL_TIM_PWM_Start_IT+0x338>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d013      	beq.n	800775e <HAL_TIM_PWM_Start_IT+0x2b2>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a1d      	ldr	r2, [pc, #116]	; (80077b0 <HAL_TIM_PWM_Start_IT+0x304>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d00e      	beq.n	800775e <HAL_TIM_PWM_Start_IT+0x2b2>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a1b      	ldr	r2, [pc, #108]	; (80077b4 <HAL_TIM_PWM_Start_IT+0x308>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d009      	beq.n	800775e <HAL_TIM_PWM_Start_IT+0x2b2>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a1a      	ldr	r2, [pc, #104]	; (80077b8 <HAL_TIM_PWM_Start_IT+0x30c>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d004      	beq.n	800775e <HAL_TIM_PWM_Start_IT+0x2b2>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a18      	ldr	r2, [pc, #96]	; (80077bc <HAL_TIM_PWM_Start_IT+0x310>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d115      	bne.n	800778a <HAL_TIM_PWM_Start_IT+0x2de>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	689a      	ldr	r2, [r3, #8]
 8007764:	4b20      	ldr	r3, [pc, #128]	; (80077e8 <HAL_TIM_PWM_Start_IT+0x33c>)
 8007766:	4013      	ands	r3, r2
 8007768:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	2b06      	cmp	r3, #6
 800776e:	d015      	beq.n	800779c <HAL_TIM_PWM_Start_IT+0x2f0>
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007776:	d011      	beq.n	800779c <HAL_TIM_PWM_Start_IT+0x2f0>
      {
        __HAL_TIM_ENABLE(htim);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f042 0201 	orr.w	r2, r2, #1
 8007786:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007788:	e008      	b.n	800779c <HAL_TIM_PWM_Start_IT+0x2f0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f042 0201 	orr.w	r2, r2, #1
 8007798:	601a      	str	r2, [r3, #0]
 800779a:	e000      	b.n	800779e <HAL_TIM_PWM_Start_IT+0x2f2>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800779c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800779e:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3710      	adds	r7, #16
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	40012c00 	.word	0x40012c00
 80077ac:	50012c00 	.word	0x50012c00
 80077b0:	40013400 	.word	0x40013400
 80077b4:	50013400 	.word	0x50013400
 80077b8:	40014000 	.word	0x40014000
 80077bc:	50014000 	.word	0x50014000
 80077c0:	40014400 	.word	0x40014400
 80077c4:	50014400 	.word	0x50014400
 80077c8:	40014800 	.word	0x40014800
 80077cc:	50014800 	.word	0x50014800
 80077d0:	40000400 	.word	0x40000400
 80077d4:	50000400 	.word	0x50000400
 80077d8:	40000800 	.word	0x40000800
 80077dc:	50000800 	.word	0x50000800
 80077e0:	40000c00 	.word	0x40000c00
 80077e4:	50000c00 	.word	0x50000c00
 80077e8:	00010007 	.word	0x00010007

080077ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	f003 0302 	and.w	r3, r3, #2
 800780a:	2b00      	cmp	r3, #0
 800780c:	d020      	beq.n	8007850 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f003 0302 	and.w	r3, r3, #2
 8007814:	2b00      	cmp	r3, #0
 8007816:	d01b      	beq.n	8007850 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f06f 0202 	mvn.w	r2, #2
 8007820:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2201      	movs	r2, #1
 8007826:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	699b      	ldr	r3, [r3, #24]
 800782e:	f003 0303 	and.w	r3, r3, #3
 8007832:	2b00      	cmp	r3, #0
 8007834:	d003      	beq.n	800783e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 fb52 	bl	8007ee0 <HAL_TIM_IC_CaptureCallback>
 800783c:	e005      	b.n	800784a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 fb44 	bl	8007ecc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 fb55 	bl	8007ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	f003 0304 	and.w	r3, r3, #4
 8007856:	2b00      	cmp	r3, #0
 8007858:	d020      	beq.n	800789c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f003 0304 	and.w	r3, r3, #4
 8007860:	2b00      	cmp	r3, #0
 8007862:	d01b      	beq.n	800789c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f06f 0204 	mvn.w	r2, #4
 800786c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2202      	movs	r2, #2
 8007872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	699b      	ldr	r3, [r3, #24]
 800787a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800787e:	2b00      	cmp	r3, #0
 8007880:	d003      	beq.n	800788a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 fb2c 	bl	8007ee0 <HAL_TIM_IC_CaptureCallback>
 8007888:	e005      	b.n	8007896 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 fb1e 	bl	8007ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 fb2f 	bl	8007ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	f003 0308 	and.w	r3, r3, #8
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d020      	beq.n	80078e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f003 0308 	and.w	r3, r3, #8
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d01b      	beq.n	80078e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f06f 0208 	mvn.w	r2, #8
 80078b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2204      	movs	r2, #4
 80078be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	69db      	ldr	r3, [r3, #28]
 80078c6:	f003 0303 	and.w	r3, r3, #3
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d003      	beq.n	80078d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 fb06 	bl	8007ee0 <HAL_TIM_IC_CaptureCallback>
 80078d4:	e005      	b.n	80078e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 faf8 	bl	8007ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 fb09 	bl	8007ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	f003 0310 	and.w	r3, r3, #16
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d020      	beq.n	8007934 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f003 0310 	and.w	r3, r3, #16
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d01b      	beq.n	8007934 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f06f 0210 	mvn.w	r2, #16
 8007904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2208      	movs	r2, #8
 800790a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	69db      	ldr	r3, [r3, #28]
 8007912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007916:	2b00      	cmp	r3, #0
 8007918:	d003      	beq.n	8007922 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 fae0 	bl	8007ee0 <HAL_TIM_IC_CaptureCallback>
 8007920:	e005      	b.n	800792e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 fad2 	bl	8007ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 fae3 	bl	8007ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	f003 0301 	and.w	r3, r3, #1
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00c      	beq.n	8007958 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f003 0301 	and.w	r3, r3, #1
 8007944:	2b00      	cmp	r3, #0
 8007946:	d007      	beq.n	8007958 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f06f 0201 	mvn.w	r2, #1
 8007950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 fab0 	bl	8007eb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800795e:	2b00      	cmp	r3, #0
 8007960:	d104      	bne.n	800796c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00c      	beq.n	8007986 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007972:	2b00      	cmp	r3, #0
 8007974:	d007      	beq.n	8007986 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800797e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f001 f929 	bl	8008bd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800798c:	2b00      	cmp	r3, #0
 800798e:	d00c      	beq.n	80079aa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007996:	2b00      	cmp	r3, #0
 8007998:	d007      	beq.n	80079aa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80079a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f001 f921 	bl	8008bec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d00c      	beq.n	80079ce <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d007      	beq.n	80079ce <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80079c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 fa9d 	bl	8007f08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	f003 0320 	and.w	r3, r3, #32
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d00c      	beq.n	80079f2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f003 0320 	and.w	r3, r3, #32
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d007      	beq.n	80079f2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f06f 0220 	mvn.w	r2, #32
 80079ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f001 f8e9 	bl	8008bc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d00c      	beq.n	8007a16 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d007      	beq.n	8007a16 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8007a0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f001 f8f5 	bl	8008c00 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00c      	beq.n	8007a3a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d007      	beq.n	8007a3a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8007a32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f001 f8ed 	bl	8008c14 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d00c      	beq.n	8007a5e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d007      	beq.n	8007a5e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8007a56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f001 f8e5 	bl	8008c28 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d00c      	beq.n	8007a82 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d007      	beq.n	8007a82 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8007a7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f001 f8dd 	bl	8008c3c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a82:	bf00      	nop
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
	...

08007a8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b086      	sub	sp, #24
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d101      	bne.n	8007aaa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007aa6:	2302      	movs	r3, #2
 8007aa8:	e0ff      	b.n	8007caa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2201      	movs	r2, #1
 8007aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2b14      	cmp	r3, #20
 8007ab6:	f200 80f0 	bhi.w	8007c9a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007aba:	a201      	add	r2, pc, #4	; (adr r2, 8007ac0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac0:	08007b15 	.word	0x08007b15
 8007ac4:	08007c9b 	.word	0x08007c9b
 8007ac8:	08007c9b 	.word	0x08007c9b
 8007acc:	08007c9b 	.word	0x08007c9b
 8007ad0:	08007b55 	.word	0x08007b55
 8007ad4:	08007c9b 	.word	0x08007c9b
 8007ad8:	08007c9b 	.word	0x08007c9b
 8007adc:	08007c9b 	.word	0x08007c9b
 8007ae0:	08007b97 	.word	0x08007b97
 8007ae4:	08007c9b 	.word	0x08007c9b
 8007ae8:	08007c9b 	.word	0x08007c9b
 8007aec:	08007c9b 	.word	0x08007c9b
 8007af0:	08007bd7 	.word	0x08007bd7
 8007af4:	08007c9b 	.word	0x08007c9b
 8007af8:	08007c9b 	.word	0x08007c9b
 8007afc:	08007c9b 	.word	0x08007c9b
 8007b00:	08007c19 	.word	0x08007c19
 8007b04:	08007c9b 	.word	0x08007c9b
 8007b08:	08007c9b 	.word	0x08007c9b
 8007b0c:	08007c9b 	.word	0x08007c9b
 8007b10:	08007c59 	.word	0x08007c59
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68b9      	ldr	r1, [r7, #8]
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f000 faf8 	bl	8008110 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	699a      	ldr	r2, [r3, #24]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f042 0208 	orr.w	r2, r2, #8
 8007b2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	699a      	ldr	r2, [r3, #24]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f022 0204 	bic.w	r2, r2, #4
 8007b3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	6999      	ldr	r1, [r3, #24]
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	691a      	ldr	r2, [r3, #16]
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	430a      	orrs	r2, r1
 8007b50:	619a      	str	r2, [r3, #24]
      break;
 8007b52:	e0a5      	b.n	8007ca0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	68b9      	ldr	r1, [r7, #8]
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f000 fb9a 	bl	8008294 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	699a      	ldr	r2, [r3, #24]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	699a      	ldr	r2, [r3, #24]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	6999      	ldr	r1, [r3, #24]
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	691b      	ldr	r3, [r3, #16]
 8007b8a:	021a      	lsls	r2, r3, #8
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	430a      	orrs	r2, r1
 8007b92:	619a      	str	r2, [r3, #24]
      break;
 8007b94:	e084      	b.n	8007ca0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	68b9      	ldr	r1, [r7, #8]
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f000 fc29 	bl	80083f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	69da      	ldr	r2, [r3, #28]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f042 0208 	orr.w	r2, r2, #8
 8007bb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	69da      	ldr	r2, [r3, #28]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f022 0204 	bic.w	r2, r2, #4
 8007bc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	69d9      	ldr	r1, [r3, #28]
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	691a      	ldr	r2, [r3, #16]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	430a      	orrs	r2, r1
 8007bd2:	61da      	str	r2, [r3, #28]
      break;
 8007bd4:	e064      	b.n	8007ca0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	68b9      	ldr	r1, [r7, #8]
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f000 fcb7 	bl	8008550 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	69da      	ldr	r2, [r3, #28]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	69da      	ldr	r2, [r3, #28]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	69d9      	ldr	r1, [r3, #28]
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	691b      	ldr	r3, [r3, #16]
 8007c0c:	021a      	lsls	r2, r3, #8
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	430a      	orrs	r2, r1
 8007c14:	61da      	str	r2, [r3, #28]
      break;
 8007c16:	e043      	b.n	8007ca0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68b9      	ldr	r1, [r7, #8]
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f000 fd46 	bl	80086b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f042 0208 	orr.w	r2, r2, #8
 8007c32:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f022 0204 	bic.w	r2, r2, #4
 8007c42:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	691a      	ldr	r2, [r3, #16]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	430a      	orrs	r2, r1
 8007c54:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007c56:	e023      	b.n	8007ca0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	68b9      	ldr	r1, [r7, #8]
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f000 fda8 	bl	80087b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c72:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c82:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	021a      	lsls	r2, r3, #8
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	430a      	orrs	r2, r1
 8007c96:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007c98:	e002      	b.n	8007ca0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	75fb      	strb	r3, [r7, #23]
      break;
 8007c9e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007ca8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3718      	adds	r7, #24
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop

08007cb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d101      	bne.n	8007cd0 <HAL_TIM_ConfigClockSource+0x1c>
 8007ccc:	2302      	movs	r3, #2
 8007cce:	e0e6      	b.n	8007e9e <HAL_TIM_ConfigClockSource+0x1ea>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2202      	movs	r2, #2
 8007cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8007cee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007cf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007cfa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	68ba      	ldr	r2, [r7, #8]
 8007d02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a67      	ldr	r2, [pc, #412]	; (8007ea8 <HAL_TIM_ConfigClockSource+0x1f4>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	f000 80b1 	beq.w	8007e72 <HAL_TIM_ConfigClockSource+0x1be>
 8007d10:	4a65      	ldr	r2, [pc, #404]	; (8007ea8 <HAL_TIM_ConfigClockSource+0x1f4>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	f200 80b6 	bhi.w	8007e84 <HAL_TIM_ConfigClockSource+0x1d0>
 8007d18:	4a64      	ldr	r2, [pc, #400]	; (8007eac <HAL_TIM_ConfigClockSource+0x1f8>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	f000 80a9 	beq.w	8007e72 <HAL_TIM_ConfigClockSource+0x1be>
 8007d20:	4a62      	ldr	r2, [pc, #392]	; (8007eac <HAL_TIM_ConfigClockSource+0x1f8>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	f200 80ae 	bhi.w	8007e84 <HAL_TIM_ConfigClockSource+0x1d0>
 8007d28:	4a61      	ldr	r2, [pc, #388]	; (8007eb0 <HAL_TIM_ConfigClockSource+0x1fc>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	f000 80a1 	beq.w	8007e72 <HAL_TIM_ConfigClockSource+0x1be>
 8007d30:	4a5f      	ldr	r2, [pc, #380]	; (8007eb0 <HAL_TIM_ConfigClockSource+0x1fc>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	f200 80a6 	bhi.w	8007e84 <HAL_TIM_ConfigClockSource+0x1d0>
 8007d38:	4a5e      	ldr	r2, [pc, #376]	; (8007eb4 <HAL_TIM_ConfigClockSource+0x200>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	f000 8099 	beq.w	8007e72 <HAL_TIM_ConfigClockSource+0x1be>
 8007d40:	4a5c      	ldr	r2, [pc, #368]	; (8007eb4 <HAL_TIM_ConfigClockSource+0x200>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	f200 809e 	bhi.w	8007e84 <HAL_TIM_ConfigClockSource+0x1d0>
 8007d48:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007d4c:	f000 8091 	beq.w	8007e72 <HAL_TIM_ConfigClockSource+0x1be>
 8007d50:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007d54:	f200 8096 	bhi.w	8007e84 <HAL_TIM_ConfigClockSource+0x1d0>
 8007d58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d5c:	f000 8089 	beq.w	8007e72 <HAL_TIM_ConfigClockSource+0x1be>
 8007d60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d64:	f200 808e 	bhi.w	8007e84 <HAL_TIM_ConfigClockSource+0x1d0>
 8007d68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d6c:	d03e      	beq.n	8007dec <HAL_TIM_ConfigClockSource+0x138>
 8007d6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d72:	f200 8087 	bhi.w	8007e84 <HAL_TIM_ConfigClockSource+0x1d0>
 8007d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d7a:	f000 8086 	beq.w	8007e8a <HAL_TIM_ConfigClockSource+0x1d6>
 8007d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d82:	d87f      	bhi.n	8007e84 <HAL_TIM_ConfigClockSource+0x1d0>
 8007d84:	2b70      	cmp	r3, #112	; 0x70
 8007d86:	d01a      	beq.n	8007dbe <HAL_TIM_ConfigClockSource+0x10a>
 8007d88:	2b70      	cmp	r3, #112	; 0x70
 8007d8a:	d87b      	bhi.n	8007e84 <HAL_TIM_ConfigClockSource+0x1d0>
 8007d8c:	2b60      	cmp	r3, #96	; 0x60
 8007d8e:	d050      	beq.n	8007e32 <HAL_TIM_ConfigClockSource+0x17e>
 8007d90:	2b60      	cmp	r3, #96	; 0x60
 8007d92:	d877      	bhi.n	8007e84 <HAL_TIM_ConfigClockSource+0x1d0>
 8007d94:	2b50      	cmp	r3, #80	; 0x50
 8007d96:	d03c      	beq.n	8007e12 <HAL_TIM_ConfigClockSource+0x15e>
 8007d98:	2b50      	cmp	r3, #80	; 0x50
 8007d9a:	d873      	bhi.n	8007e84 <HAL_TIM_ConfigClockSource+0x1d0>
 8007d9c:	2b40      	cmp	r3, #64	; 0x40
 8007d9e:	d058      	beq.n	8007e52 <HAL_TIM_ConfigClockSource+0x19e>
 8007da0:	2b40      	cmp	r3, #64	; 0x40
 8007da2:	d86f      	bhi.n	8007e84 <HAL_TIM_ConfigClockSource+0x1d0>
 8007da4:	2b30      	cmp	r3, #48	; 0x30
 8007da6:	d064      	beq.n	8007e72 <HAL_TIM_ConfigClockSource+0x1be>
 8007da8:	2b30      	cmp	r3, #48	; 0x30
 8007daa:	d86b      	bhi.n	8007e84 <HAL_TIM_ConfigClockSource+0x1d0>
 8007dac:	2b20      	cmp	r3, #32
 8007dae:	d060      	beq.n	8007e72 <HAL_TIM_ConfigClockSource+0x1be>
 8007db0:	2b20      	cmp	r3, #32
 8007db2:	d867      	bhi.n	8007e84 <HAL_TIM_ConfigClockSource+0x1d0>
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d05c      	beq.n	8007e72 <HAL_TIM_ConfigClockSource+0x1be>
 8007db8:	2b10      	cmp	r3, #16
 8007dba:	d05a      	beq.n	8007e72 <HAL_TIM_ConfigClockSource+0x1be>
 8007dbc:	e062      	b.n	8007e84 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007dce:	f000 fdf1 	bl	80089b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007de0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	68ba      	ldr	r2, [r7, #8]
 8007de8:	609a      	str	r2, [r3, #8]
      break;
 8007dea:	e04f      	b.n	8007e8c <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007dfc:	f000 fdda 	bl	80089b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	689a      	ldr	r2, [r3, #8]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e0e:	609a      	str	r2, [r3, #8]
      break;
 8007e10:	e03c      	b.n	8007e8c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e1e:	461a      	mov	r2, r3
 8007e20:	f000 fd4c 	bl	80088bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2150      	movs	r1, #80	; 0x50
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f000 fda5 	bl	800897a <TIM_ITRx_SetConfig>
      break;
 8007e30:	e02c      	b.n	8007e8c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e3e:	461a      	mov	r2, r3
 8007e40:	f000 fd6b 	bl	800891a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2160      	movs	r1, #96	; 0x60
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f000 fd95 	bl	800897a <TIM_ITRx_SetConfig>
      break;
 8007e50:	e01c      	b.n	8007e8c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e5e:	461a      	mov	r2, r3
 8007e60:	f000 fd2c 	bl	80088bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	2140      	movs	r1, #64	; 0x40
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f000 fd85 	bl	800897a <TIM_ITRx_SetConfig>
      break;
 8007e70:	e00c      	b.n	8007e8c <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	4610      	mov	r0, r2
 8007e7e:	f000 fd7c 	bl	800897a <TIM_ITRx_SetConfig>
      break;
 8007e82:	e003      	b.n	8007e8c <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	73fb      	strb	r3, [r7, #15]
      break;
 8007e88:	e000      	b.n	8007e8c <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 8007e8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	00100070 	.word	0x00100070
 8007eac:	00100040 	.word	0x00100040
 8007eb0:	00100030 	.word	0x00100030
 8007eb4:	00100020 	.word	0x00100020

08007eb8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007ec0:	bf00      	nop
 8007ec2:	370c      	adds	r7, #12
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ed4:	bf00      	nop
 8007ed6:	370c      	adds	r7, #12
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b083      	sub	sp, #12
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ee8:	bf00      	nop
 8007eea:	370c      	adds	r7, #12
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr

08007ef4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b083      	sub	sp, #12
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007efc:	bf00      	nop
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f10:	bf00      	nop
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b085      	sub	sp, #20
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a68      	ldr	r2, [pc, #416]	; (80080d0 <TIM_Base_SetConfig+0x1b4>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d02b      	beq.n	8007f8c <TIM_Base_SetConfig+0x70>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	4a67      	ldr	r2, [pc, #412]	; (80080d4 <TIM_Base_SetConfig+0x1b8>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d027      	beq.n	8007f8c <TIM_Base_SetConfig+0x70>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f42:	d023      	beq.n	8007f8c <TIM_Base_SetConfig+0x70>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f4a:	d01f      	beq.n	8007f8c <TIM_Base_SetConfig+0x70>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	4a62      	ldr	r2, [pc, #392]	; (80080d8 <TIM_Base_SetConfig+0x1bc>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d01b      	beq.n	8007f8c <TIM_Base_SetConfig+0x70>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	4a61      	ldr	r2, [pc, #388]	; (80080dc <TIM_Base_SetConfig+0x1c0>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d017      	beq.n	8007f8c <TIM_Base_SetConfig+0x70>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	4a60      	ldr	r2, [pc, #384]	; (80080e0 <TIM_Base_SetConfig+0x1c4>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d013      	beq.n	8007f8c <TIM_Base_SetConfig+0x70>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	4a5f      	ldr	r2, [pc, #380]	; (80080e4 <TIM_Base_SetConfig+0x1c8>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d00f      	beq.n	8007f8c <TIM_Base_SetConfig+0x70>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4a5e      	ldr	r2, [pc, #376]	; (80080e8 <TIM_Base_SetConfig+0x1cc>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d00b      	beq.n	8007f8c <TIM_Base_SetConfig+0x70>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	4a5d      	ldr	r2, [pc, #372]	; (80080ec <TIM_Base_SetConfig+0x1d0>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d007      	beq.n	8007f8c <TIM_Base_SetConfig+0x70>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	4a5c      	ldr	r2, [pc, #368]	; (80080f0 <TIM_Base_SetConfig+0x1d4>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d003      	beq.n	8007f8c <TIM_Base_SetConfig+0x70>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	4a5b      	ldr	r2, [pc, #364]	; (80080f4 <TIM_Base_SetConfig+0x1d8>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d108      	bne.n	8007f9e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4a4b      	ldr	r2, [pc, #300]	; (80080d0 <TIM_Base_SetConfig+0x1b4>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d043      	beq.n	800802e <TIM_Base_SetConfig+0x112>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4a4a      	ldr	r2, [pc, #296]	; (80080d4 <TIM_Base_SetConfig+0x1b8>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d03f      	beq.n	800802e <TIM_Base_SetConfig+0x112>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fb4:	d03b      	beq.n	800802e <TIM_Base_SetConfig+0x112>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007fbc:	d037      	beq.n	800802e <TIM_Base_SetConfig+0x112>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4a45      	ldr	r2, [pc, #276]	; (80080d8 <TIM_Base_SetConfig+0x1bc>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d033      	beq.n	800802e <TIM_Base_SetConfig+0x112>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	4a44      	ldr	r2, [pc, #272]	; (80080dc <TIM_Base_SetConfig+0x1c0>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d02f      	beq.n	800802e <TIM_Base_SetConfig+0x112>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4a43      	ldr	r2, [pc, #268]	; (80080e0 <TIM_Base_SetConfig+0x1c4>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d02b      	beq.n	800802e <TIM_Base_SetConfig+0x112>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4a42      	ldr	r2, [pc, #264]	; (80080e4 <TIM_Base_SetConfig+0x1c8>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d027      	beq.n	800802e <TIM_Base_SetConfig+0x112>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4a41      	ldr	r2, [pc, #260]	; (80080e8 <TIM_Base_SetConfig+0x1cc>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d023      	beq.n	800802e <TIM_Base_SetConfig+0x112>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a40      	ldr	r2, [pc, #256]	; (80080ec <TIM_Base_SetConfig+0x1d0>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d01f      	beq.n	800802e <TIM_Base_SetConfig+0x112>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a3f      	ldr	r2, [pc, #252]	; (80080f0 <TIM_Base_SetConfig+0x1d4>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d01b      	beq.n	800802e <TIM_Base_SetConfig+0x112>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a3e      	ldr	r2, [pc, #248]	; (80080f4 <TIM_Base_SetConfig+0x1d8>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d017      	beq.n	800802e <TIM_Base_SetConfig+0x112>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4a3d      	ldr	r2, [pc, #244]	; (80080f8 <TIM_Base_SetConfig+0x1dc>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d013      	beq.n	800802e <TIM_Base_SetConfig+0x112>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4a3c      	ldr	r2, [pc, #240]	; (80080fc <TIM_Base_SetConfig+0x1e0>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d00f      	beq.n	800802e <TIM_Base_SetConfig+0x112>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4a3b      	ldr	r2, [pc, #236]	; (8008100 <TIM_Base_SetConfig+0x1e4>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d00b      	beq.n	800802e <TIM_Base_SetConfig+0x112>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4a3a      	ldr	r2, [pc, #232]	; (8008104 <TIM_Base_SetConfig+0x1e8>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d007      	beq.n	800802e <TIM_Base_SetConfig+0x112>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4a39      	ldr	r2, [pc, #228]	; (8008108 <TIM_Base_SetConfig+0x1ec>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d003      	beq.n	800802e <TIM_Base_SetConfig+0x112>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4a38      	ldr	r2, [pc, #224]	; (800810c <TIM_Base_SetConfig+0x1f0>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d108      	bne.n	8008040 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008034:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	68db      	ldr	r3, [r3, #12]
 800803a:	68fa      	ldr	r2, [r7, #12]
 800803c:	4313      	orrs	r3, r2
 800803e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	695b      	ldr	r3, [r3, #20]
 800804a:	4313      	orrs	r3, r2
 800804c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	68fa      	ldr	r2, [r7, #12]
 8008052:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	689a      	ldr	r2, [r3, #8]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	4a1a      	ldr	r2, [pc, #104]	; (80080d0 <TIM_Base_SetConfig+0x1b4>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d023      	beq.n	80080b4 <TIM_Base_SetConfig+0x198>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4a19      	ldr	r2, [pc, #100]	; (80080d4 <TIM_Base_SetConfig+0x1b8>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d01f      	beq.n	80080b4 <TIM_Base_SetConfig+0x198>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	4a1e      	ldr	r2, [pc, #120]	; (80080f0 <TIM_Base_SetConfig+0x1d4>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d01b      	beq.n	80080b4 <TIM_Base_SetConfig+0x198>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	4a1d      	ldr	r2, [pc, #116]	; (80080f4 <TIM_Base_SetConfig+0x1d8>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d017      	beq.n	80080b4 <TIM_Base_SetConfig+0x198>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4a1c      	ldr	r2, [pc, #112]	; (80080f8 <TIM_Base_SetConfig+0x1dc>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d013      	beq.n	80080b4 <TIM_Base_SetConfig+0x198>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	4a1b      	ldr	r2, [pc, #108]	; (80080fc <TIM_Base_SetConfig+0x1e0>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d00f      	beq.n	80080b4 <TIM_Base_SetConfig+0x198>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4a1a      	ldr	r2, [pc, #104]	; (8008100 <TIM_Base_SetConfig+0x1e4>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d00b      	beq.n	80080b4 <TIM_Base_SetConfig+0x198>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	4a19      	ldr	r2, [pc, #100]	; (8008104 <TIM_Base_SetConfig+0x1e8>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d007      	beq.n	80080b4 <TIM_Base_SetConfig+0x198>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4a18      	ldr	r2, [pc, #96]	; (8008108 <TIM_Base_SetConfig+0x1ec>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d003      	beq.n	80080b4 <TIM_Base_SetConfig+0x198>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	4a17      	ldr	r2, [pc, #92]	; (800810c <TIM_Base_SetConfig+0x1f0>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d103      	bne.n	80080bc <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	691a      	ldr	r2, [r3, #16]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2201      	movs	r2, #1
 80080c0:	615a      	str	r2, [r3, #20]
}
 80080c2:	bf00      	nop
 80080c4:	3714      	adds	r7, #20
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr
 80080ce:	bf00      	nop
 80080d0:	40012c00 	.word	0x40012c00
 80080d4:	50012c00 	.word	0x50012c00
 80080d8:	40000400 	.word	0x40000400
 80080dc:	50000400 	.word	0x50000400
 80080e0:	40000800 	.word	0x40000800
 80080e4:	50000800 	.word	0x50000800
 80080e8:	40000c00 	.word	0x40000c00
 80080ec:	50000c00 	.word	0x50000c00
 80080f0:	40013400 	.word	0x40013400
 80080f4:	50013400 	.word	0x50013400
 80080f8:	40014000 	.word	0x40014000
 80080fc:	50014000 	.word	0x50014000
 8008100:	40014400 	.word	0x40014400
 8008104:	50014400 	.word	0x50014400
 8008108:	40014800 	.word	0x40014800
 800810c:	50014800 	.word	0x50014800

08008110 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008110:	b480      	push	{r7}
 8008112:	b087      	sub	sp, #28
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6a1b      	ldr	r3, [r3, #32]
 800811e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6a1b      	ldr	r3, [r3, #32]
 8008124:	f023 0201 	bic.w	r2, r3, #1
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	699b      	ldr	r3, [r3, #24]
 8008136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800813e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f023 0303 	bic.w	r3, r3, #3
 800814a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	68fa      	ldr	r2, [r7, #12]
 8008152:	4313      	orrs	r3, r2
 8008154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	f023 0302 	bic.w	r3, r3, #2
 800815c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	697a      	ldr	r2, [r7, #20]
 8008164:	4313      	orrs	r3, r2
 8008166:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	4a40      	ldr	r2, [pc, #256]	; (800826c <TIM_OC1_SetConfig+0x15c>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d023      	beq.n	80081b8 <TIM_OC1_SetConfig+0xa8>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	4a3f      	ldr	r2, [pc, #252]	; (8008270 <TIM_OC1_SetConfig+0x160>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d01f      	beq.n	80081b8 <TIM_OC1_SetConfig+0xa8>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	4a3e      	ldr	r2, [pc, #248]	; (8008274 <TIM_OC1_SetConfig+0x164>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d01b      	beq.n	80081b8 <TIM_OC1_SetConfig+0xa8>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	4a3d      	ldr	r2, [pc, #244]	; (8008278 <TIM_OC1_SetConfig+0x168>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d017      	beq.n	80081b8 <TIM_OC1_SetConfig+0xa8>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	4a3c      	ldr	r2, [pc, #240]	; (800827c <TIM_OC1_SetConfig+0x16c>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d013      	beq.n	80081b8 <TIM_OC1_SetConfig+0xa8>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	4a3b      	ldr	r2, [pc, #236]	; (8008280 <TIM_OC1_SetConfig+0x170>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d00f      	beq.n	80081b8 <TIM_OC1_SetConfig+0xa8>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a3a      	ldr	r2, [pc, #232]	; (8008284 <TIM_OC1_SetConfig+0x174>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d00b      	beq.n	80081b8 <TIM_OC1_SetConfig+0xa8>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4a39      	ldr	r2, [pc, #228]	; (8008288 <TIM_OC1_SetConfig+0x178>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d007      	beq.n	80081b8 <TIM_OC1_SetConfig+0xa8>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	4a38      	ldr	r2, [pc, #224]	; (800828c <TIM_OC1_SetConfig+0x17c>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d003      	beq.n	80081b8 <TIM_OC1_SetConfig+0xa8>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	4a37      	ldr	r2, [pc, #220]	; (8008290 <TIM_OC1_SetConfig+0x180>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d10c      	bne.n	80081d2 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	f023 0308 	bic.w	r3, r3, #8
 80081be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	697a      	ldr	r2, [r7, #20]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	f023 0304 	bic.w	r3, r3, #4
 80081d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	4a25      	ldr	r2, [pc, #148]	; (800826c <TIM_OC1_SetConfig+0x15c>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d023      	beq.n	8008222 <TIM_OC1_SetConfig+0x112>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4a24      	ldr	r2, [pc, #144]	; (8008270 <TIM_OC1_SetConfig+0x160>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d01f      	beq.n	8008222 <TIM_OC1_SetConfig+0x112>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4a23      	ldr	r2, [pc, #140]	; (8008274 <TIM_OC1_SetConfig+0x164>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d01b      	beq.n	8008222 <TIM_OC1_SetConfig+0x112>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4a22      	ldr	r2, [pc, #136]	; (8008278 <TIM_OC1_SetConfig+0x168>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d017      	beq.n	8008222 <TIM_OC1_SetConfig+0x112>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	4a21      	ldr	r2, [pc, #132]	; (800827c <TIM_OC1_SetConfig+0x16c>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d013      	beq.n	8008222 <TIM_OC1_SetConfig+0x112>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	4a20      	ldr	r2, [pc, #128]	; (8008280 <TIM_OC1_SetConfig+0x170>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d00f      	beq.n	8008222 <TIM_OC1_SetConfig+0x112>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	4a1f      	ldr	r2, [pc, #124]	; (8008284 <TIM_OC1_SetConfig+0x174>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d00b      	beq.n	8008222 <TIM_OC1_SetConfig+0x112>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	4a1e      	ldr	r2, [pc, #120]	; (8008288 <TIM_OC1_SetConfig+0x178>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d007      	beq.n	8008222 <TIM_OC1_SetConfig+0x112>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	4a1d      	ldr	r2, [pc, #116]	; (800828c <TIM_OC1_SetConfig+0x17c>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d003      	beq.n	8008222 <TIM_OC1_SetConfig+0x112>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4a1c      	ldr	r2, [pc, #112]	; (8008290 <TIM_OC1_SetConfig+0x180>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d111      	bne.n	8008246 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008228:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008230:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	695b      	ldr	r3, [r3, #20]
 8008236:	693a      	ldr	r2, [r7, #16]
 8008238:	4313      	orrs	r3, r2
 800823a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	699b      	ldr	r3, [r3, #24]
 8008240:	693a      	ldr	r2, [r7, #16]
 8008242:	4313      	orrs	r3, r2
 8008244:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	693a      	ldr	r2, [r7, #16]
 800824a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	68fa      	ldr	r2, [r7, #12]
 8008250:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	685a      	ldr	r2, [r3, #4]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	697a      	ldr	r2, [r7, #20]
 800825e:	621a      	str	r2, [r3, #32]
}
 8008260:	bf00      	nop
 8008262:	371c      	adds	r7, #28
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr
 800826c:	40012c00 	.word	0x40012c00
 8008270:	50012c00 	.word	0x50012c00
 8008274:	40013400 	.word	0x40013400
 8008278:	50013400 	.word	0x50013400
 800827c:	40014000 	.word	0x40014000
 8008280:	50014000 	.word	0x50014000
 8008284:	40014400 	.word	0x40014400
 8008288:	50014400 	.word	0x50014400
 800828c:	40014800 	.word	0x40014800
 8008290:	50014800 	.word	0x50014800

08008294 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008294:	b480      	push	{r7}
 8008296:	b087      	sub	sp, #28
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a1b      	ldr	r3, [r3, #32]
 80082a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6a1b      	ldr	r3, [r3, #32]
 80082a8:	f023 0210 	bic.w	r2, r3, #16
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	699b      	ldr	r3, [r3, #24]
 80082ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80082c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	021b      	lsls	r3, r3, #8
 80082d6:	68fa      	ldr	r2, [r7, #12]
 80082d8:	4313      	orrs	r3, r2
 80082da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	f023 0320 	bic.w	r3, r3, #32
 80082e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	011b      	lsls	r3, r3, #4
 80082ea:	697a      	ldr	r2, [r7, #20]
 80082ec:	4313      	orrs	r3, r2
 80082ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a36      	ldr	r2, [pc, #216]	; (80083cc <TIM_OC2_SetConfig+0x138>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d00b      	beq.n	8008310 <TIM_OC2_SetConfig+0x7c>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a35      	ldr	r2, [pc, #212]	; (80083d0 <TIM_OC2_SetConfig+0x13c>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d007      	beq.n	8008310 <TIM_OC2_SetConfig+0x7c>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a34      	ldr	r2, [pc, #208]	; (80083d4 <TIM_OC2_SetConfig+0x140>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d003      	beq.n	8008310 <TIM_OC2_SetConfig+0x7c>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4a33      	ldr	r2, [pc, #204]	; (80083d8 <TIM_OC2_SetConfig+0x144>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d10d      	bne.n	800832c <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008316:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	011b      	lsls	r3, r3, #4
 800831e:	697a      	ldr	r2, [r7, #20]
 8008320:	4313      	orrs	r3, r2
 8008322:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800832a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	4a27      	ldr	r2, [pc, #156]	; (80083cc <TIM_OC2_SetConfig+0x138>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d023      	beq.n	800837c <TIM_OC2_SetConfig+0xe8>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	4a26      	ldr	r2, [pc, #152]	; (80083d0 <TIM_OC2_SetConfig+0x13c>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d01f      	beq.n	800837c <TIM_OC2_SetConfig+0xe8>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4a25      	ldr	r2, [pc, #148]	; (80083d4 <TIM_OC2_SetConfig+0x140>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d01b      	beq.n	800837c <TIM_OC2_SetConfig+0xe8>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	4a24      	ldr	r2, [pc, #144]	; (80083d8 <TIM_OC2_SetConfig+0x144>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d017      	beq.n	800837c <TIM_OC2_SetConfig+0xe8>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	4a23      	ldr	r2, [pc, #140]	; (80083dc <TIM_OC2_SetConfig+0x148>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d013      	beq.n	800837c <TIM_OC2_SetConfig+0xe8>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	4a22      	ldr	r2, [pc, #136]	; (80083e0 <TIM_OC2_SetConfig+0x14c>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d00f      	beq.n	800837c <TIM_OC2_SetConfig+0xe8>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	4a21      	ldr	r2, [pc, #132]	; (80083e4 <TIM_OC2_SetConfig+0x150>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d00b      	beq.n	800837c <TIM_OC2_SetConfig+0xe8>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	4a20      	ldr	r2, [pc, #128]	; (80083e8 <TIM_OC2_SetConfig+0x154>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d007      	beq.n	800837c <TIM_OC2_SetConfig+0xe8>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	4a1f      	ldr	r2, [pc, #124]	; (80083ec <TIM_OC2_SetConfig+0x158>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d003      	beq.n	800837c <TIM_OC2_SetConfig+0xe8>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4a1e      	ldr	r2, [pc, #120]	; (80083f0 <TIM_OC2_SetConfig+0x15c>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d113      	bne.n	80083a4 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008382:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800838a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	695b      	ldr	r3, [r3, #20]
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	693a      	ldr	r2, [r7, #16]
 8008394:	4313      	orrs	r3, r2
 8008396:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	699b      	ldr	r3, [r3, #24]
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	693a      	ldr	r2, [r7, #16]
 80083a0:	4313      	orrs	r3, r2
 80083a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	693a      	ldr	r2, [r7, #16]
 80083a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	68fa      	ldr	r2, [r7, #12]
 80083ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	685a      	ldr	r2, [r3, #4]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	697a      	ldr	r2, [r7, #20]
 80083bc:	621a      	str	r2, [r3, #32]
}
 80083be:	bf00      	nop
 80083c0:	371c      	adds	r7, #28
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr
 80083ca:	bf00      	nop
 80083cc:	40012c00 	.word	0x40012c00
 80083d0:	50012c00 	.word	0x50012c00
 80083d4:	40013400 	.word	0x40013400
 80083d8:	50013400 	.word	0x50013400
 80083dc:	40014000 	.word	0x40014000
 80083e0:	50014000 	.word	0x50014000
 80083e4:	40014400 	.word	0x40014400
 80083e8:	50014400 	.word	0x50014400
 80083ec:	40014800 	.word	0x40014800
 80083f0:	50014800 	.word	0x50014800

080083f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b087      	sub	sp, #28
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6a1b      	ldr	r3, [r3, #32]
 8008402:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6a1b      	ldr	r3, [r3, #32]
 8008408:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	69db      	ldr	r3, [r3, #28]
 800841a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f023 0303 	bic.w	r3, r3, #3
 800842e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	68fa      	ldr	r2, [r7, #12]
 8008436:	4313      	orrs	r3, r2
 8008438:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008440:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	021b      	lsls	r3, r3, #8
 8008448:	697a      	ldr	r2, [r7, #20]
 800844a:	4313      	orrs	r3, r2
 800844c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4a35      	ldr	r2, [pc, #212]	; (8008528 <TIM_OC3_SetConfig+0x134>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d00b      	beq.n	800846e <TIM_OC3_SetConfig+0x7a>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	4a34      	ldr	r2, [pc, #208]	; (800852c <TIM_OC3_SetConfig+0x138>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d007      	beq.n	800846e <TIM_OC3_SetConfig+0x7a>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4a33      	ldr	r2, [pc, #204]	; (8008530 <TIM_OC3_SetConfig+0x13c>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d003      	beq.n	800846e <TIM_OC3_SetConfig+0x7a>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4a32      	ldr	r2, [pc, #200]	; (8008534 <TIM_OC3_SetConfig+0x140>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d10d      	bne.n	800848a <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008474:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	68db      	ldr	r3, [r3, #12]
 800847a:	021b      	lsls	r3, r3, #8
 800847c:	697a      	ldr	r2, [r7, #20]
 800847e:	4313      	orrs	r3, r2
 8008480:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008488:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	4a26      	ldr	r2, [pc, #152]	; (8008528 <TIM_OC3_SetConfig+0x134>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d023      	beq.n	80084da <TIM_OC3_SetConfig+0xe6>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	4a25      	ldr	r2, [pc, #148]	; (800852c <TIM_OC3_SetConfig+0x138>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d01f      	beq.n	80084da <TIM_OC3_SetConfig+0xe6>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	4a24      	ldr	r2, [pc, #144]	; (8008530 <TIM_OC3_SetConfig+0x13c>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d01b      	beq.n	80084da <TIM_OC3_SetConfig+0xe6>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	4a23      	ldr	r2, [pc, #140]	; (8008534 <TIM_OC3_SetConfig+0x140>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d017      	beq.n	80084da <TIM_OC3_SetConfig+0xe6>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4a22      	ldr	r2, [pc, #136]	; (8008538 <TIM_OC3_SetConfig+0x144>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d013      	beq.n	80084da <TIM_OC3_SetConfig+0xe6>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	4a21      	ldr	r2, [pc, #132]	; (800853c <TIM_OC3_SetConfig+0x148>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d00f      	beq.n	80084da <TIM_OC3_SetConfig+0xe6>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	4a20      	ldr	r2, [pc, #128]	; (8008540 <TIM_OC3_SetConfig+0x14c>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d00b      	beq.n	80084da <TIM_OC3_SetConfig+0xe6>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	4a1f      	ldr	r2, [pc, #124]	; (8008544 <TIM_OC3_SetConfig+0x150>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d007      	beq.n	80084da <TIM_OC3_SetConfig+0xe6>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	4a1e      	ldr	r2, [pc, #120]	; (8008548 <TIM_OC3_SetConfig+0x154>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d003      	beq.n	80084da <TIM_OC3_SetConfig+0xe6>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	4a1d      	ldr	r2, [pc, #116]	; (800854c <TIM_OC3_SetConfig+0x158>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d113      	bne.n	8008502 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80084e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	695b      	ldr	r3, [r3, #20]
 80084ee:	011b      	lsls	r3, r3, #4
 80084f0:	693a      	ldr	r2, [r7, #16]
 80084f2:	4313      	orrs	r3, r2
 80084f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	699b      	ldr	r3, [r3, #24]
 80084fa:	011b      	lsls	r3, r3, #4
 80084fc:	693a      	ldr	r2, [r7, #16]
 80084fe:	4313      	orrs	r3, r2
 8008500:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	693a      	ldr	r2, [r7, #16]
 8008506:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	68fa      	ldr	r2, [r7, #12]
 800850c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	685a      	ldr	r2, [r3, #4]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	697a      	ldr	r2, [r7, #20]
 800851a:	621a      	str	r2, [r3, #32]
}
 800851c:	bf00      	nop
 800851e:	371c      	adds	r7, #28
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr
 8008528:	40012c00 	.word	0x40012c00
 800852c:	50012c00 	.word	0x50012c00
 8008530:	40013400 	.word	0x40013400
 8008534:	50013400 	.word	0x50013400
 8008538:	40014000 	.word	0x40014000
 800853c:	50014000 	.word	0x50014000
 8008540:	40014400 	.word	0x40014400
 8008544:	50014400 	.word	0x50014400
 8008548:	40014800 	.word	0x40014800
 800854c:	50014800 	.word	0x50014800

08008550 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008550:	b480      	push	{r7}
 8008552:	b087      	sub	sp, #28
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6a1b      	ldr	r3, [r3, #32]
 800855e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6a1b      	ldr	r3, [r3, #32]
 8008564:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	69db      	ldr	r3, [r3, #28]
 8008576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800857e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800858a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	021b      	lsls	r3, r3, #8
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	4313      	orrs	r3, r2
 8008596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800859e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	031b      	lsls	r3, r3, #12
 80085a6:	697a      	ldr	r2, [r7, #20]
 80085a8:	4313      	orrs	r3, r2
 80085aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	4a36      	ldr	r2, [pc, #216]	; (8008688 <TIM_OC4_SetConfig+0x138>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d00b      	beq.n	80085cc <TIM_OC4_SetConfig+0x7c>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	4a35      	ldr	r2, [pc, #212]	; (800868c <TIM_OC4_SetConfig+0x13c>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d007      	beq.n	80085cc <TIM_OC4_SetConfig+0x7c>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	4a34      	ldr	r2, [pc, #208]	; (8008690 <TIM_OC4_SetConfig+0x140>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d003      	beq.n	80085cc <TIM_OC4_SetConfig+0x7c>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	4a33      	ldr	r2, [pc, #204]	; (8008694 <TIM_OC4_SetConfig+0x144>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d10d      	bne.n	80085e8 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80085d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	68db      	ldr	r3, [r3, #12]
 80085d8:	031b      	lsls	r3, r3, #12
 80085da:	697a      	ldr	r2, [r7, #20]
 80085dc:	4313      	orrs	r3, r2
 80085de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4a27      	ldr	r2, [pc, #156]	; (8008688 <TIM_OC4_SetConfig+0x138>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d023      	beq.n	8008638 <TIM_OC4_SetConfig+0xe8>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	4a26      	ldr	r2, [pc, #152]	; (800868c <TIM_OC4_SetConfig+0x13c>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d01f      	beq.n	8008638 <TIM_OC4_SetConfig+0xe8>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	4a25      	ldr	r2, [pc, #148]	; (8008690 <TIM_OC4_SetConfig+0x140>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d01b      	beq.n	8008638 <TIM_OC4_SetConfig+0xe8>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4a24      	ldr	r2, [pc, #144]	; (8008694 <TIM_OC4_SetConfig+0x144>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d017      	beq.n	8008638 <TIM_OC4_SetConfig+0xe8>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	4a23      	ldr	r2, [pc, #140]	; (8008698 <TIM_OC4_SetConfig+0x148>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d013      	beq.n	8008638 <TIM_OC4_SetConfig+0xe8>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	4a22      	ldr	r2, [pc, #136]	; (800869c <TIM_OC4_SetConfig+0x14c>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d00f      	beq.n	8008638 <TIM_OC4_SetConfig+0xe8>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4a21      	ldr	r2, [pc, #132]	; (80086a0 <TIM_OC4_SetConfig+0x150>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d00b      	beq.n	8008638 <TIM_OC4_SetConfig+0xe8>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4a20      	ldr	r2, [pc, #128]	; (80086a4 <TIM_OC4_SetConfig+0x154>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d007      	beq.n	8008638 <TIM_OC4_SetConfig+0xe8>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a1f      	ldr	r2, [pc, #124]	; (80086a8 <TIM_OC4_SetConfig+0x158>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d003      	beq.n	8008638 <TIM_OC4_SetConfig+0xe8>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4a1e      	ldr	r2, [pc, #120]	; (80086ac <TIM_OC4_SetConfig+0x15c>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d113      	bne.n	8008660 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800863e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008646:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	695b      	ldr	r3, [r3, #20]
 800864c:	019b      	lsls	r3, r3, #6
 800864e:	693a      	ldr	r2, [r7, #16]
 8008650:	4313      	orrs	r3, r2
 8008652:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	699b      	ldr	r3, [r3, #24]
 8008658:	019b      	lsls	r3, r3, #6
 800865a:	693a      	ldr	r2, [r7, #16]
 800865c:	4313      	orrs	r3, r2
 800865e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	693a      	ldr	r2, [r7, #16]
 8008664:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	68fa      	ldr	r2, [r7, #12]
 800866a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	685a      	ldr	r2, [r3, #4]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	697a      	ldr	r2, [r7, #20]
 8008678:	621a      	str	r2, [r3, #32]
}
 800867a:	bf00      	nop
 800867c:	371c      	adds	r7, #28
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr
 8008686:	bf00      	nop
 8008688:	40012c00 	.word	0x40012c00
 800868c:	50012c00 	.word	0x50012c00
 8008690:	40013400 	.word	0x40013400
 8008694:	50013400 	.word	0x50013400
 8008698:	40014000 	.word	0x40014000
 800869c:	50014000 	.word	0x50014000
 80086a0:	40014400 	.word	0x40014400
 80086a4:	50014400 	.word	0x50014400
 80086a8:	40014800 	.word	0x40014800
 80086ac:	50014800 	.word	0x50014800

080086b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b087      	sub	sp, #28
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6a1b      	ldr	r3, [r3, #32]
 80086be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6a1b      	ldr	r3, [r3, #32]
 80086c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	68fa      	ldr	r2, [r7, #12]
 80086ea:	4313      	orrs	r3, r2
 80086ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80086f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	041b      	lsls	r3, r3, #16
 80086fc:	693a      	ldr	r2, [r7, #16]
 80086fe:	4313      	orrs	r3, r2
 8008700:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4a21      	ldr	r2, [pc, #132]	; (800878c <TIM_OC5_SetConfig+0xdc>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d023      	beq.n	8008752 <TIM_OC5_SetConfig+0xa2>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4a20      	ldr	r2, [pc, #128]	; (8008790 <TIM_OC5_SetConfig+0xe0>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d01f      	beq.n	8008752 <TIM_OC5_SetConfig+0xa2>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4a1f      	ldr	r2, [pc, #124]	; (8008794 <TIM_OC5_SetConfig+0xe4>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d01b      	beq.n	8008752 <TIM_OC5_SetConfig+0xa2>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4a1e      	ldr	r2, [pc, #120]	; (8008798 <TIM_OC5_SetConfig+0xe8>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d017      	beq.n	8008752 <TIM_OC5_SetConfig+0xa2>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	4a1d      	ldr	r2, [pc, #116]	; (800879c <TIM_OC5_SetConfig+0xec>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d013      	beq.n	8008752 <TIM_OC5_SetConfig+0xa2>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	4a1c      	ldr	r2, [pc, #112]	; (80087a0 <TIM_OC5_SetConfig+0xf0>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d00f      	beq.n	8008752 <TIM_OC5_SetConfig+0xa2>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	4a1b      	ldr	r2, [pc, #108]	; (80087a4 <TIM_OC5_SetConfig+0xf4>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d00b      	beq.n	8008752 <TIM_OC5_SetConfig+0xa2>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4a1a      	ldr	r2, [pc, #104]	; (80087a8 <TIM_OC5_SetConfig+0xf8>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d007      	beq.n	8008752 <TIM_OC5_SetConfig+0xa2>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	4a19      	ldr	r2, [pc, #100]	; (80087ac <TIM_OC5_SetConfig+0xfc>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d003      	beq.n	8008752 <TIM_OC5_SetConfig+0xa2>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	4a18      	ldr	r2, [pc, #96]	; (80087b0 <TIM_OC5_SetConfig+0x100>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d109      	bne.n	8008766 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008758:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	695b      	ldr	r3, [r3, #20]
 800875e:	021b      	lsls	r3, r3, #8
 8008760:	697a      	ldr	r2, [r7, #20]
 8008762:	4313      	orrs	r3, r2
 8008764:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	697a      	ldr	r2, [r7, #20]
 800876a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	68fa      	ldr	r2, [r7, #12]
 8008770:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	685a      	ldr	r2, [r3, #4]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	693a      	ldr	r2, [r7, #16]
 800877e:	621a      	str	r2, [r3, #32]
}
 8008780:	bf00      	nop
 8008782:	371c      	adds	r7, #28
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr
 800878c:	40012c00 	.word	0x40012c00
 8008790:	50012c00 	.word	0x50012c00
 8008794:	40013400 	.word	0x40013400
 8008798:	50013400 	.word	0x50013400
 800879c:	40014000 	.word	0x40014000
 80087a0:	50014000 	.word	0x50014000
 80087a4:	40014400 	.word	0x40014400
 80087a8:	50014400 	.word	0x50014400
 80087ac:	40014800 	.word	0x40014800
 80087b0:	50014800 	.word	0x50014800

080087b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b087      	sub	sp, #28
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6a1b      	ldr	r3, [r3, #32]
 80087c2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6a1b      	ldr	r3, [r3, #32]
 80087c8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80087e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	021b      	lsls	r3, r3, #8
 80087ee:	68fa      	ldr	r2, [r7, #12]
 80087f0:	4313      	orrs	r3, r2
 80087f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80087fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	689b      	ldr	r3, [r3, #8]
 8008800:	051b      	lsls	r3, r3, #20
 8008802:	693a      	ldr	r2, [r7, #16]
 8008804:	4313      	orrs	r3, r2
 8008806:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	4a22      	ldr	r2, [pc, #136]	; (8008894 <TIM_OC6_SetConfig+0xe0>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d023      	beq.n	8008858 <TIM_OC6_SetConfig+0xa4>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	4a21      	ldr	r2, [pc, #132]	; (8008898 <TIM_OC6_SetConfig+0xe4>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d01f      	beq.n	8008858 <TIM_OC6_SetConfig+0xa4>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	4a20      	ldr	r2, [pc, #128]	; (800889c <TIM_OC6_SetConfig+0xe8>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d01b      	beq.n	8008858 <TIM_OC6_SetConfig+0xa4>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4a1f      	ldr	r2, [pc, #124]	; (80088a0 <TIM_OC6_SetConfig+0xec>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d017      	beq.n	8008858 <TIM_OC6_SetConfig+0xa4>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	4a1e      	ldr	r2, [pc, #120]	; (80088a4 <TIM_OC6_SetConfig+0xf0>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d013      	beq.n	8008858 <TIM_OC6_SetConfig+0xa4>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4a1d      	ldr	r2, [pc, #116]	; (80088a8 <TIM_OC6_SetConfig+0xf4>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d00f      	beq.n	8008858 <TIM_OC6_SetConfig+0xa4>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	4a1c      	ldr	r2, [pc, #112]	; (80088ac <TIM_OC6_SetConfig+0xf8>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d00b      	beq.n	8008858 <TIM_OC6_SetConfig+0xa4>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	4a1b      	ldr	r2, [pc, #108]	; (80088b0 <TIM_OC6_SetConfig+0xfc>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d007      	beq.n	8008858 <TIM_OC6_SetConfig+0xa4>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	4a1a      	ldr	r2, [pc, #104]	; (80088b4 <TIM_OC6_SetConfig+0x100>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d003      	beq.n	8008858 <TIM_OC6_SetConfig+0xa4>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	4a19      	ldr	r2, [pc, #100]	; (80088b8 <TIM_OC6_SetConfig+0x104>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d109      	bne.n	800886c <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800885e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	695b      	ldr	r3, [r3, #20]
 8008864:	029b      	lsls	r3, r3, #10
 8008866:	697a      	ldr	r2, [r7, #20]
 8008868:	4313      	orrs	r3, r2
 800886a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	697a      	ldr	r2, [r7, #20]
 8008870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	68fa      	ldr	r2, [r7, #12]
 8008876:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	685a      	ldr	r2, [r3, #4]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	693a      	ldr	r2, [r7, #16]
 8008884:	621a      	str	r2, [r3, #32]
}
 8008886:	bf00      	nop
 8008888:	371c      	adds	r7, #28
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr
 8008892:	bf00      	nop
 8008894:	40012c00 	.word	0x40012c00
 8008898:	50012c00 	.word	0x50012c00
 800889c:	40013400 	.word	0x40013400
 80088a0:	50013400 	.word	0x50013400
 80088a4:	40014000 	.word	0x40014000
 80088a8:	50014000 	.word	0x50014000
 80088ac:	40014400 	.word	0x40014400
 80088b0:	50014400 	.word	0x50014400
 80088b4:	40014800 	.word	0x40014800
 80088b8:	50014800 	.word	0x50014800

080088bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088bc:	b480      	push	{r7}
 80088be:	b087      	sub	sp, #28
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	6a1b      	ldr	r3, [r3, #32]
 80088cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	6a1b      	ldr	r3, [r3, #32]
 80088d2:	f023 0201 	bic.w	r2, r3, #1
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	699b      	ldr	r3, [r3, #24]
 80088de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80088e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	011b      	lsls	r3, r3, #4
 80088ec:	693a      	ldr	r2, [r7, #16]
 80088ee:	4313      	orrs	r3, r2
 80088f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	f023 030a 	bic.w	r3, r3, #10
 80088f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80088fa:	697a      	ldr	r2, [r7, #20]
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	4313      	orrs	r3, r2
 8008900:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	693a      	ldr	r2, [r7, #16]
 8008906:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	697a      	ldr	r2, [r7, #20]
 800890c:	621a      	str	r2, [r3, #32]
}
 800890e:	bf00      	nop
 8008910:	371c      	adds	r7, #28
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr

0800891a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800891a:	b480      	push	{r7}
 800891c:	b087      	sub	sp, #28
 800891e:	af00      	add	r7, sp, #0
 8008920:	60f8      	str	r0, [r7, #12]
 8008922:	60b9      	str	r1, [r7, #8]
 8008924:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	6a1b      	ldr	r3, [r3, #32]
 800892a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	6a1b      	ldr	r3, [r3, #32]
 8008930:	f023 0210 	bic.w	r2, r3, #16
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	699b      	ldr	r3, [r3, #24]
 800893c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008944:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	031b      	lsls	r3, r3, #12
 800894a:	693a      	ldr	r2, [r7, #16]
 800894c:	4313      	orrs	r3, r2
 800894e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008956:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	011b      	lsls	r3, r3, #4
 800895c:	697a      	ldr	r2, [r7, #20]
 800895e:	4313      	orrs	r3, r2
 8008960:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	693a      	ldr	r2, [r7, #16]
 8008966:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	697a      	ldr	r2, [r7, #20]
 800896c:	621a      	str	r2, [r3, #32]
}
 800896e:	bf00      	nop
 8008970:	371c      	adds	r7, #28
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr

0800897a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800897a:	b480      	push	{r7}
 800897c:	b085      	sub	sp, #20
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]
 8008982:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008994:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008996:	683a      	ldr	r2, [r7, #0]
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	4313      	orrs	r3, r2
 800899c:	f043 0307 	orr.w	r3, r3, #7
 80089a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	68fa      	ldr	r2, [r7, #12]
 80089a6:	609a      	str	r2, [r3, #8]
}
 80089a8:	bf00      	nop
 80089aa:	3714      	adds	r7, #20
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b087      	sub	sp, #28
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	607a      	str	r2, [r7, #4]
 80089c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	689b      	ldr	r3, [r3, #8]
 80089c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80089ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	021a      	lsls	r2, r3, #8
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	431a      	orrs	r2, r3
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	4313      	orrs	r3, r2
 80089dc:	697a      	ldr	r2, [r7, #20]
 80089de:	4313      	orrs	r3, r2
 80089e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	697a      	ldr	r2, [r7, #20]
 80089e6:	609a      	str	r2, [r3, #8]
}
 80089e8:	bf00      	nop
 80089ea:	371c      	adds	r7, #28
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr

080089f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b087      	sub	sp, #28
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	f003 031f 	and.w	r3, r3, #31
 8008a06:	2201      	movs	r2, #1
 8008a08:	fa02 f303 	lsl.w	r3, r2, r3
 8008a0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	6a1a      	ldr	r2, [r3, #32]
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	43db      	mvns	r3, r3
 8008a16:	401a      	ands	r2, r3
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	6a1a      	ldr	r2, [r3, #32]
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	f003 031f 	and.w	r3, r3, #31
 8008a26:	6879      	ldr	r1, [r7, #4]
 8008a28:	fa01 f303 	lsl.w	r3, r1, r3
 8008a2c:	431a      	orrs	r2, r3
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	621a      	str	r2, [r3, #32]
}
 8008a32:	bf00      	nop
 8008a34:	371c      	adds	r7, #28
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr
	...

08008a40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b085      	sub	sp, #20
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d101      	bne.n	8008a58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a54:	2302      	movs	r3, #2
 8008a56:	e097      	b.n	8008b88 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2202      	movs	r2, #2
 8008a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a45      	ldr	r2, [pc, #276]	; (8008b94 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d00e      	beq.n	8008aa0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a44      	ldr	r2, [pc, #272]	; (8008b98 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d009      	beq.n	8008aa0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a42      	ldr	r2, [pc, #264]	; (8008b9c <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d004      	beq.n	8008aa0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a41      	ldr	r2, [pc, #260]	; (8008ba0 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d108      	bne.n	8008ab2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008aa6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	68fa      	ldr	r2, [r7, #12]
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008abc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	68fa      	ldr	r2, [r7, #12]
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	68fa      	ldr	r2, [r7, #12]
 8008ace:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a2f      	ldr	r2, [pc, #188]	; (8008b94 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d040      	beq.n	8008b5c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a2e      	ldr	r2, [pc, #184]	; (8008b98 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d03b      	beq.n	8008b5c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008aec:	d036      	beq.n	8008b5c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008af6:	d031      	beq.n	8008b5c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a29      	ldr	r2, [pc, #164]	; (8008ba4 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d02c      	beq.n	8008b5c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a28      	ldr	r2, [pc, #160]	; (8008ba8 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d027      	beq.n	8008b5c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a26      	ldr	r2, [pc, #152]	; (8008bac <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d022      	beq.n	8008b5c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a25      	ldr	r2, [pc, #148]	; (8008bb0 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d01d      	beq.n	8008b5c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a23      	ldr	r2, [pc, #140]	; (8008bb4 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d018      	beq.n	8008b5c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a22      	ldr	r2, [pc, #136]	; (8008bb8 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d013      	beq.n	8008b5c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a18      	ldr	r2, [pc, #96]	; (8008b9c <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d00e      	beq.n	8008b5c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a17      	ldr	r2, [pc, #92]	; (8008ba0 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d009      	beq.n	8008b5c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a1b      	ldr	r2, [pc, #108]	; (8008bbc <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d004      	beq.n	8008b5c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a1a      	ldr	r2, [pc, #104]	; (8008bc0 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d10c      	bne.n	8008b76 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b62:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	689b      	ldr	r3, [r3, #8]
 8008b68:	68ba      	ldr	r2, [r7, #8]
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	68ba      	ldr	r2, [r7, #8]
 8008b74:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2201      	movs	r2, #1
 8008b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2200      	movs	r2, #0
 8008b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b86:	2300      	movs	r3, #0
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3714      	adds	r7, #20
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr
 8008b94:	40012c00 	.word	0x40012c00
 8008b98:	50012c00 	.word	0x50012c00
 8008b9c:	40013400 	.word	0x40013400
 8008ba0:	50013400 	.word	0x50013400
 8008ba4:	40000400 	.word	0x40000400
 8008ba8:	50000400 	.word	0x50000400
 8008bac:	40000800 	.word	0x40000800
 8008bb0:	50000800 	.word	0x50000800
 8008bb4:	40000c00 	.word	0x40000c00
 8008bb8:	50000c00 	.word	0x50000c00
 8008bbc:	40014000 	.word	0x40014000
 8008bc0:	50014000 	.word	0x50014000

08008bc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008bcc:	bf00      	nop
 8008bce:	370c      	adds	r7, #12
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr

08008bd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b083      	sub	sp, #12
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008be0:	bf00      	nop
 8008be2:	370c      	adds	r7, #12
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr

08008bec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b083      	sub	sp, #12
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008bf4:	bf00      	nop
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b083      	sub	sp, #12
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008c08:	bf00      	nop
 8008c0a:	370c      	adds	r7, #12
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr

08008c14 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b083      	sub	sp, #12
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008c1c:	bf00      	nop
 8008c1e:	370c      	adds	r7, #12
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b083      	sub	sp, #12
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008c30:	bf00      	nop
 8008c32:	370c      	adds	r7, #12
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b083      	sub	sp, #12
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008c44:	bf00      	nop
 8008c46:	370c      	adds	r7, #12
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b082      	sub	sp, #8
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d101      	bne.n	8008c62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	e042      	b.n	8008ce8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d106      	bne.n	8008c7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f7f8 f99d 	bl	8000fb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2224      	movs	r2, #36	; 0x24
 8008c7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f022 0201 	bic.w	r2, r2, #1
 8008c90:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d002      	beq.n	8008ca0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 fcaa 	bl	80095f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f000 fb05 	bl	80092b0 <UART_SetConfig>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d101      	bne.n	8008cb0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008cac:	2301      	movs	r3, #1
 8008cae:	e01b      	b.n	8008ce8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	685a      	ldr	r2, [r3, #4]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008cbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	689a      	ldr	r2, [r3, #8]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008cce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f042 0201 	orr.w	r2, r2, #1
 8008cde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 fd29 	bl	8009738 <UART_CheckIdleState>
 8008ce6:	4603      	mov	r3, r0
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3708      	adds	r7, #8
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b0ae      	sub	sp, #184	; 0xb8
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	69db      	ldr	r3, [r3, #28]
 8008cfe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008d16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008d1a:	f640 030f 	movw	r3, #2063	; 0x80f
 8008d1e:	4013      	ands	r3, r2
 8008d20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (errorflags == 0U)
 8008d24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d11b      	bne.n	8008d64 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008d2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008d30:	f003 0320 	and.w	r3, r3, #32
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d015      	beq.n	8008d64 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008d38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008d3c:	f003 0320 	and.w	r3, r3, #32
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d105      	bne.n	8008d50 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008d44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d009      	beq.n	8008d64 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	f000 827e 	beq.w	8009256 <HAL_UART_IRQHandler+0x566>
      {
        huart->RxISR(huart);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	4798      	blx	r3
      }
      return;
 8008d62:	e278      	b.n	8009256 <HAL_UART_IRQHandler+0x566>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008d64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	f000 80fd 	beq.w	8008f68 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008d6e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008d72:	4b7a      	ldr	r3, [pc, #488]	; (8008f5c <HAL_UART_IRQHandler+0x26c>)
 8008d74:	4013      	ands	r3, r2
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d106      	bne.n	8008d88 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008d7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008d7e:	4b78      	ldr	r3, [pc, #480]	; (8008f60 <HAL_UART_IRQHandler+0x270>)
 8008d80:	4013      	ands	r3, r2
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	f000 80f0 	beq.w	8008f68 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008d88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008d8c:	f003 0301 	and.w	r3, r3, #1
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d011      	beq.n	8008db8 <HAL_UART_IRQHandler+0xc8>
 8008d94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d00b      	beq.n	8008db8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	2201      	movs	r2, #1
 8008da6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dae:	f043 0201 	orr.w	r2, r3, #1
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008db8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008dbc:	f003 0302 	and.w	r3, r3, #2
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d011      	beq.n	8008de8 <HAL_UART_IRQHandler+0xf8>
 8008dc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008dc8:	f003 0301 	and.w	r3, r3, #1
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d00b      	beq.n	8008de8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	2202      	movs	r2, #2
 8008dd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dde:	f043 0204 	orr.w	r2, r3, #4
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008de8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008dec:	f003 0304 	and.w	r3, r3, #4
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d011      	beq.n	8008e18 <HAL_UART_IRQHandler+0x128>
 8008df4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008df8:	f003 0301 	and.w	r3, r3, #1
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d00b      	beq.n	8008e18 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	2204      	movs	r2, #4
 8008e06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e0e:	f043 0202 	orr.w	r2, r3, #2
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008e18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008e1c:	f003 0308 	and.w	r3, r3, #8
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d017      	beq.n	8008e54 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008e24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008e28:	f003 0320 	and.w	r3, r3, #32
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d105      	bne.n	8008e3c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008e30:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008e34:	4b49      	ldr	r3, [pc, #292]	; (8008f5c <HAL_UART_IRQHandler+0x26c>)
 8008e36:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d00b      	beq.n	8008e54 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	2208      	movs	r2, #8
 8008e42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e4a:	f043 0208 	orr.w	r2, r3, #8
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008e54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008e58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d012      	beq.n	8008e86 <HAL_UART_IRQHandler+0x196>
 8008e60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008e64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d00c      	beq.n	8008e86 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e7c:	f043 0220 	orr.w	r2, r3, #32
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	f000 81e4 	beq.w	800925a <HAL_UART_IRQHandler+0x56a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008e92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008e96:	f003 0320 	and.w	r3, r3, #32
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d013      	beq.n	8008ec6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008e9e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008ea2:	f003 0320 	and.w	r3, r3, #32
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d105      	bne.n	8008eb6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008eaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d007      	beq.n	8008ec6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d003      	beq.n	8008ec6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ecc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	689b      	ldr	r3, [r3, #8]
 8008ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eda:	2b40      	cmp	r3, #64	; 0x40
 8008edc:	d005      	beq.n	8008eea <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008ede:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008ee2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d02e      	beq.n	8008f48 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 fd35 	bl	800995a <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	689b      	ldr	r3, [r3, #8]
 8008ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008efa:	2b40      	cmp	r3, #64	; 0x40
 8008efc:	d120      	bne.n	8008f40 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d017      	beq.n	8008f38 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f0e:	4a15      	ldr	r2, [pc, #84]	; (8008f64 <HAL_UART_IRQHandler+0x274>)
 8008f10:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f7f9 fa6b 	bl	80023f4 <HAL_DMA_Abort_IT>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d019      	beq.n	8008f58 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8008f32:	4610      	mov	r0, r2
 8008f34:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f36:	e00f      	b.n	8008f58 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 f9a3 	bl	8009284 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f3e:	e00b      	b.n	8008f58 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f000 f99f 	bl	8009284 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f46:	e007      	b.n	8008f58 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 f99b 	bl	8009284 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2200      	movs	r2, #0
 8008f52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8008f56:	e180      	b.n	800925a <HAL_UART_IRQHandler+0x56a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f58:	bf00      	nop
    return;
 8008f5a:	e17e      	b.n	800925a <HAL_UART_IRQHandler+0x56a>
 8008f5c:	10000001 	.word	0x10000001
 8008f60:	04000120 	.word	0x04000120
 8008f64:	08009a27 	.word	0x08009a27

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	f040 8129 	bne.w	80091c4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008f72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008f76:	f003 0310 	and.w	r3, r3, #16
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	f000 8122 	beq.w	80091c4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008f80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008f84:	f003 0310 	and.w	r3, r3, #16
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	f000 811b 	beq.w	80091c4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	2210      	movs	r2, #16
 8008f94:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fa0:	2b40      	cmp	r3, #64	; 0x40
 8008fa2:	f040 8091 	bne.w	80090c8 <HAL_UART_IRQHandler+0x3d8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fb0:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
      if ((nb_remaining_rx_data > 0U)
 8008fb4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	f000 8150 	beq.w	800925e <HAL_UART_IRQHandler+0x56e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008fc4:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	f080 8148 	bcs.w	800925e <HAL_UART_IRQHandler+0x56e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8008fd4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fe0:	2b81      	cmp	r3, #129	; 0x81
 8008fe2:	d060      	beq.n	80090a6 <HAL_UART_IRQHandler+0x3b6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fec:	e853 3f00 	ldrex	r3, [r3]
 8008ff0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008ff2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ff4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ff8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	461a      	mov	r2, r3
 8009002:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009006:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800900a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800900c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800900e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009012:	e841 2300 	strex	r3, r2, [r1]
 8009016:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009018:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800901a:	2b00      	cmp	r3, #0
 800901c:	d1e2      	bne.n	8008fe4 <HAL_UART_IRQHandler+0x2f4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	3308      	adds	r3, #8
 8009024:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009026:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009028:	e853 3f00 	ldrex	r3, [r3]
 800902c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800902e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009030:	f023 0301 	bic.w	r3, r3, #1
 8009034:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	3308      	adds	r3, #8
 800903e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009042:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009044:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009046:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009048:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800904a:	e841 2300 	strex	r3, r2, [r1]
 800904e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009050:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009052:	2b00      	cmp	r3, #0
 8009054:	d1e3      	bne.n	800901e <HAL_UART_IRQHandler+0x32e>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2220      	movs	r2, #32
 800905a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2200      	movs	r2, #0
 8009062:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800906c:	e853 3f00 	ldrex	r3, [r3]
 8009070:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009072:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009074:	f023 0310 	bic.w	r3, r3, #16
 8009078:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	461a      	mov	r2, r3
 8009082:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009086:	65bb      	str	r3, [r7, #88]	; 0x58
 8009088:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800908c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800908e:	e841 2300 	strex	r3, r2, [r1]
 8009092:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009096:	2b00      	cmp	r3, #0
 8009098:	d1e4      	bne.n	8009064 <HAL_UART_IRQHandler+0x374>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090a0:	4618      	mov	r0, r3
 80090a2:	f7f9 f92b 	bl	80022fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2202      	movs	r2, #2
 80090aa:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	1ad3      	subs	r3, r2, r3
 80090bc:	b29b      	uxth	r3, r3
 80090be:	4619      	mov	r1, r3
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 f8e9 	bl	8009298 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80090c6:	e0ca      	b.n	800925e <HAL_UART_IRQHandler+0x56e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80090d4:	b29b      	uxth	r3, r3
 80090d6:	1ad3      	subs	r3, r2, r3
 80090d8:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
      if ((huart->RxXferCount > 0U)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	f000 80bc 	beq.w	8009262 <HAL_UART_IRQHandler+0x572>
          && (nb_rx_data > 0U))
 80090ea:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	f000 80b7 	beq.w	8009262 <HAL_UART_IRQHandler+0x572>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090fc:	e853 3f00 	ldrex	r3, [r3]
 8009100:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009104:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009108:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	461a      	mov	r2, r3
 8009112:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009116:	647b      	str	r3, [r7, #68]	; 0x44
 8009118:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800911c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800911e:	e841 2300 	strex	r3, r2, [r1]
 8009122:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009126:	2b00      	cmp	r3, #0
 8009128:	d1e4      	bne.n	80090f4 <HAL_UART_IRQHandler+0x404>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	3308      	adds	r3, #8
 8009130:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009134:	e853 3f00 	ldrex	r3, [r3]
 8009138:	623b      	str	r3, [r7, #32]
   return(result);
 800913a:	6a3b      	ldr	r3, [r7, #32]
 800913c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009140:	f023 0301 	bic.w	r3, r3, #1
 8009144:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	3308      	adds	r3, #8
 800914e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009152:	633a      	str	r2, [r7, #48]	; 0x30
 8009154:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009156:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800915a:	e841 2300 	strex	r3, r2, [r1]
 800915e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009162:	2b00      	cmp	r3, #0
 8009164:	d1e1      	bne.n	800912a <HAL_UART_IRQHandler+0x43a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2220      	movs	r2, #32
 800916a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2200      	movs	r2, #0
 8009172:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2200      	movs	r2, #0
 8009178:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	e853 3f00 	ldrex	r3, [r3]
 8009186:	60fb      	str	r3, [r7, #12]
   return(result);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f023 0310 	bic.w	r3, r3, #16
 800918e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	461a      	mov	r2, r3
 8009198:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800919c:	61fb      	str	r3, [r7, #28]
 800919e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a0:	69b9      	ldr	r1, [r7, #24]
 80091a2:	69fa      	ldr	r2, [r7, #28]
 80091a4:	e841 2300 	strex	r3, r2, [r1]
 80091a8:	617b      	str	r3, [r7, #20]
   return(result);
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d1e4      	bne.n	800917a <HAL_UART_IRQHandler+0x48a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2202      	movs	r2, #2
 80091b4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80091b6:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80091ba:	4619      	mov	r1, r3
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 f86b 	bl	8009298 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80091c2:	e04e      	b.n	8009262 <HAL_UART_IRQHandler+0x572>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80091c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80091c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d014      	beq.n	80091fa <HAL_UART_IRQHandler+0x50a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80091d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80091d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d105      	bne.n	80091e8 <HAL_UART_IRQHandler+0x4f8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80091dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80091e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d008      	beq.n	80091fa <HAL_UART_IRQHandler+0x50a>
  {
    if (huart->TxISR != NULL)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d03a      	beq.n	8009266 <HAL_UART_IRQHandler+0x576>
    {
      huart->TxISR(huart);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	4798      	blx	r3
    }
    return;
 80091f8:	e035      	b.n	8009266 <HAL_UART_IRQHandler+0x576>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80091fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80091fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009202:	2b00      	cmp	r3, #0
 8009204:	d009      	beq.n	800921a <HAL_UART_IRQHandler+0x52a>
 8009206:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800920a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800920e:	2b00      	cmp	r3, #0
 8009210:	d003      	beq.n	800921a <HAL_UART_IRQHandler+0x52a>
  {
    UART_EndTransmit_IT(huart);
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 fc1d 	bl	8009a52 <UART_EndTransmit_IT>
    return;
 8009218:	e026      	b.n	8009268 <HAL_UART_IRQHandler+0x578>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800921a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800921e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009222:	2b00      	cmp	r3, #0
 8009224:	d009      	beq.n	800923a <HAL_UART_IRQHandler+0x54a>
 8009226:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800922a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800922e:	2b00      	cmp	r3, #0
 8009230:	d003      	beq.n	800923a <HAL_UART_IRQHandler+0x54a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 fc42 	bl	8009abc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009238:	e016      	b.n	8009268 <HAL_UART_IRQHandler+0x578>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800923a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800923e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009242:	2b00      	cmp	r3, #0
 8009244:	d010      	beq.n	8009268 <HAL_UART_IRQHandler+0x578>
 8009246:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800924a:	2b00      	cmp	r3, #0
 800924c:	da0c      	bge.n	8009268 <HAL_UART_IRQHandler+0x578>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f000 fc2a 	bl	8009aa8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009254:	e008      	b.n	8009268 <HAL_UART_IRQHandler+0x578>
      return;
 8009256:	bf00      	nop
 8009258:	e006      	b.n	8009268 <HAL_UART_IRQHandler+0x578>
    return;
 800925a:	bf00      	nop
 800925c:	e004      	b.n	8009268 <HAL_UART_IRQHandler+0x578>
      return;
 800925e:	bf00      	nop
 8009260:	e002      	b.n	8009268 <HAL_UART_IRQHandler+0x578>
      return;
 8009262:	bf00      	nop
 8009264:	e000      	b.n	8009268 <HAL_UART_IRQHandler+0x578>
    return;
 8009266:	bf00      	nop
  }
}
 8009268:	37b8      	adds	r7, #184	; 0xb8
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}
 800926e:	bf00      	nop

08009270 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009270:	b480      	push	{r7}
 8009272:	b083      	sub	sp, #12
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009278:	bf00      	nop
 800927a:	370c      	adds	r7, #12
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr

08009284 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009284:	b480      	push	{r7}
 8009286:	b083      	sub	sp, #12
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800928c:	bf00      	nop
 800928e:	370c      	adds	r7, #12
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr

08009298 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009298:	b480      	push	{r7}
 800929a:	b083      	sub	sp, #12
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
 80092a0:	460b      	mov	r3, r1
 80092a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80092a4:	bf00      	nop
 80092a6:	370c      	adds	r7, #12
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr

080092b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80092b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092b4:	b094      	sub	sp, #80	; 0x50
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80092ba:	2300      	movs	r3, #0
 80092bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80092c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c2:	681a      	ldr	r2, [r3, #0]
 80092c4:	4b7e      	ldr	r3, [pc, #504]	; (80094c0 <UART_SetConfig+0x210>)
 80092c6:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80092c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ca:	689a      	ldr	r2, [r3, #8]
 80092cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ce:	691b      	ldr	r3, [r3, #16]
 80092d0:	431a      	orrs	r2, r3
 80092d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d4:	695b      	ldr	r3, [r3, #20]
 80092d6:	431a      	orrs	r2, r3
 80092d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092da:	69db      	ldr	r3, [r3, #28]
 80092dc:	4313      	orrs	r3, r2
 80092de:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80092e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4977      	ldr	r1, [pc, #476]	; (80094c4 <UART_SetConfig+0x214>)
 80092e8:	4019      	ands	r1, r3
 80092ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092f0:	430b      	orrs	r3, r1
 80092f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80092fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009300:	68d9      	ldr	r1, [r3, #12]
 8009302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009304:	681a      	ldr	r2, [r3, #0]
 8009306:	ea40 0301 	orr.w	r3, r0, r1
 800930a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800930c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800930e:	699b      	ldr	r3, [r3, #24]
 8009310:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	4b6a      	ldr	r3, [pc, #424]	; (80094c0 <UART_SetConfig+0x210>)
 8009318:	429a      	cmp	r2, r3
 800931a:	d009      	beq.n	8009330 <UART_SetConfig+0x80>
 800931c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800931e:	681a      	ldr	r2, [r3, #0]
 8009320:	4b69      	ldr	r3, [pc, #420]	; (80094c8 <UART_SetConfig+0x218>)
 8009322:	429a      	cmp	r2, r3
 8009324:	d004      	beq.n	8009330 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009328:	6a1a      	ldr	r2, [r3, #32]
 800932a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800932c:	4313      	orrs	r3, r2
 800932e:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	689b      	ldr	r3, [r3, #8]
 8009336:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800933a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800933e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009340:	681a      	ldr	r2, [r3, #0]
 8009342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009344:	430b      	orrs	r3, r1
 8009346:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800934e:	f023 000f 	bic.w	r0, r3, #15
 8009352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009354:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009358:	681a      	ldr	r2, [r3, #0]
 800935a:	ea40 0301 	orr.w	r3, r0, r1
 800935e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	4b59      	ldr	r3, [pc, #356]	; (80094cc <UART_SetConfig+0x21c>)
 8009366:	429a      	cmp	r2, r3
 8009368:	d102      	bne.n	8009370 <UART_SetConfig+0xc0>
 800936a:	2301      	movs	r3, #1
 800936c:	64bb      	str	r3, [r7, #72]	; 0x48
 800936e:	e029      	b.n	80093c4 <UART_SetConfig+0x114>
 8009370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009372:	681a      	ldr	r2, [r3, #0]
 8009374:	4b56      	ldr	r3, [pc, #344]	; (80094d0 <UART_SetConfig+0x220>)
 8009376:	429a      	cmp	r2, r3
 8009378:	d102      	bne.n	8009380 <UART_SetConfig+0xd0>
 800937a:	2302      	movs	r3, #2
 800937c:	64bb      	str	r3, [r7, #72]	; 0x48
 800937e:	e021      	b.n	80093c4 <UART_SetConfig+0x114>
 8009380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009382:	681a      	ldr	r2, [r3, #0]
 8009384:	4b53      	ldr	r3, [pc, #332]	; (80094d4 <UART_SetConfig+0x224>)
 8009386:	429a      	cmp	r2, r3
 8009388:	d102      	bne.n	8009390 <UART_SetConfig+0xe0>
 800938a:	2304      	movs	r3, #4
 800938c:	64bb      	str	r3, [r7, #72]	; 0x48
 800938e:	e019      	b.n	80093c4 <UART_SetConfig+0x114>
 8009390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	4b50      	ldr	r3, [pc, #320]	; (80094d8 <UART_SetConfig+0x228>)
 8009396:	429a      	cmp	r2, r3
 8009398:	d102      	bne.n	80093a0 <UART_SetConfig+0xf0>
 800939a:	2308      	movs	r3, #8
 800939c:	64bb      	str	r3, [r7, #72]	; 0x48
 800939e:	e011      	b.n	80093c4 <UART_SetConfig+0x114>
 80093a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a2:	681a      	ldr	r2, [r3, #0]
 80093a4:	4b4d      	ldr	r3, [pc, #308]	; (80094dc <UART_SetConfig+0x22c>)
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d102      	bne.n	80093b0 <UART_SetConfig+0x100>
 80093aa:	2310      	movs	r3, #16
 80093ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80093ae:	e009      	b.n	80093c4 <UART_SetConfig+0x114>
 80093b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	4b42      	ldr	r3, [pc, #264]	; (80094c0 <UART_SetConfig+0x210>)
 80093b6:	429a      	cmp	r2, r3
 80093b8:	d102      	bne.n	80093c0 <UART_SetConfig+0x110>
 80093ba:	2320      	movs	r3, #32
 80093bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80093be:	e001      	b.n	80093c4 <UART_SetConfig+0x114>
 80093c0:	2300      	movs	r3, #0
 80093c2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80093c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093c6:	681a      	ldr	r2, [r3, #0]
 80093c8:	4b3d      	ldr	r3, [pc, #244]	; (80094c0 <UART_SetConfig+0x210>)
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d005      	beq.n	80093da <UART_SetConfig+0x12a>
 80093ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	4b3d      	ldr	r3, [pc, #244]	; (80094c8 <UART_SetConfig+0x218>)
 80093d4:	429a      	cmp	r2, r3
 80093d6:	f040 8085 	bne.w	80094e4 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80093da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093dc:	2200      	movs	r2, #0
 80093de:	623b      	str	r3, [r7, #32]
 80093e0:	627a      	str	r2, [r7, #36]	; 0x24
 80093e2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80093e6:	f7fc fcc3 	bl	8005d70 <HAL_RCCEx_GetPeriphCLKFreq>
 80093ea:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80093ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	f000 80e8 	beq.w	80095c4 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80093f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f8:	4a39      	ldr	r2, [pc, #228]	; (80094e0 <UART_SetConfig+0x230>)
 80093fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093fe:	461a      	mov	r2, r3
 8009400:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009402:	fbb3 f3f2 	udiv	r3, r3, r2
 8009406:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800940a:	685a      	ldr	r2, [r3, #4]
 800940c:	4613      	mov	r3, r2
 800940e:	005b      	lsls	r3, r3, #1
 8009410:	4413      	add	r3, r2
 8009412:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009414:	429a      	cmp	r2, r3
 8009416:	d305      	bcc.n	8009424 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800941e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009420:	429a      	cmp	r2, r3
 8009422:	d903      	bls.n	800942c <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8009424:	2301      	movs	r3, #1
 8009426:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800942a:	e048      	b.n	80094be <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800942c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800942e:	2200      	movs	r2, #0
 8009430:	61bb      	str	r3, [r7, #24]
 8009432:	61fa      	str	r2, [r7, #28]
 8009434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009438:	4a29      	ldr	r2, [pc, #164]	; (80094e0 <UART_SetConfig+0x230>)
 800943a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800943e:	b29b      	uxth	r3, r3
 8009440:	2200      	movs	r2, #0
 8009442:	613b      	str	r3, [r7, #16]
 8009444:	617a      	str	r2, [r7, #20]
 8009446:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800944a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800944e:	f7f6 ff13 	bl	8000278 <__aeabi_uldivmod>
 8009452:	4602      	mov	r2, r0
 8009454:	460b      	mov	r3, r1
 8009456:	4610      	mov	r0, r2
 8009458:	4619      	mov	r1, r3
 800945a:	f04f 0200 	mov.w	r2, #0
 800945e:	f04f 0300 	mov.w	r3, #0
 8009462:	020b      	lsls	r3, r1, #8
 8009464:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009468:	0202      	lsls	r2, r0, #8
 800946a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800946c:	6849      	ldr	r1, [r1, #4]
 800946e:	0849      	lsrs	r1, r1, #1
 8009470:	2000      	movs	r0, #0
 8009472:	460c      	mov	r4, r1
 8009474:	4605      	mov	r5, r0
 8009476:	eb12 0804 	adds.w	r8, r2, r4
 800947a:	eb43 0905 	adc.w	r9, r3, r5
 800947e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	2200      	movs	r2, #0
 8009484:	60bb      	str	r3, [r7, #8]
 8009486:	60fa      	str	r2, [r7, #12]
 8009488:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800948c:	4640      	mov	r0, r8
 800948e:	4649      	mov	r1, r9
 8009490:	f7f6 fef2 	bl	8000278 <__aeabi_uldivmod>
 8009494:	4602      	mov	r2, r0
 8009496:	460b      	mov	r3, r1
 8009498:	4613      	mov	r3, r2
 800949a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800949c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800949e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094a2:	d308      	bcc.n	80094b6 <UART_SetConfig+0x206>
 80094a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094aa:	d204      	bcs.n	80094b6 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 80094ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80094b2:	60da      	str	r2, [r3, #12]
 80094b4:	e003      	b.n	80094be <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 80094b6:	2301      	movs	r3, #1
 80094b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 80094bc:	e082      	b.n	80095c4 <UART_SetConfig+0x314>
 80094be:	e081      	b.n	80095c4 <UART_SetConfig+0x314>
 80094c0:	46002400 	.word	0x46002400
 80094c4:	cfff69f3 	.word	0xcfff69f3
 80094c8:	56002400 	.word	0x56002400
 80094cc:	40013800 	.word	0x40013800
 80094d0:	40004400 	.word	0x40004400
 80094d4:	40004800 	.word	0x40004800
 80094d8:	40004c00 	.word	0x40004c00
 80094dc:	40005000 	.word	0x40005000
 80094e0:	08009e20 	.word	0x08009e20
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80094e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e6:	69db      	ldr	r3, [r3, #28]
 80094e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094ec:	d13c      	bne.n	8009568 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80094ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094f0:	2200      	movs	r2, #0
 80094f2:	603b      	str	r3, [r7, #0]
 80094f4:	607a      	str	r2, [r7, #4]
 80094f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094fa:	f7fc fc39 	bl	8005d70 <HAL_RCCEx_GetPeriphCLKFreq>
 80094fe:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009502:	2b00      	cmp	r3, #0
 8009504:	d05e      	beq.n	80095c4 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800950a:	4a39      	ldr	r2, [pc, #228]	; (80095f0 <UART_SetConfig+0x340>)
 800950c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009510:	461a      	mov	r2, r3
 8009512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009514:	fbb3 f3f2 	udiv	r3, r3, r2
 8009518:	005a      	lsls	r2, r3, #1
 800951a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	085b      	lsrs	r3, r3, #1
 8009520:	441a      	add	r2, r3
 8009522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009524:	685b      	ldr	r3, [r3, #4]
 8009526:	fbb2 f3f3 	udiv	r3, r2, r3
 800952a:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800952c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800952e:	2b0f      	cmp	r3, #15
 8009530:	d916      	bls.n	8009560 <UART_SetConfig+0x2b0>
 8009532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009538:	d212      	bcs.n	8009560 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800953a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800953c:	b29b      	uxth	r3, r3
 800953e:	f023 030f 	bic.w	r3, r3, #15
 8009542:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009546:	085b      	lsrs	r3, r3, #1
 8009548:	b29b      	uxth	r3, r3
 800954a:	f003 0307 	and.w	r3, r3, #7
 800954e:	b29a      	uxth	r2, r3
 8009550:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009552:	4313      	orrs	r3, r2
 8009554:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8009556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800955c:	60da      	str	r2, [r3, #12]
 800955e:	e031      	b.n	80095c4 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8009560:	2301      	movs	r3, #1
 8009562:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009566:	e02d      	b.n	80095c4 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009568:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800956a:	2200      	movs	r2, #0
 800956c:	469a      	mov	sl, r3
 800956e:	4693      	mov	fp, r2
 8009570:	4650      	mov	r0, sl
 8009572:	4659      	mov	r1, fp
 8009574:	f7fc fbfc 	bl	8005d70 <HAL_RCCEx_GetPeriphCLKFreq>
 8009578:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800957a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800957c:	2b00      	cmp	r3, #0
 800957e:	d021      	beq.n	80095c4 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009584:	4a1a      	ldr	r2, [pc, #104]	; (80095f0 <UART_SetConfig+0x340>)
 8009586:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800958a:	461a      	mov	r2, r3
 800958c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800958e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009594:	685b      	ldr	r3, [r3, #4]
 8009596:	085b      	lsrs	r3, r3, #1
 8009598:	441a      	add	r2, r3
 800959a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	fbb2 f3f3 	udiv	r3, r2, r3
 80095a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095a6:	2b0f      	cmp	r3, #15
 80095a8:	d909      	bls.n	80095be <UART_SetConfig+0x30e>
 80095aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095b0:	d205      	bcs.n	80095be <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80095b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095b4:	b29a      	uxth	r2, r3
 80095b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	60da      	str	r2, [r3, #12]
 80095bc:	e002      	b.n	80095c4 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 80095be:	2301      	movs	r3, #1
 80095c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80095c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c6:	2201      	movs	r2, #1
 80095c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80095cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ce:	2201      	movs	r2, #1
 80095d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80095d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d6:	2200      	movs	r2, #0
 80095d8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80095da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095dc:	2200      	movs	r2, #0
 80095de:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80095e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3750      	adds	r7, #80	; 0x50
 80095e8:	46bd      	mov	sp, r7
 80095ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80095ee:	bf00      	nop
 80095f0:	08009e20 	.word	0x08009e20

080095f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b083      	sub	sp, #12
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009600:	f003 0308 	and.w	r3, r3, #8
 8009604:	2b00      	cmp	r3, #0
 8009606:	d00a      	beq.n	800961e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	430a      	orrs	r2, r1
 800961c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009622:	f003 0301 	and.w	r3, r3, #1
 8009626:	2b00      	cmp	r3, #0
 8009628:	d00a      	beq.n	8009640 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	430a      	orrs	r2, r1
 800963e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009644:	f003 0302 	and.w	r3, r3, #2
 8009648:	2b00      	cmp	r3, #0
 800964a:	d00a      	beq.n	8009662 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	430a      	orrs	r2, r1
 8009660:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009666:	f003 0304 	and.w	r3, r3, #4
 800966a:	2b00      	cmp	r3, #0
 800966c:	d00a      	beq.n	8009684 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	685b      	ldr	r3, [r3, #4]
 8009674:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	430a      	orrs	r2, r1
 8009682:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009688:	f003 0310 	and.w	r3, r3, #16
 800968c:	2b00      	cmp	r3, #0
 800968e:	d00a      	beq.n	80096a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	689b      	ldr	r3, [r3, #8]
 8009696:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	430a      	orrs	r2, r1
 80096a4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096aa:	f003 0320 	and.w	r3, r3, #32
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d00a      	beq.n	80096c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	689b      	ldr	r3, [r3, #8]
 80096b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	430a      	orrs	r2, r1
 80096c6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d01a      	beq.n	800970a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	430a      	orrs	r2, r1
 80096e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096f2:	d10a      	bne.n	800970a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	430a      	orrs	r2, r1
 8009708:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800970e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009712:	2b00      	cmp	r3, #0
 8009714:	d00a      	beq.n	800972c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	430a      	orrs	r2, r1
 800972a:	605a      	str	r2, [r3, #4]
  }
}
 800972c:	bf00      	nop
 800972e:	370c      	adds	r7, #12
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr

08009738 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b098      	sub	sp, #96	; 0x60
 800973c:	af02      	add	r7, sp, #8
 800973e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2200      	movs	r2, #0
 8009744:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009748:	f7f7 fefc 	bl	8001544 <HAL_GetTick>
 800974c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f003 0308 	and.w	r3, r3, #8
 8009758:	2b08      	cmp	r3, #8
 800975a:	d12f      	bne.n	80097bc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800975c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009760:	9300      	str	r3, [sp, #0]
 8009762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009764:	2200      	movs	r2, #0
 8009766:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f000 f88e 	bl	800988c <UART_WaitOnFlagUntilTimeout>
 8009770:	4603      	mov	r3, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d022      	beq.n	80097bc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800977c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800977e:	e853 3f00 	ldrex	r3, [r3]
 8009782:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009786:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800978a:	653b      	str	r3, [r7, #80]	; 0x50
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	461a      	mov	r2, r3
 8009792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009794:	647b      	str	r3, [r7, #68]	; 0x44
 8009796:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009798:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800979a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800979c:	e841 2300 	strex	r3, r2, [r1]
 80097a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80097a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d1e6      	bne.n	8009776 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2220      	movs	r2, #32
 80097ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2200      	movs	r2, #0
 80097b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80097b8:	2303      	movs	r3, #3
 80097ba:	e063      	b.n	8009884 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f003 0304 	and.w	r3, r3, #4
 80097c6:	2b04      	cmp	r3, #4
 80097c8:	d149      	bne.n	800985e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097ca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80097ce:	9300      	str	r3, [sp, #0]
 80097d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097d2:	2200      	movs	r2, #0
 80097d4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f000 f857 	bl	800988c <UART_WaitOnFlagUntilTimeout>
 80097de:	4603      	mov	r3, r0
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d03c      	beq.n	800985e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ec:	e853 3f00 	ldrex	r3, [r3]
 80097f0:	623b      	str	r3, [r7, #32]
   return(result);
 80097f2:	6a3b      	ldr	r3, [r7, #32]
 80097f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80097f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	461a      	mov	r2, r3
 8009800:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009802:	633b      	str	r3, [r7, #48]	; 0x30
 8009804:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009806:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009808:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800980a:	e841 2300 	strex	r3, r2, [r1]
 800980e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009812:	2b00      	cmp	r3, #0
 8009814:	d1e6      	bne.n	80097e4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	3308      	adds	r3, #8
 800981c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	e853 3f00 	ldrex	r3, [r3]
 8009824:	60fb      	str	r3, [r7, #12]
   return(result);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	f023 0301 	bic.w	r3, r3, #1
 800982c:	64bb      	str	r3, [r7, #72]	; 0x48
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	3308      	adds	r3, #8
 8009834:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009836:	61fa      	str	r2, [r7, #28]
 8009838:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800983a:	69b9      	ldr	r1, [r7, #24]
 800983c:	69fa      	ldr	r2, [r7, #28]
 800983e:	e841 2300 	strex	r3, r2, [r1]
 8009842:	617b      	str	r3, [r7, #20]
   return(result);
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d1e5      	bne.n	8009816 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2220      	movs	r2, #32
 800984e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2200      	movs	r2, #0
 8009856:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800985a:	2303      	movs	r3, #3
 800985c:	e012      	b.n	8009884 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2220      	movs	r2, #32
 8009862:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2220      	movs	r2, #32
 800986a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2200      	movs	r2, #0
 800987e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009882:	2300      	movs	r3, #0
}
 8009884:	4618      	mov	r0, r3
 8009886:	3758      	adds	r7, #88	; 0x58
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}

0800988c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b084      	sub	sp, #16
 8009890:	af00      	add	r7, sp, #0
 8009892:	60f8      	str	r0, [r7, #12]
 8009894:	60b9      	str	r1, [r7, #8]
 8009896:	603b      	str	r3, [r7, #0]
 8009898:	4613      	mov	r3, r2
 800989a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800989c:	e049      	b.n	8009932 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800989e:	69bb      	ldr	r3, [r7, #24]
 80098a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098a4:	d045      	beq.n	8009932 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098a6:	f7f7 fe4d 	bl	8001544 <HAL_GetTick>
 80098aa:	4602      	mov	r2, r0
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	1ad3      	subs	r3, r2, r3
 80098b0:	69ba      	ldr	r2, [r7, #24]
 80098b2:	429a      	cmp	r2, r3
 80098b4:	d302      	bcc.n	80098bc <UART_WaitOnFlagUntilTimeout+0x30>
 80098b6:	69bb      	ldr	r3, [r7, #24]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d101      	bne.n	80098c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80098bc:	2303      	movs	r3, #3
 80098be:	e048      	b.n	8009952 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f003 0304 	and.w	r3, r3, #4
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d031      	beq.n	8009932 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	69db      	ldr	r3, [r3, #28]
 80098d4:	f003 0308 	and.w	r3, r3, #8
 80098d8:	2b08      	cmp	r3, #8
 80098da:	d110      	bne.n	80098fe <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	2208      	movs	r2, #8
 80098e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80098e4:	68f8      	ldr	r0, [r7, #12]
 80098e6:	f000 f838 	bl	800995a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2208      	movs	r2, #8
 80098ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2200      	movs	r2, #0
 80098f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80098fa:	2301      	movs	r3, #1
 80098fc:	e029      	b.n	8009952 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	69db      	ldr	r3, [r3, #28]
 8009904:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009908:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800990c:	d111      	bne.n	8009932 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009916:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009918:	68f8      	ldr	r0, [r7, #12]
 800991a:	f000 f81e 	bl	800995a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2220      	movs	r2, #32
 8009922:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2200      	movs	r2, #0
 800992a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800992e:	2303      	movs	r3, #3
 8009930:	e00f      	b.n	8009952 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	69da      	ldr	r2, [r3, #28]
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	4013      	ands	r3, r2
 800993c:	68ba      	ldr	r2, [r7, #8]
 800993e:	429a      	cmp	r2, r3
 8009940:	bf0c      	ite	eq
 8009942:	2301      	moveq	r3, #1
 8009944:	2300      	movne	r3, #0
 8009946:	b2db      	uxtb	r3, r3
 8009948:	461a      	mov	r2, r3
 800994a:	79fb      	ldrb	r3, [r7, #7]
 800994c:	429a      	cmp	r2, r3
 800994e:	d0a6      	beq.n	800989e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009950:	2300      	movs	r3, #0
}
 8009952:	4618      	mov	r0, r3
 8009954:	3710      	adds	r7, #16
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}

0800995a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800995a:	b480      	push	{r7}
 800995c:	b095      	sub	sp, #84	; 0x54
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800996a:	e853 3f00 	ldrex	r3, [r3]
 800996e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009972:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009976:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	461a      	mov	r2, r3
 800997e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009980:	643b      	str	r3, [r7, #64]	; 0x40
 8009982:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009984:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009986:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009988:	e841 2300 	strex	r3, r2, [r1]
 800998c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800998e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009990:	2b00      	cmp	r3, #0
 8009992:	d1e6      	bne.n	8009962 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	3308      	adds	r3, #8
 800999a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800999c:	6a3b      	ldr	r3, [r7, #32]
 800999e:	e853 3f00 	ldrex	r3, [r3]
 80099a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80099a4:	69fb      	ldr	r3, [r7, #28]
 80099a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099aa:	f023 0301 	bic.w	r3, r3, #1
 80099ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	3308      	adds	r3, #8
 80099b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80099ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099c0:	e841 2300 	strex	r3, r2, [r1]
 80099c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80099c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d1e3      	bne.n	8009994 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099d0:	2b01      	cmp	r3, #1
 80099d2:	d118      	bne.n	8009a06 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	e853 3f00 	ldrex	r3, [r3]
 80099e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	f023 0310 	bic.w	r3, r3, #16
 80099e8:	647b      	str	r3, [r7, #68]	; 0x44
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	461a      	mov	r2, r3
 80099f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099f2:	61bb      	str	r3, [r7, #24]
 80099f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f6:	6979      	ldr	r1, [r7, #20]
 80099f8:	69ba      	ldr	r2, [r7, #24]
 80099fa:	e841 2300 	strex	r3, r2, [r1]
 80099fe:	613b      	str	r3, [r7, #16]
   return(result);
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d1e6      	bne.n	80099d4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2220      	movs	r2, #32
 8009a0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2200      	movs	r2, #0
 8009a12:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2200      	movs	r2, #0
 8009a18:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009a1a:	bf00      	nop
 8009a1c:	3754      	adds	r7, #84	; 0x54
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a24:	4770      	bx	lr

08009a26 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a26:	b580      	push	{r7, lr}
 8009a28:	b084      	sub	sp, #16
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a32:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2200      	movs	r2, #0
 8009a38:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009a44:	68f8      	ldr	r0, [r7, #12]
 8009a46:	f7ff fc1d 	bl	8009284 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a4a:	bf00      	nop
 8009a4c:	3710      	adds	r7, #16
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}

08009a52 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009a52:	b580      	push	{r7, lr}
 8009a54:	b088      	sub	sp, #32
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	e853 3f00 	ldrex	r3, [r3]
 8009a66:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a6e:	61fb      	str	r3, [r7, #28]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	461a      	mov	r2, r3
 8009a76:	69fb      	ldr	r3, [r7, #28]
 8009a78:	61bb      	str	r3, [r7, #24]
 8009a7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a7c:	6979      	ldr	r1, [r7, #20]
 8009a7e:	69ba      	ldr	r2, [r7, #24]
 8009a80:	e841 2300 	strex	r3, r2, [r1]
 8009a84:	613b      	str	r3, [r7, #16]
   return(result);
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d1e6      	bne.n	8009a5a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2220      	movs	r2, #32
 8009a90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2200      	movs	r2, #0
 8009a98:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f7ff fbe8 	bl	8009270 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009aa0:	bf00      	nop
 8009aa2:	3720      	adds	r7, #32
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b083      	sub	sp, #12
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009ab0:	bf00      	nop
 8009ab2:	370c      	adds	r7, #12
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr

08009abc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b083      	sub	sp, #12
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009ac4:	bf00      	nop
 8009ac6:	370c      	adds	r7, #12
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr

08009ad0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b085      	sub	sp, #20
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009ade:	2b01      	cmp	r3, #1
 8009ae0:	d101      	bne.n	8009ae6 <HAL_UARTEx_DisableFifoMode+0x16>
 8009ae2:	2302      	movs	r3, #2
 8009ae4:	e027      	b.n	8009b36 <HAL_UARTEx_DisableFifoMode+0x66>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2201      	movs	r2, #1
 8009aea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2224      	movs	r2, #36	; 0x24
 8009af2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	681a      	ldr	r2, [r3, #0]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f022 0201 	bic.w	r2, r2, #1
 8009b0c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009b14:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	68fa      	ldr	r2, [r7, #12]
 8009b22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2220      	movs	r2, #32
 8009b28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009b34:	2300      	movs	r3, #0
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3714      	adds	r7, #20
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b40:	4770      	bx	lr

08009b42 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b42:	b580      	push	{r7, lr}
 8009b44:	b084      	sub	sp, #16
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	6078      	str	r0, [r7, #4]
 8009b4a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d101      	bne.n	8009b5a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009b56:	2302      	movs	r3, #2
 8009b58:	e02d      	b.n	8009bb6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2224      	movs	r2, #36	; 0x24
 8009b66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	681a      	ldr	r2, [r3, #0]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f022 0201 	bic.w	r2, r2, #1
 8009b80:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	689b      	ldr	r3, [r3, #8]
 8009b88:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	683a      	ldr	r2, [r7, #0]
 8009b92:	430a      	orrs	r2, r1
 8009b94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 f850 	bl	8009c3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	68fa      	ldr	r2, [r7, #12]
 8009ba2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2220      	movs	r2, #32
 8009ba8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009bb4:	2300      	movs	r3, #0
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3710      	adds	r7, #16
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}

08009bbe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009bbe:	b580      	push	{r7, lr}
 8009bc0:	b084      	sub	sp, #16
 8009bc2:	af00      	add	r7, sp, #0
 8009bc4:	6078      	str	r0, [r7, #4]
 8009bc6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d101      	bne.n	8009bd6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009bd2:	2302      	movs	r3, #2
 8009bd4:	e02d      	b.n	8009c32 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2201      	movs	r2, #1
 8009bda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2224      	movs	r2, #36	; 0x24
 8009be2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f022 0201 	bic.w	r2, r2, #1
 8009bfc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	689b      	ldr	r3, [r3, #8]
 8009c04:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	683a      	ldr	r2, [r7, #0]
 8009c0e:	430a      	orrs	r2, r1
 8009c10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f000 f812 	bl	8009c3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	68fa      	ldr	r2, [r7, #12]
 8009c1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2220      	movs	r2, #32
 8009c24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009c30:	2300      	movs	r3, #0
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3710      	adds	r7, #16
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}
	...

08009c3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b085      	sub	sp, #20
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d108      	bne.n	8009c5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2201      	movs	r2, #1
 8009c50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2201      	movs	r2, #1
 8009c58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009c5c:	e031      	b.n	8009cc2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009c5e:	2308      	movs	r3, #8
 8009c60:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009c62:	2308      	movs	r3, #8
 8009c64:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	689b      	ldr	r3, [r3, #8]
 8009c6c:	0e5b      	lsrs	r3, r3, #25
 8009c6e:	b2db      	uxtb	r3, r3
 8009c70:	f003 0307 	and.w	r3, r3, #7
 8009c74:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	689b      	ldr	r3, [r3, #8]
 8009c7c:	0f5b      	lsrs	r3, r3, #29
 8009c7e:	b2db      	uxtb	r3, r3
 8009c80:	f003 0307 	and.w	r3, r3, #7
 8009c84:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c86:	7bbb      	ldrb	r3, [r7, #14]
 8009c88:	7b3a      	ldrb	r2, [r7, #12]
 8009c8a:	4911      	ldr	r1, [pc, #68]	; (8009cd0 <UARTEx_SetNbDataToProcess+0x94>)
 8009c8c:	5c8a      	ldrb	r2, [r1, r2]
 8009c8e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009c92:	7b3a      	ldrb	r2, [r7, #12]
 8009c94:	490f      	ldr	r1, [pc, #60]	; (8009cd4 <UARTEx_SetNbDataToProcess+0x98>)
 8009c96:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c98:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c9c:	b29a      	uxth	r2, r3
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ca4:	7bfb      	ldrb	r3, [r7, #15]
 8009ca6:	7b7a      	ldrb	r2, [r7, #13]
 8009ca8:	4909      	ldr	r1, [pc, #36]	; (8009cd0 <UARTEx_SetNbDataToProcess+0x94>)
 8009caa:	5c8a      	ldrb	r2, [r1, r2]
 8009cac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009cb0:	7b7a      	ldrb	r2, [r7, #13]
 8009cb2:	4908      	ldr	r1, [pc, #32]	; (8009cd4 <UARTEx_SetNbDataToProcess+0x98>)
 8009cb4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009cb6:	fb93 f3f2 	sdiv	r3, r3, r2
 8009cba:	b29a      	uxth	r2, r3
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009cc2:	bf00      	nop
 8009cc4:	3714      	adds	r7, #20
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ccc:	4770      	bx	lr
 8009cce:	bf00      	nop
 8009cd0:	08009e38 	.word	0x08009e38
 8009cd4:	08009e40 	.word	0x08009e40

08009cd8 <memset>:
 8009cd8:	4402      	add	r2, r0
 8009cda:	4603      	mov	r3, r0
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d100      	bne.n	8009ce2 <memset+0xa>
 8009ce0:	4770      	bx	lr
 8009ce2:	f803 1b01 	strb.w	r1, [r3], #1
 8009ce6:	e7f9      	b.n	8009cdc <memset+0x4>

08009ce8 <__libc_init_array>:
 8009ce8:	b570      	push	{r4, r5, r6, lr}
 8009cea:	4d0d      	ldr	r5, [pc, #52]	; (8009d20 <__libc_init_array+0x38>)
 8009cec:	2600      	movs	r6, #0
 8009cee:	4c0d      	ldr	r4, [pc, #52]	; (8009d24 <__libc_init_array+0x3c>)
 8009cf0:	1b64      	subs	r4, r4, r5
 8009cf2:	10a4      	asrs	r4, r4, #2
 8009cf4:	42a6      	cmp	r6, r4
 8009cf6:	d109      	bne.n	8009d0c <__libc_init_array+0x24>
 8009cf8:	4d0b      	ldr	r5, [pc, #44]	; (8009d28 <__libc_init_array+0x40>)
 8009cfa:	2600      	movs	r6, #0
 8009cfc:	4c0b      	ldr	r4, [pc, #44]	; (8009d2c <__libc_init_array+0x44>)
 8009cfe:	f000 f817 	bl	8009d30 <_init>
 8009d02:	1b64      	subs	r4, r4, r5
 8009d04:	10a4      	asrs	r4, r4, #2
 8009d06:	42a6      	cmp	r6, r4
 8009d08:	d105      	bne.n	8009d16 <__libc_init_array+0x2e>
 8009d0a:	bd70      	pop	{r4, r5, r6, pc}
 8009d0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d10:	3601      	adds	r6, #1
 8009d12:	4798      	blx	r3
 8009d14:	e7ee      	b.n	8009cf4 <__libc_init_array+0xc>
 8009d16:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d1a:	3601      	adds	r6, #1
 8009d1c:	4798      	blx	r3
 8009d1e:	e7f2      	b.n	8009d06 <__libc_init_array+0x1e>
 8009d20:	08009e50 	.word	0x08009e50
 8009d24:	08009e50 	.word	0x08009e50
 8009d28:	08009e50 	.word	0x08009e50
 8009d2c:	08009e54 	.word	0x08009e54

08009d30 <_init>:
 8009d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d32:	bf00      	nop
 8009d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d36:	bc08      	pop	{r3}
 8009d38:	469e      	mov	lr, r3
 8009d3a:	4770      	bx	lr

08009d3c <_fini>:
 8009d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d3e:	bf00      	nop
 8009d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d42:	bc08      	pop	{r3}
 8009d44:	469e      	mov	lr, r3
 8009d46:	4770      	bx	lr
