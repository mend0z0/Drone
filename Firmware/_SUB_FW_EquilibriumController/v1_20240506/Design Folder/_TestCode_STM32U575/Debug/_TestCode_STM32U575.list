
_TestCode_STM32U575.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001edc  08000238  08000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08002114  08002114  00012114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002164  08002164  00012164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002168  08002168  00012168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000009  20000000  0800216c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000024  2000000c  08002175  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000030  08002175  00020030  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  00020009  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002003f  2**0
                  CONTENTS, READONLY
 10 .debug_info   00008b4a  00000000  00000000  00020082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001358  00000000  00000000  00028bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000748  00000000  00000000  00029f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000560  00000000  00000000  0002a670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000313da  00000000  00000000  0002abd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000076a3  00000000  00000000  0005bfaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013fb8f  00000000  00000000  0006364d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00001bec  00000000  00000000  001a31dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000009a  00000000  00000000  001a4dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000000c 	.word	0x2000000c
 8000254:	00000000 	.word	0x00000000
 8000258:	080020fc 	.word	0x080020fc

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000010 	.word	0x20000010
 8000274:	080020fc 	.word	0x080020fc

08000278 <_init_RCC>:
static void MX_ADC1_Init(void);
static void MX_DAC1_Init(void);

/* USER CODE BEGIN PFP */
void _init_RCC( void )
{
 8000278:	b480      	push	{r7}
 800027a:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_MSISON;					// 1: MSIS (MSI system) oscillator on
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <_init_RCC+0x50>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a11      	ldr	r2, [pc, #68]	; (80002c8 <_init_RCC+0x50>)
 8000282:	f043 0301 	orr.w	r3, r3, #1
 8000286:	6013      	str	r3, [r2, #0]

	while(!(RCC->CR & RCC_CR_MSISRDY));			// 1: MSIS (MSI system) oscillator ready
 8000288:	bf00      	nop
 800028a:	4b0f      	ldr	r3, [pc, #60]	; (80002c8 <_init_RCC+0x50>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	f003 0304 	and.w	r3, r3, #4
 8000292:	2b00      	cmp	r3, #0
 8000294:	d0f9      	beq.n	800028a <_init_RCC+0x12>

	RCC->CR |= RCC_CR_HSION;					// 1: HSI16 oscillator on
 8000296:	4b0c      	ldr	r3, [pc, #48]	; (80002c8 <_init_RCC+0x50>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	4a0b      	ldr	r2, [pc, #44]	; (80002c8 <_init_RCC+0x50>)
 800029c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002a0:	6013      	str	r3, [r2, #0]

	while(!(RCC->CR & RCC_CR_HSIRDY));			// 1: HSI16 oscillator ready
 80002a2:	bf00      	nop
 80002a4:	4b08      	ldr	r3, [pc, #32]	; (80002c8 <_init_RCC+0x50>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d0f9      	beq.n	80002a4 <_init_RCC+0x2c>

	RCC->CFGR1 |= RCC_CFGR1_SW_0;				// 01: HSI16 selected as system clock
 80002b0:	4b05      	ldr	r3, [pc, #20]	; (80002c8 <_init_RCC+0x50>)
 80002b2:	69db      	ldr	r3, [r3, #28]
 80002b4:	4a04      	ldr	r2, [pc, #16]	; (80002c8 <_init_RCC+0x50>)
 80002b6:	f043 0301 	orr.w	r3, r3, #1
 80002ba:	61d3      	str	r3, [r2, #28]
}
 80002bc:	bf00      	nop
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	46020c00 	.word	0x46020c00

080002cc <_init_GPIO>:

void _init_GPIO( void )
{
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
	uint32_t tempVar;

	RCC->AHB2ENR1 |= RCC_AHB2ENR1_GPIOBEN | RCC_AHB2ENR1_GPIOCEN | RCC_AHB2ENR1_GPIOGEN;
 80002d2:	4b16      	ldr	r3, [pc, #88]	; (800032c <_init_GPIO+0x60>)
 80002d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80002d8:	4a14      	ldr	r2, [pc, #80]	; (800032c <_init_GPIO+0x60>)
 80002da:	f043 0346 	orr.w	r3, r3, #70	; 0x46
 80002de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	tempVar = RCC->AHB2ENR1;
 80002e2:	4b12      	ldr	r3, [pc, #72]	; (800032c <_init_GPIO+0x60>)
 80002e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80002e8:	607b      	str	r3, [r7, #4]

	while(!((RCC->AHB2ENR1 & tempVar) && (RCC_AHB2ENR1_GPIOBEN | RCC_AHB2ENR1_GPIOCEN | RCC_AHB2ENR1_GPIOGEN))); //check if the value is valid!
 80002ea:	bf00      	nop
 80002ec:	4b0f      	ldr	r3, [pc, #60]	; (800032c <_init_GPIO+0x60>)
 80002ee:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	4013      	ands	r3, r2
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d0f8      	beq.n	80002ec <_init_GPIO+0x20>

	GPIOB->MODER &= ~GPIO_MODER_MODE7_1;		// BLUE
 80002fa:	4b0d      	ldr	r3, [pc, #52]	; (8000330 <_init_GPIO+0x64>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4a0c      	ldr	r2, [pc, #48]	; (8000330 <_init_GPIO+0x64>)
 8000300:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000304:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~GPIO_MODER_MODE7_1;		// GREEN
 8000306:	4b0b      	ldr	r3, [pc, #44]	; (8000334 <_init_GPIO+0x68>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	4a0a      	ldr	r2, [pc, #40]	; (8000334 <_init_GPIO+0x68>)
 800030c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000310:	6013      	str	r3, [r2, #0]
	GPIOG->MODER &= ~GPIO_MODER_MODE2_1;		// RED
 8000312:	4b09      	ldr	r3, [pc, #36]	; (8000338 <_init_GPIO+0x6c>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	4a08      	ldr	r2, [pc, #32]	; (8000338 <_init_GPIO+0x6c>)
 8000318:	f023 0320 	bic.w	r3, r3, #32
 800031c:	6013      	str	r3, [r2, #0]
}
 800031e:	bf00      	nop
 8000320:	370c      	adds	r7, #12
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	46020c00 	.word	0x46020c00
 8000330:	42020400 	.word	0x42020400
 8000334:	42020800 	.word	0x42020800
 8000338:	42021800 	.word	0x42021800

0800033c <_init_LPTIM1>:

void _init_LPTIM1( void )
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
	RCC->CCIPR3 |= RCC_CCIPR3_LPTIM1SEL_1;		// HSI16 selected
 8000340:	4b11      	ldr	r3, [pc, #68]	; (8000388 <_init_LPTIM1+0x4c>)
 8000342:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000346:	4a10      	ldr	r2, [pc, #64]	; (8000388 <_init_LPTIM1+0x4c>)
 8000348:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800034c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8

	LPTIM1->CFGR |= LPTIM_CFGR_PRESC;			// Input clock is 32MHz so PRESC = 32MHz/128 = 250 kHz
 8000350:	4b0e      	ldr	r3, [pc, #56]	; (800038c <_init_LPTIM1+0x50>)
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	4a0d      	ldr	r2, [pc, #52]	; (800038c <_init_LPTIM1+0x50>)
 8000356:	f443 6360 	orr.w	r3, r3, #3584	; 0xe00
 800035a:	60d3      	str	r3, [r2, #12]

	LPTIM1->CFGR |= LPTIM_CFGR_PRELOAD;			// Registers are updated at the end of the current LPTIM period
 800035c:	4b0b      	ldr	r3, [pc, #44]	; (800038c <_init_LPTIM1+0x50>)
 800035e:	68db      	ldr	r3, [r3, #12]
 8000360:	4a0a      	ldr	r2, [pc, #40]	; (800038c <_init_LPTIM1+0x50>)
 8000362:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000366:	60d3      	str	r3, [r2, #12]

	LPTIM1->ARR = 40000;						// (1.25 ms(LPUART Baud rate) * 128(BuffSize)) / (1 / (32 MHz (in_clk) / 128 (pre-scaler))) = 40000 :)
 8000368:	4b08      	ldr	r3, [pc, #32]	; (800038c <_init_LPTIM1+0x50>)
 800036a:	f649 4240 	movw	r2, #40000	; 0x9c40
 800036e:	619a      	str	r2, [r3, #24]

	LPTIM1->CR |= LPTIM_CR_ENABLE;				// LPTIM is enabled
 8000370:	4b06      	ldr	r3, [pc, #24]	; (800038c <_init_LPTIM1+0x50>)
 8000372:	691b      	ldr	r3, [r3, #16]
 8000374:	4a05      	ldr	r2, [pc, #20]	; (800038c <_init_LPTIM1+0x50>)
 8000376:	f043 0301 	orr.w	r3, r3, #1
 800037a:	6113      	str	r3, [r2, #16]
		//maybe adding a timeout...
	//}
	//LPTIM1->ICR |= LPTIM_ICR_DIEROKCF;			// Writing 1 to this bit clears the DIEROK flag in the LPTIM_ISR register.

	//LPTIM1->CR &= ~LPTIM_CR_ENABLE;				// LPTIM is disabled
}
 800037c:	bf00      	nop
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	46020c00 	.word	0x46020c00
 800038c:	46004400 	.word	0x46004400

08000390 <ToggleLEDs>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ToggleLEDs( void )
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
	static uint8_t ledNo = 0;

	switch (ledNo)
 8000394:	4b1d      	ldr	r3, [pc, #116]	; (800040c <ToggleLEDs+0x7c>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	2b02      	cmp	r3, #2
 800039a:	d020      	beq.n	80003de <ToggleLEDs+0x4e>
 800039c:	2b02      	cmp	r3, #2
 800039e:	dc2b      	bgt.n	80003f8 <ToggleLEDs+0x68>
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d002      	beq.n	80003aa <ToggleLEDs+0x1a>
 80003a4:	2b01      	cmp	r3, #1
 80003a6:	d00d      	beq.n	80003c4 <ToggleLEDs+0x34>
 80003a8:	e026      	b.n	80003f8 <ToggleLEDs+0x68>
	{
	case 0:
		GPIOG->ODR ^= GPIO_ODR_OD2;
 80003aa:	4b19      	ldr	r3, [pc, #100]	; (8000410 <ToggleLEDs+0x80>)
 80003ac:	695b      	ldr	r3, [r3, #20]
 80003ae:	4a18      	ldr	r2, [pc, #96]	; (8000410 <ToggleLEDs+0x80>)
 80003b0:	f083 0304 	eor.w	r3, r3, #4
 80003b4:	6153      	str	r3, [r2, #20]
		ledNo++;
 80003b6:	4b15      	ldr	r3, [pc, #84]	; (800040c <ToggleLEDs+0x7c>)
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	3301      	adds	r3, #1
 80003bc:	b2da      	uxtb	r2, r3
 80003be:	4b13      	ldr	r3, [pc, #76]	; (800040c <ToggleLEDs+0x7c>)
 80003c0:	701a      	strb	r2, [r3, #0]
		break;
 80003c2:	e01d      	b.n	8000400 <ToggleLEDs+0x70>
	case 1:
		GPIOC->ODR ^= GPIO_ODR_OD7;
 80003c4:	4b13      	ldr	r3, [pc, #76]	; (8000414 <ToggleLEDs+0x84>)
 80003c6:	695b      	ldr	r3, [r3, #20]
 80003c8:	4a12      	ldr	r2, [pc, #72]	; (8000414 <ToggleLEDs+0x84>)
 80003ca:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 80003ce:	6153      	str	r3, [r2, #20]
		ledNo++;
 80003d0:	4b0e      	ldr	r3, [pc, #56]	; (800040c <ToggleLEDs+0x7c>)
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	3301      	adds	r3, #1
 80003d6:	b2da      	uxtb	r2, r3
 80003d8:	4b0c      	ldr	r3, [pc, #48]	; (800040c <ToggleLEDs+0x7c>)
 80003da:	701a      	strb	r2, [r3, #0]
		break;
 80003dc:	e010      	b.n	8000400 <ToggleLEDs+0x70>
	case 2:
		GPIOB->ODR ^= GPIO_ODR_OD7;
 80003de:	4b0e      	ldr	r3, [pc, #56]	; (8000418 <ToggleLEDs+0x88>)
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	4a0d      	ldr	r2, [pc, #52]	; (8000418 <ToggleLEDs+0x88>)
 80003e4:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 80003e8:	6153      	str	r3, [r2, #20]
		ledNo++;
 80003ea:	4b08      	ldr	r3, [pc, #32]	; (800040c <ToggleLEDs+0x7c>)
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	3301      	adds	r3, #1
 80003f0:	b2da      	uxtb	r2, r3
 80003f2:	4b06      	ldr	r3, [pc, #24]	; (800040c <ToggleLEDs+0x7c>)
 80003f4:	701a      	strb	r2, [r3, #0]
		break;
 80003f6:	e003      	b.n	8000400 <ToggleLEDs+0x70>
	default:
		ledNo = 0;
 80003f8:	4b04      	ldr	r3, [pc, #16]	; (800040c <ToggleLEDs+0x7c>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	701a      	strb	r2, [r3, #0]
		break;
 80003fe:	bf00      	nop
	}
}
 8000400:	bf00      	nop
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	20000028 	.word	0x20000028
 8000410:	42021800 	.word	0x42021800
 8000414:	42020800 	.word	0x42020800
 8000418:	42020400 	.word	0x42020400

0800041c <Delay>:

void Delay( uint32_t delay )
{
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
	//waiting for OVF of LPTIM1.
	while(delay--)
 8000424:	e00c      	b.n	8000440 <Delay+0x24>
	{
		LPTIM1->ICR |= LPTIM_ICR_ARRMCF;		//clearing the ARRM bit
 8000426:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <Delay+0x3c>)
 8000428:	685b      	ldr	r3, [r3, #4]
 800042a:	4a0b      	ldr	r2, [pc, #44]	; (8000458 <Delay+0x3c>)
 800042c:	f043 0302 	orr.w	r3, r3, #2
 8000430:	6053      	str	r3, [r2, #4]
		while(!(LPTIM1->ISR & LPTIM_ISR_ARRM));	//waiting for the OVF happens
 8000432:	bf00      	nop
 8000434:	4b08      	ldr	r3, [pc, #32]	; (8000458 <Delay+0x3c>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	f003 0302 	and.w	r3, r3, #2
 800043c:	2b00      	cmp	r3, #0
 800043e:	d0f9      	beq.n	8000434 <Delay+0x18>
	while(delay--)
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	1e5a      	subs	r2, r3, #1
 8000444:	607a      	str	r2, [r7, #4]
 8000446:	2b00      	cmp	r3, #0
 8000448:	d1ed      	bne.n	8000426 <Delay+0xa>
	}
}
 800044a:	bf00      	nop
 800044c:	bf00      	nop
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr
 8000458:	46004400 	.word	0x46004400

0800045c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000460:	f000 f91e 	bl	80006a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000464:	f000 f80e 	bl	8000484 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000468:	f000 f858 	bl	800051c <SystemPower_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  _init_RCC();
 800046c:	f7ff ff04 	bl	8000278 <_init_RCC>
  _init_GPIO();
 8000470:	f7ff ff2c 	bl	80002cc <_init_GPIO>
  _init_LPTIM1();
 8000474:	f7ff ff62 	bl	800033c <_init_LPTIM1>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ToggleLEDs();
 8000478:	f7ff ff8a 	bl	8000390 <ToggleLEDs>
	  Delay(10);
 800047c:	200a      	movs	r0, #10
 800047e:	f7ff ffcd 	bl	800041c <Delay>
	  ToggleLEDs();
 8000482:	e7f9      	b.n	8000478 <main+0x1c>

08000484 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b09e      	sub	sp, #120	; 0x78
 8000488:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800048a:	f107 0318 	add.w	r3, r7, #24
 800048e:	2260      	movs	r2, #96	; 0x60
 8000490:	2100      	movs	r1, #0
 8000492:	4618      	mov	r0, r3
 8000494:	f001 fe06 	bl	80020a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000498:	463b      	mov	r3, r7
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
 800049e:	605a      	str	r2, [r3, #4]
 80004a0:	609a      	str	r2, [r3, #8]
 80004a2:	60da      	str	r2, [r3, #12]
 80004a4:	611a      	str	r2, [r3, #16]
 80004a6:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 80004a8:	2000      	movs	r0, #0
 80004aa:	f000 fadf 	bl	8000a6c <HAL_PWREx_ControlVoltageScaling>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80004b4:	f000 f849 	bl	800054a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80004b8:	230a      	movs	r3, #10
 80004ba:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004c2:	2310      	movs	r3, #16
 80004c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80004c6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80004ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 80004cc:	2300      	movs	r3, #0
 80004ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004d0:	2300      	movs	r3, #0
 80004d2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004d4:	f107 0318 	add.w	r3, r7, #24
 80004d8:	4618      	mov	r0, r3
 80004da:	f000 fb73 	bl	8000bc4 <HAL_RCC_OscConfig>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80004e4:	f000 f831 	bl	800054a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004e8:	231f      	movs	r3, #31
 80004ea:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004ec:	2301      	movs	r3, #1
 80004ee:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004f0:	2300      	movs	r3, #0
 80004f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004f4:	2300      	movs	r3, #0
 80004f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004f8:	2300      	movs	r3, #0
 80004fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80004fc:	2300      	movs	r3, #0
 80004fe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000500:	463b      	mov	r3, r7
 8000502:	2101      	movs	r1, #1
 8000504:	4618      	mov	r0, r3
 8000506:	f001 fa39 	bl	800197c <HAL_RCC_ClockConfig>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000510:	f000 f81b 	bl	800054a <Error_Handler>
  }
}
 8000514:	bf00      	nop
 8000516:	3778      	adds	r7, #120	; 0x78
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}

0800051c <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000522:	f000 fb2f 	bl	8000b84 <HAL_PWREx_EnableVddIO2>

  PWR_PVDTypeDef sConfigPVD = {0};
 8000526:	463b      	mov	r3, r7
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]

  /*
   * PVD Configuration
   */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 800052e:	2300      	movs	r3, #0
 8000530:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8000532:	2300      	movs	r3, #0
 8000534:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8000536:	463b      	mov	r3, r7
 8000538:	4618      	mov	r0, r3
 800053a:	f000 fa19 	bl	8000970 <HAL_PWR_ConfigPVD>

  /*
   * Enable the PVD Output
   */
  HAL_PWR_EnablePVD();
 800053e:	f000 fa85 	bl	8000a4c <HAL_PWR_EnablePVD>
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000542:	bf00      	nop
 8000544:	3708      	adds	r7, #8
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}

0800054a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800054a:	b480      	push	{r7}
 800054c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800054e:	b672      	cpsid	i
}
 8000550:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000552:	e7fe      	b.n	8000552 <Error_Handler+0x8>

08000554 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800055a:	4b0a      	ldr	r3, [pc, #40]	; (8000584 <HAL_MspInit+0x30>)
 800055c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000560:	4a08      	ldr	r2, [pc, #32]	; (8000584 <HAL_MspInit+0x30>)
 8000562:	f043 0304 	orr.w	r3, r3, #4
 8000566:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800056a:	4b06      	ldr	r3, [pc, #24]	; (8000584 <HAL_MspInit+0x30>)
 800056c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000570:	f003 0304 	and.w	r3, r3, #4
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8000578:	f000 fb14 	bl	8000ba4 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800057c:	bf00      	nop
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	46020c00 	.word	0x46020c00

08000588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800058c:	e7fe      	b.n	800058c <NMI_Handler+0x4>

0800058e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800058e:	b480      	push	{r7}
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000592:	e7fe      	b.n	8000592 <HardFault_Handler+0x4>

08000594 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000598:	e7fe      	b.n	8000598 <MemManage_Handler+0x4>

0800059a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800059a:	b480      	push	{r7}
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800059e:	e7fe      	b.n	800059e <BusFault_Handler+0x4>

080005a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005a4:	e7fe      	b.n	80005a4 <UsageFault_Handler+0x4>

080005a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005a6:	b480      	push	{r7}
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005aa:	bf00      	nop
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr

080005b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr

080005c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005c6:	bf00      	nop
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005d4:	f000 f8c8 	bl	8000768 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}

080005dc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80005e0:	4b18      	ldr	r3, [pc, #96]	; (8000644 <SystemInit+0x68>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a17      	ldr	r2, [pc, #92]	; (8000644 <SystemInit+0x68>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80005f0:	4b15      	ldr	r3, [pc, #84]	; (8000648 <SystemInit+0x6c>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80005f6:	4b14      	ldr	r3, [pc, #80]	; (8000648 <SystemInit+0x6c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <SystemInit+0x6c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000602:	4b11      	ldr	r3, [pc, #68]	; (8000648 <SystemInit+0x6c>)
 8000604:	2200      	movs	r2, #0
 8000606:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000608:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <SystemInit+0x6c>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a0e      	ldr	r2, [pc, #56]	; (8000648 <SystemInit+0x6c>)
 800060e:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000612:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000618:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <SystemInit+0x6c>)
 800061a:	2200      	movs	r2, #0
 800061c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800061e:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <SystemInit+0x6c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a09      	ldr	r2, [pc, #36]	; (8000648 <SystemInit+0x6c>)
 8000624:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000628:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800062a:	4b07      	ldr	r3, [pc, #28]	; (8000648 <SystemInit+0x6c>)
 800062c:	2200      	movs	r2, #0
 800062e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000630:	4b04      	ldr	r3, [pc, #16]	; (8000644 <SystemInit+0x68>)
 8000632:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000636:	609a      	str	r2, [r3, #8]
  #endif
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	e000ed00 	.word	0xe000ed00
 8000648:	46020c00 	.word	0x46020c00

0800064c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800064c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000684 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000650:	f7ff ffc4 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000654:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000656:	e003      	b.n	8000660 <LoopCopyDataInit>

08000658 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000658:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800065a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800065c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800065e:	3104      	adds	r1, #4

08000660 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000660:	480a      	ldr	r0, [pc, #40]	; (800068c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000662:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000664:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000666:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000668:	d3f6      	bcc.n	8000658 <CopyDataInit>
	ldr	r2, =_sbss
 800066a:	4a0a      	ldr	r2, [pc, #40]	; (8000694 <LoopForever+0x12>)
	b	LoopFillZerobss
 800066c:	e002      	b.n	8000674 <LoopFillZerobss>

0800066e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800066e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000670:	f842 3b04 	str.w	r3, [r2], #4

08000674 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000674:	4b08      	ldr	r3, [pc, #32]	; (8000698 <LoopForever+0x16>)
	cmp	r2, r3
 8000676:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000678:	d3f9      	bcc.n	800066e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800067a:	f001 fd1b 	bl	80020b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800067e:	f7ff feed 	bl	800045c <main>

08000682 <LoopForever>:

LoopForever:
    b LoopForever
 8000682:	e7fe      	b.n	8000682 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000684:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8000688:	0800216c 	.word	0x0800216c
	ldr	r0, =_sdata
 800068c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000690:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 8000694:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000698:	20000030 	.word	0x20000030

0800069c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800069c:	e7fe      	b.n	800069c <ADC1_IRQHandler>
	...

080006a0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <HAL_Init+0x4c>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a10      	ldr	r2, [pc, #64]	; (80006ec <HAL_Init+0x4c>)
 80006aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006b0:	2003      	movs	r0, #3
 80006b2:	f000 f92b 	bl	800090c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80006b6:	f001 fb53 	bl	8001d60 <HAL_RCC_GetSysClockFreq>
 80006ba:	4602      	mov	r2, r0
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <HAL_Init+0x50>)
 80006be:	6a1b      	ldr	r3, [r3, #32]
 80006c0:	f003 030f 	and.w	r3, r3, #15
 80006c4:	490b      	ldr	r1, [pc, #44]	; (80006f4 <HAL_Init+0x54>)
 80006c6:	5ccb      	ldrb	r3, [r1, r3]
 80006c8:	fa22 f303 	lsr.w	r3, r2, r3
 80006cc:	4a0a      	ldr	r2, [pc, #40]	; (80006f8 <HAL_Init+0x58>)
 80006ce:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006d0:	200f      	movs	r0, #15
 80006d2:	f000 f813 	bl	80006fc <HAL_InitTick>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 80006dc:	2301      	movs	r3, #1
 80006de:	e002      	b.n	80006e6 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80006e0:	f7ff ff38 	bl	8000554 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006e4:	2300      	movs	r3, #0
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40022000 	.word	0x40022000
 80006f0:	46020c00 	.word	0x46020c00
 80006f4:	08002114 	.word	0x08002114
 80006f8:	20000000 	.word	0x20000000

080006fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000704:	4b15      	ldr	r3, [pc, #84]	; (800075c <HAL_InitTick+0x60>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d101      	bne.n	8000710 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800070c:	2301      	movs	r3, #1
 800070e:	e021      	b.n	8000754 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000710:	4b13      	ldr	r3, [pc, #76]	; (8000760 <HAL_InitTick+0x64>)
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <HAL_InitTick+0x60>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	4619      	mov	r1, r3
 800071a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800071e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000722:	fbb2 f3f3 	udiv	r3, r2, r3
 8000726:	4618      	mov	r0, r3
 8000728:	f000 f915 	bl	8000956 <HAL_SYSTICK_Config>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000732:	2301      	movs	r3, #1
 8000734:	e00e      	b.n	8000754 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2b0f      	cmp	r3, #15
 800073a:	d80a      	bhi.n	8000752 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800073c:	2200      	movs	r2, #0
 800073e:	6879      	ldr	r1, [r7, #4]
 8000740:	f04f 30ff 	mov.w	r0, #4294967295
 8000744:	f000 f8ed 	bl	8000922 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000748:	4a06      	ldr	r2, [pc, #24]	; (8000764 <HAL_InitTick+0x68>)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800074e:	2300      	movs	r3, #0
 8000750:	e000      	b.n	8000754 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000752:	2301      	movs	r3, #1
}
 8000754:	4618      	mov	r0, r3
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000008 	.word	0x20000008
 8000760:	20000000 	.word	0x20000000
 8000764:	20000004 	.word	0x20000004

08000768 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <HAL_IncTick+0x20>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	461a      	mov	r2, r3
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <HAL_IncTick+0x24>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4413      	add	r3, r2
 8000778:	4a04      	ldr	r2, [pc, #16]	; (800078c <HAL_IncTick+0x24>)
 800077a:	6013      	str	r3, [r2, #0]
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	20000008 	.word	0x20000008
 800078c:	2000002c 	.word	0x2000002c

08000790 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  return uwTick;
 8000794:	4b03      	ldr	r3, [pc, #12]	; (80007a4 <HAL_GetTick+0x14>)
 8000796:	681b      	ldr	r3, [r3, #0]
}
 8000798:	4618      	mov	r0, r3
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	2000002c 	.word	0x2000002c

080007a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f003 0307 	and.w	r3, r3, #7
 80007b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <__NVIC_SetPriorityGrouping+0x44>)
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007be:	68ba      	ldr	r2, [r7, #8]
 80007c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007c4:	4013      	ands	r3, r2
 80007c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007da:	4a04      	ldr	r2, [pc, #16]	; (80007ec <__NVIC_SetPriorityGrouping+0x44>)
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	60d3      	str	r3, [r2, #12]
}
 80007e0:	bf00      	nop
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007f4:	4b04      	ldr	r3, [pc, #16]	; (8000808 <__NVIC_GetPriorityGrouping+0x18>)
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	0a1b      	lsrs	r3, r3, #8
 80007fa:	f003 0307 	and.w	r3, r3, #7
}
 80007fe:	4618      	mov	r0, r3
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	6039      	str	r1, [r7, #0]
 8000816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081c:	2b00      	cmp	r3, #0
 800081e:	db0a      	blt.n	8000836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	b2da      	uxtb	r2, r3
 8000824:	490c      	ldr	r1, [pc, #48]	; (8000858 <__NVIC_SetPriority+0x4c>)
 8000826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082a:	0112      	lsls	r2, r2, #4
 800082c:	b2d2      	uxtb	r2, r2
 800082e:	440b      	add	r3, r1
 8000830:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000834:	e00a      	b.n	800084c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	b2da      	uxtb	r2, r3
 800083a:	4908      	ldr	r1, [pc, #32]	; (800085c <__NVIC_SetPriority+0x50>)
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	f003 030f 	and.w	r3, r3, #15
 8000842:	3b04      	subs	r3, #4
 8000844:	0112      	lsls	r2, r2, #4
 8000846:	b2d2      	uxtb	r2, r2
 8000848:	440b      	add	r3, r1
 800084a:	761a      	strb	r2, [r3, #24]
}
 800084c:	bf00      	nop
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	e000e100 	.word	0xe000e100
 800085c:	e000ed00 	.word	0xe000ed00

08000860 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000860:	b480      	push	{r7}
 8000862:	b089      	sub	sp, #36	; 0x24
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	f003 0307 	and.w	r3, r3, #7
 8000872:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000874:	69fb      	ldr	r3, [r7, #28]
 8000876:	f1c3 0307 	rsb	r3, r3, #7
 800087a:	2b04      	cmp	r3, #4
 800087c:	bf28      	it	cs
 800087e:	2304      	movcs	r3, #4
 8000880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	3304      	adds	r3, #4
 8000886:	2b06      	cmp	r3, #6
 8000888:	d902      	bls.n	8000890 <NVIC_EncodePriority+0x30>
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	3b03      	subs	r3, #3
 800088e:	e000      	b.n	8000892 <NVIC_EncodePriority+0x32>
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000894:	f04f 32ff 	mov.w	r2, #4294967295
 8000898:	69bb      	ldr	r3, [r7, #24]
 800089a:	fa02 f303 	lsl.w	r3, r2, r3
 800089e:	43da      	mvns	r2, r3
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	401a      	ands	r2, r3
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008a8:	f04f 31ff 	mov.w	r1, #4294967295
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	fa01 f303 	lsl.w	r3, r1, r3
 80008b2:	43d9      	mvns	r1, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b8:	4313      	orrs	r3, r2
         );
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3724      	adds	r7, #36	; 0x24
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
	...

080008c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	3b01      	subs	r3, #1
 80008d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008d8:	d301      	bcc.n	80008de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008da:	2301      	movs	r3, #1
 80008dc:	e00f      	b.n	80008fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008de:	4a0a      	ldr	r2, [pc, #40]	; (8000908 <SysTick_Config+0x40>)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	3b01      	subs	r3, #1
 80008e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008e6:	210f      	movs	r1, #15
 80008e8:	f04f 30ff 	mov.w	r0, #4294967295
 80008ec:	f7ff ff8e 	bl	800080c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008f0:	4b05      	ldr	r3, [pc, #20]	; (8000908 <SysTick_Config+0x40>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008f6:	4b04      	ldr	r3, [pc, #16]	; (8000908 <SysTick_Config+0x40>)
 80008f8:	2207      	movs	r2, #7
 80008fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008fc:	2300      	movs	r3, #0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	e000e010 	.word	0xe000e010

0800090c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f7ff ff47 	bl	80007a8 <__NVIC_SetPriorityGrouping>
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b086      	sub	sp, #24
 8000926:	af00      	add	r7, sp, #0
 8000928:	4603      	mov	r3, r0
 800092a:	60b9      	str	r1, [r7, #8]
 800092c:	607a      	str	r2, [r7, #4]
 800092e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000930:	f7ff ff5e 	bl	80007f0 <__NVIC_GetPriorityGrouping>
 8000934:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000936:	687a      	ldr	r2, [r7, #4]
 8000938:	68b9      	ldr	r1, [r7, #8]
 800093a:	6978      	ldr	r0, [r7, #20]
 800093c:	f7ff ff90 	bl	8000860 <NVIC_EncodePriority>
 8000940:	4602      	mov	r2, r0
 8000942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000946:	4611      	mov	r1, r2
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff ff5f 	bl	800080c <__NVIC_SetPriority>
}
 800094e:	bf00      	nop
 8000950:	3718      	adds	r7, #24
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b082      	sub	sp, #8
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f7ff ffb2 	bl	80008c8 <SysTick_Config>
 8000964:	4603      	mov	r3, r0
}
 8000966:	4618      	mov	r0, r3
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <HAL_PWR_ConfigPVD>:
  * @param  pConfigPVD : Pointer to a PWR_PVDTypeDef structure that contains the
  *                      PVD configuration information (PVDLevel and EventMode).
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *pConfigPVD)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* Check the PVD parameter */
  if (pConfigPVD == NULL)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d101      	bne.n	8000982 <HAL_PWR_ConfigPVD+0x12>
  {
    return HAL_ERROR;
 800097e:	2301      	movs	r3, #1
 8000980:	e059      	b.n	8000a36 <HAL_PWR_ConfigPVD+0xc6>
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(pConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(pConfigPVD->Mode));

  /* Set PVDLS[2:0] bits according to PVDLevel value */
  MODIFY_REG(PWR->SVMCR, PWR_SVMCR_PVDLS, pConfigPVD->PVDLevel);
 8000982:	4b30      	ldr	r3, [pc, #192]	; (8000a44 <HAL_PWR_ConfigPVD+0xd4>)
 8000984:	691b      	ldr	r3, [r3, #16]
 8000986:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	492d      	ldr	r1, [pc, #180]	; (8000a44 <HAL_PWR_ConfigPVD+0xd4>)
 8000990:	4313      	orrs	r3, r2
 8000992:	610b      	str	r3, [r1, #16]

  /* Disable PVD Event/Interrupt */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8000994:	4b2c      	ldr	r3, [pc, #176]	; (8000a48 <HAL_PWR_ConfigPVD+0xd8>)
 8000996:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800099a:	4a2b      	ldr	r2, [pc, #172]	; (8000a48 <HAL_PWR_ConfigPVD+0xd8>)
 800099c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009a0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 80009a4:	4b28      	ldr	r3, [pc, #160]	; (8000a48 <HAL_PWR_ConfigPVD+0xd8>)
 80009a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80009aa:	4a27      	ldr	r2, [pc, #156]	; (8000a48 <HAL_PWR_ConfigPVD+0xd8>)
 80009ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 80009b4:	4b24      	ldr	r3, [pc, #144]	; (8000a48 <HAL_PWR_ConfigPVD+0xd8>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a23      	ldr	r2, [pc, #140]	; (8000a48 <HAL_PWR_ConfigPVD+0xd8>)
 80009ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009be:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 80009c0:	4b21      	ldr	r3, [pc, #132]	; (8000a48 <HAL_PWR_ConfigPVD+0xd8>)
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	4a20      	ldr	r2, [pc, #128]	; (8000a48 <HAL_PWR_ConfigPVD+0xd8>)
 80009c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009ca:	6053      	str	r3, [r2, #4]

  /* Configure the PVD in interrupt mode */
  if ((pConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	f003 0304 	and.w	r3, r3, #4
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d007      	beq.n	80009e8 <HAL_PWR_ConfigPVD+0x78>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 80009d8:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <HAL_PWR_ConfigPVD+0xd8>)
 80009da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80009de:	4a1a      	ldr	r2, [pc, #104]	; (8000a48 <HAL_PWR_ConfigPVD+0xd8>)
 80009e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }

  /* Configure the PVD in event mode */
  if ((pConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	f003 0308 	and.w	r3, r3, #8
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d007      	beq.n	8000a04 <HAL_PWR_ConfigPVD+0x94>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <HAL_PWR_ConfigPVD+0xd8>)
 80009f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80009fa:	4a13      	ldr	r2, [pc, #76]	; (8000a48 <HAL_PWR_ConfigPVD+0xd8>)
 80009fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a00:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  }

  /* Configure the PVD in rising edge */
  if ((pConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	f003 0301 	and.w	r3, r3, #1
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d005      	beq.n	8000a1c <HAL_PWR_ConfigPVD+0xac>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8000a10:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <HAL_PWR_ConfigPVD+0xd8>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a0c      	ldr	r2, [pc, #48]	; (8000a48 <HAL_PWR_ConfigPVD+0xd8>)
 8000a16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a1a:	6013      	str	r3, [r2, #0]
  }

  /* Configure the PVD in falling edge */
  if ((pConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	f003 0302 	and.w	r3, r3, #2
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d005      	beq.n	8000a34 <HAL_PWR_ConfigPVD+0xc4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8000a28:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <HAL_PWR_ConfigPVD+0xd8>)
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	4a06      	ldr	r2, [pc, #24]	; (8000a48 <HAL_PWR_ConfigPVD+0xd8>)
 8000a2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a32:	6053      	str	r3, [r2, #4]
  }

  return HAL_OK;
 8000a34:	2300      	movs	r3, #0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	46020800 	.word	0x46020800
 8000a48:	46022000 	.word	0x46022000

08000a4c <HAL_PWR_EnablePVD>:
/**
  * @brief  Enable the programmable voltage detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_PVDE);
 8000a50:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <HAL_PWR_EnablePVD+0x1c>)
 8000a52:	691b      	ldr	r3, [r3, #16]
 8000a54:	4a04      	ldr	r2, [pc, #16]	; (8000a68 <HAL_PWR_EnablePVD+0x1c>)
 8000a56:	f043 0310 	orr.w	r3, r3, #16
 8000a5a:	6113      	str	r3, [r2, #16]
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	46020800 	.word	0x46020800

08000a6c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8000a74:	4b39      	ldr	r3, [pc, #228]	; (8000b5c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a7c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8000a7e:	68ba      	ldr	r2, [r7, #8]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d10b      	bne.n	8000a9e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a8c:	d905      	bls.n	8000a9a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8000a8e:	4b33      	ldr	r3, [pc, #204]	; (8000b5c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000a90:	68db      	ldr	r3, [r3, #12]
 8000a92:	4a32      	ldr	r2, [pc, #200]	; (8000b5c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000a94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a98:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e057      	b.n	8000b4e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000aa4:	d90a      	bls.n	8000abc <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8000aa6:	4b2d      	ldr	r3, [pc, #180]	; (8000b5c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000aa8:	68db      	ldr	r3, [r3, #12]
 8000aaa:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	4a2a      	ldr	r2, [pc, #168]	; (8000b5c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000ab4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ab8:	60d3      	str	r3, [r2, #12]
 8000aba:	e007      	b.n	8000acc <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8000abc:	4b27      	ldr	r3, [pc, #156]	; (8000b5c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8000ac4:	4925      	ldr	r1, [pc, #148]	; (8000b5c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8000acc:	4b24      	ldr	r3, [pc, #144]	; (8000b60 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a24      	ldr	r2, [pc, #144]	; (8000b64 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8000ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad6:	099b      	lsrs	r3, r3, #6
 8000ad8:	2232      	movs	r2, #50	; 0x32
 8000ada:	fb02 f303 	mul.w	r3, r2, r3
 8000ade:	4a21      	ldr	r2, [pc, #132]	; (8000b64 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8000ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae4:	099b      	lsrs	r3, r3, #6
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8000aea:	e002      	b.n	8000af2 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	3b01      	subs	r3, #1
 8000af0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8000af2:	4b1a      	ldr	r3, [pc, #104]	; (8000b5c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000af4:	68db      	ldr	r3, [r3, #12]
 8000af6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d102      	bne.n	8000b04 <HAL_PWREx_ControlVoltageScaling+0x98>
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d1f3      	bne.n	8000aec <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d01b      	beq.n	8000b42 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a15      	ldr	r2, [pc, #84]	; (8000b64 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8000b10:	fba2 2303 	umull	r2, r3, r2, r3
 8000b14:	099b      	lsrs	r3, r3, #6
 8000b16:	2232      	movs	r2, #50	; 0x32
 8000b18:	fb02 f303 	mul.w	r3, r2, r3
 8000b1c:	4a11      	ldr	r2, [pc, #68]	; (8000b64 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8000b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b22:	099b      	lsrs	r3, r3, #6
 8000b24:	3301      	adds	r3, #1
 8000b26:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8000b28:	e002      	b.n	8000b30 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	3b01      	subs	r3, #1
 8000b2e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8000b30:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d102      	bne.n	8000b42 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d1f3      	bne.n	8000b2a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d101      	bne.n	8000b4c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	e000      	b.n	8000b4e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3714      	adds	r7, #20
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	46020800 	.word	0x46020800
 8000b60:	20000000 	.word	0x20000000
 8000b64:	10624dd3 	.word	0x10624dd3

08000b68 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8000b6c:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <HAL_PWREx_GetVoltageRange+0x18>)
 8000b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	46020800 	.word	0x46020800

08000b84 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8000b88:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8000b8a:	691b      	ldr	r3, [r3, #16]
 8000b8c:	4a04      	ldr	r2, [pc, #16]	; (8000ba0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8000b8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000b92:	6113      	str	r3, [r2, #16]
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	46020800 	.word	0x46020800

08000ba4 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8000ba8:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <HAL_PWREx_EnableVddA+0x1c>)
 8000baa:	691b      	ldr	r3, [r3, #16]
 8000bac:	4a04      	ldr	r2, [pc, #16]	; (8000bc0 <HAL_PWREx_EnableVddA+0x1c>)
 8000bae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000bb2:	6113      	str	r3, [r2, #16]
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	46020800 	.word	0x46020800

08000bc4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08e      	sub	sp, #56	; 0x38
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d102      	bne.n	8000bde <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	f000 bec8 	b.w	800196e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000bde:	4b99      	ldr	r3, [pc, #612]	; (8000e44 <HAL_RCC_OscConfig+0x280>)
 8000be0:	69db      	ldr	r3, [r3, #28]
 8000be2:	f003 030c 	and.w	r3, r3, #12
 8000be6:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000be8:	4b96      	ldr	r3, [pc, #600]	; (8000e44 <HAL_RCC_OscConfig+0x280>)
 8000bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bec:	f003 0303 	and.w	r3, r3, #3
 8000bf0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f003 0310 	and.w	r3, r3, #16
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	f000 816c 	beq.w	8000ed8 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8000c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d007      	beq.n	8000c16 <HAL_RCC_OscConfig+0x52>
 8000c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c08:	2b0c      	cmp	r3, #12
 8000c0a:	f040 80de 	bne.w	8000dca <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	f040 80da 	bne.w	8000dca <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	69db      	ldr	r3, [r3, #28]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d102      	bne.n	8000c24 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	f000 bea5 	b.w	800196e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c28:	4b86      	ldr	r3, [pc, #536]	; (8000e44 <HAL_RCC_OscConfig+0x280>)
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d004      	beq.n	8000c3e <HAL_RCC_OscConfig+0x7a>
 8000c34:	4b83      	ldr	r3, [pc, #524]	; (8000e44 <HAL_RCC_OscConfig+0x280>)
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8000c3c:	e005      	b.n	8000c4a <HAL_RCC_OscConfig+0x86>
 8000c3e:	4b81      	ldr	r3, [pc, #516]	; (8000e44 <HAL_RCC_OscConfig+0x280>)
 8000c40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c44:	041b      	lsls	r3, r3, #16
 8000c46:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d255      	bcs.n	8000cfa <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8000c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d10a      	bne.n	8000c6a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f001 f99d 	bl	8001f98 <RCC_SetFlashLatencyFromMSIRange>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d002      	beq.n	8000c6a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8000c64:	2301      	movs	r3, #1
 8000c66:	f000 be82 	b.w	800196e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8000c6a:	4b76      	ldr	r3, [pc, #472]	; (8000e44 <HAL_RCC_OscConfig+0x280>)
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	4a75      	ldr	r2, [pc, #468]	; (8000e44 <HAL_RCC_OscConfig+0x280>)
 8000c70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c74:	6093      	str	r3, [r2, #8]
 8000c76:	4b73      	ldr	r3, [pc, #460]	; (8000e44 <HAL_RCC_OscConfig+0x280>)
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c82:	4970      	ldr	r1, [pc, #448]	; (8000e44 <HAL_RCC_OscConfig+0x280>)
 8000c84:	4313      	orrs	r3, r2
 8000c86:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c8c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8000c90:	d309      	bcc.n	8000ca6 <HAL_RCC_OscConfig+0xe2>
 8000c92:	4b6c      	ldr	r3, [pc, #432]	; (8000e44 <HAL_RCC_OscConfig+0x280>)
 8000c94:	68db      	ldr	r3, [r3, #12]
 8000c96:	f023 021f 	bic.w	r2, r3, #31
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6a1b      	ldr	r3, [r3, #32]
 8000c9e:	4969      	ldr	r1, [pc, #420]	; (8000e44 <HAL_RCC_OscConfig+0x280>)
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	60cb      	str	r3, [r1, #12]
 8000ca4:	e07e      	b.n	8000da4 <HAL_RCC_OscConfig+0x1e0>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	da0a      	bge.n	8000cc4 <HAL_RCC_OscConfig+0x100>
 8000cae:	4b65      	ldr	r3, [pc, #404]	; (8000e44 <HAL_RCC_OscConfig+0x280>)
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6a1b      	ldr	r3, [r3, #32]
 8000cba:	015b      	lsls	r3, r3, #5
 8000cbc:	4961      	ldr	r1, [pc, #388]	; (8000e44 <HAL_RCC_OscConfig+0x280>)
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	60cb      	str	r3, [r1, #12]
 8000cc2:	e06f      	b.n	8000da4 <HAL_RCC_OscConfig+0x1e0>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ccc:	d30a      	bcc.n	8000ce4 <HAL_RCC_OscConfig+0x120>
 8000cce:	4b5d      	ldr	r3, [pc, #372]	; (8000e44 <HAL_RCC_OscConfig+0x280>)
 8000cd0:	68db      	ldr	r3, [r3, #12]
 8000cd2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6a1b      	ldr	r3, [r3, #32]
 8000cda:	029b      	lsls	r3, r3, #10
 8000cdc:	4959      	ldr	r1, [pc, #356]	; (8000e44 <HAL_RCC_OscConfig+0x280>)
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	60cb      	str	r3, [r1, #12]
 8000ce2:	e05f      	b.n	8000da4 <HAL_RCC_OscConfig+0x1e0>
 8000ce4:	4b57      	ldr	r3, [pc, #348]	; (8000e44 <HAL_RCC_OscConfig+0x280>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6a1b      	ldr	r3, [r3, #32]
 8000cf0:	03db      	lsls	r3, r3, #15
 8000cf2:	4954      	ldr	r1, [pc, #336]	; (8000e44 <HAL_RCC_OscConfig+0x280>)
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	60cb      	str	r3, [r1, #12]
 8000cf8:	e054      	b.n	8000da4 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8000cfa:	4b52      	ldr	r3, [pc, #328]	; (8000e44 <HAL_RCC_OscConfig+0x280>)
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	4a51      	ldr	r2, [pc, #324]	; (8000e44 <HAL_RCC_OscConfig+0x280>)
 8000d00:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d04:	6093      	str	r3, [r2, #8]
 8000d06:	4b4f      	ldr	r3, [pc, #316]	; (8000e44 <HAL_RCC_OscConfig+0x280>)
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d12:	494c      	ldr	r1, [pc, #304]	; (8000e44 <HAL_RCC_OscConfig+0x280>)
 8000d14:	4313      	orrs	r3, r2
 8000d16:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d1c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8000d20:	d309      	bcc.n	8000d36 <HAL_RCC_OscConfig+0x172>
 8000d22:	4b48      	ldr	r3, [pc, #288]	; (8000e44 <HAL_RCC_OscConfig+0x280>)
 8000d24:	68db      	ldr	r3, [r3, #12]
 8000d26:	f023 021f 	bic.w	r2, r3, #31
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6a1b      	ldr	r3, [r3, #32]
 8000d2e:	4945      	ldr	r1, [pc, #276]	; (8000e44 <HAL_RCC_OscConfig+0x280>)
 8000d30:	4313      	orrs	r3, r2
 8000d32:	60cb      	str	r3, [r1, #12]
 8000d34:	e028      	b.n	8000d88 <HAL_RCC_OscConfig+0x1c4>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	da0a      	bge.n	8000d54 <HAL_RCC_OscConfig+0x190>
 8000d3e:	4b41      	ldr	r3, [pc, #260]	; (8000e44 <HAL_RCC_OscConfig+0x280>)
 8000d40:	68db      	ldr	r3, [r3, #12]
 8000d42:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6a1b      	ldr	r3, [r3, #32]
 8000d4a:	015b      	lsls	r3, r3, #5
 8000d4c:	493d      	ldr	r1, [pc, #244]	; (8000e44 <HAL_RCC_OscConfig+0x280>)
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	60cb      	str	r3, [r1, #12]
 8000d52:	e019      	b.n	8000d88 <HAL_RCC_OscConfig+0x1c4>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d5c:	d30a      	bcc.n	8000d74 <HAL_RCC_OscConfig+0x1b0>
 8000d5e:	4b39      	ldr	r3, [pc, #228]	; (8000e44 <HAL_RCC_OscConfig+0x280>)
 8000d60:	68db      	ldr	r3, [r3, #12]
 8000d62:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6a1b      	ldr	r3, [r3, #32]
 8000d6a:	029b      	lsls	r3, r3, #10
 8000d6c:	4935      	ldr	r1, [pc, #212]	; (8000e44 <HAL_RCC_OscConfig+0x280>)
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	60cb      	str	r3, [r1, #12]
 8000d72:	e009      	b.n	8000d88 <HAL_RCC_OscConfig+0x1c4>
 8000d74:	4b33      	ldr	r3, [pc, #204]	; (8000e44 <HAL_RCC_OscConfig+0x280>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6a1b      	ldr	r3, [r3, #32]
 8000d80:	03db      	lsls	r3, r3, #15
 8000d82:	4930      	ldr	r1, [pc, #192]	; (8000e44 <HAL_RCC_OscConfig+0x280>)
 8000d84:	4313      	orrs	r3, r2
 8000d86:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8000d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d10a      	bne.n	8000da4 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d92:	4618      	mov	r0, r3
 8000d94:	f001 f900 	bl	8001f98 <RCC_SetFlashLatencyFromMSIRange>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d002      	beq.n	8000da4 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	f000 bde5 	b.w	800196e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8000da4:	f001 f8de 	bl	8001f64 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000da8:	4b27      	ldr	r3, [pc, #156]	; (8000e48 <HAL_RCC_OscConfig+0x284>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fca5 	bl	80006fc <HAL_InitTick>
 8000db2:	4603      	mov	r3, r0
 8000db4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8000db8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	f000 808a 	beq.w	8000ed6 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8000dc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000dc6:	f000 bdd2 	b.w	800196e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	69db      	ldr	r3, [r3, #28]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d066      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8000dd2:	4b1c      	ldr	r3, [pc, #112]	; (8000e44 <HAL_RCC_OscConfig+0x280>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a1b      	ldr	r2, [pc, #108]	; (8000e44 <HAL_RCC_OscConfig+0x280>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8000dde:	f7ff fcd7 	bl	8000790 <HAL_GetTick>
 8000de2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8000de4:	e009      	b.n	8000dfa <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000de6:	f7ff fcd3 	bl	8000790 <HAL_GetTick>
 8000dea:	4602      	mov	r2, r0
 8000dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d902      	bls.n	8000dfa <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8000df4:	2303      	movs	r3, #3
 8000df6:	f000 bdba 	b.w	800196e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8000dfa:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <HAL_RCC_OscConfig+0x280>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f003 0304 	and.w	r3, r3, #4
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d0ef      	beq.n	8000de6 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8000e06:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <HAL_RCC_OscConfig+0x280>)
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	4a0e      	ldr	r2, [pc, #56]	; (8000e44 <HAL_RCC_OscConfig+0x280>)
 8000e0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e10:	6093      	str	r3, [r2, #8]
 8000e12:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <HAL_RCC_OscConfig+0x280>)
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e1e:	4909      	ldr	r1, [pc, #36]	; (8000e44 <HAL_RCC_OscConfig+0x280>)
 8000e20:	4313      	orrs	r3, r2
 8000e22:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e28:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8000e2c:	d30e      	bcc.n	8000e4c <HAL_RCC_OscConfig+0x288>
 8000e2e:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <HAL_RCC_OscConfig+0x280>)
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	f023 021f 	bic.w	r2, r3, #31
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6a1b      	ldr	r3, [r3, #32]
 8000e3a:	4902      	ldr	r1, [pc, #8]	; (8000e44 <HAL_RCC_OscConfig+0x280>)
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	60cb      	str	r3, [r1, #12]
 8000e40:	e04a      	b.n	8000ed8 <HAL_RCC_OscConfig+0x314>
 8000e42:	bf00      	nop
 8000e44:	46020c00 	.word	0x46020c00
 8000e48:	20000004 	.word	0x20000004
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	da0a      	bge.n	8000e6a <HAL_RCC_OscConfig+0x2a6>
 8000e54:	4b98      	ldr	r3, [pc, #608]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6a1b      	ldr	r3, [r3, #32]
 8000e60:	015b      	lsls	r3, r3, #5
 8000e62:	4995      	ldr	r1, [pc, #596]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000e64:	4313      	orrs	r3, r2
 8000e66:	60cb      	str	r3, [r1, #12]
 8000e68:	e036      	b.n	8000ed8 <HAL_RCC_OscConfig+0x314>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e72:	d30a      	bcc.n	8000e8a <HAL_RCC_OscConfig+0x2c6>
 8000e74:	4b90      	ldr	r3, [pc, #576]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6a1b      	ldr	r3, [r3, #32]
 8000e80:	029b      	lsls	r3, r3, #10
 8000e82:	498d      	ldr	r1, [pc, #564]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000e84:	4313      	orrs	r3, r2
 8000e86:	60cb      	str	r3, [r1, #12]
 8000e88:	e026      	b.n	8000ed8 <HAL_RCC_OscConfig+0x314>
 8000e8a:	4b8b      	ldr	r3, [pc, #556]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000e8c:	68db      	ldr	r3, [r3, #12]
 8000e8e:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6a1b      	ldr	r3, [r3, #32]
 8000e96:	03db      	lsls	r3, r3, #15
 8000e98:	4987      	ldr	r1, [pc, #540]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	60cb      	str	r3, [r1, #12]
 8000e9e:	e01b      	b.n	8000ed8 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8000ea0:	4b85      	ldr	r3, [pc, #532]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a84      	ldr	r2, [pc, #528]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000ea6:	f023 0301 	bic.w	r3, r3, #1
 8000eaa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8000eac:	f7ff fc70 	bl	8000790 <HAL_GetTick>
 8000eb0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8000eb2:	e009      	b.n	8000ec8 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000eb4:	f7ff fc6c 	bl	8000790 <HAL_GetTick>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d902      	bls.n	8000ec8 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	f000 bd53 	b.w	800196e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8000ec8:	4b7b      	ldr	r3, [pc, #492]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f003 0304 	and.w	r3, r3, #4
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d1ef      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x2f0>
 8000ed4:	e000      	b.n	8000ed8 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8000ed6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f003 0301 	and.w	r3, r3, #1
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	f000 808b 	beq.w	8000ffc <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8000ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ee8:	2b08      	cmp	r3, #8
 8000eea:	d005      	beq.n	8000ef8 <HAL_RCC_OscConfig+0x334>
 8000eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eee:	2b0c      	cmp	r3, #12
 8000ef0:	d109      	bne.n	8000f06 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ef4:	2b03      	cmp	r3, #3
 8000ef6:	d106      	bne.n	8000f06 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d17d      	bne.n	8000ffc <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	f000 bd34 	b.w	800196e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f0e:	d106      	bne.n	8000f1e <HAL_RCC_OscConfig+0x35a>
 8000f10:	4b69      	ldr	r3, [pc, #420]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a68      	ldr	r2, [pc, #416]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000f16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f1a:	6013      	str	r3, [r2, #0]
 8000f1c:	e041      	b.n	8000fa2 <HAL_RCC_OscConfig+0x3de>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f26:	d112      	bne.n	8000f4e <HAL_RCC_OscConfig+0x38a>
 8000f28:	4b63      	ldr	r3, [pc, #396]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a62      	ldr	r2, [pc, #392]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000f2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f32:	6013      	str	r3, [r2, #0]
 8000f34:	4b60      	ldr	r3, [pc, #384]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a5f      	ldr	r2, [pc, #380]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000f3a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000f3e:	6013      	str	r3, [r2, #0]
 8000f40:	4b5d      	ldr	r3, [pc, #372]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a5c      	ldr	r2, [pc, #368]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000f46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f4a:	6013      	str	r3, [r2, #0]
 8000f4c:	e029      	b.n	8000fa2 <HAL_RCC_OscConfig+0x3de>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8000f56:	d112      	bne.n	8000f7e <HAL_RCC_OscConfig+0x3ba>
 8000f58:	4b57      	ldr	r3, [pc, #348]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a56      	ldr	r2, [pc, #344]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000f5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f62:	6013      	str	r3, [r2, #0]
 8000f64:	4b54      	ldr	r3, [pc, #336]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a53      	ldr	r2, [pc, #332]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000f6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000f6e:	6013      	str	r3, [r2, #0]
 8000f70:	4b51      	ldr	r3, [pc, #324]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a50      	ldr	r2, [pc, #320]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000f76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f7a:	6013      	str	r3, [r2, #0]
 8000f7c:	e011      	b.n	8000fa2 <HAL_RCC_OscConfig+0x3de>
 8000f7e:	4b4e      	ldr	r3, [pc, #312]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a4d      	ldr	r2, [pc, #308]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000f84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f88:	6013      	str	r3, [r2, #0]
 8000f8a:	4b4b      	ldr	r3, [pc, #300]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a4a      	ldr	r2, [pc, #296]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000f90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f94:	6013      	str	r3, [r2, #0]
 8000f96:	4b48      	ldr	r3, [pc, #288]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a47      	ldr	r2, [pc, #284]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000f9c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000fa0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d014      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8000faa:	f7ff fbf1 	bl	8000790 <HAL_GetTick>
 8000fae:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fb0:	e009      	b.n	8000fc6 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fb2:	f7ff fbed 	bl	8000790 <HAL_GetTick>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	2b64      	cmp	r3, #100	; 0x64
 8000fbe:	d902      	bls.n	8000fc6 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	f000 bcd4 	b.w	800196e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fc6:	4b3c      	ldr	r3, [pc, #240]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d0ef      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x3ee>
 8000fd2:	e013      	b.n	8000ffc <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8000fd4:	f7ff fbdc 	bl	8000790 <HAL_GetTick>
 8000fd8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fda:	e009      	b.n	8000ff0 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fdc:	f7ff fbd8 	bl	8000790 <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b64      	cmp	r3, #100	; 0x64
 8000fe8:	d902      	bls.n	8000ff0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	f000 bcbf 	b.w	800196e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ff0:	4b31      	ldr	r3, [pc, #196]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d1ef      	bne.n	8000fdc <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 0302 	and.w	r3, r3, #2
 8001004:	2b00      	cmp	r3, #0
 8001006:	d05f      	beq.n	80010c8 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800100a:	2b04      	cmp	r3, #4
 800100c:	d005      	beq.n	800101a <HAL_RCC_OscConfig+0x456>
 800100e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001010:	2b0c      	cmp	r3, #12
 8001012:	d114      	bne.n	800103e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001016:	2b02      	cmp	r3, #2
 8001018:	d111      	bne.n	800103e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d102      	bne.n	8001028 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	f000 bca3 	b.w	800196e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001028:	4b23      	ldr	r3, [pc, #140]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 800102a:	691b      	ldr	r3, [r3, #16]
 800102c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	691b      	ldr	r3, [r3, #16]
 8001034:	041b      	lsls	r3, r3, #16
 8001036:	4920      	ldr	r1, [pc, #128]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8001038:	4313      	orrs	r3, r2
 800103a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800103c:	e044      	b.n	80010c8 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d024      	beq.n	8001090 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8001046:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a1b      	ldr	r2, [pc, #108]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 800104c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001050:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001052:	f7ff fb9d 	bl	8000790 <HAL_GetTick>
 8001056:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001058:	e009      	b.n	800106e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800105a:	f7ff fb99 	bl	8000790 <HAL_GetTick>
 800105e:	4602      	mov	r2, r0
 8001060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d902      	bls.n	800106e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001068:	2303      	movs	r3, #3
 800106a:	f000 bc80 	b.w	800196e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800106e:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001076:	2b00      	cmp	r3, #0
 8001078:	d0ef      	beq.n	800105a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800107a:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 800107c:	691b      	ldr	r3, [r3, #16]
 800107e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	691b      	ldr	r3, [r3, #16]
 8001086:	041b      	lsls	r3, r3, #16
 8001088:	490b      	ldr	r1, [pc, #44]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 800108a:	4313      	orrs	r3, r2
 800108c:	610b      	str	r3, [r1, #16]
 800108e:	e01b      	b.n	80010c8 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8001090:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a08      	ldr	r2, [pc, #32]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8001096:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800109a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800109c:	f7ff fb78 	bl	8000790 <HAL_GetTick>
 80010a0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010a2:	e00b      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010a4:	f7ff fb74 	bl	8000790 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d904      	bls.n	80010bc <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	f000 bc5b 	b.w	800196e <HAL_RCC_OscConfig+0xdaa>
 80010b8:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010bc:	4baf      	ldr	r3, [pc, #700]	; (800137c <HAL_RCC_OscConfig+0x7b8>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d1ed      	bne.n	80010a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 0308 	and.w	r3, r3, #8
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	f000 80c8 	beq.w	8001266 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80010d6:	2300      	movs	r3, #0
 80010d8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010dc:	4ba7      	ldr	r3, [pc, #668]	; (800137c <HAL_RCC_OscConfig+0x7b8>)
 80010de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010e2:	f003 0304 	and.w	r3, r3, #4
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d111      	bne.n	800110e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010ea:	4ba4      	ldr	r3, [pc, #656]	; (800137c <HAL_RCC_OscConfig+0x7b8>)
 80010ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010f0:	4aa2      	ldr	r2, [pc, #648]	; (800137c <HAL_RCC_OscConfig+0x7b8>)
 80010f2:	f043 0304 	orr.w	r3, r3, #4
 80010f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80010fa:	4ba0      	ldr	r3, [pc, #640]	; (800137c <HAL_RCC_OscConfig+0x7b8>)
 80010fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001100:	f003 0304 	and.w	r3, r3, #4
 8001104:	617b      	str	r3, [r7, #20]
 8001106:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8001108:	2301      	movs	r3, #1
 800110a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800110e:	4b9c      	ldr	r3, [pc, #624]	; (8001380 <HAL_RCC_OscConfig+0x7bc>)
 8001110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	2b00      	cmp	r3, #0
 8001118:	d119      	bne.n	800114e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800111a:	4b99      	ldr	r3, [pc, #612]	; (8001380 <HAL_RCC_OscConfig+0x7bc>)
 800111c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800111e:	4a98      	ldr	r2, [pc, #608]	; (8001380 <HAL_RCC_OscConfig+0x7bc>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001126:	f7ff fb33 	bl	8000790 <HAL_GetTick>
 800112a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800112c:	e009      	b.n	8001142 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800112e:	f7ff fb2f 	bl	8000790 <HAL_GetTick>
 8001132:	4602      	mov	r2, r0
 8001134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d902      	bls.n	8001142 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	f000 bc16 	b.w	800196e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001142:	4b8f      	ldr	r3, [pc, #572]	; (8001380 <HAL_RCC_OscConfig+0x7bc>)
 8001144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	2b00      	cmp	r3, #0
 800114c:	d0ef      	beq.n	800112e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d05f      	beq.n	8001216 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8001156:	4b89      	ldr	r3, [pc, #548]	; (800137c <HAL_RCC_OscConfig+0x7b8>)
 8001158:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800115c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	699a      	ldr	r2, [r3, #24]
 8001162:	6a3b      	ldr	r3, [r7, #32]
 8001164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001168:	429a      	cmp	r2, r3
 800116a:	d037      	beq.n	80011dc <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800116c:	6a3b      	ldr	r3, [r7, #32]
 800116e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d006      	beq.n	8001184 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8001176:	6a3b      	ldr	r3, [r7, #32]
 8001178:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800117c:	2b00      	cmp	r3, #0
 800117e:	d101      	bne.n	8001184 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	e3f4      	b.n	800196e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8001184:	6a3b      	ldr	r3, [r7, #32]
 8001186:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d01b      	beq.n	80011c6 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800118e:	4b7b      	ldr	r3, [pc, #492]	; (800137c <HAL_RCC_OscConfig+0x7b8>)
 8001190:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001194:	4a79      	ldr	r2, [pc, #484]	; (800137c <HAL_RCC_OscConfig+0x7b8>)
 8001196:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800119a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 800119e:	f7ff faf7 	bl	8000790 <HAL_GetTick>
 80011a2:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80011a4:	e008      	b.n	80011b8 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011a6:	f7ff faf3 	bl	8000790 <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b05      	cmp	r3, #5
 80011b2:	d901      	bls.n	80011b8 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	e3da      	b.n	800196e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80011b8:	4b70      	ldr	r3, [pc, #448]	; (800137c <HAL_RCC_OscConfig+0x7b8>)
 80011ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d1ef      	bne.n	80011a6 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80011c6:	4b6d      	ldr	r3, [pc, #436]	; (800137c <HAL_RCC_OscConfig+0x7b8>)
 80011c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011cc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	4969      	ldr	r1, [pc, #420]	; (800137c <HAL_RCC_OscConfig+0x7b8>)
 80011d6:	4313      	orrs	r3, r2
 80011d8:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80011dc:	4b67      	ldr	r3, [pc, #412]	; (800137c <HAL_RCC_OscConfig+0x7b8>)
 80011de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011e2:	4a66      	ldr	r2, [pc, #408]	; (800137c <HAL_RCC_OscConfig+0x7b8>)
 80011e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80011e8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80011ec:	f7ff fad0 	bl	8000790 <HAL_GetTick>
 80011f0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011f4:	f7ff facc 	bl	8000790 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b05      	cmp	r3, #5
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e3b3      	b.n	800196e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001206:	4b5d      	ldr	r3, [pc, #372]	; (800137c <HAL_RCC_OscConfig+0x7b8>)
 8001208:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800120c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d0ef      	beq.n	80011f4 <HAL_RCC_OscConfig+0x630>
 8001214:	e01b      	b.n	800124e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8001216:	4b59      	ldr	r3, [pc, #356]	; (800137c <HAL_RCC_OscConfig+0x7b8>)
 8001218:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800121c:	4a57      	ldr	r2, [pc, #348]	; (800137c <HAL_RCC_OscConfig+0x7b8>)
 800121e:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001222:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001226:	f7ff fab3 	bl	8000790 <HAL_GetTick>
 800122a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800122c:	e008      	b.n	8001240 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800122e:	f7ff faaf 	bl	8000790 <HAL_GetTick>
 8001232:	4602      	mov	r2, r0
 8001234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	2b05      	cmp	r3, #5
 800123a:	d901      	bls.n	8001240 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	e396      	b.n	800196e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001240:	4b4e      	ldr	r3, [pc, #312]	; (800137c <HAL_RCC_OscConfig+0x7b8>)
 8001242:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001246:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1ef      	bne.n	800122e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800124e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001252:	2b01      	cmp	r3, #1
 8001254:	d107      	bne.n	8001266 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001256:	4b49      	ldr	r3, [pc, #292]	; (800137c <HAL_RCC_OscConfig+0x7b8>)
 8001258:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800125c:	4a47      	ldr	r2, [pc, #284]	; (800137c <HAL_RCC_OscConfig+0x7b8>)
 800125e:	f023 0304 	bic.w	r3, r3, #4
 8001262:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0304 	and.w	r3, r3, #4
 800126e:	2b00      	cmp	r3, #0
 8001270:	f000 8111 	beq.w	8001496 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8001274:	2300      	movs	r3, #0
 8001276:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800127a:	4b40      	ldr	r3, [pc, #256]	; (800137c <HAL_RCC_OscConfig+0x7b8>)
 800127c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001280:	f003 0304 	and.w	r3, r3, #4
 8001284:	2b00      	cmp	r3, #0
 8001286:	d111      	bne.n	80012ac <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001288:	4b3c      	ldr	r3, [pc, #240]	; (800137c <HAL_RCC_OscConfig+0x7b8>)
 800128a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800128e:	4a3b      	ldr	r2, [pc, #236]	; (800137c <HAL_RCC_OscConfig+0x7b8>)
 8001290:	f043 0304 	orr.w	r3, r3, #4
 8001294:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001298:	4b38      	ldr	r3, [pc, #224]	; (800137c <HAL_RCC_OscConfig+0x7b8>)
 800129a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800129e:	f003 0304 	and.w	r3, r3, #4
 80012a2:	613b      	str	r3, [r7, #16]
 80012a4:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80012a6:	2301      	movs	r3, #1
 80012a8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80012ac:	4b34      	ldr	r3, [pc, #208]	; (8001380 <HAL_RCC_OscConfig+0x7bc>)
 80012ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d118      	bne.n	80012ea <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80012b8:	4b31      	ldr	r3, [pc, #196]	; (8001380 <HAL_RCC_OscConfig+0x7bc>)
 80012ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012bc:	4a30      	ldr	r2, [pc, #192]	; (8001380 <HAL_RCC_OscConfig+0x7bc>)
 80012be:	f043 0301 	orr.w	r3, r3, #1
 80012c2:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012c4:	f7ff fa64 	bl	8000790 <HAL_GetTick>
 80012c8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012cc:	f7ff fa60 	bl	8000790 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e347      	b.n	800196e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80012de:	4b28      	ldr	r3, [pc, #160]	; (8001380 <HAL_RCC_OscConfig+0x7bc>)
 80012e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d0f0      	beq.n	80012cc <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d01f      	beq.n	8001336 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f003 0304 	and.w	r3, r3, #4
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d010      	beq.n	8001324 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001302:	4b1e      	ldr	r3, [pc, #120]	; (800137c <HAL_RCC_OscConfig+0x7b8>)
 8001304:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001308:	4a1c      	ldr	r2, [pc, #112]	; (800137c <HAL_RCC_OscConfig+0x7b8>)
 800130a:	f043 0304 	orr.w	r3, r3, #4
 800130e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001312:	4b1a      	ldr	r3, [pc, #104]	; (800137c <HAL_RCC_OscConfig+0x7b8>)
 8001314:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001318:	4a18      	ldr	r2, [pc, #96]	; (800137c <HAL_RCC_OscConfig+0x7b8>)
 800131a:	f043 0301 	orr.w	r3, r3, #1
 800131e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001322:	e018      	b.n	8001356 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001324:	4b15      	ldr	r3, [pc, #84]	; (800137c <HAL_RCC_OscConfig+0x7b8>)
 8001326:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800132a:	4a14      	ldr	r2, [pc, #80]	; (800137c <HAL_RCC_OscConfig+0x7b8>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001334:	e00f      	b.n	8001356 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001336:	4b11      	ldr	r3, [pc, #68]	; (800137c <HAL_RCC_OscConfig+0x7b8>)
 8001338:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800133c:	4a0f      	ldr	r2, [pc, #60]	; (800137c <HAL_RCC_OscConfig+0x7b8>)
 800133e:	f023 0301 	bic.w	r3, r3, #1
 8001342:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001346:	4b0d      	ldr	r3, [pc, #52]	; (800137c <HAL_RCC_OscConfig+0x7b8>)
 8001348:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800134c:	4a0b      	ldr	r2, [pc, #44]	; (800137c <HAL_RCC_OscConfig+0x7b8>)
 800134e:	f023 0304 	bic.w	r3, r3, #4
 8001352:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d057      	beq.n	800140e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800135e:	f7ff fa17 	bl	8000790 <HAL_GetTick>
 8001362:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001364:	e00e      	b.n	8001384 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001366:	f7ff fa13 	bl	8000790 <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	f241 3288 	movw	r2, #5000	; 0x1388
 8001374:	4293      	cmp	r3, r2
 8001376:	d905      	bls.n	8001384 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e2f8      	b.n	800196e <HAL_RCC_OscConfig+0xdaa>
 800137c:	46020c00 	.word	0x46020c00
 8001380:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001384:	4b9c      	ldr	r3, [pc, #624]	; (80015f8 <HAL_RCC_OscConfig+0xa34>)
 8001386:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d0e9      	beq.n	8001366 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800139a:	2b00      	cmp	r3, #0
 800139c:	d01b      	beq.n	80013d6 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800139e:	4b96      	ldr	r3, [pc, #600]	; (80015f8 <HAL_RCC_OscConfig+0xa34>)
 80013a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013a4:	4a94      	ldr	r2, [pc, #592]	; (80015f8 <HAL_RCC_OscConfig+0xa34>)
 80013a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80013ae:	e00a      	b.n	80013c6 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013b0:	f7ff f9ee 	bl	8000790 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80013be:	4293      	cmp	r3, r2
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e2d3      	b.n	800196e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80013c6:	4b8c      	ldr	r3, [pc, #560]	; (80015f8 <HAL_RCC_OscConfig+0xa34>)
 80013c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0ed      	beq.n	80013b0 <HAL_RCC_OscConfig+0x7ec>
 80013d4:	e053      	b.n	800147e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80013d6:	4b88      	ldr	r3, [pc, #544]	; (80015f8 <HAL_RCC_OscConfig+0xa34>)
 80013d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013dc:	4a86      	ldr	r2, [pc, #536]	; (80015f8 <HAL_RCC_OscConfig+0xa34>)
 80013de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80013e2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80013e6:	e00a      	b.n	80013fe <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013e8:	f7ff f9d2 	bl	8000790 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e2b7      	b.n	800196e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80013fe:	4b7e      	ldr	r3, [pc, #504]	; (80015f8 <HAL_RCC_OscConfig+0xa34>)
 8001400:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001404:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001408:	2b00      	cmp	r3, #0
 800140a:	d1ed      	bne.n	80013e8 <HAL_RCC_OscConfig+0x824>
 800140c:	e037      	b.n	800147e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800140e:	f7ff f9bf 	bl	8000790 <HAL_GetTick>
 8001412:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001414:	e00a      	b.n	800142c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001416:	f7ff f9bb 	bl	8000790 <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	f241 3288 	movw	r2, #5000	; 0x1388
 8001424:	4293      	cmp	r3, r2
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e2a0      	b.n	800196e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800142c:	4b72      	ldr	r3, [pc, #456]	; (80015f8 <HAL_RCC_OscConfig+0xa34>)
 800142e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1ed      	bne.n	8001416 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800143a:	4b6f      	ldr	r3, [pc, #444]	; (80015f8 <HAL_RCC_OscConfig+0xa34>)
 800143c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001444:	2b00      	cmp	r3, #0
 8001446:	d01a      	beq.n	800147e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001448:	4b6b      	ldr	r3, [pc, #428]	; (80015f8 <HAL_RCC_OscConfig+0xa34>)
 800144a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800144e:	4a6a      	ldr	r2, [pc, #424]	; (80015f8 <HAL_RCC_OscConfig+0xa34>)
 8001450:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001454:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001458:	e00a      	b.n	8001470 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800145a:	f7ff f999 	bl	8000790 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	f241 3288 	movw	r2, #5000	; 0x1388
 8001468:	4293      	cmp	r3, r2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e27e      	b.n	800196e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001470:	4b61      	ldr	r3, [pc, #388]	; (80015f8 <HAL_RCC_OscConfig+0xa34>)
 8001472:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001476:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1ed      	bne.n	800145a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800147e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001482:	2b01      	cmp	r3, #1
 8001484:	d107      	bne.n	8001496 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001486:	4b5c      	ldr	r3, [pc, #368]	; (80015f8 <HAL_RCC_OscConfig+0xa34>)
 8001488:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800148c:	4a5a      	ldr	r2, [pc, #360]	; (80015f8 <HAL_RCC_OscConfig+0xa34>)
 800148e:	f023 0304 	bic.w	r3, r3, #4
 8001492:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0320 	and.w	r3, r3, #32
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d036      	beq.n	8001510 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d019      	beq.n	80014de <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80014aa:	4b53      	ldr	r3, [pc, #332]	; (80015f8 <HAL_RCC_OscConfig+0xa34>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a52      	ldr	r2, [pc, #328]	; (80015f8 <HAL_RCC_OscConfig+0xa34>)
 80014b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014b4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80014b6:	f7ff f96b 	bl	8000790 <HAL_GetTick>
 80014ba:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80014bc:	e008      	b.n	80014d0 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014be:	f7ff f967 	bl	8000790 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e24e      	b.n	800196e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80014d0:	4b49      	ldr	r3, [pc, #292]	; (80015f8 <HAL_RCC_OscConfig+0xa34>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d0f0      	beq.n	80014be <HAL_RCC_OscConfig+0x8fa>
 80014dc:	e018      	b.n	8001510 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80014de:	4b46      	ldr	r3, [pc, #280]	; (80015f8 <HAL_RCC_OscConfig+0xa34>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a45      	ldr	r2, [pc, #276]	; (80015f8 <HAL_RCC_OscConfig+0xa34>)
 80014e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80014e8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80014ea:	f7ff f951 	bl	8000790 <HAL_GetTick>
 80014ee:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80014f0:	e008      	b.n	8001504 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014f2:	f7ff f94d 	bl	8000790 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e234      	b.n	800196e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001504:	4b3c      	ldr	r3, [pc, #240]	; (80015f8 <HAL_RCC_OscConfig+0xa34>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d1f0      	bne.n	80014f2 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001518:	2b00      	cmp	r3, #0
 800151a:	d036      	beq.n	800158a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001520:	2b00      	cmp	r3, #0
 8001522:	d019      	beq.n	8001558 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8001524:	4b34      	ldr	r3, [pc, #208]	; (80015f8 <HAL_RCC_OscConfig+0xa34>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a33      	ldr	r2, [pc, #204]	; (80015f8 <HAL_RCC_OscConfig+0xa34>)
 800152a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800152e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001530:	f7ff f92e 	bl	8000790 <HAL_GetTick>
 8001534:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001538:	f7ff f92a 	bl	8000790 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e211      	b.n	800196e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800154a:	4b2b      	ldr	r3, [pc, #172]	; (80015f8 <HAL_RCC_OscConfig+0xa34>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d0f0      	beq.n	8001538 <HAL_RCC_OscConfig+0x974>
 8001556:	e018      	b.n	800158a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8001558:	4b27      	ldr	r3, [pc, #156]	; (80015f8 <HAL_RCC_OscConfig+0xa34>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a26      	ldr	r2, [pc, #152]	; (80015f8 <HAL_RCC_OscConfig+0xa34>)
 800155e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001562:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001564:	f7ff f914 	bl	8000790 <HAL_GetTick>
 8001568:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800156c:	f7ff f910 	bl	8000790 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e1f7      	b.n	800196e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800157e:	4b1e      	ldr	r3, [pc, #120]	; (80015f8 <HAL_RCC_OscConfig+0xa34>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1f0      	bne.n	800156c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001592:	2b00      	cmp	r3, #0
 8001594:	d07f      	beq.n	8001696 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800159a:	2b00      	cmp	r3, #0
 800159c:	d062      	beq.n	8001664 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800159e:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <HAL_RCC_OscConfig+0xa34>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	4a15      	ldr	r2, [pc, #84]	; (80015f8 <HAL_RCC_OscConfig+0xa34>)
 80015a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015a8:	6093      	str	r3, [r2, #8]
 80015aa:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <HAL_RCC_OscConfig+0xa34>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b6:	4910      	ldr	r1, [pc, #64]	; (80015f8 <HAL_RCC_OscConfig+0xa34>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80015c4:	d309      	bcc.n	80015da <HAL_RCC_OscConfig+0xa16>
 80015c6:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <HAL_RCC_OscConfig+0xa34>)
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	f023 021f 	bic.w	r2, r3, #31
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a1b      	ldr	r3, [r3, #32]
 80015d2:	4909      	ldr	r1, [pc, #36]	; (80015f8 <HAL_RCC_OscConfig+0xa34>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	60cb      	str	r3, [r1, #12]
 80015d8:	e02a      	b.n	8001630 <HAL_RCC_OscConfig+0xa6c>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015de:	2b00      	cmp	r3, #0
 80015e0:	da0c      	bge.n	80015fc <HAL_RCC_OscConfig+0xa38>
 80015e2:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <HAL_RCC_OscConfig+0xa34>)
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a1b      	ldr	r3, [r3, #32]
 80015ee:	015b      	lsls	r3, r3, #5
 80015f0:	4901      	ldr	r1, [pc, #4]	; (80015f8 <HAL_RCC_OscConfig+0xa34>)
 80015f2:	4313      	orrs	r3, r2
 80015f4:	60cb      	str	r3, [r1, #12]
 80015f6:	e01b      	b.n	8001630 <HAL_RCC_OscConfig+0xa6c>
 80015f8:	46020c00 	.word	0x46020c00
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001604:	d30a      	bcc.n	800161c <HAL_RCC_OscConfig+0xa58>
 8001606:	4ba1      	ldr	r3, [pc, #644]	; (800188c <HAL_RCC_OscConfig+0xcc8>)
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a1b      	ldr	r3, [r3, #32]
 8001612:	029b      	lsls	r3, r3, #10
 8001614:	499d      	ldr	r1, [pc, #628]	; (800188c <HAL_RCC_OscConfig+0xcc8>)
 8001616:	4313      	orrs	r3, r2
 8001618:	60cb      	str	r3, [r1, #12]
 800161a:	e009      	b.n	8001630 <HAL_RCC_OscConfig+0xa6c>
 800161c:	4b9b      	ldr	r3, [pc, #620]	; (800188c <HAL_RCC_OscConfig+0xcc8>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a1b      	ldr	r3, [r3, #32]
 8001628:	03db      	lsls	r3, r3, #15
 800162a:	4998      	ldr	r1, [pc, #608]	; (800188c <HAL_RCC_OscConfig+0xcc8>)
 800162c:	4313      	orrs	r3, r2
 800162e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8001630:	4b96      	ldr	r3, [pc, #600]	; (800188c <HAL_RCC_OscConfig+0xcc8>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a95      	ldr	r2, [pc, #596]	; (800188c <HAL_RCC_OscConfig+0xcc8>)
 8001636:	f043 0310 	orr.w	r3, r3, #16
 800163a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800163c:	f7ff f8a8 	bl	8000790 <HAL_GetTick>
 8001640:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8001644:	f7ff f8a4 	bl	8000790 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e18b      	b.n	800196e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8001656:	4b8d      	ldr	r3, [pc, #564]	; (800188c <HAL_RCC_OscConfig+0xcc8>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0320 	and.w	r3, r3, #32
 800165e:	2b00      	cmp	r3, #0
 8001660:	d0f0      	beq.n	8001644 <HAL_RCC_OscConfig+0xa80>
 8001662:	e018      	b.n	8001696 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8001664:	4b89      	ldr	r3, [pc, #548]	; (800188c <HAL_RCC_OscConfig+0xcc8>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a88      	ldr	r2, [pc, #544]	; (800188c <HAL_RCC_OscConfig+0xcc8>)
 800166a:	f023 0310 	bic.w	r3, r3, #16
 800166e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001670:	f7ff f88e 	bl	8000790 <HAL_GetTick>
 8001674:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8001678:	f7ff f88a 	bl	8000790 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e171      	b.n	800196e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800168a:	4b80      	ldr	r3, [pc, #512]	; (800188c <HAL_RCC_OscConfig+0xcc8>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0320 	and.w	r3, r3, #32
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f0      	bne.n	8001678 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800169a:	2b00      	cmp	r3, #0
 800169c:	f000 8166 	beq.w	800196c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80016a0:	2300      	movs	r3, #0
 80016a2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016a6:	4b79      	ldr	r3, [pc, #484]	; (800188c <HAL_RCC_OscConfig+0xcc8>)
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	f003 030c 	and.w	r3, r3, #12
 80016ae:	2b0c      	cmp	r3, #12
 80016b0:	f000 80f2 	beq.w	8001898 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	f040 80c5 	bne.w	8001848 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80016be:	4b73      	ldr	r3, [pc, #460]	; (800188c <HAL_RCC_OscConfig+0xcc8>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a72      	ldr	r2, [pc, #456]	; (800188c <HAL_RCC_OscConfig+0xcc8>)
 80016c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016c8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80016ca:	f7ff f861 	bl	8000790 <HAL_GetTick>
 80016ce:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d2:	f7ff f85d 	bl	8000790 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e144      	b.n	800196e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80016e4:	4b69      	ldr	r3, [pc, #420]	; (800188c <HAL_RCC_OscConfig+0xcc8>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1f0      	bne.n	80016d2 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016f0:	4b66      	ldr	r3, [pc, #408]	; (800188c <HAL_RCC_OscConfig+0xcc8>)
 80016f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016f6:	f003 0304 	and.w	r3, r3, #4
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d111      	bne.n	8001722 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80016fe:	4b63      	ldr	r3, [pc, #396]	; (800188c <HAL_RCC_OscConfig+0xcc8>)
 8001700:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001704:	4a61      	ldr	r2, [pc, #388]	; (800188c <HAL_RCC_OscConfig+0xcc8>)
 8001706:	f043 0304 	orr.w	r3, r3, #4
 800170a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800170e:	4b5f      	ldr	r3, [pc, #380]	; (800188c <HAL_RCC_OscConfig+0xcc8>)
 8001710:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800171c:	2301      	movs	r3, #1
 800171e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8001722:	4b5b      	ldr	r3, [pc, #364]	; (8001890 <HAL_RCC_OscConfig+0xccc>)
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800172a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800172e:	d102      	bne.n	8001736 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8001730:	2301      	movs	r3, #1
 8001732:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001736:	4b56      	ldr	r3, [pc, #344]	; (8001890 <HAL_RCC_OscConfig+0xccc>)
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	4a55      	ldr	r2, [pc, #340]	; (8001890 <HAL_RCC_OscConfig+0xccc>)
 800173c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001740:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8001742:	4b52      	ldr	r3, [pc, #328]	; (800188c <HAL_RCC_OscConfig+0xcc8>)
 8001744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001746:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800174a:	f023 0303 	bic.w	r3, r3, #3
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001756:	3a01      	subs	r2, #1
 8001758:	0212      	lsls	r2, r2, #8
 800175a:	4311      	orrs	r1, r2
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001760:	430a      	orrs	r2, r1
 8001762:	494a      	ldr	r1, [pc, #296]	; (800188c <HAL_RCC_OscConfig+0xcc8>)
 8001764:	4313      	orrs	r3, r2
 8001766:	628b      	str	r3, [r1, #40]	; 0x28
 8001768:	4b48      	ldr	r3, [pc, #288]	; (800188c <HAL_RCC_OscConfig+0xcc8>)
 800176a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800176c:	4b49      	ldr	r3, [pc, #292]	; (8001894 <HAL_RCC_OscConfig+0xcd0>)
 800176e:	4013      	ands	r3, r2
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001774:	3a01      	subs	r2, #1
 8001776:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800177e:	3a01      	subs	r2, #1
 8001780:	0252      	lsls	r2, r2, #9
 8001782:	b292      	uxth	r2, r2
 8001784:	4311      	orrs	r1, r2
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800178a:	3a01      	subs	r2, #1
 800178c:	0412      	lsls	r2, r2, #16
 800178e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001792:	4311      	orrs	r1, r2
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001798:	3a01      	subs	r2, #1
 800179a:	0612      	lsls	r2, r2, #24
 800179c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80017a0:	430a      	orrs	r2, r1
 80017a2:	493a      	ldr	r1, [pc, #232]	; (800188c <HAL_RCC_OscConfig+0xcc8>)
 80017a4:	4313      	orrs	r3, r2
 80017a6:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80017a8:	4b38      	ldr	r3, [pc, #224]	; (800188c <HAL_RCC_OscConfig+0xcc8>)
 80017aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ac:	4a37      	ldr	r2, [pc, #220]	; (800188c <HAL_RCC_OscConfig+0xcc8>)
 80017ae:	f023 0310 	bic.w	r3, r3, #16
 80017b2:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b8:	4a34      	ldr	r2, [pc, #208]	; (800188c <HAL_RCC_OscConfig+0xcc8>)
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80017be:	4b33      	ldr	r3, [pc, #204]	; (800188c <HAL_RCC_OscConfig+0xcc8>)
 80017c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c2:	4a32      	ldr	r2, [pc, #200]	; (800188c <HAL_RCC_OscConfig+0xcc8>)
 80017c4:	f043 0310 	orr.w	r3, r3, #16
 80017c8:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80017ca:	4b30      	ldr	r3, [pc, #192]	; (800188c <HAL_RCC_OscConfig+0xcc8>)
 80017cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ce:	f023 020c 	bic.w	r2, r3, #12
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d6:	492d      	ldr	r1, [pc, #180]	; (800188c <HAL_RCC_OscConfig+0xcc8>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 80017dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d105      	bne.n	80017f0 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80017e4:	4b2a      	ldr	r3, [pc, #168]	; (8001890 <HAL_RCC_OscConfig+0xccc>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	4a29      	ldr	r2, [pc, #164]	; (8001890 <HAL_RCC_OscConfig+0xccc>)
 80017ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017ee:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80017f0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d107      	bne.n	8001808 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80017f8:	4b24      	ldr	r3, [pc, #144]	; (800188c <HAL_RCC_OscConfig+0xcc8>)
 80017fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017fe:	4a23      	ldr	r2, [pc, #140]	; (800188c <HAL_RCC_OscConfig+0xcc8>)
 8001800:	f023 0304 	bic.w	r3, r3, #4
 8001804:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001808:	4b20      	ldr	r3, [pc, #128]	; (800188c <HAL_RCC_OscConfig+0xcc8>)
 800180a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180c:	4a1f      	ldr	r2, [pc, #124]	; (800188c <HAL_RCC_OscConfig+0xcc8>)
 800180e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001812:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8001814:	4b1d      	ldr	r3, [pc, #116]	; (800188c <HAL_RCC_OscConfig+0xcc8>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a1c      	ldr	r2, [pc, #112]	; (800188c <HAL_RCC_OscConfig+0xcc8>)
 800181a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800181e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001820:	f7fe ffb6 	bl	8000790 <HAL_GetTick>
 8001824:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001828:	f7fe ffb2 	bl	8000790 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e099      	b.n	800196e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800183a:	4b14      	ldr	r3, [pc, #80]	; (800188c <HAL_RCC_OscConfig+0xcc8>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0f0      	beq.n	8001828 <HAL_RCC_OscConfig+0xc64>
 8001846:	e091      	b.n	800196c <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8001848:	4b10      	ldr	r3, [pc, #64]	; (800188c <HAL_RCC_OscConfig+0xcc8>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a0f      	ldr	r2, [pc, #60]	; (800188c <HAL_RCC_OscConfig+0xcc8>)
 800184e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001852:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001854:	f7fe ff9c 	bl	8000790 <HAL_GetTick>
 8001858:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800185c:	f7fe ff98 	bl	8000790 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e07f      	b.n	800196e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800186e:	4b07      	ldr	r3, [pc, #28]	; (800188c <HAL_RCC_OscConfig+0xcc8>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1f0      	bne.n	800185c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800187a:	4b04      	ldr	r3, [pc, #16]	; (800188c <HAL_RCC_OscConfig+0xcc8>)
 800187c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187e:	4a03      	ldr	r2, [pc, #12]	; (800188c <HAL_RCC_OscConfig+0xcc8>)
 8001880:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8001884:	f023 0303 	bic.w	r3, r3, #3
 8001888:	6293      	str	r3, [r2, #40]	; 0x28
 800188a:	e06f      	b.n	800196c <HAL_RCC_OscConfig+0xda8>
 800188c:	46020c00 	.word	0x46020c00
 8001890:	46020800 	.word	0x46020800
 8001894:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8001898:	4b37      	ldr	r3, [pc, #220]	; (8001978 <HAL_RCC_OscConfig+0xdb4>)
 800189a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800189e:	4b36      	ldr	r3, [pc, #216]	; (8001978 <HAL_RCC_OscConfig+0xdb4>)
 80018a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018a2:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d039      	beq.n	8001920 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f003 0203 	and.w	r2, r3, #3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d132      	bne.n	8001920 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	0a1b      	lsrs	r3, r3, #8
 80018be:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d129      	bne.n	8001920 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d122      	bne.n	8001920 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018e4:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d11a      	bne.n	8001920 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	0a5b      	lsrs	r3, r3, #9
 80018ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d111      	bne.n	8001920 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	0c1b      	lsrs	r3, r3, #16
 8001900:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001908:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800190a:	429a      	cmp	r2, r3
 800190c:	d108      	bne.n	8001920 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	0e1b      	lsrs	r3, r3, #24
 8001912:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800191a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800191c:	429a      	cmp	r2, r3
 800191e:	d001      	beq.n	8001924 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e024      	b.n	800196e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001924:	4b14      	ldr	r3, [pc, #80]	; (8001978 <HAL_RCC_OscConfig+0xdb4>)
 8001926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001928:	08db      	lsrs	r3, r3, #3
 800192a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001932:	429a      	cmp	r2, r3
 8001934:	d01a      	beq.n	800196c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8001936:	4b10      	ldr	r3, [pc, #64]	; (8001978 <HAL_RCC_OscConfig+0xdb4>)
 8001938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193a:	4a0f      	ldr	r2, [pc, #60]	; (8001978 <HAL_RCC_OscConfig+0xdb4>)
 800193c:	f023 0310 	bic.w	r3, r3, #16
 8001940:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001942:	f7fe ff25 	bl	8000790 <HAL_GetTick>
 8001946:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8001948:	bf00      	nop
 800194a:	f7fe ff21 	bl	8000790 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001952:	4293      	cmp	r3, r2
 8001954:	d0f9      	beq.n	800194a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800195a:	4a07      	ldr	r2, [pc, #28]	; (8001978 <HAL_RCC_OscConfig+0xdb4>)
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8001960:	4b05      	ldr	r3, [pc, #20]	; (8001978 <HAL_RCC_OscConfig+0xdb4>)
 8001962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001964:	4a04      	ldr	r2, [pc, #16]	; (8001978 <HAL_RCC_OscConfig+0xdb4>)
 8001966:	f043 0310 	orr.w	r3, r3, #16
 800196a:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3738      	adds	r7, #56	; 0x38
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	46020c00 	.word	0x46020c00

0800197c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d101      	bne.n	8001990 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e1d9      	b.n	8001d44 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001990:	4b9b      	ldr	r3, [pc, #620]	; (8001c00 <HAL_RCC_ClockConfig+0x284>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 030f 	and.w	r3, r3, #15
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	429a      	cmp	r2, r3
 800199c:	d910      	bls.n	80019c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800199e:	4b98      	ldr	r3, [pc, #608]	; (8001c00 <HAL_RCC_ClockConfig+0x284>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f023 020f 	bic.w	r2, r3, #15
 80019a6:	4996      	ldr	r1, [pc, #600]	; (8001c00 <HAL_RCC_ClockConfig+0x284>)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ae:	4b94      	ldr	r3, [pc, #592]	; (8001c00 <HAL_RCC_ClockConfig+0x284>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d001      	beq.n	80019c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e1c1      	b.n	8001d44 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0310 	and.w	r3, r3, #16
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d010      	beq.n	80019ee <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	695a      	ldr	r2, [r3, #20]
 80019d0:	4b8c      	ldr	r3, [pc, #560]	; (8001c04 <HAL_RCC_ClockConfig+0x288>)
 80019d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80019d8:	429a      	cmp	r2, r3
 80019da:	d908      	bls.n	80019ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80019dc:	4b89      	ldr	r3, [pc, #548]	; (8001c04 <HAL_RCC_ClockConfig+0x288>)
 80019de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	695b      	ldr	r3, [r3, #20]
 80019e8:	4986      	ldr	r1, [pc, #536]	; (8001c04 <HAL_RCC_ClockConfig+0x288>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0308 	and.w	r3, r3, #8
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d012      	beq.n	8001a20 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	691a      	ldr	r2, [r3, #16]
 80019fe:	4b81      	ldr	r3, [pc, #516]	; (8001c04 <HAL_RCC_ClockConfig+0x288>)
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	091b      	lsrs	r3, r3, #4
 8001a04:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d909      	bls.n	8001a20 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8001a0c:	4b7d      	ldr	r3, [pc, #500]	; (8001c04 <HAL_RCC_ClockConfig+0x288>)
 8001a0e:	6a1b      	ldr	r3, [r3, #32]
 8001a10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	011b      	lsls	r3, r3, #4
 8001a1a:	497a      	ldr	r1, [pc, #488]	; (8001c04 <HAL_RCC_ClockConfig+0x288>)
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d010      	beq.n	8001a4e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	68da      	ldr	r2, [r3, #12]
 8001a30:	4b74      	ldr	r3, [pc, #464]	; (8001c04 <HAL_RCC_ClockConfig+0x288>)
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d908      	bls.n	8001a4e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8001a3c:	4b71      	ldr	r3, [pc, #452]	; (8001c04 <HAL_RCC_ClockConfig+0x288>)
 8001a3e:	6a1b      	ldr	r3, [r3, #32]
 8001a40:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	496e      	ldr	r1, [pc, #440]	; (8001c04 <HAL_RCC_ClockConfig+0x288>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d010      	beq.n	8001a7c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	4b69      	ldr	r3, [pc, #420]	; (8001c04 <HAL_RCC_ClockConfig+0x288>)
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d908      	bls.n	8001a7c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8001a6a:	4b66      	ldr	r3, [pc, #408]	; (8001c04 <HAL_RCC_ClockConfig+0x288>)
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
 8001a6e:	f023 020f 	bic.w	r2, r3, #15
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	4963      	ldr	r1, [pc, #396]	; (8001c04 <HAL_RCC_ClockConfig+0x288>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f000 80d2 	beq.w	8001c2e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b03      	cmp	r3, #3
 8001a94:	d143      	bne.n	8001b1e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a96:	4b5b      	ldr	r3, [pc, #364]	; (8001c04 <HAL_RCC_ClockConfig+0x288>)
 8001a98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d110      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001aa4:	4b57      	ldr	r3, [pc, #348]	; (8001c04 <HAL_RCC_ClockConfig+0x288>)
 8001aa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aaa:	4a56      	ldr	r2, [pc, #344]	; (8001c04 <HAL_RCC_ClockConfig+0x288>)
 8001aac:	f043 0304 	orr.w	r3, r3, #4
 8001ab0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001ab4:	4b53      	ldr	r3, [pc, #332]	; (8001c04 <HAL_RCC_ClockConfig+0x288>)
 8001ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aba:	f003 0304 	and.w	r3, r3, #4
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8001ac6:	f7fe fe63 	bl	8000790 <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8001acc:	4b4e      	ldr	r3, [pc, #312]	; (8001c08 <HAL_RCC_ClockConfig+0x28c>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d00f      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8001ada:	f7fe fe59 	bl	8000790 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e12b      	b.n	8001d44 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8001aec:	4b46      	ldr	r3, [pc, #280]	; (8001c08 <HAL_RCC_ClockConfig+0x28c>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d0f0      	beq.n	8001ada <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001af8:	7dfb      	ldrb	r3, [r7, #23]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d107      	bne.n	8001b0e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001afe:	4b41      	ldr	r3, [pc, #260]	; (8001c04 <HAL_RCC_ClockConfig+0x288>)
 8001b00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b04:	4a3f      	ldr	r2, [pc, #252]	; (8001c04 <HAL_RCC_ClockConfig+0x288>)
 8001b06:	f023 0304 	bic.w	r3, r3, #4
 8001b0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001b0e:	4b3d      	ldr	r3, [pc, #244]	; (8001c04 <HAL_RCC_ClockConfig+0x288>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d121      	bne.n	8001b5e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e112      	b.n	8001d44 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d107      	bne.n	8001b36 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b26:	4b37      	ldr	r3, [pc, #220]	; (8001c04 <HAL_RCC_ClockConfig+0x288>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d115      	bne.n	8001b5e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e106      	b.n	8001d44 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d107      	bne.n	8001b4e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001b3e:	4b31      	ldr	r3, [pc, #196]	; (8001c04 <HAL_RCC_ClockConfig+0x288>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0304 	and.w	r3, r3, #4
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d109      	bne.n	8001b5e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e0fa      	b.n	8001d44 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b4e:	4b2d      	ldr	r3, [pc, #180]	; (8001c04 <HAL_RCC_ClockConfig+0x288>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e0f2      	b.n	8001d44 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8001b5e:	4b29      	ldr	r3, [pc, #164]	; (8001c04 <HAL_RCC_ClockConfig+0x288>)
 8001b60:	69db      	ldr	r3, [r3, #28]
 8001b62:	f023 0203 	bic.w	r2, r3, #3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	4926      	ldr	r1, [pc, #152]	; (8001c04 <HAL_RCC_ClockConfig+0x288>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8001b70:	f7fe fe0e 	bl	8000790 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b03      	cmp	r3, #3
 8001b7c:	d112      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b7e:	e00a      	b.n	8001b96 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b80:	f7fe fe06 	bl	8000790 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e0d6      	b.n	8001d44 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b96:	4b1b      	ldr	r3, [pc, #108]	; (8001c04 <HAL_RCC_ClockConfig+0x288>)
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	f003 030c 	and.w	r3, r3, #12
 8001b9e:	2b0c      	cmp	r3, #12
 8001ba0:	d1ee      	bne.n	8001b80 <HAL_RCC_ClockConfig+0x204>
 8001ba2:	e044      	b.n	8001c2e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d112      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bac:	e00a      	b.n	8001bc4 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bae:	f7fe fdef 	bl	8000790 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e0bf      	b.n	8001d44 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bc4:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <HAL_RCC_ClockConfig+0x288>)
 8001bc6:	69db      	ldr	r3, [r3, #28]
 8001bc8:	f003 030c 	and.w	r3, r3, #12
 8001bcc:	2b08      	cmp	r3, #8
 8001bce:	d1ee      	bne.n	8001bae <HAL_RCC_ClockConfig+0x232>
 8001bd0:	e02d      	b.n	8001c2e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d123      	bne.n	8001c22 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001bda:	e00a      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bdc:	f7fe fdd8 	bl	8000790 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e0a8      	b.n	8001d44 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001bf2:	4b04      	ldr	r3, [pc, #16]	; (8001c04 <HAL_RCC_ClockConfig+0x288>)
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	f003 030c 	and.w	r3, r3, #12
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1ee      	bne.n	8001bdc <HAL_RCC_ClockConfig+0x260>
 8001bfe:	e016      	b.n	8001c2e <HAL_RCC_ClockConfig+0x2b2>
 8001c00:	40022000 	.word	0x40022000
 8001c04:	46020c00 	.word	0x46020c00
 8001c08:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c0c:	f7fe fdc0 	bl	8000790 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e090      	b.n	8001d44 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c22:	4b4a      	ldr	r3, [pc, #296]	; (8001d4c <HAL_RCC_ClockConfig+0x3d0>)
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	f003 030c 	and.w	r3, r3, #12
 8001c2a:	2b04      	cmp	r3, #4
 8001c2c:	d1ee      	bne.n	8001c0c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d010      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	689a      	ldr	r2, [r3, #8]
 8001c3e:	4b43      	ldr	r3, [pc, #268]	; (8001d4c <HAL_RCC_ClockConfig+0x3d0>)
 8001c40:	6a1b      	ldr	r3, [r3, #32]
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d208      	bcs.n	8001c5c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8001c4a:	4b40      	ldr	r3, [pc, #256]	; (8001d4c <HAL_RCC_ClockConfig+0x3d0>)
 8001c4c:	6a1b      	ldr	r3, [r3, #32]
 8001c4e:	f023 020f 	bic.w	r2, r3, #15
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	493d      	ldr	r1, [pc, #244]	; (8001d4c <HAL_RCC_ClockConfig+0x3d0>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c5c:	4b3c      	ldr	r3, [pc, #240]	; (8001d50 <HAL_RCC_ClockConfig+0x3d4>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 030f 	and.w	r3, r3, #15
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d210      	bcs.n	8001c8c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6a:	4b39      	ldr	r3, [pc, #228]	; (8001d50 <HAL_RCC_ClockConfig+0x3d4>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f023 020f 	bic.w	r2, r3, #15
 8001c72:	4937      	ldr	r1, [pc, #220]	; (8001d50 <HAL_RCC_ClockConfig+0x3d4>)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c7a:	4b35      	ldr	r3, [pc, #212]	; (8001d50 <HAL_RCC_ClockConfig+0x3d4>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d001      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e05b      	b.n	8001d44 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d010      	beq.n	8001cba <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68da      	ldr	r2, [r3, #12]
 8001c9c:	4b2b      	ldr	r3, [pc, #172]	; (8001d4c <HAL_RCC_ClockConfig+0x3d0>)
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d208      	bcs.n	8001cba <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8001ca8:	4b28      	ldr	r3, [pc, #160]	; (8001d4c <HAL_RCC_ClockConfig+0x3d0>)
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	4925      	ldr	r1, [pc, #148]	; (8001d4c <HAL_RCC_ClockConfig+0x3d0>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0308 	and.w	r3, r3, #8
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d012      	beq.n	8001cec <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	691a      	ldr	r2, [r3, #16]
 8001cca:	4b20      	ldr	r3, [pc, #128]	; (8001d4c <HAL_RCC_ClockConfig+0x3d0>)
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	091b      	lsrs	r3, r3, #4
 8001cd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d209      	bcs.n	8001cec <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8001cd8:	4b1c      	ldr	r3, [pc, #112]	; (8001d4c <HAL_RCC_ClockConfig+0x3d0>)
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	011b      	lsls	r3, r3, #4
 8001ce6:	4919      	ldr	r1, [pc, #100]	; (8001d4c <HAL_RCC_ClockConfig+0x3d0>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0310 	and.w	r3, r3, #16
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d010      	beq.n	8001d1a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	695a      	ldr	r2, [r3, #20]
 8001cfc:	4b13      	ldr	r3, [pc, #76]	; (8001d4c <HAL_RCC_ClockConfig+0x3d0>)
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d208      	bcs.n	8001d1a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8001d08:	4b10      	ldr	r3, [pc, #64]	; (8001d4c <HAL_RCC_ClockConfig+0x3d0>)
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	695b      	ldr	r3, [r3, #20]
 8001d14:	490d      	ldr	r1, [pc, #52]	; (8001d4c <HAL_RCC_ClockConfig+0x3d0>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001d1a:	f000 f821 	bl	8001d60 <HAL_RCC_GetSysClockFreq>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <HAL_RCC_ClockConfig+0x3d0>)
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	f003 030f 	and.w	r3, r3, #15
 8001d28:	490a      	ldr	r1, [pc, #40]	; (8001d54 <HAL_RCC_ClockConfig+0x3d8>)
 8001d2a:	5ccb      	ldrb	r3, [r1, r3]
 8001d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d30:	4a09      	ldr	r2, [pc, #36]	; (8001d58 <HAL_RCC_ClockConfig+0x3dc>)
 8001d32:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d34:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <HAL_RCC_ClockConfig+0x3e0>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7fe fcdf 	bl	80006fc <HAL_InitTick>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	73fb      	strb	r3, [r7, #15]

  return status;
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	46020c00 	.word	0x46020c00
 8001d50:	40022000 	.word	0x40022000
 8001d54:	08002114 	.word	0x08002114
 8001d58:	20000000 	.word	0x20000000
 8001d5c:	20000004 	.word	0x20000004

08001d60 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b08b      	sub	sp, #44	; 0x2c
 8001d64:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8001d66:	2300      	movs	r3, #0
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d6e:	4b78      	ldr	r3, [pc, #480]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	f003 030c 	and.w	r3, r3, #12
 8001d76:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d78:	4b75      	ldr	r3, [pc, #468]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7c:	f003 0303 	and.w	r3, r3, #3
 8001d80:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d005      	beq.n	8001d94 <HAL_RCC_GetSysClockFreq+0x34>
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	2b0c      	cmp	r3, #12
 8001d8c:	d121      	bne.n	8001dd2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d11e      	bne.n	8001dd2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8001d94:	4b6e      	ldr	r3, [pc, #440]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d107      	bne.n	8001db0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8001da0:	4b6b      	ldr	r3, [pc, #428]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001da2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001da6:	0b1b      	lsrs	r3, r3, #12
 8001da8:	f003 030f 	and.w	r3, r3, #15
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
 8001dae:	e005      	b.n	8001dbc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8001db0:	4b67      	ldr	r3, [pc, #412]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	0f1b      	lsrs	r3, r3, #28
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001dbc:	4a65      	ldr	r2, [pc, #404]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc4:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d110      	bne.n	8001dee <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dce:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001dd0:	e00d      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dd2:	4b5f      	ldr	r3, [pc, #380]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	f003 030c 	and.w	r3, r3, #12
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	d102      	bne.n	8001de4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001dde:	4b5e      	ldr	r3, [pc, #376]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8001de0:	623b      	str	r3, [r7, #32]
 8001de2:	e004      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	2b08      	cmp	r3, #8
 8001de8:	d101      	bne.n	8001dee <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001dea:	4b5b      	ldr	r3, [pc, #364]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8001dec:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	2b0c      	cmp	r3, #12
 8001df2:	f040 80a5 	bne.w	8001f40 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8001df6:	4b56      	ldr	r3, [pc, #344]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8001e00:	4b53      	ldr	r3, [pc, #332]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e04:	0a1b      	lsrs	r3, r3, #8
 8001e06:	f003 030f 	and.w	r3, r3, #15
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8001e0e:	4b50      	ldr	r3, [pc, #320]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e12:	091b      	lsrs	r3, r3, #4
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8001e1a:	4b4d      	ldr	r3, [pc, #308]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e1e:	08db      	lsrs	r3, r3, #3
 8001e20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e24:	68ba      	ldr	r2, [r7, #8]
 8001e26:	fb02 f303 	mul.w	r3, r2, r3
 8001e2a:	ee07 3a90 	vmov	s15, r3
 8001e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e32:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d003      	beq.n	8001e44 <HAL_RCC_GetSysClockFreq+0xe4>
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	2b03      	cmp	r3, #3
 8001e40:	d022      	beq.n	8001e88 <HAL_RCC_GetSysClockFreq+0x128>
 8001e42:	e043      	b.n	8001ecc <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	ee07 3a90 	vmov	s15, r3
 8001e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e4e:	eddf 6a43 	vldr	s13, [pc, #268]	; 8001f5c <HAL_RCC_GetSysClockFreq+0x1fc>
 8001e52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e56:	4b3e      	ldr	r3, [pc, #248]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e5e:	ee07 3a90 	vmov	s15, r3
 8001e62:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001e66:	ed97 6a01 	vldr	s12, [r7, #4]
 8001e6a:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8001f60 <HAL_RCC_GetSysClockFreq+0x200>
 8001e6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001e72:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001e76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001e86:	e046      	b.n	8001f16 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	ee07 3a90 	vmov	s15, r3
 8001e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e92:	eddf 6a32 	vldr	s13, [pc, #200]	; 8001f5c <HAL_RCC_GetSysClockFreq+0x1fc>
 8001e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e9a:	4b2d      	ldr	r3, [pc, #180]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ea2:	ee07 3a90 	vmov	s15, r3
 8001ea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001eaa:	ed97 6a01 	vldr	s12, [r7, #4]
 8001eae:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8001f60 <HAL_RCC_GetSysClockFreq+0x200>
 8001eb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001eb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001eba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ec6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001eca:	e024      	b.n	8001f16 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ece:	ee07 3a90 	vmov	s15, r3
 8001ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	ee07 3a90 	vmov	s15, r3
 8001edc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ee0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ee4:	4b1a      	ldr	r3, [pc, #104]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eec:	ee07 3a90 	vmov	s15, r3
 8001ef0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001ef4:	ed97 6a01 	vldr	s12, [r7, #4]
 8001ef8:	eddf 5a19 	vldr	s11, [pc, #100]	; 8001f60 <HAL_RCC_GetSysClockFreq+0x200>
 8001efc:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001f00:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001f04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f08:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f10:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f14:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8001f16:	4b0e      	ldr	r3, [pc, #56]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f1a:	0e1b      	lsrs	r3, r3, #24
 8001f1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f20:	3301      	adds	r3, #1
 8001f22:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	ee07 3a90 	vmov	s15, r3
 8001f2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8001f32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f3a:	ee17 3a90 	vmov	r3, s15
 8001f3e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8001f40:	6a3b      	ldr	r3, [r7, #32]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	372c      	adds	r7, #44	; 0x2c
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	46020c00 	.word	0x46020c00
 8001f54:	08002124 	.word	0x08002124
 8001f58:	00f42400 	.word	0x00f42400
 8001f5c:	4b742400 	.word	0x4b742400
 8001f60:	46000000 	.word	0x46000000

08001f64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001f68:	f7ff fefa 	bl	8001d60 <HAL_RCC_GetSysClockFreq>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	4b07      	ldr	r3, [pc, #28]	; (8001f8c <HAL_RCC_GetHCLKFreq+0x28>)
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	4906      	ldr	r1, [pc, #24]	; (8001f90 <HAL_RCC_GetHCLKFreq+0x2c>)
 8001f78:	5ccb      	ldrb	r3, [r1, r3]
 8001f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f7e:	4a05      	ldr	r2, [pc, #20]	; (8001f94 <HAL_RCC_GetHCLKFreq+0x30>)
 8001f80:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8001f82:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <HAL_RCC_GetHCLKFreq+0x30>)
 8001f84:	681b      	ldr	r3, [r3, #0]
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	46020c00 	.word	0x46020c00
 8001f90:	08002114 	.word	0x08002114
 8001f94:	20000000 	.word	0x20000000

08001f98 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001fa0:	4b3e      	ldr	r3, [pc, #248]	; (800209c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8001fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fa6:	f003 0304 	and.w	r3, r3, #4
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001fae:	f7fe fddb 	bl	8000b68 <HAL_PWREx_GetVoltageRange>
 8001fb2:	6178      	str	r0, [r7, #20]
 8001fb4:	e019      	b.n	8001fea <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fb6:	4b39      	ldr	r3, [pc, #228]	; (800209c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8001fb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fbc:	4a37      	ldr	r2, [pc, #220]	; (800209c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8001fbe:	f043 0304 	orr.w	r3, r3, #4
 8001fc2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001fc6:	4b35      	ldr	r3, [pc, #212]	; (800209c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8001fc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001fd4:	f7fe fdc8 	bl	8000b68 <HAL_PWREx_GetVoltageRange>
 8001fd8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001fda:	4b30      	ldr	r3, [pc, #192]	; (800209c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8001fdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fe0:	4a2e      	ldr	r2, [pc, #184]	; (800209c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8001fe2:	f023 0304 	bic.w	r3, r3, #4
 8001fe6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001ff0:	d003      	beq.n	8001ffa <RCC_SetFlashLatencyFromMSIRange+0x62>
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ff8:	d109      	bne.n	800200e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002000:	d202      	bcs.n	8002008 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8002002:	2301      	movs	r3, #1
 8002004:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002006:	e033      	b.n	8002070 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8002008:	2300      	movs	r3, #0
 800200a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800200c:	e030      	b.n	8002070 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002014:	d208      	bcs.n	8002028 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800201c:	d102      	bne.n	8002024 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800201e:	2303      	movs	r3, #3
 8002020:	613b      	str	r3, [r7, #16]
 8002022:	e025      	b.n	8002070 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e035      	b.n	8002094 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800202e:	d90f      	bls.n	8002050 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d109      	bne.n	800204a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800203c:	d902      	bls.n	8002044 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800203e:	2300      	movs	r3, #0
 8002040:	613b      	str	r3, [r7, #16]
 8002042:	e015      	b.n	8002070 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8002044:	2301      	movs	r3, #1
 8002046:	613b      	str	r3, [r7, #16]
 8002048:	e012      	b.n	8002070 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800204a:	2300      	movs	r3, #0
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	e00f      	b.n	8002070 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002056:	d109      	bne.n	800206c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800205e:	d102      	bne.n	8002066 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8002060:	2301      	movs	r3, #1
 8002062:	613b      	str	r3, [r7, #16]
 8002064:	e004      	b.n	8002070 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8002066:	2302      	movs	r3, #2
 8002068:	613b      	str	r3, [r7, #16]
 800206a:	e001      	b.n	8002070 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800206c:	2301      	movs	r3, #1
 800206e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002070:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f023 020f 	bic.w	r2, r3, #15
 8002078:	4909      	ldr	r1, [pc, #36]	; (80020a0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	4313      	orrs	r3, r2
 800207e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002080:	4b07      	ldr	r3, [pc, #28]	; (80020a0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 030f 	and.w	r3, r3, #15
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	429a      	cmp	r2, r3
 800208c:	d001      	beq.n	8002092 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	46020c00 	.word	0x46020c00
 80020a0:	40022000 	.word	0x40022000

080020a4 <memset>:
 80020a4:	4402      	add	r2, r0
 80020a6:	4603      	mov	r3, r0
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d100      	bne.n	80020ae <memset+0xa>
 80020ac:	4770      	bx	lr
 80020ae:	f803 1b01 	strb.w	r1, [r3], #1
 80020b2:	e7f9      	b.n	80020a8 <memset+0x4>

080020b4 <__libc_init_array>:
 80020b4:	b570      	push	{r4, r5, r6, lr}
 80020b6:	4d0d      	ldr	r5, [pc, #52]	; (80020ec <__libc_init_array+0x38>)
 80020b8:	2600      	movs	r6, #0
 80020ba:	4c0d      	ldr	r4, [pc, #52]	; (80020f0 <__libc_init_array+0x3c>)
 80020bc:	1b64      	subs	r4, r4, r5
 80020be:	10a4      	asrs	r4, r4, #2
 80020c0:	42a6      	cmp	r6, r4
 80020c2:	d109      	bne.n	80020d8 <__libc_init_array+0x24>
 80020c4:	4d0b      	ldr	r5, [pc, #44]	; (80020f4 <__libc_init_array+0x40>)
 80020c6:	2600      	movs	r6, #0
 80020c8:	4c0b      	ldr	r4, [pc, #44]	; (80020f8 <__libc_init_array+0x44>)
 80020ca:	f000 f817 	bl	80020fc <_init>
 80020ce:	1b64      	subs	r4, r4, r5
 80020d0:	10a4      	asrs	r4, r4, #2
 80020d2:	42a6      	cmp	r6, r4
 80020d4:	d105      	bne.n	80020e2 <__libc_init_array+0x2e>
 80020d6:	bd70      	pop	{r4, r5, r6, pc}
 80020d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80020dc:	3601      	adds	r6, #1
 80020de:	4798      	blx	r3
 80020e0:	e7ee      	b.n	80020c0 <__libc_init_array+0xc>
 80020e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80020e6:	3601      	adds	r6, #1
 80020e8:	4798      	blx	r3
 80020ea:	e7f2      	b.n	80020d2 <__libc_init_array+0x1e>
 80020ec:	08002164 	.word	0x08002164
 80020f0:	08002164 	.word	0x08002164
 80020f4:	08002164 	.word	0x08002164
 80020f8:	08002168 	.word	0x08002168

080020fc <_init>:
 80020fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020fe:	bf00      	nop
 8002100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002102:	bc08      	pop	{r3}
 8002104:	469e      	mov	lr, r3
 8002106:	4770      	bx	lr

08002108 <_fini>:
 8002108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800210a:	bf00      	nop
 800210c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800210e:	bc08      	pop	{r3}
 8002110:	469e      	mov	lr, r3
 8002112:	4770      	bx	lr
