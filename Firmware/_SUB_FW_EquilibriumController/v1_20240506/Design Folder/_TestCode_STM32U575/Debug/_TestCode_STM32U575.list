
_TestCode_STM32U575.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab90  08000238  08000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  0800adc8  0800adc8  0001adc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800aef0  0800aef0  0001aef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800aef8  0800aef8  0001aef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800aefc  0800aefc  0001aefc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000d  20000000  0800af00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002d8  20000010  0800af0d  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200002e8  0800af0d  000202e8  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0002000d  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020043  2**0
                  CONTENTS, READONLY
 11 .debug_info   00025b49  00000000  00000000  00020086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003de8  00000000  00000000  00045bcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001f40  00000000  00000000  000499b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001876  00000000  00000000  0004b8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000377b3  00000000  00000000  0004d16e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002758a  00000000  00000000  00084921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016886a  00000000  00000000  000abeab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00008920  00000000  00000000  00214718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000009a  00000000  00000000  0021d038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000010 	.word	0x20000010
 8000254:	00000000 	.word	0x00000000
 8000258:	0800adb0 	.word	0x0800adb0

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000014 	.word	0x20000014
 8000274:	0800adb0 	.word	0x0800adb0

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295
 8000288:	f04f 30ff 	movne.w	r0, #4294967295
 800028c:	f000 b982 	b.w	8000594 <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002ae:	460d      	mov	r5, r1
 80002b0:	4604      	mov	r4, r0
 80002b2:	460f      	mov	r7, r1
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d146      	bne.n	8000346 <__udivmoddi4+0x9e>
 80002b8:	428a      	cmp	r2, r1
 80002ba:	4694      	mov	ip, r2
 80002bc:	d95e      	bls.n	800037c <__udivmoddi4+0xd4>
 80002be:	fab2 f382 	clz	r3, r2
 80002c2:	b143      	cbz	r3, 80002d6 <__udivmoddi4+0x2e>
 80002c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c8:	f1c3 0220 	rsb	r2, r3, #32
 80002cc:	409f      	lsls	r7, r3
 80002ce:	409c      	lsls	r4, r3
 80002d0:	fa20 f202 	lsr.w	r2, r0, r2
 80002d4:	4317      	orrs	r7, r2
 80002d6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002da:	fa1f f58c 	uxth.w	r5, ip
 80002de:	0c22      	lsrs	r2, r4, #16
 80002e0:	fbb7 f1fe 	udiv	r1, r7, lr
 80002e4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e8:	fb01 f005 	mul.w	r0, r1, r5
 80002ec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f0:	4290      	cmp	r0, r2
 80002f2:	d908      	bls.n	8000306 <__udivmoddi4+0x5e>
 80002f4:	eb1c 0202 	adds.w	r2, ip, r2
 80002f8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002fc:	d202      	bcs.n	8000304 <__udivmoddi4+0x5c>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f200 8134 	bhi.w	800056c <__udivmoddi4+0x2c4>
 8000304:	4639      	mov	r1, r7
 8000306:	1a12      	subs	r2, r2, r0
 8000308:	b2a4      	uxth	r4, r4
 800030a:	fbb2 f0fe 	udiv	r0, r2, lr
 800030e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800031a:	42a5      	cmp	r5, r4
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x88>
 800031e:	eb1c 0404 	adds.w	r4, ip, r4
 8000322:	f100 32ff 	add.w	r2, r0, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x86>
 8000328:	42a5      	cmp	r5, r4
 800032a:	f200 8119 	bhi.w	8000560 <__udivmoddi4+0x2b8>
 800032e:	4610      	mov	r0, r2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0x9a>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xb4>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80fc 	beq.w	8000548 <__udivmoddi4+0x2a0>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d14c      	bne.n	80003fe <__udivmoddi4+0x156>
 8000364:	42ab      	cmp	r3, r5
 8000366:	f0c0 80f2 	bcc.w	800054e <__udivmoddi4+0x2a6>
 800036a:	4282      	cmp	r2, r0
 800036c:	f240 80ef 	bls.w	800054e <__udivmoddi4+0x2a6>
 8000370:	4608      	mov	r0, r1
 8000372:	2e00      	cmp	r6, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0x9a>
 8000376:	e9c6 4700 	strd	r4, r7, [r6]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0x9a>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xd8>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f382 	clz	r3, r2
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 809f 	bne.w	80004c8 <__udivmoddi4+0x220>
 800038a:	1a8a      	subs	r2, r1, r2
 800038c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000390:	fa1f f78c 	uxth.w	r7, ip
 8000394:	2101      	movs	r1, #1
 8000396:	fbb2 f5fe 	udiv	r5, r2, lr
 800039a:	fb0e 2015 	mls	r0, lr, r5, r2
 800039e:	0c22      	lsrs	r2, r4, #16
 80003a0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003a4:	fb07 f005 	mul.w	r0, r7, r5
 80003a8:	4290      	cmp	r0, r2
 80003aa:	d90f      	bls.n	80003cc <__udivmoddi4+0x124>
 80003ac:	eb1c 0202 	adds.w	r2, ip, r2
 80003b0:	f105 38ff 	add.w	r8, r5, #4294967295
 80003b4:	bf2c      	ite	cs
 80003b6:	f04f 0901 	movcs.w	r9, #1
 80003ba:	f04f 0900 	movcc.w	r9, #0
 80003be:	4290      	cmp	r0, r2
 80003c0:	d903      	bls.n	80003ca <__udivmoddi4+0x122>
 80003c2:	f1b9 0f00 	cmp.w	r9, #0
 80003c6:	f000 80ce 	beq.w	8000566 <__udivmoddi4+0x2be>
 80003ca:	4645      	mov	r5, r8
 80003cc:	1a12      	subs	r2, r2, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb2 f0fe 	udiv	r0, r2, lr
 80003d4:	fb0e 2210 	mls	r2, lr, r0, r2
 80003d8:	fb00 f707 	mul.w	r7, r0, r7
 80003dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e0:	42a7      	cmp	r7, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x14e>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x14c>
 80003ee:	42a7      	cmp	r7, r4
 80003f0:	f200 80b3 	bhi.w	800055a <__udivmoddi4+0x2b2>
 80003f4:	4610      	mov	r0, r2
 80003f6:	1be4      	subs	r4, r4, r7
 80003f8:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003fc:	e79c      	b.n	8000338 <__udivmoddi4+0x90>
 80003fe:	f1c1 0420 	rsb	r4, r1, #32
 8000402:	408b      	lsls	r3, r1
 8000404:	fa05 fc01 	lsl.w	ip, r5, r1
 8000408:	fa22 f704 	lsr.w	r7, r2, r4
 800040c:	40e5      	lsrs	r5, r4
 800040e:	408a      	lsls	r2, r1
 8000410:	431f      	orrs	r7, r3
 8000412:	fa20 f304 	lsr.w	r3, r0, r4
 8000416:	4088      	lsls	r0, r1
 8000418:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800041c:	ea43 030c 	orr.w	r3, r3, ip
 8000420:	fa1f fc87 	uxth.w	ip, r7
 8000424:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000428:	fbb5 fef8 	udiv	lr, r5, r8
 800042c:	fb08 551e 	mls	r5, r8, lr, r5
 8000430:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a9      	cmp	r9, r5
 800043a:	d90e      	bls.n	800045a <__udivmoddi4+0x1b2>
 800043c:	197d      	adds	r5, r7, r5
 800043e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000442:	bf2c      	ite	cs
 8000444:	f04f 0b01 	movcs.w	fp, #1
 8000448:	f04f 0b00 	movcc.w	fp, #0
 800044c:	45a9      	cmp	r9, r5
 800044e:	d903      	bls.n	8000458 <__udivmoddi4+0x1b0>
 8000450:	f1bb 0f00 	cmp.w	fp, #0
 8000454:	f000 808d 	beq.w	8000572 <__udivmoddi4+0x2ca>
 8000458:	46d6      	mov	lr, sl
 800045a:	eba5 0509 	sub.w	r5, r5, r9
 800045e:	fa1f f983 	uxth.w	r9, r3
 8000462:	fbb5 f3f8 	udiv	r3, r5, r8
 8000466:	fb08 5513 	mls	r5, r8, r3, r5
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000472:	45ac      	cmp	ip, r5
 8000474:	d906      	bls.n	8000484 <__udivmoddi4+0x1dc>
 8000476:	197d      	adds	r5, r7, r5
 8000478:	f103 38ff 	add.w	r8, r3, #4294967295
 800047c:	d201      	bcs.n	8000482 <__udivmoddi4+0x1da>
 800047e:	45ac      	cmp	ip, r5
 8000480:	d87e      	bhi.n	8000580 <__udivmoddi4+0x2d8>
 8000482:	4643      	mov	r3, r8
 8000484:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000488:	eba5 050c 	sub.w	r5, r5, ip
 800048c:	fba3 9802 	umull	r9, r8, r3, r2
 8000490:	4545      	cmp	r5, r8
 8000492:	46ce      	mov	lr, r9
 8000494:	46c4      	mov	ip, r8
 8000496:	d302      	bcc.n	800049e <__udivmoddi4+0x1f6>
 8000498:	d106      	bne.n	80004a8 <__udivmoddi4+0x200>
 800049a:	4548      	cmp	r0, r9
 800049c:	d204      	bcs.n	80004a8 <__udivmoddi4+0x200>
 800049e:	3b01      	subs	r3, #1
 80004a0:	ebb9 0e02 	subs.w	lr, r9, r2
 80004a4:	eb68 0c07 	sbc.w	ip, r8, r7
 80004a8:	2e00      	cmp	r6, #0
 80004aa:	d06f      	beq.n	800058c <__udivmoddi4+0x2e4>
 80004ac:	ebb0 020e 	subs.w	r2, r0, lr
 80004b0:	eb65 050c 	sbc.w	r5, r5, ip
 80004b4:	40ca      	lsrs	r2, r1
 80004b6:	fa05 f404 	lsl.w	r4, r5, r4
 80004ba:	40cd      	lsrs	r5, r1
 80004bc:	4618      	mov	r0, r3
 80004be:	4314      	orrs	r4, r2
 80004c0:	2100      	movs	r1, #0
 80004c2:	e9c6 4500 	strd	r4, r5, [r6]
 80004c6:	e73c      	b.n	8000342 <__udivmoddi4+0x9a>
 80004c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004cc:	f1c3 0220 	rsb	r2, r3, #32
 80004d0:	4099      	lsls	r1, r3
 80004d2:	409c      	lsls	r4, r3
 80004d4:	40d5      	lsrs	r5, r2
 80004d6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004da:	fa20 f202 	lsr.w	r2, r0, r2
 80004de:	fa1f f78c 	uxth.w	r7, ip
 80004e2:	fbb5 f0fe 	udiv	r0, r5, lr
 80004e6:	430a      	orrs	r2, r1
 80004e8:	fb0e 5510 	mls	r5, lr, r0, r5
 80004ec:	0c11      	lsrs	r1, r2, #16
 80004ee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004f2:	fb00 f507 	mul.w	r5, r0, r7
 80004f6:	428d      	cmp	r5, r1
 80004f8:	d90e      	bls.n	8000518 <__udivmoddi4+0x270>
 80004fa:	eb1c 0101 	adds.w	r1, ip, r1
 80004fe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000502:	bf2c      	ite	cs
 8000504:	f04f 0901 	movcs.w	r9, #1
 8000508:	f04f 0900 	movcc.w	r9, #0
 800050c:	428d      	cmp	r5, r1
 800050e:	d902      	bls.n	8000516 <__udivmoddi4+0x26e>
 8000510:	f1b9 0f00 	cmp.w	r9, #0
 8000514:	d031      	beq.n	800057a <__udivmoddi4+0x2d2>
 8000516:	4640      	mov	r0, r8
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5fe 	udiv	r5, r1, lr
 8000520:	fb0e 1115 	mls	r1, lr, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f107 	mul.w	r1, r5, r7
 800052c:	4291      	cmp	r1, r2
 800052e:	d907      	bls.n	8000540 <__udivmoddi4+0x298>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d201      	bcs.n	800053e <__udivmoddi4+0x296>
 800053a:	4291      	cmp	r1, r2
 800053c:	d823      	bhi.n	8000586 <__udivmoddi4+0x2de>
 800053e:	4645      	mov	r5, r8
 8000540:	1a52      	subs	r2, r2, r1
 8000542:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000546:	e726      	b.n	8000396 <__udivmoddi4+0xee>
 8000548:	4631      	mov	r1, r6
 800054a:	4630      	mov	r0, r6
 800054c:	e6f9      	b.n	8000342 <__udivmoddi4+0x9a>
 800054e:	1a84      	subs	r4, r0, r2
 8000550:	eb65 0203 	sbc.w	r2, r5, r3
 8000554:	2001      	movs	r0, #1
 8000556:	4617      	mov	r7, r2
 8000558:	e70b      	b.n	8000372 <__udivmoddi4+0xca>
 800055a:	4464      	add	r4, ip
 800055c:	3802      	subs	r0, #2
 800055e:	e74a      	b.n	80003f6 <__udivmoddi4+0x14e>
 8000560:	4464      	add	r4, ip
 8000562:	3802      	subs	r0, #2
 8000564:	e6e4      	b.n	8000330 <__udivmoddi4+0x88>
 8000566:	3d02      	subs	r5, #2
 8000568:	4462      	add	r2, ip
 800056a:	e72f      	b.n	80003cc <__udivmoddi4+0x124>
 800056c:	3902      	subs	r1, #2
 800056e:	4462      	add	r2, ip
 8000570:	e6c9      	b.n	8000306 <__udivmoddi4+0x5e>
 8000572:	f1ae 0e02 	sub.w	lr, lr, #2
 8000576:	443d      	add	r5, r7
 8000578:	e76f      	b.n	800045a <__udivmoddi4+0x1b2>
 800057a:	3802      	subs	r0, #2
 800057c:	4461      	add	r1, ip
 800057e:	e7cb      	b.n	8000518 <__udivmoddi4+0x270>
 8000580:	3b02      	subs	r3, #2
 8000582:	443d      	add	r5, r7
 8000584:	e77e      	b.n	8000484 <__udivmoddi4+0x1dc>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	e7d9      	b.n	8000540 <__udivmoddi4+0x298>
 800058c:	4618      	mov	r0, r3
 800058e:	4631      	mov	r1, r6
 8000590:	e6d7      	b.n	8000342 <__udivmoddi4+0x9a>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059e:	f001 fa09 	bl	80019b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a2:	f000 f85b 	bl	800065c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005a6:	f000 f8cd 	bl	8000744 <PeriphCommonClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80005aa:	f000 f8fe 	bl	80007aa <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f000 fb97 	bl	8000ce0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005b2:	f000 f911 	bl	80007d8 <MX_ADC1_Init>
  MX_DAC1_Init();
 80005b6:	f000 f953 	bl	8000860 <MX_DAC1_Init>
  MX_I2C1_Init();
 80005ba:	f000 f999 	bl	80008f0 <MX_I2C1_Init>
  MX_LPTIM1_Init();
 80005be:	f000 fa03 	bl	80009c8 <MX_LPTIM1_Init>
  MX_LPUART1_UART_Init();
 80005c2:	f000 fa33 	bl	8000a2c <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 80005c6:	f000 faf3 	bl	8000bb0 <MX_TIM2_Init>
  MX_ICACHE_Init();
 80005ca:	f000 f9d1 	bl	8000970 <MX_ICACHE_Init>
  MX_SPI1_Init();
 80005ce:	f000 fa7f 	bl	8000ad0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_LPTIM_Counter_Start_IT( &hlptim1);
 80005d2:	481c      	ldr	r0, [pc, #112]	; (8000644 <main+0xac>)
 80005d4:	f003 fa26 	bl	8003a24 <HAL_LPTIM_Counter_Start_IT>

  HAL_TIM_PWM_Start_IT( &htim2, TIM_CHANNEL_1);
 80005d8:	2100      	movs	r1, #0
 80005da:	481b      	ldr	r0, [pc, #108]	; (8000648 <main+0xb0>)
 80005dc:	f007 ff08 	bl	80083f0 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT( &htim2, TIM_CHANNEL_2);
 80005e0:	2104      	movs	r1, #4
 80005e2:	4819      	ldr	r0, [pc, #100]	; (8000648 <main+0xb0>)
 80005e4:	f007 ff04 	bl	80083f0 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT( &htim2, TIM_CHANNEL_3);
 80005e8:	2108      	movs	r1, #8
 80005ea:	4817      	ldr	r0, [pc, #92]	; (8000648 <main+0xb0>)
 80005ec:	f007 ff00 	bl	80083f0 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT( &htim2, TIM_CHANNEL_4);
 80005f0:	210c      	movs	r1, #12
 80005f2:	4815      	ldr	r0, [pc, #84]	; (8000648 <main+0xb0>)
 80005f4:	f007 fefc 	bl	80083f0 <HAL_TIM_PWM_Start_IT>

  __HAL_UART_ENABLE(&hlpuart1);
 80005f8:	4b14      	ldr	r3, [pc, #80]	; (800064c <main+0xb4>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	4b13      	ldr	r3, [pc, #76]	; (800064c <main+0xb4>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	f042 0201 	orr.w	r2, r2, #1
 8000606:	601a      	str	r2, [r3, #0]

  __HAL_I2C_ENABLE(&hi2c1);
 8000608:	4b11      	ldr	r3, [pc, #68]	; (8000650 <main+0xb8>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	4b10      	ldr	r3, [pc, #64]	; (8000650 <main+0xb8>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f042 0201 	orr.w	r2, r2, #1
 8000616:	601a      	str	r2, [r3, #0]

  __HAL_SPI_ENABLE(&hspi1);
 8000618:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <main+0xbc>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <main+0xbc>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f042 0201 	orr.w	r2, r2, #1
 8000626:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */


  while (1)
  {
	  _init_BMI160();
 8000628:	f000 fc0c 	bl	8000e44 <_init_BMI160>
	  for(uint32_t cnt = 0; cnt < 2000000; ++cnt);
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	e002      	b.n	8000638 <main+0xa0>
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	3301      	adds	r3, #1
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	4a07      	ldr	r2, [pc, #28]	; (8000658 <main+0xc0>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d9f8      	bls.n	8000632 <main+0x9a>
	  _init_BMI160();
 8000640:	e7f2      	b.n	8000628 <main+0x90>
 8000642:	bf00      	nop
 8000644:	20000120 	.word	0x20000120
 8000648:	20000294 	.word	0x20000294
 800064c:	20000170 	.word	0x20000170
 8000650:	200000cc 	.word	0x200000cc
 8000654:	20000204 	.word	0x20000204
 8000658:	001e847f 	.word	0x001e847f

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b09e      	sub	sp, #120	; 0x78
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0318 	add.w	r3, r7, #24
 8000666:	2260      	movs	r2, #96	; 0x60
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f00a fb74 	bl	800ad58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	463b      	mov	r3, r7
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	611a      	str	r2, [r3, #16]
 800067e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000680:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8000684:	f003 fc9a 	bl	8003fbc <HAL_PWREx_ControlVoltageScaling>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0x36>
  {
    Error_Handler();
 800068e:	f000 fd23 	bl	80010d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000692:	235a      	movs	r3, #90	; 0x5a
 8000694:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI|RCC_OSCILLATORTYPE_MSIK;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000696:	f44f 7380 	mov.w	r3, #256	; 0x100
 800069a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069c:	2310      	movs	r3, #16
 800069e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006a0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80006a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006a6:	2301      	movs	r3, #1
 80006a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006aa:	2310      	movs	r3, #16
 80006ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_2;
 80006ae:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80006b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIKClockRange = RCC_MSIKRANGE_4;
 80006b8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80006bc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIKState = RCC_MSIK_ON;
 80006be:	2310      	movs	r3, #16
 80006c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c2:	2302      	movs	r3, #2
 80006c4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006c6:	2301      	movs	r3, #1
 80006c8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006ce:	2304      	movs	r3, #4
 80006d0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 80006d2:	2378      	movs	r3, #120	; 0x78
 80006d4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006da:	2302      	movs	r3, #2
 80006dc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 4;
 80006de:	2304      	movs	r3, #4
 80006e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ea:	f107 0318 	add.w	r3, r7, #24
 80006ee:	4618      	mov	r0, r3
 80006f0:	f003 fd10 	bl	8004114 <HAL_RCC_OscConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80006fa:	f000 fced 	bl	80010d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fe:	231f      	movs	r3, #31
 8000700:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000702:	2303      	movs	r3, #3
 8000704:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000716:	463b      	mov	r3, r7
 8000718:	2103      	movs	r1, #3
 800071a:	4618      	mov	r0, r3
 800071c:	f004 fbd6 	bl	8004ecc <HAL_RCC_ClockConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000726:	f000 fcd7 	bl	80010d8 <Error_Handler>
  }

  /** Enable the force of MSIK in stop mode
  */
  __HAL_RCC_MSIKSTOP_ENABLE();
 800072a:	4b05      	ldr	r3, [pc, #20]	; (8000740 <SystemClock_Config+0xe4>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a04      	ldr	r2, [pc, #16]	; (8000740 <SystemClock_Config+0xe4>)
 8000730:	f043 0302 	orr.w	r3, r3, #2
 8000734:	6013      	str	r3, [r2, #0]
}
 8000736:	bf00      	nop
 8000738:	3778      	adds	r7, #120	; 0x78
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	46020c00 	.word	0x46020c00

08000744 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b0b0      	sub	sp, #192	; 0xc0
 8000748:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800074a:	463b      	mov	r3, r7
 800074c:	22c0      	movs	r2, #192	; 0xc0
 800074e:	2100      	movs	r1, #0
 8000750:	4618      	mov	r0, r3
 8000752:	f00a fb01 	bl	800ad58 <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000756:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800075a:	f04f 0300 	mov.w	r3, #0
 800075e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_PLL2;
 8000762:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000766:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_MSI;
 800076a:	2301      	movs	r3, #1
 800076c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLL2.PLL2M = 4;
 800076e:	2304      	movs	r3, #4
 8000770:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLL2.PLL2N = 120;
 8000772:	2378      	movs	r3, #120	; 0x78
 8000774:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLL2.PLL2P = 2;
 8000776:	2302      	movs	r3, #2
 8000778:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLL2.PLL2Q = 2;
 800077a:	2302      	movs	r3, #2
 800077c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLL2.PLL2R = 20;
 800077e:	2314      	movs	r3, #20
 8000780:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_0;
 8000782:	2300      	movs	r3, #0
 8000784:	623b      	str	r3, [r7, #32]
  PeriphClkInit.PLL2.PLL2FRACN = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVR;
 800078a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800078e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000790:	463b      	mov	r3, r7
 8000792:	4618      	mov	r0, r3
 8000794:	f004 ff6a 	bl	800566c <HAL_RCCEx_PeriphCLKConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <PeriphCommonClock_Config+0x5e>
  {
    Error_Handler();
 800079e:	f000 fc9b 	bl	80010d8 <Error_Handler>
  }
}
 80007a2:	bf00      	nop
 80007a4:	37c0      	adds	r7, #192	; 0xc0
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b082      	sub	sp, #8
 80007ae:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 80007b0:	f003 fc90 	bl	80040d4 <HAL_PWREx_EnableVddIO2>

  PWR_PVDTypeDef sConfigPVD = {0};
 80007b4:	463b      	mov	r3, r7
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]

  /*
   * PVD Configuration
   */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 80007bc:	2300      	movs	r3, #0
 80007be:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 80007c4:	463b      	mov	r3, r7
 80007c6:	4618      	mov	r0, r3
 80007c8:	f003 fb7a 	bl	8003ec0 <HAL_PWR_ConfigPVD>

  /*
   * Enable the PVD Output
   */
  HAL_PWR_EnablePVD();
 80007cc:	f003 fbe6 	bl	8003f9c <HAL_PWR_EnablePVD>
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007dc:	4b1e      	ldr	r3, [pc, #120]	; (8000858 <MX_ADC1_Init+0x80>)
 80007de:	4a1f      	ldr	r2, [pc, #124]	; (800085c <MX_ADC1_Init+0x84>)
 80007e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007e2:	4b1d      	ldr	r3, [pc, #116]	; (8000858 <MX_ADC1_Init+0x80>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 80007e8:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <MX_ADC1_Init+0x80>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 80007ee:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <MX_ADC1_Init+0x80>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007f4:	4b18      	ldr	r3, [pc, #96]	; (8000858 <MX_ADC1_Init+0x80>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007fa:	4b17      	ldr	r3, [pc, #92]	; (8000858 <MX_ADC1_Init+0x80>)
 80007fc:	2204      	movs	r2, #4
 80007fe:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000800:	4b15      	ldr	r3, [pc, #84]	; (8000858 <MX_ADC1_Init+0x80>)
 8000802:	2200      	movs	r2, #0
 8000804:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000806:	4b14      	ldr	r3, [pc, #80]	; (8000858 <MX_ADC1_Init+0x80>)
 8000808:	2200      	movs	r2, #0
 800080a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfConversion = 1;
 800080e:	4b12      	ldr	r3, [pc, #72]	; (8000858 <MX_ADC1_Init+0x80>)
 8000810:	2201      	movs	r2, #1
 8000812:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000814:	4b10      	ldr	r3, [pc, #64]	; (8000858 <MX_ADC1_Init+0x80>)
 8000816:	2200      	movs	r2, #0
 8000818:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800081c:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_ADC1_Init+0x80>)
 800081e:	2200      	movs	r2, #0
 8000820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000824:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <MX_ADC1_Init+0x80>)
 8000826:	2200      	movs	r2, #0
 8000828:	669a      	str	r2, [r3, #104]	; 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800082a:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <MX_ADC1_Init+0x80>)
 800082c:	2200      	movs	r2, #0
 800082e:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_ADC1_Init+0x80>)
 8000832:	2200      	movs	r2, #0
 8000834:	651a      	str	r2, [r3, #80]	; 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <MX_ADC1_Init+0x80>)
 8000838:	2200      	movs	r2, #0
 800083a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_ADC1_Init+0x80>)
 800083e:	2200      	movs	r2, #0
 8000840:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000844:	4804      	ldr	r0, [pc, #16]	; (8000858 <MX_ADC1_Init+0x80>)
 8000846:	f001 fa37 	bl	8001cb8 <HAL_ADC_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 8000850:	f000 fc42 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	2000002c 	.word	0x2000002c
 800085c:	42028000 	.word	0x42028000

08000860 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08e      	sub	sp, #56	; 0x38
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000866:	f107 0308 	add.w	r3, r7, #8
 800086a:	2230      	movs	r2, #48	; 0x30
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f00a fa72 	bl	800ad58 <memset>
  DAC_AutonomousModeConfTypeDef sAutonomousMode = {0};
 8000874:	2300      	movs	r3, #0
 8000876:	607b      	str	r3, [r7, #4]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000878:	4b1b      	ldr	r3, [pc, #108]	; (80008e8 <MX_DAC1_Init+0x88>)
 800087a:	4a1c      	ldr	r2, [pc, #112]	; (80008ec <MX_DAC1_Init+0x8c>)
 800087c:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800087e:	481a      	ldr	r0, [pc, #104]	; (80008e8 <MX_DAC1_Init+0x88>)
 8000880:	f001 fdf3 	bl	800246a <HAL_DAC_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_DAC1_Init+0x2e>
  {
    Error_Handler();
 800088a:	f000 fc25 	bl	80010d8 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800088e:	2300      	movs	r3, #0
 8000890:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000892:	2300      	movs	r3, #0
 8000894:	743b      	strb	r3, [r7, #16]
  sConfig.DAC_SignedFormat = DISABLE;
 8000896:	2300      	movs	r3, #0
 8000898:	747b      	strb	r3, [r7, #17]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800089e:	2300      	movs	r3, #0
 80008a0:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80008a2:	2302      	movs	r3, #2
 80008a4:	61fb      	str	r3, [r7, #28]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80008a6:	2301      	movs	r3, #1
 80008a8:	623b      	str	r3, [r7, #32]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80008ae:	f107 0308 	add.w	r3, r7, #8
 80008b2:	2210      	movs	r2, #16
 80008b4:	4619      	mov	r1, r3
 80008b6:	480c      	ldr	r0, [pc, #48]	; (80008e8 <MX_DAC1_Init+0x88>)
 80008b8:	f001 fdfa 	bl	80024b0 <HAL_DAC_ConfigChannel>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_DAC1_Init+0x66>
  {
    Error_Handler();
 80008c2:	f000 fc09 	bl	80010d8 <Error_Handler>
  }

  /** Configure Autonomous Mode
  */
  sAutonomousMode.AutonomousModeState = DAC_AUTONOMOUS_MODE_DISABLE;
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
  if (HAL_DACEx_SetConfigAutonomousMode(&hdac1, &sAutonomousMode) != HAL_OK)
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	4619      	mov	r1, r3
 80008ce:	4806      	ldr	r0, [pc, #24]	; (80008e8 <MX_DAC1_Init+0x88>)
 80008d0:	f001 ff8c 	bl	80027ec <HAL_DACEx_SetConfigAutonomousMode>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_DAC1_Init+0x7e>
  {
    Error_Handler();
 80008da:	f000 fbfd 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	3738      	adds	r7, #56	; 0x38
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	200000b8 	.word	0x200000b8
 80008ec:	46021800 	.word	0x46021800

080008f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008f4:	4b1b      	ldr	r3, [pc, #108]	; (8000964 <MX_I2C1_Init+0x74>)
 80008f6:	4a1c      	ldr	r2, [pc, #112]	; (8000968 <MX_I2C1_Init+0x78>)
 80008f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10911E24;
 80008fa:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <MX_I2C1_Init+0x74>)
 80008fc:	4a1b      	ldr	r2, [pc, #108]	; (800096c <MX_I2C1_Init+0x7c>)
 80008fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000900:	4b18      	ldr	r3, [pc, #96]	; (8000964 <MX_I2C1_Init+0x74>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000906:	4b17      	ldr	r3, [pc, #92]	; (8000964 <MX_I2C1_Init+0x74>)
 8000908:	2201      	movs	r2, #1
 800090a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800090c:	4b15      	ldr	r3, [pc, #84]	; (8000964 <MX_I2C1_Init+0x74>)
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000912:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_I2C1_Init+0x74>)
 8000914:	2200      	movs	r2, #0
 8000916:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <MX_I2C1_Init+0x74>)
 800091a:	2200      	movs	r2, #0
 800091c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_I2C1_Init+0x74>)
 8000920:	2200      	movs	r2, #0
 8000922:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_I2C1_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800092a:	480e      	ldr	r0, [pc, #56]	; (8000964 <MX_I2C1_Init+0x74>)
 800092c:	f002 fa2c 	bl	8002d88 <HAL_I2C_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000936:	f000 fbcf 	bl	80010d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 800093a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800093e:	4809      	ldr	r0, [pc, #36]	; (8000964 <MX_I2C1_Init+0x74>)
 8000940:	f002 fe56 	bl	80035f0 <HAL_I2CEx_ConfigAnalogFilter>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800094a:	f000 fbc5 	bl	80010d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800094e:	2100      	movs	r1, #0
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <MX_I2C1_Init+0x74>)
 8000952:	f002 fe98 	bl	8003686 <HAL_I2CEx_ConfigDigitalFilter>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800095c:	f000 fbbc 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	200000cc 	.word	0x200000cc
 8000968:	40005400 	.word	0x40005400
 800096c:	10911e24 	.word	0x10911e24

08000970 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ICACHE_Init 0 */

  /* USER CODE END ICACHE_Init 0 */

  ICACHE_RegionConfigTypeDef pRegionConfig = {0};
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]

  /* USER CODE END ICACHE_Init 1 */

  /** Configure and enable a region for memory remapping.
  */
  if (HAL_ICACHE_Disable() != HAL_OK)
 8000984:	f002 fecc 	bl	8003720 <HAL_ICACHE_Disable>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800098e:	f000 fba3 	bl	80010d8 <Error_Handler>
  }
  pRegionConfig.BaseAddress = 0x10000000;
 8000992:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000996:	607b      	str	r3, [r7, #4]
  pRegionConfig.RemapAddress = 0x60000000;
 8000998:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800099c:	60bb      	str	r3, [r7, #8]
  pRegionConfig.Size = ICACHE_REGIONSIZE_2MB;
 800099e:	2301      	movs	r3, #1
 80009a0:	60fb      	str	r3, [r7, #12]
  pRegionConfig.TrafficRoute = ICACHE_MASTER1_PORT;
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
  pRegionConfig.OutputBurstType = ICACHE_OUTPUT_BURST_WRAP;
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]
  if (HAL_ICACHE_EnableRemapRegion(_NULL, &pRegionConfig) != HAL_OK)
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	4619      	mov	r1, r3
 80009ae:	2000      	movs	r0, #0
 80009b0:	f002 fee6 	bl	8003780 <HAL_ICACHE_EnableRemapRegion>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_ICACHE_Init+0x4e>
  {
    Error_Handler();
 80009ba:	f000 fb8d 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	3718      	adds	r7, #24
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
	...

080009c8 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80009cc:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <MX_LPTIM1_Init+0x5c>)
 80009ce:	4a16      	ldr	r2, [pc, #88]	; (8000a28 <MX_LPTIM1_Init+0x60>)
 80009d0:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80009d2:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <MX_LPTIM1_Init+0x5c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV2;
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <MX_LPTIM1_Init+0x5c>)
 80009da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009de:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80009e0:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <MX_LPTIM1_Init+0x5c>)
 80009e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009e6:	615a      	str	r2, [r3, #20]
  hlptim1.Init.Period = 2000;
 80009e8:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <MX_LPTIM1_Init+0x5c>)
 80009ea:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80009ee:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <MX_LPTIM1_Init+0x5c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80009f6:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <MX_LPTIM1_Init+0x5c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80009fc:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <MX_LPTIM1_Init+0x5c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000a02:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <MX_LPTIM1_Init+0x5c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	631a      	str	r2, [r3, #48]	; 0x30
  hlptim1.Init.RepetitionCounter = 0;
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <MX_LPTIM1_Init+0x5c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000a0e:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_LPTIM1_Init+0x5c>)
 8000a10:	f002 ff08 	bl	8003824 <HAL_LPTIM_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_LPTIM1_Init+0x56>
  {
    Error_Handler();
 8000a1a:	f000 fb5d 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000120 	.word	0x20000120
 8000a28:	46004400 	.word	0x46004400

08000a2c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000a30:	4b25      	ldr	r3, [pc, #148]	; (8000ac8 <MX_LPUART1_UART_Init+0x9c>)
 8000a32:	4a26      	ldr	r2, [pc, #152]	; (8000acc <MX_LPUART1_UART_Init+0xa0>)
 8000a34:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8000a36:	4b24      	ldr	r3, [pc, #144]	; (8000ac8 <MX_LPUART1_UART_Init+0x9c>)
 8000a38:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a3c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3e:	4b22      	ldr	r3, [pc, #136]	; (8000ac8 <MX_LPUART1_UART_Init+0x9c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_2;
 8000a44:	4b20      	ldr	r3, [pc, #128]	; (8000ac8 <MX_LPUART1_UART_Init+0x9c>)
 8000a46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a4a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000a4c:	4b1e      	ldr	r3, [pc, #120]	; (8000ac8 <MX_LPUART1_UART_Init+0x9c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000a52:	4b1d      	ldr	r3, [pc, #116]	; (8000ac8 <MX_LPUART1_UART_Init+0x9c>)
 8000a54:	220c      	movs	r2, #12
 8000a56:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a58:	4b1b      	ldr	r3, [pc, #108]	; (8000ac8 <MX_LPUART1_UART_Init+0x9c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <MX_LPUART1_UART_Init+0x9c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000a64:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <MX_LPUART1_UART_Init+0x9c>)
 8000a66:	2230      	movs	r2, #48	; 0x30
 8000a68:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000a6a:	4b17      	ldr	r3, [pc, #92]	; (8000ac8 <MX_LPUART1_UART_Init+0x9c>)
 8000a6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a70:	63da      	str	r2, [r3, #60]	; 0x3c
  hlpuart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000a72:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <MX_LPUART1_UART_Init+0x9c>)
 8000a74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a78:	641a      	str	r2, [r3, #64]	; 0x40
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000a7a:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <MX_LPUART1_UART_Init+0x9c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000a80:	4811      	ldr	r0, [pc, #68]	; (8000ac8 <MX_LPUART1_UART_Init+0x9c>)
 8000a82:	f009 f887 	bl	8009b94 <HAL_UART_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000a8c:	f000 fb24 	bl	80010d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a90:	2100      	movs	r1, #0
 8000a92:	480d      	ldr	r0, [pc, #52]	; (8000ac8 <MX_LPUART1_UART_Init+0x9c>)
 8000a94:	f00a f895 	bl	800abc2 <HAL_UARTEx_SetTxFifoThreshold>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000a9e:	f000 fb1b 	bl	80010d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4808      	ldr	r0, [pc, #32]	; (8000ac8 <MX_LPUART1_UART_Init+0x9c>)
 8000aa6:	f00a f8ca 	bl	800ac3e <HAL_UARTEx_SetRxFifoThreshold>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_LPUART1_UART_Init+0x88>
  {
    Error_Handler();
 8000ab0:	f000 fb12 	bl	80010d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000ab4:	4804      	ldr	r0, [pc, #16]	; (8000ac8 <MX_LPUART1_UART_Init+0x9c>)
 8000ab6:	f00a f84b 	bl	800ab50 <HAL_UARTEx_DisableFifoMode>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_LPUART1_UART_Init+0x98>
  {
    Error_Handler();
 8000ac0:	f000 fb0a 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000170 	.word	0x20000170
 8000acc:	46002400 	.word	0x46002400

08000ad0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ae0:	4b31      	ldr	r3, [pc, #196]	; (8000ba8 <MX_SPI1_Init+0xd8>)
 8000ae2:	4a32      	ldr	r2, [pc, #200]	; (8000bac <MX_SPI1_Init+0xdc>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ae6:	4b30      	ldr	r3, [pc, #192]	; (8000ba8 <MX_SPI1_Init+0xd8>)
 8000ae8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000aec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000aee:	4b2e      	ldr	r3, [pc, #184]	; (8000ba8 <MX_SPI1_Init+0xd8>)
 8000af0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000af4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000af6:	4b2c      	ldr	r3, [pc, #176]	; (8000ba8 <MX_SPI1_Init+0xd8>)
 8000af8:	2207      	movs	r2, #7
 8000afa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000afc:	4b2a      	ldr	r3, [pc, #168]	; (8000ba8 <MX_SPI1_Init+0xd8>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b02:	4b29      	ldr	r3, [pc, #164]	; (8000ba8 <MX_SPI1_Init+0xd8>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b08:	4b27      	ldr	r3, [pc, #156]	; (8000ba8 <MX_SPI1_Init+0xd8>)
 8000b0a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000b0e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000b10:	4b25      	ldr	r3, [pc, #148]	; (8000ba8 <MX_SPI1_Init+0xd8>)
 8000b12:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8000b16:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b18:	4b23      	ldr	r3, [pc, #140]	; (8000ba8 <MX_SPI1_Init+0xd8>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b1e:	4b22      	ldr	r3, [pc, #136]	; (8000ba8 <MX_SPI1_Init+0xd8>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b24:	4b20      	ldr	r3, [pc, #128]	; (8000ba8 <MX_SPI1_Init+0xd8>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000b2a:	4b1f      	ldr	r3, [pc, #124]	; (8000ba8 <MX_SPI1_Init+0xd8>)
 8000b2c:	2207      	movs	r2, #7
 8000b2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b30:	4b1d      	ldr	r3, [pc, #116]	; (8000ba8 <MX_SPI1_Init+0xd8>)
 8000b32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b36:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b38:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <MX_SPI1_Init+0xd8>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <MX_SPI1_Init+0xd8>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b44:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <MX_SPI1_Init+0xd8>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b4a:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <MX_SPI1_Init+0xd8>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b50:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <MX_SPI1_Init+0xd8>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b56:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <MX_SPI1_Init+0xd8>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <MX_SPI1_Init+0xd8>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000b62:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <MX_SPI1_Init+0xd8>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000b68:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <MX_SPI1_Init+0xd8>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b6e:	480e      	ldr	r0, [pc, #56]	; (8000ba8 <MX_SPI1_Init+0xd8>)
 8000b70:	f007 fa14 	bl	8007f9c <HAL_SPI_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_SPI1_Init+0xae>
  {
    Error_Handler();
 8000b7a:	f000 faad 	bl	80010d8 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000b82:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b86:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <MX_SPI1_Init+0xd8>)
 8000b92:	f007 fb34 	bl	80081fe <HAL_SPIEx_SetConfigAutonomousMode>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_SPI1_Init+0xd0>
  {
    Error_Handler();
 8000b9c:	f000 fa9c 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	3710      	adds	r7, #16
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20000204 	.word	0x20000204
 8000bac:	40013000 	.word	0x40013000

08000bb0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08e      	sub	sp, #56	; 0x38
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc4:	f107 031c 	add.w	r3, r7, #28
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bd0:	463b      	mov	r3, r7
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
 8000bdc:	611a      	str	r2, [r3, #16]
 8000bde:	615a      	str	r2, [r3, #20]
 8000be0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000be2:	4b3e      	ldr	r3, [pc, #248]	; (8000cdc <MX_TIM2_Init+0x12c>)
 8000be4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000be8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 12000;
 8000bea:	4b3c      	ldr	r3, [pc, #240]	; (8000cdc <MX_TIM2_Init+0x12c>)
 8000bec:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8000bf0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf2:	4b3a      	ldr	r3, [pc, #232]	; (8000cdc <MX_TIM2_Init+0x12c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8000bf8:	4b38      	ldr	r3, [pc, #224]	; (8000cdc <MX_TIM2_Init+0x12c>)
 8000bfa:	2264      	movs	r2, #100	; 0x64
 8000bfc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bfe:	4b37      	ldr	r3, [pc, #220]	; (8000cdc <MX_TIM2_Init+0x12c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c04:	4b35      	ldr	r3, [pc, #212]	; (8000cdc <MX_TIM2_Init+0x12c>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c0a:	4834      	ldr	r0, [pc, #208]	; (8000cdc <MX_TIM2_Init+0x12c>)
 8000c0c:	f007 fb38 	bl	8008280 <HAL_TIM_Base_Init>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000c16:	f000 fa5f 	bl	80010d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c24:	4619      	mov	r1, r3
 8000c26:	482d      	ldr	r0, [pc, #180]	; (8000cdc <MX_TIM2_Init+0x12c>)
 8000c28:	f007 ffe6 	bl	8008bf8 <HAL_TIM_ConfigClockSource>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000c32:	f000 fa51 	bl	80010d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c36:	4829      	ldr	r0, [pc, #164]	; (8000cdc <MX_TIM2_Init+0x12c>)
 8000c38:	f007 fb79 	bl	800832e <HAL_TIM_PWM_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000c42:	f000 fa49 	bl	80010d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c4e:	f107 031c 	add.w	r3, r7, #28
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <MX_TIM2_Init+0x12c>)
 8000c56:	f008 fe95 	bl	8009984 <HAL_TIMEx_MasterConfigSynchronization>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000c60:	f000 fa3a 	bl	80010d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c64:	2360      	movs	r3, #96	; 0x60
 8000c66:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 8000c68:	2332      	movs	r3, #50	; 0x32
 8000c6a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c70:	2300      	movs	r3, #0
 8000c72:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c74:	463b      	mov	r3, r7
 8000c76:	2200      	movs	r2, #0
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4818      	ldr	r0, [pc, #96]	; (8000cdc <MX_TIM2_Init+0x12c>)
 8000c7c:	f007 fea8 	bl	80089d0 <HAL_TIM_PWM_ConfigChannel>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000c86:	f000 fa27 	bl	80010d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c8a:	463b      	mov	r3, r7
 8000c8c:	2204      	movs	r2, #4
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4812      	ldr	r0, [pc, #72]	; (8000cdc <MX_TIM2_Init+0x12c>)
 8000c92:	f007 fe9d 	bl	80089d0 <HAL_TIM_PWM_ConfigChannel>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000c9c:	f000 fa1c 	bl	80010d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ca0:	463b      	mov	r3, r7
 8000ca2:	2208      	movs	r2, #8
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	480d      	ldr	r0, [pc, #52]	; (8000cdc <MX_TIM2_Init+0x12c>)
 8000ca8:	f007 fe92 	bl	80089d0 <HAL_TIM_PWM_ConfigChannel>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000cb2:	f000 fa11 	bl	80010d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000cb6:	463b      	mov	r3, r7
 8000cb8:	220c      	movs	r2, #12
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4807      	ldr	r0, [pc, #28]	; (8000cdc <MX_TIM2_Init+0x12c>)
 8000cbe:	f007 fe87 	bl	80089d0 <HAL_TIM_PWM_ConfigChannel>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8000cc8:	f000 fa06 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ccc:	4803      	ldr	r0, [pc, #12]	; (8000cdc <MX_TIM2_Init+0x12c>)
 8000cce:	f000 fccd 	bl	800166c <HAL_TIM_MspPostInit>

}
 8000cd2:	bf00      	nop
 8000cd4:	3738      	adds	r7, #56	; 0x38
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000294 	.word	0x20000294

08000ce0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	; 0x28
 8000ce4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	60da      	str	r2, [r3, #12]
 8000cf4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf6:	4b4e      	ldr	r3, [pc, #312]	; (8000e30 <MX_GPIO_Init+0x150>)
 8000cf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cfc:	4a4c      	ldr	r2, [pc, #304]	; (8000e30 <MX_GPIO_Init+0x150>)
 8000cfe:	f043 0304 	orr.w	r3, r3, #4
 8000d02:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d06:	4b4a      	ldr	r3, [pc, #296]	; (8000e30 <MX_GPIO_Init+0x150>)
 8000d08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d0c:	f003 0304 	and.w	r3, r3, #4
 8000d10:	613b      	str	r3, [r7, #16]
 8000d12:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d14:	4b46      	ldr	r3, [pc, #280]	; (8000e30 <MX_GPIO_Init+0x150>)
 8000d16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d1a:	4a45      	ldr	r2, [pc, #276]	; (8000e30 <MX_GPIO_Init+0x150>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d24:	4b42      	ldr	r3, [pc, #264]	; (8000e30 <MX_GPIO_Init+0x150>)
 8000d26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d32:	4b3f      	ldr	r3, [pc, #252]	; (8000e30 <MX_GPIO_Init+0x150>)
 8000d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d38:	4a3d      	ldr	r2, [pc, #244]	; (8000e30 <MX_GPIO_Init+0x150>)
 8000d3a:	f043 0310 	orr.w	r3, r3, #16
 8000d3e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d42:	4b3b      	ldr	r3, [pc, #236]	; (8000e30 <MX_GPIO_Init+0x150>)
 8000d44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d48:	f003 0310 	and.w	r3, r3, #16
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d50:	4b37      	ldr	r3, [pc, #220]	; (8000e30 <MX_GPIO_Init+0x150>)
 8000d52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d56:	4a36      	ldr	r2, [pc, #216]	; (8000e30 <MX_GPIO_Init+0x150>)
 8000d58:	f043 0302 	orr.w	r3, r3, #2
 8000d5c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d60:	4b33      	ldr	r3, [pc, #204]	; (8000e30 <MX_GPIO_Init+0x150>)
 8000d62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d66:	f003 0302 	and.w	r3, r3, #2
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d6e:	4b30      	ldr	r3, [pc, #192]	; (8000e30 <MX_GPIO_Init+0x150>)
 8000d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d74:	4a2e      	ldr	r2, [pc, #184]	; (8000e30 <MX_GPIO_Init+0x150>)
 8000d76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d7a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d7e:	4b2c      	ldr	r3, [pc, #176]	; (8000e30 <MX_GPIO_Init+0x150>)
 8000d80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d88:	603b      	str	r3, [r7, #0]
 8000d8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000d92:	4828      	ldr	r0, [pc, #160]	; (8000e34 <MX_GPIO_Init+0x154>)
 8000d94:	f001 ffe0 	bl	8002d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2104      	movs	r1, #4
 8000d9c:	4826      	ldr	r0, [pc, #152]	; (8000e38 <MX_GPIO_Init+0x158>)
 8000d9e:	f001 ffdb 	bl	8002d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2180      	movs	r1, #128	; 0x80
 8000da6:	4825      	ldr	r0, [pc, #148]	; (8000e3c <MX_GPIO_Init+0x15c>)
 8000da8:	f001 ffd6 	bl	8002d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000dac:	2200      	movs	r2, #0
 8000dae:	2180      	movs	r1, #128	; 0x80
 8000db0:	4823      	ldr	r0, [pc, #140]	; (8000e40 <MX_GPIO_Init+0x160>)
 8000db2:	f001 ffd1 	bl	8002d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8000db6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000dba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4819      	ldr	r0, [pc, #100]	; (8000e34 <MX_GPIO_Init+0x154>)
 8000dd0:	f001 fdea 	bl	80029a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000dd4:	2304      	movs	r3, #4
 8000dd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	4619      	mov	r1, r3
 8000dea:	4813      	ldr	r0, [pc, #76]	; (8000e38 <MX_GPIO_Init+0x158>)
 8000dec:	f001 fddc 	bl	80029a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000df0:	2380      	movs	r3, #128	; 0x80
 8000df2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df4:	2301      	movs	r3, #1
 8000df6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	4619      	mov	r1, r3
 8000e06:	480d      	ldr	r0, [pc, #52]	; (8000e3c <MX_GPIO_Init+0x15c>)
 8000e08:	f001 fdce 	bl	80029a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e0c:	2380      	movs	r3, #128	; 0x80
 8000e0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e10:	2301      	movs	r3, #1
 8000e12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	4619      	mov	r1, r3
 8000e22:	4807      	ldr	r0, [pc, #28]	; (8000e40 <MX_GPIO_Init+0x160>)
 8000e24:	f001 fdc0 	bl	80029a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e28:	bf00      	nop
 8000e2a:	3728      	adds	r7, #40	; 0x28
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	46020c00 	.word	0x46020c00
 8000e34:	42020000 	.word	0x42020000
 8000e38:	42021800 	.word	0x42021800
 8000e3c:	42020800 	.word	0x42020800
 8000e40:	42020400 	.word	0x42020400

08000e44 <_init_BMI160>:
	HAL_SPI_Transmit(&hspi1, &tempVar, 1, 10);
	HAL_SPI_Transmit(&hspi1, &tempVar, 1, 10);
}

static void _init_BMI160( void )
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	; 0x28
 8000e48:	af04      	add	r7, sp, #16
	uint8_t readData = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	757b      	strb	r3, [r7, #21]
	uint8_t readGyro[6];
	uint8_t sendData[7] = "0x";
 8000e4e:	f647 0330 	movw	r3, #30768	; 0x7830
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	f107 0308 	add.w	r3, r7, #8
 8000e58:	2100      	movs	r1, #0
 8000e5a:	460a      	mov	r2, r1
 8000e5c:	801a      	strh	r2, [r3, #0]
 8000e5e:	460a      	mov	r2, r1
 8000e60:	709a      	strb	r2, [r3, #2]
	uint8_t i2c_addr = BMI160_I2C_ADDR;
 8000e62:	23d2      	movs	r3, #210	; 0xd2
 8000e64:	75fb      	strb	r3, [r7, #23]
	uint8_t memAddr = BMI160_CHIP_ID;
 8000e66:	2300      	movs	r3, #0
 8000e68:	75bb      	strb	r3, [r7, #22]
	HAL_I2C_Mem_Read( &hi2c1, i2c_addr, memAddr, 1, &readData, 1, 1);
 8000e6a:	7dfb      	ldrb	r3, [r7, #23]
 8000e6c:	b299      	uxth	r1, r3
 8000e6e:	7dbb      	ldrb	r3, [r7, #22]
 8000e70:	b29a      	uxth	r2, r3
 8000e72:	2301      	movs	r3, #1
 8000e74:	9302      	str	r3, [sp, #8]
 8000e76:	2301      	movs	r3, #1
 8000e78:	9301      	str	r3, [sp, #4]
 8000e7a:	f107 0315 	add.w	r3, r7, #21
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	2301      	movs	r3, #1
 8000e82:	4892      	ldr	r0, [pc, #584]	; (80010cc <_init_BMI160+0x288>)
 8000e84:	f002 f81c 	bl	8002ec0 <HAL_I2C_Mem_Read>
	sendData[2] = (readData/10) + '0';
 8000e88:	7d7b      	ldrb	r3, [r7, #21]
 8000e8a:	4a91      	ldr	r2, [pc, #580]	; (80010d0 <_init_BMI160+0x28c>)
 8000e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e90:	08db      	lsrs	r3, r3, #3
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	3330      	adds	r3, #48	; 0x30
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	71bb      	strb	r3, [r7, #6]
	sendData[3] = (readData%10) + '0';
 8000e9a:	7d7a      	ldrb	r2, [r7, #21]
 8000e9c:	4b8c      	ldr	r3, [pc, #560]	; (80010d0 <_init_BMI160+0x28c>)
 8000e9e:	fba3 1302 	umull	r1, r3, r3, r2
 8000ea2:	08d9      	lsrs	r1, r3, #3
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	440b      	add	r3, r1
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	3330      	adds	r3, #48	; 0x30
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	71fb      	strb	r3, [r7, #7]
	sendData[4] = '\r';
 8000eb6:	230d      	movs	r3, #13
 8000eb8:	723b      	strb	r3, [r7, #8]
	sendData[5] = '\n';
 8000eba:	230a      	movs	r3, #10
 8000ebc:	727b      	strb	r3, [r7, #9]
	sendData[6] = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	72bb      	strb	r3, [r7, #10]
	HAL_UART_Transmit(&hlpuart1, sendData, sizeof(sendData), 100);
 8000ec2:	1d39      	adds	r1, r7, #4
 8000ec4:	2364      	movs	r3, #100	; 0x64
 8000ec6:	2207      	movs	r2, #7
 8000ec8:	4882      	ldr	r0, [pc, #520]	; (80010d4 <_init_BMI160+0x290>)
 8000eca:	f008 feb3 	bl	8009c34 <HAL_UART_Transmit>

	memAddr = BMI160_GYR_X_0_7;
 8000ece:	2320      	movs	r3, #32
 8000ed0:	75bb      	strb	r3, [r7, #22]
	HAL_I2C_Mem_Read( &hi2c1, i2c_addr, memAddr, 1, readGyro, 6, 1);
 8000ed2:	7dfb      	ldrb	r3, [r7, #23]
 8000ed4:	b299      	uxth	r1, r3
 8000ed6:	7dbb      	ldrb	r3, [r7, #22]
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	2301      	movs	r3, #1
 8000edc:	9302      	str	r3, [sp, #8]
 8000ede:	2306      	movs	r3, #6
 8000ee0:	9301      	str	r3, [sp, #4]
 8000ee2:	f107 030c 	add.w	r3, r7, #12
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	2301      	movs	r3, #1
 8000eea:	4878      	ldr	r0, [pc, #480]	; (80010cc <_init_BMI160+0x288>)
 8000eec:	f001 ffe8 	bl	8002ec0 <HAL_I2C_Mem_Read>
	sendData[0] = '0';
 8000ef0:	2330      	movs	r3, #48	; 0x30
 8000ef2:	713b      	strb	r3, [r7, #4]
	sendData[1] = 'x';
 8000ef4:	2378      	movs	r3, #120	; 0x78
 8000ef6:	717b      	strb	r3, [r7, #5]
	sendData[2] = (readGyro[0]/10) + '0';
 8000ef8:	7b3b      	ldrb	r3, [r7, #12]
 8000efa:	4a75      	ldr	r2, [pc, #468]	; (80010d0 <_init_BMI160+0x28c>)
 8000efc:	fba2 2303 	umull	r2, r3, r2, r3
 8000f00:	08db      	lsrs	r3, r3, #3
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	3330      	adds	r3, #48	; 0x30
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	71bb      	strb	r3, [r7, #6]
	sendData[3] = (readGyro[0]%10) + '0';
 8000f0a:	7b3a      	ldrb	r2, [r7, #12]
 8000f0c:	4b70      	ldr	r3, [pc, #448]	; (80010d0 <_init_BMI160+0x28c>)
 8000f0e:	fba3 1302 	umull	r1, r3, r3, r2
 8000f12:	08d9      	lsrs	r1, r3, #3
 8000f14:	460b      	mov	r3, r1
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	440b      	add	r3, r1
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	3330      	adds	r3, #48	; 0x30
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	71fb      	strb	r3, [r7, #7]
	sendData[4] = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	723b      	strb	r3, [r7, #8]
	sendData[5] = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	727b      	strb	r3, [r7, #9]
	sendData[6] = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	72bb      	strb	r3, [r7, #10]
	HAL_UART_Transmit(&hlpuart1, sendData, sizeof(sendData), 100);
 8000f32:	1d39      	adds	r1, r7, #4
 8000f34:	2364      	movs	r3, #100	; 0x64
 8000f36:	2207      	movs	r2, #7
 8000f38:	4866      	ldr	r0, [pc, #408]	; (80010d4 <_init_BMI160+0x290>)
 8000f3a:	f008 fe7b 	bl	8009c34 <HAL_UART_Transmit>
	sendData[0] = (readGyro[1]/10) + '0';
 8000f3e:	7b7b      	ldrb	r3, [r7, #13]
 8000f40:	4a63      	ldr	r2, [pc, #396]	; (80010d0 <_init_BMI160+0x28c>)
 8000f42:	fba2 2303 	umull	r2, r3, r2, r3
 8000f46:	08db      	lsrs	r3, r3, #3
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	3330      	adds	r3, #48	; 0x30
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	713b      	strb	r3, [r7, #4]
	sendData[1] = (readGyro[1]%10) + '0';
 8000f50:	7b7a      	ldrb	r2, [r7, #13]
 8000f52:	4b5f      	ldr	r3, [pc, #380]	; (80010d0 <_init_BMI160+0x28c>)
 8000f54:	fba3 1302 	umull	r1, r3, r3, r2
 8000f58:	08d9      	lsrs	r1, r3, #3
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	440b      	add	r3, r1
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	3330      	adds	r3, #48	; 0x30
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	717b      	strb	r3, [r7, #5]
	sendData[2] = '\r';
 8000f6c:	230d      	movs	r3, #13
 8000f6e:	71bb      	strb	r3, [r7, #6]
	sendData[3] = '\n';
 8000f70:	230a      	movs	r3, #10
 8000f72:	71fb      	strb	r3, [r7, #7]
	sendData[4] = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	723b      	strb	r3, [r7, #8]
	sendData[5] = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	727b      	strb	r3, [r7, #9]
	sendData[6] = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	72bb      	strb	r3, [r7, #10]
	HAL_UART_Transmit(&hlpuart1, sendData, sizeof(sendData), 100);
 8000f80:	1d39      	adds	r1, r7, #4
 8000f82:	2364      	movs	r3, #100	; 0x64
 8000f84:	2207      	movs	r2, #7
 8000f86:	4853      	ldr	r0, [pc, #332]	; (80010d4 <_init_BMI160+0x290>)
 8000f88:	f008 fe54 	bl	8009c34 <HAL_UART_Transmit>
	sendData[0] = '0';
 8000f8c:	2330      	movs	r3, #48	; 0x30
 8000f8e:	713b      	strb	r3, [r7, #4]
	sendData[1] = 'x';
 8000f90:	2378      	movs	r3, #120	; 0x78
 8000f92:	717b      	strb	r3, [r7, #5]
	sendData[2] = (readGyro[2]/10) + '0';
 8000f94:	7bbb      	ldrb	r3, [r7, #14]
 8000f96:	4a4e      	ldr	r2, [pc, #312]	; (80010d0 <_init_BMI160+0x28c>)
 8000f98:	fba2 2303 	umull	r2, r3, r2, r3
 8000f9c:	08db      	lsrs	r3, r3, #3
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	3330      	adds	r3, #48	; 0x30
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	71bb      	strb	r3, [r7, #6]
	sendData[3] = (readGyro[2]%10) + '0';
 8000fa6:	7bba      	ldrb	r2, [r7, #14]
 8000fa8:	4b49      	ldr	r3, [pc, #292]	; (80010d0 <_init_BMI160+0x28c>)
 8000faa:	fba3 1302 	umull	r1, r3, r3, r2
 8000fae:	08d9      	lsrs	r1, r3, #3
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	440b      	add	r3, r1
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	3330      	adds	r3, #48	; 0x30
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	71fb      	strb	r3, [r7, #7]
	sendData[4] = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	723b      	strb	r3, [r7, #8]
	sendData[5] = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	727b      	strb	r3, [r7, #9]
	sendData[6] = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	72bb      	strb	r3, [r7, #10]
	HAL_UART_Transmit(&hlpuart1, sendData, sizeof(sendData), 100);
 8000fce:	1d39      	adds	r1, r7, #4
 8000fd0:	2364      	movs	r3, #100	; 0x64
 8000fd2:	2207      	movs	r2, #7
 8000fd4:	483f      	ldr	r0, [pc, #252]	; (80010d4 <_init_BMI160+0x290>)
 8000fd6:	f008 fe2d 	bl	8009c34 <HAL_UART_Transmit>
	sendData[0] = (readGyro[3]/10) + '0';
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	4a3c      	ldr	r2, [pc, #240]	; (80010d0 <_init_BMI160+0x28c>)
 8000fde:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe2:	08db      	lsrs	r3, r3, #3
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	3330      	adds	r3, #48	; 0x30
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	713b      	strb	r3, [r7, #4]
	sendData[1] = (readGyro[3]%10) + '0';
 8000fec:	7bfa      	ldrb	r2, [r7, #15]
 8000fee:	4b38      	ldr	r3, [pc, #224]	; (80010d0 <_init_BMI160+0x28c>)
 8000ff0:	fba3 1302 	umull	r1, r3, r3, r2
 8000ff4:	08d9      	lsrs	r1, r3, #3
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	440b      	add	r3, r1
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	b2db      	uxtb	r3, r3
 8001002:	3330      	adds	r3, #48	; 0x30
 8001004:	b2db      	uxtb	r3, r3
 8001006:	717b      	strb	r3, [r7, #5]
	sendData[2] = '\r';
 8001008:	230d      	movs	r3, #13
 800100a:	71bb      	strb	r3, [r7, #6]
	sendData[3] = '\n';
 800100c:	230a      	movs	r3, #10
 800100e:	71fb      	strb	r3, [r7, #7]
	sendData[4] = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	723b      	strb	r3, [r7, #8]
	sendData[5] = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	727b      	strb	r3, [r7, #9]
	sendData[6] = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	72bb      	strb	r3, [r7, #10]
	HAL_UART_Transmit(&hlpuart1, sendData, sizeof(sendData), 100);
 800101c:	1d39      	adds	r1, r7, #4
 800101e:	2364      	movs	r3, #100	; 0x64
 8001020:	2207      	movs	r2, #7
 8001022:	482c      	ldr	r0, [pc, #176]	; (80010d4 <_init_BMI160+0x290>)
 8001024:	f008 fe06 	bl	8009c34 <HAL_UART_Transmit>
	sendData[0] = '0';
 8001028:	2330      	movs	r3, #48	; 0x30
 800102a:	713b      	strb	r3, [r7, #4]
	sendData[1] = 'x';
 800102c:	2378      	movs	r3, #120	; 0x78
 800102e:	717b      	strb	r3, [r7, #5]
	sendData[2] = (readGyro[4]/10) + '0';
 8001030:	7c3b      	ldrb	r3, [r7, #16]
 8001032:	4a27      	ldr	r2, [pc, #156]	; (80010d0 <_init_BMI160+0x28c>)
 8001034:	fba2 2303 	umull	r2, r3, r2, r3
 8001038:	08db      	lsrs	r3, r3, #3
 800103a:	b2db      	uxtb	r3, r3
 800103c:	3330      	adds	r3, #48	; 0x30
 800103e:	b2db      	uxtb	r3, r3
 8001040:	71bb      	strb	r3, [r7, #6]
	sendData[3] = (readGyro[4]%10) + '0';
 8001042:	7c3a      	ldrb	r2, [r7, #16]
 8001044:	4b22      	ldr	r3, [pc, #136]	; (80010d0 <_init_BMI160+0x28c>)
 8001046:	fba3 1302 	umull	r1, r3, r3, r2
 800104a:	08d9      	lsrs	r1, r3, #3
 800104c:	460b      	mov	r3, r1
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	440b      	add	r3, r1
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	b2db      	uxtb	r3, r3
 8001058:	3330      	adds	r3, #48	; 0x30
 800105a:	b2db      	uxtb	r3, r3
 800105c:	71fb      	strb	r3, [r7, #7]
	sendData[4] = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	723b      	strb	r3, [r7, #8]
	sendData[5] = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	727b      	strb	r3, [r7, #9]
	sendData[6] = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	72bb      	strb	r3, [r7, #10]
	HAL_UART_Transmit(&hlpuart1, sendData, sizeof(sendData), 100);
 800106a:	1d39      	adds	r1, r7, #4
 800106c:	2364      	movs	r3, #100	; 0x64
 800106e:	2207      	movs	r2, #7
 8001070:	4818      	ldr	r0, [pc, #96]	; (80010d4 <_init_BMI160+0x290>)
 8001072:	f008 fddf 	bl	8009c34 <HAL_UART_Transmit>
	sendData[0] = (readGyro[5]/10) + '0';
 8001076:	7c7b      	ldrb	r3, [r7, #17]
 8001078:	4a15      	ldr	r2, [pc, #84]	; (80010d0 <_init_BMI160+0x28c>)
 800107a:	fba2 2303 	umull	r2, r3, r2, r3
 800107e:	08db      	lsrs	r3, r3, #3
 8001080:	b2db      	uxtb	r3, r3
 8001082:	3330      	adds	r3, #48	; 0x30
 8001084:	b2db      	uxtb	r3, r3
 8001086:	713b      	strb	r3, [r7, #4]
	sendData[1] = (readGyro[5]%10) + '0';
 8001088:	7c7a      	ldrb	r2, [r7, #17]
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <_init_BMI160+0x28c>)
 800108c:	fba3 1302 	umull	r1, r3, r3, r2
 8001090:	08d9      	lsrs	r1, r3, #3
 8001092:	460b      	mov	r3, r1
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	440b      	add	r3, r1
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	b2db      	uxtb	r3, r3
 800109e:	3330      	adds	r3, #48	; 0x30
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	717b      	strb	r3, [r7, #5]
	sendData[2] = '\r';
 80010a4:	230d      	movs	r3, #13
 80010a6:	71bb      	strb	r3, [r7, #6]
	sendData[3] = '\n';
 80010a8:	230a      	movs	r3, #10
 80010aa:	71fb      	strb	r3, [r7, #7]
	sendData[4] = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	723b      	strb	r3, [r7, #8]
	sendData[5] = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	727b      	strb	r3, [r7, #9]
	sendData[6] = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	72bb      	strb	r3, [r7, #10]
	HAL_UART_Transmit(&hlpuart1, sendData, sizeof(sendData), 100);
 80010b8:	1d39      	adds	r1, r7, #4
 80010ba:	2364      	movs	r3, #100	; 0x64
 80010bc:	2207      	movs	r2, #7
 80010be:	4805      	ldr	r0, [pc, #20]	; (80010d4 <_init_BMI160+0x290>)
 80010c0:	f008 fdb8 	bl	8009c34 <HAL_UART_Transmit>



}
 80010c4:	bf00      	nop
 80010c6:	3718      	adds	r7, #24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	200000cc 	.word	0x200000cc
 80010d0:	cccccccd 	.word	0xcccccccd
 80010d4:	20000170 	.word	0x20000170

080010d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010dc:	b672      	cpsid	i
}
 80010de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <Error_Handler+0x8>
	...

080010e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80010ea:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <HAL_MspInit+0x30>)
 80010ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010f0:	4a08      	ldr	r2, [pc, #32]	; (8001114 <HAL_MspInit+0x30>)
 80010f2:	f043 0304 	orr.w	r3, r3, #4
 80010f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_MspInit+0x30>)
 80010fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001100:	f003 0304 	and.w	r3, r3, #4
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8001108:	f002 fff4 	bl	80040f4 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	46020c00 	.word	0x46020c00

08001118 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08a      	sub	sp, #40	; 0x28
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a18      	ldr	r2, [pc, #96]	; (8001198 <HAL_ADC_MspInit+0x80>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d129      	bne.n	800118e <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800113a:	4b18      	ldr	r3, [pc, #96]	; (800119c <HAL_ADC_MspInit+0x84>)
 800113c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001140:	4a16      	ldr	r2, [pc, #88]	; (800119c <HAL_ADC_MspInit+0x84>)
 8001142:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001146:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800114a:	4b14      	ldr	r3, [pc, #80]	; (800119c <HAL_ADC_MspInit+0x84>)
 800114c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001154:	613b      	str	r3, [r7, #16]
 8001156:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001158:	4b10      	ldr	r3, [pc, #64]	; (800119c <HAL_ADC_MspInit+0x84>)
 800115a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800115e:	4a0f      	ldr	r2, [pc, #60]	; (800119c <HAL_ADC_MspInit+0x84>)
 8001160:	f043 0304 	orr.w	r3, r3, #4
 8001164:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001168:	4b0c      	ldr	r3, [pc, #48]	; (800119c <HAL_ADC_MspInit+0x84>)
 800116a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800116e:	f003 0304 	and.w	r3, r3, #4
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001176:	2301      	movs	r3, #1
 8001178:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800117a:	2303      	movs	r3, #3
 800117c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	4619      	mov	r1, r3
 8001188:	4805      	ldr	r0, [pc, #20]	; (80011a0 <HAL_ADC_MspInit+0x88>)
 800118a:	f001 fc0d 	bl	80029a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800118e:	bf00      	nop
 8001190:	3728      	adds	r7, #40	; 0x28
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	42028000 	.word	0x42028000
 800119c:	46020c00 	.word	0x46020c00
 80011a0:	42020800 	.word	0x42020800

080011a4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b0ba      	sub	sp, #232	; 0xe8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011bc:	f107 0310 	add.w	r3, r7, #16
 80011c0:	22c0      	movs	r2, #192	; 0xc0
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f009 fdc7 	bl	800ad58 <memset>
  if(hdac->Instance==DAC1)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a24      	ldr	r2, [pc, #144]	; (8001260 <HAL_DAC_MspInit+0xbc>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d140      	bne.n	8001256 <HAL_DAC_MspInit+0xb2>

  /* USER CODE END DAC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DAC1;
 80011d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011d8:	f04f 0300 	mov.w	r3, #0
 80011dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Dac1ClockSelection = RCC_DAC1CLKSOURCE_LSI;
 80011e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011e8:	f107 0310 	add.w	r3, r7, #16
 80011ec:	4618      	mov	r0, r3
 80011ee:	f004 fa3d 	bl	800566c <HAL_RCCEx_PeriphCLKConfig>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <HAL_DAC_MspInit+0x58>
    {
      Error_Handler();
 80011f8:	f7ff ff6e 	bl	80010d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80011fc:	4b19      	ldr	r3, [pc, #100]	; (8001264 <HAL_DAC_MspInit+0xc0>)
 80011fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001202:	4a18      	ldr	r2, [pc, #96]	; (8001264 <HAL_DAC_MspInit+0xc0>)
 8001204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001208:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800120c:	4b15      	ldr	r3, [pc, #84]	; (8001264 <HAL_DAC_MspInit+0xc0>)
 800120e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121a:	4b12      	ldr	r3, [pc, #72]	; (8001264 <HAL_DAC_MspInit+0xc0>)
 800121c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001220:	4a10      	ldr	r2, [pc, #64]	; (8001264 <HAL_DAC_MspInit+0xc0>)
 8001222:	f043 0301 	orr.w	r3, r3, #1
 8001226:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <HAL_DAC_MspInit+0xc0>)
 800122c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	68bb      	ldr	r3, [r7, #8]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001238:	2320      	movs	r3, #32
 800123a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800123e:	2303      	movs	r3, #3
 8001240:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800124e:	4619      	mov	r1, r3
 8001250:	4805      	ldr	r0, [pc, #20]	; (8001268 <HAL_DAC_MspInit+0xc4>)
 8001252:	f001 fba9 	bl	80029a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001256:	bf00      	nop
 8001258:	37e8      	adds	r7, #232	; 0xe8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	46021800 	.word	0x46021800
 8001264:	46020c00 	.word	0x46020c00
 8001268:	42020000 	.word	0x42020000

0800126c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b0ba      	sub	sp, #232	; 0xe8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001284:	f107 0310 	add.w	r3, r7, #16
 8001288:	22c0      	movs	r2, #192	; 0xc0
 800128a:	2100      	movs	r1, #0
 800128c:	4618      	mov	r0, r3
 800128e:	f009 fd63 	bl	800ad58 <memset>
  if(hi2c->Instance==I2C1)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a2b      	ldr	r2, [pc, #172]	; (8001344 <HAL_I2C_MspInit+0xd8>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d14e      	bne.n	800133a <HAL_I2C_MspInit+0xce>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800129c:	f04f 0240 	mov.w	r2, #64	; 0x40
 80012a0:	f04f 0300 	mov.w	r3, #0
 80012a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80012a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012ac:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ae:	f107 0310 	add.w	r3, r7, #16
 80012b2:	4618      	mov	r0, r3
 80012b4:	f004 f9da 	bl	800566c <HAL_RCCEx_PeriphCLKConfig>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80012be:	f7ff ff0b 	bl	80010d8 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80012c2:	4b21      	ldr	r3, [pc, #132]	; (8001348 <HAL_I2C_MspInit+0xdc>)
 80012c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012c8:	4a1f      	ldr	r2, [pc, #124]	; (8001348 <HAL_I2C_MspInit+0xdc>)
 80012ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80012d2:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <HAL_I2C_MspInit+0xdc>)
 80012d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80012e0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80012e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012e8:	2312      	movs	r3, #18
 80012ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f4:	2300      	movs	r3, #0
 80012f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012fa:	2304      	movs	r3, #4
 80012fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001300:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001304:	4619      	mov	r1, r3
 8001306:	4811      	ldr	r0, [pc, #68]	; (800134c <HAL_I2C_MspInit+0xe0>)
 8001308:	f001 fb4e 	bl	80029a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800130c:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <HAL_I2C_MspInit+0xdc>)
 800130e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001312:	4a0d      	ldr	r2, [pc, #52]	; (8001348 <HAL_I2C_MspInit+0xdc>)
 8001314:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001318:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800131c:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <HAL_I2C_MspInit+0xdc>)
 800131e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001322:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	2100      	movs	r1, #0
 800132e:	2037      	movs	r0, #55	; 0x37
 8001330:	f001 f867 	bl	8002402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001334:	2037      	movs	r0, #55	; 0x37
 8001336:	f001 f87e 	bl	8002436 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800133a:	bf00      	nop
 800133c:	37e8      	adds	r7, #232	; 0xe8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40005400 	.word	0x40005400
 8001348:	46020c00 	.word	0x46020c00
 800134c:	42021800 	.word	0x42021800

08001350 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b0b4      	sub	sp, #208	; 0xd0
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001358:	f107 0310 	add.w	r3, r7, #16
 800135c:	22c0      	movs	r2, #192	; 0xc0
 800135e:	2100      	movs	r1, #0
 8001360:	4618      	mov	r0, r3
 8001362:	f009 fcf9 	bl	800ad58 <memset>
  if(hlptim->Instance==LPTIM1)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a18      	ldr	r2, [pc, #96]	; (80013cc <HAL_LPTIM_MspInit+0x7c>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d129      	bne.n	80013c4 <HAL_LPTIM_MspInit+0x74>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8001370:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001374:	f04f 0300 	mov.w	r3, #0
 8001378:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_MSIK;
 800137c:	2300      	movs	r3, #0
 800137e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001382:	f107 0310 	add.w	r3, r7, #16
 8001386:	4618      	mov	r0, r3
 8001388:	f004 f970 	bl	800566c <HAL_RCCEx_PeriphCLKConfig>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <HAL_LPTIM_MspInit+0x46>
    {
      Error_Handler();
 8001392:	f7ff fea1 	bl	80010d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <HAL_LPTIM_MspInit+0x80>)
 8001398:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800139c:	4a0c      	ldr	r2, [pc, #48]	; (80013d0 <HAL_LPTIM_MspInit+0x80>)
 800139e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013a2:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <HAL_LPTIM_MspInit+0x80>)
 80013a8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80013ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 80013b4:	2200      	movs	r2, #0
 80013b6:	2100      	movs	r1, #0
 80013b8:	2043      	movs	r0, #67	; 0x43
 80013ba:	f001 f822 	bl	8002402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80013be:	2043      	movs	r0, #67	; 0x43
 80013c0:	f001 f839 	bl	8002436 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 80013c4:	bf00      	nop
 80013c6:	37d0      	adds	r7, #208	; 0xd0
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	46004400 	.word	0x46004400
 80013d0:	46020c00 	.word	0x46020c00

080013d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b0bc      	sub	sp, #240	; 0xf0
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013ec:	f107 0318 	add.w	r3, r7, #24
 80013f0:	22c0      	movs	r2, #192	; 0xc0
 80013f2:	2100      	movs	r1, #0
 80013f4:	4618      	mov	r0, r3
 80013f6:	f009 fcaf 	bl	800ad58 <memset>
  if(huart->Instance==LPUART1)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a3c      	ldr	r2, [pc, #240]	; (80014f0 <HAL_UART_MspInit+0x11c>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d171      	bne.n	80014e8 <HAL_UART_MspInit+0x114>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001404:	f04f 0220 	mov.w	r2, #32
 8001408:	f04f 0300 	mov.w	r3, #0
 800140c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 8001410:	2302      	movs	r3, #2
 8001412:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001414:	f107 0318 	add.w	r3, r7, #24
 8001418:	4618      	mov	r0, r3
 800141a:	f004 f927 	bl	800566c <HAL_RCCEx_PeriphCLKConfig>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001424:	f7ff fe58 	bl	80010d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001428:	4b32      	ldr	r3, [pc, #200]	; (80014f4 <HAL_UART_MspInit+0x120>)
 800142a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800142e:	4a31      	ldr	r2, [pc, #196]	; (80014f4 <HAL_UART_MspInit+0x120>)
 8001430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001434:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8001438:	4b2e      	ldr	r3, [pc, #184]	; (80014f4 <HAL_UART_MspInit+0x120>)
 800143a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800143e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001442:	617b      	str	r3, [r7, #20]
 8001444:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001446:	4b2b      	ldr	r3, [pc, #172]	; (80014f4 <HAL_UART_MspInit+0x120>)
 8001448:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800144c:	4a29      	ldr	r2, [pc, #164]	; (80014f4 <HAL_UART_MspInit+0x120>)
 800144e:	f043 0304 	orr.w	r3, r3, #4
 8001452:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001456:	4b27      	ldr	r3, [pc, #156]	; (80014f4 <HAL_UART_MspInit+0x120>)
 8001458:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001464:	4b23      	ldr	r3, [pc, #140]	; (80014f4 <HAL_UART_MspInit+0x120>)
 8001466:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800146a:	4a22      	ldr	r2, [pc, #136]	; (80014f4 <HAL_UART_MspInit+0x120>)
 800146c:	f043 0302 	orr.w	r3, r3, #2
 8001470:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001474:	4b1f      	ldr	r3, [pc, #124]	; (80014f4 <HAL_UART_MspInit+0x120>)
 8001476:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    PB10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001482:	2302      	movs	r3, #2
 8001484:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001488:	2302      	movs	r3, #2
 800148a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001494:	2300      	movs	r3, #0
 8001496:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800149a:	2308      	movs	r3, #8
 800149c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014a4:	4619      	mov	r1, r3
 80014a6:	4814      	ldr	r0, [pc, #80]	; (80014f8 <HAL_UART_MspInit+0x124>)
 80014a8:	f001 fa7e 	bl	80029a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b4:	2302      	movs	r3, #2
 80014b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	2300      	movs	r3, #0
 80014c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80014c6:	2308      	movs	r3, #8
 80014c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014cc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014d0:	4619      	mov	r1, r3
 80014d2:	480a      	ldr	r0, [pc, #40]	; (80014fc <HAL_UART_MspInit+0x128>)
 80014d4:	f001 fa68 	bl	80029a8 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80014d8:	2200      	movs	r2, #0
 80014da:	2100      	movs	r1, #0
 80014dc:	2042      	movs	r0, #66	; 0x42
 80014de:	f000 ff90 	bl	8002402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80014e2:	2042      	movs	r0, #66	; 0x42
 80014e4:	f000 ffa7 	bl	8002436 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80014e8:	bf00      	nop
 80014ea:	37f0      	adds	r7, #240	; 0xf0
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	46002400 	.word	0x46002400
 80014f4:	46020c00 	.word	0x46020c00
 80014f8:	42020800 	.word	0x42020800
 80014fc:	42020400 	.word	0x42020400

08001500 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b0bc      	sub	sp, #240	; 0xf0
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001508:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001518:	f107 0318 	add.w	r3, r7, #24
 800151c:	22c0      	movs	r2, #192	; 0xc0
 800151e:	2100      	movs	r1, #0
 8001520:	4618      	mov	r0, r3
 8001522:	f009 fc19 	bl	800ad58 <memset>
  if(hspi->Instance==SPI1)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a39      	ldr	r2, [pc, #228]	; (8001610 <HAL_SPI_MspInit+0x110>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d16b      	bne.n	8001608 <HAL_SPI_MspInit+0x108>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001530:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001534:	f04f 0300 	mov.w	r3, #0
 8001538:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 800153c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001540:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001544:	f107 0318 	add.w	r3, r7, #24
 8001548:	4618      	mov	r0, r3
 800154a:	f004 f88f 	bl	800566c <HAL_RCCEx_PeriphCLKConfig>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8001554:	f7ff fdc0 	bl	80010d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001558:	4b2e      	ldr	r3, [pc, #184]	; (8001614 <HAL_SPI_MspInit+0x114>)
 800155a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800155e:	4a2d      	ldr	r2, [pc, #180]	; (8001614 <HAL_SPI_MspInit+0x114>)
 8001560:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001564:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001568:	4b2a      	ldr	r3, [pc, #168]	; (8001614 <HAL_SPI_MspInit+0x114>)
 800156a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800156e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001576:	4b27      	ldr	r3, [pc, #156]	; (8001614 <HAL_SPI_MspInit+0x114>)
 8001578:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800157c:	4a25      	ldr	r2, [pc, #148]	; (8001614 <HAL_SPI_MspInit+0x114>)
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001586:	4b23      	ldr	r3, [pc, #140]	; (8001614 <HAL_SPI_MspInit+0x114>)
 8001588:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	613b      	str	r3, [r7, #16]
 8001592:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001594:	4b1f      	ldr	r3, [pc, #124]	; (8001614 <HAL_SPI_MspInit+0x114>)
 8001596:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800159a:	4a1e      	ldr	r2, [pc, #120]	; (8001614 <HAL_SPI_MspInit+0x114>)
 800159c:	f043 0310 	orr.w	r3, r3, #16
 80015a0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80015a4:	4b1b      	ldr	r3, [pc, #108]	; (8001614 <HAL_SPI_MspInit+0x114>)
 80015a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015aa:	f003 0310 	and.w	r3, r3, #16
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA7     ------> SPI1_MOSI
    PE13     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
 80015b2:	2390      	movs	r3, #144	; 0x90
 80015b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b8:	2302      	movs	r3, #2
 80015ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c4:	2300      	movs	r3, #0
 80015c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015ca:	2305      	movs	r3, #5
 80015cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015d4:	4619      	mov	r1, r3
 80015d6:	4810      	ldr	r0, [pc, #64]	; (8001618 <HAL_SPI_MspInit+0x118>)
 80015d8:	f001 f9e6 	bl	80029a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e4:	2302      	movs	r3, #2
 80015e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f0:	2300      	movs	r3, #0
 80015f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015f6:	2305      	movs	r3, #5
 80015f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015fc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001600:	4619      	mov	r1, r3
 8001602:	4806      	ldr	r0, [pc, #24]	; (800161c <HAL_SPI_MspInit+0x11c>)
 8001604:	f001 f9d0 	bl	80029a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001608:	bf00      	nop
 800160a:	37f0      	adds	r7, #240	; 0xf0
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40013000 	.word	0x40013000
 8001614:	46020c00 	.word	0x46020c00
 8001618:	42020000 	.word	0x42020000
 800161c:	42021000 	.word	0x42021000

08001620 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001630:	d116      	bne.n	8001660 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001632:	4b0d      	ldr	r3, [pc, #52]	; (8001668 <HAL_TIM_Base_MspInit+0x48>)
 8001634:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001638:	4a0b      	ldr	r2, [pc, #44]	; (8001668 <HAL_TIM_Base_MspInit+0x48>)
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001642:	4b09      	ldr	r3, [pc, #36]	; (8001668 <HAL_TIM_Base_MspInit+0x48>)
 8001644:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001650:	2200      	movs	r2, #0
 8001652:	2100      	movs	r1, #0
 8001654:	202d      	movs	r0, #45	; 0x2d
 8001656:	f000 fed4 	bl	8002402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800165a:	202d      	movs	r0, #45	; 0x2d
 800165c:	f000 feeb 	bl	8002436 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001660:	bf00      	nop
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	46020c00 	.word	0x46020c00

0800166c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b088      	sub	sp, #32
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 030c 	add.w	r3, r7, #12
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800168c:	d11e      	bne.n	80016cc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168e:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <HAL_TIM_MspPostInit+0x68>)
 8001690:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001694:	4a0f      	ldr	r2, [pc, #60]	; (80016d4 <HAL_TIM_MspPostInit+0x68>)
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800169e:	4b0d      	ldr	r3, [pc, #52]	; (80016d4 <HAL_TIM_MspPostInit+0x68>)
 80016a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80016ac:	230f      	movs	r3, #15
 80016ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b0:	2302      	movs	r3, #2
 80016b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016bc:	2301      	movs	r3, #1
 80016be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c0:	f107 030c 	add.w	r3, r7, #12
 80016c4:	4619      	mov	r1, r3
 80016c6:	4804      	ldr	r0, [pc, #16]	; (80016d8 <HAL_TIM_MspPostInit+0x6c>)
 80016c8:	f001 f96e 	bl	80029a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80016cc:	bf00      	nop
 80016ce:	3720      	adds	r7, #32
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	46020c00 	.word	0x46020c00
 80016d8:	42020000 	.word	0x42020000

080016dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016e0:	e7fe      	b.n	80016e0 <NMI_Handler+0x4>

080016e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016e6:	e7fe      	b.n	80016e6 <HardFault_Handler+0x4>

080016e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016ec:	e7fe      	b.n	80016ec <MemManage_Handler+0x4>

080016ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016f2:	e7fe      	b.n	80016f2 <BusFault_Handler+0x4>

080016f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <UsageFault_Handler+0x4>

080016fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001728:	f000 f9a8 	bl	8001a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}

08001730 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(TIM2->SR & TIM_SR_CC1IF)
 8001734:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d00f      	beq.n	8001762 <TIM2_IRQHandler+0x32>
	{
		TIM2->CCR1 += 25;
 8001742:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001748:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800174c:	3319      	adds	r3, #25
 800174e:	6353      	str	r3, [r2, #52]	; 0x34
		if(TIM2->CCR1 == 100)
 8001750:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001756:	2b64      	cmp	r3, #100	; 0x64
 8001758:	d103      	bne.n	8001762 <TIM2_IRQHandler+0x32>
		{
			TIM2->CCR1 = 25;
 800175a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800175e:	2219      	movs	r2, #25
 8001760:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	if(TIM2->SR & TIM_SR_CC2IF)
 8001762:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	f003 0304 	and.w	r3, r3, #4
 800176c:	2b00      	cmp	r3, #0
 800176e:	d00f      	beq.n	8001790 <TIM2_IRQHandler+0x60>
	{
		TIM2->CCR2 += 10;
 8001770:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001776:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800177a:	330a      	adds	r3, #10
 800177c:	6393      	str	r3, [r2, #56]	; 0x38
		if(TIM2->CCR2 == 100)
 800177e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001784:	2b64      	cmp	r3, #100	; 0x64
 8001786:	d103      	bne.n	8001790 <TIM2_IRQHandler+0x60>
		{
			TIM2->CCR2 = 10;
 8001788:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800178c:	220a      	movs	r2, #10
 800178e:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	if(TIM2->SR & TIM_SR_CC3IF)
 8001790:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001794:	691b      	ldr	r3, [r3, #16]
 8001796:	f003 0308 	and.w	r3, r3, #8
 800179a:	2b00      	cmp	r3, #0
 800179c:	d00f      	beq.n	80017be <TIM2_IRQHandler+0x8e>
	{
		TIM2->CCR3 += 50;
 800179e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017a8:	3332      	adds	r3, #50	; 0x32
 80017aa:	63d3      	str	r3, [r2, #60]	; 0x3c
		if(TIM2->CCR3 == 100)
 80017ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017b2:	2b64      	cmp	r3, #100	; 0x64
 80017b4:	d103      	bne.n	80017be <TIM2_IRQHandler+0x8e>
		{
			TIM2->CCR3 = 50;
 80017b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017ba:	2232      	movs	r2, #50	; 0x32
 80017bc:	63da      	str	r2, [r3, #60]	; 0x3c
		}
	}
	if(TIM2->SR & TIM_SR_CC4IF)
 80017be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017c2:	691b      	ldr	r3, [r3, #16]
 80017c4:	f003 0310 	and.w	r3, r3, #16
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d00f      	beq.n	80017ec <TIM2_IRQHandler+0xbc>
	{
		TIM2->CCR4 += 20;
 80017cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017d6:	3314      	adds	r3, #20
 80017d8:	6413      	str	r3, [r2, #64]	; 0x40
		if(TIM2->CCR4 == 100)
 80017da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	2b64      	cmp	r3, #100	; 0x64
 80017e2:	d103      	bne.n	80017ec <TIM2_IRQHandler+0xbc>
		{
			TIM2->CCR4 = 20;
 80017e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017e8:	2214      	movs	r2, #20
 80017ea:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <TIM2_IRQHandler+0xc8>)
 80017ee:	f006 ff9f 	bl	8008730 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  /* USER CODE END TIM2_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000294 	.word	0x20000294

080017fc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 Event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <I2C1_EV_IRQHandler+0x10>)
 8001802:	f001 fc77 	bl	80030f4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200000cc 	.word	0x200000cc

08001810 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001814:	4802      	ldr	r0, [pc, #8]	; (8001820 <LPUART1_IRQHandler+0x10>)
 8001816:	f008 faab 	bl	8009d70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000170 	.word	0x20000170

08001824 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8001824:	b5b0      	push	{r4, r5, r7, lr}
 8001826:	b08a      	sub	sp, #40	; 0x28
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */
	static uint8_t ledNo = 0;
	static uint8_t delay = 100;
  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 800182a:	482a      	ldr	r0, [pc, #168]	; (80018d4 <LPTIM1_IRQHandler+0xb0>)
 800182c:	f002 f943 	bl	8003ab6 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */
	delay--;
 8001830:	4b29      	ldr	r3, [pc, #164]	; (80018d8 <LPTIM1_IRQHandler+0xb4>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	3b01      	subs	r3, #1
 8001836:	b2da      	uxtb	r2, r3
 8001838:	4b27      	ldr	r3, [pc, #156]	; (80018d8 <LPTIM1_IRQHandler+0xb4>)
 800183a:	701a      	strb	r2, [r3, #0]
	if(delay > 0)
 800183c:	4b26      	ldr	r3, [pc, #152]	; (80018d8 <LPTIM1_IRQHandler+0xb4>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d143      	bne.n	80018cc <LPTIM1_IRQHandler+0xa8>
	{
		return;
	}
	delay = 100;
 8001844:	4b24      	ldr	r3, [pc, #144]	; (80018d8 <LPTIM1_IRQHandler+0xb4>)
 8001846:	2264      	movs	r2, #100	; 0x64
 8001848:	701a      	strb	r2, [r3, #0]
	switch (ledNo)
 800184a:	4b24      	ldr	r3, [pc, #144]	; (80018dc <LPTIM1_IRQHandler+0xb8>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b02      	cmp	r3, #2
 8001850:	d020      	beq.n	8001894 <LPTIM1_IRQHandler+0x70>
 8001852:	2b02      	cmp	r3, #2
 8001854:	dc2b      	bgt.n	80018ae <LPTIM1_IRQHandler+0x8a>
 8001856:	2b00      	cmp	r3, #0
 8001858:	d002      	beq.n	8001860 <LPTIM1_IRQHandler+0x3c>
 800185a:	2b01      	cmp	r3, #1
 800185c:	d00d      	beq.n	800187a <LPTIM1_IRQHandler+0x56>
 800185e:	e026      	b.n	80018ae <LPTIM1_IRQHandler+0x8a>
	{
	case 0:
		GPIOG->ODR ^= GPIO_ODR_OD2;
 8001860:	4b1f      	ldr	r3, [pc, #124]	; (80018e0 <LPTIM1_IRQHandler+0xbc>)
 8001862:	695b      	ldr	r3, [r3, #20]
 8001864:	4a1e      	ldr	r2, [pc, #120]	; (80018e0 <LPTIM1_IRQHandler+0xbc>)
 8001866:	f083 0304 	eor.w	r3, r3, #4
 800186a:	6153      	str	r3, [r2, #20]
		ledNo++;
 800186c:	4b1b      	ldr	r3, [pc, #108]	; (80018dc <LPTIM1_IRQHandler+0xb8>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	3301      	adds	r3, #1
 8001872:	b2da      	uxtb	r2, r3
 8001874:	4b19      	ldr	r3, [pc, #100]	; (80018dc <LPTIM1_IRQHandler+0xb8>)
 8001876:	701a      	strb	r2, [r3, #0]
		break;
 8001878:	e029      	b.n	80018ce <LPTIM1_IRQHandler+0xaa>
	case 1:
		GPIOC->ODR ^= GPIO_ODR_OD7;
 800187a:	4b1a      	ldr	r3, [pc, #104]	; (80018e4 <LPTIM1_IRQHandler+0xc0>)
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	4a19      	ldr	r2, [pc, #100]	; (80018e4 <LPTIM1_IRQHandler+0xc0>)
 8001880:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 8001884:	6153      	str	r3, [r2, #20]
		ledNo++;
 8001886:	4b15      	ldr	r3, [pc, #84]	; (80018dc <LPTIM1_IRQHandler+0xb8>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	3301      	adds	r3, #1
 800188c:	b2da      	uxtb	r2, r3
 800188e:	4b13      	ldr	r3, [pc, #76]	; (80018dc <LPTIM1_IRQHandler+0xb8>)
 8001890:	701a      	strb	r2, [r3, #0]
		break;
 8001892:	e01c      	b.n	80018ce <LPTIM1_IRQHandler+0xaa>
	case 2:
		GPIOB->ODR ^= GPIO_ODR_OD7;
 8001894:	4b14      	ldr	r3, [pc, #80]	; (80018e8 <LPTIM1_IRQHandler+0xc4>)
 8001896:	695b      	ldr	r3, [r3, #20]
 8001898:	4a13      	ldr	r2, [pc, #76]	; (80018e8 <LPTIM1_IRQHandler+0xc4>)
 800189a:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 800189e:	6153      	str	r3, [r2, #20]
		ledNo++;
 80018a0:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <LPTIM1_IRQHandler+0xb8>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	3301      	adds	r3, #1
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <LPTIM1_IRQHandler+0xb8>)
 80018aa:	701a      	strb	r2, [r3, #0]
		break;
 80018ac:	e00f      	b.n	80018ce <LPTIM1_IRQHandler+0xaa>
	default:
		ledNo = 0;
 80018ae:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <LPTIM1_IRQHandler+0xb8>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	701a      	strb	r2, [r3, #0]
		uint8_t data[] = "Hello World from STM32U575 bitches...\r\n";
 80018b4:	4b0d      	ldr	r3, [pc, #52]	; (80018ec <LPTIM1_IRQHandler+0xc8>)
 80018b6:	463c      	mov	r4, r7
 80018b8:	461d      	mov	r5, r3
 80018ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018c2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80018c6:	e884 0003 	stmia.w	r4, {r0, r1}
		//HAL_UART_Transmit(&hlpuart1, data, sizeof(data), 100);
		break;
 80018ca:	e000      	b.n	80018ce <LPTIM1_IRQHandler+0xaa>
		return;
 80018cc:	bf00      	nop
	}
  /* USER CODE END LPTIM1_IRQn 1 */
}
 80018ce:	3728      	adds	r7, #40	; 0x28
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bdb0      	pop	{r4, r5, r7, pc}
 80018d4:	20000120 	.word	0x20000120
 80018d8:	20000000 	.word	0x20000000
 80018dc:	200002e0 	.word	0x200002e0
 80018e0:	42021800 	.word	0x42021800
 80018e4:	42020800 	.word	0x42020800
 80018e8:	42020400 	.word	0x42020400
 80018ec:	0800adc8 	.word	0x0800adc8

080018f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018f4:	4b18      	ldr	r3, [pc, #96]	; (8001958 <SystemInit+0x68>)
 80018f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018fa:	4a17      	ldr	r2, [pc, #92]	; (8001958 <SystemInit+0x68>)
 80018fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001900:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001904:	4b15      	ldr	r3, [pc, #84]	; (800195c <SystemInit+0x6c>)
 8001906:	2201      	movs	r2, #1
 8001908:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800190a:	4b14      	ldr	r3, [pc, #80]	; (800195c <SystemInit+0x6c>)
 800190c:	2200      	movs	r2, #0
 800190e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001910:	4b12      	ldr	r3, [pc, #72]	; (800195c <SystemInit+0x6c>)
 8001912:	2200      	movs	r2, #0
 8001914:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001916:	4b11      	ldr	r3, [pc, #68]	; (800195c <SystemInit+0x6c>)
 8001918:	2200      	movs	r2, #0
 800191a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 800191c:	4b0f      	ldr	r3, [pc, #60]	; (800195c <SystemInit+0x6c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a0e      	ldr	r2, [pc, #56]	; (800195c <SystemInit+0x6c>)
 8001922:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001926:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800192a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 800192c:	4b0b      	ldr	r3, [pc, #44]	; (800195c <SystemInit+0x6c>)
 800192e:	2200      	movs	r2, #0
 8001930:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001932:	4b0a      	ldr	r3, [pc, #40]	; (800195c <SystemInit+0x6c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a09      	ldr	r2, [pc, #36]	; (800195c <SystemInit+0x6c>)
 8001938:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800193c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800193e:	4b07      	ldr	r3, [pc, #28]	; (800195c <SystemInit+0x6c>)
 8001940:	2200      	movs	r2, #0
 8001942:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001944:	4b04      	ldr	r3, [pc, #16]	; (8001958 <SystemInit+0x68>)
 8001946:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800194a:	609a      	str	r2, [r3, #8]
  #endif
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000ed00 	.word	0xe000ed00
 800195c:	46020c00 	.word	0x46020c00

08001960 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001960:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001998 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001964:	f7ff ffc4 	bl	80018f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001968:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800196a:	e003      	b.n	8001974 <LoopCopyDataInit>

0800196c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800196c:	4b0b      	ldr	r3, [pc, #44]	; (800199c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800196e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001970:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001972:	3104      	adds	r1, #4

08001974 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001974:	480a      	ldr	r0, [pc, #40]	; (80019a0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001976:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001978:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800197a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800197c:	d3f6      	bcc.n	800196c <CopyDataInit>
	ldr	r2, =_sbss
 800197e:	4a0a      	ldr	r2, [pc, #40]	; (80019a8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001980:	e002      	b.n	8001988 <LoopFillZerobss>

08001982 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001982:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001984:	f842 3b04 	str.w	r3, [r2], #4

08001988 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <LoopForever+0x16>)
	cmp	r2, r3
 800198a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800198c:	d3f9      	bcc.n	8001982 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800198e:	f009 f9eb 	bl	800ad68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001992:	f7fe fe01 	bl	8000598 <main>

08001996 <LoopForever>:

LoopForever:
    b LoopForever
 8001996:	e7fe      	b.n	8001996 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001998:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 800199c:	0800af00 	.word	0x0800af00
	ldr	r0, =_sdata
 80019a0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80019a4:	2000000d 	.word	0x2000000d
	ldr	r2, =_sbss
 80019a8:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 80019ac:	200002e8 	.word	0x200002e8

080019b0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019b0:	e7fe      	b.n	80019b0 <ADC1_IRQHandler>
	...

080019b4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019b8:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <HAL_Init+0x4c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a10      	ldr	r2, [pc, #64]	; (8001a00 <HAL_Init+0x4c>)
 80019be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c4:	2003      	movs	r0, #3
 80019c6:	f000 fd11 	bl	80023ec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80019ca:	f003 fc71 	bl	80052b0 <HAL_RCC_GetSysClockFreq>
 80019ce:	4602      	mov	r2, r0
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <HAL_Init+0x50>)
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	f003 030f 	and.w	r3, r3, #15
 80019d8:	490b      	ldr	r1, [pc, #44]	; (8001a08 <HAL_Init+0x54>)
 80019da:	5ccb      	ldrb	r3, [r1, r3]
 80019dc:	fa22 f303 	lsr.w	r3, r2, r3
 80019e0:	4a0a      	ldr	r2, [pc, #40]	; (8001a0c <HAL_Init+0x58>)
 80019e2:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019e4:	200f      	movs	r0, #15
 80019e6:	f000 f813 	bl	8001a10 <HAL_InitTick>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e002      	b.n	80019fa <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80019f4:	f7ff fb76 	bl	80010e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40022000 	.word	0x40022000
 8001a04:	46020c00 	.word	0x46020c00
 8001a08:	0800adf0 	.word	0x0800adf0
 8001a0c:	20000004 	.word	0x20000004

08001a10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001a18:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <HAL_InitTick+0x60>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d101      	bne.n	8001a24 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e021      	b.n	8001a68 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001a24:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <HAL_InitTick+0x64>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <HAL_InitTick+0x60>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f000 fd09 	bl	8002452 <HAL_SYSTICK_Config>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e00e      	b.n	8001a68 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b0f      	cmp	r3, #15
 8001a4e:	d80a      	bhi.n	8001a66 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a50:	2200      	movs	r2, #0
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	f04f 30ff 	mov.w	r0, #4294967295
 8001a58:	f000 fcd3 	bl	8002402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a5c:	4a06      	ldr	r2, [pc, #24]	; (8001a78 <HAL_InitTick+0x68>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
 8001a64:	e000      	b.n	8001a68 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	2000000c 	.word	0x2000000c
 8001a74:	20000004 	.word	0x20000004
 8001a78:	20000008 	.word	0x20000008

08001a7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <HAL_IncTick+0x20>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	461a      	mov	r2, r3
 8001a86:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <HAL_IncTick+0x24>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	4a04      	ldr	r2, [pc, #16]	; (8001aa0 <HAL_IncTick+0x24>)
 8001a8e:	6013      	str	r3, [r2, #0]
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	2000000c 	.word	0x2000000c
 8001aa0:	200002e4 	.word	0x200002e4

08001aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa8:	4b03      	ldr	r3, [pc, #12]	; (8001ab8 <HAL_GetTick+0x14>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	200002e4 	.word	0x200002e4

08001abc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	601a      	str	r2, [r3, #0]
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
	...

08001ae4 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a0a      	ldr	r2, [pc, #40]	; (8001b20 <LL_ADC_SetResolution+0x3c>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d104      	bne.n	8001b04 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	3b01      	subs	r3, #1
 8001afe:	f003 030c 	and.w	r3, r3, #12
 8001b02:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	f023 020c 	bic.w	r2, r3, #12
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	60da      	str	r2, [r3, #12]
}
 8001b14:	bf00      	nop
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	46021000 	.word	0x46021000

08001b24 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b32:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b36:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	2a00      	cmp	r2, #0
 8001b4e:	d002      	beq.n	8001b56 <LL_ADC_SetGainCompensation+0x32>
 8001b50:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001b54:	e000      	b.n	8001b58 <LL_ADC_SetGainCompensation+0x34>
 8001b56:	2200      	movs	r2, #0
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	671a      	str	r2, [r3, #112]	; 0x70
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b085      	sub	sp, #20
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	60f8      	str	r0, [r7, #12]
 8001b72:	60b9      	str	r1, [r7, #8]
 8001b74:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	695a      	ldr	r2, [r3, #20]
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	2107      	movs	r1, #7
 8001b82:	fa01 f303 	lsl.w	r3, r1, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	401a      	ands	r2, r3
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	6879      	ldr	r1, [r7, #4]
 8001b92:	fa01 f303 	lsl.w	r3, r1, r3
 8001b96:	431a      	orrs	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001b9c:	bf00      	nop
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001bb8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	6093      	str	r3, [r2, #8]
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001be0:	d101      	bne.n	8001be6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001be2:	2301      	movs	r3, #1
 8001be4:	e000      	b.n	8001be8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001c04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c08:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c30:	d101      	bne.n	8001c36 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c32:	2301      	movs	r3, #1
 8001c34:	e000      	b.n	8001c38 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d101      	bne.n	8001c5c <LL_ADC_IsEnabled+0x18>
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e000      	b.n	8001c5e <LL_ADC_IsEnabled+0x1a>
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b083      	sub	sp, #12
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 0304 	and.w	r3, r3, #4
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	d101      	bne.n	8001c82 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e000      	b.n	8001c84 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 0308 	and.w	r3, r3, #8
 8001ca0:	2b08      	cmp	r3, #8
 8001ca2:	d101      	bne.n	8001ca8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e000      	b.n	8001caa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
	...

08001cb8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08a      	sub	sp, #40	; 0x28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e2b3      	b.n	8002240 <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a8b      	ldr	r2, [pc, #556]	; (8001f14 <HAL_ADC_Init+0x25c>)
 8001ce6:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d109      	bne.n	8001d04 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7ff fa11 	bl	8001118 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ff5f 	bl	8001bcc <LL_ADC_IsDeepPowerDownEnabled>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d004      	beq.n	8001d1e <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff ff45 	bl	8001ba8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff ff7a 	bl	8001c1c <LL_ADC_IsInternalRegulatorEnabled>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d115      	bne.n	8001d5a <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff ff5e 	bl	8001bf4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d38:	4b77      	ldr	r3, [pc, #476]	; (8001f18 <HAL_ADC_Init+0x260>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	099b      	lsrs	r3, r3, #6
 8001d3e:	4a77      	ldr	r2, [pc, #476]	; (8001f1c <HAL_ADC_Init+0x264>)
 8001d40:	fba2 2303 	umull	r2, r3, r2, r3
 8001d44:	099b      	lsrs	r3, r3, #6
 8001d46:	3301      	adds	r3, #1
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d4c:	e002      	b.n	8001d54 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	3b01      	subs	r3, #1
 8001d52:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f9      	bne.n	8001d4e <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff ff5c 	bl	8001c1c <LL_ADC_IsInternalRegulatorEnabled>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10e      	bne.n	8001d88 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d6e:	f043 0210 	orr.w	r2, r3, #16
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d7a:	f043 0201 	orr.w	r2, r3, #1
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff ff6c 	bl	8001c6a <LL_ADC_REG_IsConversionOngoing>
 8001d92:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d98:	f003 0310 	and.w	r3, r3, #16
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f040 8244 	bne.w	800222a <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f040 8240 	bne.w	800222a <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001dae:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001db2:	f043 0202 	orr.w	r2, r3, #2
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff ff40 	bl	8001c44 <LL_ADC_IsEnabled>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d140      	bne.n	8001e4c <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a51      	ldr	r2, [pc, #324]	; (8001f14 <HAL_ADC_Init+0x25c>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d028      	beq.n	8001e26 <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a51      	ldr	r2, [pc, #324]	; (8001f20 <HAL_ADC_Init+0x268>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d109      	bne.n	8001df2 <HAL_ADC_Init+0x13a>
 8001dde:	4850      	ldr	r0, [pc, #320]	; (8001f20 <HAL_ADC_Init+0x268>)
 8001de0:	f7ff ff30 	bl	8001c44 <LL_ADC_IsEnabled>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	bf0c      	ite	eq
 8001dea:	2301      	moveq	r3, #1
 8001dec:	2300      	movne	r3, #0
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	e008      	b.n	8001e04 <HAL_ADC_Init+0x14c>
 8001df2:	4848      	ldr	r0, [pc, #288]	; (8001f14 <HAL_ADC_Init+0x25c>)
 8001df4:	f7ff ff26 	bl	8001c44 <LL_ADC_IsEnabled>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	bf0c      	ite	eq
 8001dfe:	2301      	moveq	r3, #1
 8001e00:	2300      	movne	r3, #0
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d021      	beq.n	8001e4c <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a44      	ldr	r2, [pc, #272]	; (8001f20 <HAL_ADC_Init+0x268>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d101      	bne.n	8001e16 <HAL_ADC_Init+0x15e>
 8001e12:	4a44      	ldr	r2, [pc, #272]	; (8001f24 <HAL_ADC_Init+0x26c>)
 8001e14:	e000      	b.n	8001e18 <HAL_ADC_Init+0x160>
 8001e16:	4a44      	ldr	r2, [pc, #272]	; (8001f28 <HAL_ADC_Init+0x270>)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4610      	mov	r0, r2
 8001e20:	f7ff fe4c 	bl	8001abc <LL_ADC_SetCommonClock>
 8001e24:	e012      	b.n	8001e4c <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4610      	mov	r0, r2
 8001e32:	f7ff fe57 	bl	8001ae4 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8001e36:	4b3c      	ldr	r3, [pc, #240]	; (8001f28 <HAL_ADC_Init+0x270>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001e46:	4938      	ldr	r1, [pc, #224]	; (8001f28 <HAL_ADC_Init+0x270>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a30      	ldr	r2, [pc, #192]	; (8001f14 <HAL_ADC_Init+0x25c>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d010      	beq.n	8001e78 <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e5c:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001e62:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8001e68:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001e70:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8001e72:	4313      	orrs	r3, r2
 8001e74:	623b      	str	r3, [r7, #32]
 8001e76:	e030      	b.n	8001eda <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	7f1b      	ldrb	r3, [r3, #28]
 8001e7c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e84:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e86:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e8c:	2a00      	cmp	r2, #0
 8001e8e:	d002      	beq.n	8001e96 <HAL_ADC_Init+0x1de>
 8001e90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e94:	e000      	b.n	8001e98 <HAL_ADC_Init+0x1e0>
 8001e96:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001e98:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001e9e:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	da04      	bge.n	8001eb2 <HAL_ADC_Init+0x1fa>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001eb0:	e001      	b.n	8001eb6 <HAL_ADC_Init+0x1fe>
 8001eb2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 8001eb6:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4918      	ldr	r1, [pc, #96]	; (8001f20 <HAL_ADC_Init+0x268>)
 8001ebe:	428b      	cmp	r3, r1
 8001ec0:	d103      	bne.n	8001eca <HAL_ADC_Init+0x212>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ec8:	e003      	b.n	8001ed2 <HAL_ADC_Init+0x21a>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ed0:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001ed2:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ed4:	6a3a      	ldr	r2, [r7, #32]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d12f      	bne.n	8001f44 <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a0a      	ldr	r2, [pc, #40]	; (8001f14 <HAL_ADC_Init+0x25c>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d007      	beq.n	8001efe <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	045b      	lsls	r3, r3, #17
 8001ef6:	6a3a      	ldr	r2, [r7, #32]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	623b      	str	r3, [r7, #32]
 8001efc:	e022      	b.n	8001f44 <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d111      	bne.n	8001f2c <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001f08:	6a3b      	ldr	r3, [r7, #32]
 8001f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f0e:	623b      	str	r3, [r7, #32]
 8001f10:	e018      	b.n	8001f44 <HAL_ADC_Init+0x28c>
 8001f12:	bf00      	nop
 8001f14:	46021000 	.word	0x46021000
 8001f18:	20000004 	.word	0x20000004
 8001f1c:	053e2d63 	.word	0x053e2d63
 8001f20:	42028000 	.word	0x42028000
 8001f24:	42028308 	.word	0x42028308
 8001f28:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f30:	f043 0220 	orr.w	r2, r3, #32
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f3c:	f043 0201 	orr.w	r2, r3, #1
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a92      	ldr	r2, [pc, #584]	; (8002194 <HAL_ADC_Init+0x4dc>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d018      	beq.n	8001f80 <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d009      	beq.n	8001f6a <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f5a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f62:	4313      	orrs	r3, r2
 8001f64:	6a3a      	ldr	r2, [r7, #32]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68da      	ldr	r2, [r3, #12]
 8001f70:	4b89      	ldr	r3, [pc, #548]	; (8002198 <HAL_ADC_Init+0x4e0>)
 8001f72:	4013      	ands	r3, r2
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	6812      	ldr	r2, [r2, #0]
 8001f78:	6a39      	ldr	r1, [r7, #32]
 8001f7a:	430b      	orrs	r3, r1
 8001f7c:	60d3      	str	r3, [r2, #12]
 8001f7e:	e031      	b.n	8001fe4 <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d009      	beq.n	8001f9c <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f8c:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f94:	4313      	orrs	r3, r2
 8001f96:	6a3a      	ldr	r2, [r7, #32]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68da      	ldr	r2, [r3, #12]
 8001fa2:	4b7e      	ldr	r3, [pc, #504]	; (800219c <HAL_ADC_Init+0x4e4>)
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	6812      	ldr	r2, [r2, #0]
 8001faa:	6a39      	ldr	r1, [r7, #32]
 8001fac:	430b      	orrs	r3, r1
 8001fae:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d008      	beq.n	8001fca <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a1a      	ldr	r2, [r3, #32]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d008      	beq.n	8001fe4 <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a6a      	ldr	r2, [pc, #424]	; (8002194 <HAL_ADC_Init+0x4dc>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	f000 8093 	beq.w	8002116 <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff fe38 	bl	8001c6a <LL_ADC_REG_IsConversionOngoing>
 8001ffa:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff fe45 	bl	8001c90 <LL_ADC_INJ_IsConversionOngoing>
 8002006:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d161      	bne.n	80020d2 <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d15e      	bne.n	80020d2 <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	7f1b      	ldrb	r3, [r3, #28]
 8002018:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4960      	ldr	r1, [pc, #384]	; (80021a0 <HAL_ADC_Init+0x4e8>)
 8002020:	428b      	cmp	r3, r1
 8002022:	d102      	bne.n	800202a <HAL_ADC_Init+0x372>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002028:	e002      	b.n	8002030 <HAL_ADC_Init+0x378>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800202e:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002030:	4313      	orrs	r3, r2
 8002032:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800203e:	f023 0303 	bic.w	r3, r3, #3
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	6812      	ldr	r2, [r2, #0]
 8002046:	6a39      	ldr	r1, [r7, #32]
 8002048:	430b      	orrs	r3, r1
 800204a:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d007      	beq.n	8002064 <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	4619      	mov	r1, r3
 800205e:	4610      	mov	r0, r2
 8002060:	f7ff fd60 	bl	8001b24 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800206a:	2b01      	cmp	r3, #1
 800206c:	d11e      	bne.n	80020ac <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002072:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	691a      	ldr	r2, [r3, #16]
 800207a:	4b4a      	ldr	r3, [pc, #296]	; (80021a4 <HAL_ADC_Init+0x4ec>)
 800207c:	4013      	ands	r3, r2
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002082:	0411      	lsls	r1, r2, #16
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002088:	4311      	orrs	r1, r2
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6e12      	ldr	r2, [r2, #96]	; 0x60
 800208e:	4311      	orrs	r1, r2
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8002094:	4311      	orrs	r1, r2
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800209a:	0892      	lsrs	r2, r2, #2
 800209c:	430a      	orrs	r2, r1
 800209e:	431a      	orrs	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f042 0201 	orr.w	r2, r2, #1
 80020a8:	611a      	str	r2, [r3, #16]
 80020aa:	e007      	b.n	80020bc <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	691a      	ldr	r2, [r3, #16]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 0201 	bic.w	r2, r2, #1
 80020ba:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	430a      	orrs	r2, r1
 80020d0:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d10c      	bne.n	80020f4 <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e0:	f023 010f 	bic.w	r1, r3, #15
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e8:	1e5a      	subs	r2, r3, #1
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	631a      	str	r2, [r3, #48]	; 0x30
 80020f2:	e007      	b.n	8002104 <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f022 020f 	bic.w	r2, r2, #15
 8002102:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002108:	f023 0303 	bic.w	r3, r3, #3
 800210c:	f043 0201 	orr.w	r2, r3, #1
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002114:	e092      	b.n	800223c <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800211c:	2b01      	cmp	r3, #1
 800211e:	d111      	bne.n	8002144 <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002128:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                     hadc->Init.Oversampling.RightBitShift |
 800212e:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8002134:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002136:	69fa      	ldr	r2, [r7, #28]
 8002138:	4313      	orrs	r3, r2
 800213a:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f043 0301 	orr.w	r3, r3, #1
 8002142:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	691a      	ldr	r2, [r3, #16]
 800214a:	4b17      	ldr	r3, [pc, #92]	; (80021a8 <HAL_ADC_Init+0x4f0>)
 800214c:	4013      	ands	r3, r2
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	6812      	ldr	r2, [r2, #0]
 8002152:	69f9      	ldr	r1, [r7, #28]
 8002154:	430b      	orrs	r3, r1
 8002156:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6818      	ldr	r0, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002160:	461a      	mov	r2, r3
 8002162:	2100      	movs	r1, #0
 8002164:	f7ff fd01 	bl	8001b6a <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6818      	ldr	r0, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002170:	461a      	mov	r2, r3
 8002172:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 8002176:	f7ff fcf8 	bl	8001b6a <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d114      	bne.n	80021ac <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f062 020f 	orn	r2, r2, #15
 8002190:	629a      	str	r2, [r3, #40]	; 0x28
 8002192:	e024      	b.n	80021de <HAL_ADC_Init+0x526>
 8002194:	46021000 	.word	0x46021000
 8002198:	fff0c013 	.word	0xfff0c013
 800219c:	ffde800d 	.word	0xffde800d
 80021a0:	42028000 	.word	0x42028000
 80021a4:	fc00f81e 	.word	0xfc00f81e
 80021a8:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021b4:	d113      	bne.n	80021de <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c0:	3b01      	subs	r3, #1
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	f003 031c 	and.w	r3, r3, #28
 80021c8:	f06f 020f 	mvn.w	r2, #15
 80021cc:	fa02 f103 	lsl.w	r1, r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	430a      	orrs	r2, r1
 80021dc:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68da      	ldr	r2, [r3, #12]
 80021e4:	4b18      	ldr	r3, [pc, #96]	; (8002248 <HAL_ADC_Init+0x590>)
 80021e6:	4013      	ands	r3, r2
 80021e8:	6a3a      	ldr	r2, [r7, #32]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d10b      	bne.n	8002206 <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021f8:	f023 0303 	bic.w	r3, r3, #3
 80021fc:	f043 0201 	orr.w	r2, r3, #1
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002204:	e01a      	b.n	800223c <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800220a:	f023 0312 	bic.w	r3, r3, #18
 800220e:	f043 0210 	orr.w	r2, r3, #16
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800221a:	f043 0201 	orr.w	r2, r3, #1
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002228:	e008      	b.n	800223c <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800222e:	f043 0210 	orr.w	r2, r3, #16
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 800223c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002240:	4618      	mov	r0, r3
 8002242:	3728      	adds	r7, #40	; 0x28
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	833ffff3 	.word	0x833ffff3

0800224c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800225c:	4b0c      	ldr	r3, [pc, #48]	; (8002290 <__NVIC_SetPriorityGrouping+0x44>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002268:	4013      	ands	r3, r2
 800226a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002274:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800227c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800227e:	4a04      	ldr	r2, [pc, #16]	; (8002290 <__NVIC_SetPriorityGrouping+0x44>)
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	60d3      	str	r3, [r2, #12]
}
 8002284:	bf00      	nop
 8002286:	3714      	adds	r7, #20
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002298:	4b04      	ldr	r3, [pc, #16]	; (80022ac <__NVIC_GetPriorityGrouping+0x18>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	0a1b      	lsrs	r3, r3, #8
 800229e:	f003 0307 	and.w	r3, r3, #7
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	e000ed00 	.word	0xe000ed00

080022b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	db0b      	blt.n	80022da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022c2:	79fb      	ldrb	r3, [r7, #7]
 80022c4:	f003 021f 	and.w	r2, r3, #31
 80022c8:	4907      	ldr	r1, [pc, #28]	; (80022e8 <__NVIC_EnableIRQ+0x38>)
 80022ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ce:	095b      	lsrs	r3, r3, #5
 80022d0:	2001      	movs	r0, #1
 80022d2:	fa00 f202 	lsl.w	r2, r0, r2
 80022d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	e000e100 	.word	0xe000e100

080022ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	6039      	str	r1, [r7, #0]
 80022f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	db0a      	blt.n	8002316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	b2da      	uxtb	r2, r3
 8002304:	490c      	ldr	r1, [pc, #48]	; (8002338 <__NVIC_SetPriority+0x4c>)
 8002306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230a:	0112      	lsls	r2, r2, #4
 800230c:	b2d2      	uxtb	r2, r2
 800230e:	440b      	add	r3, r1
 8002310:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002314:	e00a      	b.n	800232c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	b2da      	uxtb	r2, r3
 800231a:	4908      	ldr	r1, [pc, #32]	; (800233c <__NVIC_SetPriority+0x50>)
 800231c:	79fb      	ldrb	r3, [r7, #7]
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	3b04      	subs	r3, #4
 8002324:	0112      	lsls	r2, r2, #4
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	440b      	add	r3, r1
 800232a:	761a      	strb	r2, [r3, #24]
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	e000e100 	.word	0xe000e100
 800233c:	e000ed00 	.word	0xe000ed00

08002340 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002340:	b480      	push	{r7}
 8002342:	b089      	sub	sp, #36	; 0x24
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	f1c3 0307 	rsb	r3, r3, #7
 800235a:	2b04      	cmp	r3, #4
 800235c:	bf28      	it	cs
 800235e:	2304      	movcs	r3, #4
 8002360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3304      	adds	r3, #4
 8002366:	2b06      	cmp	r3, #6
 8002368:	d902      	bls.n	8002370 <NVIC_EncodePriority+0x30>
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	3b03      	subs	r3, #3
 800236e:	e000      	b.n	8002372 <NVIC_EncodePriority+0x32>
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002374:	f04f 32ff 	mov.w	r2, #4294967295
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	43da      	mvns	r2, r3
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	401a      	ands	r2, r3
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002388:	f04f 31ff 	mov.w	r1, #4294967295
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	fa01 f303 	lsl.w	r3, r1, r3
 8002392:	43d9      	mvns	r1, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002398:	4313      	orrs	r3, r2
         );
}
 800239a:	4618      	mov	r0, r3
 800239c:	3724      	adds	r7, #36	; 0x24
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
	...

080023a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023b8:	d301      	bcc.n	80023be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ba:	2301      	movs	r3, #1
 80023bc:	e00f      	b.n	80023de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023be:	4a0a      	ldr	r2, [pc, #40]	; (80023e8 <SysTick_Config+0x40>)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023c6:	210f      	movs	r1, #15
 80023c8:	f04f 30ff 	mov.w	r0, #4294967295
 80023cc:	f7ff ff8e 	bl	80022ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023d0:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <SysTick_Config+0x40>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023d6:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <SysTick_Config+0x40>)
 80023d8:	2207      	movs	r2, #7
 80023da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	e000e010 	.word	0xe000e010

080023ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7ff ff29 	bl	800224c <__NVIC_SetPriorityGrouping>
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b086      	sub	sp, #24
 8002406:	af00      	add	r7, sp, #0
 8002408:	4603      	mov	r3, r0
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	607a      	str	r2, [r7, #4]
 800240e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002410:	f7ff ff40 	bl	8002294 <__NVIC_GetPriorityGrouping>
 8002414:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	68b9      	ldr	r1, [r7, #8]
 800241a:	6978      	ldr	r0, [r7, #20]
 800241c:	f7ff ff90 	bl	8002340 <NVIC_EncodePriority>
 8002420:	4602      	mov	r2, r0
 8002422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002426:	4611      	mov	r1, r2
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff ff5f 	bl	80022ec <__NVIC_SetPriority>
}
 800242e:	bf00      	nop
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	4603      	mov	r3, r0
 800243e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff ff33 	bl	80022b0 <__NVIC_EnableIRQ>
}
 800244a:	bf00      	nop
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7ff ffa4 	bl	80023a8 <SysTick_Config>
 8002460:	4603      	mov	r3, r0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b082      	sub	sp, #8
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e014      	b.n	80024a6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	791b      	ldrb	r3, [r3, #4]
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d105      	bne.n	8002492 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7fe fe89 	bl	80011a4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2202      	movs	r2, #2
 8002496:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
	...

080024b0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08a      	sub	sp, #40	; 0x28
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024bc:	2300      	movs	r3, #0
 80024be:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d002      	beq.n	80024cc <HAL_DAC_ConfigChannel+0x1c>
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e184      	b.n	80027da <HAL_DAC_ConfigChannel+0x32a>
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	795b      	ldrb	r3, [r3, #5]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d101      	bne.n	80024dc <HAL_DAC_ConfigChannel+0x2c>
 80024d8:	2302      	movs	r3, #2
 80024da:	e17e      	b.n	80027da <HAL_DAC_ConfigChannel+0x32a>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2201      	movs	r2, #1
 80024e0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2202      	movs	r2, #2
 80024e6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	2b04      	cmp	r3, #4
 80024ee:	d17a      	bne.n	80025e6 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80024f0:	f7ff fad8 	bl	8001aa4 <HAL_GetTick>
 80024f4:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d13d      	bne.n	8002578 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80024fc:	e018      	b.n	8002530 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80024fe:	f7ff fad1 	bl	8001aa4 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b01      	cmp	r3, #1
 800250a:	d911      	bls.n	8002530 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002512:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00a      	beq.n	8002530 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	f043 0208 	orr.w	r2, r3, #8
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2203      	movs	r2, #3
 800252a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e154      	b.n	80027da <HAL_DAC_ConfigChannel+0x32a>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002536:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1df      	bne.n	80024fe <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002546:	641a      	str	r2, [r3, #64]	; 0x40
 8002548:	e020      	b.n	800258c <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800254a:	f7ff faab 	bl	8001aa4 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b01      	cmp	r3, #1
 8002556:	d90f      	bls.n	8002578 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800255e:	2b00      	cmp	r3, #0
 8002560:	da0a      	bge.n	8002578 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	f043 0208 	orr.w	r2, r3, #8
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2203      	movs	r2, #3
 8002572:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e130      	b.n	80027da <HAL_DAC_ConfigChannel+0x32a>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800257e:	2b00      	cmp	r3, #0
 8002580:	dbe3      	blt.n	800254a <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800258a:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f003 0310 	and.w	r3, r3, #16
 8002598:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800259c:	fa01 f303 	lsl.w	r3, r1, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	ea02 0103 	and.w	r1, r2, r3
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f003 0310 	and.w	r3, r3, #16
 80025b0:	409a      	lsls	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f003 0310 	and.w	r3, r3, #16
 80025c6:	21ff      	movs	r1, #255	; 0xff
 80025c8:	fa01 f303 	lsl.w	r3, r1, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	ea02 0103 	and.w	r1, r2, r3
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f003 0310 	and.w	r3, r3, #16
 80025dc:	409a      	lsls	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  /* Autonomous mode configuration */
  MODIFY_REG(hdac->Instance->AUTOCR, DAC_AUTOCR_AUTOMODE, sConfig->DAC_AutonomousMode);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ec:	f423 0180 	bic.w	r1, r3, #4194304	; 0x400000
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	655a      	str	r2, [r3, #84]	; 0x54

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	69db      	ldr	r3, [r3, #28]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d11d      	bne.n	8002640 <HAL_DAC_ConfigChannel+0x190>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800260a:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f003 0310 	and.w	r3, r3, #16
 8002612:	221f      	movs	r2, #31
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	43db      	mvns	r3, r3
 800261a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800261c:	4013      	ands	r3, r2
 800261e:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f003 0310 	and.w	r3, r3, #16
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002634:	4313      	orrs	r3, r2
 8002636:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800263e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002646:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f003 0310 	and.w	r3, r3, #16
 800264e:	2207      	movs	r2, #7
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002658:	4013      	ands	r3, r2
 800265a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d102      	bne.n	800266a <HAL_DAC_ConfigChannel+0x1ba>
  {
    connectOnChip = 0x00000000UL;
 8002664:	2300      	movs	r3, #0
 8002666:	623b      	str	r3, [r7, #32]
 8002668:	e00f      	b.n	800268a <HAL_DAC_ConfigChannel+0x1da>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	2b02      	cmp	r3, #2
 8002670:	d102      	bne.n	8002678 <HAL_DAC_ConfigChannel+0x1c8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002672:	2301      	movs	r3, #1
 8002674:	623b      	str	r3, [r7, #32]
 8002676:	e008      	b.n	800268a <HAL_DAC_ConfigChannel+0x1da>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d102      	bne.n	8002686 <HAL_DAC_ConfigChannel+0x1d6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002680:	2301      	movs	r3, #1
 8002682:	623b      	str	r3, [r7, #32]
 8002684:	e001      	b.n	800268a <HAL_DAC_ConfigChannel+0x1da>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002686:	2300      	movs	r3, #0
 8002688:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	68da      	ldr	r2, [r3, #12]
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	4313      	orrs	r3, r2
 8002694:	6a3a      	ldr	r2, [r7, #32]
 8002696:	4313      	orrs	r3, r2
 8002698:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f003 0310 	and.w	r3, r3, #16
 80026a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	43db      	mvns	r3, r3
 80026aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ac:	4013      	ands	r3, r2
 80026ae:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	7a1b      	ldrb	r3, [r3, #8]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d102      	bne.n	80026be <HAL_DAC_ConfigChannel+0x20e>
 80026b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026bc:	e000      	b.n	80026c0 <HAL_DAC_ConfigChannel+0x210>
 80026be:	2300      	movs	r3, #0
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f003 0310 	and.w	r3, r3, #16
 80026cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	43db      	mvns	r3, r3
 80026d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d8:	4013      	ands	r3, r2
 80026da:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	7a5b      	ldrb	r3, [r3, #9]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d102      	bne.n	80026ea <HAL_DAC_ConfigChannel+0x23a>
 80026e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026e8:	e000      	b.n	80026ec <HAL_DAC_ConfigChannel+0x23c>
 80026ea:	2300      	movs	r3, #0
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80026f8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d114      	bne.n	800272c <HAL_DAC_ConfigChannel+0x27c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8002702:	f002 fed7 	bl	80054b4 <HAL_RCC_GetHCLKFreq>
 8002706:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	4a36      	ldr	r2, [pc, #216]	; (80027e4 <HAL_DAC_ConfigChannel+0x334>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d904      	bls.n	800271a <HAL_DAC_ConfigChannel+0x26a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8002710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002712:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002716:	627b      	str	r3, [r7, #36]	; 0x24
 8002718:	e00f      	b.n	800273a <HAL_DAC_ConfigChannel+0x28a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	4a32      	ldr	r2, [pc, #200]	; (80027e8 <HAL_DAC_ConfigChannel+0x338>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d90a      	bls.n	8002738 <HAL_DAC_ConfigChannel+0x288>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002728:	627b      	str	r3, [r7, #36]	; 0x24
 800272a:	e006      	b.n	800273a <HAL_DAC_ConfigChannel+0x28a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002732:	4313      	orrs	r3, r2
 8002734:	627b      	str	r3, [r7, #36]	; 0x24
 8002736:	e000      	b.n	800273a <HAL_DAC_ConfigChannel+0x28a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8002738:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f003 0310 	and.w	r3, r3, #16
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002748:	4313      	orrs	r3, r2
 800274a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002752:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6819      	ldr	r1, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f003 0310 	and.w	r3, r3, #16
 8002760:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	43da      	mvns	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	400a      	ands	r2, r1
 8002770:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f003 0310 	and.w	r3, r3, #16
 8002780:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	43db      	mvns	r3, r3
 800278a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800278c:	4013      	ands	r3, r2
 800278e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f003 0310 	and.w	r3, r3, #16
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027a4:	4313      	orrs	r3, r2
 80027a6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ae:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6819      	ldr	r1, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f003 0310 	and.w	r3, r3, #16
 80027bc:	22c0      	movs	r2, #192	; 0xc0
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	43da      	mvns	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	400a      	ands	r2, r1
 80027ca:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2201      	movs	r2, #1
 80027d0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80027d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3728      	adds	r7, #40	; 0x28
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	09896800 	.word	0x09896800
 80027e8:	04c4b400 	.word	0x04c4b400

080027ec <HAL_DACEx_SetConfigAutonomousMode>:
  * @param sConfig pointer to Autonomous mode structure parameters.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_SetConfigAutonomousMode(DAC_HandleTypeDef *hdac,
                                                    const DAC_AutonomousModeConfTypeDef *sConfig)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle and autonomous mode configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d002      	beq.n	8002802 <HAL_DACEx_SetConfigAutonomousMode+0x16>
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_DACEx_SetConfigAutonomousMode+0x1a>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e024      	b.n	8002850 <HAL_DACEx_SetConfigAutonomousMode+0x64>
  }

  assert_param(IS_DAC_AUTONOMOUS(sConfig->AutonomousModeState));

  if (hdac->State == HAL_DAC_STATE_READY)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	791b      	ldrb	r3, [r3, #4]
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b01      	cmp	r3, #1
 800280e:	d11e      	bne.n	800284e <HAL_DACEx_SetConfigAutonomousMode+0x62>
  {
    /* Process Locked */
    __HAL_LOCK(hdac);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	795b      	ldrb	r3, [r3, #5]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d101      	bne.n	800281c <HAL_DACEx_SetConfigAutonomousMode+0x30>
 8002818:	2302      	movs	r3, #2
 800281a:	e019      	b.n	8002850 <HAL_DACEx_SetConfigAutonomousMode+0x64>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	715a      	strb	r2, [r3, #5]

    hdac->State = HAL_DAC_STATE_BUSY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2202      	movs	r2, #2
 8002826:	711a      	strb	r2, [r3, #4]

    /* NOTE: The set/reset of the bit automode in the AUTOCR
             register is for both dac_channel1 and dac_channel2 */

    /* Update the AUTOCR register */
    MODIFY_REG(hdac->Instance->AUTOCR, DAC_AUTOCR_AUTOMODE, sConfig->AutonomousModeState);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282e:	f423 0180 	bic.w	r1, r3, #4194304	; 0x400000
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	430a      	orrs	r2, r1
 800283c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Update the DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2201      	movs	r2, #1
 8002842:	711a      	strb	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdac);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	715a      	strb	r2, [r3, #5]

    return HAL_OK;
 800284a:	2300      	movs	r3, #0
 800284c:	e000      	b.n	8002850 <HAL_DACEx_SetConfigAutonomousMode+0x64>
  }
  else
  {
    return HAL_BUSY;
 800284e:	2302      	movs	r3, #2
  }
}
 8002850:	4618      	mov	r0, r3
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8002864:	f7ff f91e 	bl	8001aa4 <HAL_GetTick>
 8002868:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e06b      	b.n	800294c <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b02      	cmp	r3, #2
 800287e:	d008      	beq.n	8002892 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2220      	movs	r2, #32
 8002884:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e05c      	b.n	800294c <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	695a      	ldr	r2, [r3, #20]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f042 0204 	orr.w	r2, r2, #4
 80028a0:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2205      	movs	r2, #5
 80028a6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80028aa:	e020      	b.n	80028ee <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80028ac:	f7ff f8fa 	bl	8001aa4 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b05      	cmp	r3, #5
 80028b8:	d919      	bls.n	80028ee <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028be:	f043 0210 	orr.w	r2, r3, #16
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2203      	movs	r2, #3
 80028ca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028de:	2201      	movs	r2, #1
 80028e0:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e02e      	b.n	800294c <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0d7      	beq.n	80028ac <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	695a      	ldr	r2, [r3, #20]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f042 0202 	orr.w	r2, r2, #2
 800290a:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2204      	movs	r2, #4
 8002910:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 800291c:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800292a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800292e:	2b00      	cmp	r3, #0
 8002930:	d007      	beq.n	8002942 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002936:	2201      	movs	r2, #1
 8002938:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2200      	movs	r2, #0
 8002940:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e019      	b.n	800299a <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d004      	beq.n	800297c <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2220      	movs	r2, #32
 8002976:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e00e      	b.n	800299a <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2204      	movs	r2, #4
 8002980:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6812      	ldr	r2, [r2, #0]
 800298e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002992:	f043 0304 	orr.w	r3, r3, #4
 8002996:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
	...

080029a8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b089      	sub	sp, #36	; 0x24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80029ba:	e1ba      	b.n	8002d32 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	2101      	movs	r1, #1
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	fa01 f303 	lsl.w	r3, r1, r3
 80029c8:	4013      	ands	r3, r2
 80029ca:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f000 81aa 	beq.w	8002d2c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a55      	ldr	r2, [pc, #340]	; (8002b30 <HAL_GPIO_Init+0x188>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d15d      	bne.n	8002a9c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80029e6:	2201      	movs	r2, #1
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	43db      	mvns	r3, r3
 80029f0:	69fa      	ldr	r2, [r7, #28]
 80029f2:	4013      	ands	r3, r2
 80029f4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f003 0201 	and.w	r2, r3, #1
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	69fa      	ldr	r2, [r7, #28]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69fa      	ldr	r2, [r7, #28]
 8002a0e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002a10:	4a48      	ldr	r2, [pc, #288]	; (8002b34 <HAL_GPIO_Init+0x18c>)
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002a18:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8002a1a:	4a46      	ldr	r2, [pc, #280]	; (8002b34 <HAL_GPIO_Init+0x18c>)
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	4413      	add	r3, r2
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	08da      	lsrs	r2, r3, #3
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	3208      	adds	r2, #8
 8002a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a32:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	220f      	movs	r2, #15
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	43db      	mvns	r3, r3
 8002a44:	69fa      	ldr	r2, [r7, #28]
 8002a46:	4013      	ands	r3, r2
 8002a48:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	f003 0307 	and.w	r3, r3, #7
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	220b      	movs	r2, #11
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	69fa      	ldr	r2, [r7, #28]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	08da      	lsrs	r2, r3, #3
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	3208      	adds	r2, #8
 8002a66:	69f9      	ldr	r1, [r7, #28]
 8002a68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	2203      	movs	r2, #3
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	69fa      	ldr	r2, [r7, #28]
 8002a80:	4013      	ands	r3, r2
 8002a82:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	2202      	movs	r2, #2
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	69fa      	ldr	r2, [r7, #28]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	69fa      	ldr	r2, [r7, #28]
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	e067      	b.n	8002b6c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d003      	beq.n	8002aac <HAL_GPIO_Init+0x104>
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	2b12      	cmp	r3, #18
 8002aaa:	d145      	bne.n	8002b38 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	08da      	lsrs	r2, r3, #3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3208      	adds	r2, #8
 8002ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ab8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	220f      	movs	r2, #15
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	69fa      	ldr	r2, [r7, #28]
 8002acc:	4013      	ands	r3, r2
 8002ace:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	f003 020f 	and.w	r2, r3, #15
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	f003 0307 	and.w	r3, r3, #7
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	69fa      	ldr	r2, [r7, #28]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	08da      	lsrs	r2, r3, #3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	3208      	adds	r2, #8
 8002af2:	69f9      	ldr	r1, [r7, #28]
 8002af4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	2203      	movs	r2, #3
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	69fa      	ldr	r2, [r7, #28]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f003 0203 	and.w	r2, r3, #3
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	69fa      	ldr	r2, [r7, #28]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	69fa      	ldr	r2, [r7, #28]
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	e01e      	b.n	8002b6c <HAL_GPIO_Init+0x1c4>
 8002b2e:	bf00      	nop
 8002b30:	46020000 	.word	0x46020000
 8002b34:	0800ae48 	.word	0x0800ae48
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	2203      	movs	r2, #3
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69fa      	ldr	r2, [r7, #28]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f003 0203 	and.w	r2, r3, #3
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	69fa      	ldr	r2, [r7, #28]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	69fa      	ldr	r2, [r7, #28]
 8002b6a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d00b      	beq.n	8002b8c <HAL_GPIO_Init+0x1e4>
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d007      	beq.n	8002b8c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b80:	2b11      	cmp	r3, #17
 8002b82:	d003      	beq.n	8002b8c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	2b12      	cmp	r3, #18
 8002b8a:	d130      	bne.n	8002bee <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	2203      	movs	r2, #3
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	69fa      	ldr	r2, [r7, #28]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	68da      	ldr	r2, [r3, #12]
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	69fa      	ldr	r2, [r7, #28]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	69fa      	ldr	r2, [r7, #28]
 8002bba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	43db      	mvns	r3, r3
 8002bcc:	69fa      	ldr	r2, [r7, #28]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	091b      	lsrs	r3, r3, #4
 8002bd8:	f003 0201 	and.w	r2, r3, #1
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	69fa      	ldr	r2, [r7, #28]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	69fa      	ldr	r2, [r7, #28]
 8002bec:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b03      	cmp	r3, #3
 8002bf4:	d017      	beq.n	8002c26 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	2203      	movs	r2, #3
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	43db      	mvns	r3, r3
 8002c08:	69fa      	ldr	r2, [r7, #28]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	69fa      	ldr	r2, [r7, #28]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	69fa      	ldr	r2, [r7, #28]
 8002c24:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d07c      	beq.n	8002d2c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002c32:	4a47      	ldr	r2, [pc, #284]	; (8002d50 <HAL_GPIO_Init+0x3a8>)
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	089b      	lsrs	r3, r3, #2
 8002c38:	3318      	adds	r3, #24
 8002c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c3e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	220f      	movs	r2, #15
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	69fa      	ldr	r2, [r7, #28]
 8002c52:	4013      	ands	r3, r2
 8002c54:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	0a9a      	lsrs	r2, r3, #10
 8002c5a:	4b3e      	ldr	r3, [pc, #248]	; (8002d54 <HAL_GPIO_Init+0x3ac>)
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	f002 0203 	and.w	r2, r2, #3
 8002c64:	00d2      	lsls	r2, r2, #3
 8002c66:	4093      	lsls	r3, r2
 8002c68:	69fa      	ldr	r2, [r7, #28]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002c6e:	4938      	ldr	r1, [pc, #224]	; (8002d50 <HAL_GPIO_Init+0x3a8>)
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	089b      	lsrs	r3, r3, #2
 8002c74:	3318      	adds	r3, #24
 8002c76:	69fa      	ldr	r2, [r7, #28]
 8002c78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002c7c:	4b34      	ldr	r3, [pc, #208]	; (8002d50 <HAL_GPIO_Init+0x3a8>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	43db      	mvns	r3, r3
 8002c86:	69fa      	ldr	r2, [r7, #28]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d003      	beq.n	8002ca0 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8002c98:	69fa      	ldr	r2, [r7, #28]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8002ca0:	4a2b      	ldr	r2, [pc, #172]	; (8002d50 <HAL_GPIO_Init+0x3a8>)
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002ca6:	4b2a      	ldr	r3, [pc, #168]	; (8002d50 <HAL_GPIO_Init+0x3a8>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	69fa      	ldr	r2, [r7, #28]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8002cc2:	69fa      	ldr	r2, [r7, #28]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8002cca:	4a21      	ldr	r2, [pc, #132]	; (8002d50 <HAL_GPIO_Init+0x3a8>)
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002cd0:	4b1f      	ldr	r3, [pc, #124]	; (8002d50 <HAL_GPIO_Init+0x3a8>)
 8002cd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cd6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	43db      	mvns	r3, r3
 8002cdc:	69fa      	ldr	r2, [r7, #28]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d003      	beq.n	8002cf6 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8002cee:	69fa      	ldr	r2, [r7, #28]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8002cf6:	4a16      	ldr	r2, [pc, #88]	; (8002d50 <HAL_GPIO_Init+0x3a8>)
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8002cfe:	4b14      	ldr	r3, [pc, #80]	; (8002d50 <HAL_GPIO_Init+0x3a8>)
 8002d00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d04:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	69fa      	ldr	r2, [r7, #28]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d003      	beq.n	8002d24 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8002d1c:	69fa      	ldr	r2, [r7, #28]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002d24:	4a0a      	ldr	r2, [pc, #40]	; (8002d50 <HAL_GPIO_Init+0x3a8>)
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	fa22 f303 	lsr.w	r3, r2, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f47f ae3d 	bne.w	80029bc <HAL_GPIO_Init+0x14>
  }
}
 8002d42:	bf00      	nop
 8002d44:	bf00      	nop
 8002d46:	3724      	adds	r7, #36	; 0x24
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	46022000 	.word	0x46022000
 8002d54:	002f7f7f 	.word	0x002f7f7f

08002d58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	460b      	mov	r3, r1
 8002d62:	807b      	strh	r3, [r7, #2]
 8002d64:	4613      	mov	r3, r2
 8002d66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d68:	787b      	ldrb	r3, [r7, #1]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d6e:	887a      	ldrh	r2, [r7, #2]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8002d74:	e002      	b.n	8002d7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8002d76:	887a      	ldrh	r2, [r7, #2]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e08d      	b.n	8002eb6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d106      	bne.n	8002db4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7fe fa5c 	bl	800126c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2224      	movs	r2, #36	; 0x24
 8002db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 0201 	bic.w	r2, r2, #1
 8002dca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002dd8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002de8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d107      	bne.n	8002e02 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689a      	ldr	r2, [r3, #8]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dfe:	609a      	str	r2, [r3, #8]
 8002e00:	e006      	b.n	8002e10 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002e0e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d108      	bne.n	8002e2a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e26:	605a      	str	r2, [r3, #4]
 8002e28:	e007      	b.n	8002e3a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e38:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	6812      	ldr	r2, [r2, #0]
 8002e44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e4c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68da      	ldr	r2, [r3, #12]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e5c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	691a      	ldr	r2, [r3, #16]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	69d9      	ldr	r1, [r3, #28]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a1a      	ldr	r2, [r3, #32]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f042 0201 	orr.w	r2, r2, #1
 8002e96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2220      	movs	r2, #32
 8002ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
	...

08002ec0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b088      	sub	sp, #32
 8002ec4:	af02      	add	r7, sp, #8
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	4608      	mov	r0, r1
 8002eca:	4611      	mov	r1, r2
 8002ecc:	461a      	mov	r2, r3
 8002ece:	4603      	mov	r3, r0
 8002ed0:	817b      	strh	r3, [r7, #10]
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	813b      	strh	r3, [r7, #8]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b20      	cmp	r3, #32
 8002ee4:	f040 80fd 	bne.w	80030e2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ee8:	6a3b      	ldr	r3, [r7, #32]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d002      	beq.n	8002ef4 <HAL_I2C_Mem_Read+0x34>
 8002eee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d105      	bne.n	8002f00 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002efa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e0f1      	b.n	80030e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d101      	bne.n	8002f0e <HAL_I2C_Mem_Read+0x4e>
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	e0ea      	b.n	80030e4 <HAL_I2C_Mem_Read+0x224>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f16:	f7fe fdc5 	bl	8001aa4 <HAL_GetTick>
 8002f1a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	2319      	movs	r3, #25
 8002f22:	2201      	movs	r2, #1
 8002f24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f000 f975 	bl	8003218 <I2C_WaitOnFlagUntilTimeout>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0d5      	b.n	80030e4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2222      	movs	r2, #34	; 0x22
 8002f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2240      	movs	r2, #64	; 0x40
 8002f44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6a3a      	ldr	r2, [r7, #32]
 8002f52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f60:	88f8      	ldrh	r0, [r7, #6]
 8002f62:	893a      	ldrh	r2, [r7, #8]
 8002f64:	8979      	ldrh	r1, [r7, #10]
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	9301      	str	r3, [sp, #4]
 8002f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	4603      	mov	r3, r0
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f000 f8d9 	bl	8003128 <I2C_RequestMemoryRead>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d005      	beq.n	8002f88 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e0ad      	b.n	80030e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	2bff      	cmp	r3, #255	; 0xff
 8002f90:	d90e      	bls.n	8002fb0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	22ff      	movs	r2, #255	; 0xff
 8002f96:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	8979      	ldrh	r1, [r7, #10]
 8002fa0:	4b52      	ldr	r3, [pc, #328]	; (80030ec <HAL_I2C_Mem_Read+0x22c>)
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f000 faef 	bl	800358c <I2C_TransferConfig>
 8002fae:	e00f      	b.n	8002fd0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	8979      	ldrh	r1, [r7, #10]
 8002fc2:	4b4a      	ldr	r3, [pc, #296]	; (80030ec <HAL_I2C_Mem_Read+0x22c>)
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f000 fade 	bl	800358c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	2104      	movs	r1, #4
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 f91c 	bl	8003218 <I2C_WaitOnFlagUntilTimeout>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e07c      	b.n	80030e4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	b2d2      	uxtb	r2, r2
 8002ff6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffc:	1c5a      	adds	r2, r3, #1
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003006:	3b01      	subs	r3, #1
 8003008:	b29a      	uxth	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003012:	b29b      	uxth	r3, r3
 8003014:	3b01      	subs	r3, #1
 8003016:	b29a      	uxth	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003020:	b29b      	uxth	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d034      	beq.n	8003090 <HAL_I2C_Mem_Read+0x1d0>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800302a:	2b00      	cmp	r3, #0
 800302c:	d130      	bne.n	8003090 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003034:	2200      	movs	r2, #0
 8003036:	2180      	movs	r1, #128	; 0x80
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f000 f8ed 	bl	8003218 <I2C_WaitOnFlagUntilTimeout>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e04d      	b.n	80030e4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800304c:	b29b      	uxth	r3, r3
 800304e:	2bff      	cmp	r3, #255	; 0xff
 8003050:	d90e      	bls.n	8003070 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	22ff      	movs	r2, #255	; 0xff
 8003056:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800305c:	b2da      	uxtb	r2, r3
 800305e:	8979      	ldrh	r1, [r7, #10]
 8003060:	2300      	movs	r3, #0
 8003062:	9300      	str	r3, [sp, #0]
 8003064:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f000 fa8f 	bl	800358c <I2C_TransferConfig>
 800306e:	e00f      	b.n	8003090 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003074:	b29a      	uxth	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800307e:	b2da      	uxtb	r2, r3
 8003080:	8979      	ldrh	r1, [r7, #10]
 8003082:	2300      	movs	r3, #0
 8003084:	9300      	str	r3, [sp, #0]
 8003086:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 fa7e 	bl	800358c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003094:	b29b      	uxth	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d19a      	bne.n	8002fd0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f000 f950 	bl	8003344 <I2C_WaitOnSTOPFlagUntilTimeout>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e01a      	b.n	80030e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2220      	movs	r2, #32
 80030b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6859      	ldr	r1, [r3, #4]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <HAL_I2C_Mem_Read+0x230>)
 80030c2:	400b      	ands	r3, r1
 80030c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2220      	movs	r2, #32
 80030ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030de:	2300      	movs	r3, #0
 80030e0:	e000      	b.n	80030e4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80030e2:	2302      	movs	r3, #2
  }
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3718      	adds	r7, #24
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	80002400 	.word	0x80002400
 80030f0:	fe00e800 	.word	0xfe00e800

080030f4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003110:	2b00      	cmp	r3, #0
 8003112:	d005      	beq.n	8003120 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003118:	68ba      	ldr	r2, [r7, #8]
 800311a:	68f9      	ldr	r1, [r7, #12]
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	4798      	blx	r3
  }
}
 8003120:	bf00      	nop
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af02      	add	r7, sp, #8
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	4608      	mov	r0, r1
 8003132:	4611      	mov	r1, r2
 8003134:	461a      	mov	r2, r3
 8003136:	4603      	mov	r3, r0
 8003138:	817b      	strh	r3, [r7, #10]
 800313a:	460b      	mov	r3, r1
 800313c:	813b      	strh	r3, [r7, #8]
 800313e:	4613      	mov	r3, r2
 8003140:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003142:	88fb      	ldrh	r3, [r7, #6]
 8003144:	b2da      	uxtb	r2, r3
 8003146:	8979      	ldrh	r1, [r7, #10]
 8003148:	4b20      	ldr	r3, [pc, #128]	; (80031cc <I2C_RequestMemoryRead+0xa4>)
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	2300      	movs	r3, #0
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 fa1c 	bl	800358c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003154:	69fa      	ldr	r2, [r7, #28]
 8003156:	69b9      	ldr	r1, [r7, #24]
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f000 f8ac 	bl	80032b6 <I2C_WaitOnTXISFlagUntilTimeout>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e02c      	b.n	80031c2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003168:	88fb      	ldrh	r3, [r7, #6]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d105      	bne.n	800317a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800316e:	893b      	ldrh	r3, [r7, #8]
 8003170:	b2da      	uxtb	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	629a      	str	r2, [r3, #40]	; 0x28
 8003178:	e015      	b.n	80031a6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800317a:	893b      	ldrh	r3, [r7, #8]
 800317c:	0a1b      	lsrs	r3, r3, #8
 800317e:	b29b      	uxth	r3, r3
 8003180:	b2da      	uxtb	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003188:	69fa      	ldr	r2, [r7, #28]
 800318a:	69b9      	ldr	r1, [r7, #24]
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f000 f892 	bl	80032b6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e012      	b.n	80031c2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800319c:	893b      	ldrh	r3, [r7, #8]
 800319e:	b2da      	uxtb	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	9300      	str	r3, [sp, #0]
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	2200      	movs	r2, #0
 80031ae:	2140      	movs	r1, #64	; 0x40
 80031b0:	68f8      	ldr	r0, [r7, #12]
 80031b2:	f000 f831 	bl	8003218 <I2C_WaitOnFlagUntilTimeout>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e000      	b.n	80031c2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	80002000 	.word	0x80002000

080031d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d103      	bne.n	80031ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2200      	movs	r2, #0
 80031ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d007      	beq.n	800320c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	699a      	ldr	r2, [r3, #24]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0201 	orr.w	r2, r2, #1
 800320a:	619a      	str	r2, [r3, #24]
  }
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	603b      	str	r3, [r7, #0]
 8003224:	4613      	mov	r3, r2
 8003226:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003228:	e031      	b.n	800328e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003230:	d02d      	beq.n	800328e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003232:	f7fe fc37 	bl	8001aa4 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d302      	bcc.n	8003248 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d122      	bne.n	800328e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	699a      	ldr	r2, [r3, #24]
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	4013      	ands	r3, r2
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	429a      	cmp	r2, r3
 8003256:	bf0c      	ite	eq
 8003258:	2301      	moveq	r3, #1
 800325a:	2300      	movne	r3, #0
 800325c:	b2db      	uxtb	r3, r3
 800325e:	461a      	mov	r2, r3
 8003260:	79fb      	ldrb	r3, [r7, #7]
 8003262:	429a      	cmp	r2, r3
 8003264:	d113      	bne.n	800328e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326a:	f043 0220 	orr.w	r2, r3, #32
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2220      	movs	r2, #32
 8003276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e00f      	b.n	80032ae <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	699a      	ldr	r2, [r3, #24]
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	4013      	ands	r3, r2
 8003298:	68ba      	ldr	r2, [r7, #8]
 800329a:	429a      	cmp	r2, r3
 800329c:	bf0c      	ite	eq
 800329e:	2301      	moveq	r3, #1
 80032a0:	2300      	movne	r3, #0
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	461a      	mov	r2, r3
 80032a6:	79fb      	ldrb	r3, [r7, #7]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d0be      	beq.n	800322a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b084      	sub	sp, #16
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	60f8      	str	r0, [r7, #12]
 80032be:	60b9      	str	r1, [r7, #8]
 80032c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032c2:	e033      	b.n	800332c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	68b9      	ldr	r1, [r7, #8]
 80032c8:	68f8      	ldr	r0, [r7, #12]
 80032ca:	f000 f87f 	bl	80033cc <I2C_IsErrorOccurred>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e031      	b.n	800333c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032de:	d025      	beq.n	800332c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032e0:	f7fe fbe0 	bl	8001aa4 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	68ba      	ldr	r2, [r7, #8]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d302      	bcc.n	80032f6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d11a      	bne.n	800332c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b02      	cmp	r3, #2
 8003302:	d013      	beq.n	800332c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003308:	f043 0220 	orr.w	r2, r3, #32
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2220      	movs	r2, #32
 8003314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e007      	b.n	800333c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b02      	cmp	r3, #2
 8003338:	d1c4      	bne.n	80032c4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003350:	e02f      	b.n	80033b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	68b9      	ldr	r1, [r7, #8]
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f000 f838 	bl	80033cc <I2C_IsErrorOccurred>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e02d      	b.n	80033c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003366:	f7fe fb9d 	bl	8001aa4 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	429a      	cmp	r2, r3
 8003374:	d302      	bcc.n	800337c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d11a      	bne.n	80033b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	f003 0320 	and.w	r3, r3, #32
 8003386:	2b20      	cmp	r3, #32
 8003388:	d013      	beq.n	80033b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338e:	f043 0220 	orr.w	r2, r3, #32
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2220      	movs	r2, #32
 800339a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e007      	b.n	80033c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	f003 0320 	and.w	r3, r3, #32
 80033bc:	2b20      	cmp	r3, #32
 80033be:	d1c8      	bne.n	8003352 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
	...

080033cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b08a      	sub	sp, #40	; 0x28
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033d8:	2300      	movs	r3, #0
 80033da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80033e6:	2300      	movs	r3, #0
 80033e8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	f003 0310 	and.w	r3, r3, #16
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d068      	beq.n	80034ca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2210      	movs	r2, #16
 80033fe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003400:	e049      	b.n	8003496 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003408:	d045      	beq.n	8003496 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800340a:	f7fe fb4b 	bl	8001aa4 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	68ba      	ldr	r2, [r7, #8]
 8003416:	429a      	cmp	r2, r3
 8003418:	d302      	bcc.n	8003420 <I2C_IsErrorOccurred+0x54>
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d13a      	bne.n	8003496 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800342a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003432:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800343e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003442:	d121      	bne.n	8003488 <I2C_IsErrorOccurred+0xbc>
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800344a:	d01d      	beq.n	8003488 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800344c:	7cfb      	ldrb	r3, [r7, #19]
 800344e:	2b20      	cmp	r3, #32
 8003450:	d01a      	beq.n	8003488 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003460:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003462:	f7fe fb1f 	bl	8001aa4 <HAL_GetTick>
 8003466:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003468:	e00e      	b.n	8003488 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800346a:	f7fe fb1b 	bl	8001aa4 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b19      	cmp	r3, #25
 8003476:	d907      	bls.n	8003488 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	f043 0320 	orr.w	r3, r3, #32
 800347e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003486:	e006      	b.n	8003496 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	f003 0320 	and.w	r3, r3, #32
 8003492:	2b20      	cmp	r3, #32
 8003494:	d1e9      	bne.n	800346a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	f003 0320 	and.w	r3, r3, #32
 80034a0:	2b20      	cmp	r3, #32
 80034a2:	d003      	beq.n	80034ac <I2C_IsErrorOccurred+0xe0>
 80034a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0aa      	beq.n	8003402 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80034ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d103      	bne.n	80034bc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2220      	movs	r2, #32
 80034ba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80034bc:	6a3b      	ldr	r3, [r7, #32]
 80034be:	f043 0304 	orr.w	r3, r3, #4
 80034c2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00b      	beq.n	80034f4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	f043 0301 	orr.w	r3, r3, #1
 80034e2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00b      	beq.n	8003516 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80034fe:	6a3b      	ldr	r3, [r7, #32]
 8003500:	f043 0308 	orr.w	r3, r3, #8
 8003504:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800350e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00b      	beq.n	8003538 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003520:	6a3b      	ldr	r3, [r7, #32]
 8003522:	f043 0302 	orr.w	r3, r3, #2
 8003526:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003530:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003538:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800353c:	2b00      	cmp	r3, #0
 800353e:	d01c      	beq.n	800357a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	f7ff fe45 	bl	80031d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6859      	ldr	r1, [r3, #4]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	4b0d      	ldr	r3, [pc, #52]	; (8003588 <I2C_IsErrorOccurred+0x1bc>)
 8003552:	400b      	ands	r3, r1
 8003554:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	431a      	orrs	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2220      	movs	r2, #32
 8003566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800357a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800357e:	4618      	mov	r0, r3
 8003580:	3728      	adds	r7, #40	; 0x28
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	fe00e800 	.word	0xfe00e800

0800358c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800358c:	b480      	push	{r7}
 800358e:	b087      	sub	sp, #28
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	607b      	str	r3, [r7, #4]
 8003596:	460b      	mov	r3, r1
 8003598:	817b      	strh	r3, [r7, #10]
 800359a:	4613      	mov	r3, r2
 800359c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800359e:	897b      	ldrh	r3, [r7, #10]
 80035a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035a4:	7a7b      	ldrb	r3, [r7, #9]
 80035a6:	041b      	lsls	r3, r3, #16
 80035a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035ac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80035ba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	0d5b      	lsrs	r3, r3, #21
 80035c6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80035ca:	4b08      	ldr	r3, [pc, #32]	; (80035ec <I2C_TransferConfig+0x60>)
 80035cc:	430b      	orrs	r3, r1
 80035ce:	43db      	mvns	r3, r3
 80035d0:	ea02 0103 	and.w	r1, r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	430a      	orrs	r2, r1
 80035dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80035de:	bf00      	nop
 80035e0:	371c      	adds	r7, #28
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	03ff63ff 	.word	0x03ff63ff

080035f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b20      	cmp	r3, #32
 8003604:	d138      	bne.n	8003678 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800360c:	2b01      	cmp	r3, #1
 800360e:	d101      	bne.n	8003614 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003610:	2302      	movs	r3, #2
 8003612:	e032      	b.n	800367a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2224      	movs	r2, #36	; 0x24
 8003620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0201 	bic.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003642:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6819      	ldr	r1, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	430a      	orrs	r2, r1
 8003652:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f042 0201 	orr.w	r2, r2, #1
 8003662:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2220      	movs	r2, #32
 8003668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003674:	2300      	movs	r3, #0
 8003676:	e000      	b.n	800367a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003678:	2302      	movs	r3, #2
  }
}
 800367a:	4618      	mov	r0, r3
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr

08003686 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003686:	b480      	push	{r7}
 8003688:	b085      	sub	sp, #20
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
 800368e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b20      	cmp	r3, #32
 800369a:	d139      	bne.n	8003710 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d101      	bne.n	80036aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80036a6:	2302      	movs	r3, #2
 80036a8:	e033      	b.n	8003712 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2224      	movs	r2, #36	; 0x24
 80036b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f022 0201 	bic.w	r2, r2, #1
 80036c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80036d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	021b      	lsls	r3, r3, #8
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f042 0201 	orr.w	r2, r2, #1
 80036fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2220      	movs	r2, #32
 8003700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800370c:	2300      	movs	r3, #0
 800370e:	e000      	b.n	8003712 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003710:	2302      	movs	r3, #2
  }
}
 8003712:	4618      	mov	r0, r3
 8003714:	3714      	adds	r7, #20
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
	...

08003720 <HAL_ICACHE_Disable>:
  * @note   This function waits for the cache being disabled but
  *         not for the end of the automatic cache invalidation procedure.
  * @retval HAL status (HAL_OK/HAL_TIMEOUT)
  */
HAL_StatusTypeDef HAL_ICACHE_Disable(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003726:	2300      	movs	r3, #0
 8003728:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Make sure BSYENDF is reset before to disable the instruction cache */
  /* as it automatically starts a cache invalidation procedure */
  WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 800372a:	4b14      	ldr	r3, [pc, #80]	; (800377c <HAL_ICACHE_Disable+0x5c>)
 800372c:	2202      	movs	r2, #2
 800372e:	60da      	str	r2, [r3, #12]

  CLEAR_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003730:	4b12      	ldr	r3, [pc, #72]	; (800377c <HAL_ICACHE_Disable+0x5c>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a11      	ldr	r2, [pc, #68]	; (800377c <HAL_ICACHE_Disable+0x5c>)
 8003736:	f023 0301 	bic.w	r3, r3, #1
 800373a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800373c:	f7fe f9b2 	bl	8001aa4 <HAL_GetTick>
 8003740:	6038      	str	r0, [r7, #0]

  /* Wait for instruction cache being disabled */
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003742:	e00f      	b.n	8003764 <HAL_ICACHE_Disable+0x44>
  {
    if ((HAL_GetTick() - tickstart) > ICACHE_DISABLE_TIMEOUT_VALUE)
 8003744:	f7fe f9ae 	bl	8001aa4 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b01      	cmp	r3, #1
 8003750:	d908      	bls.n	8003764 <HAL_ICACHE_Disable+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003752:	4b0a      	ldr	r3, [pc, #40]	; (800377c <HAL_ICACHE_Disable+0x5c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d002      	beq.n	8003764 <HAL_ICACHE_Disable+0x44>
      {
        status = HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	71fb      	strb	r3, [r7, #7]
        break;
 8003762:	e005      	b.n	8003770 <HAL_ICACHE_Disable+0x50>
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003764:	4b05      	ldr	r3, [pc, #20]	; (800377c <HAL_ICACHE_Disable+0x5c>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1e9      	bne.n	8003744 <HAL_ICACHE_Disable+0x24>
      }
    }
  }

  return status;
 8003770:	79fb      	ldrb	r3, [r7, #7]
}
 8003772:	4618      	mov	r0, r3
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	40030400 	.word	0x40030400

08003780 <HAL_ICACHE_EnableRemapRegion>:
                     This parameter can be a value of @arg @ref ICACHE_Region
  * @param  pRegionConfig  Pointer to structure of ICACHE region configuration parameters
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef  HAL_ICACHE_EnableRemapRegion(uint32_t Region, const ICACHE_RegionConfigTypeDef *const pRegionConfig)
{
 8003780:	b480      	push	{r7}
 8003782:	b087      	sub	sp, #28
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800378a:	2300      	movs	r3, #0
 800378c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ICACHE_REGION_SIZE(pRegionConfig->Size));
  assert_param(IS_ICACHE_REGION_TRAFFIC_ROUTE(pRegionConfig->TrafficRoute));
  assert_param(IS_ICACHE_REGION_OUTPUT_BURST_TYPE(pRegionConfig->OutputBurstType));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800378e:	4b22      	ldr	r3, [pc, #136]	; (8003818 <HAL_ICACHE_EnableRemapRegion+0x98>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	d002      	beq.n	80037a0 <HAL_ICACHE_EnableRemapRegion+0x20>
  {
    status = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	75fb      	strb	r3, [r7, #23]
 800379e:	e034      	b.n	800380a <HAL_ICACHE_EnableRemapRegion+0x8a>
  }
  else
  {
    /* Get region control register address */
    p_reg = &(ICACHE->CRR0) + (1U * Region);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	009a      	lsls	r2, r3, #2
 80037a4:	4b1d      	ldr	r3, [pc, #116]	; (800381c <HAL_ICACHE_EnableRemapRegion+0x9c>)
 80037a6:	4413      	add	r3, r2
 80037a8:	613b      	str	r3, [r7, #16]

    /* Check region is not already enabled */
    if ((*p_reg & ICACHE_CRRx_REN) != 0U)
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d002      	beq.n	80037bc <HAL_ICACHE_EnableRemapRegion+0x3c>
    {
      status = HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	75fb      	strb	r3, [r7, #23]
 80037ba:	e026      	b.n	800380a <HAL_ICACHE_EnableRemapRegion+0x8a>
      /* Region 8MB:   BaseAddress size 6 bits, RemapAddress size 9 bits  */
      /* Region 16MB:  BaseAddress size 5 bits, RemapAddress size 8 bits  */
      /* Region 32MB:  BaseAddress size 4 bits, RemapAddress size 7 bits  */
      /* Region 64MB:  BaseAddress size 3 bits, RemapAddress size 6 bits  */
      /* Region 128MB: BaseAddress size 2 bits, RemapAddress size 5 bits  */
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	0d5a      	lsrs	r2, r3, #21
               (0xFFU & ~(pRegionConfig->Size - 1U));
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	425b      	negs	r3, r3
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 80037c8:	4013      	ands	r3, r2
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	60fb      	str	r3, [r7, #12]
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	095a      	lsrs	r2, r3, #5
                ((uint32_t)(0x7FFU & ~(pRegionConfig->Size - 1U)) << ICACHE_CRRx_REMAPADDR_Pos));
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	425b      	negs	r3, r3
 80037da:	041b      	lsls	r3, r3, #16
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 80037dc:	401a      	ands	r2, r3
 80037de:	4b10      	ldr	r3, [pc, #64]	; (8003820 <HAL_ICACHE_EnableRemapRegion+0xa0>)
 80037e0:	4013      	ands	r3, r2
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	60fb      	str	r3, [r7, #12]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	025a      	lsls	r2, r3, #9
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	431a      	orrs	r2, r3
               pRegionConfig->OutputBurstType;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	691b      	ldr	r3, [r3, #16]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 80037f8:	4313      	orrs	r3, r2
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	60fb      	str	r3, [r7, #12]
      *p_reg = (value | ICACHE_CRRx_REN);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
 800380a:	7dfb      	ldrb	r3, [r7, #23]
}
 800380c:	4618      	mov	r0, r3
 800380e:	371c      	adds	r7, #28
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	40030400 	.word	0x40030400
 800381c:	40030420 	.word	0x40030420
 8003820:	07ff0000 	.word	0x07ff0000

08003824 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e0e7      	b.n	8003a06 <HAL_LPTIM_Init+0x1e2>
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(hlptim->Init.Period));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d106      	bne.n	8003856 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f7fd fd7d 	bl	8001350 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2202      	movs	r2, #2
 800385a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	691a      	ldr	r2, [r3, #16]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f042 0201 	orr.w	r2, r2, #1
 800386c:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003876:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003880:	629a      	str	r2, [r3, #40]	; 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8003882:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 faea 	bl	8003e60 <LPTIM_WaitForFlag>
 800388c:	4603      	mov	r3, r0
 800388e:	2b03      	cmp	r3, #3
 8003890:	d101      	bne.n	8003896 <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e0b7      	b.n	8003a06 <HAL_LPTIM_Init+0x1e2>
  }


  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2210      	movs	r2, #16
 800389c:	605a      	str	r2, [r3, #4]

  /* Set LPTIM Period */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, hlptim->Init.Period);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	6a12      	ldr	r2, [r2, #32]
 80038a6:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80038a8:	2110      	movs	r1, #16
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 fad8 	bl	8003e60 <LPTIM_WaitForFlag>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	d101      	bne.n	80038ba <HAL_LPTIM_Init+0x96>
  {
    return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e0a5      	b.n	8003a06 <HAL_LPTIM_Init+0x1e2>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10e      	bne.n	80038e6 <HAL_LPTIM_Init+0xc2>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d107      	bne.n	80038e6 <HAL_LPTIM_Init+0xc2>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	691a      	ldr	r2, [r3, #16]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0201 	bic.w	r2, r2, #1
 80038e4:	611a      	str	r2, [r3, #16]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d004      	beq.n	8003900 <HAL_LPTIM_Init+0xdc>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038fe:	d103      	bne.n	8003908 <HAL_LPTIM_Init+0xe4>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 031e 	bic.w	r3, r3, #30
 8003906:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003910:	4293      	cmp	r3, r2
 8003912:	d005      	beq.n	8003920 <HAL_LPTIM_Init+0xfc>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800391a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800391e:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	4b3b      	ldr	r3, [pc, #236]	; (8003a10 <HAL_LPTIM_Init+0x1ec>)
 8003924:	4013      	ands	r3, r2
 8003926:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003930:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.Clock.Prescaler |
 8003936:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800393c:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	4313      	orrs	r3, r2
 8003942:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d107      	bne.n	800395c <HAL_LPTIM_Init+0x138>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8003954:	4313      	orrs	r3, r2
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	4313      	orrs	r3, r2
 800395a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d004      	beq.n	800396e <HAL_LPTIM_Init+0x14a>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003968:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800396c:	d107      	bne.n	800397e <HAL_LPTIM_Init+0x15a>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003976:	4313      	orrs	r3, r2
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	4313      	orrs	r3, r2
 800397c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003986:	4293      	cmp	r3, r2
 8003988:	d00a      	beq.n	80039a0 <HAL_LPTIM_Init+0x17c>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003992:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8003998:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	4313      	orrs	r3, r2
 800399e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a19      	ldr	r2, [pc, #100]	; (8003a14 <HAL_LPTIM_Init+0x1f0>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d004      	beq.n	80039bc <HAL_LPTIM_Init+0x198>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a18      	ldr	r2, [pc, #96]	; (8003a18 <HAL_LPTIM_Init+0x1f4>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d108      	bne.n	80039ce <HAL_LPTIM_Init+0x1aa>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	625a      	str	r2, [r3, #36]	; 0x24
 80039cc:	e00e      	b.n	80039ec <HAL_LPTIM_Init+0x1c8>
  }
  else
  {
    if ((hlptim->Instance == LPTIM3) || (hlptim->Instance == LPTIM4))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a12      	ldr	r2, [pc, #72]	; (8003a1c <HAL_LPTIM_Init+0x1f8>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d004      	beq.n	80039e2 <HAL_LPTIM_Init+0x1be>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a10      	ldr	r2, [pc, #64]	; (8003a20 <HAL_LPTIM_Init+0x1fc>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d104      	bne.n	80039ec <HAL_LPTIM_Init+0x1c8>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80039ea:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Initialize the LPTIM channels state */
  LPTIM_CHANNEL_STATE_SET_ALL(hlptim, HAL_LPTIM_CHANNEL_STATE_READY);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Return function status */
  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	ff39f1fe 	.word	0xff39f1fe
 8003a14:	46004400 	.word	0x46004400
 8003a18:	40009400 	.word	0x40009400
 8003a1c:	46004800 	.word	0x46004800
 8003a20:	46004c00 	.word	0x46004c00

08003a24 <HAL_LPTIM_Counter_Start_IT>:
  * @brief  Start the Counter mode in interrupt mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2202      	movs	r2, #2
 8003a30:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d00c      	beq.n	8003a56 <HAL_LPTIM_Counter_Start_IT+0x32>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a44:	d107      	bne.n	8003a56 <HAL_LPTIM_Counter_Start_IT+0x32>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68da      	ldr	r2, [r3, #12]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 8003a54:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	691a      	ldr	r2, [r3, #16]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f042 0201 	orr.w	r2, r2, #1
 8003a64:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DIEROK);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a6e:	605a      	str	r2, [r3, #4]

  /* Enable interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK | LPTIM_IT_ARRM | LPTIM_IT_REPOK | LPTIM_IT_UPDATE);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689a      	ldr	r2, [r3, #8]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 72c9 	orr.w	r2, r2, #402	; 0x192
 8003a7e:	609a      	str	r2, [r3, #8]

  /* Wait for the completion of the write operation to the LPTIM_DIER register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_DIEROK) == HAL_TIMEOUT)
 8003a80:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 f9eb 	bl	8003e60 <LPTIM_WaitForFlag>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b03      	cmp	r3, #3
 8003a8e:	d101      	bne.n	8003a94 <HAL_LPTIM_Counter_Start_IT+0x70>
  {
    return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e00c      	b.n	8003aae <HAL_LPTIM_Counter_Start_IT+0x8a>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	691a      	ldr	r2, [r3, #16]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f042 0204 	orr.w	r2, r2, #4
 8003aa2:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Return function status */
  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b082      	sub	sp, #8
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
  /* Capture Compare 1 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1) != RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d120      	bne.n	8003b0e <HAL_LPTIM_IRQHandler+0x58>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d119      	bne.n	8003b0e <HAL_LPTIM_IRQHandler+0x58>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Input capture event */
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC1SEL) != 0x00U)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <HAL_LPTIM_IRQHandler+0x4a>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
#else
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f99c 	bl	8003e36 <HAL_LPTIM_IC_CaptureCallback>
 8003afe:	e002      	b.n	8003b06 <HAL_LPTIM_IRQHandler+0x50>
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 f93e 	bl	8003d82 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Capture Compare 2 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2) != RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b1c:	d122      	bne.n	8003b64 <HAL_LPTIM_IRQHandler+0xae>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2) != RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b2c:	d11a      	bne.n	8003b64 <HAL_LPTIM_IRQHandler+0xae>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b36:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Input capture event */
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC2SEL) != 0x00U)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <HAL_LPTIM_IRQHandler+0xa0>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
#else
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f971 	bl	8003e36 <HAL_LPTIM_IC_CaptureCallback>
 8003b54:	e002      	b.n	8003b5c <HAL_LPTIM_IRQHandler+0xa6>
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f913 	bl	8003d82 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Over Capture 1 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1O) != RESET)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b72:	d117      	bne.n	8003ba4 <HAL_LPTIM_IRQHandler+0xee>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1O) != RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b82:	d10f      	bne.n	8003ba4 <HAL_LPTIM_IRQHandler+0xee>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1O);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b8c:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f957 	bl	8003e4a <HAL_LPTIM_IC_OverCaptureCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Over Capture 2 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2O) != RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bb2:	d117      	bne.n	8003be4 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2O) != RESET)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bc2:	d10f      	bne.n	8003be4 <HAL_LPTIM_IRQHandler+0x12e>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2O);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003bcc:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2202      	movs	r2, #2
 8003bd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f937 	bl	8003e4a <HAL_LPTIM_IC_OverCaptureCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d10d      	bne.n	8003c0e <HAL_LPTIM_IRQHandler+0x158>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d106      	bne.n	8003c0e <HAL_LPTIM_IRQHandler+0x158>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2202      	movs	r2, #2
 8003c06:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 f8c4 	bl	8003d96 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	2b04      	cmp	r3, #4
 8003c1a:	d10d      	bne.n	8003c38 <HAL_LPTIM_IRQHandler+0x182>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f003 0304 	and.w	r3, r3, #4
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d106      	bne.n	8003c38 <HAL_LPTIM_IRQHandler+0x182>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2204      	movs	r2, #4
 8003c30:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f8b9 	bl	8003daa <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP1OK) != RESET)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0308 	and.w	r3, r3, #8
 8003c42:	2b08      	cmp	r3, #8
 8003c44:	d111      	bne.n	8003c6a <HAL_LPTIM_IRQHandler+0x1b4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP1OK) != RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f003 0308 	and.w	r3, r3, #8
 8003c50:	2b08      	cmp	r3, #8
 8003c52:	d10a      	bne.n	8003c6a <HAL_LPTIM_IRQHandler+0x1b4>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP1OK);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2208      	movs	r2, #8
 8003c5a:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f8aa 	bl	8003dbe <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP2OK) != RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c74:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003c78:	d113      	bne.n	8003ca2 <HAL_LPTIM_IRQHandler+0x1ec>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP2OK) != RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c84:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003c88:	d10b      	bne.n	8003ca2 <HAL_LPTIM_IRQHandler+0x1ec>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP2OK);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003c92:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2202      	movs	r2, #2
 8003c98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 f88e 	bl	8003dbe <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0310 	and.w	r3, r3, #16
 8003cac:	2b10      	cmp	r3, #16
 8003cae:	d10d      	bne.n	8003ccc <HAL_LPTIM_IRQHandler+0x216>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f003 0310 	and.w	r3, r3, #16
 8003cba:	2b10      	cmp	r3, #16
 8003cbc:	d106      	bne.n	8003ccc <HAL_LPTIM_IRQHandler+0x216>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2210      	movs	r2, #16
 8003cc4:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f883 	bl	8003dd2 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0320 	and.w	r3, r3, #32
 8003cd6:	2b20      	cmp	r3, #32
 8003cd8:	d10d      	bne.n	8003cf6 <HAL_LPTIM_IRQHandler+0x240>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f003 0320 	and.w	r3, r3, #32
 8003ce4:	2b20      	cmp	r3, #32
 8003ce6:	d106      	bne.n	8003cf6 <HAL_LPTIM_IRQHandler+0x240>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2220      	movs	r2, #32
 8003cee:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 f878 	bl	8003de6 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d00:	2b40      	cmp	r3, #64	; 0x40
 8003d02:	d10d      	bne.n	8003d20 <HAL_LPTIM_IRQHandler+0x26a>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0e:	2b40      	cmp	r3, #64	; 0x40
 8003d10:	d106      	bne.n	8003d20 <HAL_LPTIM_IRQHandler+0x26a>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2240      	movs	r2, #64	; 0x40
 8003d18:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f86d 	bl	8003dfa <HAL_LPTIM_DirectionDownCallback>
    }
  }

  /* Repetition counter underflowed (or contains zero) and the LPTIM counter
     overflowed */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d2a:	2b80      	cmp	r3, #128	; 0x80
 8003d2c:	d10d      	bne.n	8003d4a <HAL_LPTIM_IRQHandler+0x294>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d38:	2b80      	cmp	r3, #128	; 0x80
 8003d3a:	d106      	bne.n	8003d4a <HAL_LPTIM_IRQHandler+0x294>
    {
      /* Clear update event flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2280      	movs	r2, #128	; 0x80
 8003d42:	605a      	str	r2, [r3, #4]

      /* Update event Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->UpdateEventCallback(hlptim);
#else
      HAL_LPTIM_UpdateEventCallback(hlptim);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 f862 	bl	8003e0e <HAL_LPTIM_UpdateEventCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Successful APB bus write to repetition counter register */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d58:	d10f      	bne.n	8003d7a <HAL_LPTIM_IRQHandler+0x2c4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d68:	d107      	bne.n	8003d7a <HAL_LPTIM_IRQHandler+0x2c4>
    {
      /* Clear successful APB bus write to repetition counter flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d72:	605a      	str	r2, [r3, #4]

      /* Successful APB bus write to repetition counter Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->RepCounterWriteCallback(hlptim);
#else
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 f854 	bl	8003e22 <HAL_LPTIM_RepCounterWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d7a:	bf00      	nop
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b083      	sub	sp, #12
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8003d8a:	bf00      	nop
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b083      	sub	sp, #12
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b083      	sub	sp, #12
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b083      	sub	sp, #12
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8003dda:	bf00      	nop
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr

08003de6 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003de6:	b480      	push	{r7}
 8003de8:	b083      	sub	sp, #12
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8003dee:	bf00      	nop
 8003df0:	370c      	adds	r7, #12
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr

08003dfa <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	b083      	sub	sp, #12
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8003e02:	bf00      	nop
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <HAL_LPTIM_UpdateEventCallback>:
  * @brief Repetition counter underflowed (or contains zero) and LPTIM counter overflowed callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b083      	sub	sp, #12
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventCallback could be implemented in the user file
   */
}
 8003e16:	bf00      	nop
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr

08003e22 <HAL_LPTIM_RepCounterWriteCallback>:
  * @brief  Successful APB bus write to repetition counter register callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b083      	sub	sp, #12
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_RepCounterWriteCallback could be implemented in the user file
   */
}
 8003e2a:	bf00      	nop
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr

08003e36 <HAL_LPTIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_CaptureCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003e36:	b480      	push	{r7}
 8003e38:	b083      	sub	sp, #12
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e3e:	bf00      	nop
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <HAL_LPTIM_IC_OverCaptureCallback>:
  * @brief  Over Capture callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_OverCaptureCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b083      	sub	sp, #12
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_OverCaptureCallback could be implemented in the user file
   */
}
 8003e52:	bf00      	nop
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
	...

08003e60 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8003e6e:	4b12      	ldr	r3, [pc, #72]	; (8003eb8 <LPTIM_WaitForFlag+0x58>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a12      	ldr	r2, [pc, #72]	; (8003ebc <LPTIM_WaitForFlag+0x5c>)
 8003e74:	fba2 2303 	umull	r2, r3, r2, r3
 8003e78:	0b9b      	lsrs	r3, r3, #14
 8003e7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e7e:	fb02 f303 	mul.w	r3, r2, r3
 8003e82:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	3b01      	subs	r3, #1
 8003e88:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d101      	bne.n	8003e94 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d002      	beq.n	8003eaa <LPTIM_WaitForFlag+0x4a>
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1ec      	bne.n	8003e84 <LPTIM_WaitForFlag+0x24>

  return result;
 8003eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3714      	adds	r7, #20
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr
 8003eb8:	20000004 	.word	0x20000004
 8003ebc:	d1b71759 	.word	0xd1b71759

08003ec0 <HAL_PWR_ConfigPVD>:
  * @param  pConfigPVD : Pointer to a PWR_PVDTypeDef structure that contains the
  *                      PVD configuration information (PVDLevel and EventMode).
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *pConfigPVD)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* Check the PVD parameter */
  if (pConfigPVD == NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_PWR_ConfigPVD+0x12>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e059      	b.n	8003f86 <HAL_PWR_ConfigPVD+0xc6>
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(pConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(pConfigPVD->Mode));

  /* Set PVDLS[2:0] bits according to PVDLevel value */
  MODIFY_REG(PWR->SVMCR, PWR_SVMCR_PVDLS, pConfigPVD->PVDLevel);
 8003ed2:	4b30      	ldr	r3, [pc, #192]	; (8003f94 <HAL_PWR_ConfigPVD+0xd4>)
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	492d      	ldr	r1, [pc, #180]	; (8003f94 <HAL_PWR_ConfigPVD+0xd4>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	610b      	str	r3, [r1, #16]

  /* Disable PVD Event/Interrupt */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8003ee4:	4b2c      	ldr	r3, [pc, #176]	; (8003f98 <HAL_PWR_ConfigPVD+0xd8>)
 8003ee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eea:	4a2b      	ldr	r2, [pc, #172]	; (8003f98 <HAL_PWR_ConfigPVD+0xd8>)
 8003eec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ef0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8003ef4:	4b28      	ldr	r3, [pc, #160]	; (8003f98 <HAL_PWR_ConfigPVD+0xd8>)
 8003ef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003efa:	4a27      	ldr	r2, [pc, #156]	; (8003f98 <HAL_PWR_ConfigPVD+0xd8>)
 8003efc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8003f04:	4b24      	ldr	r3, [pc, #144]	; (8003f98 <HAL_PWR_ConfigPVD+0xd8>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a23      	ldr	r2, [pc, #140]	; (8003f98 <HAL_PWR_ConfigPVD+0xd8>)
 8003f0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f0e:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8003f10:	4b21      	ldr	r3, [pc, #132]	; (8003f98 <HAL_PWR_ConfigPVD+0xd8>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	4a20      	ldr	r2, [pc, #128]	; (8003f98 <HAL_PWR_ConfigPVD+0xd8>)
 8003f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f1a:	6053      	str	r3, [r2, #4]

  /* Configure the PVD in interrupt mode */
  if ((pConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f003 0304 	and.w	r3, r3, #4
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d007      	beq.n	8003f38 <HAL_PWR_ConfigPVD+0x78>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8003f28:	4b1b      	ldr	r3, [pc, #108]	; (8003f98 <HAL_PWR_ConfigPVD+0xd8>)
 8003f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f2e:	4a1a      	ldr	r2, [pc, #104]	; (8003f98 <HAL_PWR_ConfigPVD+0xd8>)
 8003f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }

  /* Configure the PVD in event mode */
  if ((pConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f003 0308 	and.w	r3, r3, #8
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d007      	beq.n	8003f54 <HAL_PWR_ConfigPVD+0x94>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8003f44:	4b14      	ldr	r3, [pc, #80]	; (8003f98 <HAL_PWR_ConfigPVD+0xd8>)
 8003f46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f4a:	4a13      	ldr	r2, [pc, #76]	; (8003f98 <HAL_PWR_ConfigPVD+0xd8>)
 8003f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f50:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  }

  /* Configure the PVD in rising edge */
  if ((pConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d005      	beq.n	8003f6c <HAL_PWR_ConfigPVD+0xac>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8003f60:	4b0d      	ldr	r3, [pc, #52]	; (8003f98 <HAL_PWR_ConfigPVD+0xd8>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a0c      	ldr	r2, [pc, #48]	; (8003f98 <HAL_PWR_ConfigPVD+0xd8>)
 8003f66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f6a:	6013      	str	r3, [r2, #0]
  }

  /* Configure the PVD in falling edge */
  if ((pConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d005      	beq.n	8003f84 <HAL_PWR_ConfigPVD+0xc4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8003f78:	4b07      	ldr	r3, [pc, #28]	; (8003f98 <HAL_PWR_ConfigPVD+0xd8>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	4a06      	ldr	r2, [pc, #24]	; (8003f98 <HAL_PWR_ConfigPVD+0xd8>)
 8003f7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f82:	6053      	str	r3, [r2, #4]
  }

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	46020800 	.word	0x46020800
 8003f98:	46022000 	.word	0x46022000

08003f9c <HAL_PWR_EnablePVD>:
/**
  * @brief  Enable the programmable voltage detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD(void)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_PVDE);
 8003fa0:	4b05      	ldr	r3, [pc, #20]	; (8003fb8 <HAL_PWR_EnablePVD+0x1c>)
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	4a04      	ldr	r2, [pc, #16]	; (8003fb8 <HAL_PWR_EnablePVD+0x1c>)
 8003fa6:	f043 0310 	orr.w	r3, r3, #16
 8003faa:	6113      	str	r3, [r2, #16]
}
 8003fac:	bf00      	nop
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	46020800 	.word	0x46020800

08003fbc <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003fc4:	4b39      	ldr	r3, [pc, #228]	; (80040ac <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fcc:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d10b      	bne.n	8003fee <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fdc:	d905      	bls.n	8003fea <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003fde:	4b33      	ldr	r3, [pc, #204]	; (80040ac <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	4a32      	ldr	r2, [pc, #200]	; (80040ac <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003fe4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fe8:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8003fea:	2300      	movs	r3, #0
 8003fec:	e057      	b.n	800409e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ff4:	d90a      	bls.n	800400c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003ff6:	4b2d      	ldr	r3, [pc, #180]	; (80040ac <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4313      	orrs	r3, r2
 8004002:	4a2a      	ldr	r2, [pc, #168]	; (80040ac <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004004:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004008:	60d3      	str	r3, [r2, #12]
 800400a:	e007      	b.n	800401c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800400c:	4b27      	ldr	r3, [pc, #156]	; (80040ac <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004014:	4925      	ldr	r1, [pc, #148]	; (80040ac <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4313      	orrs	r3, r2
 800401a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800401c:	4b24      	ldr	r3, [pc, #144]	; (80040b0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a24      	ldr	r2, [pc, #144]	; (80040b4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004022:	fba2 2303 	umull	r2, r3, r2, r3
 8004026:	099b      	lsrs	r3, r3, #6
 8004028:	2232      	movs	r2, #50	; 0x32
 800402a:	fb02 f303 	mul.w	r3, r2, r3
 800402e:	4a21      	ldr	r2, [pc, #132]	; (80040b4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004030:	fba2 2303 	umull	r2, r3, r2, r3
 8004034:	099b      	lsrs	r3, r3, #6
 8004036:	3301      	adds	r3, #1
 8004038:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800403a:	e002      	b.n	8004042 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	3b01      	subs	r3, #1
 8004040:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004042:	4b1a      	ldr	r3, [pc, #104]	; (80040ac <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d102      	bne.n	8004054 <HAL_PWREx_ControlVoltageScaling+0x98>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1f3      	bne.n	800403c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d01b      	beq.n	8004092 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800405a:	4b15      	ldr	r3, [pc, #84]	; (80040b0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a15      	ldr	r2, [pc, #84]	; (80040b4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004060:	fba2 2303 	umull	r2, r3, r2, r3
 8004064:	099b      	lsrs	r3, r3, #6
 8004066:	2232      	movs	r2, #50	; 0x32
 8004068:	fb02 f303 	mul.w	r3, r2, r3
 800406c:	4a11      	ldr	r2, [pc, #68]	; (80040b4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800406e:	fba2 2303 	umull	r2, r3, r2, r3
 8004072:	099b      	lsrs	r3, r3, #6
 8004074:	3301      	adds	r3, #1
 8004076:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004078:	e002      	b.n	8004080 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	3b01      	subs	r3, #1
 800407e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004080:	4b0a      	ldr	r3, [pc, #40]	; (80040ac <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004084:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d102      	bne.n	8004092 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1f3      	bne.n	800407a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e000      	b.n	800409e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3714      	adds	r7, #20
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	46020800 	.word	0x46020800
 80040b0:	20000004 	.word	0x20000004
 80040b4:	10624dd3 	.word	0x10624dd3

080040b8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80040bc:	4b04      	ldr	r3, [pc, #16]	; (80040d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80040be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	46020800 	.word	0x46020800

080040d4 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80040d4:	b480      	push	{r7}
 80040d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 80040d8:	4b05      	ldr	r3, [pc, #20]	; (80040f0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	4a04      	ldr	r2, [pc, #16]	; (80040f0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80040de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040e2:	6113      	str	r3, [r2, #16]
}
 80040e4:	bf00      	nop
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	46020800 	.word	0x46020800

080040f4 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 80040f8:	4b05      	ldr	r3, [pc, #20]	; (8004110 <HAL_PWREx_EnableVddA+0x1c>)
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	4a04      	ldr	r2, [pc, #16]	; (8004110 <HAL_PWREx_EnableVddA+0x1c>)
 80040fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004102:	6113      	str	r3, [r2, #16]
}
 8004104:	bf00      	nop
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	46020800 	.word	0x46020800

08004114 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b08e      	sub	sp, #56	; 0x38
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800411c:	2300      	movs	r3, #0
 800411e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d102      	bne.n	800412e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	f000 bec8 	b.w	8004ebe <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800412e:	4b99      	ldr	r3, [pc, #612]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	f003 030c 	and.w	r3, r3, #12
 8004136:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004138:	4b96      	ldr	r3, [pc, #600]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 800413a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413c:	f003 0303 	and.w	r3, r3, #3
 8004140:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0310 	and.w	r3, r3, #16
 800414a:	2b00      	cmp	r3, #0
 800414c:	f000 816c 	beq.w	8004428 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004152:	2b00      	cmp	r3, #0
 8004154:	d007      	beq.n	8004166 <HAL_RCC_OscConfig+0x52>
 8004156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004158:	2b0c      	cmp	r3, #12
 800415a:	f040 80de 	bne.w	800431a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800415e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004160:	2b01      	cmp	r3, #1
 8004162:	f040 80da 	bne.w	800431a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d102      	bne.n	8004174 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	f000 bea5 	b.w	8004ebe <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004178:	4b86      	ldr	r3, [pc, #536]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d004      	beq.n	800418e <HAL_RCC_OscConfig+0x7a>
 8004184:	4b83      	ldr	r3, [pc, #524]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800418c:	e005      	b.n	800419a <HAL_RCC_OscConfig+0x86>
 800418e:	4b81      	ldr	r3, [pc, #516]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 8004190:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004194:	041b      	lsls	r3, r3, #16
 8004196:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800419a:	4293      	cmp	r3, r2
 800419c:	d255      	bcs.n	800424a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800419e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10a      	bne.n	80041ba <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	4618      	mov	r0, r3
 80041aa:	f001 f9d9 	bl	8005560 <RCC_SetFlashLatencyFromMSIRange>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d002      	beq.n	80041ba <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	f000 be82 	b.w	8004ebe <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80041ba:	4b76      	ldr	r3, [pc, #472]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	4a75      	ldr	r2, [pc, #468]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 80041c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80041c4:	6093      	str	r3, [r2, #8]
 80041c6:	4b73      	ldr	r3, [pc, #460]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	4970      	ldr	r1, [pc, #448]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80041e0:	d309      	bcc.n	80041f6 <HAL_RCC_OscConfig+0xe2>
 80041e2:	4b6c      	ldr	r3, [pc, #432]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	f023 021f 	bic.w	r2, r3, #31
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	4969      	ldr	r1, [pc, #420]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	60cb      	str	r3, [r1, #12]
 80041f4:	e07e      	b.n	80042f4 <HAL_RCC_OscConfig+0x1e0>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	da0a      	bge.n	8004214 <HAL_RCC_OscConfig+0x100>
 80041fe:	4b65      	ldr	r3, [pc, #404]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	015b      	lsls	r3, r3, #5
 800420c:	4961      	ldr	r1, [pc, #388]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 800420e:	4313      	orrs	r3, r2
 8004210:	60cb      	str	r3, [r1, #12]
 8004212:	e06f      	b.n	80042f4 <HAL_RCC_OscConfig+0x1e0>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800421c:	d30a      	bcc.n	8004234 <HAL_RCC_OscConfig+0x120>
 800421e:	4b5d      	ldr	r3, [pc, #372]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	029b      	lsls	r3, r3, #10
 800422c:	4959      	ldr	r1, [pc, #356]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 800422e:	4313      	orrs	r3, r2
 8004230:	60cb      	str	r3, [r1, #12]
 8004232:	e05f      	b.n	80042f4 <HAL_RCC_OscConfig+0x1e0>
 8004234:	4b57      	ldr	r3, [pc, #348]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a1b      	ldr	r3, [r3, #32]
 8004240:	03db      	lsls	r3, r3, #15
 8004242:	4954      	ldr	r1, [pc, #336]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 8004244:	4313      	orrs	r3, r2
 8004246:	60cb      	str	r3, [r1, #12]
 8004248:	e054      	b.n	80042f4 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800424a:	4b52      	ldr	r3, [pc, #328]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	4a51      	ldr	r2, [pc, #324]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 8004250:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004254:	6093      	str	r3, [r2, #8]
 8004256:	4b4f      	ldr	r3, [pc, #316]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004262:	494c      	ldr	r1, [pc, #304]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 8004264:	4313      	orrs	r3, r2
 8004266:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004270:	d309      	bcc.n	8004286 <HAL_RCC_OscConfig+0x172>
 8004272:	4b48      	ldr	r3, [pc, #288]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	f023 021f 	bic.w	r2, r3, #31
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	4945      	ldr	r1, [pc, #276]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 8004280:	4313      	orrs	r3, r2
 8004282:	60cb      	str	r3, [r1, #12]
 8004284:	e028      	b.n	80042d8 <HAL_RCC_OscConfig+0x1c4>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428a:	2b00      	cmp	r3, #0
 800428c:	da0a      	bge.n	80042a4 <HAL_RCC_OscConfig+0x190>
 800428e:	4b41      	ldr	r3, [pc, #260]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	015b      	lsls	r3, r3, #5
 800429c:	493d      	ldr	r1, [pc, #244]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	60cb      	str	r3, [r1, #12]
 80042a2:	e019      	b.n	80042d8 <HAL_RCC_OscConfig+0x1c4>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ac:	d30a      	bcc.n	80042c4 <HAL_RCC_OscConfig+0x1b0>
 80042ae:	4b39      	ldr	r3, [pc, #228]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	029b      	lsls	r3, r3, #10
 80042bc:	4935      	ldr	r1, [pc, #212]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	60cb      	str	r3, [r1, #12]
 80042c2:	e009      	b.n	80042d8 <HAL_RCC_OscConfig+0x1c4>
 80042c4:	4b33      	ldr	r3, [pc, #204]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	03db      	lsls	r3, r3, #15
 80042d2:	4930      	ldr	r1, [pc, #192]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80042d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10a      	bne.n	80042f4 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e2:	4618      	mov	r0, r3
 80042e4:	f001 f93c 	bl	8005560 <RCC_SetFlashLatencyFromMSIRange>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d002      	beq.n	80042f4 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	f000 bde5 	b.w	8004ebe <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80042f4:	f001 f8de 	bl	80054b4 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80042f8:	4b27      	ldr	r3, [pc, #156]	; (8004398 <HAL_RCC_OscConfig+0x284>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7fd fb87 	bl	8001a10 <HAL_InitTick>
 8004302:	4603      	mov	r3, r0
 8004304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8004308:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800430c:	2b00      	cmp	r3, #0
 800430e:	f000 808a 	beq.w	8004426 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8004312:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004316:	f000 bdd2 	b.w	8004ebe <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d066      	beq.n	80043f0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8004322:	4b1c      	ldr	r3, [pc, #112]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a1b      	ldr	r2, [pc, #108]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 8004328:	f043 0301 	orr.w	r3, r3, #1
 800432c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800432e:	f7fd fbb9 	bl	8001aa4 <HAL_GetTick>
 8004332:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004334:	e009      	b.n	800434a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004336:	f7fd fbb5 	bl	8001aa4 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d902      	bls.n	800434a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	f000 bdba 	b.w	8004ebe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800434a:	4b12      	ldr	r3, [pc, #72]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0304 	and.w	r3, r3, #4
 8004352:	2b00      	cmp	r3, #0
 8004354:	d0ef      	beq.n	8004336 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004356:	4b0f      	ldr	r3, [pc, #60]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	4a0e      	ldr	r2, [pc, #56]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 800435c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004360:	6093      	str	r3, [r2, #8]
 8004362:	4b0c      	ldr	r3, [pc, #48]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	4909      	ldr	r1, [pc, #36]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 8004370:	4313      	orrs	r3, r2
 8004372:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004378:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800437c:	d30e      	bcc.n	800439c <HAL_RCC_OscConfig+0x288>
 800437e:	4b05      	ldr	r3, [pc, #20]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	f023 021f 	bic.w	r2, r3, #31
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	4902      	ldr	r1, [pc, #8]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 800438c:	4313      	orrs	r3, r2
 800438e:	60cb      	str	r3, [r1, #12]
 8004390:	e04a      	b.n	8004428 <HAL_RCC_OscConfig+0x314>
 8004392:	bf00      	nop
 8004394:	46020c00 	.word	0x46020c00
 8004398:	20000008 	.word	0x20000008
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	da0a      	bge.n	80043ba <HAL_RCC_OscConfig+0x2a6>
 80043a4:	4b98      	ldr	r3, [pc, #608]	; (8004608 <HAL_RCC_OscConfig+0x4f4>)
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a1b      	ldr	r3, [r3, #32]
 80043b0:	015b      	lsls	r3, r3, #5
 80043b2:	4995      	ldr	r1, [pc, #596]	; (8004608 <HAL_RCC_OscConfig+0x4f4>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	60cb      	str	r3, [r1, #12]
 80043b8:	e036      	b.n	8004428 <HAL_RCC_OscConfig+0x314>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c2:	d30a      	bcc.n	80043da <HAL_RCC_OscConfig+0x2c6>
 80043c4:	4b90      	ldr	r3, [pc, #576]	; (8004608 <HAL_RCC_OscConfig+0x4f4>)
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a1b      	ldr	r3, [r3, #32]
 80043d0:	029b      	lsls	r3, r3, #10
 80043d2:	498d      	ldr	r1, [pc, #564]	; (8004608 <HAL_RCC_OscConfig+0x4f4>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	60cb      	str	r3, [r1, #12]
 80043d8:	e026      	b.n	8004428 <HAL_RCC_OscConfig+0x314>
 80043da:	4b8b      	ldr	r3, [pc, #556]	; (8004608 <HAL_RCC_OscConfig+0x4f4>)
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	03db      	lsls	r3, r3, #15
 80043e8:	4987      	ldr	r1, [pc, #540]	; (8004608 <HAL_RCC_OscConfig+0x4f4>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	60cb      	str	r3, [r1, #12]
 80043ee:	e01b      	b.n	8004428 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80043f0:	4b85      	ldr	r3, [pc, #532]	; (8004608 <HAL_RCC_OscConfig+0x4f4>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a84      	ldr	r2, [pc, #528]	; (8004608 <HAL_RCC_OscConfig+0x4f4>)
 80043f6:	f023 0301 	bic.w	r3, r3, #1
 80043fa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80043fc:	f7fd fb52 	bl	8001aa4 <HAL_GetTick>
 8004400:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004402:	e009      	b.n	8004418 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004404:	f7fd fb4e 	bl	8001aa4 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d902      	bls.n	8004418 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	f000 bd53 	b.w	8004ebe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004418:	4b7b      	ldr	r3, [pc, #492]	; (8004608 <HAL_RCC_OscConfig+0x4f4>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1ef      	bne.n	8004404 <HAL_RCC_OscConfig+0x2f0>
 8004424:	e000      	b.n	8004428 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004426:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 808b 	beq.w	800454c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004438:	2b08      	cmp	r3, #8
 800443a:	d005      	beq.n	8004448 <HAL_RCC_OscConfig+0x334>
 800443c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443e:	2b0c      	cmp	r3, #12
 8004440:	d109      	bne.n	8004456 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004444:	2b03      	cmp	r3, #3
 8004446:	d106      	bne.n	8004456 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d17d      	bne.n	800454c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	f000 bd34 	b.w	8004ebe <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800445e:	d106      	bne.n	800446e <HAL_RCC_OscConfig+0x35a>
 8004460:	4b69      	ldr	r3, [pc, #420]	; (8004608 <HAL_RCC_OscConfig+0x4f4>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a68      	ldr	r2, [pc, #416]	; (8004608 <HAL_RCC_OscConfig+0x4f4>)
 8004466:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800446a:	6013      	str	r3, [r2, #0]
 800446c:	e041      	b.n	80044f2 <HAL_RCC_OscConfig+0x3de>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004476:	d112      	bne.n	800449e <HAL_RCC_OscConfig+0x38a>
 8004478:	4b63      	ldr	r3, [pc, #396]	; (8004608 <HAL_RCC_OscConfig+0x4f4>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a62      	ldr	r2, [pc, #392]	; (8004608 <HAL_RCC_OscConfig+0x4f4>)
 800447e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004482:	6013      	str	r3, [r2, #0]
 8004484:	4b60      	ldr	r3, [pc, #384]	; (8004608 <HAL_RCC_OscConfig+0x4f4>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a5f      	ldr	r2, [pc, #380]	; (8004608 <HAL_RCC_OscConfig+0x4f4>)
 800448a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800448e:	6013      	str	r3, [r2, #0]
 8004490:	4b5d      	ldr	r3, [pc, #372]	; (8004608 <HAL_RCC_OscConfig+0x4f4>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a5c      	ldr	r2, [pc, #368]	; (8004608 <HAL_RCC_OscConfig+0x4f4>)
 8004496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800449a:	6013      	str	r3, [r2, #0]
 800449c:	e029      	b.n	80044f2 <HAL_RCC_OscConfig+0x3de>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80044a6:	d112      	bne.n	80044ce <HAL_RCC_OscConfig+0x3ba>
 80044a8:	4b57      	ldr	r3, [pc, #348]	; (8004608 <HAL_RCC_OscConfig+0x4f4>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a56      	ldr	r2, [pc, #344]	; (8004608 <HAL_RCC_OscConfig+0x4f4>)
 80044ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044b2:	6013      	str	r3, [r2, #0]
 80044b4:	4b54      	ldr	r3, [pc, #336]	; (8004608 <HAL_RCC_OscConfig+0x4f4>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a53      	ldr	r2, [pc, #332]	; (8004608 <HAL_RCC_OscConfig+0x4f4>)
 80044ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044be:	6013      	str	r3, [r2, #0]
 80044c0:	4b51      	ldr	r3, [pc, #324]	; (8004608 <HAL_RCC_OscConfig+0x4f4>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a50      	ldr	r2, [pc, #320]	; (8004608 <HAL_RCC_OscConfig+0x4f4>)
 80044c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044ca:	6013      	str	r3, [r2, #0]
 80044cc:	e011      	b.n	80044f2 <HAL_RCC_OscConfig+0x3de>
 80044ce:	4b4e      	ldr	r3, [pc, #312]	; (8004608 <HAL_RCC_OscConfig+0x4f4>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a4d      	ldr	r2, [pc, #308]	; (8004608 <HAL_RCC_OscConfig+0x4f4>)
 80044d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044d8:	6013      	str	r3, [r2, #0]
 80044da:	4b4b      	ldr	r3, [pc, #300]	; (8004608 <HAL_RCC_OscConfig+0x4f4>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a4a      	ldr	r2, [pc, #296]	; (8004608 <HAL_RCC_OscConfig+0x4f4>)
 80044e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044e4:	6013      	str	r3, [r2, #0]
 80044e6:	4b48      	ldr	r3, [pc, #288]	; (8004608 <HAL_RCC_OscConfig+0x4f4>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a47      	ldr	r2, [pc, #284]	; (8004608 <HAL_RCC_OscConfig+0x4f4>)
 80044ec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80044f0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d014      	beq.n	8004524 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80044fa:	f7fd fad3 	bl	8001aa4 <HAL_GetTick>
 80044fe:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004500:	e009      	b.n	8004516 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004502:	f7fd facf 	bl	8001aa4 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b64      	cmp	r3, #100	; 0x64
 800450e:	d902      	bls.n	8004516 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	f000 bcd4 	b.w	8004ebe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004516:	4b3c      	ldr	r3, [pc, #240]	; (8004608 <HAL_RCC_OscConfig+0x4f4>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d0ef      	beq.n	8004502 <HAL_RCC_OscConfig+0x3ee>
 8004522:	e013      	b.n	800454c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8004524:	f7fd fabe 	bl	8001aa4 <HAL_GetTick>
 8004528:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800452a:	e009      	b.n	8004540 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800452c:	f7fd faba 	bl	8001aa4 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b64      	cmp	r3, #100	; 0x64
 8004538:	d902      	bls.n	8004540 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	f000 bcbf 	b.w	8004ebe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004540:	4b31      	ldr	r3, [pc, #196]	; (8004608 <HAL_RCC_OscConfig+0x4f4>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1ef      	bne.n	800452c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d05f      	beq.n	8004618 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455a:	2b04      	cmp	r3, #4
 800455c:	d005      	beq.n	800456a <HAL_RCC_OscConfig+0x456>
 800455e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004560:	2b0c      	cmp	r3, #12
 8004562:	d114      	bne.n	800458e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004566:	2b02      	cmp	r3, #2
 8004568:	d111      	bne.n	800458e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d102      	bne.n	8004578 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	f000 bca3 	b.w	8004ebe <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004578:	4b23      	ldr	r3, [pc, #140]	; (8004608 <HAL_RCC_OscConfig+0x4f4>)
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	041b      	lsls	r3, r3, #16
 8004586:	4920      	ldr	r1, [pc, #128]	; (8004608 <HAL_RCC_OscConfig+0x4f4>)
 8004588:	4313      	orrs	r3, r2
 800458a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800458c:	e044      	b.n	8004618 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d024      	beq.n	80045e0 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8004596:	4b1c      	ldr	r3, [pc, #112]	; (8004608 <HAL_RCC_OscConfig+0x4f4>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a1b      	ldr	r2, [pc, #108]	; (8004608 <HAL_RCC_OscConfig+0x4f4>)
 800459c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045a0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80045a2:	f7fd fa7f 	bl	8001aa4 <HAL_GetTick>
 80045a6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045a8:	e009      	b.n	80045be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045aa:	f7fd fa7b 	bl	8001aa4 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d902      	bls.n	80045be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	f000 bc80 	b.w	8004ebe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045be:	4b12      	ldr	r3, [pc, #72]	; (8004608 <HAL_RCC_OscConfig+0x4f4>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d0ef      	beq.n	80045aa <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80045ca:	4b0f      	ldr	r3, [pc, #60]	; (8004608 <HAL_RCC_OscConfig+0x4f4>)
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	041b      	lsls	r3, r3, #16
 80045d8:	490b      	ldr	r1, [pc, #44]	; (8004608 <HAL_RCC_OscConfig+0x4f4>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	610b      	str	r3, [r1, #16]
 80045de:	e01b      	b.n	8004618 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80045e0:	4b09      	ldr	r3, [pc, #36]	; (8004608 <HAL_RCC_OscConfig+0x4f4>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a08      	ldr	r2, [pc, #32]	; (8004608 <HAL_RCC_OscConfig+0x4f4>)
 80045e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045ea:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80045ec:	f7fd fa5a 	bl	8001aa4 <HAL_GetTick>
 80045f0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045f2:	e00b      	b.n	800460c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045f4:	f7fd fa56 	bl	8001aa4 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d904      	bls.n	800460c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	f000 bc5b 	b.w	8004ebe <HAL_RCC_OscConfig+0xdaa>
 8004608:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800460c:	4baf      	ldr	r3, [pc, #700]	; (80048cc <HAL_RCC_OscConfig+0x7b8>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1ed      	bne.n	80045f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0308 	and.w	r3, r3, #8
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 80c8 	beq.w	80047b6 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8004626:	2300      	movs	r3, #0
 8004628:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800462c:	4ba7      	ldr	r3, [pc, #668]	; (80048cc <HAL_RCC_OscConfig+0x7b8>)
 800462e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004632:	f003 0304 	and.w	r3, r3, #4
 8004636:	2b00      	cmp	r3, #0
 8004638:	d111      	bne.n	800465e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800463a:	4ba4      	ldr	r3, [pc, #656]	; (80048cc <HAL_RCC_OscConfig+0x7b8>)
 800463c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004640:	4aa2      	ldr	r2, [pc, #648]	; (80048cc <HAL_RCC_OscConfig+0x7b8>)
 8004642:	f043 0304 	orr.w	r3, r3, #4
 8004646:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800464a:	4ba0      	ldr	r3, [pc, #640]	; (80048cc <HAL_RCC_OscConfig+0x7b8>)
 800464c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004650:	f003 0304 	and.w	r3, r3, #4
 8004654:	617b      	str	r3, [r7, #20]
 8004656:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8004658:	2301      	movs	r3, #1
 800465a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800465e:	4b9c      	ldr	r3, [pc, #624]	; (80048d0 <HAL_RCC_OscConfig+0x7bc>)
 8004660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b00      	cmp	r3, #0
 8004668:	d119      	bne.n	800469e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800466a:	4b99      	ldr	r3, [pc, #612]	; (80048d0 <HAL_RCC_OscConfig+0x7bc>)
 800466c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466e:	4a98      	ldr	r2, [pc, #608]	; (80048d0 <HAL_RCC_OscConfig+0x7bc>)
 8004670:	f043 0301 	orr.w	r3, r3, #1
 8004674:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004676:	f7fd fa15 	bl	8001aa4 <HAL_GetTick>
 800467a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800467c:	e009      	b.n	8004692 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800467e:	f7fd fa11 	bl	8001aa4 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d902      	bls.n	8004692 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	f000 bc16 	b.w	8004ebe <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004692:	4b8f      	ldr	r3, [pc, #572]	; (80048d0 <HAL_RCC_OscConfig+0x7bc>)
 8004694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b00      	cmp	r3, #0
 800469c:	d0ef      	beq.n	800467e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d05f      	beq.n	8004766 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80046a6:	4b89      	ldr	r3, [pc, #548]	; (80048cc <HAL_RCC_OscConfig+0x7b8>)
 80046a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046ac:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	699a      	ldr	r2, [r3, #24]
 80046b2:	6a3b      	ldr	r3, [r7, #32]
 80046b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d037      	beq.n	800472c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80046bc:	6a3b      	ldr	r3, [r7, #32]
 80046be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d006      	beq.n	80046d4 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80046c6:	6a3b      	ldr	r3, [r7, #32]
 80046c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d101      	bne.n	80046d4 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e3f4      	b.n	8004ebe <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80046d4:	6a3b      	ldr	r3, [r7, #32]
 80046d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d01b      	beq.n	8004716 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80046de:	4b7b      	ldr	r3, [pc, #492]	; (80048cc <HAL_RCC_OscConfig+0x7b8>)
 80046e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046e4:	4a79      	ldr	r2, [pc, #484]	; (80048cc <HAL_RCC_OscConfig+0x7b8>)
 80046e6:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80046ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 80046ee:	f7fd f9d9 	bl	8001aa4 <HAL_GetTick>
 80046f2:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80046f4:	e008      	b.n	8004708 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046f6:	f7fd f9d5 	bl	8001aa4 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	2b05      	cmp	r3, #5
 8004702:	d901      	bls.n	8004708 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e3da      	b.n	8004ebe <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004708:	4b70      	ldr	r3, [pc, #448]	; (80048cc <HAL_RCC_OscConfig+0x7b8>)
 800470a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800470e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1ef      	bne.n	80046f6 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8004716:	4b6d      	ldr	r3, [pc, #436]	; (80048cc <HAL_RCC_OscConfig+0x7b8>)
 8004718:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800471c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	4969      	ldr	r1, [pc, #420]	; (80048cc <HAL_RCC_OscConfig+0x7b8>)
 8004726:	4313      	orrs	r3, r2
 8004728:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800472c:	4b67      	ldr	r3, [pc, #412]	; (80048cc <HAL_RCC_OscConfig+0x7b8>)
 800472e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004732:	4a66      	ldr	r2, [pc, #408]	; (80048cc <HAL_RCC_OscConfig+0x7b8>)
 8004734:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004738:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800473c:	f7fd f9b2 	bl	8001aa4 <HAL_GetTick>
 8004740:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004742:	e008      	b.n	8004756 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004744:	f7fd f9ae 	bl	8001aa4 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b05      	cmp	r3, #5
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e3b3      	b.n	8004ebe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004756:	4b5d      	ldr	r3, [pc, #372]	; (80048cc <HAL_RCC_OscConfig+0x7b8>)
 8004758:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800475c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d0ef      	beq.n	8004744 <HAL_RCC_OscConfig+0x630>
 8004764:	e01b      	b.n	800479e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8004766:	4b59      	ldr	r3, [pc, #356]	; (80048cc <HAL_RCC_OscConfig+0x7b8>)
 8004768:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800476c:	4a57      	ldr	r2, [pc, #348]	; (80048cc <HAL_RCC_OscConfig+0x7b8>)
 800476e:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8004772:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8004776:	f7fd f995 	bl	8001aa4 <HAL_GetTick>
 800477a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800477c:	e008      	b.n	8004790 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800477e:	f7fd f991 	bl	8001aa4 <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	2b05      	cmp	r3, #5
 800478a:	d901      	bls.n	8004790 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e396      	b.n	8004ebe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004790:	4b4e      	ldr	r3, [pc, #312]	; (80048cc <HAL_RCC_OscConfig+0x7b8>)
 8004792:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004796:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1ef      	bne.n	800477e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800479e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d107      	bne.n	80047b6 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047a6:	4b49      	ldr	r3, [pc, #292]	; (80048cc <HAL_RCC_OscConfig+0x7b8>)
 80047a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047ac:	4a47      	ldr	r2, [pc, #284]	; (80048cc <HAL_RCC_OscConfig+0x7b8>)
 80047ae:	f023 0304 	bic.w	r3, r3, #4
 80047b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0304 	and.w	r3, r3, #4
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f000 8111 	beq.w	80049e6 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80047c4:	2300      	movs	r3, #0
 80047c6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ca:	4b40      	ldr	r3, [pc, #256]	; (80048cc <HAL_RCC_OscConfig+0x7b8>)
 80047cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047d0:	f003 0304 	and.w	r3, r3, #4
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d111      	bne.n	80047fc <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047d8:	4b3c      	ldr	r3, [pc, #240]	; (80048cc <HAL_RCC_OscConfig+0x7b8>)
 80047da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047de:	4a3b      	ldr	r2, [pc, #236]	; (80048cc <HAL_RCC_OscConfig+0x7b8>)
 80047e0:	f043 0304 	orr.w	r3, r3, #4
 80047e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80047e8:	4b38      	ldr	r3, [pc, #224]	; (80048cc <HAL_RCC_OscConfig+0x7b8>)
 80047ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047ee:	f003 0304 	and.w	r3, r3, #4
 80047f2:	613b      	str	r3, [r7, #16]
 80047f4:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80047f6:	2301      	movs	r3, #1
 80047f8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80047fc:	4b34      	ldr	r3, [pc, #208]	; (80048d0 <HAL_RCC_OscConfig+0x7bc>)
 80047fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	2b00      	cmp	r3, #0
 8004806:	d118      	bne.n	800483a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004808:	4b31      	ldr	r3, [pc, #196]	; (80048d0 <HAL_RCC_OscConfig+0x7bc>)
 800480a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480c:	4a30      	ldr	r2, [pc, #192]	; (80048d0 <HAL_RCC_OscConfig+0x7bc>)
 800480e:	f043 0301 	orr.w	r3, r3, #1
 8004812:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004814:	f7fd f946 	bl	8001aa4 <HAL_GetTick>
 8004818:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800481a:	e008      	b.n	800482e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800481c:	f7fd f942 	bl	8001aa4 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b02      	cmp	r3, #2
 8004828:	d901      	bls.n	800482e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e347      	b.n	8004ebe <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800482e:	4b28      	ldr	r3, [pc, #160]	; (80048d0 <HAL_RCC_OscConfig+0x7bc>)
 8004830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d0f0      	beq.n	800481c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b00      	cmp	r3, #0
 8004844:	d01f      	beq.n	8004886 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f003 0304 	and.w	r3, r3, #4
 800484e:	2b00      	cmp	r3, #0
 8004850:	d010      	beq.n	8004874 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004852:	4b1e      	ldr	r3, [pc, #120]	; (80048cc <HAL_RCC_OscConfig+0x7b8>)
 8004854:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004858:	4a1c      	ldr	r2, [pc, #112]	; (80048cc <HAL_RCC_OscConfig+0x7b8>)
 800485a:	f043 0304 	orr.w	r3, r3, #4
 800485e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004862:	4b1a      	ldr	r3, [pc, #104]	; (80048cc <HAL_RCC_OscConfig+0x7b8>)
 8004864:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004868:	4a18      	ldr	r2, [pc, #96]	; (80048cc <HAL_RCC_OscConfig+0x7b8>)
 800486a:	f043 0301 	orr.w	r3, r3, #1
 800486e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004872:	e018      	b.n	80048a6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004874:	4b15      	ldr	r3, [pc, #84]	; (80048cc <HAL_RCC_OscConfig+0x7b8>)
 8004876:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800487a:	4a14      	ldr	r2, [pc, #80]	; (80048cc <HAL_RCC_OscConfig+0x7b8>)
 800487c:	f043 0301 	orr.w	r3, r3, #1
 8004880:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004884:	e00f      	b.n	80048a6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004886:	4b11      	ldr	r3, [pc, #68]	; (80048cc <HAL_RCC_OscConfig+0x7b8>)
 8004888:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800488c:	4a0f      	ldr	r2, [pc, #60]	; (80048cc <HAL_RCC_OscConfig+0x7b8>)
 800488e:	f023 0301 	bic.w	r3, r3, #1
 8004892:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004896:	4b0d      	ldr	r3, [pc, #52]	; (80048cc <HAL_RCC_OscConfig+0x7b8>)
 8004898:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800489c:	4a0b      	ldr	r2, [pc, #44]	; (80048cc <HAL_RCC_OscConfig+0x7b8>)
 800489e:	f023 0304 	bic.w	r3, r3, #4
 80048a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d057      	beq.n	800495e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80048ae:	f7fd f8f9 	bl	8001aa4 <HAL_GetTick>
 80048b2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048b4:	e00e      	b.n	80048d4 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048b6:	f7fd f8f5 	bl	8001aa4 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d905      	bls.n	80048d4 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e2f8      	b.n	8004ebe <HAL_RCC_OscConfig+0xdaa>
 80048cc:	46020c00 	.word	0x46020c00
 80048d0:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048d4:	4b9c      	ldr	r3, [pc, #624]	; (8004b48 <HAL_RCC_OscConfig+0xa34>)
 80048d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d0e9      	beq.n	80048b6 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d01b      	beq.n	8004926 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80048ee:	4b96      	ldr	r3, [pc, #600]	; (8004b48 <HAL_RCC_OscConfig+0xa34>)
 80048f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80048f4:	4a94      	ldr	r2, [pc, #592]	; (8004b48 <HAL_RCC_OscConfig+0xa34>)
 80048f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048fa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80048fe:	e00a      	b.n	8004916 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004900:	f7fd f8d0 	bl	8001aa4 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	f241 3288 	movw	r2, #5000	; 0x1388
 800490e:	4293      	cmp	r3, r2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e2d3      	b.n	8004ebe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004916:	4b8c      	ldr	r3, [pc, #560]	; (8004b48 <HAL_RCC_OscConfig+0xa34>)
 8004918:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800491c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004920:	2b00      	cmp	r3, #0
 8004922:	d0ed      	beq.n	8004900 <HAL_RCC_OscConfig+0x7ec>
 8004924:	e053      	b.n	80049ce <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004926:	4b88      	ldr	r3, [pc, #544]	; (8004b48 <HAL_RCC_OscConfig+0xa34>)
 8004928:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800492c:	4a86      	ldr	r2, [pc, #536]	; (8004b48 <HAL_RCC_OscConfig+0xa34>)
 800492e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004932:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004936:	e00a      	b.n	800494e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004938:	f7fd f8b4 	bl	8001aa4 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	f241 3288 	movw	r2, #5000	; 0x1388
 8004946:	4293      	cmp	r3, r2
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e2b7      	b.n	8004ebe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800494e:	4b7e      	ldr	r3, [pc, #504]	; (8004b48 <HAL_RCC_OscConfig+0xa34>)
 8004950:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004954:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1ed      	bne.n	8004938 <HAL_RCC_OscConfig+0x824>
 800495c:	e037      	b.n	80049ce <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800495e:	f7fd f8a1 	bl	8001aa4 <HAL_GetTick>
 8004962:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004964:	e00a      	b.n	800497c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004966:	f7fd f89d 	bl	8001aa4 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	f241 3288 	movw	r2, #5000	; 0x1388
 8004974:	4293      	cmp	r3, r2
 8004976:	d901      	bls.n	800497c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e2a0      	b.n	8004ebe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800497c:	4b72      	ldr	r3, [pc, #456]	; (8004b48 <HAL_RCC_OscConfig+0xa34>)
 800497e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004982:	f003 0302 	and.w	r3, r3, #2
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1ed      	bne.n	8004966 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800498a:	4b6f      	ldr	r3, [pc, #444]	; (8004b48 <HAL_RCC_OscConfig+0xa34>)
 800498c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004994:	2b00      	cmp	r3, #0
 8004996:	d01a      	beq.n	80049ce <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004998:	4b6b      	ldr	r3, [pc, #428]	; (8004b48 <HAL_RCC_OscConfig+0xa34>)
 800499a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800499e:	4a6a      	ldr	r2, [pc, #424]	; (8004b48 <HAL_RCC_OscConfig+0xa34>)
 80049a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049a4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80049a8:	e00a      	b.n	80049c0 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049aa:	f7fd f87b 	bl	8001aa4 <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d901      	bls.n	80049c0 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e27e      	b.n	8004ebe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80049c0:	4b61      	ldr	r3, [pc, #388]	; (8004b48 <HAL_RCC_OscConfig+0xa34>)
 80049c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80049c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1ed      	bne.n	80049aa <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80049ce:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d107      	bne.n	80049e6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049d6:	4b5c      	ldr	r3, [pc, #368]	; (8004b48 <HAL_RCC_OscConfig+0xa34>)
 80049d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049dc:	4a5a      	ldr	r2, [pc, #360]	; (8004b48 <HAL_RCC_OscConfig+0xa34>)
 80049de:	f023 0304 	bic.w	r3, r3, #4
 80049e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0320 	and.w	r3, r3, #32
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d036      	beq.n	8004a60 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d019      	beq.n	8004a2e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80049fa:	4b53      	ldr	r3, [pc, #332]	; (8004b48 <HAL_RCC_OscConfig+0xa34>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a52      	ldr	r2, [pc, #328]	; (8004b48 <HAL_RCC_OscConfig+0xa34>)
 8004a00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a04:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004a06:	f7fd f84d 	bl	8001aa4 <HAL_GetTick>
 8004a0a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004a0c:	e008      	b.n	8004a20 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a0e:	f7fd f849 	bl	8001aa4 <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d901      	bls.n	8004a20 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e24e      	b.n	8004ebe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004a20:	4b49      	ldr	r3, [pc, #292]	; (8004b48 <HAL_RCC_OscConfig+0xa34>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d0f0      	beq.n	8004a0e <HAL_RCC_OscConfig+0x8fa>
 8004a2c:	e018      	b.n	8004a60 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8004a2e:	4b46      	ldr	r3, [pc, #280]	; (8004b48 <HAL_RCC_OscConfig+0xa34>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a45      	ldr	r2, [pc, #276]	; (8004b48 <HAL_RCC_OscConfig+0xa34>)
 8004a34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a38:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004a3a:	f7fd f833 	bl	8001aa4 <HAL_GetTick>
 8004a3e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004a40:	e008      	b.n	8004a54 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a42:	f7fd f82f 	bl	8001aa4 <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d901      	bls.n	8004a54 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e234      	b.n	8004ebe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004a54:	4b3c      	ldr	r3, [pc, #240]	; (8004b48 <HAL_RCC_OscConfig+0xa34>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1f0      	bne.n	8004a42 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d036      	beq.n	8004ada <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d019      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8004a74:	4b34      	ldr	r3, [pc, #208]	; (8004b48 <HAL_RCC_OscConfig+0xa34>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a33      	ldr	r2, [pc, #204]	; (8004b48 <HAL_RCC_OscConfig+0xa34>)
 8004a7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a7e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004a80:	f7fd f810 	bl	8001aa4 <HAL_GetTick>
 8004a84:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004a86:	e008      	b.n	8004a9a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004a88:	f7fd f80c 	bl	8001aa4 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e211      	b.n	8004ebe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004a9a:	4b2b      	ldr	r3, [pc, #172]	; (8004b48 <HAL_RCC_OscConfig+0xa34>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d0f0      	beq.n	8004a88 <HAL_RCC_OscConfig+0x974>
 8004aa6:	e018      	b.n	8004ada <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8004aa8:	4b27      	ldr	r3, [pc, #156]	; (8004b48 <HAL_RCC_OscConfig+0xa34>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a26      	ldr	r2, [pc, #152]	; (8004b48 <HAL_RCC_OscConfig+0xa34>)
 8004aae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ab2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004ab4:	f7fc fff6 	bl	8001aa4 <HAL_GetTick>
 8004ab8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004aba:	e008      	b.n	8004ace <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004abc:	f7fc fff2 	bl	8001aa4 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e1f7      	b.n	8004ebe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004ace:	4b1e      	ldr	r3, [pc, #120]	; (8004b48 <HAL_RCC_OscConfig+0xa34>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1f0      	bne.n	8004abc <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d07f      	beq.n	8004be6 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d062      	beq.n	8004bb4 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8004aee:	4b16      	ldr	r3, [pc, #88]	; (8004b48 <HAL_RCC_OscConfig+0xa34>)
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	4a15      	ldr	r2, [pc, #84]	; (8004b48 <HAL_RCC_OscConfig+0xa34>)
 8004af4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004af8:	6093      	str	r3, [r2, #8]
 8004afa:	4b13      	ldr	r3, [pc, #76]	; (8004b48 <HAL_RCC_OscConfig+0xa34>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b06:	4910      	ldr	r1, [pc, #64]	; (8004b48 <HAL_RCC_OscConfig+0xa34>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b10:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004b14:	d309      	bcc.n	8004b2a <HAL_RCC_OscConfig+0xa16>
 8004b16:	4b0c      	ldr	r3, [pc, #48]	; (8004b48 <HAL_RCC_OscConfig+0xa34>)
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	f023 021f 	bic.w	r2, r3, #31
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	4909      	ldr	r1, [pc, #36]	; (8004b48 <HAL_RCC_OscConfig+0xa34>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	60cb      	str	r3, [r1, #12]
 8004b28:	e02a      	b.n	8004b80 <HAL_RCC_OscConfig+0xa6c>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	da0c      	bge.n	8004b4c <HAL_RCC_OscConfig+0xa38>
 8004b32:	4b05      	ldr	r3, [pc, #20]	; (8004b48 <HAL_RCC_OscConfig+0xa34>)
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	015b      	lsls	r3, r3, #5
 8004b40:	4901      	ldr	r1, [pc, #4]	; (8004b48 <HAL_RCC_OscConfig+0xa34>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	60cb      	str	r3, [r1, #12]
 8004b46:	e01b      	b.n	8004b80 <HAL_RCC_OscConfig+0xa6c>
 8004b48:	46020c00 	.word	0x46020c00
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b54:	d30a      	bcc.n	8004b6c <HAL_RCC_OscConfig+0xa58>
 8004b56:	4ba1      	ldr	r3, [pc, #644]	; (8004ddc <HAL_RCC_OscConfig+0xcc8>)
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	029b      	lsls	r3, r3, #10
 8004b64:	499d      	ldr	r1, [pc, #628]	; (8004ddc <HAL_RCC_OscConfig+0xcc8>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	60cb      	str	r3, [r1, #12]
 8004b6a:	e009      	b.n	8004b80 <HAL_RCC_OscConfig+0xa6c>
 8004b6c:	4b9b      	ldr	r3, [pc, #620]	; (8004ddc <HAL_RCC_OscConfig+0xcc8>)
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	03db      	lsls	r3, r3, #15
 8004b7a:	4998      	ldr	r1, [pc, #608]	; (8004ddc <HAL_RCC_OscConfig+0xcc8>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8004b80:	4b96      	ldr	r3, [pc, #600]	; (8004ddc <HAL_RCC_OscConfig+0xcc8>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a95      	ldr	r2, [pc, #596]	; (8004ddc <HAL_RCC_OscConfig+0xcc8>)
 8004b86:	f043 0310 	orr.w	r3, r3, #16
 8004b8a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004b8c:	f7fc ff8a 	bl	8001aa4 <HAL_GetTick>
 8004b90:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004b92:	e008      	b.n	8004ba6 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004b94:	f7fc ff86 	bl	8001aa4 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e18b      	b.n	8004ebe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004ba6:	4b8d      	ldr	r3, [pc, #564]	; (8004ddc <HAL_RCC_OscConfig+0xcc8>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0320 	and.w	r3, r3, #32
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d0f0      	beq.n	8004b94 <HAL_RCC_OscConfig+0xa80>
 8004bb2:	e018      	b.n	8004be6 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8004bb4:	4b89      	ldr	r3, [pc, #548]	; (8004ddc <HAL_RCC_OscConfig+0xcc8>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a88      	ldr	r2, [pc, #544]	; (8004ddc <HAL_RCC_OscConfig+0xcc8>)
 8004bba:	f023 0310 	bic.w	r3, r3, #16
 8004bbe:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004bc0:	f7fc ff70 	bl	8001aa4 <HAL_GetTick>
 8004bc4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004bc6:	e008      	b.n	8004bda <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004bc8:	f7fc ff6c 	bl	8001aa4 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d901      	bls.n	8004bda <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e171      	b.n	8004ebe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004bda:	4b80      	ldr	r3, [pc, #512]	; (8004ddc <HAL_RCC_OscConfig+0xcc8>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0320 	and.w	r3, r3, #32
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1f0      	bne.n	8004bc8 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f000 8166 	beq.w	8004ebc <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bf6:	4b79      	ldr	r3, [pc, #484]	; (8004ddc <HAL_RCC_OscConfig+0xcc8>)
 8004bf8:	69db      	ldr	r3, [r3, #28]
 8004bfa:	f003 030c 	and.w	r3, r3, #12
 8004bfe:	2b0c      	cmp	r3, #12
 8004c00:	f000 80f2 	beq.w	8004de8 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	f040 80c5 	bne.w	8004d98 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004c0e:	4b73      	ldr	r3, [pc, #460]	; (8004ddc <HAL_RCC_OscConfig+0xcc8>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a72      	ldr	r2, [pc, #456]	; (8004ddc <HAL_RCC_OscConfig+0xcc8>)
 8004c14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c18:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004c1a:	f7fc ff43 	bl	8001aa4 <HAL_GetTick>
 8004c1e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004c20:	e008      	b.n	8004c34 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c22:	f7fc ff3f 	bl	8001aa4 <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d901      	bls.n	8004c34 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e144      	b.n	8004ebe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004c34:	4b69      	ldr	r3, [pc, #420]	; (8004ddc <HAL_RCC_OscConfig+0xcc8>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1f0      	bne.n	8004c22 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c40:	4b66      	ldr	r3, [pc, #408]	; (8004ddc <HAL_RCC_OscConfig+0xcc8>)
 8004c42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c46:	f003 0304 	and.w	r3, r3, #4
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d111      	bne.n	8004c72 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8004c4e:	4b63      	ldr	r3, [pc, #396]	; (8004ddc <HAL_RCC_OscConfig+0xcc8>)
 8004c50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c54:	4a61      	ldr	r2, [pc, #388]	; (8004ddc <HAL_RCC_OscConfig+0xcc8>)
 8004c56:	f043 0304 	orr.w	r3, r3, #4
 8004c5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004c5e:	4b5f      	ldr	r3, [pc, #380]	; (8004ddc <HAL_RCC_OscConfig+0xcc8>)
 8004c60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c64:	f003 0304 	and.w	r3, r3, #4
 8004c68:	60fb      	str	r3, [r7, #12]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8004c72:	4b5b      	ldr	r3, [pc, #364]	; (8004de0 <HAL_RCC_OscConfig+0xccc>)
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c7e:	d102      	bne.n	8004c86 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8004c80:	2301      	movs	r3, #1
 8004c82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004c86:	4b56      	ldr	r3, [pc, #344]	; (8004de0 <HAL_RCC_OscConfig+0xccc>)
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	4a55      	ldr	r2, [pc, #340]	; (8004de0 <HAL_RCC_OscConfig+0xccc>)
 8004c8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c90:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8004c92:	4b52      	ldr	r3, [pc, #328]	; (8004ddc <HAL_RCC_OscConfig+0xcc8>)
 8004c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c9a:	f023 0303 	bic.w	r3, r3, #3
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004ca6:	3a01      	subs	r2, #1
 8004ca8:	0212      	lsls	r2, r2, #8
 8004caa:	4311      	orrs	r1, r2
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	494a      	ldr	r1, [pc, #296]	; (8004ddc <HAL_RCC_OscConfig+0xcc8>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	628b      	str	r3, [r1, #40]	; 0x28
 8004cb8:	4b48      	ldr	r3, [pc, #288]	; (8004ddc <HAL_RCC_OscConfig+0xcc8>)
 8004cba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cbc:	4b49      	ldr	r3, [pc, #292]	; (8004de4 <HAL_RCC_OscConfig+0xcd0>)
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004cc4:	3a01      	subs	r2, #1
 8004cc6:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004cce:	3a01      	subs	r2, #1
 8004cd0:	0252      	lsls	r2, r2, #9
 8004cd2:	b292      	uxth	r2, r2
 8004cd4:	4311      	orrs	r1, r2
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004cda:	3a01      	subs	r2, #1
 8004cdc:	0412      	lsls	r2, r2, #16
 8004cde:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004ce2:	4311      	orrs	r1, r2
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004ce8:	3a01      	subs	r2, #1
 8004cea:	0612      	lsls	r2, r2, #24
 8004cec:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	493a      	ldr	r1, [pc, #232]	; (8004ddc <HAL_RCC_OscConfig+0xcc8>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004cf8:	4b38      	ldr	r3, [pc, #224]	; (8004ddc <HAL_RCC_OscConfig+0xcc8>)
 8004cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfc:	4a37      	ldr	r2, [pc, #220]	; (8004ddc <HAL_RCC_OscConfig+0xcc8>)
 8004cfe:	f023 0310 	bic.w	r3, r3, #16
 8004d02:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d08:	4a34      	ldr	r2, [pc, #208]	; (8004ddc <HAL_RCC_OscConfig+0xcc8>)
 8004d0a:	00db      	lsls	r3, r3, #3
 8004d0c:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004d0e:	4b33      	ldr	r3, [pc, #204]	; (8004ddc <HAL_RCC_OscConfig+0xcc8>)
 8004d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d12:	4a32      	ldr	r2, [pc, #200]	; (8004ddc <HAL_RCC_OscConfig+0xcc8>)
 8004d14:	f043 0310 	orr.w	r3, r3, #16
 8004d18:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8004d1a:	4b30      	ldr	r3, [pc, #192]	; (8004ddc <HAL_RCC_OscConfig+0xcc8>)
 8004d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1e:	f023 020c 	bic.w	r2, r3, #12
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d26:	492d      	ldr	r1, [pc, #180]	; (8004ddc <HAL_RCC_OscConfig+0xcc8>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8004d2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d105      	bne.n	8004d40 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004d34:	4b2a      	ldr	r3, [pc, #168]	; (8004de0 <HAL_RCC_OscConfig+0xccc>)
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	4a29      	ldr	r2, [pc, #164]	; (8004de0 <HAL_RCC_OscConfig+0xccc>)
 8004d3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d3e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004d40:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d107      	bne.n	8004d58 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8004d48:	4b24      	ldr	r3, [pc, #144]	; (8004ddc <HAL_RCC_OscConfig+0xcc8>)
 8004d4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d4e:	4a23      	ldr	r2, [pc, #140]	; (8004ddc <HAL_RCC_OscConfig+0xcc8>)
 8004d50:	f023 0304 	bic.w	r3, r3, #4
 8004d54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004d58:	4b20      	ldr	r3, [pc, #128]	; (8004ddc <HAL_RCC_OscConfig+0xcc8>)
 8004d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5c:	4a1f      	ldr	r2, [pc, #124]	; (8004ddc <HAL_RCC_OscConfig+0xcc8>)
 8004d5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d62:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8004d64:	4b1d      	ldr	r3, [pc, #116]	; (8004ddc <HAL_RCC_OscConfig+0xcc8>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a1c      	ldr	r2, [pc, #112]	; (8004ddc <HAL_RCC_OscConfig+0xcc8>)
 8004d6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d6e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004d70:	f7fc fe98 	bl	8001aa4 <HAL_GetTick>
 8004d74:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004d76:	e008      	b.n	8004d8a <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d78:	f7fc fe94 	bl	8001aa4 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e099      	b.n	8004ebe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004d8a:	4b14      	ldr	r3, [pc, #80]	; (8004ddc <HAL_RCC_OscConfig+0xcc8>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d0f0      	beq.n	8004d78 <HAL_RCC_OscConfig+0xc64>
 8004d96:	e091      	b.n	8004ebc <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004d98:	4b10      	ldr	r3, [pc, #64]	; (8004ddc <HAL_RCC_OscConfig+0xcc8>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a0f      	ldr	r2, [pc, #60]	; (8004ddc <HAL_RCC_OscConfig+0xcc8>)
 8004d9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004da2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004da4:	f7fc fe7e 	bl	8001aa4 <HAL_GetTick>
 8004da8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004daa:	e008      	b.n	8004dbe <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dac:	f7fc fe7a 	bl	8001aa4 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e07f      	b.n	8004ebe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004dbe:	4b07      	ldr	r3, [pc, #28]	; (8004ddc <HAL_RCC_OscConfig+0xcc8>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1f0      	bne.n	8004dac <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004dca:	4b04      	ldr	r3, [pc, #16]	; (8004ddc <HAL_RCC_OscConfig+0xcc8>)
 8004dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dce:	4a03      	ldr	r2, [pc, #12]	; (8004ddc <HAL_RCC_OscConfig+0xcc8>)
 8004dd0:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8004dd4:	f023 0303 	bic.w	r3, r3, #3
 8004dd8:	6293      	str	r3, [r2, #40]	; 0x28
 8004dda:	e06f      	b.n	8004ebc <HAL_RCC_OscConfig+0xda8>
 8004ddc:	46020c00 	.word	0x46020c00
 8004de0:	46020800 	.word	0x46020800
 8004de4:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004de8:	4b37      	ldr	r3, [pc, #220]	; (8004ec8 <HAL_RCC_OscConfig+0xdb4>)
 8004dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dec:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004dee:	4b36      	ldr	r3, [pc, #216]	; (8004ec8 <HAL_RCC_OscConfig+0xdb4>)
 8004df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df2:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d039      	beq.n	8004e70 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	f003 0203 	and.w	r2, r3, #3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d132      	bne.n	8004e70 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	0a1b      	lsrs	r3, r3, #8
 8004e0e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e16:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d129      	bne.n	8004e70 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d122      	bne.n	8004e70 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e34:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d11a      	bne.n	8004e70 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	0a5b      	lsrs	r3, r3, #9
 8004e3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e46:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d111      	bne.n	8004e70 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	0c1b      	lsrs	r3, r3, #16
 8004e50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e58:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d108      	bne.n	8004e70 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	0e1b      	lsrs	r3, r3, #24
 8004e62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d001      	beq.n	8004e74 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e024      	b.n	8004ebe <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004e74:	4b14      	ldr	r3, [pc, #80]	; (8004ec8 <HAL_RCC_OscConfig+0xdb4>)
 8004e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e78:	08db      	lsrs	r3, r3, #3
 8004e7a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d01a      	beq.n	8004ebc <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004e86:	4b10      	ldr	r3, [pc, #64]	; (8004ec8 <HAL_RCC_OscConfig+0xdb4>)
 8004e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8a:	4a0f      	ldr	r2, [pc, #60]	; (8004ec8 <HAL_RCC_OscConfig+0xdb4>)
 8004e8c:	f023 0310 	bic.w	r3, r3, #16
 8004e90:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e92:	f7fc fe07 	bl	8001aa4 <HAL_GetTick>
 8004e96:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8004e98:	bf00      	nop
 8004e9a:	f7fc fe03 	bl	8001aa4 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d0f9      	beq.n	8004e9a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eaa:	4a07      	ldr	r2, [pc, #28]	; (8004ec8 <HAL_RCC_OscConfig+0xdb4>)
 8004eac:	00db      	lsls	r3, r3, #3
 8004eae:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004eb0:	4b05      	ldr	r3, [pc, #20]	; (8004ec8 <HAL_RCC_OscConfig+0xdb4>)
 8004eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb4:	4a04      	ldr	r2, [pc, #16]	; (8004ec8 <HAL_RCC_OscConfig+0xdb4>)
 8004eb6:	f043 0310 	orr.w	r3, r3, #16
 8004eba:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3738      	adds	r7, #56	; 0x38
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	46020c00 	.word	0x46020c00

08004ecc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d101      	bne.n	8004ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e1d9      	b.n	8005294 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ee0:	4b9b      	ldr	r3, [pc, #620]	; (8005150 <HAL_RCC_ClockConfig+0x284>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 030f 	and.w	r3, r3, #15
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d910      	bls.n	8004f10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eee:	4b98      	ldr	r3, [pc, #608]	; (8005150 <HAL_RCC_ClockConfig+0x284>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f023 020f 	bic.w	r2, r3, #15
 8004ef6:	4996      	ldr	r1, [pc, #600]	; (8005150 <HAL_RCC_ClockConfig+0x284>)
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004efe:	4b94      	ldr	r3, [pc, #592]	; (8005150 <HAL_RCC_ClockConfig+0x284>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 030f 	and.w	r3, r3, #15
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d001      	beq.n	8004f10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e1c1      	b.n	8005294 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0310 	and.w	r3, r3, #16
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d010      	beq.n	8004f3e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	695a      	ldr	r2, [r3, #20]
 8004f20:	4b8c      	ldr	r3, [pc, #560]	; (8005154 <HAL_RCC_ClockConfig+0x288>)
 8004f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d908      	bls.n	8004f3e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8004f2c:	4b89      	ldr	r3, [pc, #548]	; (8005154 <HAL_RCC_ClockConfig+0x288>)
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f30:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	4986      	ldr	r1, [pc, #536]	; (8005154 <HAL_RCC_ClockConfig+0x288>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0308 	and.w	r3, r3, #8
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d012      	beq.n	8004f70 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	691a      	ldr	r2, [r3, #16]
 8004f4e:	4b81      	ldr	r3, [pc, #516]	; (8005154 <HAL_RCC_ClockConfig+0x288>)
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	091b      	lsrs	r3, r3, #4
 8004f54:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d909      	bls.n	8004f70 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004f5c:	4b7d      	ldr	r3, [pc, #500]	; (8005154 <HAL_RCC_ClockConfig+0x288>)
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	011b      	lsls	r3, r3, #4
 8004f6a:	497a      	ldr	r1, [pc, #488]	; (8005154 <HAL_RCC_ClockConfig+0x288>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0304 	and.w	r3, r3, #4
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d010      	beq.n	8004f9e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68da      	ldr	r2, [r3, #12]
 8004f80:	4b74      	ldr	r3, [pc, #464]	; (8005154 <HAL_RCC_ClockConfig+0x288>)
 8004f82:	6a1b      	ldr	r3, [r3, #32]
 8004f84:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d908      	bls.n	8004f9e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004f8c:	4b71      	ldr	r3, [pc, #452]	; (8005154 <HAL_RCC_ClockConfig+0x288>)
 8004f8e:	6a1b      	ldr	r3, [r3, #32]
 8004f90:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	496e      	ldr	r1, [pc, #440]	; (8005154 <HAL_RCC_ClockConfig+0x288>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0302 	and.w	r3, r3, #2
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d010      	beq.n	8004fcc <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	689a      	ldr	r2, [r3, #8]
 8004fae:	4b69      	ldr	r3, [pc, #420]	; (8005154 <HAL_RCC_ClockConfig+0x288>)
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	f003 030f 	and.w	r3, r3, #15
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d908      	bls.n	8004fcc <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004fba:	4b66      	ldr	r3, [pc, #408]	; (8005154 <HAL_RCC_ClockConfig+0x288>)
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	f023 020f 	bic.w	r2, r3, #15
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	4963      	ldr	r1, [pc, #396]	; (8005154 <HAL_RCC_ClockConfig+0x288>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f000 80d2 	beq.w	800517e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	2b03      	cmp	r3, #3
 8004fe4:	d143      	bne.n	800506e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fe6:	4b5b      	ldr	r3, [pc, #364]	; (8005154 <HAL_RCC_ClockConfig+0x288>)
 8004fe8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fec:	f003 0304 	and.w	r3, r3, #4
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d110      	bne.n	8005016 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004ff4:	4b57      	ldr	r3, [pc, #348]	; (8005154 <HAL_RCC_ClockConfig+0x288>)
 8004ff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ffa:	4a56      	ldr	r2, [pc, #344]	; (8005154 <HAL_RCC_ClockConfig+0x288>)
 8004ffc:	f043 0304 	orr.w	r3, r3, #4
 8005000:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005004:	4b53      	ldr	r3, [pc, #332]	; (8005154 <HAL_RCC_ClockConfig+0x288>)
 8005006:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800500a:	f003 0304 	and.w	r3, r3, #4
 800500e:	60bb      	str	r3, [r7, #8]
 8005010:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8005012:	2301      	movs	r3, #1
 8005014:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8005016:	f7fc fd45 	bl	8001aa4 <HAL_GetTick>
 800501a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800501c:	4b4e      	ldr	r3, [pc, #312]	; (8005158 <HAL_RCC_ClockConfig+0x28c>)
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00f      	beq.n	8005048 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005028:	e008      	b.n	800503c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800502a:	f7fc fd3b 	bl	8001aa4 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	2b02      	cmp	r3, #2
 8005036:	d901      	bls.n	800503c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e12b      	b.n	8005294 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800503c:	4b46      	ldr	r3, [pc, #280]	; (8005158 <HAL_RCC_ClockConfig+0x28c>)
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d0f0      	beq.n	800502a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005048:	7dfb      	ldrb	r3, [r7, #23]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d107      	bne.n	800505e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800504e:	4b41      	ldr	r3, [pc, #260]	; (8005154 <HAL_RCC_ClockConfig+0x288>)
 8005050:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005054:	4a3f      	ldr	r2, [pc, #252]	; (8005154 <HAL_RCC_ClockConfig+0x288>)
 8005056:	f023 0304 	bic.w	r3, r3, #4
 800505a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800505e:	4b3d      	ldr	r3, [pc, #244]	; (8005154 <HAL_RCC_ClockConfig+0x288>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d121      	bne.n	80050ae <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e112      	b.n	8005294 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	2b02      	cmp	r3, #2
 8005074:	d107      	bne.n	8005086 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005076:	4b37      	ldr	r3, [pc, #220]	; (8005154 <HAL_RCC_ClockConfig+0x288>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d115      	bne.n	80050ae <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e106      	b.n	8005294 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d107      	bne.n	800509e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800508e:	4b31      	ldr	r3, [pc, #196]	; (8005154 <HAL_RCC_ClockConfig+0x288>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0304 	and.w	r3, r3, #4
 8005096:	2b00      	cmp	r3, #0
 8005098:	d109      	bne.n	80050ae <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e0fa      	b.n	8005294 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800509e:	4b2d      	ldr	r3, [pc, #180]	; (8005154 <HAL_RCC_ClockConfig+0x288>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e0f2      	b.n	8005294 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80050ae:	4b29      	ldr	r3, [pc, #164]	; (8005154 <HAL_RCC_ClockConfig+0x288>)
 80050b0:	69db      	ldr	r3, [r3, #28]
 80050b2:	f023 0203 	bic.w	r2, r3, #3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	4926      	ldr	r1, [pc, #152]	; (8005154 <HAL_RCC_ClockConfig+0x288>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80050c0:	f7fc fcf0 	bl	8001aa4 <HAL_GetTick>
 80050c4:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	2b03      	cmp	r3, #3
 80050cc:	d112      	bne.n	80050f4 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050ce:	e00a      	b.n	80050e6 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050d0:	f7fc fce8 	bl	8001aa4 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	f241 3288 	movw	r2, #5000	; 0x1388
 80050de:	4293      	cmp	r3, r2
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e0d6      	b.n	8005294 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050e6:	4b1b      	ldr	r3, [pc, #108]	; (8005154 <HAL_RCC_ClockConfig+0x288>)
 80050e8:	69db      	ldr	r3, [r3, #28]
 80050ea:	f003 030c 	and.w	r3, r3, #12
 80050ee:	2b0c      	cmp	r3, #12
 80050f0:	d1ee      	bne.n	80050d0 <HAL_RCC_ClockConfig+0x204>
 80050f2:	e044      	b.n	800517e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d112      	bne.n	8005122 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80050fc:	e00a      	b.n	8005114 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050fe:	f7fc fcd1 	bl	8001aa4 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	f241 3288 	movw	r2, #5000	; 0x1388
 800510c:	4293      	cmp	r3, r2
 800510e:	d901      	bls.n	8005114 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e0bf      	b.n	8005294 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005114:	4b0f      	ldr	r3, [pc, #60]	; (8005154 <HAL_RCC_ClockConfig+0x288>)
 8005116:	69db      	ldr	r3, [r3, #28]
 8005118:	f003 030c 	and.w	r3, r3, #12
 800511c:	2b08      	cmp	r3, #8
 800511e:	d1ee      	bne.n	80050fe <HAL_RCC_ClockConfig+0x232>
 8005120:	e02d      	b.n	800517e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d123      	bne.n	8005172 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800512a:	e00a      	b.n	8005142 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800512c:	f7fc fcba 	bl	8001aa4 <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	f241 3288 	movw	r2, #5000	; 0x1388
 800513a:	4293      	cmp	r3, r2
 800513c:	d901      	bls.n	8005142 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e0a8      	b.n	8005294 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005142:	4b04      	ldr	r3, [pc, #16]	; (8005154 <HAL_RCC_ClockConfig+0x288>)
 8005144:	69db      	ldr	r3, [r3, #28]
 8005146:	f003 030c 	and.w	r3, r3, #12
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1ee      	bne.n	800512c <HAL_RCC_ClockConfig+0x260>
 800514e:	e016      	b.n	800517e <HAL_RCC_ClockConfig+0x2b2>
 8005150:	40022000 	.word	0x40022000
 8005154:	46020c00 	.word	0x46020c00
 8005158:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800515c:	f7fc fca2 	bl	8001aa4 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	f241 3288 	movw	r2, #5000	; 0x1388
 800516a:	4293      	cmp	r3, r2
 800516c:	d901      	bls.n	8005172 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e090      	b.n	8005294 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005172:	4b4a      	ldr	r3, [pc, #296]	; (800529c <HAL_RCC_ClockConfig+0x3d0>)
 8005174:	69db      	ldr	r3, [r3, #28]
 8005176:	f003 030c 	and.w	r3, r3, #12
 800517a:	2b04      	cmp	r3, #4
 800517c:	d1ee      	bne.n	800515c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b00      	cmp	r3, #0
 8005188:	d010      	beq.n	80051ac <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	689a      	ldr	r2, [r3, #8]
 800518e:	4b43      	ldr	r3, [pc, #268]	; (800529c <HAL_RCC_ClockConfig+0x3d0>)
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	f003 030f 	and.w	r3, r3, #15
 8005196:	429a      	cmp	r2, r3
 8005198:	d208      	bcs.n	80051ac <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800519a:	4b40      	ldr	r3, [pc, #256]	; (800529c <HAL_RCC_ClockConfig+0x3d0>)
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	f023 020f 	bic.w	r2, r3, #15
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	493d      	ldr	r1, [pc, #244]	; (800529c <HAL_RCC_ClockConfig+0x3d0>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051ac:	4b3c      	ldr	r3, [pc, #240]	; (80052a0 <HAL_RCC_ClockConfig+0x3d4>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 030f 	and.w	r3, r3, #15
 80051b4:	683a      	ldr	r2, [r7, #0]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d210      	bcs.n	80051dc <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ba:	4b39      	ldr	r3, [pc, #228]	; (80052a0 <HAL_RCC_ClockConfig+0x3d4>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f023 020f 	bic.w	r2, r3, #15
 80051c2:	4937      	ldr	r1, [pc, #220]	; (80052a0 <HAL_RCC_ClockConfig+0x3d4>)
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ca:	4b35      	ldr	r3, [pc, #212]	; (80052a0 <HAL_RCC_ClockConfig+0x3d4>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 030f 	and.w	r3, r3, #15
 80051d2:	683a      	ldr	r2, [r7, #0]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d001      	beq.n	80051dc <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e05b      	b.n	8005294 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0304 	and.w	r3, r3, #4
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d010      	beq.n	800520a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	68da      	ldr	r2, [r3, #12]
 80051ec:	4b2b      	ldr	r3, [pc, #172]	; (800529c <HAL_RCC_ClockConfig+0x3d0>)
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d208      	bcs.n	800520a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80051f8:	4b28      	ldr	r3, [pc, #160]	; (800529c <HAL_RCC_ClockConfig+0x3d0>)
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	4925      	ldr	r1, [pc, #148]	; (800529c <HAL_RCC_ClockConfig+0x3d0>)
 8005206:	4313      	orrs	r3, r2
 8005208:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0308 	and.w	r3, r3, #8
 8005212:	2b00      	cmp	r3, #0
 8005214:	d012      	beq.n	800523c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	691a      	ldr	r2, [r3, #16]
 800521a:	4b20      	ldr	r3, [pc, #128]	; (800529c <HAL_RCC_ClockConfig+0x3d0>)
 800521c:	6a1b      	ldr	r3, [r3, #32]
 800521e:	091b      	lsrs	r3, r3, #4
 8005220:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005224:	429a      	cmp	r2, r3
 8005226:	d209      	bcs.n	800523c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005228:	4b1c      	ldr	r3, [pc, #112]	; (800529c <HAL_RCC_ClockConfig+0x3d0>)
 800522a:	6a1b      	ldr	r3, [r3, #32]
 800522c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	011b      	lsls	r3, r3, #4
 8005236:	4919      	ldr	r1, [pc, #100]	; (800529c <HAL_RCC_ClockConfig+0x3d0>)
 8005238:	4313      	orrs	r3, r2
 800523a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0310 	and.w	r3, r3, #16
 8005244:	2b00      	cmp	r3, #0
 8005246:	d010      	beq.n	800526a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	695a      	ldr	r2, [r3, #20]
 800524c:	4b13      	ldr	r3, [pc, #76]	; (800529c <HAL_RCC_ClockConfig+0x3d0>)
 800524e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005250:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005254:	429a      	cmp	r2, r3
 8005256:	d208      	bcs.n	800526a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8005258:	4b10      	ldr	r3, [pc, #64]	; (800529c <HAL_RCC_ClockConfig+0x3d0>)
 800525a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	695b      	ldr	r3, [r3, #20]
 8005264:	490d      	ldr	r1, [pc, #52]	; (800529c <HAL_RCC_ClockConfig+0x3d0>)
 8005266:	4313      	orrs	r3, r2
 8005268:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800526a:	f000 f821 	bl	80052b0 <HAL_RCC_GetSysClockFreq>
 800526e:	4602      	mov	r2, r0
 8005270:	4b0a      	ldr	r3, [pc, #40]	; (800529c <HAL_RCC_ClockConfig+0x3d0>)
 8005272:	6a1b      	ldr	r3, [r3, #32]
 8005274:	f003 030f 	and.w	r3, r3, #15
 8005278:	490a      	ldr	r1, [pc, #40]	; (80052a4 <HAL_RCC_ClockConfig+0x3d8>)
 800527a:	5ccb      	ldrb	r3, [r1, r3]
 800527c:	fa22 f303 	lsr.w	r3, r2, r3
 8005280:	4a09      	ldr	r2, [pc, #36]	; (80052a8 <HAL_RCC_ClockConfig+0x3dc>)
 8005282:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005284:	4b09      	ldr	r3, [pc, #36]	; (80052ac <HAL_RCC_ClockConfig+0x3e0>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4618      	mov	r0, r3
 800528a:	f7fc fbc1 	bl	8001a10 <HAL_InitTick>
 800528e:	4603      	mov	r3, r0
 8005290:	73fb      	strb	r3, [r7, #15]

  return status;
 8005292:	7bfb      	ldrb	r3, [r7, #15]
}
 8005294:	4618      	mov	r0, r3
 8005296:	3718      	adds	r7, #24
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	46020c00 	.word	0x46020c00
 80052a0:	40022000 	.word	0x40022000
 80052a4:	0800adf0 	.word	0x0800adf0
 80052a8:	20000004 	.word	0x20000004
 80052ac:	20000008 	.word	0x20000008

080052b0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b08b      	sub	sp, #44	; 0x2c
 80052b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80052b6:	2300      	movs	r3, #0
 80052b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80052ba:	2300      	movs	r3, #0
 80052bc:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052be:	4b78      	ldr	r3, [pc, #480]	; (80054a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80052c0:	69db      	ldr	r3, [r3, #28]
 80052c2:	f003 030c 	and.w	r3, r3, #12
 80052c6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052c8:	4b75      	ldr	r3, [pc, #468]	; (80054a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80052ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052cc:	f003 0303 	and.w	r3, r3, #3
 80052d0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d005      	beq.n	80052e4 <HAL_RCC_GetSysClockFreq+0x34>
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	2b0c      	cmp	r3, #12
 80052dc:	d121      	bne.n	8005322 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d11e      	bne.n	8005322 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80052e4:	4b6e      	ldr	r3, [pc, #440]	; (80054a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d107      	bne.n	8005300 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80052f0:	4b6b      	ldr	r3, [pc, #428]	; (80054a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80052f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80052f6:	0b1b      	lsrs	r3, r3, #12
 80052f8:	f003 030f 	and.w	r3, r3, #15
 80052fc:	627b      	str	r3, [r7, #36]	; 0x24
 80052fe:	e005      	b.n	800530c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005300:	4b67      	ldr	r3, [pc, #412]	; (80054a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	0f1b      	lsrs	r3, r3, #28
 8005306:	f003 030f 	and.w	r3, r3, #15
 800530a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800530c:	4a65      	ldr	r2, [pc, #404]	; (80054a4 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800530e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005314:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d110      	bne.n	800533e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005320:	e00d      	b.n	800533e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005322:	4b5f      	ldr	r3, [pc, #380]	; (80054a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	f003 030c 	and.w	r3, r3, #12
 800532a:	2b04      	cmp	r3, #4
 800532c:	d102      	bne.n	8005334 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800532e:	4b5e      	ldr	r3, [pc, #376]	; (80054a8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005330:	623b      	str	r3, [r7, #32]
 8005332:	e004      	b.n	800533e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	2b08      	cmp	r3, #8
 8005338:	d101      	bne.n	800533e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800533a:	4b5b      	ldr	r3, [pc, #364]	; (80054a8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800533c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	2b0c      	cmp	r3, #12
 8005342:	f040 80a5 	bne.w	8005490 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005346:	4b56      	ldr	r3, [pc, #344]	; (80054a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534a:	f003 0303 	and.w	r3, r3, #3
 800534e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005350:	4b53      	ldr	r3, [pc, #332]	; (80054a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005354:	0a1b      	lsrs	r3, r3, #8
 8005356:	f003 030f 	and.w	r3, r3, #15
 800535a:	3301      	adds	r3, #1
 800535c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800535e:	4b50      	ldr	r3, [pc, #320]	; (80054a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005362:	091b      	lsrs	r3, r3, #4
 8005364:	f003 0301 	and.w	r3, r3, #1
 8005368:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800536a:	4b4d      	ldr	r3, [pc, #308]	; (80054a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800536c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536e:	08db      	lsrs	r3, r3, #3
 8005370:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	fb02 f303 	mul.w	r3, r2, r3
 800537a:	ee07 3a90 	vmov	s15, r3
 800537e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005382:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	2b02      	cmp	r3, #2
 800538a:	d003      	beq.n	8005394 <HAL_RCC_GetSysClockFreq+0xe4>
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	2b03      	cmp	r3, #3
 8005390:	d022      	beq.n	80053d8 <HAL_RCC_GetSysClockFreq+0x128>
 8005392:	e043      	b.n	800541c <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	ee07 3a90 	vmov	s15, r3
 800539a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800539e:	eddf 6a43 	vldr	s13, [pc, #268]	; 80054ac <HAL_RCC_GetSysClockFreq+0x1fc>
 80053a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053a6:	4b3e      	ldr	r3, [pc, #248]	; (80054a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80053a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ae:	ee07 3a90 	vmov	s15, r3
 80053b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80053b6:	ed97 6a01 	vldr	s12, [r7, #4]
 80053ba:	eddf 5a3d 	vldr	s11, [pc, #244]	; 80054b0 <HAL_RCC_GetSysClockFreq+0x200>
 80053be:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80053c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053d6:	e046      	b.n	8005466 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	ee07 3a90 	vmov	s15, r3
 80053de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053e2:	eddf 6a32 	vldr	s13, [pc, #200]	; 80054ac <HAL_RCC_GetSysClockFreq+0x1fc>
 80053e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053ea:	4b2d      	ldr	r3, [pc, #180]	; (80054a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80053ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053f2:	ee07 3a90 	vmov	s15, r3
 80053f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80053fa:	ed97 6a01 	vldr	s12, [r7, #4]
 80053fe:	eddf 5a2c 	vldr	s11, [pc, #176]	; 80054b0 <HAL_RCC_GetSysClockFreq+0x200>
 8005402:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005406:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800540a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800540e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005416:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800541a:	e024      	b.n	8005466 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800541c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541e:	ee07 3a90 	vmov	s15, r3
 8005422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	ee07 3a90 	vmov	s15, r3
 800542c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005430:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005434:	4b1a      	ldr	r3, [pc, #104]	; (80054a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005438:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800543c:	ee07 3a90 	vmov	s15, r3
 8005440:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005444:	ed97 6a01 	vldr	s12, [r7, #4]
 8005448:	eddf 5a19 	vldr	s11, [pc, #100]	; 80054b0 <HAL_RCC_GetSysClockFreq+0x200>
 800544c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005450:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005454:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005458:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800545c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005460:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005464:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8005466:	4b0e      	ldr	r3, [pc, #56]	; (80054a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800546a:	0e1b      	lsrs	r3, r3, #24
 800546c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005470:	3301      	adds	r3, #1
 8005472:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	ee07 3a90 	vmov	s15, r3
 800547a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800547e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005482:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005486:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800548a:	ee17 3a90 	vmov	r3, s15
 800548e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8005490:	6a3b      	ldr	r3, [r7, #32]
}
 8005492:	4618      	mov	r0, r3
 8005494:	372c      	adds	r7, #44	; 0x2c
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	46020c00 	.word	0x46020c00
 80054a4:	0800ae08 	.word	0x0800ae08
 80054a8:	00f42400 	.word	0x00f42400
 80054ac:	4b742400 	.word	0x4b742400
 80054b0:	46000000 	.word	0x46000000

080054b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80054b8:	f7ff fefa 	bl	80052b0 <HAL_RCC_GetSysClockFreq>
 80054bc:	4602      	mov	r2, r0
 80054be:	4b07      	ldr	r3, [pc, #28]	; (80054dc <HAL_RCC_GetHCLKFreq+0x28>)
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	f003 030f 	and.w	r3, r3, #15
 80054c6:	4906      	ldr	r1, [pc, #24]	; (80054e0 <HAL_RCC_GetHCLKFreq+0x2c>)
 80054c8:	5ccb      	ldrb	r3, [r1, r3]
 80054ca:	fa22 f303 	lsr.w	r3, r2, r3
 80054ce:	4a05      	ldr	r2, [pc, #20]	; (80054e4 <HAL_RCC_GetHCLKFreq+0x30>)
 80054d0:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80054d2:	4b04      	ldr	r3, [pc, #16]	; (80054e4 <HAL_RCC_GetHCLKFreq+0x30>)
 80054d4:	681b      	ldr	r3, [r3, #0]
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	46020c00 	.word	0x46020c00
 80054e0:	0800adf0 	.word	0x0800adf0
 80054e4:	20000004 	.word	0x20000004

080054e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80054ec:	f7ff ffe2 	bl	80054b4 <HAL_RCC_GetHCLKFreq>
 80054f0:	4602      	mov	r2, r0
 80054f2:	4b05      	ldr	r3, [pc, #20]	; (8005508 <HAL_RCC_GetPCLK1Freq+0x20>)
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	091b      	lsrs	r3, r3, #4
 80054f8:	f003 0307 	and.w	r3, r3, #7
 80054fc:	4903      	ldr	r1, [pc, #12]	; (800550c <HAL_RCC_GetPCLK1Freq+0x24>)
 80054fe:	5ccb      	ldrb	r3, [r1, r3]
 8005500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005504:	4618      	mov	r0, r3
 8005506:	bd80      	pop	{r7, pc}
 8005508:	46020c00 	.word	0x46020c00
 800550c:	0800ae00 	.word	0x0800ae00

08005510 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8005514:	f7ff ffce 	bl	80054b4 <HAL_RCC_GetHCLKFreq>
 8005518:	4602      	mov	r2, r0
 800551a:	4b05      	ldr	r3, [pc, #20]	; (8005530 <HAL_RCC_GetPCLK2Freq+0x20>)
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	0a1b      	lsrs	r3, r3, #8
 8005520:	f003 0307 	and.w	r3, r3, #7
 8005524:	4903      	ldr	r1, [pc, #12]	; (8005534 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005526:	5ccb      	ldrb	r3, [r1, r3]
 8005528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800552c:	4618      	mov	r0, r3
 800552e:	bd80      	pop	{r7, pc}
 8005530:	46020c00 	.word	0x46020c00
 8005534:	0800ae00 	.word	0x0800ae00

08005538 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800553c:	f7ff ffba 	bl	80054b4 <HAL_RCC_GetHCLKFreq>
 8005540:	4602      	mov	r2, r0
 8005542:	4b05      	ldr	r3, [pc, #20]	; (8005558 <HAL_RCC_GetPCLK3Freq+0x20>)
 8005544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005546:	091b      	lsrs	r3, r3, #4
 8005548:	f003 0307 	and.w	r3, r3, #7
 800554c:	4903      	ldr	r1, [pc, #12]	; (800555c <HAL_RCC_GetPCLK3Freq+0x24>)
 800554e:	5ccb      	ldrb	r3, [r1, r3]
 8005550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005554:	4618      	mov	r0, r3
 8005556:	bd80      	pop	{r7, pc}
 8005558:	46020c00 	.word	0x46020c00
 800555c:	0800ae00 	.word	0x0800ae00

08005560 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005568:	4b3e      	ldr	r3, [pc, #248]	; (8005664 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800556a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800556e:	f003 0304 	and.w	r3, r3, #4
 8005572:	2b00      	cmp	r3, #0
 8005574:	d003      	beq.n	800557e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005576:	f7fe fd9f 	bl	80040b8 <HAL_PWREx_GetVoltageRange>
 800557a:	6178      	str	r0, [r7, #20]
 800557c:	e019      	b.n	80055b2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800557e:	4b39      	ldr	r3, [pc, #228]	; (8005664 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005580:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005584:	4a37      	ldr	r2, [pc, #220]	; (8005664 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005586:	f043 0304 	orr.w	r3, r3, #4
 800558a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800558e:	4b35      	ldr	r3, [pc, #212]	; (8005664 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005590:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005594:	f003 0304 	and.w	r3, r3, #4
 8005598:	60fb      	str	r3, [r7, #12]
 800559a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800559c:	f7fe fd8c 	bl	80040b8 <HAL_PWREx_GetVoltageRange>
 80055a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80055a2:	4b30      	ldr	r3, [pc, #192]	; (8005664 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80055a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055a8:	4a2e      	ldr	r2, [pc, #184]	; (8005664 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80055aa:	f023 0304 	bic.w	r3, r3, #4
 80055ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80055b8:	d003      	beq.n	80055c2 <RCC_SetFlashLatencyFromMSIRange+0x62>
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055c0:	d109      	bne.n	80055d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055c8:	d202      	bcs.n	80055d0 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80055ca:	2301      	movs	r3, #1
 80055cc:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80055ce:	e033      	b.n	8005638 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80055d0:	2300      	movs	r3, #0
 80055d2:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80055d4:	e030      	b.n	8005638 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055dc:	d208      	bcs.n	80055f0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055e4:	d102      	bne.n	80055ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80055e6:	2303      	movs	r3, #3
 80055e8:	613b      	str	r3, [r7, #16]
 80055ea:	e025      	b.n	8005638 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e035      	b.n	800565c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055f6:	d90f      	bls.n	8005618 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d109      	bne.n	8005612 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005604:	d902      	bls.n	800560c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8005606:	2300      	movs	r3, #0
 8005608:	613b      	str	r3, [r7, #16]
 800560a:	e015      	b.n	8005638 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800560c:	2301      	movs	r3, #1
 800560e:	613b      	str	r3, [r7, #16]
 8005610:	e012      	b.n	8005638 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8005612:	2300      	movs	r3, #0
 8005614:	613b      	str	r3, [r7, #16]
 8005616:	e00f      	b.n	8005638 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800561e:	d109      	bne.n	8005634 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005626:	d102      	bne.n	800562e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8005628:	2301      	movs	r3, #1
 800562a:	613b      	str	r3, [r7, #16]
 800562c:	e004      	b.n	8005638 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800562e:	2302      	movs	r3, #2
 8005630:	613b      	str	r3, [r7, #16]
 8005632:	e001      	b.n	8005638 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8005634:	2301      	movs	r3, #1
 8005636:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005638:	4b0b      	ldr	r3, [pc, #44]	; (8005668 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f023 020f 	bic.w	r2, r3, #15
 8005640:	4909      	ldr	r1, [pc, #36]	; (8005668 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	4313      	orrs	r3, r2
 8005646:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005648:	4b07      	ldr	r3, [pc, #28]	; (8005668 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 030f 	and.w	r3, r3, #15
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	429a      	cmp	r2, r3
 8005654:	d001      	beq.n	800565a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e000      	b.n	800565c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3718      	adds	r7, #24
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	46020c00 	.word	0x46020c00
 8005668:	40022000 	.word	0x40022000

0800566c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800566c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005670:	b0b8      	sub	sp, #224	; 0xe0
 8005672:	af00      	add	r7, sp, #0
 8005674:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005678:	2300      	movs	r3, #0
 800567a:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800567e:	2300      	movs	r3, #0
 8005680:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005684:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568c:	f002 0401 	and.w	r4, r2, #1
 8005690:	2500      	movs	r5, #0
 8005692:	ea54 0305 	orrs.w	r3, r4, r5
 8005696:	d00b      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005698:	4bca      	ldr	r3, [pc, #808]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800569a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800569e:	f023 0103 	bic.w	r1, r3, #3
 80056a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80056a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056a8:	4ac6      	ldr	r2, [pc, #792]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80056aa:	430b      	orrs	r3, r1
 80056ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80056b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b8:	f002 0802 	and.w	r8, r2, #2
 80056bc:	f04f 0900 	mov.w	r9, #0
 80056c0:	ea58 0309 	orrs.w	r3, r8, r9
 80056c4:	d00b      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80056c6:	4bbf      	ldr	r3, [pc, #764]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80056c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056cc:	f023 010c 	bic.w	r1, r3, #12
 80056d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80056d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056d6:	4abb      	ldr	r2, [pc, #748]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80056d8:	430b      	orrs	r3, r1
 80056da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80056e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e6:	f002 0a04 	and.w	sl, r2, #4
 80056ea:	f04f 0b00 	mov.w	fp, #0
 80056ee:	ea5a 030b 	orrs.w	r3, sl, fp
 80056f2:	d00b      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80056f4:	4bb3      	ldr	r3, [pc, #716]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80056f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056fa:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80056fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005704:	4aaf      	ldr	r2, [pc, #700]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005706:	430b      	orrs	r3, r1
 8005708:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800570c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005714:	f002 0308 	and.w	r3, r2, #8
 8005718:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800571c:	2300      	movs	r3, #0
 800571e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005722:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005726:	460b      	mov	r3, r1
 8005728:	4313      	orrs	r3, r2
 800572a:	d00b      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800572c:	4ba5      	ldr	r3, [pc, #660]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800572e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005732:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005736:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800573a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800573c:	4aa1      	ldr	r2, [pc, #644]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800573e:	430b      	orrs	r3, r1
 8005740:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005744:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574c:	f002 0310 	and.w	r3, r2, #16
 8005750:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005754:	2300      	movs	r3, #0
 8005756:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800575a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800575e:	460b      	mov	r3, r1
 8005760:	4313      	orrs	r3, r2
 8005762:	d00b      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005764:	4b97      	ldr	r3, [pc, #604]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800576a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800576e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005774:	4a93      	ldr	r2, [pc, #588]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005776:	430b      	orrs	r3, r1
 8005778:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800577c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005784:	f002 0320 	and.w	r3, r2, #32
 8005788:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800578c:	2300      	movs	r3, #0
 800578e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005792:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005796:	460b      	mov	r3, r1
 8005798:	4313      	orrs	r3, r2
 800579a:	d00b      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800579c:	4b89      	ldr	r3, [pc, #548]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800579e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80057a2:	f023 0107 	bic.w	r1, r3, #7
 80057a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80057aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057ac:	4a85      	ldr	r2, [pc, #532]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80057ae:	430b      	orrs	r3, r1
 80057b0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80057b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057bc:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80057c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80057c4:	2300      	movs	r3, #0
 80057c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80057ca:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80057ce:	460b      	mov	r3, r1
 80057d0:	4313      	orrs	r3, r2
 80057d2:	d00b      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80057d4:	4b7b      	ldr	r3, [pc, #492]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80057d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80057da:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80057de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80057e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057e4:	4a77      	ldr	r2, [pc, #476]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80057e6:	430b      	orrs	r3, r1
 80057e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80057ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80057f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80057f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80057fc:	2300      	movs	r3, #0
 80057fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005802:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005806:	460b      	mov	r3, r1
 8005808:	4313      	orrs	r3, r2
 800580a:	d00b      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800580c:	4b6d      	ldr	r3, [pc, #436]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800580e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005812:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005816:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800581a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800581c:	4a69      	ldr	r2, [pc, #420]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800581e:	430b      	orrs	r3, r1
 8005820:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005824:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800582c:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8005830:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005834:	2300      	movs	r3, #0
 8005836:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800583a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800583e:	460b      	mov	r3, r1
 8005840:	4313      	orrs	r3, r2
 8005842:	d00b      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005844:	4b5f      	ldr	r3, [pc, #380]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005846:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800584a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800584e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005854:	4a5b      	ldr	r2, [pc, #364]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005856:	430b      	orrs	r3, r1
 8005858:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800585c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005864:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005868:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800586c:	2300      	movs	r3, #0
 800586e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005872:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005876:	460b      	mov	r3, r1
 8005878:	4313      	orrs	r3, r2
 800587a:	d00b      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800587c:	4b51      	ldr	r3, [pc, #324]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800587e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005882:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8005886:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800588a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800588c:	4a4d      	ldr	r2, [pc, #308]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800588e:	430b      	orrs	r3, r1
 8005890:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005894:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589c:	f402 7300 	and.w	r3, r2, #512	; 0x200
 80058a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80058a4:	2300      	movs	r3, #0
 80058a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80058aa:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80058ae:	460b      	mov	r3, r1
 80058b0:	4313      	orrs	r3, r2
 80058b2:	d00b      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80058b4:	4b43      	ldr	r3, [pc, #268]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80058b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80058ba:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80058be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80058c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058c4:	4a3f      	ldr	r2, [pc, #252]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80058c6:	430b      	orrs	r3, r1
 80058c8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80058cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80058d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d4:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80058d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80058dc:	2300      	movs	r3, #0
 80058de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80058e2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80058e6:	460b      	mov	r3, r1
 80058e8:	4313      	orrs	r3, r2
 80058ea:	d00b      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80058ec:	4b35      	ldr	r3, [pc, #212]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80058ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80058f2:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 80058f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80058fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058fc:	4a31      	ldr	r2, [pc, #196]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80058fe:	430b      	orrs	r3, r1
 8005900:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8005904:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800590c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005910:	67bb      	str	r3, [r7, #120]	; 0x78
 8005912:	2300      	movs	r3, #0
 8005914:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005916:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800591a:	460b      	mov	r3, r1
 800591c:	4313      	orrs	r3, r2
 800591e:	d00c      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8005920:	4b28      	ldr	r3, [pc, #160]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005922:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005926:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800592a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800592e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005932:	4a24      	ldr	r2, [pc, #144]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005934:	430b      	orrs	r3, r1
 8005936:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800593a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800593e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005942:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005946:	673b      	str	r3, [r7, #112]	; 0x70
 8005948:	2300      	movs	r3, #0
 800594a:	677b      	str	r3, [r7, #116]	; 0x74
 800594c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005950:	460b      	mov	r3, r1
 8005952:	4313      	orrs	r3, r2
 8005954:	d04f      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8005956:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800595a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800595e:	2b80      	cmp	r3, #128	; 0x80
 8005960:	d02d      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x352>
 8005962:	2b80      	cmp	r3, #128	; 0x80
 8005964:	d827      	bhi.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005966:	2b60      	cmp	r3, #96	; 0x60
 8005968:	d02e      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800596a:	2b60      	cmp	r3, #96	; 0x60
 800596c:	d823      	bhi.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800596e:	2b40      	cmp	r3, #64	; 0x40
 8005970:	d006      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8005972:	2b40      	cmp	r3, #64	; 0x40
 8005974:	d81f      	bhi.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005976:	2b00      	cmp	r3, #0
 8005978:	d009      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x322>
 800597a:	2b20      	cmp	r3, #32
 800597c:	d011      	beq.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800597e:	e01a      	b.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005980:	4b10      	ldr	r3, [pc, #64]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005984:	4a0f      	ldr	r2, [pc, #60]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005986:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800598a:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800598c:	e01d      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800598e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005992:	3308      	adds	r3, #8
 8005994:	4618      	mov	r0, r3
 8005996:	f002 f9d1 	bl	8007d3c <RCCEx_PLL2_Config>
 800599a:	4603      	mov	r3, r0
 800599c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 80059a0:	e013      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80059a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80059a6:	332c      	adds	r3, #44	; 0x2c
 80059a8:	4618      	mov	r0, r3
 80059aa:	f002 fa5f 	bl	8007e6c <RCCEx_PLL3_Config>
 80059ae:	4603      	mov	r3, r0
 80059b0:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 80059b4:	e009      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 80059bc:	e005      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 80059be:	bf00      	nop
 80059c0:	e003      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80059c2:	bf00      	nop
 80059c4:	46020c00 	.word	0x46020c00
        break;
 80059c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059ca:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d10d      	bne.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80059d2:	4bb6      	ldr	r3, [pc, #728]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80059d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80059d8:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 80059dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80059e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059e4:	4ab1      	ldr	r2, [pc, #708]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80059e6:	430b      	orrs	r3, r1
 80059e8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80059ec:	e003      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ee:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80059f2:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80059f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80059fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fe:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005a02:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a04:	2300      	movs	r3, #0
 8005a06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a08:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	d053      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8005a12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a1e:	d033      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a24:	d82c      	bhi.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005a26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a2a:	d02f      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005a2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a30:	d826      	bhi.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005a32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a36:	d008      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005a38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a3c:	d820      	bhi.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00a      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8005a42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a46:	d011      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8005a48:	e01a      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005a4a:	4b98      	ldr	r3, [pc, #608]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a4e:	4a97      	ldr	r2, [pc, #604]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a54:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005a56:	e01a      	b.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a5c:	3308      	adds	r3, #8
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f002 f96c 	bl	8007d3c <RCCEx_PLL2_Config>
 8005a64:	4603      	mov	r3, r0
 8005a66:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005a6a:	e010      	b.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a70:	332c      	adds	r3, #44	; 0x2c
 8005a72:	4618      	mov	r0, r3
 8005a74:	f002 f9fa 	bl	8007e6c <RCCEx_PLL3_Config>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005a7e:	e006      	b.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8005a86:	e002      	b.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8005a88:	bf00      	nop
 8005a8a:	e000      	b.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8005a8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a8e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d10d      	bne.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8005a96:	4b85      	ldr	r3, [pc, #532]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005a98:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005a9c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005aa0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005aa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005aa8:	4a80      	ldr	r2, [pc, #512]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005aaa:	430b      	orrs	r3, r1
 8005aac:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005ab0:	e003      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ab2:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005ab6:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005aba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac2:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005ac6:	663b      	str	r3, [r7, #96]	; 0x60
 8005ac8:	2300      	movs	r3, #0
 8005aca:	667b      	str	r3, [r7, #100]	; 0x64
 8005acc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	d046      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005ad6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ada:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005ade:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005ae2:	d028      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005ae4:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005ae8:	d821      	bhi.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005aea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005aee:	d022      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005af0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005af4:	d81b      	bhi.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005af6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005afa:	d01c      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005afc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b00:	d815      	bhi.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005b02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b06:	d008      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8005b08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b0c:	d80f      	bhi.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d011      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005b12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b16:	d00e      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005b18:	e009      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005b1e:	3308      	adds	r3, #8
 8005b20:	4618      	mov	r0, r3
 8005b22:	f002 f90b 	bl	8007d3c <RCCEx_PLL2_Config>
 8005b26:	4603      	mov	r3, r0
 8005b28:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8005b2c:	e004      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8005b34:	e000      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 8005b36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b38:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d10d      	bne.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005b40:	4b5a      	ldr	r3, [pc, #360]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005b42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005b46:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005b4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005b4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005b52:	4a56      	ldr	r2, [pc, #344]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005b54:	430b      	orrs	r3, r1
 8005b56:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005b5a:	e003      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b5c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005b60:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8005b64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6c:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005b70:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b72:	2300      	movs	r3, #0
 8005b74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b76:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	d03f      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8005b80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b88:	2b04      	cmp	r3, #4
 8005b8a:	d81e      	bhi.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8005b8c:	a201      	add	r2, pc, #4	; (adr r2, 8005b94 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8005b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b92:	bf00      	nop
 8005b94:	08005bd3 	.word	0x08005bd3
 8005b98:	08005ba9 	.word	0x08005ba9
 8005b9c:	08005bb7 	.word	0x08005bb7
 8005ba0:	08005bd3 	.word	0x08005bd3
 8005ba4:	08005bd3 	.word	0x08005bd3
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005ba8:	4b40      	ldr	r3, [pc, #256]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bac:	4a3f      	ldr	r2, [pc, #252]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005bae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bb2:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005bb4:	e00e      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005bb6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005bba:	332c      	adds	r3, #44	; 0x2c
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f002 f955 	bl	8007e6c <RCCEx_PLL3_Config>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8005bc8:	e004      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8005bd0:	e000      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 8005bd2:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005bd4:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10d      	bne.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8005bdc:	4b33      	ldr	r3, [pc, #204]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005bde:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005be2:	f023 0107 	bic.w	r1, r3, #7
 8005be6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bee:	4a2f      	ldr	r2, [pc, #188]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005bf0:	430b      	orrs	r3, r1
 8005bf2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005bf6:	e003      	b.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bf8:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005bfc:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8005c00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c08:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005c0c:	653b      	str	r3, [r7, #80]	; 0x50
 8005c0e:	2300      	movs	r3, #0
 8005c10:	657b      	str	r3, [r7, #84]	; 0x54
 8005c12:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005c16:	460b      	mov	r3, r1
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	d04d      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8005c1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c28:	d028      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x610>
 8005c2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c2e:	d821      	bhi.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005c30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c34:	d024      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8005c36:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c3a:	d81b      	bhi.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005c3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c40:	d00e      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8005c42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c46:	d815      	bhi.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d01b      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8005c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c50:	d110      	bne.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005c52:	4b16      	ldr	r3, [pc, #88]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c56:	4a15      	ldr	r2, [pc, #84]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c5c:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005c5e:	e012      	b.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005c60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c64:	332c      	adds	r3, #44	; 0x2c
 8005c66:	4618      	mov	r0, r3
 8005c68:	f002 f900 	bl	8007e6c <RCCEx_PLL3_Config>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8005c72:	e008      	b.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8005c7a:	e004      	b.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8005c7c:	bf00      	nop
 8005c7e:	e002      	b.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8005c80:	bf00      	nop
 8005c82:	e000      	b.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8005c84:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005c86:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d110      	bne.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8005c8e:	4b07      	ldr	r3, [pc, #28]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005c90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c94:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005c98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ca0:	4a02      	ldr	r2, [pc, #8]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005ca2:	430b      	orrs	r3, r1
 8005ca4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005ca8:	e006      	b.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005caa:	bf00      	nop
 8005cac:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cb0:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005cb4:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005cb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc0:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005cc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cca:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005cce:	460b      	mov	r3, r1
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	f000 80b5 	beq.w	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cdc:	4b9d      	ldr	r3, [pc, #628]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005cde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ce2:	f003 0304 	and.w	r3, r3, #4
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d113      	bne.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cea:	4b9a      	ldr	r3, [pc, #616]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005cec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cf0:	4a98      	ldr	r2, [pc, #608]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005cf2:	f043 0304 	orr.w	r3, r3, #4
 8005cf6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005cfa:	4b96      	ldr	r3, [pc, #600]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005cfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d00:	f003 0304 	and.w	r3, r3, #4
 8005d04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d08:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
      pwrclkchanged = SET;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005d12:	4b91      	ldr	r3, [pc, #580]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d16:	4a90      	ldr	r2, [pc, #576]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d18:	f043 0301 	orr.w	r3, r3, #1
 8005d1c:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d1e:	f7fb fec1 	bl	8001aa4 <HAL_GetTick>
 8005d22:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005d26:	e00b      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d28:	f7fb febc 	bl	8001aa4 <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d903      	bls.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8005d3e:	e005      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005d40:	4b85      	ldr	r3, [pc, #532]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d44:	f003 0301 	and.w	r3, r3, #1
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d0ed      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8005d4c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d165      	bne.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005d54:	4b7f      	ldr	r3, [pc, #508]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005d56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005d62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d023      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x746>
 8005d6a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005d6e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8005d72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d01b      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005d7a:	4b76      	ldr	r3, [pc, #472]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005d7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d88:	4b72      	ldr	r3, [pc, #456]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005d8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d8e:	4a71      	ldr	r2, [pc, #452]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d94:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d98:	4b6e      	ldr	r3, [pc, #440]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005d9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d9e:	4a6d      	ldr	r2, [pc, #436]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005da0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005da4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005da8:	4a6a      	ldr	r2, [pc, #424]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005daa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005db2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d019      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dbe:	f7fb fe71 	bl	8001aa4 <HAL_GetTick>
 8005dc2:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dc6:	e00d      	b.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dc8:	f7fb fe6c 	bl	8001aa4 <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005dd2:	1ad2      	subs	r2, r2, r3
 8005dd4:	f241 3388 	movw	r3, #5000	; 0x1388
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d903      	bls.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
            break;
 8005de2:	e006      	b.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005de4:	4b5b      	ldr	r3, [pc, #364]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005de6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005dea:	f003 0302 	and.w	r3, r3, #2
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d0ea      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 8005df2:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d10d      	bne.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005dfa:	4b56      	ldr	r3, [pc, #344]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005dfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e00:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005e04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e08:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005e0c:	4a51      	ldr	r2, [pc, #324]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005e0e:	430b      	orrs	r3, r1
 8005e10:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005e14:	e008      	b.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e16:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005e1a:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 8005e1e:	e003      	b.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e20:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005e24:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005e28:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d107      	bne.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e30:	4b48      	ldr	r3, [pc, #288]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e36:	4a47      	ldr	r2, [pc, #284]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005e38:	f023 0304 	bic.w	r3, r3, #4
 8005e3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8005e40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e48:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005e4c:	643b      	str	r3, [r7, #64]	; 0x40
 8005e4e:	2300      	movs	r3, #0
 8005e50:	647b      	str	r3, [r7, #68]	; 0x44
 8005e52:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005e56:	460b      	mov	r3, r1
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	d042      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8005e5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e64:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005e68:	d022      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8005e6a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005e6e:	d81b      	bhi.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8005e70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e74:	d011      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8005e76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e7a:	d815      	bhi.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d019      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8005e80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e84:	d110      	bne.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005e86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e8a:	3308      	adds	r3, #8
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f001 ff55 	bl	8007d3c <RCCEx_PLL2_Config>
 8005e92:	4603      	mov	r3, r0
 8005e94:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8005e98:	e00d      	b.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e9a:	4b2e      	ldr	r3, [pc, #184]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e9e:	4a2d      	ldr	r2, [pc, #180]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ea4:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005ea6:	e006      	b.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8005eae:	e002      	b.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8005eb0:	bf00      	nop
 8005eb2:	e000      	b.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8005eb4:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005eb6:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d10d      	bne.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8005ebe:	4b25      	ldr	r3, [pc, #148]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ec4:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005ec8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ecc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ed0:	4a20      	ldr	r2, [pc, #128]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005ed2:	430b      	orrs	r3, r1
 8005ed4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005ed8:	e003      	b.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eda:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005ede:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005ee2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eea:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005eee:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ef4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005ef8:	460b      	mov	r3, r1
 8005efa:	4313      	orrs	r3, r2
 8005efc:	d032      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005efe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f0a:	d00b      	beq.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8005f0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f10:	d804      	bhi.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d008      	beq.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8005f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f1a:	d007      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8005f22:	e004      	b.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8005f24:	bf00      	nop
 8005f26:	e002      	b.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8005f28:	bf00      	nop
 8005f2a:	e000      	b.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8005f2c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005f2e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d112      	bne.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005f36:	4b07      	ldr	r3, [pc, #28]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005f38:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005f3c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f48:	4a02      	ldr	r2, [pc, #8]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005f4a:	430b      	orrs	r3, r1
 8005f4c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005f50:	e008      	b.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8005f52:	bf00      	nop
 8005f54:	46020c00 	.word	0x46020c00
 8005f58:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f5c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005f60:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8005f64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005f70:	633b      	str	r3, [r7, #48]	; 0x30
 8005f72:	2300      	movs	r3, #0
 8005f74:	637b      	str	r3, [r7, #52]	; 0x34
 8005f76:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	d019      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005f80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f84:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005f88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f8c:	d105      	bne.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005f8e:	4b88      	ldr	r3, [pc, #544]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f92:	4a87      	ldr	r2, [pc, #540]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f98:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8005f9a:	4b85      	ldr	r3, [pc, #532]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005f9c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005fa0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005fa4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005fa8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005fac:	4a80      	ldr	r2, [pc, #512]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005fae:	430b      	orrs	r3, r1
 8005fb0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005fb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fbc:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005fc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fc6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005fca:	460b      	mov	r3, r1
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	d00c      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005fd0:	4b77      	ldr	r3, [pc, #476]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005fd6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005fda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005fde:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005fe2:	4973      	ldr	r1, [pc, #460]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005fea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff2:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005ff6:	623b      	str	r3, [r7, #32]
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8005ffc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006000:	460b      	mov	r3, r1
 8006002:	4313      	orrs	r3, r2
 8006004:	d00c      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006006:	4b6a      	ldr	r3, [pc, #424]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800600c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006010:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006014:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006018:	4965      	ldr	r1, [pc, #404]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800601a:	4313      	orrs	r3, r2
 800601c:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006020:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006028:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800602c:	61bb      	str	r3, [r7, #24]
 800602e:	2300      	movs	r3, #0
 8006030:	61fb      	str	r3, [r7, #28]
 8006032:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006036:	460b      	mov	r3, r1
 8006038:	4313      	orrs	r3, r2
 800603a:	d00c      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800603c:	4b5c      	ldr	r3, [pc, #368]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800603e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006042:	f023 0218 	bic.w	r2, r3, #24
 8006046:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800604a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800604e:	4958      	ldr	r1, [pc, #352]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006050:	4313      	orrs	r3, r2
 8006052:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006056:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800605a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605e:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8006062:	613b      	str	r3, [r7, #16]
 8006064:	2300      	movs	r3, #0
 8006066:	617b      	str	r3, [r7, #20]
 8006068:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800606c:	460b      	mov	r3, r1
 800606e:	4313      	orrs	r3, r2
 8006070:	d032      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8006072:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006076:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800607a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800607e:	d105      	bne.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006080:	4b4b      	ldr	r3, [pc, #300]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006084:	4a4a      	ldr	r2, [pc, #296]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006086:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800608a:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800608c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006090:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006094:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006098:	d108      	bne.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800609a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800609e:	3308      	adds	r3, #8
 80060a0:	4618      	mov	r0, r3
 80060a2:	f001 fe4b 	bl	8007d3c <RCCEx_PLL2_Config>
 80060a6:	4603      	mov	r3, r0
 80060a8:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
    }
    if (ret == HAL_OK)
 80060ac:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d10d      	bne.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80060b4:	4b3e      	ldr	r3, [pc, #248]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80060b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80060ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80060c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80060c6:	493a      	ldr	r1, [pc, #232]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80060c8:	4313      	orrs	r3, r2
 80060ca:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80060ce:	e003      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060d0:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80060d4:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80060d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80060dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e0:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80060e4:	60bb      	str	r3, [r7, #8]
 80060e6:	2300      	movs	r3, #0
 80060e8:	60fb      	str	r3, [r7, #12]
 80060ea:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80060ee:	460b      	mov	r3, r1
 80060f0:	4313      	orrs	r3, r2
 80060f2:	d03a      	beq.n	800616a <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80060f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80060f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006100:	d00e      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8006102:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006106:	d815      	bhi.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8006108:	2b00      	cmp	r3, #0
 800610a:	d017      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0xad0>
 800610c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006110:	d110      	bne.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006112:	4b27      	ldr	r3, [pc, #156]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006116:	4a26      	ldr	r2, [pc, #152]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800611c:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800611e:	e00e      	b.n	800613e <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006120:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006124:	3308      	adds	r3, #8
 8006126:	4618      	mov	r0, r3
 8006128:	f001 fe08 	bl	8007d3c <RCCEx_PLL2_Config>
 800612c:	4603      	mov	r3, r0
 800612e:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006132:	e004      	b.n	800613e <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 800613a:	e000      	b.n	800613e <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 800613c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800613e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006142:	2b00      	cmp	r3, #0
 8006144:	d10d      	bne.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8006146:	4b1a      	ldr	r3, [pc, #104]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800614c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006150:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006154:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006158:	4915      	ldr	r1, [pc, #84]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800615a:	4313      	orrs	r3, r2
 800615c:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8006160:	e003      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006162:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006166:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800616a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800616e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006172:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006176:	603b      	str	r3, [r7, #0]
 8006178:	2300      	movs	r3, #0
 800617a:	607b      	str	r3, [r7, #4]
 800617c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006180:	460b      	mov	r3, r1
 8006182:	4313      	orrs	r3, r2
 8006184:	d00c      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8006186:	4b0a      	ldr	r3, [pc, #40]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006188:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800618c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006190:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006194:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006198:	4905      	ldr	r1, [pc, #20]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800619a:	4313      	orrs	r3, r2
 800619c:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80061a0:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	37e0      	adds	r7, #224	; 0xe0
 80061a8:	46bd      	mov	sp, r7
 80061aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061ae:	bf00      	nop
 80061b0:	46020c00 	.word	0x46020c00

080061b4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b089      	sub	sp, #36	; 0x24
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80061bc:	4ba6      	ldr	r3, [pc, #664]	; (8006458 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80061be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061c4:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80061c6:	4ba4      	ldr	r3, [pc, #656]	; (8006458 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80061c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ca:	f003 0303 	and.w	r3, r3, #3
 80061ce:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80061d0:	4ba1      	ldr	r3, [pc, #644]	; (8006458 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80061d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d4:	0a1b      	lsrs	r3, r3, #8
 80061d6:	f003 030f 	and.w	r3, r3, #15
 80061da:	3301      	adds	r3, #1
 80061dc:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80061de:	4b9e      	ldr	r3, [pc, #632]	; (8006458 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80061e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e2:	091b      	lsrs	r3, r3, #4
 80061e4:	f003 0301 	and.w	r3, r3, #1
 80061e8:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80061ea:	4b9b      	ldr	r3, [pc, #620]	; (8006458 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80061ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ee:	08db      	lsrs	r3, r3, #3
 80061f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	fb02 f303 	mul.w	r3, r2, r3
 80061fa:	ee07 3a90 	vmov	s15, r3
 80061fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006202:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	2b03      	cmp	r3, #3
 800620a:	d062      	beq.n	80062d2 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	2b03      	cmp	r3, #3
 8006210:	f200 8081 	bhi.w	8006316 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	2b01      	cmp	r3, #1
 8006218:	d024      	beq.n	8006264 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	2b02      	cmp	r3, #2
 800621e:	d17a      	bne.n	8006316 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	ee07 3a90 	vmov	s15, r3
 8006226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800622a:	eddf 6a8c 	vldr	s13, [pc, #560]	; 800645c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800622e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006232:	4b89      	ldr	r3, [pc, #548]	; (8006458 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800623a:	ee07 3a90 	vmov	s15, r3
 800623e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006242:	ed97 6a02 	vldr	s12, [r7, #8]
 8006246:	eddf 5a86 	vldr	s11, [pc, #536]	; 8006460 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800624a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800624e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006252:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006256:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800625a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800625e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006262:	e08f      	b.n	8006384 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006264:	4b7c      	ldr	r3, [pc, #496]	; (8006458 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800626c:	2b00      	cmp	r3, #0
 800626e:	d005      	beq.n	800627c <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8006270:	4b79      	ldr	r3, [pc, #484]	; (8006458 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	0f1b      	lsrs	r3, r3, #28
 8006276:	f003 030f 	and.w	r3, r3, #15
 800627a:	e006      	b.n	800628a <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800627c:	4b76      	ldr	r3, [pc, #472]	; (8006458 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800627e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006282:	041b      	lsls	r3, r3, #16
 8006284:	0f1b      	lsrs	r3, r3, #28
 8006286:	f003 030f 	and.w	r3, r3, #15
 800628a:	4a76      	ldr	r2, [pc, #472]	; (8006464 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800628c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006290:	ee07 3a90 	vmov	s15, r3
 8006294:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	ee07 3a90 	vmov	s15, r3
 800629e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	ee07 3a90 	vmov	s15, r3
 80062ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062b0:	ed97 6a02 	vldr	s12, [r7, #8]
 80062b4:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8006460 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80062b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80062c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062d0:	e058      	b.n	8006384 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	ee07 3a90 	vmov	s15, r3
 80062d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062dc:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800645c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80062e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062e4:	4b5c      	ldr	r3, [pc, #368]	; (8006458 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80062e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062ec:	ee07 3a90 	vmov	s15, r3
 80062f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80062f4:	ed97 6a02 	vldr	s12, [r7, #8]
 80062f8:	eddf 5a59 	vldr	s11, [pc, #356]	; 8006460 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80062fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006300:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006304:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006308:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800630c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006310:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006314:	e036      	b.n	8006384 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006316:	4b50      	ldr	r3, [pc, #320]	; (8006458 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d005      	beq.n	800632e <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8006322:	4b4d      	ldr	r3, [pc, #308]	; (8006458 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	0f1b      	lsrs	r3, r3, #28
 8006328:	f003 030f 	and.w	r3, r3, #15
 800632c:	e006      	b.n	800633c <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800632e:	4b4a      	ldr	r3, [pc, #296]	; (8006458 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006330:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006334:	041b      	lsls	r3, r3, #16
 8006336:	0f1b      	lsrs	r3, r3, #28
 8006338:	f003 030f 	and.w	r3, r3, #15
 800633c:	4a49      	ldr	r2, [pc, #292]	; (8006464 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800633e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006342:	ee07 3a90 	vmov	s15, r3
 8006346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	ee07 3a90 	vmov	s15, r3
 8006350:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006354:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	ee07 3a90 	vmov	s15, r3
 800635e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006362:	ed97 6a02 	vldr	s12, [r7, #8]
 8006366:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006460 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800636a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800636e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006372:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006376:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800637a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800637e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006382:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006384:	4b34      	ldr	r3, [pc, #208]	; (8006458 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800638c:	2b00      	cmp	r3, #0
 800638e:	d017      	beq.n	80063c0 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006390:	4b31      	ldr	r3, [pc, #196]	; (8006458 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006394:	0a5b      	lsrs	r3, r3, #9
 8006396:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800639a:	ee07 3a90 	vmov	s15, r3
 800639e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80063a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063a6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80063aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80063ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063b6:	ee17 2a90 	vmov	r2, s15
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	601a      	str	r2, [r3, #0]
 80063be:	e002      	b.n	80063c6 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80063c6:	4b24      	ldr	r3, [pc, #144]	; (8006458 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80063c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d017      	beq.n	8006402 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80063d2:	4b21      	ldr	r3, [pc, #132]	; (8006458 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80063d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063d6:	0c1b      	lsrs	r3, r3, #16
 80063d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063dc:	ee07 3a90 	vmov	s15, r3
 80063e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80063e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063e8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80063ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80063f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063f8:	ee17 2a90 	vmov	r2, s15
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	605a      	str	r2, [r3, #4]
 8006400:	e002      	b.n	8006408 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006408:	4b13      	ldr	r3, [pc, #76]	; (8006458 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800640a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800640c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006410:	2b00      	cmp	r3, #0
 8006412:	d017      	beq.n	8006444 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006414:	4b10      	ldr	r3, [pc, #64]	; (8006458 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006418:	0e1b      	lsrs	r3, r3, #24
 800641a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800641e:	ee07 3a90 	vmov	s15, r3
 8006422:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8006426:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800642a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800642e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006436:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800643a:	ee17 2a90 	vmov	r2, s15
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006442:	e002      	b.n	800644a <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	609a      	str	r2, [r3, #8]
}
 800644a:	bf00      	nop
 800644c:	3724      	adds	r7, #36	; 0x24
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	46020c00 	.word	0x46020c00
 800645c:	4b742400 	.word	0x4b742400
 8006460:	46000000 	.word	0x46000000
 8006464:	0800ae08 	.word	0x0800ae08

08006468 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006468:	b480      	push	{r7}
 800646a:	b089      	sub	sp, #36	; 0x24
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006470:	4ba6      	ldr	r3, [pc, #664]	; (800670c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006478:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800647a:	4ba4      	ldr	r3, [pc, #656]	; (800670c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800647c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647e:	f003 0303 	and.w	r3, r3, #3
 8006482:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8006484:	4ba1      	ldr	r3, [pc, #644]	; (800670c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006488:	0a1b      	lsrs	r3, r3, #8
 800648a:	f003 030f 	and.w	r3, r3, #15
 800648e:	3301      	adds	r3, #1
 8006490:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8006492:	4b9e      	ldr	r3, [pc, #632]	; (800670c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006496:	091b      	lsrs	r3, r3, #4
 8006498:	f003 0301 	and.w	r3, r3, #1
 800649c:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800649e:	4b9b      	ldr	r3, [pc, #620]	; (800670c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80064a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a2:	08db      	lsrs	r3, r3, #3
 80064a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	fb02 f303 	mul.w	r3, r2, r3
 80064ae:	ee07 3a90 	vmov	s15, r3
 80064b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064b6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	2b03      	cmp	r3, #3
 80064be:	d062      	beq.n	8006586 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	2b03      	cmp	r3, #3
 80064c4:	f200 8081 	bhi.w	80065ca <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d024      	beq.n	8006518 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d17a      	bne.n	80065ca <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	ee07 3a90 	vmov	s15, r3
 80064da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064de:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8006710 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80064e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064e6:	4b89      	ldr	r3, [pc, #548]	; (800670c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80064e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ee:	ee07 3a90 	vmov	s15, r3
 80064f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80064f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80064fa:	eddf 5a86 	vldr	s11, [pc, #536]	; 8006714 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80064fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006502:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006506:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800650a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800650e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006512:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006516:	e08f      	b.n	8006638 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006518:	4b7c      	ldr	r3, [pc, #496]	; (800670c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006520:	2b00      	cmp	r3, #0
 8006522:	d005      	beq.n	8006530 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8006524:	4b79      	ldr	r3, [pc, #484]	; (800670c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	0f1b      	lsrs	r3, r3, #28
 800652a:	f003 030f 	and.w	r3, r3, #15
 800652e:	e006      	b.n	800653e <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8006530:	4b76      	ldr	r3, [pc, #472]	; (800670c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006532:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006536:	041b      	lsls	r3, r3, #16
 8006538:	0f1b      	lsrs	r3, r3, #28
 800653a:	f003 030f 	and.w	r3, r3, #15
 800653e:	4a76      	ldr	r2, [pc, #472]	; (8006718 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8006540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006544:	ee07 3a90 	vmov	s15, r3
 8006548:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	ee07 3a90 	vmov	s15, r3
 8006552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	ee07 3a90 	vmov	s15, r3
 8006560:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006564:	ed97 6a02 	vldr	s12, [r7, #8]
 8006568:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8006714 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800656c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006570:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006574:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006578:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800657c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006580:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006584:	e058      	b.n	8006638 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	ee07 3a90 	vmov	s15, r3
 800658c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006590:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006710 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8006594:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006598:	4b5c      	ldr	r3, [pc, #368]	; (800670c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800659a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800659c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065a0:	ee07 3a90 	vmov	s15, r3
 80065a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80065a8:	ed97 6a02 	vldr	s12, [r7, #8]
 80065ac:	eddf 5a59 	vldr	s11, [pc, #356]	; 8006714 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80065b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80065b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80065b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80065c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80065c8:	e036      	b.n	8006638 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80065ca:	4b50      	ldr	r3, [pc, #320]	; (800670c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d005      	beq.n	80065e2 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 80065d6:	4b4d      	ldr	r3, [pc, #308]	; (800670c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	0f1b      	lsrs	r3, r3, #28
 80065dc:	f003 030f 	and.w	r3, r3, #15
 80065e0:	e006      	b.n	80065f0 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 80065e2:	4b4a      	ldr	r3, [pc, #296]	; (800670c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80065e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80065e8:	041b      	lsls	r3, r3, #16
 80065ea:	0f1b      	lsrs	r3, r3, #28
 80065ec:	f003 030f 	and.w	r3, r3, #15
 80065f0:	4a49      	ldr	r2, [pc, #292]	; (8006718 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80065f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065f6:	ee07 3a90 	vmov	s15, r3
 80065fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	ee07 3a90 	vmov	s15, r3
 8006604:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006608:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	ee07 3a90 	vmov	s15, r3
 8006612:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006616:	ed97 6a02 	vldr	s12, [r7, #8]
 800661a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006714 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800661e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006622:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006626:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800662a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800662e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006632:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006636:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006638:	4b34      	ldr	r3, [pc, #208]	; (800670c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800663a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006640:	2b00      	cmp	r3, #0
 8006642:	d017      	beq.n	8006674 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006644:	4b31      	ldr	r3, [pc, #196]	; (800670c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006648:	0a5b      	lsrs	r3, r3, #9
 800664a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800664e:	ee07 3a90 	vmov	s15, r3
 8006652:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8006656:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800665a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800665e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006662:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006666:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800666a:	ee17 2a90 	vmov	r2, s15
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	601a      	str	r2, [r3, #0]
 8006672:	e002      	b.n	800667a <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800667a:	4b24      	ldr	r3, [pc, #144]	; (800670c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800667c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006682:	2b00      	cmp	r3, #0
 8006684:	d017      	beq.n	80066b6 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006686:	4b21      	ldr	r3, [pc, #132]	; (800670c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800668a:	0c1b      	lsrs	r3, r3, #16
 800668c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006690:	ee07 3a90 	vmov	s15, r3
 8006694:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006698:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800669c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80066a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80066a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066ac:	ee17 2a90 	vmov	r2, s15
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	605a      	str	r2, [r3, #4]
 80066b4:	e002      	b.n	80066bc <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80066bc:	4b13      	ldr	r3, [pc, #76]	; (800670c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80066be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d017      	beq.n	80066f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80066c8:	4b10      	ldr	r3, [pc, #64]	; (800670c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80066ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066cc:	0e1b      	lsrs	r3, r3, #24
 80066ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066d2:	ee07 3a90 	vmov	s15, r3
 80066d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80066da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80066de:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80066e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80066e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066ee:	ee17 2a90 	vmov	r2, s15
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80066f6:	e002      	b.n	80066fe <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	609a      	str	r2, [r3, #8]
}
 80066fe:	bf00      	nop
 8006700:	3724      	adds	r7, #36	; 0x24
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	46020c00 	.word	0x46020c00
 8006710:	4b742400 	.word	0x4b742400
 8006714:	46000000 	.word	0x46000000
 8006718:	0800ae08 	.word	0x0800ae08

0800671c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800671c:	b480      	push	{r7}
 800671e:	b089      	sub	sp, #36	; 0x24
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8006724:	4ba6      	ldr	r3, [pc, #664]	; (80069c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800672c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800672e:	4ba4      	ldr	r3, [pc, #656]	; (80069c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006732:	f003 0303 	and.w	r3, r3, #3
 8006736:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8006738:	4ba1      	ldr	r3, [pc, #644]	; (80069c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800673a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800673c:	0a1b      	lsrs	r3, r3, #8
 800673e:	f003 030f 	and.w	r3, r3, #15
 8006742:	3301      	adds	r3, #1
 8006744:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8006746:	4b9e      	ldr	r3, [pc, #632]	; (80069c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800674a:	091b      	lsrs	r3, r3, #4
 800674c:	f003 0301 	and.w	r3, r3, #1
 8006750:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8006752:	4b9b      	ldr	r3, [pc, #620]	; (80069c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006756:	08db      	lsrs	r3, r3, #3
 8006758:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	fb02 f303 	mul.w	r3, r2, r3
 8006762:	ee07 3a90 	vmov	s15, r3
 8006766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800676a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	2b03      	cmp	r3, #3
 8006772:	d062      	beq.n	800683a <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	2b03      	cmp	r3, #3
 8006778:	f200 8081 	bhi.w	800687e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d024      	beq.n	80067cc <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	2b02      	cmp	r3, #2
 8006786:	d17a      	bne.n	800687e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	ee07 3a90 	vmov	s15, r3
 800678e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006792:	eddf 6a8c 	vldr	s13, [pc, #560]	; 80069c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8006796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800679a:	4b89      	ldr	r3, [pc, #548]	; (80069c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800679c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800679e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067a2:	ee07 3a90 	vmov	s15, r3
 80067a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80067aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80067ae:	eddf 5a86 	vldr	s11, [pc, #536]	; 80069c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80067b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80067b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80067ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067be:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80067c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067c6:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 80067ca:	e08f      	b.n	80068ec <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80067cc:	4b7c      	ldr	r3, [pc, #496]	; (80069c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d005      	beq.n	80067e4 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80067d8:	4b79      	ldr	r3, [pc, #484]	; (80069c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	0f1b      	lsrs	r3, r3, #28
 80067de:	f003 030f 	and.w	r3, r3, #15
 80067e2:	e006      	b.n	80067f2 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 80067e4:	4b76      	ldr	r3, [pc, #472]	; (80069c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80067e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80067ea:	041b      	lsls	r3, r3, #16
 80067ec:	0f1b      	lsrs	r3, r3, #28
 80067ee:	f003 030f 	and.w	r3, r3, #15
 80067f2:	4a76      	ldr	r2, [pc, #472]	; (80069cc <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80067f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067f8:	ee07 3a90 	vmov	s15, r3
 80067fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	ee07 3a90 	vmov	s15, r3
 8006806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800680a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	ee07 3a90 	vmov	s15, r3
 8006814:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006818:	ed97 6a02 	vldr	s12, [r7, #8]
 800681c:	eddf 5a6a 	vldr	s11, [pc, #424]	; 80069c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006820:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006824:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006828:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800682c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006830:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006834:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006838:	e058      	b.n	80068ec <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	ee07 3a90 	vmov	s15, r3
 8006840:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006844:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80069c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8006848:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800684c:	4b5c      	ldr	r3, [pc, #368]	; (80069c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800684e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006854:	ee07 3a90 	vmov	s15, r3
 8006858:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800685c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006860:	eddf 5a59 	vldr	s11, [pc, #356]	; 80069c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006864:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006868:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800686c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006870:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006874:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006878:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800687c:	e036      	b.n	80068ec <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800687e:	4b50      	ldr	r3, [pc, #320]	; (80069c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006886:	2b00      	cmp	r3, #0
 8006888:	d005      	beq.n	8006896 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800688a:	4b4d      	ldr	r3, [pc, #308]	; (80069c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	0f1b      	lsrs	r3, r3, #28
 8006890:	f003 030f 	and.w	r3, r3, #15
 8006894:	e006      	b.n	80068a4 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8006896:	4b4a      	ldr	r3, [pc, #296]	; (80069c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006898:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800689c:	041b      	lsls	r3, r3, #16
 800689e:	0f1b      	lsrs	r3, r3, #28
 80068a0:	f003 030f 	and.w	r3, r3, #15
 80068a4:	4a49      	ldr	r2, [pc, #292]	; (80069cc <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80068a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068aa:	ee07 3a90 	vmov	s15, r3
 80068ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	ee07 3a90 	vmov	s15, r3
 80068b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	ee07 3a90 	vmov	s15, r3
 80068c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80068ce:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80069c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80068d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068de:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80068e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80068ea:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80068ec:	4b34      	ldr	r3, [pc, #208]	; (80069c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80068ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d017      	beq.n	8006928 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80068f8:	4b31      	ldr	r3, [pc, #196]	; (80069c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80068fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068fc:	0a5b      	lsrs	r3, r3, #9
 80068fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006902:	ee07 3a90 	vmov	s15, r3
 8006906:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800690a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800690e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006912:	edd7 6a07 	vldr	s13, [r7, #28]
 8006916:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800691a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800691e:	ee17 2a90 	vmov	r2, s15
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	601a      	str	r2, [r3, #0]
 8006926:	e002      	b.n	800692e <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800692e:	4b24      	ldr	r3, [pc, #144]	; (80069c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006936:	2b00      	cmp	r3, #0
 8006938:	d017      	beq.n	800696a <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800693a:	4b21      	ldr	r3, [pc, #132]	; (80069c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800693c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800693e:	0c1b      	lsrs	r3, r3, #16
 8006940:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006944:	ee07 3a90 	vmov	s15, r3
 8006948:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800694c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006950:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006954:	edd7 6a07 	vldr	s13, [r7, #28]
 8006958:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800695c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006960:	ee17 2a90 	vmov	r2, s15
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	605a      	str	r2, [r3, #4]
 8006968:	e002      	b.n	8006970 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8006970:	4b13      	ldr	r3, [pc, #76]	; (80069c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006974:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006978:	2b00      	cmp	r3, #0
 800697a:	d017      	beq.n	80069ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800697c:	4b10      	ldr	r3, [pc, #64]	; (80069c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800697e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006980:	0e1b      	lsrs	r3, r3, #24
 8006982:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006986:	ee07 3a90 	vmov	s15, r3
 800698a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800698e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006992:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006996:	edd7 6a07 	vldr	s13, [r7, #28]
 800699a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800699e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069a2:	ee17 2a90 	vmov	r2, s15
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80069aa:	e002      	b.n	80069b2 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	609a      	str	r2, [r3, #8]
}
 80069b2:	bf00      	nop
 80069b4:	3724      	adds	r7, #36	; 0x24
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr
 80069be:	bf00      	nop
 80069c0:	46020c00 	.word	0x46020c00
 80069c4:	4b742400 	.word	0x4b742400
 80069c8:	46000000 	.word	0x46000000
 80069cc:	0800ae08 	.word	0x0800ae08

080069d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b08e      	sub	sp, #56	; 0x38
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80069da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069de:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 80069e2:	430b      	orrs	r3, r1
 80069e4:	d145      	bne.n	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80069e6:	4baa      	ldr	r3, [pc, #680]	; (8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80069e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80069ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069f0:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80069f2:	4ba7      	ldr	r3, [pc, #668]	; (8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80069f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80069f8:	f003 0302 	and.w	r3, r3, #2
 80069fc:	2b02      	cmp	r3, #2
 80069fe:	d108      	bne.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a06:	d104      	bne.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006a08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8006a0e:	f001 b987 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006a12:	4b9f      	ldr	r3, [pc, #636]	; (8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006a14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a20:	d114      	bne.n	8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8006a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a28:	d110      	bne.n	8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006a2a:	4b99      	ldr	r3, [pc, #612]	; (8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006a2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a38:	d103      	bne.n	8006a42 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8006a3a:	23fa      	movs	r3, #250	; 0xfa
 8006a3c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006a3e:	f001 b96f 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006a42:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006a46:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006a48:	f001 b96a 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8006a4c:	4b90      	ldr	r3, [pc, #576]	; (8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a58:	d107      	bne.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8006a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a60:	d103      	bne.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8006a62:	4b8c      	ldr	r3, [pc, #560]	; (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8006a64:	637b      	str	r3, [r7, #52]	; 0x34
 8006a66:	f001 b95b 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	637b      	str	r3, [r7, #52]	; 0x34
 8006a6e:	f001 b957 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006a72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a76:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006a7a:	430b      	orrs	r3, r1
 8006a7c:	d151      	bne.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006a7e:	4b84      	ldr	r3, [pc, #528]	; (8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006a80:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006a84:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006a88:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8c:	2b80      	cmp	r3, #128	; 0x80
 8006a8e:	d035      	beq.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8006a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a92:	2b80      	cmp	r3, #128	; 0x80
 8006a94:	d841      	bhi.n	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a98:	2b60      	cmp	r3, #96	; 0x60
 8006a9a:	d02a      	beq.n	8006af2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8006a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9e:	2b60      	cmp	r3, #96	; 0x60
 8006aa0:	d83b      	bhi.n	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa4:	2b40      	cmp	r3, #64	; 0x40
 8006aa6:	d009      	beq.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aaa:	2b40      	cmp	r3, #64	; 0x40
 8006aac:	d835      	bhi.n	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00c      	beq.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8006ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab6:	2b20      	cmp	r3, #32
 8006ab8:	d012      	beq.n	8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006aba:	e02e      	b.n	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f7ff fb77 	bl	80061b4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006aca:	f001 b929 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ace:	f107 0318 	add.w	r3, r7, #24
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7ff fcc8 	bl	8006468 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006adc:	f001 b920 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ae0:	f107 030c 	add.w	r3, r7, #12
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f7ff fe19 	bl	800671c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006aee:	f001 b917 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006af2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006af6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006af8:	f001 b912 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006afc:	4b64      	ldr	r3, [pc, #400]	; (8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b08:	d103      	bne.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8006b0a:	4b63      	ldr	r3, [pc, #396]	; (8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8006b0c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006b0e:	f001 b907 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006b12:	2300      	movs	r3, #0
 8006b14:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b16:	f001 b903 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b1e:	f001 b8ff 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006b22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b26:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8006b2a:	430b      	orrs	r3, r1
 8006b2c:	d158      	bne.n	8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006b2e:	4b58      	ldr	r3, [pc, #352]	; (8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006b30:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006b34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b38:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b40:	d03b      	beq.n	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8006b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b48:	d846      	bhi.n	8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b50:	d02e      	beq.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8006b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b58:	d83e      	bhi.n	8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b60:	d00b      	beq.n	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8006b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b68:	d836      	bhi.n	8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00d      	beq.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8006b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b76:	d012      	beq.n	8006b9e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8006b78:	e02e      	b.n	8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7ff fb18 	bl	80061b4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b86:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b88:	f001 b8ca 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b8c:	f107 0318 	add.w	r3, r7, #24
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7ff fc69 	bl	8006468 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b9a:	f001 b8c1 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b9e:	f107 030c 	add.w	r3, r7, #12
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7ff fdba 	bl	800671c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006bac:	f001 b8b8 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006bb0:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006bb4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006bb6:	f001 b8b3 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006bba:	4b35      	ldr	r3, [pc, #212]	; (8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bc6:	d103      	bne.n	8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8006bc8:	4b33      	ldr	r3, [pc, #204]	; (8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8006bca:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006bcc:	f001 b8a8 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006bd4:	f001 b8a4 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006bdc:	f001 b8a0 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8006be0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006be4:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8006be8:	430b      	orrs	r3, r1
 8006bea:	d16e      	bne.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006bec:	4b28      	ldr	r3, [pc, #160]	; (8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006bf2:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006bf6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006bfe:	d034      	beq.n	8006c6a <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 8006c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c02:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006c06:	d85c      	bhi.n	8006cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8006c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c0e:	d00b      	beq.n	8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8006c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c16:	d854      	bhi.n	8006cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8006c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d016      	beq.n	8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8006c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c24:	d009      	beq.n	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006c26:	e04c      	b.n	8006cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f7ff fac1 	bl	80061b4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c34:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c36:	f001 b873 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c3a:	f107 0318 	add.w	r3, r7, #24
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7ff fc12 	bl	8006468 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c48:	f001 b86a 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006c4c:	4b10      	ldr	r3, [pc, #64]	; (8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c58:	d103      	bne.n	8006c62 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 8006c5a:	4b10      	ldr	r3, [pc, #64]	; (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006c5c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006c5e:	f001 b85f 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006c62:	2300      	movs	r3, #0
 8006c64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c66:	f001 b85b 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006c6a:	4b09      	ldr	r3, [pc, #36]	; (8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 0320 	and.w	r3, r3, #32
 8006c72:	2b20      	cmp	r3, #32
 8006c74:	d121      	bne.n	8006cba <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006c76:	4b06      	ldr	r3, [pc, #24]	; (8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00e      	beq.n	8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8006c82:	4b03      	ldr	r3, [pc, #12]	; (8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	0e1b      	lsrs	r3, r3, #24
 8006c88:	f003 030f 	and.w	r3, r3, #15
 8006c8c:	e00f      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8006c8e:	bf00      	nop
 8006c90:	46020c00 	.word	0x46020c00
 8006c94:	0007a120 	.word	0x0007a120
 8006c98:	00f42400 	.word	0x00f42400
 8006c9c:	02dc6c00 	.word	0x02dc6c00
 8006ca0:	4ba7      	ldr	r3, [pc, #668]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006ca2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006ca6:	041b      	lsls	r3, r3, #16
 8006ca8:	0e1b      	lsrs	r3, r3, #24
 8006caa:	f003 030f 	and.w	r3, r3, #15
 8006cae:	4aa5      	ldr	r2, [pc, #660]	; (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8006cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cb4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006cb6:	f001 b833 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006cbe:	f001 b82f 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006cc6:	f001 b82b 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006cca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cce:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8006cd2:	430b      	orrs	r3, r1
 8006cd4:	d17f      	bne.n	8006dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006cd6:	4b9a      	ldr	r3, [pc, #616]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006cd8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006cdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ce0:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8006ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d165      	bne.n	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006ce8:	4b95      	ldr	r3, [pc, #596]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006cee:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006cf2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8006cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006cfa:	d034      	beq.n	8006d66 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8006cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfe:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006d02:	d853      	bhi.n	8006dac <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d0a:	d00b      	beq.n	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8006d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d12:	d84b      	bhi.n	8006dac <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d016      	beq.n	8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d20:	d009      	beq.n	8006d36 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8006d22:	e043      	b.n	8006dac <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f7ff fa43 	bl	80061b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d30:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006d32:	f000 bff5 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d36:	f107 0318 	add.w	r3, r7, #24
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f7ff fb94 	bl	8006468 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006d40:	69fb      	ldr	r3, [r7, #28]
 8006d42:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006d44:	f000 bfec 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006d48:	4b7d      	ldr	r3, [pc, #500]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d54:	d103      	bne.n	8006d5e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 8006d56:	4b7c      	ldr	r3, [pc, #496]	; (8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8006d58:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006d5a:	f000 bfe1 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006d62:	f000 bfdd 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006d66:	4b76      	ldr	r3, [pc, #472]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 0320 	and.w	r3, r3, #32
 8006d6e:	2b20      	cmp	r3, #32
 8006d70:	d118      	bne.n	8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006d72:	4b73      	ldr	r3, [pc, #460]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d005      	beq.n	8006d8a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8006d7e:	4b70      	ldr	r3, [pc, #448]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	0e1b      	lsrs	r3, r3, #24
 8006d84:	f003 030f 	and.w	r3, r3, #15
 8006d88:	e006      	b.n	8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 8006d8a:	4b6d      	ldr	r3, [pc, #436]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006d8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006d90:	041b      	lsls	r3, r3, #16
 8006d92:	0e1b      	lsrs	r3, r3, #24
 8006d94:	f003 030f 	and.w	r3, r3, #15
 8006d98:	4a6a      	ldr	r2, [pc, #424]	; (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8006d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d9e:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006da0:	f000 bfbe 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8006da4:	2300      	movs	r3, #0
 8006da6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006da8:	f000 bfba 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 8006dac:	2300      	movs	r3, #0
 8006dae:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006db0:	f000 bfb6 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8006db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006dba:	d108      	bne.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006dbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f7ff f9f7 	bl	80061b4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc8:	637b      	str	r3, [r7, #52]	; 0x34
 8006dca:	f000 bfa9 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	637b      	str	r3, [r7, #52]	; 0x34
 8006dd2:	f000 bfa5 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8006dd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dda:	1e51      	subs	r1, r2, #1
 8006ddc:	430b      	orrs	r3, r1
 8006dde:	d136      	bne.n	8006e4e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006de0:	4b57      	ldr	r3, [pc, #348]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006de6:	f003 0303 	and.w	r3, r3, #3
 8006dea:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d104      	bne.n	8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8006df2:	f7fe fb8d 	bl	8005510 <HAL_RCC_GetPCLK2Freq>
 8006df6:	6378      	str	r0, [r7, #52]	; 0x34
 8006df8:	f000 bf92 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8006dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d104      	bne.n	8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006e02:	f7fe fa55 	bl	80052b0 <HAL_RCC_GetSysClockFreq>
 8006e06:	6378      	str	r0, [r7, #52]	; 0x34
 8006e08:	f000 bf8a 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006e0c:	4b4c      	ldr	r3, [pc, #304]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e18:	d106      	bne.n	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 8006e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	d103      	bne.n	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 8006e20:	4b4a      	ldr	r3, [pc, #296]	; (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006e22:	637b      	str	r3, [r7, #52]	; 0x34
 8006e24:	f000 bf7c 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006e28:	4b45      	ldr	r3, [pc, #276]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006e2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e2e:	f003 0302 	and.w	r3, r3, #2
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d107      	bne.n	8006e46 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8006e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e38:	2b03      	cmp	r3, #3
 8006e3a:	d104      	bne.n	8006e46 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 8006e3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e40:	637b      	str	r3, [r7, #52]	; 0x34
 8006e42:	f000 bf6d 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8006e46:	2300      	movs	r3, #0
 8006e48:	637b      	str	r3, [r7, #52]	; 0x34
 8006e4a:	f000 bf69 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8006e4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e52:	1e91      	subs	r1, r2, #2
 8006e54:	430b      	orrs	r3, r1
 8006e56:	d136      	bne.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006e58:	4b39      	ldr	r3, [pc, #228]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e5e:	f003 030c 	and.w	r3, r3, #12
 8006e62:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d104      	bne.n	8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006e6a:	f7fe fb3d 	bl	80054e8 <HAL_RCC_GetPCLK1Freq>
 8006e6e:	6378      	str	r0, [r7, #52]	; 0x34
 8006e70:	f000 bf56 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8006e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e76:	2b04      	cmp	r3, #4
 8006e78:	d104      	bne.n	8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006e7a:	f7fe fa19 	bl	80052b0 <HAL_RCC_GetSysClockFreq>
 8006e7e:	6378      	str	r0, [r7, #52]	; 0x34
 8006e80:	f000 bf4e 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006e84:	4b2e      	ldr	r3, [pc, #184]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e90:	d106      	bne.n	8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8006e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e94:	2b08      	cmp	r3, #8
 8006e96:	d103      	bne.n	8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 8006e98:	4b2c      	ldr	r3, [pc, #176]	; (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006e9a:	637b      	str	r3, [r7, #52]	; 0x34
 8006e9c:	f000 bf40 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006ea0:	4b27      	ldr	r3, [pc, #156]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006ea2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ea6:	f003 0302 	and.w	r3, r3, #2
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d107      	bne.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8006eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb0:	2b0c      	cmp	r3, #12
 8006eb2:	d104      	bne.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 8006eb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006eb8:	637b      	str	r3, [r7, #52]	; 0x34
 8006eba:	f000 bf31 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ec2:	f000 bf2d 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006ec6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006eca:	1f11      	subs	r1, r2, #4
 8006ecc:	430b      	orrs	r3, r1
 8006ece:	d13f      	bne.n	8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006ed0:	4b1b      	ldr	r3, [pc, #108]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ed6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006eda:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d104      	bne.n	8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006ee2:	f7fe fb01 	bl	80054e8 <HAL_RCC_GetPCLK1Freq>
 8006ee6:	6378      	str	r0, [r7, #52]	; 0x34
 8006ee8:	f000 bf1a 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8006eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eee:	2b10      	cmp	r3, #16
 8006ef0:	d104      	bne.n	8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006ef2:	f7fe f9dd 	bl	80052b0 <HAL_RCC_GetSysClockFreq>
 8006ef6:	6378      	str	r0, [r7, #52]	; 0x34
 8006ef8:	f000 bf12 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006efc:	4b10      	ldr	r3, [pc, #64]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f08:	d106      	bne.n	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8006f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0c:	2b20      	cmp	r3, #32
 8006f0e:	d103      	bne.n	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 8006f10:	4b0e      	ldr	r3, [pc, #56]	; (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006f12:	637b      	str	r3, [r7, #52]	; 0x34
 8006f14:	f000 bf04 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006f18:	4b09      	ldr	r3, [pc, #36]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006f1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006f1e:	f003 0302 	and.w	r3, r3, #2
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d107      	bne.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8006f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f28:	2b30      	cmp	r3, #48	; 0x30
 8006f2a:	d104      	bne.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 8006f2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f30:	637b      	str	r3, [r7, #52]	; 0x34
 8006f32:	f000 bef5 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8006f36:	2300      	movs	r3, #0
 8006f38:	637b      	str	r3, [r7, #52]	; 0x34
 8006f3a:	f000 bef1 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8006f3e:	bf00      	nop
 8006f40:	46020c00 	.word	0x46020c00
 8006f44:	0800ae08 	.word	0x0800ae08
 8006f48:	02dc6c00 	.word	0x02dc6c00
 8006f4c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8006f50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f54:	f1a2 0108 	sub.w	r1, r2, #8
 8006f58:	430b      	orrs	r3, r1
 8006f5a:	d136      	bne.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006f5c:	4ba4      	ldr	r3, [pc, #656]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f62:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006f66:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d104      	bne.n	8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006f6e:	f7fe fabb 	bl	80054e8 <HAL_RCC_GetPCLK1Freq>
 8006f72:	6378      	str	r0, [r7, #52]	; 0x34
 8006f74:	f000 bed4 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8006f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f7a:	2b40      	cmp	r3, #64	; 0x40
 8006f7c:	d104      	bne.n	8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006f7e:	f7fe f997 	bl	80052b0 <HAL_RCC_GetSysClockFreq>
 8006f82:	6378      	str	r0, [r7, #52]	; 0x34
 8006f84:	f000 becc 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006f88:	4b99      	ldr	r3, [pc, #612]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f94:	d106      	bne.n	8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8006f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f98:	2b80      	cmp	r3, #128	; 0x80
 8006f9a:	d103      	bne.n	8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 8006f9c:	4b95      	ldr	r3, [pc, #596]	; (80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006f9e:	637b      	str	r3, [r7, #52]	; 0x34
 8006fa0:	f000 bebe 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006fa4:	4b92      	ldr	r3, [pc, #584]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006fa6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006faa:	f003 0302 	and.w	r3, r3, #2
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	d107      	bne.n	8006fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 8006fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb4:	2bc0      	cmp	r3, #192	; 0xc0
 8006fb6:	d104      	bne.n	8006fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 8006fb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8006fbe:	f000 beaf 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	637b      	str	r3, [r7, #52]	; 0x34
 8006fc6:	f000 beab 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8006fca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fce:	f1a2 0110 	sub.w	r1, r2, #16
 8006fd2:	430b      	orrs	r3, r1
 8006fd4:	d139      	bne.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006fd6:	4b86      	ldr	r3, [pc, #536]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fe0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d104      	bne.n	8006ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006fe8:	f7fe fa7e 	bl	80054e8 <HAL_RCC_GetPCLK1Freq>
 8006fec:	6378      	str	r0, [r7, #52]	; 0x34
 8006fee:	f000 be97 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8006ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ff8:	d104      	bne.n	8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006ffa:	f7fe f959 	bl	80052b0 <HAL_RCC_GetSysClockFreq>
 8006ffe:	6378      	str	r0, [r7, #52]	; 0x34
 8007000:	f000 be8e 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007004:	4b7a      	ldr	r3, [pc, #488]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800700c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007010:	d107      	bne.n	8007022 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 8007012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007018:	d103      	bne.n	8007022 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 800701a:	4b76      	ldr	r3, [pc, #472]	; (80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800701c:	637b      	str	r3, [r7, #52]	; 0x34
 800701e:	f000 be7f 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007022:	4b73      	ldr	r3, [pc, #460]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007024:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007028:	f003 0302 	and.w	r3, r3, #2
 800702c:	2b02      	cmp	r3, #2
 800702e:	d108      	bne.n	8007042 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8007030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007032:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007036:	d104      	bne.n	8007042 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 8007038:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800703c:	637b      	str	r3, [r7, #52]	; 0x34
 800703e:	f000 be6f 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8007042:	2300      	movs	r3, #0
 8007044:	637b      	str	r3, [r7, #52]	; 0x34
 8007046:	f000 be6b 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800704a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800704e:	f1a2 0120 	sub.w	r1, r2, #32
 8007052:	430b      	orrs	r3, r1
 8007054:	d158      	bne.n	8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007056:	4b66      	ldr	r3, [pc, #408]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007058:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800705c:	f003 0307 	and.w	r3, r3, #7
 8007060:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007064:	2b00      	cmp	r3, #0
 8007066:	d104      	bne.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8007068:	f7fe fa66 	bl	8005538 <HAL_RCC_GetPCLK3Freq>
 800706c:	6378      	str	r0, [r7, #52]	; 0x34
 800706e:	f000 be57 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8007072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007074:	2b01      	cmp	r3, #1
 8007076:	d104      	bne.n	8007082 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007078:	f7fe f91a 	bl	80052b0 <HAL_RCC_GetSysClockFreq>
 800707c:	6378      	str	r0, [r7, #52]	; 0x34
 800707e:	f000 be4f 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007082:	4b5b      	ldr	r3, [pc, #364]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800708a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800708e:	d106      	bne.n	800709e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 8007090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007092:	2b02      	cmp	r3, #2
 8007094:	d103      	bne.n	800709e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 8007096:	4b57      	ldr	r3, [pc, #348]	; (80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007098:	637b      	str	r3, [r7, #52]	; 0x34
 800709a:	f000 be41 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800709e:	4b54      	ldr	r3, [pc, #336]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80070a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80070a4:	f003 0302 	and.w	r3, r3, #2
 80070a8:	2b02      	cmp	r3, #2
 80070aa:	d107      	bne.n	80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 80070ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ae:	2b03      	cmp	r3, #3
 80070b0:	d104      	bne.n	80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 80070b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070b6:	637b      	str	r3, [r7, #52]	; 0x34
 80070b8:	f000 be32 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 80070bc:	4b4c      	ldr	r3, [pc, #304]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0320 	and.w	r3, r3, #32
 80070c4:	2b20      	cmp	r3, #32
 80070c6:	d11b      	bne.n	8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 80070c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ca:	2b04      	cmp	r3, #4
 80070cc:	d118      	bne.n	8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80070ce:	4b48      	ldr	r3, [pc, #288]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d005      	beq.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 80070da:	4b45      	ldr	r3, [pc, #276]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	0e1b      	lsrs	r3, r3, #24
 80070e0:	f003 030f 	and.w	r3, r3, #15
 80070e4:	e006      	b.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80070e6:	4b42      	ldr	r3, [pc, #264]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80070e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80070ec:	041b      	lsls	r3, r3, #16
 80070ee:	0e1b      	lsrs	r3, r3, #24
 80070f0:	f003 030f 	and.w	r3, r3, #15
 80070f4:	4a40      	ldr	r2, [pc, #256]	; (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 80070f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070fa:	637b      	str	r3, [r7, #52]	; 0x34
 80070fc:	f000 be10 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8007100:	2300      	movs	r3, #0
 8007102:	637b      	str	r3, [r7, #52]	; 0x34
 8007104:	f000 be0c 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8007108:	e9d7 2300 	ldrd	r2, r3, [r7]
 800710c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007110:	430b      	orrs	r3, r1
 8007112:	d173      	bne.n	80071fc <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007114:	4b36      	ldr	r3, [pc, #216]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007116:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800711a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800711e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007126:	d104      	bne.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007128:	f7fe f8c2 	bl	80052b0 <HAL_RCC_GetSysClockFreq>
 800712c:	6378      	str	r0, [r7, #52]	; 0x34
 800712e:	f000 bdf7 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8007132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007134:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007138:	d108      	bne.n	800714c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800713a:	f107 0318 	add.w	r3, r7, #24
 800713e:	4618      	mov	r0, r3
 8007140:	f7ff f992 	bl	8006468 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8007144:	6a3b      	ldr	r3, [r7, #32]
 8007146:	637b      	str	r3, [r7, #52]	; 0x34
 8007148:	f000 bdea 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800714c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714e:	2b00      	cmp	r3, #0
 8007150:	d104      	bne.n	800715c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8007152:	f7fe f9af 	bl	80054b4 <HAL_RCC_GetHCLKFreq>
 8007156:	6378      	str	r0, [r7, #52]	; 0x34
 8007158:	f000 bde2 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800715c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007162:	d122      	bne.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007164:	4b22      	ldr	r3, [pc, #136]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 0320 	and.w	r3, r3, #32
 800716c:	2b20      	cmp	r3, #32
 800716e:	d118      	bne.n	80071a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007170:	4b1f      	ldr	r3, [pc, #124]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007178:	2b00      	cmp	r3, #0
 800717a:	d005      	beq.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 800717c:	4b1c      	ldr	r3, [pc, #112]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	0e1b      	lsrs	r3, r3, #24
 8007182:	f003 030f 	and.w	r3, r3, #15
 8007186:	e006      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8007188:	4b19      	ldr	r3, [pc, #100]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800718a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800718e:	041b      	lsls	r3, r3, #16
 8007190:	0e1b      	lsrs	r3, r3, #24
 8007192:	f003 030f 	and.w	r3, r3, #15
 8007196:	4a18      	ldr	r2, [pc, #96]	; (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8007198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800719c:	637b      	str	r3, [r7, #52]	; 0x34
 800719e:	f000 bdbf 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 80071a2:	2300      	movs	r3, #0
 80071a4:	637b      	str	r3, [r7, #52]	; 0x34
 80071a6:	f000 bdbb 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80071aa:	4b11      	ldr	r3, [pc, #68]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071b6:	d107      	bne.n	80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 80071b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80071be:	d103      	bne.n	80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 80071c0:	4b0c      	ldr	r3, [pc, #48]	; (80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80071c2:	637b      	str	r3, [r7, #52]	; 0x34
 80071c4:	f000 bdac 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80071c8:	4b09      	ldr	r3, [pc, #36]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071d4:	d107      	bne.n	80071e6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80071d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071dc:	d103      	bne.n	80071e6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 80071de:	4b05      	ldr	r3, [pc, #20]	; (80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80071e0:	637b      	str	r3, [r7, #52]	; 0x34
 80071e2:	f000 bd9d 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 80071e6:	2300      	movs	r3, #0
 80071e8:	637b      	str	r3, [r7, #52]	; 0x34
 80071ea:	f000 bd99 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80071ee:	bf00      	nop
 80071f0:	46020c00 	.word	0x46020c00
 80071f4:	00f42400 	.word	0x00f42400
 80071f8:	0800ae08 	.word	0x0800ae08
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 80071fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007200:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8007204:	430b      	orrs	r3, r1
 8007206:	d158      	bne.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8007208:	4bad      	ldr	r3, [pc, #692]	; (80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800720a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800720e:	f003 0307 	and.w	r3, r3, #7
 8007212:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007216:	2b04      	cmp	r3, #4
 8007218:	d84b      	bhi.n	80072b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800721a:	a201      	add	r2, pc, #4	; (adr r2, 8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800721c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007220:	08007259 	.word	0x08007259
 8007224:	08007235 	.word	0x08007235
 8007228:	08007247 	.word	0x08007247
 800722c:	08007263 	.word	0x08007263
 8007230:	0800726d 	.word	0x0800726d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007234:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007238:	4618      	mov	r0, r3
 800723a:	f7fe ffbb 	bl	80061b4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800723e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007240:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007242:	f000 bd6d 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007246:	f107 030c 	add.w	r3, r7, #12
 800724a:	4618      	mov	r0, r3
 800724c:	f7ff fa66 	bl	800671c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007254:	f000 bd64 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007258:	f7fe f92c 	bl	80054b4 <HAL_RCC_GetHCLKFreq>
 800725c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800725e:	f000 bd5f 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007262:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007266:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007268:	f000 bd5a 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800726c:	4b94      	ldr	r3, [pc, #592]	; (80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 0320 	and.w	r3, r3, #32
 8007274:	2b20      	cmp	r3, #32
 8007276:	d118      	bne.n	80072aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007278:	4b91      	ldr	r3, [pc, #580]	; (80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007280:	2b00      	cmp	r3, #0
 8007282:	d005      	beq.n	8007290 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 8007284:	4b8e      	ldr	r3, [pc, #568]	; (80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	0e1b      	lsrs	r3, r3, #24
 800728a:	f003 030f 	and.w	r3, r3, #15
 800728e:	e006      	b.n	800729e <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 8007290:	4b8b      	ldr	r3, [pc, #556]	; (80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007292:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007296:	041b      	lsls	r3, r3, #16
 8007298:	0e1b      	lsrs	r3, r3, #24
 800729a:	f003 030f 	and.w	r3, r3, #15
 800729e:	4a89      	ldr	r2, [pc, #548]	; (80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80072a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072a4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80072a6:	f000 bd3b 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80072aa:	2300      	movs	r3, #0
 80072ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072ae:	f000 bd37 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80072b2:	2300      	movs	r3, #0
 80072b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072b6:	f000 bd33 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80072ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072be:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 80072c2:	430b      	orrs	r3, r1
 80072c4:	d167      	bne.n	8007396 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 80072c6:	4b7e      	ldr	r3, [pc, #504]	; (80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80072c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80072cc:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80072d0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80072d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80072d8:	d036      	beq.n	8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 80072da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80072e0:	d855      	bhi.n	800738e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 80072e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80072e8:	d029      	beq.n	800733e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 80072ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80072f0:	d84d      	bhi.n	800738e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 80072f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072f8:	d013      	beq.n	8007322 <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 80072fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007300:	d845      	bhi.n	800738e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8007302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007304:	2b00      	cmp	r3, #0
 8007306:	d015      	beq.n	8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8007308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800730e:	d13e      	bne.n	800738e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007310:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007314:	4618      	mov	r0, r3
 8007316:	f7fe ff4d 	bl	80061b4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800731a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800731e:	f000 bcff 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007322:	f107 030c 	add.w	r3, r7, #12
 8007326:	4618      	mov	r0, r3
 8007328:	f7ff f9f8 	bl	800671c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007330:	f000 bcf6 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007334:	f7fe f8be 	bl	80054b4 <HAL_RCC_GetHCLKFreq>
 8007338:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800733a:	f000 bcf1 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800733e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007342:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007344:	f000 bcec 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007348:	4b5d      	ldr	r3, [pc, #372]	; (80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 0320 	and.w	r3, r3, #32
 8007350:	2b20      	cmp	r3, #32
 8007352:	d118      	bne.n	8007386 <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007354:	4b5a      	ldr	r3, [pc, #360]	; (80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d005      	beq.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8007360:	4b57      	ldr	r3, [pc, #348]	; (80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	0e1b      	lsrs	r3, r3, #24
 8007366:	f003 030f 	and.w	r3, r3, #15
 800736a:	e006      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 800736c:	4b54      	ldr	r3, [pc, #336]	; (80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800736e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007372:	041b      	lsls	r3, r3, #16
 8007374:	0e1b      	lsrs	r3, r3, #24
 8007376:	f003 030f 	and.w	r3, r3, #15
 800737a:	4a52      	ldr	r2, [pc, #328]	; (80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800737c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007380:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007382:	f000 bccd 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007386:	2300      	movs	r3, #0
 8007388:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800738a:	f000 bcc9 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800738e:	2300      	movs	r3, #0
 8007390:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007392:	f000 bcc5 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8007396:	e9d7 2300 	ldrd	r2, r3, [r7]
 800739a:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800739e:	430b      	orrs	r3, r1
 80073a0:	d14c      	bne.n	800743c <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80073a2:	4b47      	ldr	r3, [pc, #284]	; (80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80073a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80073a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80073ac:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80073ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d104      	bne.n	80073be <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80073b4:	f7fe f898 	bl	80054e8 <HAL_RCC_GetPCLK1Freq>
 80073b8:	6378      	str	r0, [r7, #52]	; 0x34
 80073ba:	f000 bcb1 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80073be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073c4:	d104      	bne.n	80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80073c6:	f7fd ff73 	bl	80052b0 <HAL_RCC_GetSysClockFreq>
 80073ca:	6378      	str	r0, [r7, #52]	; 0x34
 80073cc:	f000 bca8 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80073d0:	4b3b      	ldr	r3, [pc, #236]	; (80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073dc:	d107      	bne.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 80073de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073e4:	d103      	bne.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 80073e6:	4b38      	ldr	r3, [pc, #224]	; (80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80073e8:	637b      	str	r3, [r7, #52]	; 0x34
 80073ea:	f000 bc99 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80073ee:	4b34      	ldr	r3, [pc, #208]	; (80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f003 0320 	and.w	r3, r3, #32
 80073f6:	2b20      	cmp	r3, #32
 80073f8:	d11c      	bne.n	8007434 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 80073fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007400:	d118      	bne.n	8007434 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007402:	4b2f      	ldr	r3, [pc, #188]	; (80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800740a:	2b00      	cmp	r3, #0
 800740c:	d005      	beq.n	800741a <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 800740e:	4b2c      	ldr	r3, [pc, #176]	; (80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	0e1b      	lsrs	r3, r3, #24
 8007414:	f003 030f 	and.w	r3, r3, #15
 8007418:	e006      	b.n	8007428 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 800741a:	4b29      	ldr	r3, [pc, #164]	; (80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800741c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007420:	041b      	lsls	r3, r3, #16
 8007422:	0e1b      	lsrs	r3, r3, #24
 8007424:	f003 030f 	and.w	r3, r3, #15
 8007428:	4a26      	ldr	r2, [pc, #152]	; (80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800742a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800742e:	637b      	str	r3, [r7, #52]	; 0x34
 8007430:	f000 bc76 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8007434:	2300      	movs	r3, #0
 8007436:	637b      	str	r3, [r7, #52]	; 0x34
 8007438:	f000 bc72 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800743c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007440:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8007444:	430b      	orrs	r3, r1
 8007446:	d152      	bne.n	80074ee <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007448:	4b1d      	ldr	r3, [pc, #116]	; (80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800744a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800744e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007452:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007456:	2b00      	cmp	r3, #0
 8007458:	d104      	bne.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800745a:	f7fe f845 	bl	80054e8 <HAL_RCC_GetPCLK1Freq>
 800745e:	6378      	str	r0, [r7, #52]	; 0x34
 8007460:	f000 bc5e 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8007464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800746a:	d104      	bne.n	8007476 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800746c:	f7fd ff20 	bl	80052b0 <HAL_RCC_GetSysClockFreq>
 8007470:	6378      	str	r0, [r7, #52]	; 0x34
 8007472:	f000 bc55 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007476:	4b12      	ldr	r3, [pc, #72]	; (80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800747e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007482:	d107      	bne.n	8007494 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 8007484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007486:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800748a:	d103      	bne.n	8007494 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 800748c:	4b0e      	ldr	r3, [pc, #56]	; (80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800748e:	637b      	str	r3, [r7, #52]	; 0x34
 8007490:	f000 bc46 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8007494:	4b0a      	ldr	r3, [pc, #40]	; (80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 0320 	and.w	r3, r3, #32
 800749c:	2b20      	cmp	r3, #32
 800749e:	d122      	bne.n	80074e6 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 80074a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80074a6:	d11e      	bne.n	80074e6 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80074a8:	4b05      	ldr	r3, [pc, #20]	; (80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d00b      	beq.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 80074b4:	4b02      	ldr	r3, [pc, #8]	; (80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	0e1b      	lsrs	r3, r3, #24
 80074ba:	f003 030f 	and.w	r3, r3, #15
 80074be:	e00c      	b.n	80074da <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 80074c0:	46020c00 	.word	0x46020c00
 80074c4:	0800ae08 	.word	0x0800ae08
 80074c8:	00f42400 	.word	0x00f42400
 80074cc:	4ba1      	ldr	r3, [pc, #644]	; (8007754 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80074ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80074d2:	041b      	lsls	r3, r3, #16
 80074d4:	0e1b      	lsrs	r3, r3, #24
 80074d6:	f003 030f 	and.w	r3, r3, #15
 80074da:	4a9f      	ldr	r2, [pc, #636]	; (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80074dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074e0:	637b      	str	r3, [r7, #52]	; 0x34
 80074e2:	f000 bc1d 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 80074e6:	2300      	movs	r3, #0
 80074e8:	637b      	str	r3, [r7, #52]	; 0x34
 80074ea:	f000 bc19 	b.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80074ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074f2:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80074f6:	430b      	orrs	r3, r1
 80074f8:	d151      	bne.n	800759e <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80074fa:	4b96      	ldr	r3, [pc, #600]	; (8007754 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80074fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007500:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007504:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007508:	2bc0      	cmp	r3, #192	; 0xc0
 800750a:	d024      	beq.n	8007556 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800750c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750e:	2bc0      	cmp	r3, #192	; 0xc0
 8007510:	d842      	bhi.n	8007598 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8007512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007514:	2b80      	cmp	r3, #128	; 0x80
 8007516:	d00d      	beq.n	8007534 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8007518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751a:	2b80      	cmp	r3, #128	; 0x80
 800751c:	d83c      	bhi.n	8007598 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 800751e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007520:	2b00      	cmp	r3, #0
 8007522:	d003      	beq.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8007524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007526:	2b40      	cmp	r3, #64	; 0x40
 8007528:	d011      	beq.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 800752a:	e035      	b.n	8007598 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800752c:	f7fe f804 	bl	8005538 <HAL_RCC_GetPCLK3Freq>
 8007530:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007532:	e3f5      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007534:	4b87      	ldr	r3, [pc, #540]	; (8007754 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800753c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007540:	d102      	bne.n	8007548 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 8007542:	4b86      	ldr	r3, [pc, #536]	; (800775c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007544:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007546:	e3eb      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007548:	2300      	movs	r3, #0
 800754a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800754c:	e3e8      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800754e:	f7fd feaf 	bl	80052b0 <HAL_RCC_GetSysClockFreq>
 8007552:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007554:	e3e4      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007556:	4b7f      	ldr	r3, [pc, #508]	; (8007754 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 0320 	and.w	r3, r3, #32
 800755e:	2b20      	cmp	r3, #32
 8007560:	d117      	bne.n	8007592 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007562:	4b7c      	ldr	r3, [pc, #496]	; (8007754 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800756a:	2b00      	cmp	r3, #0
 800756c:	d005      	beq.n	800757a <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 800756e:	4b79      	ldr	r3, [pc, #484]	; (8007754 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	0e1b      	lsrs	r3, r3, #24
 8007574:	f003 030f 	and.w	r3, r3, #15
 8007578:	e006      	b.n	8007588 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 800757a:	4b76      	ldr	r3, [pc, #472]	; (8007754 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800757c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007580:	041b      	lsls	r3, r3, #16
 8007582:	0e1b      	lsrs	r3, r3, #24
 8007584:	f003 030f 	and.w	r3, r3, #15
 8007588:	4a73      	ldr	r2, [pc, #460]	; (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800758a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800758e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007590:	e3c6      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007592:	2300      	movs	r3, #0
 8007594:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007596:	e3c3      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 8007598:	2300      	movs	r3, #0
 800759a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800759c:	e3c0      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800759e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075a2:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 80075a6:	430b      	orrs	r3, r1
 80075a8:	d147      	bne.n	800763a <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80075aa:	4b6a      	ldr	r3, [pc, #424]	; (8007754 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80075ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80075b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80075b4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80075b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d103      	bne.n	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80075bc:	f7fd ff94 	bl	80054e8 <HAL_RCC_GetPCLK1Freq>
 80075c0:	6378      	str	r0, [r7, #52]	; 0x34
 80075c2:	e3ad      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80075c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80075ca:	d103      	bne.n	80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80075cc:	f7fd fe70 	bl	80052b0 <HAL_RCC_GetSysClockFreq>
 80075d0:	6378      	str	r0, [r7, #52]	; 0x34
 80075d2:	e3a5      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80075d4:	4b5f      	ldr	r3, [pc, #380]	; (8007754 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075e0:	d106      	bne.n	80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 80075e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075e8:	d102      	bne.n	80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 80075ea:	4b5c      	ldr	r3, [pc, #368]	; (800775c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80075ec:	637b      	str	r3, [r7, #52]	; 0x34
 80075ee:	e397      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80075f0:	4b58      	ldr	r3, [pc, #352]	; (8007754 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 0320 	and.w	r3, r3, #32
 80075f8:	2b20      	cmp	r3, #32
 80075fa:	d11b      	bne.n	8007634 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 80075fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007602:	d117      	bne.n	8007634 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007604:	4b53      	ldr	r3, [pc, #332]	; (8007754 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800760c:	2b00      	cmp	r3, #0
 800760e:	d005      	beq.n	800761c <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 8007610:	4b50      	ldr	r3, [pc, #320]	; (8007754 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	0e1b      	lsrs	r3, r3, #24
 8007616:	f003 030f 	and.w	r3, r3, #15
 800761a:	e006      	b.n	800762a <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 800761c:	4b4d      	ldr	r3, [pc, #308]	; (8007754 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800761e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007622:	041b      	lsls	r3, r3, #16
 8007624:	0e1b      	lsrs	r3, r3, #24
 8007626:	f003 030f 	and.w	r3, r3, #15
 800762a:	4a4b      	ldr	r2, [pc, #300]	; (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800762c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007630:	637b      	str	r3, [r7, #52]	; 0x34
 8007632:	e375      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8007634:	2300      	movs	r3, #0
 8007636:	637b      	str	r3, [r7, #52]	; 0x34
 8007638:	e372      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800763a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800763e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8007642:	430b      	orrs	r3, r1
 8007644:	d164      	bne.n	8007710 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8007646:	4b43      	ldr	r3, [pc, #268]	; (8007754 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007648:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800764c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007650:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8007652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007654:	2b00      	cmp	r3, #0
 8007656:	d120      	bne.n	800769a <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007658:	4b3e      	ldr	r3, [pc, #248]	; (8007754 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 0320 	and.w	r3, r3, #32
 8007660:	2b20      	cmp	r3, #32
 8007662:	d117      	bne.n	8007694 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007664:	4b3b      	ldr	r3, [pc, #236]	; (8007754 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800766c:	2b00      	cmp	r3, #0
 800766e:	d005      	beq.n	800767c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8007670:	4b38      	ldr	r3, [pc, #224]	; (8007754 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	0e1b      	lsrs	r3, r3, #24
 8007676:	f003 030f 	and.w	r3, r3, #15
 800767a:	e006      	b.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 800767c:	4b35      	ldr	r3, [pc, #212]	; (8007754 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800767e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007682:	041b      	lsls	r3, r3, #16
 8007684:	0e1b      	lsrs	r3, r3, #24
 8007686:	f003 030f 	and.w	r3, r3, #15
 800768a:	4a33      	ldr	r2, [pc, #204]	; (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800768c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007690:	637b      	str	r3, [r7, #52]	; 0x34
 8007692:	e345      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8007694:	2300      	movs	r3, #0
 8007696:	637b      	str	r3, [r7, #52]	; 0x34
 8007698:	e342      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800769a:	4b2e      	ldr	r3, [pc, #184]	; (8007754 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800769c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80076a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076a8:	d112      	bne.n	80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 80076aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076b0:	d10e      	bne.n	80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80076b2:	4b28      	ldr	r3, [pc, #160]	; (8007754 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80076b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80076b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076c0:	d102      	bne.n	80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 80076c2:	23fa      	movs	r3, #250	; 0xfa
 80076c4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80076c6:	e32b      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80076c8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80076cc:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80076ce:	e327      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80076d0:	4b20      	ldr	r3, [pc, #128]	; (8007754 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076dc:	d106      	bne.n	80076ec <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 80076de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076e4:	d102      	bne.n	80076ec <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 80076e6:	4b1d      	ldr	r3, [pc, #116]	; (800775c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80076e8:	637b      	str	r3, [r7, #52]	; 0x34
 80076ea:	e319      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80076ec:	4b19      	ldr	r3, [pc, #100]	; (8007754 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80076ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80076f2:	f003 0302 	and.w	r3, r3, #2
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	d107      	bne.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 80076fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007700:	d103      	bne.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8007702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007706:	637b      	str	r3, [r7, #52]	; 0x34
 8007708:	e30a      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800770a:	2300      	movs	r3, #0
 800770c:	637b      	str	r3, [r7, #52]	; 0x34
 800770e:	e307      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8007710:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007714:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8007718:	430b      	orrs	r3, r1
 800771a:	d16b      	bne.n	80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800771c:	4b0d      	ldr	r3, [pc, #52]	; (8007754 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800771e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007722:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007726:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8007728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772a:	2b00      	cmp	r3, #0
 800772c:	d127      	bne.n	800777e <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800772e:	4b09      	ldr	r3, [pc, #36]	; (8007754 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 0320 	and.w	r3, r3, #32
 8007736:	2b20      	cmp	r3, #32
 8007738:	d11e      	bne.n	8007778 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800773a:	4b06      	ldr	r3, [pc, #24]	; (8007754 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007742:	2b00      	cmp	r3, #0
 8007744:	d00c      	beq.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 8007746:	4b03      	ldr	r3, [pc, #12]	; (8007754 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	0e1b      	lsrs	r3, r3, #24
 800774c:	f003 030f 	and.w	r3, r3, #15
 8007750:	e00d      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8007752:	bf00      	nop
 8007754:	46020c00 	.word	0x46020c00
 8007758:	0800ae08 	.word	0x0800ae08
 800775c:	00f42400 	.word	0x00f42400
 8007760:	4b94      	ldr	r3, [pc, #592]	; (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007762:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007766:	041b      	lsls	r3, r3, #16
 8007768:	0e1b      	lsrs	r3, r3, #24
 800776a:	f003 030f 	and.w	r3, r3, #15
 800776e:	4a92      	ldr	r2, [pc, #584]	; (80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8007770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007774:	637b      	str	r3, [r7, #52]	; 0x34
 8007776:	e2d3      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8007778:	2300      	movs	r3, #0
 800777a:	637b      	str	r3, [r7, #52]	; 0x34
 800777c:	e2d0      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800777e:	4b8d      	ldr	r3, [pc, #564]	; (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007780:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007784:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007788:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800778c:	d112      	bne.n	80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 800778e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007794:	d10e      	bne.n	80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007796:	4b87      	ldr	r3, [pc, #540]	; (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007798:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800779c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077a4:	d102      	bne.n	80077ac <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 80077a6:	23fa      	movs	r3, #250	; 0xfa
 80077a8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80077aa:	e2b9      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80077ac:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80077b0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80077b2:	e2b5      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80077b4:	4b7f      	ldr	r3, [pc, #508]	; (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077c0:	d106      	bne.n	80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 80077c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077c8:	d102      	bne.n	80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 80077ca:	4b7c      	ldr	r3, [pc, #496]	; (80079bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80077cc:	637b      	str	r3, [r7, #52]	; 0x34
 80077ce:	e2a7      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80077d0:	4b78      	ldr	r3, [pc, #480]	; (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80077d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80077d6:	f003 0302 	and.w	r3, r3, #2
 80077da:	2b02      	cmp	r3, #2
 80077dc:	d107      	bne.n	80077ee <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 80077de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80077e4:	d103      	bne.n	80077ee <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 80077e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077ea:	637b      	str	r3, [r7, #52]	; 0x34
 80077ec:	e298      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80077ee:	2300      	movs	r3, #0
 80077f0:	637b      	str	r3, [r7, #52]	; 0x34
 80077f2:	e295      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80077f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077f8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80077fc:	430b      	orrs	r3, r1
 80077fe:	d147      	bne.n	8007890 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007800:	4b6c      	ldr	r3, [pc, #432]	; (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007806:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800780a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800780c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780e:	2b00      	cmp	r3, #0
 8007810:	d103      	bne.n	800781a <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007812:	f7fd fe69 	bl	80054e8 <HAL_RCC_GetPCLK1Freq>
 8007816:	6378      	str	r0, [r7, #52]	; 0x34
 8007818:	e282      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800781a:	4b66      	ldr	r3, [pc, #408]	; (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800781c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007820:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007824:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007828:	d112      	bne.n	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 800782a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007830:	d10e      	bne.n	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007832:	4b60      	ldr	r3, [pc, #384]	; (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007834:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800783c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007840:	d102      	bne.n	8007848 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 8007842:	23fa      	movs	r3, #250	; 0xfa
 8007844:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007846:	e26b      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8007848:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800784c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800784e:	e267      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8007850:	4b58      	ldr	r3, [pc, #352]	; (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007858:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800785c:	d106      	bne.n	800786c <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 800785e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007860:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007864:	d102      	bne.n	800786c <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 8007866:	4b55      	ldr	r3, [pc, #340]	; (80079bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007868:	637b      	str	r3, [r7, #52]	; 0x34
 800786a:	e259      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800786c:	4b51      	ldr	r3, [pc, #324]	; (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800786e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007872:	f003 0302 	and.w	r3, r3, #2
 8007876:	2b02      	cmp	r3, #2
 8007878:	d107      	bne.n	800788a <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 800787a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007880:	d103      	bne.n	800788a <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 8007882:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007886:	637b      	str	r3, [r7, #52]	; 0x34
 8007888:	e24a      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800788a:	2300      	movs	r3, #0
 800788c:	637b      	str	r3, [r7, #52]	; 0x34
 800788e:	e247      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8007890:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007894:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8007898:	430b      	orrs	r3, r1
 800789a:	d12d      	bne.n	80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800789c:	4b45      	ldr	r3, [pc, #276]	; (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800789e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80078a2:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80078a6:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80078a8:	4b42      	ldr	r3, [pc, #264]	; (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078b4:	d105      	bne.n	80078c2 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 80078b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d102      	bne.n	80078c2 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 80078bc:	4b3f      	ldr	r3, [pc, #252]	; (80079bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80078be:	637b      	str	r3, [r7, #52]	; 0x34
 80078c0:	e22e      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80078c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80078c8:	d107      	bne.n	80078da <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078ce:	4618      	mov	r0, r3
 80078d0:	f7fe fc70 	bl	80061b4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 80078d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d6:	637b      	str	r3, [r7, #52]	; 0x34
 80078d8:	e222      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 80078da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80078e0:	d107      	bne.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078e2:	f107 0318 	add.w	r3, r7, #24
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7fe fdbe 	bl	8006468 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	637b      	str	r3, [r7, #52]	; 0x34
 80078f0:	e216      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 80078f2:	2300      	movs	r3, #0
 80078f4:	637b      	str	r3, [r7, #52]	; 0x34
 80078f6:	e213      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80078f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078fc:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8007900:	430b      	orrs	r3, r1
 8007902:	d15d      	bne.n	80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007904:	4b2b      	ldr	r3, [pc, #172]	; (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800790a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800790e:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8007910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007912:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007916:	d028      	beq.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 8007918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800791e:	d845      	bhi.n	80079ac <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8007920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007922:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007926:	d013      	beq.n	8007950 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 8007928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800792a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800792e:	d83d      	bhi.n	80079ac <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8007930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007932:	2b00      	cmp	r3, #0
 8007934:	d004      	beq.n	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8007936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007938:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800793c:	d004      	beq.n	8007948 <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 800793e:	e035      	b.n	80079ac <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8007940:	f7fd fde6 	bl	8005510 <HAL_RCC_GetPCLK2Freq>
 8007944:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007946:	e1eb      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007948:	f7fd fcb2 	bl	80052b0 <HAL_RCC_GetSysClockFreq>
 800794c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800794e:	e1e7      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007950:	4b18      	ldr	r3, [pc, #96]	; (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800795c:	d102      	bne.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 800795e:	4b17      	ldr	r3, [pc, #92]	; (80079bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007960:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007962:	e1dd      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007964:	2300      	movs	r3, #0
 8007966:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007968:	e1da      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800796a:	4b12      	ldr	r3, [pc, #72]	; (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f003 0320 	and.w	r3, r3, #32
 8007972:	2b20      	cmp	r3, #32
 8007974:	d117      	bne.n	80079a6 <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007976:	4b0f      	ldr	r3, [pc, #60]	; (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800797e:	2b00      	cmp	r3, #0
 8007980:	d005      	beq.n	800798e <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8007982:	4b0c      	ldr	r3, [pc, #48]	; (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	0e1b      	lsrs	r3, r3, #24
 8007988:	f003 030f 	and.w	r3, r3, #15
 800798c:	e006      	b.n	800799c <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 800798e:	4b09      	ldr	r3, [pc, #36]	; (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007990:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007994:	041b      	lsls	r3, r3, #16
 8007996:	0e1b      	lsrs	r3, r3, #24
 8007998:	f003 030f 	and.w	r3, r3, #15
 800799c:	4a06      	ldr	r2, [pc, #24]	; (80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800799e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079a2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80079a4:	e1bc      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80079a6:	2300      	movs	r3, #0
 80079a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079aa:	e1b9      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80079ac:	2300      	movs	r3, #0
 80079ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079b0:	e1b6      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80079b2:	bf00      	nop
 80079b4:	46020c00 	.word	0x46020c00
 80079b8:	0800ae08 	.word	0x0800ae08
 80079bc:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 80079c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079c4:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 80079c8:	430b      	orrs	r3, r1
 80079ca:	d156      	bne.n	8007a7a <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80079cc:	4ba5      	ldr	r3, [pc, #660]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80079ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80079d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80079d6:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80079d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80079de:	d028      	beq.n	8007a32 <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 80079e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80079e6:	d845      	bhi.n	8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 80079e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079ee:	d013      	beq.n	8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 80079f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079f6:	d83d      	bhi.n	8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 80079f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d004      	beq.n	8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 80079fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a04:	d004      	beq.n	8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8007a06:	e035      	b.n	8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8007a08:	f7fd fd6e 	bl	80054e8 <HAL_RCC_GetPCLK1Freq>
 8007a0c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007a0e:	e187      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007a10:	f7fd fc4e 	bl	80052b0 <HAL_RCC_GetSysClockFreq>
 8007a14:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007a16:	e183      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a18:	4b92      	ldr	r3, [pc, #584]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a24:	d102      	bne.n	8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 8007a26:	4b90      	ldr	r3, [pc, #576]	; (8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8007a28:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007a2a:	e179      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a30:	e176      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007a32:	4b8c      	ldr	r3, [pc, #560]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f003 0320 	and.w	r3, r3, #32
 8007a3a:	2b20      	cmp	r3, #32
 8007a3c:	d117      	bne.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007a3e:	4b89      	ldr	r3, [pc, #548]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d005      	beq.n	8007a56 <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 8007a4a:	4b86      	ldr	r3, [pc, #536]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	0e1b      	lsrs	r3, r3, #24
 8007a50:	f003 030f 	and.w	r3, r3, #15
 8007a54:	e006      	b.n	8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 8007a56:	4b83      	ldr	r3, [pc, #524]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007a58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007a5c:	041b      	lsls	r3, r3, #16
 8007a5e:	0e1b      	lsrs	r3, r3, #24
 8007a60:	f003 030f 	and.w	r3, r3, #15
 8007a64:	4a81      	ldr	r2, [pc, #516]	; (8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8007a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a6a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007a6c:	e158      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a72:	e155      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8007a74:	2300      	movs	r3, #0
 8007a76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a78:	e152      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8007a7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a7e:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8007a82:	430b      	orrs	r3, r1
 8007a84:	d177      	bne.n	8007b76 <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8007a86:	4b77      	ldr	r3, [pc, #476]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007a88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007a8c:	f003 0318 	and.w	r3, r3, #24
 8007a90:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8007a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a94:	2b18      	cmp	r3, #24
 8007a96:	d86b      	bhi.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 8007a98:	a201      	add	r2, pc, #4	; (adr r2, 8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 8007a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a9e:	bf00      	nop
 8007aa0:	08007b05 	.word	0x08007b05
 8007aa4:	08007b71 	.word	0x08007b71
 8007aa8:	08007b71 	.word	0x08007b71
 8007aac:	08007b71 	.word	0x08007b71
 8007ab0:	08007b71 	.word	0x08007b71
 8007ab4:	08007b71 	.word	0x08007b71
 8007ab8:	08007b71 	.word	0x08007b71
 8007abc:	08007b71 	.word	0x08007b71
 8007ac0:	08007b0d 	.word	0x08007b0d
 8007ac4:	08007b71 	.word	0x08007b71
 8007ac8:	08007b71 	.word	0x08007b71
 8007acc:	08007b71 	.word	0x08007b71
 8007ad0:	08007b71 	.word	0x08007b71
 8007ad4:	08007b71 	.word	0x08007b71
 8007ad8:	08007b71 	.word	0x08007b71
 8007adc:	08007b71 	.word	0x08007b71
 8007ae0:	08007b15 	.word	0x08007b15
 8007ae4:	08007b71 	.word	0x08007b71
 8007ae8:	08007b71 	.word	0x08007b71
 8007aec:	08007b71 	.word	0x08007b71
 8007af0:	08007b71 	.word	0x08007b71
 8007af4:	08007b71 	.word	0x08007b71
 8007af8:	08007b71 	.word	0x08007b71
 8007afc:	08007b71 	.word	0x08007b71
 8007b00:	08007b2f 	.word	0x08007b2f
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8007b04:	f7fd fd18 	bl	8005538 <HAL_RCC_GetPCLK3Freq>
 8007b08:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007b0a:	e109      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007b0c:	f7fd fbd0 	bl	80052b0 <HAL_RCC_GetSysClockFreq>
 8007b10:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007b12:	e105      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007b14:	4b53      	ldr	r3, [pc, #332]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b20:	d102      	bne.n	8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 8007b22:	4b51      	ldr	r3, [pc, #324]	; (8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8007b24:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007b26:	e0fb      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b2c:	e0f8      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007b2e:	4b4d      	ldr	r3, [pc, #308]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f003 0320 	and.w	r3, r3, #32
 8007b36:	2b20      	cmp	r3, #32
 8007b38:	d117      	bne.n	8007b6a <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007b3a:	4b4a      	ldr	r3, [pc, #296]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d005      	beq.n	8007b52 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 8007b46:	4b47      	ldr	r3, [pc, #284]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	0e1b      	lsrs	r3, r3, #24
 8007b4c:	f003 030f 	and.w	r3, r3, #15
 8007b50:	e006      	b.n	8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8007b52:	4b44      	ldr	r3, [pc, #272]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007b54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b58:	041b      	lsls	r3, r3, #16
 8007b5a:	0e1b      	lsrs	r3, r3, #24
 8007b5c:	f003 030f 	and.w	r3, r3, #15
 8007b60:	4a42      	ldr	r2, [pc, #264]	; (8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8007b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b66:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007b68:	e0da      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b6e:	e0d7      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8007b70:	2300      	movs	r3, #0
 8007b72:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b74:	e0d4      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8007b76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b7a:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8007b7e:	430b      	orrs	r3, r1
 8007b80:	d155      	bne.n	8007c2e <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007b82:	4b38      	ldr	r3, [pc, #224]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007b84:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007b88:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007b8c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b90:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b94:	d013      	beq.n	8007bbe <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 8007b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b98:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b9c:	d844      	bhi.n	8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8007b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ba4:	d013      	beq.n	8007bce <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 8007ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007bac:	d83c      	bhi.n	8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8007bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d014      	beq.n	8007bde <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 8007bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bba:	d014      	beq.n	8007be6 <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 8007bbc:	e034      	b.n	8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bbe:	f107 0318 	add.w	r3, r7, #24
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f7fe fc50 	bl	8006468 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007bcc:	e0a8      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7fe faee 	bl	80061b4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bda:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007bdc:	e0a0      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007bde:	f7fd fb67 	bl	80052b0 <HAL_RCC_GetSysClockFreq>
 8007be2:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007be4:	e09c      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007be6:	4b1f      	ldr	r3, [pc, #124]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f003 0320 	and.w	r3, r3, #32
 8007bee:	2b20      	cmp	r3, #32
 8007bf0:	d117      	bne.n	8007c22 <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007bf2:	4b1c      	ldr	r3, [pc, #112]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d005      	beq.n	8007c0a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8007bfe:	4b19      	ldr	r3, [pc, #100]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	0e1b      	lsrs	r3, r3, #24
 8007c04:	f003 030f 	and.w	r3, r3, #15
 8007c08:	e006      	b.n	8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 8007c0a:	4b16      	ldr	r3, [pc, #88]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007c0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007c10:	041b      	lsls	r3, r3, #16
 8007c12:	0e1b      	lsrs	r3, r3, #24
 8007c14:	f003 030f 	and.w	r3, r3, #15
 8007c18:	4a14      	ldr	r2, [pc, #80]	; (8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8007c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c1e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007c20:	e07e      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007c22:	2300      	movs	r3, #0
 8007c24:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c26:	e07b      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c2c:	e078      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8007c2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c32:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8007c36:	430b      	orrs	r3, r1
 8007c38:	d138      	bne.n	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8007c3a:	4b0a      	ldr	r3, [pc, #40]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007c3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007c40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c44:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8007c46:	4b07      	ldr	r3, [pc, #28]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007c48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c4c:	f003 0302 	and.w	r3, r3, #2
 8007c50:	2b02      	cmp	r3, #2
 8007c52:	d10d      	bne.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8007c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d10a      	bne.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 8007c5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c5e:	637b      	str	r3, [r7, #52]	; 0x34
 8007c60:	e05e      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8007c62:	bf00      	nop
 8007c64:	46020c00 	.word	0x46020c00
 8007c68:	00f42400 	.word	0x00f42400
 8007c6c:	0800ae08 	.word	0x0800ae08
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8007c70:	4b2e      	ldr	r3, [pc, #184]	; (8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007c72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c7e:	d112      	bne.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 8007c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c86:	d10e      	bne.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007c88:	4b28      	ldr	r3, [pc, #160]	; (8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007c8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c96:	d102      	bne.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 8007c98:	23fa      	movs	r3, #250	; 0xfa
 8007c9a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007c9c:	e040      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8007c9e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007ca2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007ca4:	e03c      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	637b      	str	r3, [r7, #52]	; 0x34
 8007caa:	e039      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8007cac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cb0:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8007cb4:	430b      	orrs	r3, r1
 8007cb6:	d131      	bne.n	8007d1c <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007cb8:	4b1c      	ldr	r3, [pc, #112]	; (8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007cba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007cbe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007cc2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007cc4:	4b19      	ldr	r3, [pc, #100]	; (8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ccc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cd0:	d105      	bne.n	8007cde <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 8007cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d102      	bne.n	8007cde <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 8007cd8:	4b15      	ldr	r3, [pc, #84]	; (8007d30 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 8007cda:	637b      	str	r3, [r7, #52]	; 0x34
 8007cdc:	e020      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8007cde:	4b13      	ldr	r3, [pc, #76]	; (8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ce6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cea:	d106      	bne.n	8007cfa <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8007cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cf2:	d102      	bne.n	8007cfa <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 8007cf4:	4b0f      	ldr	r3, [pc, #60]	; (8007d34 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 8007cf6:	637b      	str	r3, [r7, #52]	; 0x34
 8007cf8:	e012      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8007cfa:	4b0c      	ldr	r3, [pc, #48]	; (8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d06:	d106      	bne.n	8007d16 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8007d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d0e:	d102      	bne.n	8007d16 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 8007d10:	4b09      	ldr	r3, [pc, #36]	; (8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007d12:	637b      	str	r3, [r7, #52]	; 0x34
 8007d14:	e004      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8007d16:	2300      	movs	r3, #0
 8007d18:	637b      	str	r3, [r7, #52]	; 0x34
 8007d1a:	e001      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8007d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3738      	adds	r7, #56	; 0x38
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	46020c00 	.word	0x46020c00
 8007d30:	02dc6c00 	.word	0x02dc6c00
 8007d34:	016e3600 	.word	0x016e3600
 8007d38:	00f42400 	.word	0x00f42400

08007d3c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8007d44:	4b47      	ldr	r3, [pc, #284]	; (8007e64 <RCCEx_PLL2_Config+0x128>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a46      	ldr	r2, [pc, #280]	; (8007e64 <RCCEx_PLL2_Config+0x128>)
 8007d4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007d4e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007d50:	f7f9 fea8 	bl	8001aa4 <HAL_GetTick>
 8007d54:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007d56:	e008      	b.n	8007d6a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007d58:	f7f9 fea4 	bl	8001aa4 <HAL_GetTick>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	1ad3      	subs	r3, r2, r3
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d901      	bls.n	8007d6a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007d66:	2303      	movs	r3, #3
 8007d68:	e077      	b.n	8007e5a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007d6a:	4b3e      	ldr	r3, [pc, #248]	; (8007e64 <RCCEx_PLL2_Config+0x128>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1f0      	bne.n	8007d58 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007d76:	4b3b      	ldr	r3, [pc, #236]	; (8007e64 <RCCEx_PLL2_Config+0x128>)
 8007d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d7a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007d7e:	f023 0303 	bic.w	r3, r3, #3
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	6811      	ldr	r1, [r2, #0]
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	6852      	ldr	r2, [r2, #4]
 8007d8a:	3a01      	subs	r2, #1
 8007d8c:	0212      	lsls	r2, r2, #8
 8007d8e:	430a      	orrs	r2, r1
 8007d90:	4934      	ldr	r1, [pc, #208]	; (8007e64 <RCCEx_PLL2_Config+0x128>)
 8007d92:	4313      	orrs	r3, r2
 8007d94:	62cb      	str	r3, [r1, #44]	; 0x2c
 8007d96:	4b33      	ldr	r3, [pc, #204]	; (8007e64 <RCCEx_PLL2_Config+0x128>)
 8007d98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d9a:	4b33      	ldr	r3, [pc, #204]	; (8007e68 <RCCEx_PLL2_Config+0x12c>)
 8007d9c:	4013      	ands	r3, r2
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	6892      	ldr	r2, [r2, #8]
 8007da2:	3a01      	subs	r2, #1
 8007da4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	68d2      	ldr	r2, [r2, #12]
 8007dac:	3a01      	subs	r2, #1
 8007dae:	0252      	lsls	r2, r2, #9
 8007db0:	b292      	uxth	r2, r2
 8007db2:	4311      	orrs	r1, r2
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	6912      	ldr	r2, [r2, #16]
 8007db8:	3a01      	subs	r2, #1
 8007dba:	0412      	lsls	r2, r2, #16
 8007dbc:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007dc0:	4311      	orrs	r1, r2
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	6952      	ldr	r2, [r2, #20]
 8007dc6:	3a01      	subs	r2, #1
 8007dc8:	0612      	lsls	r2, r2, #24
 8007dca:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007dce:	430a      	orrs	r2, r1
 8007dd0:	4924      	ldr	r1, [pc, #144]	; (8007e64 <RCCEx_PLL2_Config+0x128>)
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007dd6:	4b23      	ldr	r3, [pc, #140]	; (8007e64 <RCCEx_PLL2_Config+0x128>)
 8007dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dda:	f023 020c 	bic.w	r2, r3, #12
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	699b      	ldr	r3, [r3, #24]
 8007de2:	4920      	ldr	r1, [pc, #128]	; (8007e64 <RCCEx_PLL2_Config+0x128>)
 8007de4:	4313      	orrs	r3, r2
 8007de6:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007de8:	4b1e      	ldr	r3, [pc, #120]	; (8007e64 <RCCEx_PLL2_Config+0x128>)
 8007dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6a1b      	ldr	r3, [r3, #32]
 8007df0:	491c      	ldr	r1, [pc, #112]	; (8007e64 <RCCEx_PLL2_Config+0x128>)
 8007df2:	4313      	orrs	r3, r2
 8007df4:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8007df6:	4b1b      	ldr	r3, [pc, #108]	; (8007e64 <RCCEx_PLL2_Config+0x128>)
 8007df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dfa:	4a1a      	ldr	r2, [pc, #104]	; (8007e64 <RCCEx_PLL2_Config+0x128>)
 8007dfc:	f023 0310 	bic.w	r3, r3, #16
 8007e00:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007e02:	4b18      	ldr	r3, [pc, #96]	; (8007e64 <RCCEx_PLL2_Config+0x128>)
 8007e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e0a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	69d2      	ldr	r2, [r2, #28]
 8007e12:	00d2      	lsls	r2, r2, #3
 8007e14:	4913      	ldr	r1, [pc, #76]	; (8007e64 <RCCEx_PLL2_Config+0x128>)
 8007e16:	4313      	orrs	r3, r2
 8007e18:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8007e1a:	4b12      	ldr	r3, [pc, #72]	; (8007e64 <RCCEx_PLL2_Config+0x128>)
 8007e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e1e:	4a11      	ldr	r2, [pc, #68]	; (8007e64 <RCCEx_PLL2_Config+0x128>)
 8007e20:	f043 0310 	orr.w	r3, r3, #16
 8007e24:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8007e26:	4b0f      	ldr	r3, [pc, #60]	; (8007e64 <RCCEx_PLL2_Config+0x128>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a0e      	ldr	r2, [pc, #56]	; (8007e64 <RCCEx_PLL2_Config+0x128>)
 8007e2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e30:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007e32:	f7f9 fe37 	bl	8001aa4 <HAL_GetTick>
 8007e36:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007e38:	e008      	b.n	8007e4c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007e3a:	f7f9 fe33 	bl	8001aa4 <HAL_GetTick>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	1ad3      	subs	r3, r2, r3
 8007e44:	2b02      	cmp	r3, #2
 8007e46:	d901      	bls.n	8007e4c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007e48:	2303      	movs	r3, #3
 8007e4a:	e006      	b.n	8007e5a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007e4c:	4b05      	ldr	r3, [pc, #20]	; (8007e64 <RCCEx_PLL2_Config+0x128>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d0f0      	beq.n	8007e3a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8007e58:	2300      	movs	r3, #0

}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	46020c00 	.word	0x46020c00
 8007e68:	80800000 	.word	0x80800000

08007e6c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8007e74:	4b47      	ldr	r3, [pc, #284]	; (8007f94 <RCCEx_PLL3_Config+0x128>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a46      	ldr	r2, [pc, #280]	; (8007f94 <RCCEx_PLL3_Config+0x128>)
 8007e7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e7e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007e80:	f7f9 fe10 	bl	8001aa4 <HAL_GetTick>
 8007e84:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007e86:	e008      	b.n	8007e9a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007e88:	f7f9 fe0c 	bl	8001aa4 <HAL_GetTick>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	1ad3      	subs	r3, r2, r3
 8007e92:	2b02      	cmp	r3, #2
 8007e94:	d901      	bls.n	8007e9a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007e96:	2303      	movs	r3, #3
 8007e98:	e077      	b.n	8007f8a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007e9a:	4b3e      	ldr	r3, [pc, #248]	; (8007f94 <RCCEx_PLL3_Config+0x128>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d1f0      	bne.n	8007e88 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007ea6:	4b3b      	ldr	r3, [pc, #236]	; (8007f94 <RCCEx_PLL3_Config+0x128>)
 8007ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eaa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007eae:	f023 0303 	bic.w	r3, r3, #3
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	6811      	ldr	r1, [r2, #0]
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	6852      	ldr	r2, [r2, #4]
 8007eba:	3a01      	subs	r2, #1
 8007ebc:	0212      	lsls	r2, r2, #8
 8007ebe:	430a      	orrs	r2, r1
 8007ec0:	4934      	ldr	r1, [pc, #208]	; (8007f94 <RCCEx_PLL3_Config+0x128>)
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	630b      	str	r3, [r1, #48]	; 0x30
 8007ec6:	4b33      	ldr	r3, [pc, #204]	; (8007f94 <RCCEx_PLL3_Config+0x128>)
 8007ec8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007eca:	4b33      	ldr	r3, [pc, #204]	; (8007f98 <RCCEx_PLL3_Config+0x12c>)
 8007ecc:	4013      	ands	r3, r2
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	6892      	ldr	r2, [r2, #8]
 8007ed2:	3a01      	subs	r2, #1
 8007ed4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	68d2      	ldr	r2, [r2, #12]
 8007edc:	3a01      	subs	r2, #1
 8007ede:	0252      	lsls	r2, r2, #9
 8007ee0:	b292      	uxth	r2, r2
 8007ee2:	4311      	orrs	r1, r2
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	6912      	ldr	r2, [r2, #16]
 8007ee8:	3a01      	subs	r2, #1
 8007eea:	0412      	lsls	r2, r2, #16
 8007eec:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007ef0:	4311      	orrs	r1, r2
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	6952      	ldr	r2, [r2, #20]
 8007ef6:	3a01      	subs	r2, #1
 8007ef8:	0612      	lsls	r2, r2, #24
 8007efa:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007efe:	430a      	orrs	r2, r1
 8007f00:	4924      	ldr	r1, [pc, #144]	; (8007f94 <RCCEx_PLL3_Config+0x128>)
 8007f02:	4313      	orrs	r3, r2
 8007f04:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8007f06:	4b23      	ldr	r3, [pc, #140]	; (8007f94 <RCCEx_PLL3_Config+0x128>)
 8007f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f0a:	f023 020c 	bic.w	r2, r3, #12
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	699b      	ldr	r3, [r3, #24]
 8007f12:	4920      	ldr	r1, [pc, #128]	; (8007f94 <RCCEx_PLL3_Config+0x128>)
 8007f14:	4313      	orrs	r3, r2
 8007f16:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007f18:	4b1e      	ldr	r3, [pc, #120]	; (8007f94 <RCCEx_PLL3_Config+0x128>)
 8007f1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6a1b      	ldr	r3, [r3, #32]
 8007f20:	491c      	ldr	r1, [pc, #112]	; (8007f94 <RCCEx_PLL3_Config+0x128>)
 8007f22:	4313      	orrs	r3, r2
 8007f24:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8007f26:	4b1b      	ldr	r3, [pc, #108]	; (8007f94 <RCCEx_PLL3_Config+0x128>)
 8007f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f2a:	4a1a      	ldr	r2, [pc, #104]	; (8007f94 <RCCEx_PLL3_Config+0x128>)
 8007f2c:	f023 0310 	bic.w	r3, r3, #16
 8007f30:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007f32:	4b18      	ldr	r3, [pc, #96]	; (8007f94 <RCCEx_PLL3_Config+0x128>)
 8007f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f3a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	69d2      	ldr	r2, [r2, #28]
 8007f42:	00d2      	lsls	r2, r2, #3
 8007f44:	4913      	ldr	r1, [pc, #76]	; (8007f94 <RCCEx_PLL3_Config+0x128>)
 8007f46:	4313      	orrs	r3, r2
 8007f48:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8007f4a:	4b12      	ldr	r3, [pc, #72]	; (8007f94 <RCCEx_PLL3_Config+0x128>)
 8007f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f4e:	4a11      	ldr	r2, [pc, #68]	; (8007f94 <RCCEx_PLL3_Config+0x128>)
 8007f50:	f043 0310 	orr.w	r3, r3, #16
 8007f54:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8007f56:	4b0f      	ldr	r3, [pc, #60]	; (8007f94 <RCCEx_PLL3_Config+0x128>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a0e      	ldr	r2, [pc, #56]	; (8007f94 <RCCEx_PLL3_Config+0x128>)
 8007f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f60:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007f62:	f7f9 fd9f 	bl	8001aa4 <HAL_GetTick>
 8007f66:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007f68:	e008      	b.n	8007f7c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007f6a:	f7f9 fd9b 	bl	8001aa4 <HAL_GetTick>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	1ad3      	subs	r3, r2, r3
 8007f74:	2b02      	cmp	r3, #2
 8007f76:	d901      	bls.n	8007f7c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007f78:	2303      	movs	r3, #3
 8007f7a:	e006      	b.n	8007f8a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007f7c:	4b05      	ldr	r3, [pc, #20]	; (8007f94 <RCCEx_PLL3_Config+0x128>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d0f0      	beq.n	8007f6a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007f88:	2300      	movs	r3, #0
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3710      	adds	r7, #16
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop
 8007f94:	46020c00 	.word	0x46020c00
 8007f98:	80800000 	.word	0x80800000

08007f9c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d101      	bne.n	8007fae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007faa:	2301      	movs	r3, #1
 8007fac:	e0fb      	b.n	80081a6 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a7f      	ldr	r2, [pc, #508]	; (80081b0 <HAL_SPI_Init+0x214>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d004      	beq.n	8007fc2 <HAL_SPI_Init+0x26>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a7d      	ldr	r2, [pc, #500]	; (80081b4 <HAL_SPI_Init+0x218>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	e000      	b.n	8007fc4 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8007fc2:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a78      	ldr	r2, [pc, #480]	; (80081b0 <HAL_SPI_Init+0x214>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d004      	beq.n	8007fde <HAL_SPI_Init+0x42>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a76      	ldr	r2, [pc, #472]	; (80081b4 <HAL_SPI_Init+0x218>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d105      	bne.n	8007fea <HAL_SPI_Init+0x4e>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	68db      	ldr	r3, [r3, #12]
 8007fe2:	2b0f      	cmp	r3, #15
 8007fe4:	d901      	bls.n	8007fea <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	e0dd      	b.n	80081a6 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 f8ec 	bl	80081c8 <SPI_GetPacketSize>
 8007ff0:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a6e      	ldr	r2, [pc, #440]	; (80081b0 <HAL_SPI_Init+0x214>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d004      	beq.n	8008006 <HAL_SPI_Init+0x6a>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a6c      	ldr	r2, [pc, #432]	; (80081b4 <HAL_SPI_Init+0x218>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d102      	bne.n	800800c <HAL_SPI_Init+0x70>
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2b08      	cmp	r3, #8
 800800a:	d816      	bhi.n	800803a <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008010:	4a69      	ldr	r2, [pc, #420]	; (80081b8 <HAL_SPI_Init+0x21c>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d00e      	beq.n	8008034 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a68      	ldr	r2, [pc, #416]	; (80081bc <HAL_SPI_Init+0x220>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d009      	beq.n	8008034 <HAL_SPI_Init+0x98>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a66      	ldr	r2, [pc, #408]	; (80081c0 <HAL_SPI_Init+0x224>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d004      	beq.n	8008034 <HAL_SPI_Init+0x98>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a65      	ldr	r2, [pc, #404]	; (80081c4 <HAL_SPI_Init+0x228>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d104      	bne.n	800803e <HAL_SPI_Init+0xa2>
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2b10      	cmp	r3, #16
 8008038:	d901      	bls.n	800803e <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	e0b3      	b.n	80081a6 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8008044:	b2db      	uxtb	r3, r3
 8008046:	2b00      	cmp	r3, #0
 8008048:	d106      	bne.n	8008058 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f7f9 fa54 	bl	8001500 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2202      	movs	r2, #2
 800805c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f022 0201 	bic.w	r2, r2, #1
 800806e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800807a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	699b      	ldr	r3, [r3, #24]
 8008080:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008084:	d119      	bne.n	80080ba <HAL_SPI_Init+0x11e>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800808e:	d103      	bne.n	8008098 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008094:	2b00      	cmp	r3, #0
 8008096:	d008      	beq.n	80080aa <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800809c:	2b00      	cmp	r3, #0
 800809e:	d10c      	bne.n	80080ba <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80080a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080a8:	d107      	bne.n	80080ba <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80080b8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d00f      	beq.n	80080e6 <HAL_SPI_Init+0x14a>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	2b06      	cmp	r3, #6
 80080cc:	d90b      	bls.n	80080e6 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	430a      	orrs	r2, r1
 80080e2:	601a      	str	r2, [r3, #0]
 80080e4:	e007      	b.n	80080f6 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80080f4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	69da      	ldr	r2, [r3, #28]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080fe:	431a      	orrs	r2, r3
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	431a      	orrs	r2, r3
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008108:	ea42 0103 	orr.w	r1, r2, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	68da      	ldr	r2, [r3, #12]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	430a      	orrs	r2, r1
 8008116:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008120:	431a      	orrs	r2, r3
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008126:	431a      	orrs	r2, r3
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	699b      	ldr	r3, [r3, #24]
 800812c:	431a      	orrs	r2, r3
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	691b      	ldr	r3, [r3, #16]
 8008132:	431a      	orrs	r2, r3
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	695b      	ldr	r3, [r3, #20]
 8008138:	431a      	orrs	r2, r3
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a1b      	ldr	r3, [r3, #32]
 800813e:	431a      	orrs	r2, r3
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	431a      	orrs	r2, r3
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800814a:	431a      	orrs	r2, r3
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	431a      	orrs	r2, r3
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008156:	431a      	orrs	r2, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800815c:	431a      	orrs	r2, r3
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008162:	ea42 0103 	orr.w	r1, r2, r3
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	430a      	orrs	r2, r1
 8008170:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00a      	beq.n	8008194 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	430a      	orrs	r2, r1
 8008192:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2200      	movs	r2, #0
 8008198:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop
 80081b0:	46002000 	.word	0x46002000
 80081b4:	56002000 	.word	0x56002000
 80081b8:	40013000 	.word	0x40013000
 80081bc:	50013000 	.word	0x50013000
 80081c0:	40003800 	.word	0x40003800
 80081c4:	50003800 	.word	0x50003800

080081c8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b085      	sub	sp, #20
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081d4:	095b      	lsrs	r3, r3, #5
 80081d6:	3301      	adds	r3, #1
 80081d8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	68db      	ldr	r3, [r3, #12]
 80081de:	3301      	adds	r3, #1
 80081e0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	3307      	adds	r3, #7
 80081e6:	08db      	lsrs	r3, r3, #3
 80081e8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	68fa      	ldr	r2, [r7, #12]
 80081ee:	fb02 f303 	mul.w	r3, r2, r3
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3714      	adds	r7, #20
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr

080081fe <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 80081fe:	b480      	push	{r7}
 8008200:	b083      	sub	sp, #12
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
 8008206:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800820e:	b2db      	uxtb	r3, r3
 8008210:	2b01      	cmp	r3, #1
 8008212:	d12e      	bne.n	8008272 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800821a:	2b01      	cmp	r3, #1
 800821c:	d101      	bne.n	8008222 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800821e:	2302      	movs	r3, #2
 8008220:	e028      	b.n	8008274 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2201      	movs	r2, #1
 8008226:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2202      	movs	r2, #2
 800822e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f022 0201 	bic.w	r2, r2, #1
 8008240:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800824e:	ea42 0103 	orr.w	r1, r2, r3
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	689a      	ldr	r2, [r3, #8]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	430a      	orrs	r2, r1
 800825c:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2201      	movs	r2, #1
 8008262:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800826e:	2300      	movs	r3, #0
 8008270:	e000      	b.n	8008274 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
  }
}
 8008274:	4618      	mov	r0, r3
 8008276:	370c      	adds	r7, #12
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr

08008280 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d101      	bne.n	8008292 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	e049      	b.n	8008326 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008298:	b2db      	uxtb	r3, r3
 800829a:	2b00      	cmp	r3, #0
 800829c:	d106      	bne.n	80082ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f7f9 f9ba 	bl	8001620 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2202      	movs	r2, #2
 80082b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	3304      	adds	r3, #4
 80082bc:	4619      	mov	r1, r3
 80082be:	4610      	mov	r0, r2
 80082c0:	f000 fdce 	bl	8008e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2201      	movs	r2, #1
 80082c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2201      	movs	r2, #1
 80082f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2201      	movs	r2, #1
 8008308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3708      	adds	r7, #8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b082      	sub	sp, #8
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d101      	bne.n	8008340 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800833c:	2301      	movs	r3, #1
 800833e:	e049      	b.n	80083d4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008346:	b2db      	uxtb	r3, r3
 8008348:	2b00      	cmp	r3, #0
 800834a:	d106      	bne.n	800835a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 f841 	bl	80083dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2202      	movs	r2, #2
 800835e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	3304      	adds	r3, #4
 800836a:	4619      	mov	r1, r3
 800836c:	4610      	mov	r0, r2
 800836e:	f000 fd77 	bl	8008e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2201      	movs	r2, #1
 8008376:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2201      	movs	r2, #1
 800837e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2201      	movs	r2, #1
 8008386:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2201      	movs	r2, #1
 800838e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2201      	movs	r2, #1
 8008396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2201      	movs	r2, #1
 800839e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2201      	movs	r2, #1
 80083a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2201      	movs	r2, #1
 80083ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2201      	movs	r2, #1
 80083b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2201      	movs	r2, #1
 80083be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2201      	movs	r2, #1
 80083c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2201      	movs	r2, #1
 80083ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80083d2:	2300      	movs	r3, #0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3708      	adds	r7, #8
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80083e4:	bf00      	nop
 80083e6:	370c      	adds	r7, #12
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr

080083f0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80083fa:	2300      	movs	r3, #0
 80083fc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d109      	bne.n	8008418 <HAL_TIM_PWM_Start_IT+0x28>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800840a:	b2db      	uxtb	r3, r3
 800840c:	2b01      	cmp	r3, #1
 800840e:	bf14      	ite	ne
 8008410:	2301      	movne	r3, #1
 8008412:	2300      	moveq	r3, #0
 8008414:	b2db      	uxtb	r3, r3
 8008416:	e03c      	b.n	8008492 <HAL_TIM_PWM_Start_IT+0xa2>
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	2b04      	cmp	r3, #4
 800841c:	d109      	bne.n	8008432 <HAL_TIM_PWM_Start_IT+0x42>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008424:	b2db      	uxtb	r3, r3
 8008426:	2b01      	cmp	r3, #1
 8008428:	bf14      	ite	ne
 800842a:	2301      	movne	r3, #1
 800842c:	2300      	moveq	r3, #0
 800842e:	b2db      	uxtb	r3, r3
 8008430:	e02f      	b.n	8008492 <HAL_TIM_PWM_Start_IT+0xa2>
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	2b08      	cmp	r3, #8
 8008436:	d109      	bne.n	800844c <HAL_TIM_PWM_Start_IT+0x5c>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800843e:	b2db      	uxtb	r3, r3
 8008440:	2b01      	cmp	r3, #1
 8008442:	bf14      	ite	ne
 8008444:	2301      	movne	r3, #1
 8008446:	2300      	moveq	r3, #0
 8008448:	b2db      	uxtb	r3, r3
 800844a:	e022      	b.n	8008492 <HAL_TIM_PWM_Start_IT+0xa2>
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	2b0c      	cmp	r3, #12
 8008450:	d109      	bne.n	8008466 <HAL_TIM_PWM_Start_IT+0x76>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008458:	b2db      	uxtb	r3, r3
 800845a:	2b01      	cmp	r3, #1
 800845c:	bf14      	ite	ne
 800845e:	2301      	movne	r3, #1
 8008460:	2300      	moveq	r3, #0
 8008462:	b2db      	uxtb	r3, r3
 8008464:	e015      	b.n	8008492 <HAL_TIM_PWM_Start_IT+0xa2>
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	2b10      	cmp	r3, #16
 800846a:	d109      	bne.n	8008480 <HAL_TIM_PWM_Start_IT+0x90>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008472:	b2db      	uxtb	r3, r3
 8008474:	2b01      	cmp	r3, #1
 8008476:	bf14      	ite	ne
 8008478:	2301      	movne	r3, #1
 800847a:	2300      	moveq	r3, #0
 800847c:	b2db      	uxtb	r3, r3
 800847e:	e008      	b.n	8008492 <HAL_TIM_PWM_Start_IT+0xa2>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008486:	b2db      	uxtb	r3, r3
 8008488:	2b01      	cmp	r3, #1
 800848a:	bf14      	ite	ne
 800848c:	2301      	movne	r3, #1
 800848e:	2300      	moveq	r3, #0
 8008490:	b2db      	uxtb	r3, r3
 8008492:	2b00      	cmp	r3, #0
 8008494:	d001      	beq.n	800849a <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	e124      	b.n	80086e4 <HAL_TIM_PWM_Start_IT+0x2f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d104      	bne.n	80084aa <HAL_TIM_PWM_Start_IT+0xba>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2202      	movs	r2, #2
 80084a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80084a8:	e023      	b.n	80084f2 <HAL_TIM_PWM_Start_IT+0x102>
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	2b04      	cmp	r3, #4
 80084ae:	d104      	bne.n	80084ba <HAL_TIM_PWM_Start_IT+0xca>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2202      	movs	r2, #2
 80084b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80084b8:	e01b      	b.n	80084f2 <HAL_TIM_PWM_Start_IT+0x102>
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	2b08      	cmp	r3, #8
 80084be:	d104      	bne.n	80084ca <HAL_TIM_PWM_Start_IT+0xda>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2202      	movs	r2, #2
 80084c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80084c8:	e013      	b.n	80084f2 <HAL_TIM_PWM_Start_IT+0x102>
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	2b0c      	cmp	r3, #12
 80084ce:	d104      	bne.n	80084da <HAL_TIM_PWM_Start_IT+0xea>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2202      	movs	r2, #2
 80084d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80084d8:	e00b      	b.n	80084f2 <HAL_TIM_PWM_Start_IT+0x102>
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	2b10      	cmp	r3, #16
 80084de:	d104      	bne.n	80084ea <HAL_TIM_PWM_Start_IT+0xfa>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2202      	movs	r2, #2
 80084e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80084e8:	e003      	b.n	80084f2 <HAL_TIM_PWM_Start_IT+0x102>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2202      	movs	r2, #2
 80084ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	2b0c      	cmp	r3, #12
 80084f6:	d841      	bhi.n	800857c <HAL_TIM_PWM_Start_IT+0x18c>
 80084f8:	a201      	add	r2, pc, #4	; (adr r2, 8008500 <HAL_TIM_PWM_Start_IT+0x110>)
 80084fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084fe:	bf00      	nop
 8008500:	08008535 	.word	0x08008535
 8008504:	0800857d 	.word	0x0800857d
 8008508:	0800857d 	.word	0x0800857d
 800850c:	0800857d 	.word	0x0800857d
 8008510:	08008547 	.word	0x08008547
 8008514:	0800857d 	.word	0x0800857d
 8008518:	0800857d 	.word	0x0800857d
 800851c:	0800857d 	.word	0x0800857d
 8008520:	08008559 	.word	0x08008559
 8008524:	0800857d 	.word	0x0800857d
 8008528:	0800857d 	.word	0x0800857d
 800852c:	0800857d 	.word	0x0800857d
 8008530:	0800856b 	.word	0x0800856b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	68da      	ldr	r2, [r3, #12]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f042 0202 	orr.w	r2, r2, #2
 8008542:	60da      	str	r2, [r3, #12]
      break;
 8008544:	e01d      	b.n	8008582 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	68da      	ldr	r2, [r3, #12]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f042 0204 	orr.w	r2, r2, #4
 8008554:	60da      	str	r2, [r3, #12]
      break;
 8008556:	e014      	b.n	8008582 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	68da      	ldr	r2, [r3, #12]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f042 0208 	orr.w	r2, r2, #8
 8008566:	60da      	str	r2, [r3, #12]
      break;
 8008568:	e00b      	b.n	8008582 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	68da      	ldr	r2, [r3, #12]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f042 0210 	orr.w	r2, r2, #16
 8008578:	60da      	str	r2, [r3, #12]
      break;
 800857a:	e002      	b.n	8008582 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800857c:	2301      	movs	r3, #1
 800857e:	73fb      	strb	r3, [r7, #15]
      break;
 8008580:	bf00      	nop
  }

  if (status == HAL_OK)
 8008582:	7bfb      	ldrb	r3, [r7, #15]
 8008584:	2b00      	cmp	r3, #0
 8008586:	f040 80ac 	bne.w	80086e2 <HAL_TIM_PWM_Start_IT+0x2f2>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2201      	movs	r2, #1
 8008590:	6839      	ldr	r1, [r7, #0]
 8008592:	4618      	mov	r0, r3
 8008594:	f001 f9d0 	bl	8009938 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a53      	ldr	r2, [pc, #332]	; (80086ec <HAL_TIM_PWM_Start_IT+0x2fc>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d02c      	beq.n	80085fc <HAL_TIM_PWM_Start_IT+0x20c>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a52      	ldr	r2, [pc, #328]	; (80086f0 <HAL_TIM_PWM_Start_IT+0x300>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d027      	beq.n	80085fc <HAL_TIM_PWM_Start_IT+0x20c>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a50      	ldr	r2, [pc, #320]	; (80086f4 <HAL_TIM_PWM_Start_IT+0x304>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d022      	beq.n	80085fc <HAL_TIM_PWM_Start_IT+0x20c>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a4f      	ldr	r2, [pc, #316]	; (80086f8 <HAL_TIM_PWM_Start_IT+0x308>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d01d      	beq.n	80085fc <HAL_TIM_PWM_Start_IT+0x20c>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a4d      	ldr	r2, [pc, #308]	; (80086fc <HAL_TIM_PWM_Start_IT+0x30c>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d018      	beq.n	80085fc <HAL_TIM_PWM_Start_IT+0x20c>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a4c      	ldr	r2, [pc, #304]	; (8008700 <HAL_TIM_PWM_Start_IT+0x310>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d013      	beq.n	80085fc <HAL_TIM_PWM_Start_IT+0x20c>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a4a      	ldr	r2, [pc, #296]	; (8008704 <HAL_TIM_PWM_Start_IT+0x314>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d00e      	beq.n	80085fc <HAL_TIM_PWM_Start_IT+0x20c>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a49      	ldr	r2, [pc, #292]	; (8008708 <HAL_TIM_PWM_Start_IT+0x318>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d009      	beq.n	80085fc <HAL_TIM_PWM_Start_IT+0x20c>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a47      	ldr	r2, [pc, #284]	; (800870c <HAL_TIM_PWM_Start_IT+0x31c>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d004      	beq.n	80085fc <HAL_TIM_PWM_Start_IT+0x20c>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a46      	ldr	r2, [pc, #280]	; (8008710 <HAL_TIM_PWM_Start_IT+0x320>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d101      	bne.n	8008600 <HAL_TIM_PWM_Start_IT+0x210>
 80085fc:	2301      	movs	r3, #1
 80085fe:	e000      	b.n	8008602 <HAL_TIM_PWM_Start_IT+0x212>
 8008600:	2300      	movs	r3, #0
 8008602:	2b00      	cmp	r3, #0
 8008604:	d007      	beq.n	8008616 <HAL_TIM_PWM_Start_IT+0x226>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008614:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a34      	ldr	r2, [pc, #208]	; (80086ec <HAL_TIM_PWM_Start_IT+0x2fc>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d040      	beq.n	80086a2 <HAL_TIM_PWM_Start_IT+0x2b2>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a32      	ldr	r2, [pc, #200]	; (80086f0 <HAL_TIM_PWM_Start_IT+0x300>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d03b      	beq.n	80086a2 <HAL_TIM_PWM_Start_IT+0x2b2>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008632:	d036      	beq.n	80086a2 <HAL_TIM_PWM_Start_IT+0x2b2>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800863c:	d031      	beq.n	80086a2 <HAL_TIM_PWM_Start_IT+0x2b2>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a34      	ldr	r2, [pc, #208]	; (8008714 <HAL_TIM_PWM_Start_IT+0x324>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d02c      	beq.n	80086a2 <HAL_TIM_PWM_Start_IT+0x2b2>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a32      	ldr	r2, [pc, #200]	; (8008718 <HAL_TIM_PWM_Start_IT+0x328>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d027      	beq.n	80086a2 <HAL_TIM_PWM_Start_IT+0x2b2>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a31      	ldr	r2, [pc, #196]	; (800871c <HAL_TIM_PWM_Start_IT+0x32c>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d022      	beq.n	80086a2 <HAL_TIM_PWM_Start_IT+0x2b2>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a2f      	ldr	r2, [pc, #188]	; (8008720 <HAL_TIM_PWM_Start_IT+0x330>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d01d      	beq.n	80086a2 <HAL_TIM_PWM_Start_IT+0x2b2>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a2e      	ldr	r2, [pc, #184]	; (8008724 <HAL_TIM_PWM_Start_IT+0x334>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d018      	beq.n	80086a2 <HAL_TIM_PWM_Start_IT+0x2b2>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a2c      	ldr	r2, [pc, #176]	; (8008728 <HAL_TIM_PWM_Start_IT+0x338>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d013      	beq.n	80086a2 <HAL_TIM_PWM_Start_IT+0x2b2>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a1d      	ldr	r2, [pc, #116]	; (80086f4 <HAL_TIM_PWM_Start_IT+0x304>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d00e      	beq.n	80086a2 <HAL_TIM_PWM_Start_IT+0x2b2>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a1b      	ldr	r2, [pc, #108]	; (80086f8 <HAL_TIM_PWM_Start_IT+0x308>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d009      	beq.n	80086a2 <HAL_TIM_PWM_Start_IT+0x2b2>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4a1a      	ldr	r2, [pc, #104]	; (80086fc <HAL_TIM_PWM_Start_IT+0x30c>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d004      	beq.n	80086a2 <HAL_TIM_PWM_Start_IT+0x2b2>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a18      	ldr	r2, [pc, #96]	; (8008700 <HAL_TIM_PWM_Start_IT+0x310>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d115      	bne.n	80086ce <HAL_TIM_PWM_Start_IT+0x2de>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	689a      	ldr	r2, [r3, #8]
 80086a8:	4b20      	ldr	r3, [pc, #128]	; (800872c <HAL_TIM_PWM_Start_IT+0x33c>)
 80086aa:	4013      	ands	r3, r2
 80086ac:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	2b06      	cmp	r3, #6
 80086b2:	d015      	beq.n	80086e0 <HAL_TIM_PWM_Start_IT+0x2f0>
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086ba:	d011      	beq.n	80086e0 <HAL_TIM_PWM_Start_IT+0x2f0>
      {
        __HAL_TIM_ENABLE(htim);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f042 0201 	orr.w	r2, r2, #1
 80086ca:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086cc:	e008      	b.n	80086e0 <HAL_TIM_PWM_Start_IT+0x2f0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f042 0201 	orr.w	r2, r2, #1
 80086dc:	601a      	str	r2, [r3, #0]
 80086de:	e000      	b.n	80086e2 <HAL_TIM_PWM_Start_IT+0x2f2>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086e0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80086e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3710      	adds	r7, #16
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}
 80086ec:	40012c00 	.word	0x40012c00
 80086f0:	50012c00 	.word	0x50012c00
 80086f4:	40013400 	.word	0x40013400
 80086f8:	50013400 	.word	0x50013400
 80086fc:	40014000 	.word	0x40014000
 8008700:	50014000 	.word	0x50014000
 8008704:	40014400 	.word	0x40014400
 8008708:	50014400 	.word	0x50014400
 800870c:	40014800 	.word	0x40014800
 8008710:	50014800 	.word	0x50014800
 8008714:	40000400 	.word	0x40000400
 8008718:	50000400 	.word	0x50000400
 800871c:	40000800 	.word	0x40000800
 8008720:	50000800 	.word	0x50000800
 8008724:	40000c00 	.word	0x40000c00
 8008728:	50000c00 	.word	0x50000c00
 800872c:	00010007 	.word	0x00010007

08008730 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	68db      	ldr	r3, [r3, #12]
 800873e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	691b      	ldr	r3, [r3, #16]
 8008746:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	f003 0302 	and.w	r3, r3, #2
 800874e:	2b00      	cmp	r3, #0
 8008750:	d020      	beq.n	8008794 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f003 0302 	and.w	r3, r3, #2
 8008758:	2b00      	cmp	r3, #0
 800875a:	d01b      	beq.n	8008794 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f06f 0202 	mvn.w	r2, #2
 8008764:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2201      	movs	r2, #1
 800876a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	699b      	ldr	r3, [r3, #24]
 8008772:	f003 0303 	and.w	r3, r3, #3
 8008776:	2b00      	cmp	r3, #0
 8008778:	d003      	beq.n	8008782 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 fb52 	bl	8008e24 <HAL_TIM_IC_CaptureCallback>
 8008780:	e005      	b.n	800878e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 fb44 	bl	8008e10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 fb55 	bl	8008e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2200      	movs	r2, #0
 8008792:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	f003 0304 	and.w	r3, r3, #4
 800879a:	2b00      	cmp	r3, #0
 800879c:	d020      	beq.n	80087e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f003 0304 	and.w	r3, r3, #4
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d01b      	beq.n	80087e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f06f 0204 	mvn.w	r2, #4
 80087b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2202      	movs	r2, #2
 80087b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	699b      	ldr	r3, [r3, #24]
 80087be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d003      	beq.n	80087ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 fb2c 	bl	8008e24 <HAL_TIM_IC_CaptureCallback>
 80087cc:	e005      	b.n	80087da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 fb1e 	bl	8008e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 fb2f 	bl	8008e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2200      	movs	r2, #0
 80087de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	f003 0308 	and.w	r3, r3, #8
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d020      	beq.n	800882c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f003 0308 	and.w	r3, r3, #8
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d01b      	beq.n	800882c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f06f 0208 	mvn.w	r2, #8
 80087fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2204      	movs	r2, #4
 8008802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	69db      	ldr	r3, [r3, #28]
 800880a:	f003 0303 	and.w	r3, r3, #3
 800880e:	2b00      	cmp	r3, #0
 8008810:	d003      	beq.n	800881a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 fb06 	bl	8008e24 <HAL_TIM_IC_CaptureCallback>
 8008818:	e005      	b.n	8008826 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 faf8 	bl	8008e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 fb09 	bl	8008e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2200      	movs	r2, #0
 800882a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	f003 0310 	and.w	r3, r3, #16
 8008832:	2b00      	cmp	r3, #0
 8008834:	d020      	beq.n	8008878 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f003 0310 	and.w	r3, r3, #16
 800883c:	2b00      	cmp	r3, #0
 800883e:	d01b      	beq.n	8008878 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f06f 0210 	mvn.w	r2, #16
 8008848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2208      	movs	r2, #8
 800884e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	69db      	ldr	r3, [r3, #28]
 8008856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800885a:	2b00      	cmp	r3, #0
 800885c:	d003      	beq.n	8008866 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 fae0 	bl	8008e24 <HAL_TIM_IC_CaptureCallback>
 8008864:	e005      	b.n	8008872 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 fad2 	bl	8008e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 fae3 	bl	8008e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	f003 0301 	and.w	r3, r3, #1
 800887e:	2b00      	cmp	r3, #0
 8008880:	d00c      	beq.n	800889c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	f003 0301 	and.w	r3, r3, #1
 8008888:	2b00      	cmp	r3, #0
 800888a:	d007      	beq.n	800889c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f06f 0201 	mvn.w	r2, #1
 8008894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 fab0 	bl	8008dfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d104      	bne.n	80088b0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d00c      	beq.n	80088ca <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d007      	beq.n	80088ca <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80088c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f001 f929 	bl	8009b1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d00c      	beq.n	80088ee <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d007      	beq.n	80088ee <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80088e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f001 f921 	bl	8009b30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d00c      	beq.n	8008912 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d007      	beq.n	8008912 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800890a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 fa9d 	bl	8008e4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	f003 0320 	and.w	r3, r3, #32
 8008918:	2b00      	cmp	r3, #0
 800891a:	d00c      	beq.n	8008936 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f003 0320 	and.w	r3, r3, #32
 8008922:	2b00      	cmp	r3, #0
 8008924:	d007      	beq.n	8008936 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f06f 0220 	mvn.w	r2, #32
 800892e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f001 f8e9 	bl	8009b08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800893c:	2b00      	cmp	r3, #0
 800893e:	d00c      	beq.n	800895a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008946:	2b00      	cmp	r3, #0
 8008948:	d007      	beq.n	800895a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8008952:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f001 f8f5 	bl	8009b44 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008960:	2b00      	cmp	r3, #0
 8008962:	d00c      	beq.n	800897e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800896a:	2b00      	cmp	r3, #0
 800896c:	d007      	beq.n	800897e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8008976:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f001 f8ed 	bl	8009b58 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008984:	2b00      	cmp	r3, #0
 8008986:	d00c      	beq.n	80089a2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800898e:	2b00      	cmp	r3, #0
 8008990:	d007      	beq.n	80089a2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800899a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f001 f8e5 	bl	8009b6c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d00c      	beq.n	80089c6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d007      	beq.n	80089c6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80089be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f001 f8dd 	bl	8009b80 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80089c6:	bf00      	nop
 80089c8:	3710      	adds	r7, #16
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
	...

080089d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b086      	sub	sp, #24
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	60f8      	str	r0, [r7, #12]
 80089d8:	60b9      	str	r1, [r7, #8]
 80089da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80089dc:	2300      	movs	r3, #0
 80089de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d101      	bne.n	80089ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80089ea:	2302      	movs	r3, #2
 80089ec:	e0ff      	b.n	8008bee <HAL_TIM_PWM_ConfigChannel+0x21e>
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2201      	movs	r2, #1
 80089f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2b14      	cmp	r3, #20
 80089fa:	f200 80f0 	bhi.w	8008bde <HAL_TIM_PWM_ConfigChannel+0x20e>
 80089fe:	a201      	add	r2, pc, #4	; (adr r2, 8008a04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a04:	08008a59 	.word	0x08008a59
 8008a08:	08008bdf 	.word	0x08008bdf
 8008a0c:	08008bdf 	.word	0x08008bdf
 8008a10:	08008bdf 	.word	0x08008bdf
 8008a14:	08008a99 	.word	0x08008a99
 8008a18:	08008bdf 	.word	0x08008bdf
 8008a1c:	08008bdf 	.word	0x08008bdf
 8008a20:	08008bdf 	.word	0x08008bdf
 8008a24:	08008adb 	.word	0x08008adb
 8008a28:	08008bdf 	.word	0x08008bdf
 8008a2c:	08008bdf 	.word	0x08008bdf
 8008a30:	08008bdf 	.word	0x08008bdf
 8008a34:	08008b1b 	.word	0x08008b1b
 8008a38:	08008bdf 	.word	0x08008bdf
 8008a3c:	08008bdf 	.word	0x08008bdf
 8008a40:	08008bdf 	.word	0x08008bdf
 8008a44:	08008b5d 	.word	0x08008b5d
 8008a48:	08008bdf 	.word	0x08008bdf
 8008a4c:	08008bdf 	.word	0x08008bdf
 8008a50:	08008bdf 	.word	0x08008bdf
 8008a54:	08008b9d 	.word	0x08008b9d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	68b9      	ldr	r1, [r7, #8]
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f000 faf8 	bl	8009054 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	699a      	ldr	r2, [r3, #24]
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f042 0208 	orr.w	r2, r2, #8
 8008a72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	699a      	ldr	r2, [r3, #24]
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f022 0204 	bic.w	r2, r2, #4
 8008a82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	6999      	ldr	r1, [r3, #24]
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	691a      	ldr	r2, [r3, #16]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	430a      	orrs	r2, r1
 8008a94:	619a      	str	r2, [r3, #24]
      break;
 8008a96:	e0a5      	b.n	8008be4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	68b9      	ldr	r1, [r7, #8]
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f000 fb9a 	bl	80091d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	699a      	ldr	r2, [r3, #24]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ab2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	699a      	ldr	r2, [r3, #24]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ac2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	6999      	ldr	r1, [r3, #24]
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	691b      	ldr	r3, [r3, #16]
 8008ace:	021a      	lsls	r2, r3, #8
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	430a      	orrs	r2, r1
 8008ad6:	619a      	str	r2, [r3, #24]
      break;
 8008ad8:	e084      	b.n	8008be4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	68b9      	ldr	r1, [r7, #8]
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f000 fc29 	bl	8009338 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	69da      	ldr	r2, [r3, #28]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f042 0208 	orr.w	r2, r2, #8
 8008af4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	69da      	ldr	r2, [r3, #28]
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f022 0204 	bic.w	r2, r2, #4
 8008b04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	69d9      	ldr	r1, [r3, #28]
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	691a      	ldr	r2, [r3, #16]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	430a      	orrs	r2, r1
 8008b16:	61da      	str	r2, [r3, #28]
      break;
 8008b18:	e064      	b.n	8008be4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	68b9      	ldr	r1, [r7, #8]
 8008b20:	4618      	mov	r0, r3
 8008b22:	f000 fcb7 	bl	8009494 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	69da      	ldr	r2, [r3, #28]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	69da      	ldr	r2, [r3, #28]
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	69d9      	ldr	r1, [r3, #28]
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	691b      	ldr	r3, [r3, #16]
 8008b50:	021a      	lsls	r2, r3, #8
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	430a      	orrs	r2, r1
 8008b58:	61da      	str	r2, [r3, #28]
      break;
 8008b5a:	e043      	b.n	8008be4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	68b9      	ldr	r1, [r7, #8]
 8008b62:	4618      	mov	r0, r3
 8008b64:	f000 fd46 	bl	80095f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f042 0208 	orr.w	r2, r2, #8
 8008b76:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f022 0204 	bic.w	r2, r2, #4
 8008b86:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	691a      	ldr	r2, [r3, #16]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	430a      	orrs	r2, r1
 8008b98:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008b9a:	e023      	b.n	8008be4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	68b9      	ldr	r1, [r7, #8]
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f000 fda8 	bl	80096f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008bb6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008bc6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	691b      	ldr	r3, [r3, #16]
 8008bd2:	021a      	lsls	r2, r3, #8
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	430a      	orrs	r2, r1
 8008bda:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008bdc:	e002      	b.n	8008be4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	75fb      	strb	r3, [r7, #23]
      break;
 8008be2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2200      	movs	r2, #0
 8008be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008bec:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3718      	adds	r7, #24
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop

08008bf8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008c02:	2300      	movs	r3, #0
 8008c04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d101      	bne.n	8008c14 <HAL_TIM_ConfigClockSource+0x1c>
 8008c10:	2302      	movs	r3, #2
 8008c12:	e0e6      	b.n	8008de2 <HAL_TIM_ConfigClockSource+0x1ea>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2201      	movs	r2, #1
 8008c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2202      	movs	r2, #2
 8008c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8008c32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008c36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	68ba      	ldr	r2, [r7, #8]
 8008c46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a67      	ldr	r2, [pc, #412]	; (8008dec <HAL_TIM_ConfigClockSource+0x1f4>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	f000 80b1 	beq.w	8008db6 <HAL_TIM_ConfigClockSource+0x1be>
 8008c54:	4a65      	ldr	r2, [pc, #404]	; (8008dec <HAL_TIM_ConfigClockSource+0x1f4>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	f200 80b6 	bhi.w	8008dc8 <HAL_TIM_ConfigClockSource+0x1d0>
 8008c5c:	4a64      	ldr	r2, [pc, #400]	; (8008df0 <HAL_TIM_ConfigClockSource+0x1f8>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	f000 80a9 	beq.w	8008db6 <HAL_TIM_ConfigClockSource+0x1be>
 8008c64:	4a62      	ldr	r2, [pc, #392]	; (8008df0 <HAL_TIM_ConfigClockSource+0x1f8>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	f200 80ae 	bhi.w	8008dc8 <HAL_TIM_ConfigClockSource+0x1d0>
 8008c6c:	4a61      	ldr	r2, [pc, #388]	; (8008df4 <HAL_TIM_ConfigClockSource+0x1fc>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	f000 80a1 	beq.w	8008db6 <HAL_TIM_ConfigClockSource+0x1be>
 8008c74:	4a5f      	ldr	r2, [pc, #380]	; (8008df4 <HAL_TIM_ConfigClockSource+0x1fc>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	f200 80a6 	bhi.w	8008dc8 <HAL_TIM_ConfigClockSource+0x1d0>
 8008c7c:	4a5e      	ldr	r2, [pc, #376]	; (8008df8 <HAL_TIM_ConfigClockSource+0x200>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	f000 8099 	beq.w	8008db6 <HAL_TIM_ConfigClockSource+0x1be>
 8008c84:	4a5c      	ldr	r2, [pc, #368]	; (8008df8 <HAL_TIM_ConfigClockSource+0x200>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	f200 809e 	bhi.w	8008dc8 <HAL_TIM_ConfigClockSource+0x1d0>
 8008c8c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008c90:	f000 8091 	beq.w	8008db6 <HAL_TIM_ConfigClockSource+0x1be>
 8008c94:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008c98:	f200 8096 	bhi.w	8008dc8 <HAL_TIM_ConfigClockSource+0x1d0>
 8008c9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ca0:	f000 8089 	beq.w	8008db6 <HAL_TIM_ConfigClockSource+0x1be>
 8008ca4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ca8:	f200 808e 	bhi.w	8008dc8 <HAL_TIM_ConfigClockSource+0x1d0>
 8008cac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cb0:	d03e      	beq.n	8008d30 <HAL_TIM_ConfigClockSource+0x138>
 8008cb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cb6:	f200 8087 	bhi.w	8008dc8 <HAL_TIM_ConfigClockSource+0x1d0>
 8008cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cbe:	f000 8086 	beq.w	8008dce <HAL_TIM_ConfigClockSource+0x1d6>
 8008cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cc6:	d87f      	bhi.n	8008dc8 <HAL_TIM_ConfigClockSource+0x1d0>
 8008cc8:	2b70      	cmp	r3, #112	; 0x70
 8008cca:	d01a      	beq.n	8008d02 <HAL_TIM_ConfigClockSource+0x10a>
 8008ccc:	2b70      	cmp	r3, #112	; 0x70
 8008cce:	d87b      	bhi.n	8008dc8 <HAL_TIM_ConfigClockSource+0x1d0>
 8008cd0:	2b60      	cmp	r3, #96	; 0x60
 8008cd2:	d050      	beq.n	8008d76 <HAL_TIM_ConfigClockSource+0x17e>
 8008cd4:	2b60      	cmp	r3, #96	; 0x60
 8008cd6:	d877      	bhi.n	8008dc8 <HAL_TIM_ConfigClockSource+0x1d0>
 8008cd8:	2b50      	cmp	r3, #80	; 0x50
 8008cda:	d03c      	beq.n	8008d56 <HAL_TIM_ConfigClockSource+0x15e>
 8008cdc:	2b50      	cmp	r3, #80	; 0x50
 8008cde:	d873      	bhi.n	8008dc8 <HAL_TIM_ConfigClockSource+0x1d0>
 8008ce0:	2b40      	cmp	r3, #64	; 0x40
 8008ce2:	d058      	beq.n	8008d96 <HAL_TIM_ConfigClockSource+0x19e>
 8008ce4:	2b40      	cmp	r3, #64	; 0x40
 8008ce6:	d86f      	bhi.n	8008dc8 <HAL_TIM_ConfigClockSource+0x1d0>
 8008ce8:	2b30      	cmp	r3, #48	; 0x30
 8008cea:	d064      	beq.n	8008db6 <HAL_TIM_ConfigClockSource+0x1be>
 8008cec:	2b30      	cmp	r3, #48	; 0x30
 8008cee:	d86b      	bhi.n	8008dc8 <HAL_TIM_ConfigClockSource+0x1d0>
 8008cf0:	2b20      	cmp	r3, #32
 8008cf2:	d060      	beq.n	8008db6 <HAL_TIM_ConfigClockSource+0x1be>
 8008cf4:	2b20      	cmp	r3, #32
 8008cf6:	d867      	bhi.n	8008dc8 <HAL_TIM_ConfigClockSource+0x1d0>
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d05c      	beq.n	8008db6 <HAL_TIM_ConfigClockSource+0x1be>
 8008cfc:	2b10      	cmp	r3, #16
 8008cfe:	d05a      	beq.n	8008db6 <HAL_TIM_ConfigClockSource+0x1be>
 8008d00:	e062      	b.n	8008dc8 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008d12:	f000 fdf1 	bl	80098f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	689b      	ldr	r3, [r3, #8]
 8008d1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008d24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	68ba      	ldr	r2, [r7, #8]
 8008d2c:	609a      	str	r2, [r3, #8]
      break;
 8008d2e:	e04f      	b.n	8008dd0 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008d40:	f000 fdda 	bl	80098f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	689a      	ldr	r2, [r3, #8]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d52:	609a      	str	r2, [r3, #8]
      break;
 8008d54:	e03c      	b.n	8008dd0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d62:	461a      	mov	r2, r3
 8008d64:	f000 fd4c 	bl	8009800 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	2150      	movs	r1, #80	; 0x50
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f000 fda5 	bl	80098be <TIM_ITRx_SetConfig>
      break;
 8008d74:	e02c      	b.n	8008dd0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d82:	461a      	mov	r2, r3
 8008d84:	f000 fd6b 	bl	800985e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	2160      	movs	r1, #96	; 0x60
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f000 fd95 	bl	80098be <TIM_ITRx_SetConfig>
      break;
 8008d94:	e01c      	b.n	8008dd0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008da2:	461a      	mov	r2, r3
 8008da4:	f000 fd2c 	bl	8009800 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2140      	movs	r1, #64	; 0x40
 8008dae:	4618      	mov	r0, r3
 8008db0:	f000 fd85 	bl	80098be <TIM_ITRx_SetConfig>
      break;
 8008db4:	e00c      	b.n	8008dd0 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681a      	ldr	r2, [r3, #0]
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	4610      	mov	r0, r2
 8008dc2:	f000 fd7c 	bl	80098be <TIM_ITRx_SetConfig>
      break;
 8008dc6:	e003      	b.n	8008dd0 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	73fb      	strb	r3, [r7, #15]
      break;
 8008dcc:	e000      	b.n	8008dd0 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 8008dce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3710      	adds	r7, #16
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	00100070 	.word	0x00100070
 8008df0:	00100040 	.word	0x00100040
 8008df4:	00100030 	.word	0x00100030
 8008df8:	00100020 	.word	0x00100020

08008dfc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b083      	sub	sp, #12
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008e04:	bf00      	nop
 8008e06:	370c      	adds	r7, #12
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr

08008e10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b083      	sub	sp, #12
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008e18:	bf00      	nop
 8008e1a:	370c      	adds	r7, #12
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008e2c:	bf00      	nop
 8008e2e:	370c      	adds	r7, #12
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008e40:	bf00      	nop
 8008e42:	370c      	adds	r7, #12
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr

08008e4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b083      	sub	sp, #12
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e54:	bf00      	nop
 8008e56:	370c      	adds	r7, #12
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b085      	sub	sp, #20
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	4a68      	ldr	r2, [pc, #416]	; (8009014 <TIM_Base_SetConfig+0x1b4>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d02b      	beq.n	8008ed0 <TIM_Base_SetConfig+0x70>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	4a67      	ldr	r2, [pc, #412]	; (8009018 <TIM_Base_SetConfig+0x1b8>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d027      	beq.n	8008ed0 <TIM_Base_SetConfig+0x70>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e86:	d023      	beq.n	8008ed0 <TIM_Base_SetConfig+0x70>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e8e:	d01f      	beq.n	8008ed0 <TIM_Base_SetConfig+0x70>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	4a62      	ldr	r2, [pc, #392]	; (800901c <TIM_Base_SetConfig+0x1bc>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d01b      	beq.n	8008ed0 <TIM_Base_SetConfig+0x70>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	4a61      	ldr	r2, [pc, #388]	; (8009020 <TIM_Base_SetConfig+0x1c0>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d017      	beq.n	8008ed0 <TIM_Base_SetConfig+0x70>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	4a60      	ldr	r2, [pc, #384]	; (8009024 <TIM_Base_SetConfig+0x1c4>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d013      	beq.n	8008ed0 <TIM_Base_SetConfig+0x70>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	4a5f      	ldr	r2, [pc, #380]	; (8009028 <TIM_Base_SetConfig+0x1c8>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d00f      	beq.n	8008ed0 <TIM_Base_SetConfig+0x70>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	4a5e      	ldr	r2, [pc, #376]	; (800902c <TIM_Base_SetConfig+0x1cc>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d00b      	beq.n	8008ed0 <TIM_Base_SetConfig+0x70>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	4a5d      	ldr	r2, [pc, #372]	; (8009030 <TIM_Base_SetConfig+0x1d0>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d007      	beq.n	8008ed0 <TIM_Base_SetConfig+0x70>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	4a5c      	ldr	r2, [pc, #368]	; (8009034 <TIM_Base_SetConfig+0x1d4>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d003      	beq.n	8008ed0 <TIM_Base_SetConfig+0x70>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	4a5b      	ldr	r2, [pc, #364]	; (8009038 <TIM_Base_SetConfig+0x1d8>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d108      	bne.n	8008ee2 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ed6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	68fa      	ldr	r2, [r7, #12]
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	4a4b      	ldr	r2, [pc, #300]	; (8009014 <TIM_Base_SetConfig+0x1b4>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d043      	beq.n	8008f72 <TIM_Base_SetConfig+0x112>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	4a4a      	ldr	r2, [pc, #296]	; (8009018 <TIM_Base_SetConfig+0x1b8>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d03f      	beq.n	8008f72 <TIM_Base_SetConfig+0x112>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ef8:	d03b      	beq.n	8008f72 <TIM_Base_SetConfig+0x112>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f00:	d037      	beq.n	8008f72 <TIM_Base_SetConfig+0x112>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	4a45      	ldr	r2, [pc, #276]	; (800901c <TIM_Base_SetConfig+0x1bc>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d033      	beq.n	8008f72 <TIM_Base_SetConfig+0x112>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	4a44      	ldr	r2, [pc, #272]	; (8009020 <TIM_Base_SetConfig+0x1c0>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d02f      	beq.n	8008f72 <TIM_Base_SetConfig+0x112>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	4a43      	ldr	r2, [pc, #268]	; (8009024 <TIM_Base_SetConfig+0x1c4>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d02b      	beq.n	8008f72 <TIM_Base_SetConfig+0x112>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	4a42      	ldr	r2, [pc, #264]	; (8009028 <TIM_Base_SetConfig+0x1c8>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d027      	beq.n	8008f72 <TIM_Base_SetConfig+0x112>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	4a41      	ldr	r2, [pc, #260]	; (800902c <TIM_Base_SetConfig+0x1cc>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d023      	beq.n	8008f72 <TIM_Base_SetConfig+0x112>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	4a40      	ldr	r2, [pc, #256]	; (8009030 <TIM_Base_SetConfig+0x1d0>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d01f      	beq.n	8008f72 <TIM_Base_SetConfig+0x112>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	4a3f      	ldr	r2, [pc, #252]	; (8009034 <TIM_Base_SetConfig+0x1d4>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d01b      	beq.n	8008f72 <TIM_Base_SetConfig+0x112>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	4a3e      	ldr	r2, [pc, #248]	; (8009038 <TIM_Base_SetConfig+0x1d8>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d017      	beq.n	8008f72 <TIM_Base_SetConfig+0x112>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	4a3d      	ldr	r2, [pc, #244]	; (800903c <TIM_Base_SetConfig+0x1dc>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d013      	beq.n	8008f72 <TIM_Base_SetConfig+0x112>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	4a3c      	ldr	r2, [pc, #240]	; (8009040 <TIM_Base_SetConfig+0x1e0>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d00f      	beq.n	8008f72 <TIM_Base_SetConfig+0x112>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	4a3b      	ldr	r2, [pc, #236]	; (8009044 <TIM_Base_SetConfig+0x1e4>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d00b      	beq.n	8008f72 <TIM_Base_SetConfig+0x112>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	4a3a      	ldr	r2, [pc, #232]	; (8009048 <TIM_Base_SetConfig+0x1e8>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d007      	beq.n	8008f72 <TIM_Base_SetConfig+0x112>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	4a39      	ldr	r2, [pc, #228]	; (800904c <TIM_Base_SetConfig+0x1ec>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d003      	beq.n	8008f72 <TIM_Base_SetConfig+0x112>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4a38      	ldr	r2, [pc, #224]	; (8009050 <TIM_Base_SetConfig+0x1f0>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d108      	bne.n	8008f84 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	68db      	ldr	r3, [r3, #12]
 8008f7e:	68fa      	ldr	r2, [r7, #12]
 8008f80:	4313      	orrs	r3, r2
 8008f82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	695b      	ldr	r3, [r3, #20]
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	68fa      	ldr	r2, [r7, #12]
 8008f96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	689a      	ldr	r2, [r3, #8]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	681a      	ldr	r2, [r3, #0]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	4a1a      	ldr	r2, [pc, #104]	; (8009014 <TIM_Base_SetConfig+0x1b4>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d023      	beq.n	8008ff8 <TIM_Base_SetConfig+0x198>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	4a19      	ldr	r2, [pc, #100]	; (8009018 <TIM_Base_SetConfig+0x1b8>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d01f      	beq.n	8008ff8 <TIM_Base_SetConfig+0x198>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	4a1e      	ldr	r2, [pc, #120]	; (8009034 <TIM_Base_SetConfig+0x1d4>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d01b      	beq.n	8008ff8 <TIM_Base_SetConfig+0x198>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	4a1d      	ldr	r2, [pc, #116]	; (8009038 <TIM_Base_SetConfig+0x1d8>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d017      	beq.n	8008ff8 <TIM_Base_SetConfig+0x198>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	4a1c      	ldr	r2, [pc, #112]	; (800903c <TIM_Base_SetConfig+0x1dc>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d013      	beq.n	8008ff8 <TIM_Base_SetConfig+0x198>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4a1b      	ldr	r2, [pc, #108]	; (8009040 <TIM_Base_SetConfig+0x1e0>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d00f      	beq.n	8008ff8 <TIM_Base_SetConfig+0x198>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	4a1a      	ldr	r2, [pc, #104]	; (8009044 <TIM_Base_SetConfig+0x1e4>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d00b      	beq.n	8008ff8 <TIM_Base_SetConfig+0x198>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	4a19      	ldr	r2, [pc, #100]	; (8009048 <TIM_Base_SetConfig+0x1e8>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d007      	beq.n	8008ff8 <TIM_Base_SetConfig+0x198>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	4a18      	ldr	r2, [pc, #96]	; (800904c <TIM_Base_SetConfig+0x1ec>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d003      	beq.n	8008ff8 <TIM_Base_SetConfig+0x198>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	4a17      	ldr	r2, [pc, #92]	; (8009050 <TIM_Base_SetConfig+0x1f0>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d103      	bne.n	8009000 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	691a      	ldr	r2, [r3, #16]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2201      	movs	r2, #1
 8009004:	615a      	str	r2, [r3, #20]
}
 8009006:	bf00      	nop
 8009008:	3714      	adds	r7, #20
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop
 8009014:	40012c00 	.word	0x40012c00
 8009018:	50012c00 	.word	0x50012c00
 800901c:	40000400 	.word	0x40000400
 8009020:	50000400 	.word	0x50000400
 8009024:	40000800 	.word	0x40000800
 8009028:	50000800 	.word	0x50000800
 800902c:	40000c00 	.word	0x40000c00
 8009030:	50000c00 	.word	0x50000c00
 8009034:	40013400 	.word	0x40013400
 8009038:	50013400 	.word	0x50013400
 800903c:	40014000 	.word	0x40014000
 8009040:	50014000 	.word	0x50014000
 8009044:	40014400 	.word	0x40014400
 8009048:	50014400 	.word	0x50014400
 800904c:	40014800 	.word	0x40014800
 8009050:	50014800 	.word	0x50014800

08009054 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009054:	b480      	push	{r7}
 8009056:	b087      	sub	sp, #28
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6a1b      	ldr	r3, [r3, #32]
 8009062:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6a1b      	ldr	r3, [r3, #32]
 8009068:	f023 0201 	bic.w	r2, r3, #1
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	699b      	ldr	r3, [r3, #24]
 800907a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f023 0303 	bic.w	r3, r3, #3
 800908e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	68fa      	ldr	r2, [r7, #12]
 8009096:	4313      	orrs	r3, r2
 8009098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	f023 0302 	bic.w	r3, r3, #2
 80090a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	697a      	ldr	r2, [r7, #20]
 80090a8:	4313      	orrs	r3, r2
 80090aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	4a40      	ldr	r2, [pc, #256]	; (80091b0 <TIM_OC1_SetConfig+0x15c>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d023      	beq.n	80090fc <TIM_OC1_SetConfig+0xa8>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	4a3f      	ldr	r2, [pc, #252]	; (80091b4 <TIM_OC1_SetConfig+0x160>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d01f      	beq.n	80090fc <TIM_OC1_SetConfig+0xa8>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	4a3e      	ldr	r2, [pc, #248]	; (80091b8 <TIM_OC1_SetConfig+0x164>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d01b      	beq.n	80090fc <TIM_OC1_SetConfig+0xa8>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	4a3d      	ldr	r2, [pc, #244]	; (80091bc <TIM_OC1_SetConfig+0x168>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d017      	beq.n	80090fc <TIM_OC1_SetConfig+0xa8>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	4a3c      	ldr	r2, [pc, #240]	; (80091c0 <TIM_OC1_SetConfig+0x16c>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d013      	beq.n	80090fc <TIM_OC1_SetConfig+0xa8>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	4a3b      	ldr	r2, [pc, #236]	; (80091c4 <TIM_OC1_SetConfig+0x170>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d00f      	beq.n	80090fc <TIM_OC1_SetConfig+0xa8>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	4a3a      	ldr	r2, [pc, #232]	; (80091c8 <TIM_OC1_SetConfig+0x174>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d00b      	beq.n	80090fc <TIM_OC1_SetConfig+0xa8>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	4a39      	ldr	r2, [pc, #228]	; (80091cc <TIM_OC1_SetConfig+0x178>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d007      	beq.n	80090fc <TIM_OC1_SetConfig+0xa8>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	4a38      	ldr	r2, [pc, #224]	; (80091d0 <TIM_OC1_SetConfig+0x17c>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d003      	beq.n	80090fc <TIM_OC1_SetConfig+0xa8>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	4a37      	ldr	r2, [pc, #220]	; (80091d4 <TIM_OC1_SetConfig+0x180>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d10c      	bne.n	8009116 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	f023 0308 	bic.w	r3, r3, #8
 8009102:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	68db      	ldr	r3, [r3, #12]
 8009108:	697a      	ldr	r2, [r7, #20]
 800910a:	4313      	orrs	r3, r2
 800910c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	f023 0304 	bic.w	r3, r3, #4
 8009114:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	4a25      	ldr	r2, [pc, #148]	; (80091b0 <TIM_OC1_SetConfig+0x15c>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d023      	beq.n	8009166 <TIM_OC1_SetConfig+0x112>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	4a24      	ldr	r2, [pc, #144]	; (80091b4 <TIM_OC1_SetConfig+0x160>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d01f      	beq.n	8009166 <TIM_OC1_SetConfig+0x112>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	4a23      	ldr	r2, [pc, #140]	; (80091b8 <TIM_OC1_SetConfig+0x164>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d01b      	beq.n	8009166 <TIM_OC1_SetConfig+0x112>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	4a22      	ldr	r2, [pc, #136]	; (80091bc <TIM_OC1_SetConfig+0x168>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d017      	beq.n	8009166 <TIM_OC1_SetConfig+0x112>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	4a21      	ldr	r2, [pc, #132]	; (80091c0 <TIM_OC1_SetConfig+0x16c>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d013      	beq.n	8009166 <TIM_OC1_SetConfig+0x112>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	4a20      	ldr	r2, [pc, #128]	; (80091c4 <TIM_OC1_SetConfig+0x170>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d00f      	beq.n	8009166 <TIM_OC1_SetConfig+0x112>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	4a1f      	ldr	r2, [pc, #124]	; (80091c8 <TIM_OC1_SetConfig+0x174>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d00b      	beq.n	8009166 <TIM_OC1_SetConfig+0x112>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	4a1e      	ldr	r2, [pc, #120]	; (80091cc <TIM_OC1_SetConfig+0x178>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d007      	beq.n	8009166 <TIM_OC1_SetConfig+0x112>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	4a1d      	ldr	r2, [pc, #116]	; (80091d0 <TIM_OC1_SetConfig+0x17c>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d003      	beq.n	8009166 <TIM_OC1_SetConfig+0x112>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	4a1c      	ldr	r2, [pc, #112]	; (80091d4 <TIM_OC1_SetConfig+0x180>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d111      	bne.n	800918a <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800916c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009174:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	695b      	ldr	r3, [r3, #20]
 800917a:	693a      	ldr	r2, [r7, #16]
 800917c:	4313      	orrs	r3, r2
 800917e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	699b      	ldr	r3, [r3, #24]
 8009184:	693a      	ldr	r2, [r7, #16]
 8009186:	4313      	orrs	r3, r2
 8009188:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	693a      	ldr	r2, [r7, #16]
 800918e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	68fa      	ldr	r2, [r7, #12]
 8009194:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	685a      	ldr	r2, [r3, #4]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	697a      	ldr	r2, [r7, #20]
 80091a2:	621a      	str	r2, [r3, #32]
}
 80091a4:	bf00      	nop
 80091a6:	371c      	adds	r7, #28
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr
 80091b0:	40012c00 	.word	0x40012c00
 80091b4:	50012c00 	.word	0x50012c00
 80091b8:	40013400 	.word	0x40013400
 80091bc:	50013400 	.word	0x50013400
 80091c0:	40014000 	.word	0x40014000
 80091c4:	50014000 	.word	0x50014000
 80091c8:	40014400 	.word	0x40014400
 80091cc:	50014400 	.word	0x50014400
 80091d0:	40014800 	.word	0x40014800
 80091d4:	50014800 	.word	0x50014800

080091d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80091d8:	b480      	push	{r7}
 80091da:	b087      	sub	sp, #28
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6a1b      	ldr	r3, [r3, #32]
 80091e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6a1b      	ldr	r3, [r3, #32]
 80091ec:	f023 0210 	bic.w	r2, r3, #16
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	699b      	ldr	r3, [r3, #24]
 80091fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800920a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009212:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	021b      	lsls	r3, r3, #8
 800921a:	68fa      	ldr	r2, [r7, #12]
 800921c:	4313      	orrs	r3, r2
 800921e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	f023 0320 	bic.w	r3, r3, #32
 8009226:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	689b      	ldr	r3, [r3, #8]
 800922c:	011b      	lsls	r3, r3, #4
 800922e:	697a      	ldr	r2, [r7, #20]
 8009230:	4313      	orrs	r3, r2
 8009232:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	4a36      	ldr	r2, [pc, #216]	; (8009310 <TIM_OC2_SetConfig+0x138>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d00b      	beq.n	8009254 <TIM_OC2_SetConfig+0x7c>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	4a35      	ldr	r2, [pc, #212]	; (8009314 <TIM_OC2_SetConfig+0x13c>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d007      	beq.n	8009254 <TIM_OC2_SetConfig+0x7c>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	4a34      	ldr	r2, [pc, #208]	; (8009318 <TIM_OC2_SetConfig+0x140>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d003      	beq.n	8009254 <TIM_OC2_SetConfig+0x7c>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	4a33      	ldr	r2, [pc, #204]	; (800931c <TIM_OC2_SetConfig+0x144>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d10d      	bne.n	8009270 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800925a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	011b      	lsls	r3, r3, #4
 8009262:	697a      	ldr	r2, [r7, #20]
 8009264:	4313      	orrs	r3, r2
 8009266:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800926e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	4a27      	ldr	r2, [pc, #156]	; (8009310 <TIM_OC2_SetConfig+0x138>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d023      	beq.n	80092c0 <TIM_OC2_SetConfig+0xe8>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	4a26      	ldr	r2, [pc, #152]	; (8009314 <TIM_OC2_SetConfig+0x13c>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d01f      	beq.n	80092c0 <TIM_OC2_SetConfig+0xe8>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	4a25      	ldr	r2, [pc, #148]	; (8009318 <TIM_OC2_SetConfig+0x140>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d01b      	beq.n	80092c0 <TIM_OC2_SetConfig+0xe8>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	4a24      	ldr	r2, [pc, #144]	; (800931c <TIM_OC2_SetConfig+0x144>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d017      	beq.n	80092c0 <TIM_OC2_SetConfig+0xe8>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	4a23      	ldr	r2, [pc, #140]	; (8009320 <TIM_OC2_SetConfig+0x148>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d013      	beq.n	80092c0 <TIM_OC2_SetConfig+0xe8>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	4a22      	ldr	r2, [pc, #136]	; (8009324 <TIM_OC2_SetConfig+0x14c>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d00f      	beq.n	80092c0 <TIM_OC2_SetConfig+0xe8>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	4a21      	ldr	r2, [pc, #132]	; (8009328 <TIM_OC2_SetConfig+0x150>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d00b      	beq.n	80092c0 <TIM_OC2_SetConfig+0xe8>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4a20      	ldr	r2, [pc, #128]	; (800932c <TIM_OC2_SetConfig+0x154>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d007      	beq.n	80092c0 <TIM_OC2_SetConfig+0xe8>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	4a1f      	ldr	r2, [pc, #124]	; (8009330 <TIM_OC2_SetConfig+0x158>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d003      	beq.n	80092c0 <TIM_OC2_SetConfig+0xe8>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	4a1e      	ldr	r2, [pc, #120]	; (8009334 <TIM_OC2_SetConfig+0x15c>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d113      	bne.n	80092e8 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80092c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80092ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	695b      	ldr	r3, [r3, #20]
 80092d4:	009b      	lsls	r3, r3, #2
 80092d6:	693a      	ldr	r2, [r7, #16]
 80092d8:	4313      	orrs	r3, r2
 80092da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	699b      	ldr	r3, [r3, #24]
 80092e0:	009b      	lsls	r3, r3, #2
 80092e2:	693a      	ldr	r2, [r7, #16]
 80092e4:	4313      	orrs	r3, r2
 80092e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	693a      	ldr	r2, [r7, #16]
 80092ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	68fa      	ldr	r2, [r7, #12]
 80092f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	685a      	ldr	r2, [r3, #4]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	697a      	ldr	r2, [r7, #20]
 8009300:	621a      	str	r2, [r3, #32]
}
 8009302:	bf00      	nop
 8009304:	371c      	adds	r7, #28
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr
 800930e:	bf00      	nop
 8009310:	40012c00 	.word	0x40012c00
 8009314:	50012c00 	.word	0x50012c00
 8009318:	40013400 	.word	0x40013400
 800931c:	50013400 	.word	0x50013400
 8009320:	40014000 	.word	0x40014000
 8009324:	50014000 	.word	0x50014000
 8009328:	40014400 	.word	0x40014400
 800932c:	50014400 	.word	0x50014400
 8009330:	40014800 	.word	0x40014800
 8009334:	50014800 	.word	0x50014800

08009338 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009338:	b480      	push	{r7}
 800933a:	b087      	sub	sp, #28
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6a1b      	ldr	r3, [r3, #32]
 8009346:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6a1b      	ldr	r3, [r3, #32]
 800934c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	69db      	ldr	r3, [r3, #28]
 800935e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800936a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f023 0303 	bic.w	r3, r3, #3
 8009372:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	68fa      	ldr	r2, [r7, #12]
 800937a:	4313      	orrs	r3, r2
 800937c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009384:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	689b      	ldr	r3, [r3, #8]
 800938a:	021b      	lsls	r3, r3, #8
 800938c:	697a      	ldr	r2, [r7, #20]
 800938e:	4313      	orrs	r3, r2
 8009390:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	4a35      	ldr	r2, [pc, #212]	; (800946c <TIM_OC3_SetConfig+0x134>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d00b      	beq.n	80093b2 <TIM_OC3_SetConfig+0x7a>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	4a34      	ldr	r2, [pc, #208]	; (8009470 <TIM_OC3_SetConfig+0x138>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d007      	beq.n	80093b2 <TIM_OC3_SetConfig+0x7a>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	4a33      	ldr	r2, [pc, #204]	; (8009474 <TIM_OC3_SetConfig+0x13c>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d003      	beq.n	80093b2 <TIM_OC3_SetConfig+0x7a>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	4a32      	ldr	r2, [pc, #200]	; (8009478 <TIM_OC3_SetConfig+0x140>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d10d      	bne.n	80093ce <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80093b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	68db      	ldr	r3, [r3, #12]
 80093be:	021b      	lsls	r3, r3, #8
 80093c0:	697a      	ldr	r2, [r7, #20]
 80093c2:	4313      	orrs	r3, r2
 80093c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80093cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	4a26      	ldr	r2, [pc, #152]	; (800946c <TIM_OC3_SetConfig+0x134>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d023      	beq.n	800941e <TIM_OC3_SetConfig+0xe6>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	4a25      	ldr	r2, [pc, #148]	; (8009470 <TIM_OC3_SetConfig+0x138>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d01f      	beq.n	800941e <TIM_OC3_SetConfig+0xe6>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	4a24      	ldr	r2, [pc, #144]	; (8009474 <TIM_OC3_SetConfig+0x13c>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d01b      	beq.n	800941e <TIM_OC3_SetConfig+0xe6>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	4a23      	ldr	r2, [pc, #140]	; (8009478 <TIM_OC3_SetConfig+0x140>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d017      	beq.n	800941e <TIM_OC3_SetConfig+0xe6>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	4a22      	ldr	r2, [pc, #136]	; (800947c <TIM_OC3_SetConfig+0x144>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d013      	beq.n	800941e <TIM_OC3_SetConfig+0xe6>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	4a21      	ldr	r2, [pc, #132]	; (8009480 <TIM_OC3_SetConfig+0x148>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d00f      	beq.n	800941e <TIM_OC3_SetConfig+0xe6>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	4a20      	ldr	r2, [pc, #128]	; (8009484 <TIM_OC3_SetConfig+0x14c>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d00b      	beq.n	800941e <TIM_OC3_SetConfig+0xe6>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	4a1f      	ldr	r2, [pc, #124]	; (8009488 <TIM_OC3_SetConfig+0x150>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d007      	beq.n	800941e <TIM_OC3_SetConfig+0xe6>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	4a1e      	ldr	r2, [pc, #120]	; (800948c <TIM_OC3_SetConfig+0x154>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d003      	beq.n	800941e <TIM_OC3_SetConfig+0xe6>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	4a1d      	ldr	r2, [pc, #116]	; (8009490 <TIM_OC3_SetConfig+0x158>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d113      	bne.n	8009446 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009424:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800942c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	695b      	ldr	r3, [r3, #20]
 8009432:	011b      	lsls	r3, r3, #4
 8009434:	693a      	ldr	r2, [r7, #16]
 8009436:	4313      	orrs	r3, r2
 8009438:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	699b      	ldr	r3, [r3, #24]
 800943e:	011b      	lsls	r3, r3, #4
 8009440:	693a      	ldr	r2, [r7, #16]
 8009442:	4313      	orrs	r3, r2
 8009444:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	693a      	ldr	r2, [r7, #16]
 800944a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	68fa      	ldr	r2, [r7, #12]
 8009450:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	685a      	ldr	r2, [r3, #4]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	697a      	ldr	r2, [r7, #20]
 800945e:	621a      	str	r2, [r3, #32]
}
 8009460:	bf00      	nop
 8009462:	371c      	adds	r7, #28
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr
 800946c:	40012c00 	.word	0x40012c00
 8009470:	50012c00 	.word	0x50012c00
 8009474:	40013400 	.word	0x40013400
 8009478:	50013400 	.word	0x50013400
 800947c:	40014000 	.word	0x40014000
 8009480:	50014000 	.word	0x50014000
 8009484:	40014400 	.word	0x40014400
 8009488:	50014400 	.word	0x50014400
 800948c:	40014800 	.word	0x40014800
 8009490:	50014800 	.word	0x50014800

08009494 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009494:	b480      	push	{r7}
 8009496:	b087      	sub	sp, #28
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6a1b      	ldr	r3, [r3, #32]
 80094a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6a1b      	ldr	r3, [r3, #32]
 80094a8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	69db      	ldr	r3, [r3, #28]
 80094ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80094c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	021b      	lsls	r3, r3, #8
 80094d6:	68fa      	ldr	r2, [r7, #12]
 80094d8:	4313      	orrs	r3, r2
 80094da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80094e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	689b      	ldr	r3, [r3, #8]
 80094e8:	031b      	lsls	r3, r3, #12
 80094ea:	697a      	ldr	r2, [r7, #20]
 80094ec:	4313      	orrs	r3, r2
 80094ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	4a36      	ldr	r2, [pc, #216]	; (80095cc <TIM_OC4_SetConfig+0x138>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d00b      	beq.n	8009510 <TIM_OC4_SetConfig+0x7c>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	4a35      	ldr	r2, [pc, #212]	; (80095d0 <TIM_OC4_SetConfig+0x13c>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d007      	beq.n	8009510 <TIM_OC4_SetConfig+0x7c>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	4a34      	ldr	r2, [pc, #208]	; (80095d4 <TIM_OC4_SetConfig+0x140>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d003      	beq.n	8009510 <TIM_OC4_SetConfig+0x7c>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	4a33      	ldr	r2, [pc, #204]	; (80095d8 <TIM_OC4_SetConfig+0x144>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d10d      	bne.n	800952c <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009516:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	68db      	ldr	r3, [r3, #12]
 800951c:	031b      	lsls	r3, r3, #12
 800951e:	697a      	ldr	r2, [r7, #20]
 8009520:	4313      	orrs	r3, r2
 8009522:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800952a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	4a27      	ldr	r2, [pc, #156]	; (80095cc <TIM_OC4_SetConfig+0x138>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d023      	beq.n	800957c <TIM_OC4_SetConfig+0xe8>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	4a26      	ldr	r2, [pc, #152]	; (80095d0 <TIM_OC4_SetConfig+0x13c>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d01f      	beq.n	800957c <TIM_OC4_SetConfig+0xe8>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	4a25      	ldr	r2, [pc, #148]	; (80095d4 <TIM_OC4_SetConfig+0x140>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d01b      	beq.n	800957c <TIM_OC4_SetConfig+0xe8>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	4a24      	ldr	r2, [pc, #144]	; (80095d8 <TIM_OC4_SetConfig+0x144>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d017      	beq.n	800957c <TIM_OC4_SetConfig+0xe8>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	4a23      	ldr	r2, [pc, #140]	; (80095dc <TIM_OC4_SetConfig+0x148>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d013      	beq.n	800957c <TIM_OC4_SetConfig+0xe8>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	4a22      	ldr	r2, [pc, #136]	; (80095e0 <TIM_OC4_SetConfig+0x14c>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d00f      	beq.n	800957c <TIM_OC4_SetConfig+0xe8>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	4a21      	ldr	r2, [pc, #132]	; (80095e4 <TIM_OC4_SetConfig+0x150>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d00b      	beq.n	800957c <TIM_OC4_SetConfig+0xe8>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	4a20      	ldr	r2, [pc, #128]	; (80095e8 <TIM_OC4_SetConfig+0x154>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d007      	beq.n	800957c <TIM_OC4_SetConfig+0xe8>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	4a1f      	ldr	r2, [pc, #124]	; (80095ec <TIM_OC4_SetConfig+0x158>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d003      	beq.n	800957c <TIM_OC4_SetConfig+0xe8>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	4a1e      	ldr	r2, [pc, #120]	; (80095f0 <TIM_OC4_SetConfig+0x15c>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d113      	bne.n	80095a4 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009582:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800958a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	695b      	ldr	r3, [r3, #20]
 8009590:	019b      	lsls	r3, r3, #6
 8009592:	693a      	ldr	r2, [r7, #16]
 8009594:	4313      	orrs	r3, r2
 8009596:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	699b      	ldr	r3, [r3, #24]
 800959c:	019b      	lsls	r3, r3, #6
 800959e:	693a      	ldr	r2, [r7, #16]
 80095a0:	4313      	orrs	r3, r2
 80095a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	693a      	ldr	r2, [r7, #16]
 80095a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	68fa      	ldr	r2, [r7, #12]
 80095ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	685a      	ldr	r2, [r3, #4]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	697a      	ldr	r2, [r7, #20]
 80095bc:	621a      	str	r2, [r3, #32]
}
 80095be:	bf00      	nop
 80095c0:	371c      	adds	r7, #28
 80095c2:	46bd      	mov	sp, r7
 80095c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c8:	4770      	bx	lr
 80095ca:	bf00      	nop
 80095cc:	40012c00 	.word	0x40012c00
 80095d0:	50012c00 	.word	0x50012c00
 80095d4:	40013400 	.word	0x40013400
 80095d8:	50013400 	.word	0x50013400
 80095dc:	40014000 	.word	0x40014000
 80095e0:	50014000 	.word	0x50014000
 80095e4:	40014400 	.word	0x40014400
 80095e8:	50014400 	.word	0x50014400
 80095ec:	40014800 	.word	0x40014800
 80095f0:	50014800 	.word	0x50014800

080095f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b087      	sub	sp, #28
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6a1b      	ldr	r3, [r3, #32]
 8009602:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6a1b      	ldr	r3, [r3, #32]
 8009608:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800961a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009626:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	68fa      	ldr	r2, [r7, #12]
 800962e:	4313      	orrs	r3, r2
 8009630:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009638:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	689b      	ldr	r3, [r3, #8]
 800963e:	041b      	lsls	r3, r3, #16
 8009640:	693a      	ldr	r2, [r7, #16]
 8009642:	4313      	orrs	r3, r2
 8009644:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	4a21      	ldr	r2, [pc, #132]	; (80096d0 <TIM_OC5_SetConfig+0xdc>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d023      	beq.n	8009696 <TIM_OC5_SetConfig+0xa2>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	4a20      	ldr	r2, [pc, #128]	; (80096d4 <TIM_OC5_SetConfig+0xe0>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d01f      	beq.n	8009696 <TIM_OC5_SetConfig+0xa2>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	4a1f      	ldr	r2, [pc, #124]	; (80096d8 <TIM_OC5_SetConfig+0xe4>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d01b      	beq.n	8009696 <TIM_OC5_SetConfig+0xa2>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	4a1e      	ldr	r2, [pc, #120]	; (80096dc <TIM_OC5_SetConfig+0xe8>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d017      	beq.n	8009696 <TIM_OC5_SetConfig+0xa2>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	4a1d      	ldr	r2, [pc, #116]	; (80096e0 <TIM_OC5_SetConfig+0xec>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d013      	beq.n	8009696 <TIM_OC5_SetConfig+0xa2>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	4a1c      	ldr	r2, [pc, #112]	; (80096e4 <TIM_OC5_SetConfig+0xf0>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d00f      	beq.n	8009696 <TIM_OC5_SetConfig+0xa2>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	4a1b      	ldr	r2, [pc, #108]	; (80096e8 <TIM_OC5_SetConfig+0xf4>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d00b      	beq.n	8009696 <TIM_OC5_SetConfig+0xa2>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	4a1a      	ldr	r2, [pc, #104]	; (80096ec <TIM_OC5_SetConfig+0xf8>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d007      	beq.n	8009696 <TIM_OC5_SetConfig+0xa2>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	4a19      	ldr	r2, [pc, #100]	; (80096f0 <TIM_OC5_SetConfig+0xfc>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d003      	beq.n	8009696 <TIM_OC5_SetConfig+0xa2>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	4a18      	ldr	r2, [pc, #96]	; (80096f4 <TIM_OC5_SetConfig+0x100>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d109      	bne.n	80096aa <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800969c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	695b      	ldr	r3, [r3, #20]
 80096a2:	021b      	lsls	r3, r3, #8
 80096a4:	697a      	ldr	r2, [r7, #20]
 80096a6:	4313      	orrs	r3, r2
 80096a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	697a      	ldr	r2, [r7, #20]
 80096ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	68fa      	ldr	r2, [r7, #12]
 80096b4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	685a      	ldr	r2, [r3, #4]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	693a      	ldr	r2, [r7, #16]
 80096c2:	621a      	str	r2, [r3, #32]
}
 80096c4:	bf00      	nop
 80096c6:	371c      	adds	r7, #28
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr
 80096d0:	40012c00 	.word	0x40012c00
 80096d4:	50012c00 	.word	0x50012c00
 80096d8:	40013400 	.word	0x40013400
 80096dc:	50013400 	.word	0x50013400
 80096e0:	40014000 	.word	0x40014000
 80096e4:	50014000 	.word	0x50014000
 80096e8:	40014400 	.word	0x40014400
 80096ec:	50014400 	.word	0x50014400
 80096f0:	40014800 	.word	0x40014800
 80096f4:	50014800 	.word	0x50014800

080096f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b087      	sub	sp, #28
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6a1b      	ldr	r3, [r3, #32]
 8009706:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6a1b      	ldr	r3, [r3, #32]
 800970c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	685b      	ldr	r3, [r3, #4]
 8009718:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800971e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800972a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	021b      	lsls	r3, r3, #8
 8009732:	68fa      	ldr	r2, [r7, #12]
 8009734:	4313      	orrs	r3, r2
 8009736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800973e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	689b      	ldr	r3, [r3, #8]
 8009744:	051b      	lsls	r3, r3, #20
 8009746:	693a      	ldr	r2, [r7, #16]
 8009748:	4313      	orrs	r3, r2
 800974a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	4a22      	ldr	r2, [pc, #136]	; (80097d8 <TIM_OC6_SetConfig+0xe0>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d023      	beq.n	800979c <TIM_OC6_SetConfig+0xa4>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	4a21      	ldr	r2, [pc, #132]	; (80097dc <TIM_OC6_SetConfig+0xe4>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d01f      	beq.n	800979c <TIM_OC6_SetConfig+0xa4>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	4a20      	ldr	r2, [pc, #128]	; (80097e0 <TIM_OC6_SetConfig+0xe8>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d01b      	beq.n	800979c <TIM_OC6_SetConfig+0xa4>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	4a1f      	ldr	r2, [pc, #124]	; (80097e4 <TIM_OC6_SetConfig+0xec>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d017      	beq.n	800979c <TIM_OC6_SetConfig+0xa4>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	4a1e      	ldr	r2, [pc, #120]	; (80097e8 <TIM_OC6_SetConfig+0xf0>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d013      	beq.n	800979c <TIM_OC6_SetConfig+0xa4>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	4a1d      	ldr	r2, [pc, #116]	; (80097ec <TIM_OC6_SetConfig+0xf4>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d00f      	beq.n	800979c <TIM_OC6_SetConfig+0xa4>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	4a1c      	ldr	r2, [pc, #112]	; (80097f0 <TIM_OC6_SetConfig+0xf8>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d00b      	beq.n	800979c <TIM_OC6_SetConfig+0xa4>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	4a1b      	ldr	r2, [pc, #108]	; (80097f4 <TIM_OC6_SetConfig+0xfc>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d007      	beq.n	800979c <TIM_OC6_SetConfig+0xa4>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	4a1a      	ldr	r2, [pc, #104]	; (80097f8 <TIM_OC6_SetConfig+0x100>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d003      	beq.n	800979c <TIM_OC6_SetConfig+0xa4>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	4a19      	ldr	r2, [pc, #100]	; (80097fc <TIM_OC6_SetConfig+0x104>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d109      	bne.n	80097b0 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80097a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	695b      	ldr	r3, [r3, #20]
 80097a8:	029b      	lsls	r3, r3, #10
 80097aa:	697a      	ldr	r2, [r7, #20]
 80097ac:	4313      	orrs	r3, r2
 80097ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	697a      	ldr	r2, [r7, #20]
 80097b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	68fa      	ldr	r2, [r7, #12]
 80097ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	685a      	ldr	r2, [r3, #4]
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	693a      	ldr	r2, [r7, #16]
 80097c8:	621a      	str	r2, [r3, #32]
}
 80097ca:	bf00      	nop
 80097cc:	371c      	adds	r7, #28
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr
 80097d6:	bf00      	nop
 80097d8:	40012c00 	.word	0x40012c00
 80097dc:	50012c00 	.word	0x50012c00
 80097e0:	40013400 	.word	0x40013400
 80097e4:	50013400 	.word	0x50013400
 80097e8:	40014000 	.word	0x40014000
 80097ec:	50014000 	.word	0x50014000
 80097f0:	40014400 	.word	0x40014400
 80097f4:	50014400 	.word	0x50014400
 80097f8:	40014800 	.word	0x40014800
 80097fc:	50014800 	.word	0x50014800

08009800 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009800:	b480      	push	{r7}
 8009802:	b087      	sub	sp, #28
 8009804:	af00      	add	r7, sp, #0
 8009806:	60f8      	str	r0, [r7, #12]
 8009808:	60b9      	str	r1, [r7, #8]
 800980a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	6a1b      	ldr	r3, [r3, #32]
 8009810:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	6a1b      	ldr	r3, [r3, #32]
 8009816:	f023 0201 	bic.w	r2, r3, #1
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	699b      	ldr	r3, [r3, #24]
 8009822:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800982a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	011b      	lsls	r3, r3, #4
 8009830:	693a      	ldr	r2, [r7, #16]
 8009832:	4313      	orrs	r3, r2
 8009834:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	f023 030a 	bic.w	r3, r3, #10
 800983c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800983e:	697a      	ldr	r2, [r7, #20]
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	4313      	orrs	r3, r2
 8009844:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	693a      	ldr	r2, [r7, #16]
 800984a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	697a      	ldr	r2, [r7, #20]
 8009850:	621a      	str	r2, [r3, #32]
}
 8009852:	bf00      	nop
 8009854:	371c      	adds	r7, #28
 8009856:	46bd      	mov	sp, r7
 8009858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985c:	4770      	bx	lr

0800985e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800985e:	b480      	push	{r7}
 8009860:	b087      	sub	sp, #28
 8009862:	af00      	add	r7, sp, #0
 8009864:	60f8      	str	r0, [r7, #12]
 8009866:	60b9      	str	r1, [r7, #8]
 8009868:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	6a1b      	ldr	r3, [r3, #32]
 800986e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	6a1b      	ldr	r3, [r3, #32]
 8009874:	f023 0210 	bic.w	r2, r3, #16
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	699b      	ldr	r3, [r3, #24]
 8009880:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009888:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	031b      	lsls	r3, r3, #12
 800988e:	693a      	ldr	r2, [r7, #16]
 8009890:	4313      	orrs	r3, r2
 8009892:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800989a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	011b      	lsls	r3, r3, #4
 80098a0:	697a      	ldr	r2, [r7, #20]
 80098a2:	4313      	orrs	r3, r2
 80098a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	693a      	ldr	r2, [r7, #16]
 80098aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	697a      	ldr	r2, [r7, #20]
 80098b0:	621a      	str	r2, [r3, #32]
}
 80098b2:	bf00      	nop
 80098b4:	371c      	adds	r7, #28
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr

080098be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80098be:	b480      	push	{r7}
 80098c0:	b085      	sub	sp, #20
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
 80098c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	689b      	ldr	r3, [r3, #8]
 80098cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80098d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80098da:	683a      	ldr	r2, [r7, #0]
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	4313      	orrs	r3, r2
 80098e0:	f043 0307 	orr.w	r3, r3, #7
 80098e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	68fa      	ldr	r2, [r7, #12]
 80098ea:	609a      	str	r2, [r3, #8]
}
 80098ec:	bf00      	nop
 80098ee:	3714      	adds	r7, #20
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr

080098f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b087      	sub	sp, #28
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	60f8      	str	r0, [r7, #12]
 8009900:	60b9      	str	r1, [r7, #8]
 8009902:	607a      	str	r2, [r7, #4]
 8009904:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	689b      	ldr	r3, [r3, #8]
 800990a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009912:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	021a      	lsls	r2, r3, #8
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	431a      	orrs	r2, r3
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	4313      	orrs	r3, r2
 8009920:	697a      	ldr	r2, [r7, #20]
 8009922:	4313      	orrs	r3, r2
 8009924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	697a      	ldr	r2, [r7, #20]
 800992a:	609a      	str	r2, [r3, #8]
}
 800992c:	bf00      	nop
 800992e:	371c      	adds	r7, #28
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr

08009938 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009938:	b480      	push	{r7}
 800993a:	b087      	sub	sp, #28
 800993c:	af00      	add	r7, sp, #0
 800993e:	60f8      	str	r0, [r7, #12]
 8009940:	60b9      	str	r1, [r7, #8]
 8009942:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	f003 031f 	and.w	r3, r3, #31
 800994a:	2201      	movs	r2, #1
 800994c:	fa02 f303 	lsl.w	r3, r2, r3
 8009950:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	6a1a      	ldr	r2, [r3, #32]
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	43db      	mvns	r3, r3
 800995a:	401a      	ands	r2, r3
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	6a1a      	ldr	r2, [r3, #32]
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	f003 031f 	and.w	r3, r3, #31
 800996a:	6879      	ldr	r1, [r7, #4]
 800996c:	fa01 f303 	lsl.w	r3, r1, r3
 8009970:	431a      	orrs	r2, r3
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	621a      	str	r2, [r3, #32]
}
 8009976:	bf00      	nop
 8009978:	371c      	adds	r7, #28
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr
	...

08009984 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009984:	b480      	push	{r7}
 8009986:	b085      	sub	sp, #20
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009994:	2b01      	cmp	r3, #1
 8009996:	d101      	bne.n	800999c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009998:	2302      	movs	r3, #2
 800999a:	e097      	b.n	8009acc <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2201      	movs	r2, #1
 80099a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2202      	movs	r2, #2
 80099a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	689b      	ldr	r3, [r3, #8]
 80099ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4a45      	ldr	r2, [pc, #276]	; (8009ad8 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d00e      	beq.n	80099e4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4a44      	ldr	r2, [pc, #272]	; (8009adc <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d009      	beq.n	80099e4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4a42      	ldr	r2, [pc, #264]	; (8009ae0 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d004      	beq.n	80099e4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4a41      	ldr	r2, [pc, #260]	; (8009ae4 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d108      	bne.n	80099f6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80099ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	68fa      	ldr	r2, [r7, #12]
 80099f2:	4313      	orrs	r3, r2
 80099f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80099fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a00:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	68fa      	ldr	r2, [r7, #12]
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	68fa      	ldr	r2, [r7, #12]
 8009a12:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4a2f      	ldr	r2, [pc, #188]	; (8009ad8 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d040      	beq.n	8009aa0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	4a2e      	ldr	r2, [pc, #184]	; (8009adc <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d03b      	beq.n	8009aa0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a30:	d036      	beq.n	8009aa0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009a3a:	d031      	beq.n	8009aa0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a29      	ldr	r2, [pc, #164]	; (8009ae8 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d02c      	beq.n	8009aa0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4a28      	ldr	r2, [pc, #160]	; (8009aec <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d027      	beq.n	8009aa0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a26      	ldr	r2, [pc, #152]	; (8009af0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d022      	beq.n	8009aa0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4a25      	ldr	r2, [pc, #148]	; (8009af4 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d01d      	beq.n	8009aa0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4a23      	ldr	r2, [pc, #140]	; (8009af8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d018      	beq.n	8009aa0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	4a22      	ldr	r2, [pc, #136]	; (8009afc <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d013      	beq.n	8009aa0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4a18      	ldr	r2, [pc, #96]	; (8009ae0 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d00e      	beq.n	8009aa0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a17      	ldr	r2, [pc, #92]	; (8009ae4 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d009      	beq.n	8009aa0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a1b      	ldr	r2, [pc, #108]	; (8009b00 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d004      	beq.n	8009aa0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a1a      	ldr	r2, [pc, #104]	; (8009b04 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d10c      	bne.n	8009aba <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009aa6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	689b      	ldr	r3, [r3, #8]
 8009aac:	68ba      	ldr	r2, [r7, #8]
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	68ba      	ldr	r2, [r7, #8]
 8009ab8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2201      	movs	r2, #1
 8009abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009aca:	2300      	movs	r3, #0
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3714      	adds	r7, #20
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad6:	4770      	bx	lr
 8009ad8:	40012c00 	.word	0x40012c00
 8009adc:	50012c00 	.word	0x50012c00
 8009ae0:	40013400 	.word	0x40013400
 8009ae4:	50013400 	.word	0x50013400
 8009ae8:	40000400 	.word	0x40000400
 8009aec:	50000400 	.word	0x50000400
 8009af0:	40000800 	.word	0x40000800
 8009af4:	50000800 	.word	0x50000800
 8009af8:	40000c00 	.word	0x40000c00
 8009afc:	50000c00 	.word	0x50000c00
 8009b00:	40014000 	.word	0x40014000
 8009b04:	50014000 	.word	0x50014000

08009b08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b083      	sub	sp, #12
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009b10:	bf00      	nop
 8009b12:	370c      	adds	r7, #12
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr

08009b1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b083      	sub	sp, #12
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009b24:	bf00      	nop
 8009b26:	370c      	adds	r7, #12
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr

08009b30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b083      	sub	sp, #12
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009b38:	bf00      	nop
 8009b3a:	370c      	adds	r7, #12
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr

08009b44 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009b4c:	bf00      	nop
 8009b4e:	370c      	adds	r7, #12
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr

08009b58 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009b60:	bf00      	nop
 8009b62:	370c      	adds	r7, #12
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr

08009b6c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b083      	sub	sp, #12
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009b74:	bf00      	nop
 8009b76:	370c      	adds	r7, #12
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr

08009b80 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b083      	sub	sp, #12
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009b88:	bf00      	nop
 8009b8a:	370c      	adds	r7, #12
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr

08009b94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d101      	bne.n	8009ba6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	e042      	b.n	8009c2c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d106      	bne.n	8009bbe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f7f7 fc0b 	bl	80013d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2224      	movs	r2, #36	; 0x24
 8009bc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	681a      	ldr	r2, [r3, #0]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f022 0201 	bic.w	r2, r2, #1
 8009bd4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d002      	beq.n	8009be4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 fd48 	bl	800a674 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 fba3 	bl	800a330 <UART_SetConfig>
 8009bea:	4603      	mov	r3, r0
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d101      	bne.n	8009bf4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	e01b      	b.n	8009c2c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	685a      	ldr	r2, [r3, #4]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009c02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	689a      	ldr	r2, [r3, #8]
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009c12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	681a      	ldr	r2, [r3, #0]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f042 0201 	orr.w	r2, r2, #1
 8009c22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f000 fdc7 	bl	800a7b8 <UART_CheckIdleState>
 8009c2a:	4603      	mov	r3, r0
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3708      	adds	r7, #8
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b08a      	sub	sp, #40	; 0x28
 8009c38:	af02      	add	r7, sp, #8
 8009c3a:	60f8      	str	r0, [r7, #12]
 8009c3c:	60b9      	str	r1, [r7, #8]
 8009c3e:	603b      	str	r3, [r7, #0]
 8009c40:	4613      	mov	r3, r2
 8009c42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c4a:	2b20      	cmp	r3, #32
 8009c4c:	f040 808b 	bne.w	8009d66 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d002      	beq.n	8009c5c <HAL_UART_Transmit+0x28>
 8009c56:	88fb      	ldrh	r3, [r7, #6]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d101      	bne.n	8009c60 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	e083      	b.n	8009d68 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	689b      	ldr	r3, [r3, #8]
 8009c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c6a:	2b80      	cmp	r3, #128	; 0x80
 8009c6c:	d107      	bne.n	8009c7e <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	689a      	ldr	r2, [r3, #8]
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c7c:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2200      	movs	r2, #0
 8009c82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2221      	movs	r2, #33	; 0x21
 8009c8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009c8e:	f7f7 ff09 	bl	8001aa4 <HAL_GetTick>
 8009c92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	88fa      	ldrh	r2, [r7, #6]
 8009c98:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	88fa      	ldrh	r2, [r7, #6]
 8009ca0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	689b      	ldr	r3, [r3, #8]
 8009ca8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cac:	d108      	bne.n	8009cc0 <HAL_UART_Transmit+0x8c>
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	691b      	ldr	r3, [r3, #16]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d104      	bne.n	8009cc0 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	61bb      	str	r3, [r7, #24]
 8009cbe:	e003      	b.n	8009cc8 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009cc8:	e030      	b.n	8009d2c <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	9300      	str	r3, [sp, #0]
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	2180      	movs	r1, #128	; 0x80
 8009cd4:	68f8      	ldr	r0, [r7, #12]
 8009cd6:	f000 fe19 	bl	800a90c <UART_WaitOnFlagUntilTimeout>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d005      	beq.n	8009cec <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2220      	movs	r2, #32
 8009ce4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8009ce8:	2303      	movs	r3, #3
 8009cea:	e03d      	b.n	8009d68 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8009cec:	69fb      	ldr	r3, [r7, #28]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d10b      	bne.n	8009d0a <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009cf2:	69bb      	ldr	r3, [r7, #24]
 8009cf4:	881b      	ldrh	r3, [r3, #0]
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d00:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	3302      	adds	r3, #2
 8009d06:	61bb      	str	r3, [r7, #24]
 8009d08:	e007      	b.n	8009d1a <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009d0a:	69fb      	ldr	r3, [r7, #28]
 8009d0c:	781a      	ldrb	r2, [r3, #0]
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009d14:	69fb      	ldr	r3, [r7, #28]
 8009d16:	3301      	adds	r3, #1
 8009d18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	3b01      	subs	r3, #1
 8009d24:	b29a      	uxth	r2, r3
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009d32:	b29b      	uxth	r3, r3
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d1c8      	bne.n	8009cca <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	9300      	str	r3, [sp, #0]
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	2140      	movs	r1, #64	; 0x40
 8009d42:	68f8      	ldr	r0, [r7, #12]
 8009d44:	f000 fde2 	bl	800a90c <UART_WaitOnFlagUntilTimeout>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d005      	beq.n	8009d5a <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2220      	movs	r2, #32
 8009d52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8009d56:	2303      	movs	r3, #3
 8009d58:	e006      	b.n	8009d68 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	2220      	movs	r2, #32
 8009d5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8009d62:	2300      	movs	r3, #0
 8009d64:	e000      	b.n	8009d68 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8009d66:	2302      	movs	r3, #2
  }
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3720      	adds	r7, #32
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}

08009d70 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b0ae      	sub	sp, #184	; 0xb8
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	69db      	ldr	r3, [r3, #28]
 8009d7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	689b      	ldr	r3, [r3, #8]
 8009d92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009d96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009d9a:	f640 030f 	movw	r3, #2063	; 0x80f
 8009d9e:	4013      	ands	r3, r2
 8009da0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (errorflags == 0U)
 8009da4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d11b      	bne.n	8009de4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009dac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009db0:	f003 0320 	and.w	r3, r3, #32
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d015      	beq.n	8009de4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009db8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009dbc:	f003 0320 	and.w	r3, r3, #32
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d105      	bne.n	8009dd0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009dc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d009      	beq.n	8009de4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	f000 827e 	beq.w	800a2d6 <HAL_UART_IRQHandler+0x566>
      {
        huart->RxISR(huart);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	4798      	blx	r3
      }
      return;
 8009de2:	e278      	b.n	800a2d6 <HAL_UART_IRQHandler+0x566>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009de4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	f000 80fd 	beq.w	8009fe8 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009dee:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009df2:	4b7a      	ldr	r3, [pc, #488]	; (8009fdc <HAL_UART_IRQHandler+0x26c>)
 8009df4:	4013      	ands	r3, r2
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d106      	bne.n	8009e08 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009dfa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009dfe:	4b78      	ldr	r3, [pc, #480]	; (8009fe0 <HAL_UART_IRQHandler+0x270>)
 8009e00:	4013      	ands	r3, r2
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	f000 80f0 	beq.w	8009fe8 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009e08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009e0c:	f003 0301 	and.w	r3, r3, #1
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d011      	beq.n	8009e38 <HAL_UART_IRQHandler+0xc8>
 8009e14:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d00b      	beq.n	8009e38 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	2201      	movs	r2, #1
 8009e26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e2e:	f043 0201 	orr.w	r2, r3, #1
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009e3c:	f003 0302 	and.w	r3, r3, #2
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d011      	beq.n	8009e68 <HAL_UART_IRQHandler+0xf8>
 8009e44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009e48:	f003 0301 	and.w	r3, r3, #1
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d00b      	beq.n	8009e68 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	2202      	movs	r2, #2
 8009e56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e5e:	f043 0204 	orr.w	r2, r3, #4
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009e6c:	f003 0304 	and.w	r3, r3, #4
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d011      	beq.n	8009e98 <HAL_UART_IRQHandler+0x128>
 8009e74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009e78:	f003 0301 	and.w	r3, r3, #1
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d00b      	beq.n	8009e98 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	2204      	movs	r2, #4
 8009e86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e8e:	f043 0202 	orr.w	r2, r3, #2
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009e98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009e9c:	f003 0308 	and.w	r3, r3, #8
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d017      	beq.n	8009ed4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009ea4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009ea8:	f003 0320 	and.w	r3, r3, #32
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d105      	bne.n	8009ebc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009eb0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009eb4:	4b49      	ldr	r3, [pc, #292]	; (8009fdc <HAL_UART_IRQHandler+0x26c>)
 8009eb6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d00b      	beq.n	8009ed4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	2208      	movs	r2, #8
 8009ec2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009eca:	f043 0208 	orr.w	r2, r3, #8
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009ed4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009ed8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d012      	beq.n	8009f06 <HAL_UART_IRQHandler+0x196>
 8009ee0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009ee4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d00c      	beq.n	8009f06 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009ef4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009efc:	f043 0220 	orr.w	r2, r3, #32
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	f000 81e4 	beq.w	800a2da <HAL_UART_IRQHandler+0x56a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009f12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009f16:	f003 0320 	and.w	r3, r3, #32
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d013      	beq.n	8009f46 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009f1e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009f22:	f003 0320 	and.w	r3, r3, #32
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d105      	bne.n	8009f36 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009f2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d007      	beq.n	8009f46 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d003      	beq.n	8009f46 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	689b      	ldr	r3, [r3, #8]
 8009f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f5a:	2b40      	cmp	r3, #64	; 0x40
 8009f5c:	d005      	beq.n	8009f6a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009f5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009f62:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d02e      	beq.n	8009fc8 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 fd35 	bl	800a9da <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	689b      	ldr	r3, [r3, #8]
 8009f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f7a:	2b40      	cmp	r3, #64	; 0x40
 8009f7c:	d120      	bne.n	8009fc0 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d017      	beq.n	8009fb8 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f8e:	4a15      	ldr	r2, [pc, #84]	; (8009fe4 <HAL_UART_IRQHandler+0x274>)
 8009f90:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f7f8 fcdb 	bl	8002954 <HAL_DMA_Abort_IT>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d019      	beq.n	8009fd8 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009faa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009fac:	687a      	ldr	r2, [r7, #4]
 8009fae:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8009fb2:	4610      	mov	r0, r2
 8009fb4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fb6:	e00f      	b.n	8009fd8 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f000 f9a3 	bl	800a304 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fbe:	e00b      	b.n	8009fd8 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f000 f99f 	bl	800a304 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fc6:	e007      	b.n	8009fd8 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f000 f99b 	bl	800a304 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8009fd6:	e180      	b.n	800a2da <HAL_UART_IRQHandler+0x56a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fd8:	bf00      	nop
    return;
 8009fda:	e17e      	b.n	800a2da <HAL_UART_IRQHandler+0x56a>
 8009fdc:	10000001 	.word	0x10000001
 8009fe0:	04000120 	.word	0x04000120
 8009fe4:	0800aaa7 	.word	0x0800aaa7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	f040 8129 	bne.w	800a244 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009ff2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009ff6:	f003 0310 	and.w	r3, r3, #16
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	f000 8122 	beq.w	800a244 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a000:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a004:	f003 0310 	and.w	r3, r3, #16
 800a008:	2b00      	cmp	r3, #0
 800a00a:	f000 811b 	beq.w	800a244 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	2210      	movs	r2, #16
 800a014:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	689b      	ldr	r3, [r3, #8]
 800a01c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a020:	2b40      	cmp	r3, #64	; 0x40
 800a022:	f040 8091 	bne.w	800a148 <HAL_UART_IRQHandler+0x3d8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a030:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
      if ((nb_remaining_rx_data > 0U)
 800a034:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800a038:	2b00      	cmp	r3, #0
 800a03a:	f000 8150 	beq.w	800a2de <HAL_UART_IRQHandler+0x56e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a044:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800a048:	429a      	cmp	r2, r3
 800a04a:	f080 8148 	bcs.w	800a2de <HAL_UART_IRQHandler+0x56e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800a054:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a05e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a060:	2b81      	cmp	r3, #129	; 0x81
 800a062:	d060      	beq.n	800a126 <HAL_UART_IRQHandler+0x3b6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a06a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a06c:	e853 3f00 	ldrex	r3, [r3]
 800a070:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a072:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a074:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a078:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	461a      	mov	r2, r3
 800a082:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a086:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a08a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a08c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a08e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a092:	e841 2300 	strex	r3, r2, [r1]
 800a096:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a098:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d1e2      	bne.n	800a064 <HAL_UART_IRQHandler+0x2f4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	3308      	adds	r3, #8
 800a0a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a0a8:	e853 3f00 	ldrex	r3, [r3]
 800a0ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a0ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a0b0:	f023 0301 	bic.w	r3, r3, #1
 800a0b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	3308      	adds	r3, #8
 800a0be:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a0c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a0c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a0c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a0ca:	e841 2300 	strex	r3, r2, [r1]
 800a0ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a0d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d1e3      	bne.n	800a09e <HAL_UART_IRQHandler+0x32e>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2220      	movs	r2, #32
 800a0da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0ec:	e853 3f00 	ldrex	r3, [r3]
 800a0f0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a0f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0f4:	f023 0310 	bic.w	r3, r3, #16
 800a0f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	461a      	mov	r2, r3
 800a102:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a106:	65bb      	str	r3, [r7, #88]	; 0x58
 800a108:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a10a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a10c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a10e:	e841 2300 	strex	r3, r2, [r1]
 800a112:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a114:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a116:	2b00      	cmp	r3, #0
 800a118:	d1e4      	bne.n	800a0e4 <HAL_UART_IRQHandler+0x374>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a120:	4618      	mov	r0, r3
 800a122:	f7f8 fb9b 	bl	800285c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2202      	movs	r2, #2
 800a12a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a138:	b29b      	uxth	r3, r3
 800a13a:	1ad3      	subs	r3, r2, r3
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	4619      	mov	r1, r3
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f000 f8e9 	bl	800a318 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a146:	e0ca      	b.n	800a2de <HAL_UART_IRQHandler+0x56e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a154:	b29b      	uxth	r3, r3
 800a156:	1ad3      	subs	r3, r2, r3
 800a158:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
      if ((huart->RxXferCount > 0U)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a162:	b29b      	uxth	r3, r3
 800a164:	2b00      	cmp	r3, #0
 800a166:	f000 80bc 	beq.w	800a2e2 <HAL_UART_IRQHandler+0x572>
          && (nb_rx_data > 0U))
 800a16a:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800a16e:	2b00      	cmp	r3, #0
 800a170:	f000 80b7 	beq.w	800a2e2 <HAL_UART_IRQHandler+0x572>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a17c:	e853 3f00 	ldrex	r3, [r3]
 800a180:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a184:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a188:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	461a      	mov	r2, r3
 800a192:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a196:	647b      	str	r3, [r7, #68]	; 0x44
 800a198:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a19a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a19c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a19e:	e841 2300 	strex	r3, r2, [r1]
 800a1a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a1a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d1e4      	bne.n	800a174 <HAL_UART_IRQHandler+0x404>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	3308      	adds	r3, #8
 800a1b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b4:	e853 3f00 	ldrex	r3, [r3]
 800a1b8:	623b      	str	r3, [r7, #32]
   return(result);
 800a1ba:	6a3b      	ldr	r3, [r7, #32]
 800a1bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a1c0:	f023 0301 	bic.w	r3, r3, #1
 800a1c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	3308      	adds	r3, #8
 800a1ce:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a1d2:	633a      	str	r2, [r7, #48]	; 0x30
 800a1d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a1d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1da:	e841 2300 	strex	r3, r2, [r1]
 800a1de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d1e1      	bne.n	800a1aa <HAL_UART_IRQHandler+0x43a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2220      	movs	r2, #32
 800a1ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	e853 3f00 	ldrex	r3, [r3]
 800a206:	60fb      	str	r3, [r7, #12]
   return(result);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	f023 0310 	bic.w	r3, r3, #16
 800a20e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	461a      	mov	r2, r3
 800a218:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a21c:	61fb      	str	r3, [r7, #28]
 800a21e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a220:	69b9      	ldr	r1, [r7, #24]
 800a222:	69fa      	ldr	r2, [r7, #28]
 800a224:	e841 2300 	strex	r3, r2, [r1]
 800a228:	617b      	str	r3, [r7, #20]
   return(result);
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d1e4      	bne.n	800a1fa <HAL_UART_IRQHandler+0x48a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2202      	movs	r2, #2
 800a234:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a236:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800a23a:	4619      	mov	r1, r3
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f000 f86b 	bl	800a318 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a242:	e04e      	b.n	800a2e2 <HAL_UART_IRQHandler+0x572>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a244:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d014      	beq.n	800a27a <HAL_UART_IRQHandler+0x50a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a250:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d105      	bne.n	800a268 <HAL_UART_IRQHandler+0x4f8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a25c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a260:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a264:	2b00      	cmp	r3, #0
 800a266:	d008      	beq.n	800a27a <HAL_UART_IRQHandler+0x50a>
  {
    if (huart->TxISR != NULL)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d03a      	beq.n	800a2e6 <HAL_UART_IRQHandler+0x576>
    {
      huart->TxISR(huart);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	4798      	blx	r3
    }
    return;
 800a278:	e035      	b.n	800a2e6 <HAL_UART_IRQHandler+0x576>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a27a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a27e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a282:	2b00      	cmp	r3, #0
 800a284:	d009      	beq.n	800a29a <HAL_UART_IRQHandler+0x52a>
 800a286:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a28a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d003      	beq.n	800a29a <HAL_UART_IRQHandler+0x52a>
  {
    UART_EndTransmit_IT(huart);
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 fc1d 	bl	800aad2 <UART_EndTransmit_IT>
    return;
 800a298:	e026      	b.n	800a2e8 <HAL_UART_IRQHandler+0x578>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a29a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a29e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d009      	beq.n	800a2ba <HAL_UART_IRQHandler+0x54a>
 800a2a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a2aa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d003      	beq.n	800a2ba <HAL_UART_IRQHandler+0x54a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f000 fc42 	bl	800ab3c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a2b8:	e016      	b.n	800a2e8 <HAL_UART_IRQHandler+0x578>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a2ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a2be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d010      	beq.n	800a2e8 <HAL_UART_IRQHandler+0x578>
 800a2c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	da0c      	bge.n	800a2e8 <HAL_UART_IRQHandler+0x578>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f000 fc2a 	bl	800ab28 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a2d4:	e008      	b.n	800a2e8 <HAL_UART_IRQHandler+0x578>
      return;
 800a2d6:	bf00      	nop
 800a2d8:	e006      	b.n	800a2e8 <HAL_UART_IRQHandler+0x578>
    return;
 800a2da:	bf00      	nop
 800a2dc:	e004      	b.n	800a2e8 <HAL_UART_IRQHandler+0x578>
      return;
 800a2de:	bf00      	nop
 800a2e0:	e002      	b.n	800a2e8 <HAL_UART_IRQHandler+0x578>
      return;
 800a2e2:	bf00      	nop
 800a2e4:	e000      	b.n	800a2e8 <HAL_UART_IRQHandler+0x578>
    return;
 800a2e6:	bf00      	nop
  }
}
 800a2e8:	37b8      	adds	r7, #184	; 0xb8
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop

0800a2f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b083      	sub	sp, #12
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a2f8:	bf00      	nop
 800a2fa:	370c      	adds	r7, #12
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr

0800a304 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a304:	b480      	push	{r7}
 800a306:	b083      	sub	sp, #12
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a30c:	bf00      	nop
 800a30e:	370c      	adds	r7, #12
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr

0800a318 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a318:	b480      	push	{r7}
 800a31a:	b083      	sub	sp, #12
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	460b      	mov	r3, r1
 800a322:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a324:	bf00      	nop
 800a326:	370c      	adds	r7, #12
 800a328:	46bd      	mov	sp, r7
 800a32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32e:	4770      	bx	lr

0800a330 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a334:	b094      	sub	sp, #80	; 0x50
 800a336:	af00      	add	r7, sp, #0
 800a338:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a33a:	2300      	movs	r3, #0
 800a33c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800a340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a342:	681a      	ldr	r2, [r3, #0]
 800a344:	4b7e      	ldr	r3, [pc, #504]	; (800a540 <UART_SetConfig+0x210>)
 800a346:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a34a:	689a      	ldr	r2, [r3, #8]
 800a34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a34e:	691b      	ldr	r3, [r3, #16]
 800a350:	431a      	orrs	r2, r3
 800a352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a354:	695b      	ldr	r3, [r3, #20]
 800a356:	431a      	orrs	r2, r3
 800a358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a35a:	69db      	ldr	r3, [r3, #28]
 800a35c:	4313      	orrs	r3, r2
 800a35e:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4977      	ldr	r1, [pc, #476]	; (800a544 <UART_SetConfig+0x214>)
 800a368:	4019      	ands	r1, r3
 800a36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a36c:	681a      	ldr	r2, [r3, #0]
 800a36e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a370:	430b      	orrs	r3, r1
 800a372:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a380:	68d9      	ldr	r1, [r3, #12]
 800a382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a384:	681a      	ldr	r2, [r3, #0]
 800a386:	ea40 0301 	orr.w	r3, r0, r1
 800a38a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a38e:	699b      	ldr	r3, [r3, #24]
 800a390:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a394:	681a      	ldr	r2, [r3, #0]
 800a396:	4b6a      	ldr	r3, [pc, #424]	; (800a540 <UART_SetConfig+0x210>)
 800a398:	429a      	cmp	r2, r3
 800a39a:	d009      	beq.n	800a3b0 <UART_SetConfig+0x80>
 800a39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a39e:	681a      	ldr	r2, [r3, #0]
 800a3a0:	4b69      	ldr	r3, [pc, #420]	; (800a548 <UART_SetConfig+0x218>)
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	d004      	beq.n	800a3b0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3a8:	6a1a      	ldr	r2, [r3, #32]
 800a3aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	689b      	ldr	r3, [r3, #8]
 800a3b6:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800a3ba:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800a3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c0:	681a      	ldr	r2, [r3, #0]
 800a3c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3c4:	430b      	orrs	r3, r1
 800a3c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ce:	f023 000f 	bic.w	r0, r3, #15
 800a3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a3d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d8:	681a      	ldr	r2, [r3, #0]
 800a3da:	ea40 0301 	orr.w	r3, r0, r1
 800a3de:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e2:	681a      	ldr	r2, [r3, #0]
 800a3e4:	4b59      	ldr	r3, [pc, #356]	; (800a54c <UART_SetConfig+0x21c>)
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d102      	bne.n	800a3f0 <UART_SetConfig+0xc0>
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	64bb      	str	r3, [r7, #72]	; 0x48
 800a3ee:	e029      	b.n	800a444 <UART_SetConfig+0x114>
 800a3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f2:	681a      	ldr	r2, [r3, #0]
 800a3f4:	4b56      	ldr	r3, [pc, #344]	; (800a550 <UART_SetConfig+0x220>)
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	d102      	bne.n	800a400 <UART_SetConfig+0xd0>
 800a3fa:	2302      	movs	r3, #2
 800a3fc:	64bb      	str	r3, [r7, #72]	; 0x48
 800a3fe:	e021      	b.n	800a444 <UART_SetConfig+0x114>
 800a400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a402:	681a      	ldr	r2, [r3, #0]
 800a404:	4b53      	ldr	r3, [pc, #332]	; (800a554 <UART_SetConfig+0x224>)
 800a406:	429a      	cmp	r2, r3
 800a408:	d102      	bne.n	800a410 <UART_SetConfig+0xe0>
 800a40a:	2304      	movs	r3, #4
 800a40c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a40e:	e019      	b.n	800a444 <UART_SetConfig+0x114>
 800a410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a412:	681a      	ldr	r2, [r3, #0]
 800a414:	4b50      	ldr	r3, [pc, #320]	; (800a558 <UART_SetConfig+0x228>)
 800a416:	429a      	cmp	r2, r3
 800a418:	d102      	bne.n	800a420 <UART_SetConfig+0xf0>
 800a41a:	2308      	movs	r3, #8
 800a41c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a41e:	e011      	b.n	800a444 <UART_SetConfig+0x114>
 800a420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a422:	681a      	ldr	r2, [r3, #0]
 800a424:	4b4d      	ldr	r3, [pc, #308]	; (800a55c <UART_SetConfig+0x22c>)
 800a426:	429a      	cmp	r2, r3
 800a428:	d102      	bne.n	800a430 <UART_SetConfig+0x100>
 800a42a:	2310      	movs	r3, #16
 800a42c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a42e:	e009      	b.n	800a444 <UART_SetConfig+0x114>
 800a430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a432:	681a      	ldr	r2, [r3, #0]
 800a434:	4b42      	ldr	r3, [pc, #264]	; (800a540 <UART_SetConfig+0x210>)
 800a436:	429a      	cmp	r2, r3
 800a438:	d102      	bne.n	800a440 <UART_SetConfig+0x110>
 800a43a:	2320      	movs	r3, #32
 800a43c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a43e:	e001      	b.n	800a444 <UART_SetConfig+0x114>
 800a440:	2300      	movs	r3, #0
 800a442:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a446:	681a      	ldr	r2, [r3, #0]
 800a448:	4b3d      	ldr	r3, [pc, #244]	; (800a540 <UART_SetConfig+0x210>)
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d005      	beq.n	800a45a <UART_SetConfig+0x12a>
 800a44e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a450:	681a      	ldr	r2, [r3, #0]
 800a452:	4b3d      	ldr	r3, [pc, #244]	; (800a548 <UART_SetConfig+0x218>)
 800a454:	429a      	cmp	r2, r3
 800a456:	f040 8085 	bne.w	800a564 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a45a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a45c:	2200      	movs	r2, #0
 800a45e:	623b      	str	r3, [r7, #32]
 800a460:	627a      	str	r2, [r7, #36]	; 0x24
 800a462:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a466:	f7fc fab3 	bl	80069d0 <HAL_RCCEx_GetPeriphCLKFreq>
 800a46a:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800a46c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a46e:	2b00      	cmp	r3, #0
 800a470:	f000 80e8 	beq.w	800a644 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a478:	4a39      	ldr	r2, [pc, #228]	; (800a560 <UART_SetConfig+0x230>)
 800a47a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a47e:	461a      	mov	r2, r3
 800a480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a482:	fbb3 f3f2 	udiv	r3, r3, r2
 800a486:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a48a:	685a      	ldr	r2, [r3, #4]
 800a48c:	4613      	mov	r3, r2
 800a48e:	005b      	lsls	r3, r3, #1
 800a490:	4413      	add	r3, r2
 800a492:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a494:	429a      	cmp	r2, r3
 800a496:	d305      	bcc.n	800a4a4 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a49a:	685b      	ldr	r3, [r3, #4]
 800a49c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a49e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4a0:	429a      	cmp	r2, r3
 800a4a2:	d903      	bls.n	800a4ac <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a4aa:	e048      	b.n	800a53e <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	61bb      	str	r3, [r7, #24]
 800a4b2:	61fa      	str	r2, [r7, #28]
 800a4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b8:	4a29      	ldr	r2, [pc, #164]	; (800a560 <UART_SetConfig+0x230>)
 800a4ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	613b      	str	r3, [r7, #16]
 800a4c4:	617a      	str	r2, [r7, #20]
 800a4c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a4ca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a4ce:	f7f5 fed3 	bl	8000278 <__aeabi_uldivmod>
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	460b      	mov	r3, r1
 800a4d6:	4610      	mov	r0, r2
 800a4d8:	4619      	mov	r1, r3
 800a4da:	f04f 0200 	mov.w	r2, #0
 800a4de:	f04f 0300 	mov.w	r3, #0
 800a4e2:	020b      	lsls	r3, r1, #8
 800a4e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a4e8:	0202      	lsls	r2, r0, #8
 800a4ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a4ec:	6849      	ldr	r1, [r1, #4]
 800a4ee:	0849      	lsrs	r1, r1, #1
 800a4f0:	2000      	movs	r0, #0
 800a4f2:	460c      	mov	r4, r1
 800a4f4:	4605      	mov	r5, r0
 800a4f6:	eb12 0804 	adds.w	r8, r2, r4
 800a4fa:	eb43 0905 	adc.w	r9, r3, r5
 800a4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a500:	685b      	ldr	r3, [r3, #4]
 800a502:	2200      	movs	r2, #0
 800a504:	60bb      	str	r3, [r7, #8]
 800a506:	60fa      	str	r2, [r7, #12]
 800a508:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a50c:	4640      	mov	r0, r8
 800a50e:	4649      	mov	r1, r9
 800a510:	f7f5 feb2 	bl	8000278 <__aeabi_uldivmod>
 800a514:	4602      	mov	r2, r0
 800a516:	460b      	mov	r3, r1
 800a518:	4613      	mov	r3, r2
 800a51a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a51c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a51e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a522:	d308      	bcc.n	800a536 <UART_SetConfig+0x206>
 800a524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a526:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a52a:	d204      	bcs.n	800a536 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800a52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a532:	60da      	str	r2, [r3, #12]
 800a534:	e003      	b.n	800a53e <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800a536:	2301      	movs	r3, #1
 800a538:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800a53c:	e082      	b.n	800a644 <UART_SetConfig+0x314>
 800a53e:	e081      	b.n	800a644 <UART_SetConfig+0x314>
 800a540:	46002400 	.word	0x46002400
 800a544:	cfff69f3 	.word	0xcfff69f3
 800a548:	56002400 	.word	0x56002400
 800a54c:	40013800 	.word	0x40013800
 800a550:	40004400 	.word	0x40004400
 800a554:	40004800 	.word	0x40004800
 800a558:	40004c00 	.word	0x40004c00
 800a55c:	40005000 	.word	0x40005000
 800a560:	0800aec8 	.word	0x0800aec8
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a566:	69db      	ldr	r3, [r3, #28]
 800a568:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a56c:	d13c      	bne.n	800a5e8 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a56e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a570:	2200      	movs	r2, #0
 800a572:	603b      	str	r3, [r7, #0]
 800a574:	607a      	str	r2, [r7, #4]
 800a576:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a57a:	f7fc fa29 	bl	80069d0 <HAL_RCCEx_GetPeriphCLKFreq>
 800a57e:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a582:	2b00      	cmp	r3, #0
 800a584:	d05e      	beq.n	800a644 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a58a:	4a39      	ldr	r2, [pc, #228]	; (800a670 <UART_SetConfig+0x340>)
 800a58c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a590:	461a      	mov	r2, r3
 800a592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a594:	fbb3 f3f2 	udiv	r3, r3, r2
 800a598:	005a      	lsls	r2, r3, #1
 800a59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	085b      	lsrs	r3, r3, #1
 800a5a0:	441a      	add	r2, r3
 800a5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a5ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5ae:	2b0f      	cmp	r3, #15
 800a5b0:	d916      	bls.n	800a5e0 <UART_SetConfig+0x2b0>
 800a5b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5b8:	d212      	bcs.n	800a5e0 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a5ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5bc:	b29b      	uxth	r3, r3
 800a5be:	f023 030f 	bic.w	r3, r3, #15
 800a5c2:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a5c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5c6:	085b      	lsrs	r3, r3, #1
 800a5c8:	b29b      	uxth	r3, r3
 800a5ca:	f003 0307 	and.w	r3, r3, #7
 800a5ce:	b29a      	uxth	r2, r3
 800a5d0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800a5d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a5dc:	60da      	str	r2, [r3, #12]
 800a5de:	e031      	b.n	800a644 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a5e6:	e02d      	b.n	800a644 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a5e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	469a      	mov	sl, r3
 800a5ee:	4693      	mov	fp, r2
 800a5f0:	4650      	mov	r0, sl
 800a5f2:	4659      	mov	r1, fp
 800a5f4:	f7fc f9ec 	bl	80069d0 <HAL_RCCEx_GetPeriphCLKFreq>
 800a5f8:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800a5fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d021      	beq.n	800a644 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a604:	4a1a      	ldr	r2, [pc, #104]	; (800a670 <UART_SetConfig+0x340>)
 800a606:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a60a:	461a      	mov	r2, r3
 800a60c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a60e:	fbb3 f2f2 	udiv	r2, r3, r2
 800a612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	085b      	lsrs	r3, r3, #1
 800a618:	441a      	add	r2, r3
 800a61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a622:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a626:	2b0f      	cmp	r3, #15
 800a628:	d909      	bls.n	800a63e <UART_SetConfig+0x30e>
 800a62a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a62c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a630:	d205      	bcs.n	800a63e <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a634:	b29a      	uxth	r2, r3
 800a636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	60da      	str	r2, [r3, #12]
 800a63c:	e002      	b.n	800a644 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800a63e:	2301      	movs	r3, #1
 800a640:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a646:	2201      	movs	r2, #1
 800a648:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a64e:	2201      	movs	r2, #1
 800a650:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a656:	2200      	movs	r2, #0
 800a658:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a65c:	2200      	movs	r2, #0
 800a65e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a660:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a664:	4618      	mov	r0, r3
 800a666:	3750      	adds	r7, #80	; 0x50
 800a668:	46bd      	mov	sp, r7
 800a66a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a66e:	bf00      	nop
 800a670:	0800aec8 	.word	0x0800aec8

0800a674 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a674:	b480      	push	{r7}
 800a676:	b083      	sub	sp, #12
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a680:	f003 0308 	and.w	r3, r3, #8
 800a684:	2b00      	cmp	r3, #0
 800a686:	d00a      	beq.n	800a69e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	685b      	ldr	r3, [r3, #4]
 800a68e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	430a      	orrs	r2, r1
 800a69c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6a2:	f003 0301 	and.w	r3, r3, #1
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d00a      	beq.n	800a6c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	685b      	ldr	r3, [r3, #4]
 800a6b0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	430a      	orrs	r2, r1
 800a6be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6c4:	f003 0302 	and.w	r3, r3, #2
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d00a      	beq.n	800a6e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	430a      	orrs	r2, r1
 800a6e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6e6:	f003 0304 	and.w	r3, r3, #4
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d00a      	beq.n	800a704 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	430a      	orrs	r2, r1
 800a702:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a708:	f003 0310 	and.w	r3, r3, #16
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d00a      	beq.n	800a726 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	689b      	ldr	r3, [r3, #8]
 800a716:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	430a      	orrs	r2, r1
 800a724:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a72a:	f003 0320 	and.w	r3, r3, #32
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d00a      	beq.n	800a748 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	689b      	ldr	r3, [r3, #8]
 800a738:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	430a      	orrs	r2, r1
 800a746:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a74c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a750:	2b00      	cmp	r3, #0
 800a752:	d01a      	beq.n	800a78a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	685b      	ldr	r3, [r3, #4]
 800a75a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	430a      	orrs	r2, r1
 800a768:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a76e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a772:	d10a      	bne.n	800a78a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	685b      	ldr	r3, [r3, #4]
 800a77a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	430a      	orrs	r2, r1
 800a788:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a78e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a792:	2b00      	cmp	r3, #0
 800a794:	d00a      	beq.n	800a7ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	685b      	ldr	r3, [r3, #4]
 800a79c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	430a      	orrs	r2, r1
 800a7aa:	605a      	str	r2, [r3, #4]
  }
}
 800a7ac:	bf00      	nop
 800a7ae:	370c      	adds	r7, #12
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b6:	4770      	bx	lr

0800a7b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b098      	sub	sp, #96	; 0x60
 800a7bc:	af02      	add	r7, sp, #8
 800a7be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a7c8:	f7f7 f96c 	bl	8001aa4 <HAL_GetTick>
 800a7cc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f003 0308 	and.w	r3, r3, #8
 800a7d8:	2b08      	cmp	r3, #8
 800a7da:	d12f      	bne.n	800a83c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a7e0:	9300      	str	r3, [sp, #0]
 800a7e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f000 f88e 	bl	800a90c <UART_WaitOnFlagUntilTimeout>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d022      	beq.n	800a83c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7fe:	e853 3f00 	ldrex	r3, [r3]
 800a802:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a806:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a80a:	653b      	str	r3, [r7, #80]	; 0x50
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	461a      	mov	r2, r3
 800a812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a814:	647b      	str	r3, [r7, #68]	; 0x44
 800a816:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a818:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a81a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a81c:	e841 2300 	strex	r3, r2, [r1]
 800a820:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a824:	2b00      	cmp	r3, #0
 800a826:	d1e6      	bne.n	800a7f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2220      	movs	r2, #32
 800a82c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2200      	movs	r2, #0
 800a834:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a838:	2303      	movs	r3, #3
 800a83a:	e063      	b.n	800a904 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f003 0304 	and.w	r3, r3, #4
 800a846:	2b04      	cmp	r3, #4
 800a848:	d149      	bne.n	800a8de <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a84a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a84e:	9300      	str	r3, [sp, #0]
 800a850:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a852:	2200      	movs	r2, #0
 800a854:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f000 f857 	bl	800a90c <UART_WaitOnFlagUntilTimeout>
 800a85e:	4603      	mov	r3, r0
 800a860:	2b00      	cmp	r3, #0
 800a862:	d03c      	beq.n	800a8de <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a86c:	e853 3f00 	ldrex	r3, [r3]
 800a870:	623b      	str	r3, [r7, #32]
   return(result);
 800a872:	6a3b      	ldr	r3, [r7, #32]
 800a874:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a878:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	461a      	mov	r2, r3
 800a880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a882:	633b      	str	r3, [r7, #48]	; 0x30
 800a884:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a886:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a888:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a88a:	e841 2300 	strex	r3, r2, [r1]
 800a88e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a892:	2b00      	cmp	r3, #0
 800a894:	d1e6      	bne.n	800a864 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	3308      	adds	r3, #8
 800a89c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	e853 3f00 	ldrex	r3, [r3]
 800a8a4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	f023 0301 	bic.w	r3, r3, #1
 800a8ac:	64bb      	str	r3, [r7, #72]	; 0x48
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	3308      	adds	r3, #8
 800a8b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a8b6:	61fa      	str	r2, [r7, #28]
 800a8b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ba:	69b9      	ldr	r1, [r7, #24]
 800a8bc:	69fa      	ldr	r2, [r7, #28]
 800a8be:	e841 2300 	strex	r3, r2, [r1]
 800a8c2:	617b      	str	r3, [r7, #20]
   return(result);
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d1e5      	bne.n	800a896 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2220      	movs	r2, #32
 800a8ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a8da:	2303      	movs	r3, #3
 800a8dc:	e012      	b.n	800a904 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2220      	movs	r2, #32
 800a8e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2220      	movs	r2, #32
 800a8ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a902:	2300      	movs	r3, #0
}
 800a904:	4618      	mov	r0, r3
 800a906:	3758      	adds	r7, #88	; 0x58
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}

0800a90c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b084      	sub	sp, #16
 800a910:	af00      	add	r7, sp, #0
 800a912:	60f8      	str	r0, [r7, #12]
 800a914:	60b9      	str	r1, [r7, #8]
 800a916:	603b      	str	r3, [r7, #0]
 800a918:	4613      	mov	r3, r2
 800a91a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a91c:	e049      	b.n	800a9b2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a91e:	69bb      	ldr	r3, [r7, #24]
 800a920:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a924:	d045      	beq.n	800a9b2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a926:	f7f7 f8bd 	bl	8001aa4 <HAL_GetTick>
 800a92a:	4602      	mov	r2, r0
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	1ad3      	subs	r3, r2, r3
 800a930:	69ba      	ldr	r2, [r7, #24]
 800a932:	429a      	cmp	r2, r3
 800a934:	d302      	bcc.n	800a93c <UART_WaitOnFlagUntilTimeout+0x30>
 800a936:	69bb      	ldr	r3, [r7, #24]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d101      	bne.n	800a940 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a93c:	2303      	movs	r3, #3
 800a93e:	e048      	b.n	800a9d2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f003 0304 	and.w	r3, r3, #4
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d031      	beq.n	800a9b2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	69db      	ldr	r3, [r3, #28]
 800a954:	f003 0308 	and.w	r3, r3, #8
 800a958:	2b08      	cmp	r3, #8
 800a95a:	d110      	bne.n	800a97e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	2208      	movs	r2, #8
 800a962:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a964:	68f8      	ldr	r0, [r7, #12]
 800a966:	f000 f838 	bl	800a9da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	2208      	movs	r2, #8
 800a96e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	2200      	movs	r2, #0
 800a976:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800a97a:	2301      	movs	r3, #1
 800a97c:	e029      	b.n	800a9d2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	69db      	ldr	r3, [r3, #28]
 800a984:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a988:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a98c:	d111      	bne.n	800a9b2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a996:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a998:	68f8      	ldr	r0, [r7, #12]
 800a99a:	f000 f81e 	bl	800a9da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	2220      	movs	r2, #32
 800a9a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a9ae:	2303      	movs	r3, #3
 800a9b0:	e00f      	b.n	800a9d2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	69da      	ldr	r2, [r3, #28]
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	4013      	ands	r3, r2
 800a9bc:	68ba      	ldr	r2, [r7, #8]
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	bf0c      	ite	eq
 800a9c2:	2301      	moveq	r3, #1
 800a9c4:	2300      	movne	r3, #0
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	461a      	mov	r2, r3
 800a9ca:	79fb      	ldrb	r3, [r7, #7]
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d0a6      	beq.n	800a91e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a9d0:	2300      	movs	r3, #0
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3710      	adds	r7, #16
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}

0800a9da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a9da:	b480      	push	{r7}
 800a9dc:	b095      	sub	sp, #84	; 0x54
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9ea:	e853 3f00 	ldrex	r3, [r3]
 800a9ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a9f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa00:	643b      	str	r3, [r7, #64]	; 0x40
 800aa02:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aa06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aa08:	e841 2300 	strex	r3, r2, [r1]
 800aa0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aa0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d1e6      	bne.n	800a9e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	3308      	adds	r3, #8
 800aa1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa1c:	6a3b      	ldr	r3, [r7, #32]
 800aa1e:	e853 3f00 	ldrex	r3, [r3]
 800aa22:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa24:	69fb      	ldr	r3, [r7, #28]
 800aa26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aa2a:	f023 0301 	bic.w	r3, r3, #1
 800aa2e:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	3308      	adds	r3, #8
 800aa36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa38:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aa3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa40:	e841 2300 	strex	r3, r2, [r1]
 800aa44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d1e3      	bne.n	800aa14 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa50:	2b01      	cmp	r3, #1
 800aa52:	d118      	bne.n	800aa86 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	e853 3f00 	ldrex	r3, [r3]
 800aa60:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	f023 0310 	bic.w	r3, r3, #16
 800aa68:	647b      	str	r3, [r7, #68]	; 0x44
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	461a      	mov	r2, r3
 800aa70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa72:	61bb      	str	r3, [r7, #24]
 800aa74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa76:	6979      	ldr	r1, [r7, #20]
 800aa78:	69ba      	ldr	r2, [r7, #24]
 800aa7a:	e841 2300 	strex	r3, r2, [r1]
 800aa7e:	613b      	str	r3, [r7, #16]
   return(result);
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d1e6      	bne.n	800aa54 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2220      	movs	r2, #32
 800aa8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2200      	movs	r2, #0
 800aa92:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2200      	movs	r2, #0
 800aa98:	675a      	str	r2, [r3, #116]	; 0x74
}
 800aa9a:	bf00      	nop
 800aa9c:	3754      	adds	r7, #84	; 0x54
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa4:	4770      	bx	lr

0800aaa6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aaa6:	b580      	push	{r7, lr}
 800aaa8:	b084      	sub	sp, #16
 800aaaa:	af00      	add	r7, sp, #0
 800aaac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aab2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	2200      	movs	r2, #0
 800aab8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	2200      	movs	r2, #0
 800aac0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aac4:	68f8      	ldr	r0, [r7, #12]
 800aac6:	f7ff fc1d 	bl	800a304 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aaca:	bf00      	nop
 800aacc:	3710      	adds	r7, #16
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}

0800aad2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aad2:	b580      	push	{r7, lr}
 800aad4:	b088      	sub	sp, #32
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	e853 3f00 	ldrex	r3, [r3]
 800aae6:	60bb      	str	r3, [r7, #8]
   return(result);
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aaee:	61fb      	str	r3, [r7, #28]
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	461a      	mov	r2, r3
 800aaf6:	69fb      	ldr	r3, [r7, #28]
 800aaf8:	61bb      	str	r3, [r7, #24]
 800aafa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aafc:	6979      	ldr	r1, [r7, #20]
 800aafe:	69ba      	ldr	r2, [r7, #24]
 800ab00:	e841 2300 	strex	r3, r2, [r1]
 800ab04:	613b      	str	r3, [r7, #16]
   return(result);
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d1e6      	bne.n	800aada <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2220      	movs	r2, #32
 800ab10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2200      	movs	r2, #0
 800ab18:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f7ff fbe8 	bl	800a2f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab20:	bf00      	nop
 800ab22:	3720      	adds	r7, #32
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}

0800ab28 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b083      	sub	sp, #12
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ab30:	bf00      	nop
 800ab32:	370c      	adds	r7, #12
 800ab34:	46bd      	mov	sp, r7
 800ab36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3a:	4770      	bx	lr

0800ab3c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b083      	sub	sp, #12
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ab44:	bf00      	nop
 800ab46:	370c      	adds	r7, #12
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4e:	4770      	bx	lr

0800ab50 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ab50:	b480      	push	{r7}
 800ab52:	b085      	sub	sp, #20
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ab5e:	2b01      	cmp	r3, #1
 800ab60:	d101      	bne.n	800ab66 <HAL_UARTEx_DisableFifoMode+0x16>
 800ab62:	2302      	movs	r3, #2
 800ab64:	e027      	b.n	800abb6 <HAL_UARTEx_DisableFifoMode+0x66>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2201      	movs	r2, #1
 800ab6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2224      	movs	r2, #36	; 0x24
 800ab72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	681a      	ldr	r2, [r3, #0]
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f022 0201 	bic.w	r2, r2, #1
 800ab8c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ab94:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	68fa      	ldr	r2, [r7, #12]
 800aba2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2220      	movs	r2, #32
 800aba8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2200      	movs	r2, #0
 800abb0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800abb4:	2300      	movs	r3, #0
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3714      	adds	r7, #20
 800abba:	46bd      	mov	sp, r7
 800abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc0:	4770      	bx	lr

0800abc2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800abc2:	b580      	push	{r7, lr}
 800abc4:	b084      	sub	sp, #16
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
 800abca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800abd2:	2b01      	cmp	r3, #1
 800abd4:	d101      	bne.n	800abda <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800abd6:	2302      	movs	r3, #2
 800abd8:	e02d      	b.n	800ac36 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2201      	movs	r2, #1
 800abde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2224      	movs	r2, #36	; 0x24
 800abe6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	681a      	ldr	r2, [r3, #0]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f022 0201 	bic.w	r2, r2, #1
 800ac00:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	689b      	ldr	r3, [r3, #8]
 800ac08:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	683a      	ldr	r2, [r7, #0]
 800ac12:	430a      	orrs	r2, r1
 800ac14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f000 f850 	bl	800acbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	68fa      	ldr	r2, [r7, #12]
 800ac22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2220      	movs	r2, #32
 800ac28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ac34:	2300      	movs	r3, #0
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3710      	adds	r7, #16
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}

0800ac3e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ac3e:	b580      	push	{r7, lr}
 800ac40:	b084      	sub	sp, #16
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	6078      	str	r0, [r7, #4]
 800ac46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ac4e:	2b01      	cmp	r3, #1
 800ac50:	d101      	bne.n	800ac56 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ac52:	2302      	movs	r3, #2
 800ac54:	e02d      	b.n	800acb2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2201      	movs	r2, #1
 800ac5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2224      	movs	r2, #36	; 0x24
 800ac62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	681a      	ldr	r2, [r3, #0]
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f022 0201 	bic.w	r2, r2, #1
 800ac7c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	689b      	ldr	r3, [r3, #8]
 800ac84:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	683a      	ldr	r2, [r7, #0]
 800ac8e:	430a      	orrs	r2, r1
 800ac90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f000 f812 	bl	800acbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	68fa      	ldr	r2, [r7, #12]
 800ac9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2220      	movs	r2, #32
 800aca4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2200      	movs	r2, #0
 800acac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800acb0:	2300      	movs	r3, #0
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3710      	adds	r7, #16
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}
	...

0800acbc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b085      	sub	sp, #20
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d108      	bne.n	800acde <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2201      	movs	r2, #1
 800acd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2201      	movs	r2, #1
 800acd8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800acdc:	e031      	b.n	800ad42 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800acde:	2308      	movs	r3, #8
 800ace0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ace2:	2308      	movs	r3, #8
 800ace4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	689b      	ldr	r3, [r3, #8]
 800acec:	0e5b      	lsrs	r3, r3, #25
 800acee:	b2db      	uxtb	r3, r3
 800acf0:	f003 0307 	and.w	r3, r3, #7
 800acf4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	689b      	ldr	r3, [r3, #8]
 800acfc:	0f5b      	lsrs	r3, r3, #29
 800acfe:	b2db      	uxtb	r3, r3
 800ad00:	f003 0307 	and.w	r3, r3, #7
 800ad04:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ad06:	7bbb      	ldrb	r3, [r7, #14]
 800ad08:	7b3a      	ldrb	r2, [r7, #12]
 800ad0a:	4911      	ldr	r1, [pc, #68]	; (800ad50 <UARTEx_SetNbDataToProcess+0x94>)
 800ad0c:	5c8a      	ldrb	r2, [r1, r2]
 800ad0e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ad12:	7b3a      	ldrb	r2, [r7, #12]
 800ad14:	490f      	ldr	r1, [pc, #60]	; (800ad54 <UARTEx_SetNbDataToProcess+0x98>)
 800ad16:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ad18:	fb93 f3f2 	sdiv	r3, r3, r2
 800ad1c:	b29a      	uxth	r2, r3
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ad24:	7bfb      	ldrb	r3, [r7, #15]
 800ad26:	7b7a      	ldrb	r2, [r7, #13]
 800ad28:	4909      	ldr	r1, [pc, #36]	; (800ad50 <UARTEx_SetNbDataToProcess+0x94>)
 800ad2a:	5c8a      	ldrb	r2, [r1, r2]
 800ad2c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ad30:	7b7a      	ldrb	r2, [r7, #13]
 800ad32:	4908      	ldr	r1, [pc, #32]	; (800ad54 <UARTEx_SetNbDataToProcess+0x98>)
 800ad34:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ad36:	fb93 f3f2 	sdiv	r3, r3, r2
 800ad3a:	b29a      	uxth	r2, r3
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ad42:	bf00      	nop
 800ad44:	3714      	adds	r7, #20
 800ad46:	46bd      	mov	sp, r7
 800ad48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4c:	4770      	bx	lr
 800ad4e:	bf00      	nop
 800ad50:	0800aee0 	.word	0x0800aee0
 800ad54:	0800aee8 	.word	0x0800aee8

0800ad58 <memset>:
 800ad58:	4402      	add	r2, r0
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d100      	bne.n	800ad62 <memset+0xa>
 800ad60:	4770      	bx	lr
 800ad62:	f803 1b01 	strb.w	r1, [r3], #1
 800ad66:	e7f9      	b.n	800ad5c <memset+0x4>

0800ad68 <__libc_init_array>:
 800ad68:	b570      	push	{r4, r5, r6, lr}
 800ad6a:	4d0d      	ldr	r5, [pc, #52]	; (800ada0 <__libc_init_array+0x38>)
 800ad6c:	2600      	movs	r6, #0
 800ad6e:	4c0d      	ldr	r4, [pc, #52]	; (800ada4 <__libc_init_array+0x3c>)
 800ad70:	1b64      	subs	r4, r4, r5
 800ad72:	10a4      	asrs	r4, r4, #2
 800ad74:	42a6      	cmp	r6, r4
 800ad76:	d109      	bne.n	800ad8c <__libc_init_array+0x24>
 800ad78:	4d0b      	ldr	r5, [pc, #44]	; (800ada8 <__libc_init_array+0x40>)
 800ad7a:	2600      	movs	r6, #0
 800ad7c:	4c0b      	ldr	r4, [pc, #44]	; (800adac <__libc_init_array+0x44>)
 800ad7e:	f000 f817 	bl	800adb0 <_init>
 800ad82:	1b64      	subs	r4, r4, r5
 800ad84:	10a4      	asrs	r4, r4, #2
 800ad86:	42a6      	cmp	r6, r4
 800ad88:	d105      	bne.n	800ad96 <__libc_init_array+0x2e>
 800ad8a:	bd70      	pop	{r4, r5, r6, pc}
 800ad8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad90:	3601      	adds	r6, #1
 800ad92:	4798      	blx	r3
 800ad94:	e7ee      	b.n	800ad74 <__libc_init_array+0xc>
 800ad96:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad9a:	3601      	adds	r6, #1
 800ad9c:	4798      	blx	r3
 800ad9e:	e7f2      	b.n	800ad86 <__libc_init_array+0x1e>
 800ada0:	0800aef8 	.word	0x0800aef8
 800ada4:	0800aef8 	.word	0x0800aef8
 800ada8:	0800aef8 	.word	0x0800aef8
 800adac:	0800aefc 	.word	0x0800aefc

0800adb0 <_init>:
 800adb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adb2:	bf00      	nop
 800adb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adb6:	bc08      	pop	{r3}
 800adb8:	469e      	mov	lr, r3
 800adba:	4770      	bx	lr

0800adbc <_fini>:
 800adbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adbe:	bf00      	nop
 800adc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adc2:	bc08      	pop	{r3}
 800adc4:	469e      	mov	lr, r3
 800adc6:	4770      	bx	lr
