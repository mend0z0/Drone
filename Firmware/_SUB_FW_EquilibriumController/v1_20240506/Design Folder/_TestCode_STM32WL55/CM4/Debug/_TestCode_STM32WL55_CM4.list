
_TestCode_STM32WL55_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e74  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08002fac  08002fac  00012fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003090  08003090  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003090  08003090  00013090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003098  08003098  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003098  08003098  00013098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800309c  0800309c  0001309c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080030a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  080030ac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  080030ac  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000df14  00000000  00000000  00020079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fff  00000000  00000000  0002df8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ee0  00000000  00000000  0002ff90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b49  00000000  00000000  00030e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b30d  00000000  00000000  000319b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000df3c  00000000  00000000  0004ccc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aca1b  00000000  00000000  0005ac02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d78  00000000  00000000  00107620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009d  00000000  00000000  0010b398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000000c 	.word	0x2000000c
 8000154:	00000000 	.word	0x00000000
 8000158:	08002f94 	.word	0x08002f94

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000010 	.word	0x20000010
 8000174:	08002f94 	.word	0x08002f94

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295
 8000188:	f04f 30ff 	movne.w	r0, #4294967295
 800018c:	f000 b970 	b.w	8000470 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9e08      	ldr	r6, [sp, #32]
 80001ae:	460d      	mov	r5, r1
 80001b0:	4604      	mov	r4, r0
 80001b2:	460f      	mov	r7, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14a      	bne.n	800024e <__udivmoddi4+0xa6>
 80001b8:	428a      	cmp	r2, r1
 80001ba:	4694      	mov	ip, r2
 80001bc:	d965      	bls.n	800028a <__udivmoddi4+0xe2>
 80001be:	fab2 f382 	clz	r3, r2
 80001c2:	b143      	cbz	r3, 80001d6 <__udivmoddi4+0x2e>
 80001c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80001c8:	f1c3 0220 	rsb	r2, r3, #32
 80001cc:	409f      	lsls	r7, r3
 80001ce:	fa20 f202 	lsr.w	r2, r0, r2
 80001d2:	4317      	orrs	r7, r2
 80001d4:	409c      	lsls	r4, r3
 80001d6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80001da:	fa1f f58c 	uxth.w	r5, ip
 80001de:	fbb7 f1fe 	udiv	r1, r7, lr
 80001e2:	0c22      	lsrs	r2, r4, #16
 80001e4:	fb0e 7711 	mls	r7, lr, r1, r7
 80001e8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80001ec:	fb01 f005 	mul.w	r0, r1, r5
 80001f0:	4290      	cmp	r0, r2
 80001f2:	d90a      	bls.n	800020a <__udivmoddi4+0x62>
 80001f4:	eb1c 0202 	adds.w	r2, ip, r2
 80001f8:	f101 37ff 	add.w	r7, r1, #4294967295
 80001fc:	f080 811b 	bcs.w	8000436 <__udivmoddi4+0x28e>
 8000200:	4290      	cmp	r0, r2
 8000202:	f240 8118 	bls.w	8000436 <__udivmoddi4+0x28e>
 8000206:	3902      	subs	r1, #2
 8000208:	4462      	add	r2, ip
 800020a:	1a12      	subs	r2, r2, r0
 800020c:	b2a4      	uxth	r4, r4
 800020e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000212:	fb0e 2210 	mls	r2, lr, r0, r2
 8000216:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800021a:	fb00 f505 	mul.w	r5, r0, r5
 800021e:	42a5      	cmp	r5, r4
 8000220:	d90a      	bls.n	8000238 <__udivmoddi4+0x90>
 8000222:	eb1c 0404 	adds.w	r4, ip, r4
 8000226:	f100 32ff 	add.w	r2, r0, #4294967295
 800022a:	f080 8106 	bcs.w	800043a <__udivmoddi4+0x292>
 800022e:	42a5      	cmp	r5, r4
 8000230:	f240 8103 	bls.w	800043a <__udivmoddi4+0x292>
 8000234:	4464      	add	r4, ip
 8000236:	3802      	subs	r0, #2
 8000238:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800023c:	1b64      	subs	r4, r4, r5
 800023e:	2100      	movs	r1, #0
 8000240:	b11e      	cbz	r6, 800024a <__udivmoddi4+0xa2>
 8000242:	40dc      	lsrs	r4, r3
 8000244:	2300      	movs	r3, #0
 8000246:	e9c6 4300 	strd	r4, r3, [r6]
 800024a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800024e:	428b      	cmp	r3, r1
 8000250:	d908      	bls.n	8000264 <__udivmoddi4+0xbc>
 8000252:	2e00      	cmp	r6, #0
 8000254:	f000 80ec 	beq.w	8000430 <__udivmoddi4+0x288>
 8000258:	2100      	movs	r1, #0
 800025a:	e9c6 0500 	strd	r0, r5, [r6]
 800025e:	4608      	mov	r0, r1
 8000260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000264:	fab3 f183 	clz	r1, r3
 8000268:	2900      	cmp	r1, #0
 800026a:	d149      	bne.n	8000300 <__udivmoddi4+0x158>
 800026c:	42ab      	cmp	r3, r5
 800026e:	d302      	bcc.n	8000276 <__udivmoddi4+0xce>
 8000270:	4282      	cmp	r2, r0
 8000272:	f200 80f7 	bhi.w	8000464 <__udivmoddi4+0x2bc>
 8000276:	1a84      	subs	r4, r0, r2
 8000278:	eb65 0203 	sbc.w	r2, r5, r3
 800027c:	2001      	movs	r0, #1
 800027e:	4617      	mov	r7, r2
 8000280:	2e00      	cmp	r6, #0
 8000282:	d0e2      	beq.n	800024a <__udivmoddi4+0xa2>
 8000284:	e9c6 4700 	strd	r4, r7, [r6]
 8000288:	e7df      	b.n	800024a <__udivmoddi4+0xa2>
 800028a:	b902      	cbnz	r2, 800028e <__udivmoddi4+0xe6>
 800028c:	deff      	udf	#255	; 0xff
 800028e:	fab2 f382 	clz	r3, r2
 8000292:	2b00      	cmp	r3, #0
 8000294:	f040 808f 	bne.w	80003b6 <__udivmoddi4+0x20e>
 8000298:	1a8a      	subs	r2, r1, r2
 800029a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029e:	fa1f fe8c 	uxth.w	lr, ip
 80002a2:	2101      	movs	r1, #1
 80002a4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002a8:	fb07 2015 	mls	r0, r7, r5, r2
 80002ac:	0c22      	lsrs	r2, r4, #16
 80002ae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002b2:	fb0e f005 	mul.w	r0, lr, r5
 80002b6:	4290      	cmp	r0, r2
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0x124>
 80002ba:	eb1c 0202 	adds.w	r2, ip, r2
 80002be:	f105 38ff 	add.w	r8, r5, #4294967295
 80002c2:	d202      	bcs.n	80002ca <__udivmoddi4+0x122>
 80002c4:	4290      	cmp	r0, r2
 80002c6:	f200 80ca 	bhi.w	800045e <__udivmoddi4+0x2b6>
 80002ca:	4645      	mov	r5, r8
 80002cc:	1a12      	subs	r2, r2, r0
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d4:	fb07 2210 	mls	r2, r7, r0, r2
 80002d8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002dc:	fb0e fe00 	mul.w	lr, lr, r0
 80002e0:	45a6      	cmp	lr, r4
 80002e2:	d908      	bls.n	80002f6 <__udivmoddi4+0x14e>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ec:	d202      	bcs.n	80002f4 <__udivmoddi4+0x14c>
 80002ee:	45a6      	cmp	lr, r4
 80002f0:	f200 80ba 	bhi.w	8000468 <__udivmoddi4+0x2c0>
 80002f4:	4610      	mov	r0, r2
 80002f6:	eba4 040e 	sub.w	r4, r4, lr
 80002fa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80002fe:	e79f      	b.n	8000240 <__udivmoddi4+0x98>
 8000300:	f1c1 0720 	rsb	r7, r1, #32
 8000304:	408b      	lsls	r3, r1
 8000306:	fa22 fc07 	lsr.w	ip, r2, r7
 800030a:	ea4c 0c03 	orr.w	ip, ip, r3
 800030e:	fa05 f401 	lsl.w	r4, r5, r1
 8000312:	fa20 f307 	lsr.w	r3, r0, r7
 8000316:	40fd      	lsrs	r5, r7
 8000318:	4323      	orrs	r3, r4
 800031a:	fa00 f901 	lsl.w	r9, r0, r1
 800031e:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	fbb5 f8f0 	udiv	r8, r5, r0
 800032a:	0c1c      	lsrs	r4, r3, #16
 800032c:	fb00 5518 	mls	r5, r0, r8, r5
 8000330:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000334:	fb08 f50e 	mul.w	r5, r8, lr
 8000338:	42a5      	cmp	r5, r4
 800033a:	fa02 f201 	lsl.w	r2, r2, r1
 800033e:	d90b      	bls.n	8000358 <__udivmoddi4+0x1b0>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f108 3aff 	add.w	sl, r8, #4294967295
 8000348:	f080 8087 	bcs.w	800045a <__udivmoddi4+0x2b2>
 800034c:	42a5      	cmp	r5, r4
 800034e:	f240 8084 	bls.w	800045a <__udivmoddi4+0x2b2>
 8000352:	f1a8 0802 	sub.w	r8, r8, #2
 8000356:	4464      	add	r4, ip
 8000358:	1b64      	subs	r4, r4, r5
 800035a:	b29d      	uxth	r5, r3
 800035c:	fbb4 f3f0 	udiv	r3, r4, r0
 8000360:	fb00 4413 	mls	r4, r0, r3, r4
 8000364:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000368:	fb03 fe0e 	mul.w	lr, r3, lr
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x1da>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f103 30ff 	add.w	r0, r3, #4294967295
 8000378:	d26b      	bcs.n	8000452 <__udivmoddi4+0x2aa>
 800037a:	45a6      	cmp	lr, r4
 800037c:	d969      	bls.n	8000452 <__udivmoddi4+0x2aa>
 800037e:	3b02      	subs	r3, #2
 8000380:	4464      	add	r4, ip
 8000382:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000386:	fba0 8302 	umull	r8, r3, r0, r2
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	429c      	cmp	r4, r3
 8000390:	46c6      	mov	lr, r8
 8000392:	461d      	mov	r5, r3
 8000394:	d355      	bcc.n	8000442 <__udivmoddi4+0x29a>
 8000396:	d052      	beq.n	800043e <__udivmoddi4+0x296>
 8000398:	b156      	cbz	r6, 80003b0 <__udivmoddi4+0x208>
 800039a:	ebb9 030e 	subs.w	r3, r9, lr
 800039e:	eb64 0405 	sbc.w	r4, r4, r5
 80003a2:	fa04 f707 	lsl.w	r7, r4, r7
 80003a6:	40cb      	lsrs	r3, r1
 80003a8:	40cc      	lsrs	r4, r1
 80003aa:	431f      	orrs	r7, r3
 80003ac:	e9c6 7400 	strd	r7, r4, [r6]
 80003b0:	2100      	movs	r1, #0
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	f1c3 0120 	rsb	r1, r3, #32
 80003ba:	fa02 fc03 	lsl.w	ip, r2, r3
 80003be:	fa20 f201 	lsr.w	r2, r0, r1
 80003c2:	fa25 f101 	lsr.w	r1, r5, r1
 80003c6:	409d      	lsls	r5, r3
 80003c8:	432a      	orrs	r2, r5
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d6:	fb07 1510 	mls	r5, r7, r0, r1
 80003da:	0c11      	lsrs	r1, r2, #16
 80003dc:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80003e0:	fb00 f50e 	mul.w	r5, r0, lr
 80003e4:	428d      	cmp	r5, r1
 80003e6:	fa04 f403 	lsl.w	r4, r4, r3
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x256>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003f4:	d22f      	bcs.n	8000456 <__udivmoddi4+0x2ae>
 80003f6:	428d      	cmp	r5, r1
 80003f8:	d92d      	bls.n	8000456 <__udivmoddi4+0x2ae>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	1b49      	subs	r1, r1, r5
 8000400:	b292      	uxth	r2, r2
 8000402:	fbb1 f5f7 	udiv	r5, r1, r7
 8000406:	fb07 1115 	mls	r1, r7, r5, r1
 800040a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800040e:	fb05 f10e 	mul.w	r1, r5, lr
 8000412:	4291      	cmp	r1, r2
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x280>
 8000416:	eb1c 0202 	adds.w	r2, ip, r2
 800041a:	f105 38ff 	add.w	r8, r5, #4294967295
 800041e:	d216      	bcs.n	800044e <__udivmoddi4+0x2a6>
 8000420:	4291      	cmp	r1, r2
 8000422:	d914      	bls.n	800044e <__udivmoddi4+0x2a6>
 8000424:	3d02      	subs	r5, #2
 8000426:	4462      	add	r2, ip
 8000428:	1a52      	subs	r2, r2, r1
 800042a:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800042e:	e739      	b.n	80002a4 <__udivmoddi4+0xfc>
 8000430:	4631      	mov	r1, r6
 8000432:	4630      	mov	r0, r6
 8000434:	e709      	b.n	800024a <__udivmoddi4+0xa2>
 8000436:	4639      	mov	r1, r7
 8000438:	e6e7      	b.n	800020a <__udivmoddi4+0x62>
 800043a:	4610      	mov	r0, r2
 800043c:	e6fc      	b.n	8000238 <__udivmoddi4+0x90>
 800043e:	45c1      	cmp	r9, r8
 8000440:	d2aa      	bcs.n	8000398 <__udivmoddi4+0x1f0>
 8000442:	ebb8 0e02 	subs.w	lr, r8, r2
 8000446:	eb63 050c 	sbc.w	r5, r3, ip
 800044a:	3801      	subs	r0, #1
 800044c:	e7a4      	b.n	8000398 <__udivmoddi4+0x1f0>
 800044e:	4645      	mov	r5, r8
 8000450:	e7ea      	b.n	8000428 <__udivmoddi4+0x280>
 8000452:	4603      	mov	r3, r0
 8000454:	e795      	b.n	8000382 <__udivmoddi4+0x1da>
 8000456:	4640      	mov	r0, r8
 8000458:	e7d1      	b.n	80003fe <__udivmoddi4+0x256>
 800045a:	46d0      	mov	r8, sl
 800045c:	e77c      	b.n	8000358 <__udivmoddi4+0x1b0>
 800045e:	3d02      	subs	r5, #2
 8000460:	4462      	add	r2, ip
 8000462:	e733      	b.n	80002cc <__udivmoddi4+0x124>
 8000464:	4608      	mov	r0, r1
 8000466:	e70b      	b.n	8000280 <__udivmoddi4+0xd8>
 8000468:	4464      	add	r4, ip
 800046a:	3802      	subs	r0, #2
 800046c:	e743      	b.n	80002f6 <__udivmoddi4+0x14e>
 800046e:	bf00      	nop

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000478:	bf00      	nop
 800047a:	46bd      	mov	sp, r7
 800047c:	bc80      	pop	{r7}
 800047e:	4770      	bx	lr

08000480 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800048c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000490:	f023 0218 	bic.w	r2, r3, #24
 8000494:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4313      	orrs	r3, r2
 800049c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80004a0:	bf00      	nop
 80004a2:	370c      	adds	r7, #12
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bc80      	pop	{r7}
 80004a8:	4770      	bx	lr

080004aa <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004aa:	b480      	push	{r7}
 80004ac:	b085      	sub	sp, #20
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	4313      	orrs	r3, r2
 80004c0:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4013      	ands	r3, r2
 80004cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004ce:	68fb      	ldr	r3, [r7, #12]
}
 80004d0:	bf00      	nop
 80004d2:	3714      	adds	r7, #20
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bc80      	pop	{r7}
 80004d8:	4770      	bx	lr

080004da <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004da:	b580      	push	{r7, lr}
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004de:	f000 f991 	bl	8000804 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e2:	f000 f809 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 f8ad 	bl	8000644 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ea:	f000 f85f 	bl	80005ac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 80004ee:	2001      	movs	r0, #1
 80004f0:	f000 fc68 	bl	8000dc4 <HAL_PWREx_ReleaseCore>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <main+0x1a>
	...

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b09a      	sub	sp, #104	; 0x68
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0320 	add.w	r3, r7, #32
 8000502:	2248      	movs	r2, #72	; 0x48
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f002 fd18 	bl	8002f3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	1d3b      	adds	r3, r7, #4
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
 8000518:	611a      	str	r2, [r3, #16]
 800051a:	615a      	str	r2, [r3, #20]
 800051c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800051e:	f000 fc29 	bl	8000d74 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000522:	2000      	movs	r0, #0
 8000524:	f7ff ffac 	bl	8000480 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000528:	4b1f      	ldr	r3, [pc, #124]	; (80005a8 <SystemClock_Config+0xb0>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000530:	4a1d      	ldr	r2, [pc, #116]	; (80005a8 <SystemClock_Config+0xb0>)
 8000532:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000536:	6013      	str	r3, [r2, #0]
 8000538:	4b1b      	ldr	r3, [pc, #108]	; (80005a8 <SystemClock_Config+0xb0>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000540:	603b      	str	r3, [r7, #0]
 8000542:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000544:	2324      	movs	r3, #36	; 0x24
 8000546:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000548:	2381      	movs	r3, #129	; 0x81
 800054a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800054c:	2301      	movs	r3, #1
 800054e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000550:	2300      	movs	r3, #0
 8000552:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000554:	2360      	movs	r3, #96	; 0x60
 8000556:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000558:	2300      	movs	r3, #0
 800055a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055c:	f107 0320 	add.w	r3, r7, #32
 8000560:	4618      	mov	r0, r3
 8000562:	f000 fef1 	bl	8001348 <HAL_RCC_OscConfig>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800056c:	f000 f877 	bl	800065e <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 8000570:	236f      	movs	r3, #111	; 0x6f
 8000572:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000574:	2300      	movs	r3, #0
 8000576:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000578:	2300      	movs	r3, #0
 800057a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800057c:	2300      	movs	r3, #0
 800057e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000580:	2300      	movs	r3, #0
 8000582:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000584:	2300      	movs	r3, #0
 8000586:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000588:	2300      	movs	r3, #0
 800058a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	2100      	movs	r1, #0
 8000590:	4618      	mov	r0, r3
 8000592:	f001 fa5b 	bl	8001a4c <HAL_RCC_ClockConfig>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800059c:	f000 f85f 	bl	800065e <Error_Handler>
  }
}
 80005a0:	bf00      	nop
 80005a2:	3768      	adds	r7, #104	; 0x68
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	58000400 	.word	0x58000400

080005ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005b0:	4b22      	ldr	r3, [pc, #136]	; (800063c <MX_USART2_UART_Init+0x90>)
 80005b2:	4a23      	ldr	r2, [pc, #140]	; (8000640 <MX_USART2_UART_Init+0x94>)
 80005b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005b6:	4b21      	ldr	r3, [pc, #132]	; (800063c <MX_USART2_UART_Init+0x90>)
 80005b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005be:	4b1f      	ldr	r3, [pc, #124]	; (800063c <MX_USART2_UART_Init+0x90>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005c4:	4b1d      	ldr	r3, [pc, #116]	; (800063c <MX_USART2_UART_Init+0x90>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005ca:	4b1c      	ldr	r3, [pc, #112]	; (800063c <MX_USART2_UART_Init+0x90>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005d0:	4b1a      	ldr	r3, [pc, #104]	; (800063c <MX_USART2_UART_Init+0x90>)
 80005d2:	220c      	movs	r2, #12
 80005d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005d6:	4b19      	ldr	r3, [pc, #100]	; (800063c <MX_USART2_UART_Init+0x90>)
 80005d8:	2200      	movs	r2, #0
 80005da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005dc:	4b17      	ldr	r3, [pc, #92]	; (800063c <MX_USART2_UART_Init+0x90>)
 80005de:	2200      	movs	r2, #0
 80005e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005e2:	4b16      	ldr	r3, [pc, #88]	; (800063c <MX_USART2_UART_Init+0x90>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80005e8:	4b14      	ldr	r3, [pc, #80]	; (800063c <MX_USART2_UART_Init+0x90>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005ee:	4b13      	ldr	r3, [pc, #76]	; (800063c <MX_USART2_UART_Init+0x90>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005f4:	4811      	ldr	r0, [pc, #68]	; (800063c <MX_USART2_UART_Init+0x90>)
 80005f6:	f001 ff24 	bl	8002442 <HAL_UART_Init>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000600:	f000 f82d 	bl	800065e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000604:	2100      	movs	r1, #0
 8000606:	480d      	ldr	r0, [pc, #52]	; (800063c <MX_USART2_UART_Init+0x90>)
 8000608:	f002 fbcf 	bl	8002daa <HAL_UARTEx_SetTxFifoThreshold>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000612:	f000 f824 	bl	800065e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000616:	2100      	movs	r1, #0
 8000618:	4808      	ldr	r0, [pc, #32]	; (800063c <MX_USART2_UART_Init+0x90>)
 800061a:	f002 fc04 	bl	8002e26 <HAL_UARTEx_SetRxFifoThreshold>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000624:	f000 f81b 	bl	800065e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000628:	4804      	ldr	r0, [pc, #16]	; (800063c <MX_USART2_UART_Init+0x90>)
 800062a:	f002 fb86 	bl	8002d3a <HAL_UARTEx_DisableFifoMode>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000634:	f000 f813 	bl	800065e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000028 	.word	0x20000028
 8000640:	40004400 	.word	0x40004400

08000644 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000648:	2001      	movs	r0, #1
 800064a:	f7ff ff2e 	bl	80004aa <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064e:	2004      	movs	r0, #4
 8000650:	f7ff ff2b 	bl	80004aa <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000654:	2002      	movs	r0, #2
 8000656:	f7ff ff28 	bl	80004aa <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}

0800065e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800065e:	b480      	push	{r7}
 8000660:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000662:	b672      	cpsid	i
}
 8000664:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000666:	e7fe      	b.n	8000666 <Error_Handler+0x8>

08000668 <LL_AHB2_GRP1_EnableClock>:
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000674:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000676:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4313      	orrs	r3, r2
 800067e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000684:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4013      	ands	r3, r2
 800068a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800068c:	68fb      	ldr	r3, [r7, #12]
}
 800068e:	bf00      	nop
 8000690:	3714      	adds	r7, #20
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr

08000698 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80006a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80006a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4313      	orrs	r3, r2
 80006ae:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80006b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4013      	ands	r3, r2
 80006ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006bc:	68fb      	ldr	r3, [r7, #12]
}
 80006be:	bf00      	nop
 80006c0:	3714      	adds	r7, #20
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr

080006c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr

080006d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b096      	sub	sp, #88	; 0x58
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2238      	movs	r2, #56	; 0x38
 80006f2:	2100      	movs	r1, #0
 80006f4:	4618      	mov	r0, r3
 80006f6:	f002 fc21 	bl	8002f3c <memset>
  if(huart->Instance==USART2)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a17      	ldr	r2, [pc, #92]	; (800075c <HAL_UART_MspInit+0x88>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d126      	bne.n	8000752 <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000704:	2302      	movs	r3, #2
 8000706:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000708:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800070c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800070e:	f107 030c 	add.w	r3, r7, #12
 8000712:	4618      	mov	r0, r3
 8000714:	f001 fd5a 	bl	80021cc <HAL_RCCEx_PeriphCLKConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800071e:	f7ff ff9e 	bl	800065e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000722:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000726:	f7ff ffb7 	bl	8000698 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800072a:	2001      	movs	r0, #1
 800072c:	f7ff ff9c 	bl	8000668 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000730:	230c      	movs	r3, #12
 8000732:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000734:	2302      	movs	r3, #2
 8000736:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073c:	2300      	movs	r3, #0
 800073e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000740:	2307      	movs	r3, #7
 8000742:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000744:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000748:	4619      	mov	r1, r3
 800074a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800074e:	f000 f9b1 	bl	8000ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000752:	bf00      	nop
 8000754:	3758      	adds	r7, #88	; 0x58
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40004400 	.word	0x40004400

08000760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000764:	e7fe      	b.n	8000764 <NMI_Handler+0x4>

08000766 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076a:	e7fe      	b.n	800076a <HardFault_Handler+0x4>

0800076c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <MemManage_Handler+0x4>

08000772 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000776:	e7fe      	b.n	8000776 <BusFault_Handler+0x4>

08000778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800077c:	e7fe      	b.n	800077c <UsageFault_Handler+0x4>

0800077e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	bc80      	pop	{r7}
 8000788:	4770      	bx	lr

0800078a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr

08000796 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr

080007a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007a6:	f000 f887 	bl	80008b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
	...

080007b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007b0:	480d      	ldr	r0, [pc, #52]	; (80007e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007b2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80007b4:	f7ff fe5e 	bl	8000474 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007b8:	480c      	ldr	r0, [pc, #48]	; (80007ec <LoopForever+0x6>)
  ldr r1, =_edata
 80007ba:	490d      	ldr	r1, [pc, #52]	; (80007f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007bc:	4a0d      	ldr	r2, [pc, #52]	; (80007f4 <LoopForever+0xe>)
  movs r3, #0
 80007be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007c0:	e002      	b.n	80007c8 <LoopCopyDataInit>

080007c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007c6:	3304      	adds	r3, #4

080007c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007cc:	d3f9      	bcc.n	80007c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ce:	4a0a      	ldr	r2, [pc, #40]	; (80007f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007d0:	4c0a      	ldr	r4, [pc, #40]	; (80007fc <LoopForever+0x16>)
  movs r3, #0
 80007d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d4:	e001      	b.n	80007da <LoopFillZerobss>

080007d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d8:	3204      	adds	r2, #4

080007da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007dc:	d3fb      	bcc.n	80007d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007de:	f002 fbb5 	bl	8002f4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007e2:	f7ff fe7a 	bl	80004da <main>

080007e6 <LoopForever>:

LoopForever:
    b LoopForever
 80007e6:	e7fe      	b.n	80007e6 <LoopForever>
  ldr   r0, =_estack
 80007e8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80007ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007f4:	080030a0 	.word	0x080030a0
  ldr r2, =_sbss
 80007f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007fc:	200000c0 	.word	0x200000c0

08000800 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000800:	e7fe      	b.n	8000800 <ADC_IRQHandler>
	...

08000804 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800080a:	2300      	movs	r3, #0
 800080c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800080e:	2003      	movs	r0, #3
 8000810:	f000 f91e 	bl	8000a50 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000814:	f001 fafc 	bl	8001e10 <HAL_RCC_GetHCLKFreq>
 8000818:	4603      	mov	r3, r0
 800081a:	4a09      	ldr	r2, [pc, #36]	; (8000840 <HAL_Init+0x3c>)
 800081c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800081e:	2000      	movs	r0, #0
 8000820:	f000 f810 	bl	8000844 <HAL_InitTick>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d002      	beq.n	8000830 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800082a:	2301      	movs	r3, #1
 800082c:	71fb      	strb	r3, [r7, #7]
 800082e:	e001      	b.n	8000834 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000830:	f7ff ff4a 	bl	80006c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000834:	79fb      	ldrb	r3, [r7, #7]
}
 8000836:	4618      	mov	r0, r3
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000000 	.word	0x20000000

08000844 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800084c:	2300      	movs	r3, #0
 800084e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000850:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <HAL_InitTick+0x6c>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d024      	beq.n	80008a2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000858:	f001 fada 	bl	8001e10 <HAL_RCC_GetHCLKFreq>
 800085c:	4602      	mov	r2, r0
 800085e:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <HAL_InitTick+0x6c>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	4619      	mov	r1, r3
 8000864:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000868:	fbb3 f3f1 	udiv	r3, r3, r1
 800086c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000870:	4618      	mov	r0, r3
 8000872:	f000 f912 	bl	8000a9a <HAL_SYSTICK_Config>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d10f      	bne.n	800089c <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2b0f      	cmp	r3, #15
 8000880:	d809      	bhi.n	8000896 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000882:	2200      	movs	r2, #0
 8000884:	6879      	ldr	r1, [r7, #4]
 8000886:	f04f 30ff 	mov.w	r0, #4294967295
 800088a:	f000 f8ec 	bl	8000a66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800088e:	4a09      	ldr	r2, [pc, #36]	; (80008b4 <HAL_InitTick+0x70>)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	6013      	str	r3, [r2, #0]
 8000894:	e007      	b.n	80008a6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000896:	2301      	movs	r3, #1
 8000898:	73fb      	strb	r3, [r7, #15]
 800089a:	e004      	b.n	80008a6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800089c:	2301      	movs	r3, #1
 800089e:	73fb      	strb	r3, [r7, #15]
 80008a0:	e001      	b.n	80008a6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008a2:	2301      	movs	r3, #1
 80008a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3710      	adds	r7, #16
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000008 	.word	0x20000008
 80008b4:	20000004 	.word	0x20000004

080008b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008bc:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <HAL_IncTick+0x1c>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	461a      	mov	r2, r3
 80008c2:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <HAL_IncTick+0x20>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4413      	add	r3, r2
 80008c8:	4a03      	ldr	r2, [pc, #12]	; (80008d8 <HAL_IncTick+0x20>)
 80008ca:	6013      	str	r3, [r2, #0]
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr
 80008d4:	20000008 	.word	0x20000008
 80008d8:	200000bc 	.word	0x200000bc

080008dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  return uwTick;
 80008e0:	4b02      	ldr	r3, [pc, #8]	; (80008ec <HAL_GetTick+0x10>)
 80008e2:	681b      	ldr	r3, [r3, #0]
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr
 80008ec:	200000bc 	.word	0x200000bc

080008f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	f003 0307 	and.w	r3, r3, #7
 80008fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000900:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <__NVIC_SetPriorityGrouping+0x44>)
 8000902:	68db      	ldr	r3, [r3, #12]
 8000904:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000906:	68ba      	ldr	r2, [r7, #8]
 8000908:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800090c:	4013      	ands	r3, r2
 800090e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000918:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800091c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000922:	4a04      	ldr	r2, [pc, #16]	; (8000934 <__NVIC_SetPriorityGrouping+0x44>)
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	60d3      	str	r3, [r2, #12]
}
 8000928:	bf00      	nop
 800092a:	3714      	adds	r7, #20
 800092c:	46bd      	mov	sp, r7
 800092e:	bc80      	pop	{r7}
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	e000ed00 	.word	0xe000ed00

08000938 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800093c:	4b04      	ldr	r3, [pc, #16]	; (8000950 <__NVIC_GetPriorityGrouping+0x18>)
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	0a1b      	lsrs	r3, r3, #8
 8000942:	f003 0307 	and.w	r3, r3, #7
}
 8000946:	4618      	mov	r0, r3
 8000948:	46bd      	mov	sp, r7
 800094a:	bc80      	pop	{r7}
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	6039      	str	r1, [r7, #0]
 800095e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000964:	2b00      	cmp	r3, #0
 8000966:	db0a      	blt.n	800097e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	b2da      	uxtb	r2, r3
 800096c:	490c      	ldr	r1, [pc, #48]	; (80009a0 <__NVIC_SetPriority+0x4c>)
 800096e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000972:	0112      	lsls	r2, r2, #4
 8000974:	b2d2      	uxtb	r2, r2
 8000976:	440b      	add	r3, r1
 8000978:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800097c:	e00a      	b.n	8000994 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	b2da      	uxtb	r2, r3
 8000982:	4908      	ldr	r1, [pc, #32]	; (80009a4 <__NVIC_SetPriority+0x50>)
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	f003 030f 	and.w	r3, r3, #15
 800098a:	3b04      	subs	r3, #4
 800098c:	0112      	lsls	r2, r2, #4
 800098e:	b2d2      	uxtb	r2, r2
 8000990:	440b      	add	r3, r1
 8000992:	761a      	strb	r2, [r3, #24]
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	bc80      	pop	{r7}
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	e000e100 	.word	0xe000e100
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b089      	sub	sp, #36	; 0x24
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	60f8      	str	r0, [r7, #12]
 80009b0:	60b9      	str	r1, [r7, #8]
 80009b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	f003 0307 	and.w	r3, r3, #7
 80009ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	f1c3 0307 	rsb	r3, r3, #7
 80009c2:	2b04      	cmp	r3, #4
 80009c4:	bf28      	it	cs
 80009c6:	2304      	movcs	r3, #4
 80009c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ca:	69fb      	ldr	r3, [r7, #28]
 80009cc:	3304      	adds	r3, #4
 80009ce:	2b06      	cmp	r3, #6
 80009d0:	d902      	bls.n	80009d8 <NVIC_EncodePriority+0x30>
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	3b03      	subs	r3, #3
 80009d6:	e000      	b.n	80009da <NVIC_EncodePriority+0x32>
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009dc:	f04f 32ff 	mov.w	r2, #4294967295
 80009e0:	69bb      	ldr	r3, [r7, #24]
 80009e2:	fa02 f303 	lsl.w	r3, r2, r3
 80009e6:	43da      	mvns	r2, r3
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	401a      	ands	r2, r3
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009f0:	f04f 31ff 	mov.w	r1, #4294967295
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	fa01 f303 	lsl.w	r3, r1, r3
 80009fa:	43d9      	mvns	r1, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a00:	4313      	orrs	r3, r2
         );
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3724      	adds	r7, #36	; 0x24
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr

08000a0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	3b01      	subs	r3, #1
 8000a18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a1c:	d301      	bcc.n	8000a22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e00f      	b.n	8000a42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a22:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <SysTick_Config+0x40>)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	3b01      	subs	r3, #1
 8000a28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a2a:	210f      	movs	r1, #15
 8000a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a30:	f7ff ff90 	bl	8000954 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a34:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <SysTick_Config+0x40>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a3a:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <SysTick_Config+0x40>)
 8000a3c:	2207      	movs	r2, #7
 8000a3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	e000e010 	.word	0xe000e010

08000a50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f7ff ff49 	bl	80008f0 <__NVIC_SetPriorityGrouping>
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b086      	sub	sp, #24
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	60b9      	str	r1, [r7, #8]
 8000a70:	607a      	str	r2, [r7, #4]
 8000a72:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a74:	f7ff ff60 	bl	8000938 <__NVIC_GetPriorityGrouping>
 8000a78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	68b9      	ldr	r1, [r7, #8]
 8000a7e:	6978      	ldr	r0, [r7, #20]
 8000a80:	f7ff ff92 	bl	80009a8 <NVIC_EncodePriority>
 8000a84:	4602      	mov	r2, r0
 8000a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a8a:	4611      	mov	r1, r2
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff ff61 	bl	8000954 <__NVIC_SetPriority>
}
 8000a92:	bf00      	nop
 8000a94:	3718      	adds	r7, #24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b082      	sub	sp, #8
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f7ff ffb2 	bl	8000a0c <SysTick_Config>
 8000aa8:	4603      	mov	r3, r0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b087      	sub	sp, #28
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ac2:	e140      	b.n	8000d46 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	2101      	movs	r1, #1
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f000 8132 	beq.w	8000d40 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	f003 0303 	and.w	r3, r3, #3
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d005      	beq.n	8000af4 <HAL_GPIO_Init+0x40>
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f003 0303 	and.w	r3, r3, #3
 8000af0:	2b02      	cmp	r3, #2
 8000af2:	d130      	bne.n	8000b56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	2203      	movs	r2, #3
 8000b00:	fa02 f303 	lsl.w	r3, r2, r3
 8000b04:	43db      	mvns	r3, r3
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	4013      	ands	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	68da      	ldr	r2, [r3, #12]
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	fa02 f303 	lsl.w	r3, r2, r3
 8000b18:	693a      	ldr	r2, [r7, #16]
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	43db      	mvns	r3, r3
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	4013      	ands	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	091b      	lsrs	r3, r3, #4
 8000b40:	f003 0201 	and.w	r2, r3, #1
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f003 0303 	and.w	r3, r3, #3
 8000b5e:	2b03      	cmp	r3, #3
 8000b60:	d017      	beq.n	8000b92 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	68db      	ldr	r3, [r3, #12]
 8000b66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	2203      	movs	r2, #3
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	43db      	mvns	r3, r3
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	4013      	ands	r3, r2
 8000b78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	689a      	ldr	r2, [r3, #8]
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f003 0303 	and.w	r3, r3, #3
 8000b9a:	2b02      	cmp	r3, #2
 8000b9c:	d123      	bne.n	8000be6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	08da      	lsrs	r2, r3, #3
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	3208      	adds	r2, #8
 8000ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000baa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	220f      	movs	r2, #15
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	43db      	mvns	r3, r3
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	691a      	ldr	r2, [r3, #16]
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	f003 0307 	and.w	r3, r3, #7
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	08da      	lsrs	r2, r3, #3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3208      	adds	r2, #8
 8000be0:	6939      	ldr	r1, [r7, #16]
 8000be2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	2203      	movs	r2, #3
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f003 0203 	and.w	r2, r3, #3
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f000 808c 	beq.w	8000d40 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000c28:	4a4e      	ldr	r2, [pc, #312]	; (8000d64 <HAL_GPIO_Init+0x2b0>)
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	089b      	lsrs	r3, r3, #2
 8000c2e:	3302      	adds	r3, #2
 8000c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	f003 0303 	and.w	r3, r3, #3
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	2207      	movs	r2, #7
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	43db      	mvns	r3, r3
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c52:	d00d      	beq.n	8000c70 <HAL_GPIO_Init+0x1bc>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4a44      	ldr	r2, [pc, #272]	; (8000d68 <HAL_GPIO_Init+0x2b4>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d007      	beq.n	8000c6c <HAL_GPIO_Init+0x1b8>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4a43      	ldr	r2, [pc, #268]	; (8000d6c <HAL_GPIO_Init+0x2b8>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d101      	bne.n	8000c68 <HAL_GPIO_Init+0x1b4>
 8000c64:	2302      	movs	r3, #2
 8000c66:	e004      	b.n	8000c72 <HAL_GPIO_Init+0x1be>
 8000c68:	2307      	movs	r3, #7
 8000c6a:	e002      	b.n	8000c72 <HAL_GPIO_Init+0x1be>
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	e000      	b.n	8000c72 <HAL_GPIO_Init+0x1be>
 8000c70:	2300      	movs	r3, #0
 8000c72:	697a      	ldr	r2, [r7, #20]
 8000c74:	f002 0203 	and.w	r2, r2, #3
 8000c78:	0092      	lsls	r2, r2, #2
 8000c7a:	4093      	lsls	r3, r2
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c82:	4938      	ldr	r1, [pc, #224]	; (8000d64 <HAL_GPIO_Init+0x2b0>)
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	089b      	lsrs	r3, r3, #2
 8000c88:	3302      	adds	r3, #2
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c90:	4b37      	ldr	r3, [pc, #220]	; (8000d70 <HAL_GPIO_Init+0x2bc>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d003      	beq.n	8000cb4 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000cb4:	4a2e      	ldr	r2, [pc, #184]	; (8000d70 <HAL_GPIO_Init+0x2bc>)
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000cba:	4b2d      	ldr	r3, [pc, #180]	; (8000d70 <HAL_GPIO_Init+0x2bc>)
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d003      	beq.n	8000cde <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000cde:	4a24      	ldr	r2, [pc, #144]	; (8000d70 <HAL_GPIO_Init+0x2bc>)
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8000ce4:	4b22      	ldr	r3, [pc, #136]	; (8000d70 <HAL_GPIO_Init+0x2bc>)
 8000ce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000cea:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d003      	beq.n	8000d0a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8000d0a:	4a19      	ldr	r2, [pc, #100]	; (8000d70 <HAL_GPIO_Init+0x2bc>)
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8000d12:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <HAL_GPIO_Init+0x2bc>)
 8000d14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000d18:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	4013      	ands	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d003      	beq.n	8000d38 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8000d38:	4a0d      	ldr	r2, [pc, #52]	; (8000d70 <HAL_GPIO_Init+0x2bc>)
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	3301      	adds	r3, #1
 8000d44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	f47f aeb7 	bne.w	8000ac4 <HAL_GPIO_Init+0x10>
  }
}
 8000d56:	bf00      	nop
 8000d58:	bf00      	nop
 8000d5a:	371c      	adds	r7, #28
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	40010000 	.word	0x40010000
 8000d68:	48000400 	.word	0x48000400
 8000d6c:	48000800 	.word	0x48000800
 8000d70:	58000800 	.word	0x58000800

08000d74 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000d78:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <HAL_PWR_EnableBkUpAccess+0x18>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a03      	ldr	r2, [pc, #12]	; (8000d8c <HAL_PWR_EnableBkUpAccess+0x18>)
 8000d7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d82:	6013      	str	r3, [r2, #0]
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr
 8000d8c:	58000400 	.word	0x58000400

08000d90 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8000d94:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <LL_PWR_EnableBootC2+0x18>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	4a03      	ldr	r2, [pc, #12]	; (8000da8 <LL_PWR_EnableBootC2+0x18>)
 8000d9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d9e:	60d3      	str	r3, [r2, #12]
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr
 8000da8:	58000400 	.word	0x58000400

08000dac <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8000db0:	4b03      	ldr	r3, [pc, #12]	; (8000dc0 <HAL_PWREx_GetVoltageRange+0x14>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr
 8000dc0:	58000400 	.word	0x58000400

08000dc4 <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 8000dcc:	f7ff ffe0 	bl	8000d90 <LL_PWR_EnableBootC2>
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <LL_PWR_IsEnabledBkUpAccess>:
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000de4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000de8:	d101      	bne.n	8000dee <LL_PWR_IsEnabledBkUpAccess+0x16>
 8000dea:	2301      	movs	r3, #1
 8000dec:	e000      	b.n	8000df0 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8000dee:	2300      	movs	r3, #0
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr
 8000df8:	58000400 	.word	0x58000400

08000dfc <LL_RCC_HSE_EnableTcxo>:
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e0e:	6013      	str	r3, [r2, #0]
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr

08000e18 <LL_RCC_HSE_DisableTcxo>:
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000e2a:	6013      	str	r3, [r2, #0]
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc80      	pop	{r7}
 8000e32:	4770      	bx	lr

08000e34 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000e46:	d101      	bne.n	8000e4c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000e48:	2301      	movs	r3, #1
 8000e4a:	e000      	b.n	8000e4e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bc80      	pop	{r7}
 8000e54:	4770      	bx	lr

08000e56 <LL_RCC_HSE_Enable>:
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000e5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e68:	6013      	str	r3, [r2, #0]
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bc80      	pop	{r7}
 8000e70:	4770      	bx	lr

08000e72 <LL_RCC_HSE_Disable>:
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e84:	6013      	str	r3, [r2, #0]
}
 8000e86:	bf00      	nop
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bc80      	pop	{r7}
 8000e8c:	4770      	bx	lr

08000e8e <LL_RCC_HSE_IsReady>:
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000ea0:	d101      	bne.n	8000ea6 <LL_RCC_HSE_IsReady+0x18>
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e000      	b.n	8000ea8 <LL_RCC_HSE_IsReady+0x1a>
 8000ea6:	2300      	movs	r3, #0
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr

08000eb0 <LL_RCC_HSI_Enable>:
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ebe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ec2:	6013      	str	r3, [r2, #0]
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr

08000ecc <LL_RCC_HSI_Disable>:
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000eda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ede:	6013      	str	r3, [r2, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr

08000ee8 <LL_RCC_HSI_IsReady>:
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ef6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000efa:	d101      	bne.n	8000f00 <LL_RCC_HSI_IsReady+0x18>
 8000efc:	2301      	movs	r3, #1
 8000efe:	e000      	b.n	8000f02 <LL_RCC_HSI_IsReady+0x1a>
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc80      	pop	{r7}
 8000f08:	4770      	bx	lr

08000f0a <LL_RCC_HSI_SetCalibTrimming>:
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	b083      	sub	sp, #12
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	061b      	lsls	r3, r3, #24
 8000f20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f24:	4313      	orrs	r3, r2
 8000f26:	604b      	str	r3, [r1, #4]
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr

08000f32 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d101      	bne.n	8000f4a <LL_RCC_LSE_IsReady+0x18>
 8000f46:	2301      	movs	r3, #1
 8000f48:	e000      	b.n	8000f4c <LL_RCC_LSE_IsReady+0x1a>
 8000f4a:	2300      	movs	r3, #0
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr

08000f54 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8000f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr

08000f74 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8000f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f84:	f023 0301 	bic.w	r3, r3, #1
 8000f88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr

08000f94 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8000f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fa0:	f003 0302 	and.w	r3, r3, #2
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d101      	bne.n	8000fac <LL_RCC_LSI_IsReady+0x18>
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e000      	b.n	8000fae <LL_RCC_LSI_IsReady+0x1a>
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr

08000fb6 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000fba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6013      	str	r3, [r2, #0]
}
 8000fca:	bf00      	nop
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc80      	pop	{r7}
 8000fd0:	4770      	bx	lr

08000fd2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8000fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fe0:	f023 0301 	bic.w	r3, r3, #1
 8000fe4:	6013      	str	r3, [r2, #0]
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc80      	pop	{r7}
 8000fec:	4770      	bx	lr

08000fee <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8000ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f003 0302 	and.w	r3, r3, #2
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d101      	bne.n	8001004 <LL_RCC_MSI_IsReady+0x16>
 8001000:	2301      	movs	r3, #1
 8001002:	e000      	b.n	8001006 <LL_RCC_MSI_IsReady+0x18>
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	bc80      	pop	{r7}
 800100c:	4770      	bx	lr

0800100e <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f003 0308 	and.w	r3, r3, #8
 800101c:	2b08      	cmp	r3, #8
 800101e:	d101      	bne.n	8001024 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001020:	2301      	movs	r3, #1
 8001022:	e000      	b.n	8001026 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	46bd      	mov	sp, r7
 800102a:	bc80      	pop	{r7}
 800102c:	4770      	bx	lr

0800102e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800103c:	4618      	mov	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr

08001044 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800104c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001050:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001054:	4618      	mov	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr

0800105c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001064:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	021b      	lsls	r3, r3, #8
 8001072:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001076:	4313      	orrs	r3, r2
 8001078:	604b      	str	r3, [r1, #4]
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr

08001084 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800108c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	f023 0203 	bic.w	r2, r3, #3
 8001096:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4313      	orrs	r3, r2
 800109e:	608b      	str	r3, [r1, #8]
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr

080010aa <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80010ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	f003 030c 	and.w	r3, r3, #12
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr

080010c0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80010c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4313      	orrs	r3, r2
 80010da:	608b      	str	r3, [r1, #8]
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr

080010e6 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80010ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010f2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80010f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4313      	orrs	r3, r2
 8001102:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr

08001110 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800111c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001120:	f023 020f 	bic.w	r2, r3, #15
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	091b      	lsrs	r3, r3, #4
 8001128:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800112c:	4313      	orrs	r3, r2
 800112e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr

0800113c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800114e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4313      	orrs	r3, r2
 8001156:	608b      	str	r3, [r1, #8]
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr

08001162 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001162:	b480      	push	{r7}
 8001164:	b083      	sub	sp, #12
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800116a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001174:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4313      	orrs	r3, r2
 800117c:	608b      	str	r3, [r1, #8]
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr

08001188 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800118c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001196:	4618      	mov	r0, r3
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr

0800119e <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80011a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011a6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80011aa:	011b      	lsls	r3, r3, #4
 80011ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr

080011b8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80011bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr

080011ce <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80011d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80011dc:	4618      	mov	r0, r3
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr

080011e4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80011e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011f6:	6013      	str	r3, [r2, #0]
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr

08001200 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800120e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001212:	6013      	str	r3, [r2, #0]
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr

0800121c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800122a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800122e:	d101      	bne.n	8001234 <LL_RCC_PLL_IsReady+0x18>
 8001230:	2301      	movs	r3, #1
 8001232:	e000      	b.n	8001236 <LL_RCC_PLL_IsReady+0x1a>
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr

0800123e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	0a1b      	lsrs	r3, r3, #8
 800124a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800124e:	4618      	mov	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr

08001256 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800125a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001264:	4618      	mov	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr

0800126c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001270:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800127a:	4618      	mov	r0, r3
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr

08001282 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	f003 0303 	and.w	r3, r3, #3
}
 8001290:	4618      	mov	r0, r3
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr

08001298 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800129c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012aa:	d101      	bne.n	80012b0 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80012ac:	2301      	movs	r3, #1
 80012ae:	e000      	b.n	80012b2 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr

080012ba <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80012be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80012c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80012ce:	d101      	bne.n	80012d4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80012d0:	2301      	movs	r3, #1
 80012d2:	e000      	b.n	80012d6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr

080012de <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80012e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012e6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80012ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012f2:	d101      	bne.n	80012f8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80012f4:	2301      	movs	r3, #1
 80012f6:	e000      	b.n	80012fa <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr

08001302 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001310:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001314:	d101      	bne.n	800131a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001316:	2301      	movs	r3, #1
 8001318:	e000      	b.n	800131c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr

08001324 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001332:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001336:	d101      	bne.n	800133c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001338:	2301      	movs	r3, #1
 800133a:	e000      	b.n	800133e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr
	...

08001348 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b088      	sub	sp, #32
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d101      	bne.n	800135a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e36f      	b.n	8001a3a <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800135a:	f7ff fea6 	bl	80010aa <LL_RCC_GetSysClkSource>
 800135e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001360:	f7ff ff8f 	bl	8001282 <LL_RCC_PLL_GetMainSource>
 8001364:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0320 	and.w	r3, r3, #32
 800136e:	2b00      	cmp	r3, #0
 8001370:	f000 80c4 	beq.w	80014fc <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d005      	beq.n	8001386 <HAL_RCC_OscConfig+0x3e>
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	2b0c      	cmp	r3, #12
 800137e:	d176      	bne.n	800146e <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d173      	bne.n	800146e <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a1b      	ldr	r3, [r3, #32]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d101      	bne.n	8001392 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e353      	b.n	8001a3a <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001396:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0308 	and.w	r3, r3, #8
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d005      	beq.n	80013b0 <HAL_RCC_OscConfig+0x68>
 80013a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013ae:	e006      	b.n	80013be <HAL_RCC_OscConfig+0x76>
 80013b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013b8:	091b      	lsrs	r3, r3, #4
 80013ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013be:	4293      	cmp	r3, r2
 80013c0:	d222      	bcs.n	8001408 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 fd5a 	bl	8001e80 <RCC_SetFlashLatencyFromMSIRange>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e331      	b.n	8001a3a <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013e0:	f043 0308 	orr.w	r3, r3, #8
 80013e4:	6013      	str	r3, [r2, #0]
 80013e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013f8:	4313      	orrs	r3, r2
 80013fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff fe2b 	bl	800105c <LL_RCC_MSI_SetCalibTrimming>
 8001406:	e021      	b.n	800144c <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001408:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001412:	f043 0308 	orr.w	r3, r3, #8
 8001416:	6013      	str	r3, [r2, #0]
 8001418:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001426:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800142a:	4313      	orrs	r3, r2
 800142c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff fe12 	bl	800105c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143c:	4618      	mov	r0, r3
 800143e:	f000 fd1f 	bl	8001e80 <RCC_SetFlashLatencyFromMSIRange>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e2f6      	b.n	8001a3a <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800144c:	f000 fce0 	bl	8001e10 <HAL_RCC_GetHCLKFreq>
 8001450:	4603      	mov	r3, r0
 8001452:	4aa7      	ldr	r2, [pc, #668]	; (80016f0 <HAL_RCC_OscConfig+0x3a8>)
 8001454:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8001456:	4ba7      	ldr	r3, [pc, #668]	; (80016f4 <HAL_RCC_OscConfig+0x3ac>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff f9f2 	bl	8000844 <HAL_InitTick>
 8001460:	4603      	mov	r3, r0
 8001462:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001464:	7cfb      	ldrb	r3, [r7, #19]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d047      	beq.n	80014fa <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800146a:	7cfb      	ldrb	r3, [r7, #19]
 800146c:	e2e5      	b.n	8001a3a <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a1b      	ldr	r3, [r3, #32]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d02c      	beq.n	80014d0 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001476:	f7ff fd9e 	bl	8000fb6 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800147a:	f7ff fa2f 	bl	80008dc <HAL_GetTick>
 800147e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001482:	f7ff fa2b 	bl	80008dc <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e2d2      	b.n	8001a3a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001494:	f7ff fdab 	bl	8000fee <LL_RCC_MSI_IsReady>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d0f1      	beq.n	8001482 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800149e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014a8:	f043 0308 	orr.w	r3, r3, #8
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014c0:	4313      	orrs	r3, r2
 80014c2:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff fdc7 	bl	800105c <LL_RCC_MSI_SetCalibTrimming>
 80014ce:	e015      	b.n	80014fc <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014d0:	f7ff fd7f 	bl	8000fd2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014d4:	f7ff fa02 	bl	80008dc <HAL_GetTick>
 80014d8:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014dc:	f7ff f9fe 	bl	80008dc <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e2a5      	b.n	8001a3a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80014ee:	f7ff fd7e 	bl	8000fee <LL_RCC_MSI_IsReady>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1f1      	bne.n	80014dc <HAL_RCC_OscConfig+0x194>
 80014f8:	e000      	b.n	80014fc <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80014fa:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	2b00      	cmp	r3, #0
 8001506:	d058      	beq.n	80015ba <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	2b08      	cmp	r3, #8
 800150c:	d005      	beq.n	800151a <HAL_RCC_OscConfig+0x1d2>
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	2b0c      	cmp	r3, #12
 8001512:	d108      	bne.n	8001526 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	2b03      	cmp	r3, #3
 8001518:	d105      	bne.n	8001526 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d14b      	bne.n	80015ba <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e289      	b.n	8001a3a <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001538:	4313      	orrs	r3, r2
 800153a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001544:	d102      	bne.n	800154c <HAL_RCC_OscConfig+0x204>
 8001546:	f7ff fc86 	bl	8000e56 <LL_RCC_HSE_Enable>
 800154a:	e00d      	b.n	8001568 <HAL_RCC_OscConfig+0x220>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001554:	d104      	bne.n	8001560 <HAL_RCC_OscConfig+0x218>
 8001556:	f7ff fc51 	bl	8000dfc <LL_RCC_HSE_EnableTcxo>
 800155a:	f7ff fc7c 	bl	8000e56 <LL_RCC_HSE_Enable>
 800155e:	e003      	b.n	8001568 <HAL_RCC_OscConfig+0x220>
 8001560:	f7ff fc87 	bl	8000e72 <LL_RCC_HSE_Disable>
 8001564:	f7ff fc58 	bl	8000e18 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d012      	beq.n	8001596 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001570:	f7ff f9b4 	bl	80008dc <HAL_GetTick>
 8001574:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001578:	f7ff f9b0 	bl	80008dc <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b64      	cmp	r3, #100	; 0x64
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e257      	b.n	8001a3a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800158a:	f7ff fc80 	bl	8000e8e <LL_RCC_HSE_IsReady>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0f1      	beq.n	8001578 <HAL_RCC_OscConfig+0x230>
 8001594:	e011      	b.n	80015ba <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001596:	f7ff f9a1 	bl	80008dc <HAL_GetTick>
 800159a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800159e:	f7ff f99d 	bl	80008dc <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b64      	cmp	r3, #100	; 0x64
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e244      	b.n	8001a3a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80015b0:	f7ff fc6d 	bl	8000e8e <LL_RCC_HSE_IsReady>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f1      	bne.n	800159e <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d046      	beq.n	8001654 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	2b04      	cmp	r3, #4
 80015ca:	d005      	beq.n	80015d8 <HAL_RCC_OscConfig+0x290>
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	2b0c      	cmp	r3, #12
 80015d0:	d10e      	bne.n	80015f0 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d10b      	bne.n	80015f0 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d101      	bne.n	80015e4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e22a      	b.n	8001a3a <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	695b      	ldr	r3, [r3, #20]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff fc8e 	bl	8000f0a <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80015ee:	e031      	b.n	8001654 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	691b      	ldr	r3, [r3, #16]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d019      	beq.n	800162c <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015f8:	f7ff fc5a 	bl	8000eb0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015fc:	f7ff f96e 	bl	80008dc <HAL_GetTick>
 8001600:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001604:	f7ff f96a 	bl	80008dc <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e211      	b.n	8001a3a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001616:	f7ff fc67 	bl	8000ee8 <LL_RCC_HSI_IsReady>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0f1      	beq.n	8001604 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	695b      	ldr	r3, [r3, #20]
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff fc70 	bl	8000f0a <LL_RCC_HSI_SetCalibTrimming>
 800162a:	e013      	b.n	8001654 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800162c:	f7ff fc4e 	bl	8000ecc <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001630:	f7ff f954 	bl	80008dc <HAL_GetTick>
 8001634:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001638:	f7ff f950 	bl	80008dc <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e1f7      	b.n	8001a3a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800164a:	f7ff fc4d 	bl	8000ee8 <LL_RCC_HSI_IsReady>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d1f1      	bne.n	8001638 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0308 	and.w	r3, r3, #8
 800165c:	2b00      	cmp	r3, #0
 800165e:	d06e      	beq.n	800173e <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d056      	beq.n	8001716 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800166c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001670:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	69da      	ldr	r2, [r3, #28]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f003 0310 	and.w	r3, r3, #16
 800167c:	429a      	cmp	r2, r3
 800167e:	d031      	beq.n	80016e4 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d006      	beq.n	8001698 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001690:	2b00      	cmp	r3, #0
 8001692:	d101      	bne.n	8001698 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e1d0      	b.n	8001a3a <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d013      	beq.n	80016ca <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80016a2:	f7ff fc67 	bl	8000f74 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80016a6:	f7ff f919 	bl	80008dc <HAL_GetTick>
 80016aa:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80016ac:	e008      	b.n	80016c0 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ae:	f7ff f915 	bl	80008dc <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b11      	cmp	r3, #17
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e1bc      	b.n	8001a3a <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80016c0:	f7ff fc68 	bl	8000f94 <LL_RCC_LSI_IsReady>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f1      	bne.n	80016ae <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80016ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016d2:	f023 0210 	bic.w	r2, r3, #16
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016de:	4313      	orrs	r3, r2
 80016e0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016e4:	f7ff fc36 	bl	8000f54 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e8:	f7ff f8f8 	bl	80008dc <HAL_GetTick>
 80016ec:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80016ee:	e00c      	b.n	800170a <HAL_RCC_OscConfig+0x3c2>
 80016f0:	20000000 	.word	0x20000000
 80016f4:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016f8:	f7ff f8f0 	bl	80008dc <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b11      	cmp	r3, #17
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e197      	b.n	8001a3a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800170a:	f7ff fc43 	bl	8000f94 <LL_RCC_LSI_IsReady>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d0f1      	beq.n	80016f8 <HAL_RCC_OscConfig+0x3b0>
 8001714:	e013      	b.n	800173e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001716:	f7ff fc2d 	bl	8000f74 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800171a:	f7ff f8df 	bl	80008dc <HAL_GetTick>
 800171e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001722:	f7ff f8db 	bl	80008dc <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b11      	cmp	r3, #17
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e182      	b.n	8001a3a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001734:	f7ff fc2e 	bl	8000f94 <LL_RCC_LSI_IsReady>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1f1      	bne.n	8001722 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0304 	and.w	r3, r3, #4
 8001746:	2b00      	cmp	r3, #0
 8001748:	f000 80d8 	beq.w	80018fc <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800174c:	f7ff fb44 	bl	8000dd8 <LL_PWR_IsEnabledBkUpAccess>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d113      	bne.n	800177e <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001756:	f7ff fb0d 	bl	8000d74 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800175a:	f7ff f8bf 	bl	80008dc <HAL_GetTick>
 800175e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001762:	f7ff f8bb 	bl	80008dc <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e162      	b.n	8001a3a <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001774:	f7ff fb30 	bl	8000dd8 <LL_PWR_IsEnabledBkUpAccess>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d0f1      	beq.n	8001762 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d07b      	beq.n	800187e <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	2b85      	cmp	r3, #133	; 0x85
 800178c:	d003      	beq.n	8001796 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	2b05      	cmp	r3, #5
 8001794:	d109      	bne.n	80017aa <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001796:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800179a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800179e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017a2:	f043 0304 	orr.w	r3, r3, #4
 80017a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017aa:	f7ff f897 	bl	80008dc <HAL_GetTick>
 80017ae:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80017b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80017c4:	e00a      	b.n	80017dc <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017c6:	f7ff f889 	bl	80008dc <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e12e      	b.n	8001a3a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80017dc:	f7ff fba9 	bl	8000f32 <LL_RCC_LSE_IsReady>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0ef      	beq.n	80017c6 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	2b81      	cmp	r3, #129	; 0x81
 80017ec:	d003      	beq.n	80017f6 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	2b85      	cmp	r3, #133	; 0x85
 80017f4:	d121      	bne.n	800183a <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f6:	f7ff f871 	bl	80008dc <HAL_GetTick>
 80017fa:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80017fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001804:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800180c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001810:	e00a      	b.n	8001828 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001812:	f7ff f863 	bl	80008dc <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001820:	4293      	cmp	r3, r2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e108      	b.n	8001a3a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800182c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001830:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001834:	2b00      	cmp	r3, #0
 8001836:	d0ec      	beq.n	8001812 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001838:	e060      	b.n	80018fc <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183a:	f7ff f84f 	bl	80008dc <HAL_GetTick>
 800183e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001848:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800184c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001850:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001854:	e00a      	b.n	800186c <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001856:	f7ff f841 	bl	80008dc <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	f241 3288 	movw	r2, #5000	; 0x1388
 8001864:	4293      	cmp	r3, r2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e0e6      	b.n	8001a3a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800186c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001874:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1ec      	bne.n	8001856 <HAL_RCC_OscConfig+0x50e>
 800187c:	e03e      	b.n	80018fc <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800187e:	f7ff f82d 	bl	80008dc <HAL_GetTick>
 8001882:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800188c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001890:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001894:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001898:	e00a      	b.n	80018b0 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800189a:	f7ff f81f 	bl	80008dc <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e0c4      	b.n	8001a3a <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80018b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d1ec      	bne.n	800189a <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c0:	f7ff f80c 	bl	80008dc <HAL_GetTick>
 80018c4:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80018c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018d2:	f023 0301 	bic.w	r3, r3, #1
 80018d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80018da:	e00a      	b.n	80018f2 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018dc:	f7fe fffe 	bl	80008dc <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e0a3      	b.n	8001a3a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80018f2:	f7ff fb1e 	bl	8000f32 <LL_RCC_LSE_IsReady>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1ef      	bne.n	80018dc <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001900:	2b00      	cmp	r3, #0
 8001902:	f000 8099 	beq.w	8001a38 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	2b0c      	cmp	r3, #12
 800190a:	d06c      	beq.n	80019e6 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001910:	2b02      	cmp	r3, #2
 8001912:	d14b      	bne.n	80019ac <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001914:	f7ff fc74 	bl	8001200 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001918:	f7fe ffe0 	bl	80008dc <HAL_GetTick>
 800191c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001920:	f7fe ffdc 	bl	80008dc <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b0a      	cmp	r3, #10
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e083      	b.n	8001a3a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001932:	f7ff fc73 	bl	800121c <LL_RCC_PLL_IsReady>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1f1      	bne.n	8001920 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800193c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001940:	68da      	ldr	r2, [r3, #12]
 8001942:	4b40      	ldr	r3, [pc, #256]	; (8001a44 <HAL_RCC_OscConfig+0x6fc>)
 8001944:	4013      	ands	r3, r2
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800194e:	4311      	orrs	r1, r2
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001954:	0212      	lsls	r2, r2, #8
 8001956:	4311      	orrs	r1, r2
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800195c:	4311      	orrs	r1, r2
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001962:	4311      	orrs	r1, r2
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001968:	430a      	orrs	r2, r1
 800196a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800196e:	4313      	orrs	r3, r2
 8001970:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001972:	f7ff fc37 	bl	80011e4 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001976:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001984:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001986:	f7fe ffa9 	bl	80008dc <HAL_GetTick>
 800198a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800198e:	f7fe ffa5 	bl	80008dc <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b0a      	cmp	r3, #10
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e04c      	b.n	8001a3a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80019a0:	f7ff fc3c 	bl	800121c <LL_RCC_PLL_IsReady>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0f1      	beq.n	800198e <HAL_RCC_OscConfig+0x646>
 80019aa:	e045      	b.n	8001a38 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ac:	f7ff fc28 	bl	8001200 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b0:	f7fe ff94 	bl	80008dc <HAL_GetTick>
 80019b4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b8:	f7fe ff90 	bl	80008dc <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b0a      	cmp	r3, #10
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e037      	b.n	8001a3a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80019ca:	f7ff fc27 	bl	800121c <LL_RCC_PLL_IsReady>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1f1      	bne.n	80019b8 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80019d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019d8:	68da      	ldr	r2, [r3, #12]
 80019da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019de:	4b1a      	ldr	r3, [pc, #104]	; (8001a48 <HAL_RCC_OscConfig+0x700>)
 80019e0:	4013      	ands	r3, r2
 80019e2:	60cb      	str	r3, [r1, #12]
 80019e4:	e028      	b.n	8001a38 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d101      	bne.n	80019f2 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e023      	b.n	8001a3a <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	f003 0203 	and.w	r2, r3, #3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d115      	bne.n	8001a34 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d10e      	bne.n	8001a34 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a20:	021b      	lsls	r3, r3, #8
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d106      	bne.n	8001a34 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d001      	beq.n	8001a38 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e000      	b.n	8001a3a <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3720      	adds	r7, #32
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	11c1808c 	.word	0x11c1808c
 8001a48:	eefefffc 	.word	0xeefefffc

08001a4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d101      	bne.n	8001a60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e12c      	b.n	8001cba <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a60:	4b98      	ldr	r3, [pc, #608]	; (8001cc4 <HAL_RCC_ClockConfig+0x278>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0307 	and.w	r3, r3, #7
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d91b      	bls.n	8001aa6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a6e:	4b95      	ldr	r3, [pc, #596]	; (8001cc4 <HAL_RCC_ClockConfig+0x278>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f023 0207 	bic.w	r2, r3, #7
 8001a76:	4993      	ldr	r1, [pc, #588]	; (8001cc4 <HAL_RCC_ClockConfig+0x278>)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a7e:	f7fe ff2d 	bl	80008dc <HAL_GetTick>
 8001a82:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001a86:	f7fe ff29 	bl	80008dc <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e110      	b.n	8001cba <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a98:	4b8a      	ldr	r3, [pc, #552]	; (8001cc4 <HAL_RCC_ClockConfig+0x278>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0307 	and.w	r3, r3, #7
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d1ef      	bne.n	8001a86 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d016      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff fb02 	bl	80010c0 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001abc:	f7fe ff0e 	bl	80008dc <HAL_GetTick>
 8001ac0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001ac4:	f7fe ff0a 	bl	80008dc <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e0f1      	b.n	8001cba <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001ad6:	f7ff fbdf 	bl	8001298 <LL_RCC_IsActiveFlag_HPRE>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0f1      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0320 	and.w	r3, r3, #32
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d016      	beq.n	8001b1a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	695b      	ldr	r3, [r3, #20]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff faf8 	bl	80010e6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001af6:	f7fe fef1 	bl	80008dc <HAL_GetTick>
 8001afa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001afe:	f7fe feed 	bl	80008dc <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e0d4      	b.n	8001cba <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001b10:	f7ff fbd3 	bl	80012ba <LL_RCC_IsActiveFlag_C2HPRE>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0f1      	beq.n	8001afe <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d016      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff faf0 	bl	8001110 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001b30:	f7fe fed4 	bl	80008dc <HAL_GetTick>
 8001b34:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001b38:	f7fe fed0 	bl	80008dc <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e0b7      	b.n	8001cba <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001b4a:	f7ff fbc8 	bl	80012de <LL_RCC_IsActiveFlag_SHDHPRE>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d0f1      	beq.n	8001b38 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d016      	beq.n	8001b8e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff fae9 	bl	800113c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001b6a:	f7fe feb7 	bl	80008dc <HAL_GetTick>
 8001b6e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001b72:	f7fe feb3 	bl	80008dc <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e09a      	b.n	8001cba <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001b84:	f7ff fbbd 	bl	8001302 <LL_RCC_IsActiveFlag_PPRE1>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d0f1      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0308 	and.w	r3, r3, #8
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d017      	beq.n	8001bca <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff fade 	bl	8001162 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001ba6:	f7fe fe99 	bl	80008dc <HAL_GetTick>
 8001baa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001bae:	f7fe fe95 	bl	80008dc <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e07c      	b.n	8001cba <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001bc0:	f7ff fbb0 	bl	8001324 <LL_RCC_IsActiveFlag_PPRE2>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0f1      	beq.n	8001bae <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d043      	beq.n	8001c5e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d106      	bne.n	8001bec <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001bde:	f7ff f956 	bl	8000e8e <LL_RCC_HSE_IsReady>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d11e      	bne.n	8001c26 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e066      	b.n	8001cba <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b03      	cmp	r3, #3
 8001bf2:	d106      	bne.n	8001c02 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001bf4:	f7ff fb12 	bl	800121c <LL_RCC_PLL_IsReady>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d113      	bne.n	8001c26 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e05b      	b.n	8001cba <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d106      	bne.n	8001c18 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001c0a:	f7ff f9f0 	bl	8000fee <LL_RCC_MSI_IsReady>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d108      	bne.n	8001c26 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e050      	b.n	8001cba <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001c18:	f7ff f966 	bl	8000ee8 <LL_RCC_HSI_IsReady>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e049      	b.n	8001cba <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff fa2a 	bl	8001084 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c30:	f7fe fe54 	bl	80008dc <HAL_GetTick>
 8001c34:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c36:	e00a      	b.n	8001c4e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c38:	f7fe fe50 	bl	80008dc <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e035      	b.n	8001cba <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c4e:	f7ff fa2c 	bl	80010aa <LL_RCC_GetSysClkSource>
 8001c52:	4602      	mov	r2, r0
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d1ec      	bne.n	8001c38 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c5e:	4b19      	ldr	r3, [pc, #100]	; (8001cc4 <HAL_RCC_ClockConfig+0x278>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d21b      	bcs.n	8001ca4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6c:	4b15      	ldr	r3, [pc, #84]	; (8001cc4 <HAL_RCC_ClockConfig+0x278>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f023 0207 	bic.w	r2, r3, #7
 8001c74:	4913      	ldr	r1, [pc, #76]	; (8001cc4 <HAL_RCC_ClockConfig+0x278>)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c7c:	f7fe fe2e 	bl	80008dc <HAL_GetTick>
 8001c80:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001c84:	f7fe fe2a 	bl	80008dc <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e011      	b.n	8001cba <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c96:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <HAL_RCC_ClockConfig+0x278>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d1ef      	bne.n	8001c84 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001ca4:	f000 f8b4 	bl	8001e10 <HAL_RCC_GetHCLKFreq>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	4a07      	ldr	r2, [pc, #28]	; (8001cc8 <HAL_RCC_ClockConfig+0x27c>)
 8001cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8001cae:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <HAL_RCC_ClockConfig+0x280>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe fdc6 	bl	8000844 <HAL_InitTick>
 8001cb8:	4603      	mov	r3, r0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	58004000 	.word	0x58004000
 8001cc8:	20000000 	.word	0x20000000
 8001ccc:	20000004 	.word	0x20000004

08001cd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cd0:	b590      	push	{r4, r7, lr}
 8001cd2:	b087      	sub	sp, #28
 8001cd4:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cde:	f7ff f9e4 	bl	80010aa <LL_RCC_GetSysClkSource>
 8001ce2:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ce4:	f7ff facd 	bl	8001282 <LL_RCC_PLL_GetMainSource>
 8001ce8:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d005      	beq.n	8001cfc <HAL_RCC_GetSysClockFreq+0x2c>
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	2b0c      	cmp	r3, #12
 8001cf4:	d139      	bne.n	8001d6a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d136      	bne.n	8001d6a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001cfc:	f7ff f987 	bl	800100e <LL_RCC_MSI_IsEnabledRangeSelect>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d115      	bne.n	8001d32 <HAL_RCC_GetSysClockFreq+0x62>
 8001d06:	f7ff f982 	bl	800100e <LL_RCC_MSI_IsEnabledRangeSelect>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d106      	bne.n	8001d1e <HAL_RCC_GetSysClockFreq+0x4e>
 8001d10:	f7ff f98d 	bl	800102e <LL_RCC_MSI_GetRange>
 8001d14:	4603      	mov	r3, r0
 8001d16:	0a1b      	lsrs	r3, r3, #8
 8001d18:	f003 030f 	and.w	r3, r3, #15
 8001d1c:	e005      	b.n	8001d2a <HAL_RCC_GetSysClockFreq+0x5a>
 8001d1e:	f7ff f991 	bl	8001044 <LL_RCC_MSI_GetRangeAfterStandby>
 8001d22:	4603      	mov	r3, r0
 8001d24:	0a1b      	lsrs	r3, r3, #8
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	4a36      	ldr	r2, [pc, #216]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x134>)
 8001d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d30:	e014      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0x8c>
 8001d32:	f7ff f96c 	bl	800100e <LL_RCC_MSI_IsEnabledRangeSelect>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d106      	bne.n	8001d4a <HAL_RCC_GetSysClockFreq+0x7a>
 8001d3c:	f7ff f977 	bl	800102e <LL_RCC_MSI_GetRange>
 8001d40:	4603      	mov	r3, r0
 8001d42:	091b      	lsrs	r3, r3, #4
 8001d44:	f003 030f 	and.w	r3, r3, #15
 8001d48:	e005      	b.n	8001d56 <HAL_RCC_GetSysClockFreq+0x86>
 8001d4a:	f7ff f97b 	bl	8001044 <LL_RCC_MSI_GetRangeAfterStandby>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	091b      	lsrs	r3, r3, #4
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	4a2b      	ldr	r2, [pc, #172]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x134>)
 8001d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d5c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d115      	bne.n	8001d90 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001d68:	e012      	b.n	8001d90 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	2b04      	cmp	r3, #4
 8001d6e:	d102      	bne.n	8001d76 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d70:	4b25      	ldr	r3, [pc, #148]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d72:	617b      	str	r3, [r7, #20]
 8001d74:	e00c      	b.n	8001d90 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	d109      	bne.n	8001d90 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001d7c:	f7ff f85a 	bl	8000e34 <LL_RCC_HSE_IsEnabledDiv2>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d102      	bne.n	8001d8c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8001d86:	4b20      	ldr	r3, [pc, #128]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d88:	617b      	str	r3, [r7, #20]
 8001d8a:	e001      	b.n	8001d90 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001d8c:	4b1f      	ldr	r3, [pc, #124]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001d8e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d90:	f7ff f98b 	bl	80010aa <LL_RCC_GetSysClkSource>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b0c      	cmp	r3, #12
 8001d98:	d12f      	bne.n	8001dfa <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8001d9a:	f7ff fa72 	bl	8001282 <LL_RCC_PLL_GetMainSource>
 8001d9e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d003      	beq.n	8001dae <HAL_RCC_GetSysClockFreq+0xde>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2b03      	cmp	r3, #3
 8001daa:	d003      	beq.n	8001db4 <HAL_RCC_GetSysClockFreq+0xe4>
 8001dac:	e00d      	b.n	8001dca <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8001dae:	4b16      	ldr	r3, [pc, #88]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x138>)
 8001db0:	60fb      	str	r3, [r7, #12]
        break;
 8001db2:	e00d      	b.n	8001dd0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001db4:	f7ff f83e 	bl	8000e34 <LL_RCC_HSE_IsEnabledDiv2>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d102      	bne.n	8001dc4 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8001dbe:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x138>)
 8001dc0:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8001dc2:	e005      	b.n	8001dd0 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8001dc4:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001dc6:	60fb      	str	r3, [r7, #12]
        break;
 8001dc8:	e002      	b.n	8001dd0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	60fb      	str	r3, [r7, #12]
        break;
 8001dce:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001dd0:	f7ff fa35 	bl	800123e <LL_RCC_PLL_GetN>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	fb03 f402 	mul.w	r4, r3, r2
 8001ddc:	f7ff fa46 	bl	800126c <LL_RCC_PLL_GetDivider>
 8001de0:	4603      	mov	r3, r0
 8001de2:	091b      	lsrs	r3, r3, #4
 8001de4:	3301      	adds	r3, #1
 8001de6:	fbb4 f4f3 	udiv	r4, r4, r3
 8001dea:	f7ff fa34 	bl	8001256 <LL_RCC_PLL_GetR>
 8001dee:	4603      	mov	r3, r0
 8001df0:	0f5b      	lsrs	r3, r3, #29
 8001df2:	3301      	adds	r3, #1
 8001df4:	fbb4 f3f3 	udiv	r3, r4, r3
 8001df8:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8001dfa:	697b      	ldr	r3, [r7, #20]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	371c      	adds	r7, #28
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd90      	pop	{r4, r7, pc}
 8001e04:	08003028 	.word	0x08003028
 8001e08:	00f42400 	.word	0x00f42400
 8001e0c:	01e84800 	.word	0x01e84800

08001e10 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e10:	b598      	push	{r3, r4, r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001e14:	f7ff ff5c 	bl	8001cd0 <HAL_RCC_GetSysClockFreq>
 8001e18:	4604      	mov	r4, r0
 8001e1a:	f7ff f9b5 	bl	8001188 <LL_RCC_GetAHBPrescaler>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	091b      	lsrs	r3, r3, #4
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	4a03      	ldr	r2, [pc, #12]	; (8001e34 <HAL_RCC_GetHCLKFreq+0x24>)
 8001e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e2c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	bd98      	pop	{r3, r4, r7, pc}
 8001e34:	08002fc8 	.word	0x08002fc8

08001e38 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e38:	b598      	push	{r3, r4, r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001e3c:	f7ff ffe8 	bl	8001e10 <HAL_RCC_GetHCLKFreq>
 8001e40:	4604      	mov	r4, r0
 8001e42:	f7ff f9b9 	bl	80011b8 <LL_RCC_GetAPB1Prescaler>
 8001e46:	4603      	mov	r3, r0
 8001e48:	0a1b      	lsrs	r3, r3, #8
 8001e4a:	4a03      	ldr	r2, [pc, #12]	; (8001e58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e50:	fa24 f303 	lsr.w	r3, r4, r3
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	bd98      	pop	{r3, r4, r7, pc}
 8001e58:	08003008 	.word	0x08003008

08001e5c <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e5c:	b598      	push	{r3, r4, r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8001e60:	f7ff ffd6 	bl	8001e10 <HAL_RCC_GetHCLKFreq>
 8001e64:	4604      	mov	r4, r0
 8001e66:	f7ff f9b2 	bl	80011ce <LL_RCC_GetAPB2Prescaler>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	0adb      	lsrs	r3, r3, #11
 8001e6e:	4a03      	ldr	r2, [pc, #12]	; (8001e7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e74:	fa24 f303 	lsr.w	r3, r4, r3
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	bd98      	pop	{r3, r4, r7, pc}
 8001e7c:	08003008 	.word	0x08003008

08001e80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8001e80:	b590      	push	{r4, r7, lr}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	091b      	lsrs	r3, r3, #4
 8001e8c:	f003 030f 	and.w	r3, r3, #15
 8001e90:	4a10      	ldr	r2, [pc, #64]	; (8001ed4 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8001e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e96:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8001e98:	f7ff f981 	bl	800119e <LL_RCC_GetAHB3Prescaler>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	091b      	lsrs	r3, r3, #4
 8001ea0:	f003 030f 	and.w	r3, r3, #15
 8001ea4:	4a0c      	ldr	r2, [pc, #48]	; (8001ed8 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8001ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb0:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	4a09      	ldr	r2, [pc, #36]	; (8001edc <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8001eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eba:	0c9c      	lsrs	r4, r3, #18
 8001ebc:	f7fe ff76 	bl	8000dac <HAL_PWREx_GetVoltageRange>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4620      	mov	r0, r4
 8001ec6:	f000 f80b 	bl	8001ee0 <RCC_SetFlashLatency>
 8001eca:	4603      	mov	r3, r0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd90      	pop	{r4, r7, pc}
 8001ed4:	08003028 	.word	0x08003028
 8001ed8:	08002fc8 	.word	0x08002fc8
 8001edc:	431bde83 	.word	0x431bde83

08001ee0 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08e      	sub	sp, #56	; 0x38
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8001eea:	4a3a      	ldr	r2, [pc, #232]	; (8001fd4 <RCC_SetFlashLatency+0xf4>)
 8001eec:	f107 0320 	add.w	r3, r7, #32
 8001ef0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ef4:	6018      	str	r0, [r3, #0]
 8001ef6:	3304      	adds	r3, #4
 8001ef8:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8001efa:	4a37      	ldr	r2, [pc, #220]	; (8001fd8 <RCC_SetFlashLatency+0xf8>)
 8001efc:	f107 0318 	add.w	r3, r7, #24
 8001f00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f04:	6018      	str	r0, [r3, #0]
 8001f06:	3304      	adds	r3, #4
 8001f08:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8001f0a:	4a34      	ldr	r2, [pc, #208]	; (8001fdc <RCC_SetFlashLatency+0xfc>)
 8001f0c:	f107 030c 	add.w	r3, r7, #12
 8001f10:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f12:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001f16:	2300      	movs	r3, #0
 8001f18:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f20:	d11b      	bne.n	8001f5a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001f22:	2300      	movs	r3, #0
 8001f24:	633b      	str	r3, [r7, #48]	; 0x30
 8001f26:	e014      	b.n	8001f52 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8001f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	3338      	adds	r3, #56	; 0x38
 8001f2e:	443b      	add	r3, r7
 8001f30:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001f34:	461a      	mov	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d807      	bhi.n	8001f4c <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	3338      	adds	r3, #56	; 0x38
 8001f42:	443b      	add	r3, r7
 8001f44:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001f48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001f4a:	e021      	b.n	8001f90 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f4e:	3301      	adds	r3, #1
 8001f50:	633b      	str	r3, [r7, #48]	; 0x30
 8001f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d9e7      	bls.n	8001f28 <RCC_SetFlashLatency+0x48>
 8001f58:	e01a      	b.n	8001f90 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f5e:	e014      	b.n	8001f8a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8001f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	3338      	adds	r3, #56	; 0x38
 8001f66:	443b      	add	r3, r7
 8001f68:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d807      	bhi.n	8001f84 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	3338      	adds	r3, #56	; 0x38
 8001f7a:	443b      	add	r3, r7
 8001f7c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001f80:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001f82:	e005      	b.n	8001f90 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f86:	3301      	adds	r3, #1
 8001f88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d9e7      	bls.n	8001f60 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f90:	4b13      	ldr	r3, [pc, #76]	; (8001fe0 <RCC_SetFlashLatency+0x100>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f023 0207 	bic.w	r2, r3, #7
 8001f98:	4911      	ldr	r1, [pc, #68]	; (8001fe0 <RCC_SetFlashLatency+0x100>)
 8001f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001fa0:	f7fe fc9c 	bl	80008dc <HAL_GetTick>
 8001fa4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001fa6:	e008      	b.n	8001fba <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001fa8:	f7fe fc98 	bl	80008dc <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d901      	bls.n	8001fba <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e007      	b.n	8001fca <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001fba:	4b09      	ldr	r3, [pc, #36]	; (8001fe0 <RCC_SetFlashLatency+0x100>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d1ef      	bne.n	8001fa8 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3738      	adds	r7, #56	; 0x38
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	08002fac 	.word	0x08002fac
 8001fd8:	08002fb4 	.word	0x08002fb4
 8001fdc:	08002fbc 	.word	0x08002fbc
 8001fe0:	58004000 	.word	0x58004000

08001fe4 <LL_RCC_LSE_IsReady>:
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d101      	bne.n	8001ffc <LL_RCC_LSE_IsReady+0x18>
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e000      	b.n	8001ffe <LL_RCC_LSE_IsReady+0x1a>
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr

08002006 <LL_RCC_SetUSARTClockSource>:
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800200e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002012:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	0c1b      	lsrs	r3, r3, #16
 800201a:	43db      	mvns	r3, r3
 800201c:	401a      	ands	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	b29b      	uxth	r3, r3
 8002022:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002026:	4313      	orrs	r3, r2
 8002028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	bc80      	pop	{r7}
 8002034:	4770      	bx	lr

08002036 <LL_RCC_SetI2SClockSource>:
{
 8002036:	b480      	push	{r7}
 8002038:	b083      	sub	sp, #12
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800203e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002046:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800204a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4313      	orrs	r3, r2
 8002052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr

08002060 <LL_RCC_SetLPUARTClockSource>:
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800206c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002070:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002074:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4313      	orrs	r3, r2
 800207c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr

0800208a <LL_RCC_SetI2CClockSource>:
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002096:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	091b      	lsrs	r3, r3, #4
 800209e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80020a2:	43db      	mvns	r3, r3
 80020a4:	401a      	ands	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	011b      	lsls	r3, r3, #4
 80020aa:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80020ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020b2:	4313      	orrs	r3, r2
 80020b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	bc80      	pop	{r7}
 80020c0:	4770      	bx	lr

080020c2 <LL_RCC_SetLPTIMClockSource>:
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80020ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	0c1b      	lsrs	r3, r3, #16
 80020d6:	041b      	lsls	r3, r3, #16
 80020d8:	43db      	mvns	r3, r3
 80020da:	401a      	ands	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	041b      	lsls	r3, r3, #16
 80020e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020e4:	4313      	orrs	r3, r2
 80020e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr

080020f4 <LL_RCC_SetRNGClockSource>:
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80020fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002104:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002108:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4313      	orrs	r3, r2
 8002110:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr

0800211e <LL_RCC_SetADCClockSource>:
{
 800211e:	b480      	push	{r7}
 8002120:	b083      	sub	sp, #12
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800212a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800212e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002132:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4313      	orrs	r3, r2
 800213a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr

08002148 <LL_RCC_SetRTCClockSource>:
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002158:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800215c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4313      	orrs	r3, r2
 8002164:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr

08002172 <LL_RCC_GetRTCClockSource>:
{
 8002172:	b480      	push	{r7}
 8002174:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800217a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800217e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002182:	4618      	mov	r0, r3
 8002184:	46bd      	mov	sp, r7
 8002186:	bc80      	pop	{r7}
 8002188:	4770      	bx	lr

0800218a <LL_RCC_ForceBackupDomainReset>:
{
 800218a:	b480      	push	{r7}
 800218c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800218e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002196:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800219a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800219e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80021a2:	bf00      	nop
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr

080021aa <LL_RCC_ReleaseBackupDomainReset>:
{
 80021aa:	b480      	push	{r7}
 80021ac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80021ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80021c2:	bf00      	nop
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr
	...

080021cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80021d8:	2300      	movs	r3, #0
 80021da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80021dc:	2300      	movs	r3, #0
 80021de:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d058      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80021ec:	f7fe fdc2 	bl	8000d74 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021f0:	f7fe fb74 	bl	80008dc <HAL_GetTick>
 80021f4:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80021f6:	e009      	b.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f8:	f7fe fb70 	bl	80008dc <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d902      	bls.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	74fb      	strb	r3, [r7, #19]
        break;
 800220a:	e006      	b.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800220c:	4b7b      	ldr	r3, [pc, #492]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002214:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002218:	d1ee      	bne.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800221a:	7cfb      	ldrb	r3, [r7, #19]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d13c      	bne.n	800229a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002220:	f7ff ffa7 	bl	8002172 <LL_RCC_GetRTCClockSource>
 8002224:	4602      	mov	r2, r0
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800222a:	429a      	cmp	r2, r3
 800222c:	d00f      	beq.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800222e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002236:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800223a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800223c:	f7ff ffa5 	bl	800218a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002240:	f7ff ffb3 	bl	80021aa <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002244:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d014      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002258:	f7fe fb40 	bl	80008dc <HAL_GetTick>
 800225c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800225e:	e00b      	b.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002260:	f7fe fb3c 	bl	80008dc <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	f241 3288 	movw	r2, #5000	; 0x1388
 800226e:	4293      	cmp	r3, r2
 8002270:	d902      	bls.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	74fb      	strb	r3, [r7, #19]
            break;
 8002276:	e004      	b.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002278:	f7ff feb4 	bl	8001fe4 <LL_RCC_LSE_IsReady>
 800227c:	4603      	mov	r3, r0
 800227e:	2b01      	cmp	r3, #1
 8002280:	d1ee      	bne.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002282:	7cfb      	ldrb	r3, [r7, #19]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d105      	bne.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff ff5b 	bl	8002148 <LL_RCC_SetRTCClockSource>
 8002292:	e004      	b.n	800229e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002294:	7cfb      	ldrb	r3, [r7, #19]
 8002296:	74bb      	strb	r3, [r7, #18]
 8002298:	e001      	b.n	800229e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800229a:	7cfb      	ldrb	r3, [r7, #19]
 800229c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d004      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff fea9 	bl	8002006 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d004      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff fe9e 	bl	8002006 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0320 	and.w	r3, r3, #32
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d004      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff fec0 	bl	8002060 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d004      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff fee6 	bl	80020c2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d004      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff fedb 	bl	80020c2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002314:	2b00      	cmp	r3, #0
 8002316:	d004      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff fed0 	bl	80020c2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800232a:	2b00      	cmp	r3, #0
 800232c:	d004      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff fea9 	bl	800208a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002340:	2b00      	cmp	r3, #0
 8002342:	d004      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff fe9e 	bl	800208a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002356:	2b00      	cmp	r3, #0
 8002358:	d004      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff fe93 	bl	800208a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0310 	and.w	r3, r3, #16
 800236c:	2b00      	cmp	r3, #0
 800236e:	d011      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff fe5e 	bl	8002036 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002382:	d107      	bne.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800238e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002392:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d010      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff fea5 	bl	80020f4 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d107      	bne.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80023b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023c0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d011      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff fea3 	bl	800211e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023e0:	d107      	bne.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80023e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f0:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80023f2:	7cbb      	ldrb	r3, [r7, #18]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3718      	adds	r7, #24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	58000400 	.word	0x58000400

08002400 <LL_RCC_GetUSARTClockSource>:
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8002408:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800240c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	401a      	ands	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	041b      	lsls	r3, r3, #16
 8002418:	4313      	orrs	r3, r2
}
 800241a:	4618      	mov	r0, r3
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr

08002424 <LL_RCC_GetLPUARTClockSource>:
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800242c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002430:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4013      	ands	r3, r2
}
 8002438:	4618      	mov	r0, r3
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	bc80      	pop	{r7}
 8002440:	4770      	bx	lr

08002442 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b082      	sub	sp, #8
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e042      	b.n	80024da <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800245a:	2b00      	cmp	r3, #0
 800245c:	d106      	bne.n	800246c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7fe f934 	bl	80006d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2224      	movs	r2, #36	; 0x24
 8002470:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 0201 	bic.w	r2, r2, #1
 8002482:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 f82d 	bl	80024e4 <UART_SetConfig>
 800248a:	4603      	mov	r3, r0
 800248c:	2b01      	cmp	r3, #1
 800248e:	d101      	bne.n	8002494 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e022      	b.n	80024da <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002498:	2b00      	cmp	r3, #0
 800249a:	d002      	beq.n	80024a2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 fa95 	bl	80029cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024c0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f042 0201 	orr.w	r2, r2, #1
 80024d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 fb1b 	bl	8002b0e <UART_CheckIdleState>
 80024d8:	4603      	mov	r3, r0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
	...

080024e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024e8:	b08c      	sub	sp, #48	; 0x30
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80024ee:	2300      	movs	r3, #0
 80024f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	431a      	orrs	r2, r3
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	431a      	orrs	r2, r3
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	4313      	orrs	r3, r2
 800250a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	4b94      	ldr	r3, [pc, #592]	; (8002764 <UART_SetConfig+0x280>)
 8002514:	4013      	ands	r3, r2
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	6812      	ldr	r2, [r2, #0]
 800251a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800251c:	430b      	orrs	r3, r1
 800251e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a89      	ldr	r2, [pc, #548]	; (8002768 <UART_SetConfig+0x284>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d004      	beq.n	8002550 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800254c:	4313      	orrs	r3, r2
 800254e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800255a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	6812      	ldr	r2, [r2, #0]
 8002562:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002564:	430b      	orrs	r3, r1
 8002566:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256e:	f023 010f 	bic.w	r1, r3, #15
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a7a      	ldr	r2, [pc, #488]	; (800276c <UART_SetConfig+0x288>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d127      	bne.n	80025d8 <UART_SetConfig+0xf4>
 8002588:	2003      	movs	r0, #3
 800258a:	f7ff ff39 	bl	8002400 <LL_RCC_GetUSARTClockSource>
 800258e:	4603      	mov	r3, r0
 8002590:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8002594:	2b03      	cmp	r3, #3
 8002596:	d81b      	bhi.n	80025d0 <UART_SetConfig+0xec>
 8002598:	a201      	add	r2, pc, #4	; (adr r2, 80025a0 <UART_SetConfig+0xbc>)
 800259a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800259e:	bf00      	nop
 80025a0:	080025b1 	.word	0x080025b1
 80025a4:	080025c1 	.word	0x080025c1
 80025a8:	080025b9 	.word	0x080025b9
 80025ac:	080025c9 	.word	0x080025c9
 80025b0:	2301      	movs	r3, #1
 80025b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025b6:	e080      	b.n	80026ba <UART_SetConfig+0x1d6>
 80025b8:	2302      	movs	r3, #2
 80025ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025be:	e07c      	b.n	80026ba <UART_SetConfig+0x1d6>
 80025c0:	2304      	movs	r3, #4
 80025c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025c6:	e078      	b.n	80026ba <UART_SetConfig+0x1d6>
 80025c8:	2308      	movs	r3, #8
 80025ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025ce:	e074      	b.n	80026ba <UART_SetConfig+0x1d6>
 80025d0:	2310      	movs	r3, #16
 80025d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025d6:	e070      	b.n	80026ba <UART_SetConfig+0x1d6>
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a64      	ldr	r2, [pc, #400]	; (8002770 <UART_SetConfig+0x28c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d138      	bne.n	8002654 <UART_SetConfig+0x170>
 80025e2:	200c      	movs	r0, #12
 80025e4:	f7ff ff0c 	bl	8002400 <LL_RCC_GetUSARTClockSource>
 80025e8:	4603      	mov	r3, r0
 80025ea:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80025ee:	2b0c      	cmp	r3, #12
 80025f0:	d82c      	bhi.n	800264c <UART_SetConfig+0x168>
 80025f2:	a201      	add	r2, pc, #4	; (adr r2, 80025f8 <UART_SetConfig+0x114>)
 80025f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f8:	0800262d 	.word	0x0800262d
 80025fc:	0800264d 	.word	0x0800264d
 8002600:	0800264d 	.word	0x0800264d
 8002604:	0800264d 	.word	0x0800264d
 8002608:	0800263d 	.word	0x0800263d
 800260c:	0800264d 	.word	0x0800264d
 8002610:	0800264d 	.word	0x0800264d
 8002614:	0800264d 	.word	0x0800264d
 8002618:	08002635 	.word	0x08002635
 800261c:	0800264d 	.word	0x0800264d
 8002620:	0800264d 	.word	0x0800264d
 8002624:	0800264d 	.word	0x0800264d
 8002628:	08002645 	.word	0x08002645
 800262c:	2300      	movs	r3, #0
 800262e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002632:	e042      	b.n	80026ba <UART_SetConfig+0x1d6>
 8002634:	2302      	movs	r3, #2
 8002636:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800263a:	e03e      	b.n	80026ba <UART_SetConfig+0x1d6>
 800263c:	2304      	movs	r3, #4
 800263e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002642:	e03a      	b.n	80026ba <UART_SetConfig+0x1d6>
 8002644:	2308      	movs	r3, #8
 8002646:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800264a:	e036      	b.n	80026ba <UART_SetConfig+0x1d6>
 800264c:	2310      	movs	r3, #16
 800264e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002652:	e032      	b.n	80026ba <UART_SetConfig+0x1d6>
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a43      	ldr	r2, [pc, #268]	; (8002768 <UART_SetConfig+0x284>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d12a      	bne.n	80026b4 <UART_SetConfig+0x1d0>
 800265e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8002662:	f7ff fedf 	bl	8002424 <LL_RCC_GetLPUARTClockSource>
 8002666:	4603      	mov	r3, r0
 8002668:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800266c:	d01a      	beq.n	80026a4 <UART_SetConfig+0x1c0>
 800266e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002672:	d81b      	bhi.n	80026ac <UART_SetConfig+0x1c8>
 8002674:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002678:	d00c      	beq.n	8002694 <UART_SetConfig+0x1b0>
 800267a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800267e:	d815      	bhi.n	80026ac <UART_SetConfig+0x1c8>
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <UART_SetConfig+0x1a8>
 8002684:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002688:	d008      	beq.n	800269c <UART_SetConfig+0x1b8>
 800268a:	e00f      	b.n	80026ac <UART_SetConfig+0x1c8>
 800268c:	2300      	movs	r3, #0
 800268e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002692:	e012      	b.n	80026ba <UART_SetConfig+0x1d6>
 8002694:	2302      	movs	r3, #2
 8002696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800269a:	e00e      	b.n	80026ba <UART_SetConfig+0x1d6>
 800269c:	2304      	movs	r3, #4
 800269e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026a2:	e00a      	b.n	80026ba <UART_SetConfig+0x1d6>
 80026a4:	2308      	movs	r3, #8
 80026a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026aa:	e006      	b.n	80026ba <UART_SetConfig+0x1d6>
 80026ac:	2310      	movs	r3, #16
 80026ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026b2:	e002      	b.n	80026ba <UART_SetConfig+0x1d6>
 80026b4:	2310      	movs	r3, #16
 80026b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a2a      	ldr	r2, [pc, #168]	; (8002768 <UART_SetConfig+0x284>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	f040 80a4 	bne.w	800280e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80026c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80026ca:	2b08      	cmp	r3, #8
 80026cc:	d823      	bhi.n	8002716 <UART_SetConfig+0x232>
 80026ce:	a201      	add	r2, pc, #4	; (adr r2, 80026d4 <UART_SetConfig+0x1f0>)
 80026d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d4:	080026f9 	.word	0x080026f9
 80026d8:	08002717 	.word	0x08002717
 80026dc:	08002701 	.word	0x08002701
 80026e0:	08002717 	.word	0x08002717
 80026e4:	08002707 	.word	0x08002707
 80026e8:	08002717 	.word	0x08002717
 80026ec:	08002717 	.word	0x08002717
 80026f0:	08002717 	.word	0x08002717
 80026f4:	0800270f 	.word	0x0800270f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026f8:	f7ff fb9e 	bl	8001e38 <HAL_RCC_GetPCLK1Freq>
 80026fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80026fe:	e010      	b.n	8002722 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002700:	4b1c      	ldr	r3, [pc, #112]	; (8002774 <UART_SetConfig+0x290>)
 8002702:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002704:	e00d      	b.n	8002722 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002706:	f7ff fae3 	bl	8001cd0 <HAL_RCC_GetSysClockFreq>
 800270a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800270c:	e009      	b.n	8002722 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800270e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002712:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002714:	e005      	b.n	8002722 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8002716:	2300      	movs	r3, #0
 8002718:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002720:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	2b00      	cmp	r3, #0
 8002726:	f000 8137 	beq.w	8002998 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272e:	4a12      	ldr	r2, [pc, #72]	; (8002778 <UART_SetConfig+0x294>)
 8002730:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002734:	461a      	mov	r2, r3
 8002736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002738:	fbb3 f3f2 	udiv	r3, r3, r2
 800273c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	4613      	mov	r3, r2
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	4413      	add	r3, r2
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	429a      	cmp	r2, r3
 800274c:	d305      	bcc.n	800275a <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	429a      	cmp	r2, r3
 8002758:	d910      	bls.n	800277c <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002760:	e11a      	b.n	8002998 <UART_SetConfig+0x4b4>
 8002762:	bf00      	nop
 8002764:	cfff69f3 	.word	0xcfff69f3
 8002768:	40008000 	.word	0x40008000
 800276c:	40013800 	.word	0x40013800
 8002770:	40004400 	.word	0x40004400
 8002774:	00f42400 	.word	0x00f42400
 8002778:	08003068 	.word	0x08003068
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277e:	2200      	movs	r2, #0
 8002780:	60bb      	str	r3, [r7, #8]
 8002782:	60fa      	str	r2, [r7, #12]
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002788:	4a8e      	ldr	r2, [pc, #568]	; (80029c4 <UART_SetConfig+0x4e0>)
 800278a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800278e:	b29b      	uxth	r3, r3
 8002790:	2200      	movs	r2, #0
 8002792:	603b      	str	r3, [r7, #0]
 8002794:	607a      	str	r2, [r7, #4]
 8002796:	e9d7 2300 	ldrd	r2, r3, [r7]
 800279a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800279e:	f7fd fceb 	bl	8000178 <__aeabi_uldivmod>
 80027a2:	4602      	mov	r2, r0
 80027a4:	460b      	mov	r3, r1
 80027a6:	4610      	mov	r0, r2
 80027a8:	4619      	mov	r1, r3
 80027aa:	f04f 0200 	mov.w	r2, #0
 80027ae:	f04f 0300 	mov.w	r3, #0
 80027b2:	020b      	lsls	r3, r1, #8
 80027b4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80027b8:	0202      	lsls	r2, r0, #8
 80027ba:	6979      	ldr	r1, [r7, #20]
 80027bc:	6849      	ldr	r1, [r1, #4]
 80027be:	0849      	lsrs	r1, r1, #1
 80027c0:	2000      	movs	r0, #0
 80027c2:	460c      	mov	r4, r1
 80027c4:	4605      	mov	r5, r0
 80027c6:	eb12 0804 	adds.w	r8, r2, r4
 80027ca:	eb43 0905 	adc.w	r9, r3, r5
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	469a      	mov	sl, r3
 80027d6:	4693      	mov	fp, r2
 80027d8:	4652      	mov	r2, sl
 80027da:	465b      	mov	r3, fp
 80027dc:	4640      	mov	r0, r8
 80027de:	4649      	mov	r1, r9
 80027e0:	f7fd fcca 	bl	8000178 <__aeabi_uldivmod>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	4613      	mov	r3, r2
 80027ea:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027f2:	d308      	bcc.n	8002806 <UART_SetConfig+0x322>
 80027f4:	6a3b      	ldr	r3, [r7, #32]
 80027f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027fa:	d204      	bcs.n	8002806 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6a3a      	ldr	r2, [r7, #32]
 8002802:	60da      	str	r2, [r3, #12]
 8002804:	e0c8      	b.n	8002998 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800280c:	e0c4      	b.n	8002998 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002816:	d167      	bne.n	80028e8 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8002818:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800281c:	2b08      	cmp	r3, #8
 800281e:	d828      	bhi.n	8002872 <UART_SetConfig+0x38e>
 8002820:	a201      	add	r2, pc, #4	; (adr r2, 8002828 <UART_SetConfig+0x344>)
 8002822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002826:	bf00      	nop
 8002828:	0800284d 	.word	0x0800284d
 800282c:	08002855 	.word	0x08002855
 8002830:	0800285d 	.word	0x0800285d
 8002834:	08002873 	.word	0x08002873
 8002838:	08002863 	.word	0x08002863
 800283c:	08002873 	.word	0x08002873
 8002840:	08002873 	.word	0x08002873
 8002844:	08002873 	.word	0x08002873
 8002848:	0800286b 	.word	0x0800286b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800284c:	f7ff faf4 	bl	8001e38 <HAL_RCC_GetPCLK1Freq>
 8002850:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002852:	e014      	b.n	800287e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002854:	f7ff fb02 	bl	8001e5c <HAL_RCC_GetPCLK2Freq>
 8002858:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800285a:	e010      	b.n	800287e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800285c:	4b5a      	ldr	r3, [pc, #360]	; (80029c8 <UART_SetConfig+0x4e4>)
 800285e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002860:	e00d      	b.n	800287e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002862:	f7ff fa35 	bl	8001cd0 <HAL_RCC_GetSysClockFreq>
 8002866:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002868:	e009      	b.n	800287e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800286a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800286e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002870:	e005      	b.n	800287e <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8002872:	2300      	movs	r3, #0
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800287c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 8089 	beq.w	8002998 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	4a4e      	ldr	r2, [pc, #312]	; (80029c4 <UART_SetConfig+0x4e0>)
 800288c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002890:	461a      	mov	r2, r3
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	fbb3 f3f2 	udiv	r3, r3, r2
 8002898:	005a      	lsls	r2, r3, #1
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	085b      	lsrs	r3, r3, #1
 80028a0:	441a      	add	r2, r3
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028ac:	6a3b      	ldr	r3, [r7, #32]
 80028ae:	2b0f      	cmp	r3, #15
 80028b0:	d916      	bls.n	80028e0 <UART_SetConfig+0x3fc>
 80028b2:	6a3b      	ldr	r3, [r7, #32]
 80028b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028b8:	d212      	bcs.n	80028e0 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80028ba:	6a3b      	ldr	r3, [r7, #32]
 80028bc:	b29b      	uxth	r3, r3
 80028be:	f023 030f 	bic.w	r3, r3, #15
 80028c2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80028c4:	6a3b      	ldr	r3, [r7, #32]
 80028c6:	085b      	lsrs	r3, r3, #1
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	8bfb      	ldrh	r3, [r7, #30]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	8bfa      	ldrh	r2, [r7, #30]
 80028dc:	60da      	str	r2, [r3, #12]
 80028de:	e05b      	b.n	8002998 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80028e6:	e057      	b.n	8002998 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80028e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80028ec:	2b08      	cmp	r3, #8
 80028ee:	d828      	bhi.n	8002942 <UART_SetConfig+0x45e>
 80028f0:	a201      	add	r2, pc, #4	; (adr r2, 80028f8 <UART_SetConfig+0x414>)
 80028f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f6:	bf00      	nop
 80028f8:	0800291d 	.word	0x0800291d
 80028fc:	08002925 	.word	0x08002925
 8002900:	0800292d 	.word	0x0800292d
 8002904:	08002943 	.word	0x08002943
 8002908:	08002933 	.word	0x08002933
 800290c:	08002943 	.word	0x08002943
 8002910:	08002943 	.word	0x08002943
 8002914:	08002943 	.word	0x08002943
 8002918:	0800293b 	.word	0x0800293b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800291c:	f7ff fa8c 	bl	8001e38 <HAL_RCC_GetPCLK1Freq>
 8002920:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002922:	e014      	b.n	800294e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002924:	f7ff fa9a 	bl	8001e5c <HAL_RCC_GetPCLK2Freq>
 8002928:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800292a:	e010      	b.n	800294e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800292c:	4b26      	ldr	r3, [pc, #152]	; (80029c8 <UART_SetConfig+0x4e4>)
 800292e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002930:	e00d      	b.n	800294e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002932:	f7ff f9cd 	bl	8001cd0 <HAL_RCC_GetSysClockFreq>
 8002936:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002938:	e009      	b.n	800294e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800293a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800293e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002940:	e005      	b.n	800294e <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8002942:	2300      	movs	r3, #0
 8002944:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800294c:	bf00      	nop
    }

    if (pclk != 0U)
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	2b00      	cmp	r3, #0
 8002952:	d021      	beq.n	8002998 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002958:	4a1a      	ldr	r2, [pc, #104]	; (80029c4 <UART_SetConfig+0x4e0>)
 800295a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800295e:	461a      	mov	r2, r3
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	fbb3 f2f2 	udiv	r2, r3, r2
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	085b      	lsrs	r3, r3, #1
 800296c:	441a      	add	r2, r3
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	fbb2 f3f3 	udiv	r3, r2, r3
 8002976:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002978:	6a3b      	ldr	r3, [r7, #32]
 800297a:	2b0f      	cmp	r3, #15
 800297c:	d909      	bls.n	8002992 <UART_SetConfig+0x4ae>
 800297e:	6a3b      	ldr	r3, [r7, #32]
 8002980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002984:	d205      	bcs.n	8002992 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002986:	6a3b      	ldr	r3, [r7, #32]
 8002988:	b29a      	uxth	r2, r3
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	60da      	str	r2, [r3, #12]
 8002990:	e002      	b.n	8002998 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	2201      	movs	r2, #1
 800299c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	2200      	movs	r2, #0
 80029ac:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	2200      	movs	r2, #0
 80029b2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80029b4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3730      	adds	r7, #48	; 0x30
 80029bc:	46bd      	mov	sp, r7
 80029be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029c2:	bf00      	nop
 80029c4:	08003068 	.word	0x08003068
 80029c8:	00f42400 	.word	0x00f42400

080029cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00a      	beq.n	80029f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00a      	beq.n	8002a18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00a      	beq.n	8002a3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00a      	beq.n	8002a5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a60:	f003 0310 	and.w	r3, r3, #16
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00a      	beq.n	8002a7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a82:	f003 0320 	and.w	r3, r3, #32
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00a      	beq.n	8002aa0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d01a      	beq.n	8002ae2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002aca:	d10a      	bne.n	8002ae2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00a      	beq.n	8002b04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	605a      	str	r2, [r3, #4]
  }
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc80      	pop	{r7}
 8002b0c:	4770      	bx	lr

08002b0e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b086      	sub	sp, #24
 8002b12:	af02      	add	r7, sp, #8
 8002b14:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002b1e:	f7fd fedd 	bl	80008dc <HAL_GetTick>
 8002b22:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b08      	cmp	r3, #8
 8002b30:	d10e      	bne.n	8002b50 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b32:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f832 	bl	8002baa <UART_WaitOnFlagUntilTimeout>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e028      	b.n	8002ba2 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0304 	and.w	r3, r3, #4
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	d10e      	bne.n	8002b7c <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b5e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 f81c 	bl	8002baa <UART_WaitOnFlagUntilTimeout>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e012      	b.n	8002ba2 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2220      	movs	r2, #32
 8002b80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2220      	movs	r2, #32
 8002b88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b09c      	sub	sp, #112	; 0x70
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	60f8      	str	r0, [r7, #12]
 8002bb2:	60b9      	str	r1, [r7, #8]
 8002bb4:	603b      	str	r3, [r7, #0]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bba:	e0a9      	b.n	8002d10 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc2:	f000 80a5 	beq.w	8002d10 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bc6:	f7fd fe89 	bl	80008dc <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d302      	bcc.n	8002bdc <UART_WaitOnFlagUntilTimeout+0x32>
 8002bd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d140      	bne.n	8002c5e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002be4:	e853 3f00 	ldrex	r3, [r3]
 8002be8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002bea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002bf0:	667b      	str	r3, [r7, #100]	; 0x64
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bfc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bfe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002c00:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002c02:	e841 2300 	strex	r3, r2, [r1]
 8002c06:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002c08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1e6      	bne.n	8002bdc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	3308      	adds	r3, #8
 8002c14:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c18:	e853 3f00 	ldrex	r3, [r3]
 8002c1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c20:	f023 0301 	bic.w	r3, r3, #1
 8002c24:	663b      	str	r3, [r7, #96]	; 0x60
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	3308      	adds	r3, #8
 8002c2c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c2e:	64ba      	str	r2, [r7, #72]	; 0x48
 8002c30:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002c34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c36:	e841 2300 	strex	r3, r2, [r1]
 8002c3a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002c3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1e5      	bne.n	8002c0e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2220      	movs	r2, #32
 8002c46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e069      	b.n	8002d32 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d051      	beq.n	8002d10 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c7a:	d149      	bne.n	8002d10 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c84:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8e:	e853 3f00 	ldrex	r3, [r3]
 8002c92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c96:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002c9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ca4:	637b      	str	r3, [r7, #52]	; 0x34
 8002ca6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002caa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cac:	e841 2300 	strex	r3, r2, [r1]
 8002cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1e6      	bne.n	8002c86 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	3308      	adds	r3, #8
 8002cbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	e853 3f00 	ldrex	r3, [r3]
 8002cc6:	613b      	str	r3, [r7, #16]
   return(result);
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	f023 0301 	bic.w	r3, r3, #1
 8002cce:	66bb      	str	r3, [r7, #104]	; 0x68
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	3308      	adds	r3, #8
 8002cd6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002cd8:	623a      	str	r2, [r7, #32]
 8002cda:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cdc:	69f9      	ldr	r1, [r7, #28]
 8002cde:	6a3a      	ldr	r2, [r7, #32]
 8002ce0:	e841 2300 	strex	r3, r2, [r1]
 8002ce4:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1e5      	bne.n	8002cb8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e010      	b.n	8002d32 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	69da      	ldr	r2, [r3, #28]
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	bf0c      	ite	eq
 8002d20:	2301      	moveq	r3, #1
 8002d22:	2300      	movne	r3, #0
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	461a      	mov	r2, r3
 8002d28:	79fb      	ldrb	r3, [r7, #7]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	f43f af46 	beq.w	8002bbc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3770      	adds	r7, #112	; 0x70
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b085      	sub	sp, #20
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d101      	bne.n	8002d50 <HAL_UARTEx_DisableFifoMode+0x16>
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	e027      	b.n	8002da0 <HAL_UARTEx_DisableFifoMode+0x66>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2224      	movs	r2, #36	; 0x24
 8002d5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 0201 	bic.w	r2, r2, #1
 8002d76:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002d7e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2220      	movs	r2, #32
 8002d92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3714      	adds	r7, #20
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bc80      	pop	{r7}
 8002da8:	4770      	bx	lr

08002daa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b084      	sub	sp, #16
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
 8002db2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d101      	bne.n	8002dc2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	e02d      	b.n	8002e1e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2224      	movs	r2, #36	; 0x24
 8002dce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0201 	bic.w	r2, r2, #1
 8002de8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 f850 	bl	8002ea4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b084      	sub	sp, #16
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
 8002e2e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d101      	bne.n	8002e3e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	e02d      	b.n	8002e9a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2224      	movs	r2, #36	; 0x24
 8002e4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f022 0201 	bic.w	r2, r2, #1
 8002e64:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	430a      	orrs	r2, r1
 8002e78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 f812 	bl	8002ea4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
	...

08002ea4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d108      	bne.n	8002ec6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002ec4:	e031      	b.n	8002f2a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002ec6:	2308      	movs	r3, #8
 8002ec8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002eca:	2308      	movs	r3, #8
 8002ecc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	0e5b      	lsrs	r3, r3, #25
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	0f5b      	lsrs	r3, r3, #29
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002eee:	7bbb      	ldrb	r3, [r7, #14]
 8002ef0:	7b3a      	ldrb	r2, [r7, #12]
 8002ef2:	4910      	ldr	r1, [pc, #64]	; (8002f34 <UARTEx_SetNbDataToProcess+0x90>)
 8002ef4:	5c8a      	ldrb	r2, [r1, r2]
 8002ef6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8002efa:	7b3a      	ldrb	r2, [r7, #12]
 8002efc:	490e      	ldr	r1, [pc, #56]	; (8002f38 <UARTEx_SetNbDataToProcess+0x94>)
 8002efe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002f00:	fb93 f3f2 	sdiv	r3, r3, r2
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
 8002f0e:	7b7a      	ldrb	r2, [r7, #13]
 8002f10:	4908      	ldr	r1, [pc, #32]	; (8002f34 <UARTEx_SetNbDataToProcess+0x90>)
 8002f12:	5c8a      	ldrb	r2, [r1, r2]
 8002f14:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8002f18:	7b7a      	ldrb	r2, [r7, #13]
 8002f1a:	4907      	ldr	r1, [pc, #28]	; (8002f38 <UARTEx_SetNbDataToProcess+0x94>)
 8002f1c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002f1e:	fb93 f3f2 	sdiv	r3, r3, r2
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8002f2a:	bf00      	nop
 8002f2c:	3714      	adds	r7, #20
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bc80      	pop	{r7}
 8002f32:	4770      	bx	lr
 8002f34:	08003080 	.word	0x08003080
 8002f38:	08003088 	.word	0x08003088

08002f3c <memset>:
 8002f3c:	4402      	add	r2, r0
 8002f3e:	4603      	mov	r3, r0
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d100      	bne.n	8002f46 <memset+0xa>
 8002f44:	4770      	bx	lr
 8002f46:	f803 1b01 	strb.w	r1, [r3], #1
 8002f4a:	e7f9      	b.n	8002f40 <memset+0x4>

08002f4c <__libc_init_array>:
 8002f4c:	b570      	push	{r4, r5, r6, lr}
 8002f4e:	4d0d      	ldr	r5, [pc, #52]	; (8002f84 <__libc_init_array+0x38>)
 8002f50:	4c0d      	ldr	r4, [pc, #52]	; (8002f88 <__libc_init_array+0x3c>)
 8002f52:	1b64      	subs	r4, r4, r5
 8002f54:	10a4      	asrs	r4, r4, #2
 8002f56:	2600      	movs	r6, #0
 8002f58:	42a6      	cmp	r6, r4
 8002f5a:	d109      	bne.n	8002f70 <__libc_init_array+0x24>
 8002f5c:	4d0b      	ldr	r5, [pc, #44]	; (8002f8c <__libc_init_array+0x40>)
 8002f5e:	4c0c      	ldr	r4, [pc, #48]	; (8002f90 <__libc_init_array+0x44>)
 8002f60:	f000 f818 	bl	8002f94 <_init>
 8002f64:	1b64      	subs	r4, r4, r5
 8002f66:	10a4      	asrs	r4, r4, #2
 8002f68:	2600      	movs	r6, #0
 8002f6a:	42a6      	cmp	r6, r4
 8002f6c:	d105      	bne.n	8002f7a <__libc_init_array+0x2e>
 8002f6e:	bd70      	pop	{r4, r5, r6, pc}
 8002f70:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f74:	4798      	blx	r3
 8002f76:	3601      	adds	r6, #1
 8002f78:	e7ee      	b.n	8002f58 <__libc_init_array+0xc>
 8002f7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f7e:	4798      	blx	r3
 8002f80:	3601      	adds	r6, #1
 8002f82:	e7f2      	b.n	8002f6a <__libc_init_array+0x1e>
 8002f84:	08003098 	.word	0x08003098
 8002f88:	08003098 	.word	0x08003098
 8002f8c:	08003098 	.word	0x08003098
 8002f90:	0800309c 	.word	0x0800309c

08002f94 <_init>:
 8002f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f96:	bf00      	nop
 8002f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f9a:	bc08      	pop	{r3}
 8002f9c:	469e      	mov	lr, r3
 8002f9e:	4770      	bx	lr

08002fa0 <_fini>:
 8002fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fa2:	bf00      	nop
 8002fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fa6:	bc08      	pop	{r3}
 8002fa8:	469e      	mov	lr, r3
 8002faa:	4770      	bx	lr
